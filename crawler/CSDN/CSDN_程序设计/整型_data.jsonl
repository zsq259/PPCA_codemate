{"Answer": "![图片说明](https://img-ask.csdn.net/upload/201911/23/1574492601_633599.png)\r\n单击代码片，把你的代码好好发出来，发的代码语法都有错", "Konwledge_Point": "整型", "Question": ["编写程序，求一个长度为10的整型数组的最大值和最大值所在位置以及最小值以及最小值所在位置。数组10个元素的值由键盘输入。   【输出形式】：  max:a[9}=10  min:a[0]=1;", ["#include ", "\nint main(int argc, char *argv[])", "\n{", "\n    int n,i,b,c,a[10] = {};", "\n    for(i=0;i\n    {", "\n        int temp;", "\n        scanf(\"%d\",&temp);", "\n        a[i]=temp;", "\n    } ", "\n    int min,max;", "\n    max=a[0];", "\n    min=a[0];", "\n    for(i=0;i\n    {", "\n        if(max", "\n        {", "\n           max=a[i];", "\n            b=i;    ", "\n        }           ", "\n        else if(min>a[i]){", "\n                        min=a[i];", "\n            c=i;", "\n        }", "\n\n", "}\nprintf(\"max:a[%d]=%d\\n\",b,max);\nprintf(\"min:a[%d]=%d\",c,min);\nreturn 0;\n", "\n\n", "}", "\n\n", "为什么最小值输出错误？求大佬帮助解答，拜托了"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你好&amp;#xff0c;首先scanf_s函数相较于scanf函数安全性较高&amp;#xff0c;这是MSDN中scanf_s的函数声明int scanf_s(const char *format [,argument]...);&lt;br /&gt;scanf函数安全性不够高&amp;#xff0c;例如要读取长度为5个元素的数组&amp;#xff0c;但是你在键盘上输入了6个元素&amp;#xff0c;就会造成数组越界访问。&lt;br /&gt;而scanf函数的参数相对于scanf多了一个&amp;#xff0c;请看下面的例子&lt;br /&gt;char c;&lt;br /&gt;scanf_s(&amp;#34;%c&amp;#34;, &amp;amp;c);&lt;br /&gt;scanf_s(&amp;#34;%c&amp;#34;, &amp;amp;c, 1);//1表示scanf_s函数最多只可以读取一个字符&amp;#xff0c;这样更安全&amp;#xff0c;如果是数组的话&amp;#xff0c;不会造成数组越界。&lt;br /&gt;另外&amp;#xff0c;你如果只是想解决在VS中使用scanf函数会报警告的话&amp;#xff0c;请看这篇文章&lt;a href=\"https://mp.csdn.net/mp_blog/creation/editor/122858508\" id=\"textarea_1648967689567_1648968909432_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://mp.csdn.net/mp_blog/creation/editor/122858508&lt;/span&gt;&lt;/a&gt;&amp;#xff0c;里面详细提到了解决方法。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["缺少scanf_s的整型参数（对应于转换说明符4）", ["#include<stdio.h>", "\n", "int main()", "{", "    int a;", "    float b;", "    char c;", "    scanf_s(\"%d,%f,%c\", &a, &b, &c);", "    printf(\"a=%d\\n\", a);", "    printf(\"b=%f\\n\", b);", "    printf(\"c=%c\\n\", c);", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt; 代码如下&amp;#xff1a;{如果对你有帮助&amp;#xff0c;可以给我个采纳吗&amp;#xff0c;谢谢!! 点击我这个回答右上方的【采纳】按钮}。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-objectivec\"&gt;#include&amp;lt;stdio.h&amp;gt;\n\nint main ()\n{\n\tint i &amp;#61; 0;\n\tint a[10];\n\tfor(i &amp;#61; 0;i &amp;lt; 10;i&amp;#43;&amp;#43;)\n\t{\n\t\tscanf(&amp;#34;%d&amp;#34;,&amp;amp;a[i]);\n\t}\n\tfor(i &amp;#61; 9; i &amp;gt;&amp;#61; 0; i--)\n\t{\n\t\tprintf(&amp;#34;%5d&amp;#34;,a[i]);\n\t}\n\treturn 0;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"45\" src=\"https://img-ask.csdnimg.cn/upload/1622989710937.png\" width=\"423\" /&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["定义一个长度为10的整型数组，从键盘上给其赋值，然后将数组中的元素按颠倒的顺序重新存放。", ["输入格式:", "\n\n", "在一行中给出10个整数，之间用空格隔开。", "\n\n", "输出格式:", "\n\n", "按颠倒次序将10个整数输出，每个数据输出宽度为5列。", "\n\n", "输入样例:", "\n\n", "在这里给出一组输入。例如：", "\n\n", "\n", "5 -3 6 7 8 -123 45 8 9 60", "\n\n", "输出样例:", "\n\n", "\n", "   60    9    8   45 -123    8    7    6   -3    5"]], "Tag": "程序设计"}
{"Answer": "# 问题解决的话，请点下采纳\r\n```\r\n#include &lt;stdio.h&gt;\r\nint main() {\r\nint a[6];\r\nfor (int i = 0; i &lt; 6; i++) scanf(\"%d\", &amp;a[i]);\r\nfor (int i = 0; i &lt; 5; i++)\r\nfor (int j = 0; j &lt; 5 - i; j++)\r\n{\r\nif (a[j] &lt; a[j + 1]) { int t = a[j]; a[j] = a[j + 1]; a[j + 1] = t; }\r\n}\r\nfor (int i = 0; i &lt; 6; i++) printf(\"%d \", a[i]);\r\nreturn 0;\r\n}\r\n```", "Konwledge_Point": "整型", "Question": ["c语言编程为整形数组a[6]输入数值，并使用冒泡排序将其从大到小排序？不知道该怎么做，求大佬解答？", ["c语言编程 为整形数组a[6]输入数值，并使用冒泡排序将其从大到小排序？求大佬帮忙解答！感谢！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/699610988566156.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt; &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;[] args)&lt;/span&gt; &lt;/span&gt;{\n       &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;};\n       Arrays.&lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(a);\n        System.out.&lt;span class=\"hljs-built_in\"&gt;println&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;第二大的数字为&amp;#34;&lt;/span&gt;&amp;#43;a[a.length&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;]);\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["建立一个整型数组共有十个元素", ["建立一个整型数组，共有十个元素，将其第二大的元素找出", "建立一个整型数组，共有十个元素，将其第二大的元素找出", "建立一个整形数组，共有十个元素，将其第二大的元素找出"]], "Tag": "程序设计"}
{"Answer": "排序算法，初学数组的人要基本会冒泡排序和选择排序，学习算法要了解更多。\r\n对每行排序。\r\n假设数组名为a，类型为long double，下标从1开始。\r\n我只打中间排序的部分，我用冒泡。\r\n\r\n```cpp\r\nfor (int k = 1;k &lt;= 4;k ++)\r\n for (int i = 1;i &lt;= 5 - 1;i ++)\r\n  for (int j = 1;j &lt;= 5 - i;j ++)\r\n   if (a[k][j] &gt; a[k][j + 1]) {\r\n    long double t = a[k][j];\r\n    a[k][j] = a[k][j + 1];\r\n    a[k][j + 1] = t;\r\n   }\r\n```\r\n\r\n### 望采纳\r\n\r\n# 超时你把输入二维数组改为最外循环内先输入一维数组再排序，或找找快排和归并排。\r\n## 下面那位头文件是C++应用程序的，编译错没办法，测试系统的ide基本不是application的。", "Konwledge_Point": "整型", "Question": ["一个4×5的整型二维数组，从键盘输入数据，并对该数组的每一行按从小到大的顺序排列后输出。", ["输入格式:", "\n输入4行5列的矩阵，每行第一个数前没有空格，每行的每个数之间各有一个空格。", "\n\n", "输出格式:", "\n输出4行5列的矩阵，每行第一个数前没有空格，每个数输出占4列列宽。", "\n\n", "输入样例:", "\n1 5 4 2 6", "\n3 2 5 8 4", "\n8 5 4 1 5", "\n9 5 1 2 6", "\n\n", "输出样例:", "\n   1   2   4   5   6", "\n   2   3   4   5   8", "\n   1   4   5   5   8", "\n   1   2   5   6   9"]], "Tag": "程序设计"}
{"Answer": "```\r\npublic class Number {\r\n\r\n    private int n1;\r\n\r\n    private int n2;\r\n\r\n    public Number(int n1, int n2) {\r\n        this.n1 = n1;\r\n        this.n2 = n2;\r\n    }\r\n\r\n    public int addition(){\r\n        return n1 + n2;\r\n    }\r\n\r\n    public int subtration(){\r\n        return n1-n2;\r\n    }\r\n\r\n    /**\r\n     * 如果n1或n2 &gt; 2的16次方需要用long接收返回值\r\n     * @return\r\n     */\r\n    public int multiplication(){\r\n        return n1*n2;\r\n    }\r\n\r\n    private int division(){\r\n        if (n2 == 0){\r\n            throw new IllegalArgumentException(\"除数参数不合法\");\r\n        }\r\n        return n1/n2;\r\n    }\r\n\r\n    /**\r\n     * 如果要返回小数，用这种\r\n     */\r\n/*    private double division(){\r\n        if (n2 == 0){\r\n            throw new IllegalArgumentException(\"除数参数不合法\");\r\n        }\r\n        return n1/(n2*1.0);\r\n    }\r\n */\r\n    public static void main(String[] args) {\r\n        Number number = new Number(6,0);\r\n        System.out.println(number.addition());\r\n        System.out.println(number.subtration());\r\n        System.out.println(number.multiplication());\r\n        try {\r\n            System.out.println(number.division());\r\n        }catch (Exception e){\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n}\r\n```", "Konwledge_Point": "整型", "Question": ["编写Java程序，模拟简单的计算器。 要求： （1）定义名为Number的类，在其中定义两个私有的整型数据成员n1和n2；......", ["编写Java程序，模拟简单的计算器。", "\n要求：", "\n（1）定义名为Number的类，在其中定义两个私有的整型数据成员n1和n2；", "\n（2）在Number类中编写构造方法，赋予n1和n2初始值；", "\n（3）再为Number类定义加（addition）、减（subtration）、乘（multiplication）、除（division）四个公有成员方法，分别对两个成员变量执行加、减、乘、除的运算。注意：除法运算时要抛出除数为0的异常。", "\n（4）在主方法中创建Number类的对象，调用上述各个方法，测试并输出计算结果，注意进行必要的异常捕获与处理。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你题目的解答代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;sort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j,t;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;#43;&amp;#43;)&lt;span class=\"hljs-comment\"&gt;//n个数,总共需要进行n-1次&lt;/span&gt;\n    {   &lt;span class=\"hljs-comment\"&gt;//每次会将最大(升序)或最小(降序)放到最后面&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n-i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[j]&amp;lt;a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])&lt;span class=\"hljs-comment\"&gt;//每次冒泡,进行交换&lt;/span&gt;\n            {\n                t&amp;#61;a[j];\n                a[j]&amp;#61;a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;t;\n            }\n        }\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;getavg&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        sum &amp;#43;&amp;#61; a[i];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;*sum/n;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,n&amp;#61;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;平均值&amp;#xff1a;%.2f\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;getavg&lt;/span&gt;(a,n));\n    &lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(a,n);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;从大到小的排序&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/459159509636170.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;如有帮助&amp;#xff0c;望采纳&amp;#xff01;谢谢!&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言:定义一个长度为8的整型数组，从键盘输入数值，并定义两个子函数，分别用来求其平均值和将数组按从大到小的排序，在主函数中调用子函数并输出结果。", ["定义一个长度为8的整型数组，从键盘输入数值，并定义两个子函数，分别用来求其平均值和将数组按从大到小的排序，在主函数中调用子函数并输出结果。"]], "Tag": "程序设计"}
{"Answer": "在内部存储上有区别，byte数组每个元素只有一个字节，而整型数组每个元素哟4个字节（由于涉及多字节，还可能存在字节序问题）。此外，byte类型和整型表示的整数范围是不一样的。", "Konwledge_Point": "整型", "Question": ["请问字节数组跟整形数组有什么区别？", ["byte[] a={'w',1,1,1};", "\n        for(byte b:a){", "\n            System.out.println(b);", "\n        }", "\n        这样子输出的都是整数 ", "\n        那么这个字节数组跟整形数组又有什么区别呢"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n \n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    FILE *fp;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, a[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;]; &lt;span class=\"hljs-comment\"&gt;//i为数组元素下标&lt;/span&gt;\n    fp &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a.txt&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (fp &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Can&amp;#39;t open the file!\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入6个数&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a[i]);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[i] % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, a[i]);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["关于#c语言#的问题：编程先定义一整型数组a[6]，然后给数组a[6]由键盘赋值，最后将数组中元素值为奇数的元素值写入到a.txt文件中", ["用c语言，编程先定义一整型数组a[6]，然后给数组a[6]由键盘赋值，最后将数组中元素值为奇数的元素值写入到a.txt文件中。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\nmain()\n{\n    int a[3][4],ma,mi,sum&amp;#61;0,i,j,m&amp;#61;0,n&amp;#61;0;\n    float ave;\n    for(i&amp;#61;0; i&amp;lt;3; i&amp;#43;&amp;#43;)\n        for(j&amp;#61;0; j&amp;lt;4; j&amp;#43;&amp;#43;)\n        {\n            scanf(&amp;#34;%d&amp;#34;,&amp;amp;a[i][j]);\n            if ((i&amp;#61;&amp;#61;0) &amp;amp;&amp;amp;(j&amp;#61;&amp;#61;0))\n            {\n                ma&amp;#61;a[0][0];\n                mi&amp;#61;a[0][0];\n            }\n            sum&amp;#43;&amp;#61;a[i][j];\n            if(a[i][j]&amp;gt;ma)\n                ma&amp;#61;a[i][j];\n            if(a[i][j]&amp;lt;mi)\n            {\n                mi&amp;#61;a[i][j];\n                m&amp;#61;i;\n                n&amp;#61;j;\n            }\n\n        }\n    ave&amp;#61;sum/12.0;\n    printf(&amp;#34;%d,%d,Min&amp;#61;%d,AVE&amp;#61;%.2f&amp;#34;,m,n,mi,ave);\n}\n/* 1 2 3 4\n2 3 4 5\n3 4 5 6*/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"149\" src=\"https://img-ask.csdnimg.cn/upload/1624407987492.png\" width=\"515\" /&gt; &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["定义二维整型数组a[3][4]", ["定义二维整型数组a[3][4]，用键盘输入数据后，按照格式输出该数组，求该二维数组最小值并输出该值及下标，同时求出平均值，保留2位小数输出"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;,&lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt; &amp;#61; eval(&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;())\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果有帮助&amp;#xff0c;点一下下采纳&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["关于输入两个用逗号隔开的整形变量的问题", ["\n", "如图，需要输入类似1，11这种用逗号隔开的两个整形变量，但是我用这种输入方式输入的是字符变量，所以到底应该怎么输入？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;只能靠预先定义的数组长度 或者 自己额外记录的变量标记有效长度。&lt;br /&gt;只有数组名字得不到长度的&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["c语言里，整形数组的怎么判断这个数组到结尾了？", ["c语言里，整形数组的怎么判断这个数组到结尾了？怎么判断整形数组到结尾了！"]], "Tag": "程序设计"}
{"Answer": "（1）3个均入栈后才可出栈\r\n        1(in)、2(in)、3(in)、3(out)、2(0ut)、1(out)\r\n（2）2个先入栈后才可以出栈\r\n       1(in)、2(in)、2(0ut)、1(out)、3(in)、3(out)\r\n       1(in)、2(in)、2(0ut)、3(in)、3(out)、1(out)\r\n（3）1个先入栈后才可出栈\r\n      1(in)、1(out)、2(in)、2(0ut)、3(in)、3(out)\r\n      1(in)、1(out)、2(in)、3(in)、3(0ut)、2(out)", "Konwledge_Point": "整型", "Question": ["整形数字元素1，2，3依次进栈，有几种出栈顺序？", ["3个整形数字元素1，2，3依次进栈，请问有几种出栈顺序？", "\n老师说答案是5.", "\n为什么啊，不是6吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;A&lt;/span&gt; {\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;String[] args&lt;/span&gt;)&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arr[] &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; cnt &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;i&amp;#43;&amp;#43;){\n            arr[i] &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.print(arr[i] &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;);\n            cnt &amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(cnt % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n                System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println();\n            }\n        }\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["Java定义一个长度为100的一维整型数组，存放从1开始100个连续的奇数（1，3，··199) 并将数组元素按每行10个的形式输出。", ["定义一个长度为100的一维整型数组，存放从1开始100个连续的奇数（1，3，··199) 并将数组元素按每行10个的形式输出。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;swap1&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *b)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t &amp;#61; *a;\n    *a &amp;#61; *b;\n    *b &amp;#61; t;\n}\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;swap2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &amp;amp;a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &amp;amp;b)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t &amp;#61; a;\n    a &amp;#61; b;\n    b &amp;#61; t;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["在子函数swap1和swap2中，分别通过传地址和引用的方式实现两整型数的交换。", ["在子函数swap1和swap2中，分别通过传地址和引用的方式实现两整型数的交换。", "\n", "#", "include", " ", "<stdio.h>", "\n", "void", " ", "swap1", "(", "int", " *a,", "int", " *b)", ";\n", "void", " ", "swap2", "(", "int", " &a,", "int", " &b)", ";\n", "int", " ", "main", "(", "void", ")", " ", "{ ", "// 分析两个交换函数的不同", "\n    ", "int", " a, b;\n    ", "scanf", "(", "\"%d%d\"", ",&a,&b);\n    ", "swap1", "(&a,&b);\n    ", "printf", "(", "\"%d %d\\n\"", ",a,b);\n    ", "swap2", "(a,b);\n    ", "printf", "(", "\"%d %d\\n\"", ",a,b);\n    ", "return", " ", "0", ";\n}\n", "/*提交以下代码*/", "\n", "void", " ", "swap1", "(", "int", " *a,", "int", " *b)", " ", "{\n\n}\n\n", "void", " ", "swap2", "(", "int", " &a,", "int", " &b)", " ", "{\n\n}\n\n\n", "\n", "输入", "1行，两个整型数", "输出", "2行，分别为第1和第2次交换后的结果", "样例输入 Copy", "4 6", "样例输出 Copy", "6 4", "4 6"]], "Tag": "程序设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;字符串跟浮点数没法运算&amp;#xff0c;除非把字符串转成浮点数&amp;#xff0c;或者把浮点数转为字符串&lt;/li&gt;&lt;li&gt;M不是字符串&amp;#xff0c;题目里面说了它跟N是两个数&amp;#xff0c;数&amp;#xff0c;所以不是字符串&lt;/li&gt;&lt;li&gt;eval就是把参数两边的引号去掉  比如 eval(&amp;#39;12&amp;#39;)&amp;#61;12&amp;#xff0c;eval(&amp;#39;[1,2]&amp;#39;)&amp;#61;[1,2]&lt;br /&gt;这个参数可以是某种类型的数据、表达式、函数等&lt;/li&gt;&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/97584443454614.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["python中如何实现现字符串和整型之间的计算", [" 有三个问题:python中如何实现现字符串和整型之间的计算", "题中的M指的是字符串吗", "eval（）函数能通俗易懂的讲一下是什么用?", "谢谢"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;#include &amp;lt;iostream&amp;gt;\nusing namespace std;\n\nvoid fun(int *p,int a[5])\n{\n\tp &amp;#61;a;\n\tint j&amp;#61;0;\n\tfor(j&amp;#61;0;j&amp;lt;5;j&amp;#43;&amp;#43;)\n\t{\n\t\tp[j] *&amp;#61; 10;\n\t}\n\tfor(j&amp;#61;0;j&amp;lt;5;j&amp;#43;&amp;#43;)\n\t{\n\t\tcout&amp;lt;&amp;lt;p[j];\n\t}\n\n}\n\nint main()\n{\n\tint a[5] &amp;#61; {1,2,3,4,5};\n\tint *p&amp;#61;NULL;\n\tfun(p,a);\n        return 0;\n}&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["用指针作为函数的参数，设计一个函数将整型数组各元素乘以10   大神捞捞我", ["\n\n", " "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;下面是 C&amp;#43;&amp;#43; 代码和运行结果&amp;#xff0c;望采纳&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-cpp\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;];\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; j&amp;#43;&amp;#43;) {\n      a[i][j] &amp;#61; (i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) * (j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    }\n  }\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;; j&amp;#43;&amp;#43;) {\n      cout &amp;lt;&amp;lt; a[i][j] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n    }\n    cout &amp;lt;&amp;lt; endl;\n  }\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;运行结果如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-symbol\"&gt;1 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;2 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;3 &lt;/span&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["定义一个整型的3行4列的的二维数组", ["定义一个整型的3行4列的的二维数组，每个数组元素的赋值规则为行下标值加1的值乘以列下标值加1的值，如： a[0][0]=(0+1)∗(0+1)=1, 按行和列输出这个二维数组。", "程序运行示例：", "1 2 3 4", "2 4 6 8", "3 6 9 12"]], "Tag": "程序设计"}
{"Answer": "![图片说明](https://img-ask.csdn.net/upload/201904/12/1555069581_565979.png)\r\n原数组就不打印了。", "Konwledge_Point": "整型", "Question": ["已知整型数组int a[]={12,5,9,19,22,-4,66,-17,28,13}，求出数组中最大值。", ["已知整型数组int a[]={12,5,9,19,22,-4,66,-17,28,13}，求出数组中最大值，最小值,将最小元素与数组首元素交换,最大元素与数据尾元素交换。", "\n\n", "程序显示结果如下", "\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你上面的第11行代码和第17行代码scanf的赋值对象都是f数组&amp;#xff0c;应该是一个赋值给f数组&amp;#xff0c;一个赋值给s数组&amp;#xff0c;望采纳&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["编程定义三个同样大小的整型数组，为其中的两个数组输入数值，然后计算两个数组中对应数值之和存入第三个数组，最后输出三个数组中的数", ["编程定义三个同样大小的整型数组，为其中的两个数组输入数值，然后计算两个数组中对应数值之和存入第三个数组，最后输出三个数组中的数", "输出的结果不对，请问我的代码哪里有问题，谢谢解答！", "\n", "#include <stdio.h>", "\n", "int", " main(){\n    ", "int", " f[", "5", "];\n    ", "int", " s[", "5", "];\n    ", "int", " t[", "5", "];\n    ", "int", " j=", "1", ";\n    ", "printf", "(", "\"请输入第一个数组中的5个数值\\n\"", ");\n    ", "for", "(;j<=", "5", ";j++)\n    {\n        ", "printf", "(", "\"第%d个数：\"", ",j);\n        scanf(", "\"%d\"", ",&f[j-", "1", "]);\n    }\n    ", "printf", "(", "\"请输入第二个数组中的5个数值\\n\"", ");\n    ", "for", "(j=", "1", ";j<=", "5", ";j++)\n    {\n        ", "printf", "(", "\"第%d个数：\"", ",j);\n        scanf(", "\"%d\"", ",&f[j-", "1", "]);\n    }\n    ", "for", "(j=", "1", ";j<=", "5", ";j++)\n    {\n        t[j-", "1", "]=f[j-", "1", "]+s[j-", "1", "];\n    }\n    ", "printf", "(", "\"a数组中内容\"", ");\n    ", "for", "(j=", "1", ";j<=", "5", ";j++)\n    {\n        ", "printf", "(", "\"%d \"", ",f[j-", "1", "]);\n    }\n    ", "printf", "(", "\"\\n\"", ");\n    ", "printf", "(", "\"b数组中内容\"", ");\n    ", "for", "(j=", "1", ";j<=", "5", ";j++)\n    {\n        ", "printf", "(", "\"%d\"", ",s[j-", "1", "]);\n    }\n    ", "printf", "(", "\"\\n\"", ");\n    ", "printf", "(", "\"c数组中内容\"", ");\n    ", "for", "(j=", "1", ";j<=", "5", ";j++)\n    {\n        ", "printf", "(", "\"%d\"", ",t[j-", "1", "]);\n    }\n    ", "printf", "(", "\"\\n\"", ");    \n} \n\n", "\n", "\n", "希望的运行结果是这个", "\n"]], "Tag": "程序设计"}
{"Answer": "存在如下问题:\r\n1. 我看不到你include的头文件，想必是stdio.h吧。\r\n2. student这个数组未进行初始化，所以在一开始这个数组中各个成员的各个域具有一个不定的初始化值\r\n3. scanf的时候，第二个参数指定%c，但是他是整形，所以只取用了4个字节中的低位字节进行赋值，在BigEnding和LittleEnding的机器上将具有不同的结果，但是都会错：这一个接收了输入的字节加上另外三个具有不确定值的字节，一般来说，你或者会得到一个很大的值，或者得到一个负值\r\n4.同样的，scanf的地方，格式字串中指定了7个参数，但你只用了6个来接受，所有最后一个输入完全没有意义\r\n5.因为sum是加出来的，所以最后不但M，而且SUM都会出错.\r\n6.然后，建议你输出的时候，每一个成员按一行输出，这样会比较容易观察.另外，从你system(\"pause\");这一行代码来看，你是在windows上完成的吧...\r\n最后，提出一点建议：命名，编码最好改进一下；再有就是你定义的这个数组最好考虑到字节对齐的问题.", "Konwledge_Point": "整型", "Question": ["c语言中当字符串和整形数据一起的时候应该怎样输入？", ["比如说我想在结构体中输入：", "\n#include", "\nstruct score", "\n{", "\n    int num;", "\n    char c[6];", "\n    int M;", "\n    int E;", "\n    int Chi;", "\n    int P; ", "\n    int Che;", "\n    int sum;", "\n};", "\nvoid main()", "\n{", "\n    struct score student[3];", "\n    int i;", "\n    for(i=0;i<3;i++)", "\n    {", "\n        scanf(\"%d%c%d%d%d%d%d\",&student[i].num,&student[i].M,&student[i].E,&student[i].Chi,&student[i].P,&student[i].Che);", "\n        student[i].sum=student[i].M+student[i].E+student[i].Chi+student[i].P+student[i].Che;", "\n    }", "\n    for(i=0;i<3;i++)", "\n        printf(\"num=%d\\tM=%d\\tE=%d\\tChi=%d\\tP=%d\\tChe=%d\\tsum=%d\\t\",student[i].num,student[i].M,student[i].E,student[i].Chi,student[i].P,student[i].Che,student[i].sum);", "\n}", "\n\n", "我的输入语句【scanf(\"%d%c%d%d%d%d%d\",&student[i].num,&student[i].M,&student[i].E,&student[i].Chi,&student[i].P,&student[i].Che);", "\n】在执行的时候，只能输入一次，且结果是随机数，这是怎么回事？", "\n我应该怎样改会方便输入？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;i&amp;#61; j就是对角线的元素&amp;#xff0c;累加之前要加入if语句判断i&amp;#61;&amp;#61;j.&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["求一个n×n的整形矩阵从左上角至右下角的对角线元素之和。  输入描述 第一行有一个正整数n，保证n不超过10。共有n行，每行有n个用空格隔开的整数， 输出n×n矩阵的左上角至右下角的对角线元素之和。", ["#include<stdio.h>", "int main()", "{ int n,i,j;", "  int sum=0;", "  int a[10][10];", "  scanf(\"%d\",&n);", "  0<n&&n<=10;", "  printf(\"\\n\");", "  for(i=0;i<n;i++)", "  {", "      for(j=0;j<n;j++)", "      {", "      scanf(\"%d \",&a[i][j]);", "      printf(\"\\n\");", "      sum+=a[i][j];", "      }", "  }", "  printf(\"%d\\n\",sum);", "  return 0;", "}"]], "Tag": "程序设计"}
{"Answer": "程序逻辑应该没错。\r\nmax变量换个名字，较新的编译器,std::max()是个函数，另外在window.h中max是个宏定义。应尽量避免冲突", "Konwledge_Point": "整型", "Question": ["找出一个整形数组中的元素的最大值", ["程序没有编译错误，能够正常运行，但是输出结果与题目要求不符合，代码检查过很多遍，没有错误。", "\n运行时，我用空格，逗号，tab来隔开各个输入的数组元素，但是无论输入什么，最后的结果都是1，想请大家帮我看看，感激不尽", "\n\n", "using namespace std;\nclass Array_max\n{\n    public:\n        void set_value();\n        void max_value();\n        void show_value();\n    private:\n        int array[10];\n        int max;\n};\n\nvoid Array_max::set_value()\n{\n    int i;\n    for(i=0;i<10;i++);\n    cin>>array[i];\n}\n\nvoid Array_max::max_value()\n{\n    int i;\n    max=array[0];\n    for(i=0;i<10;i++);\n    {   \n        if (array[i]>max ) max=array[i];\n    }\n\n}\n\n void Array_max::show_value()\n{\n    cout<<\"max=\"<<max<<endl;\n}\nint main()\n{\n    Array_max arraymax1;\n    arraymax1.set_value();\n    arraymax1.max_value();\n    arraymax1.show_value();\n    return 0;\n}\n\n旁边附上运行结果\n```![图片说明](https://img-ask.csdn.net/upload/202002/01/1580564262_877665.png)\n请大家有空帮我看看，谢谢\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你的代码问题在于最后一个内循环j&amp;#61;&amp;#61;i写错了&amp;#xff0c;应该是j&amp;lt;&amp;#61;i&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["用C语言求一个4×4的整型矩阵主对角线元素之和，我的程序哪里错了？", ["\n\n", "vs2013", "\n\n", "左边是源代码，右边是运行结果"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;int a[6]中一共6个元素&amp;#xff0c;在插入一个数据就越界了&amp;#xff0c;需要把int a[6]改成int a[7];或者更大&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["将整型数组按照从小到大顺序排序，在这个数组中，插入一个新的元素x，使得该数列仍然有序。但我写的最后有个警告，变量'a'什么损坏，该怎么改？", ["#include<stdio.h>", "int main()", "{", "int a[6],i,j,t,k,b;", "    printf(\"请以次输入6个数：\");", "    for(i=0;i<6;i++)", "        scanf(\"%d\",&a[i]);", "    for(i=0;i<5;i++)", "    {", "    k=i;", "    for(j=i;j<6;j++)", "        if(a[j]<a[k])", "            k=j;", "    if(i!=k)", "        {", "                 t=a[i];", "               a[i]=a[k];", "                a[k]=t;", "                }", "                 }", "        for(i=0;i<6;i++)", "        printf(\"%d\\n\",a[i]);", "    printf(\"输入一个数：\\n\");", "scanf(\"%d\",&b);", "    a[6]=b;", "for(i=0;i<6;i++)", "    {", "    k=i;", "    for(j=i;j<=6;j++)", "            if(a[j]<a[k])", "                k=j;", "    if(i!=k)", "    {", "        t=a[i];", "                a[i]=a[k];", "             a[k]=t;", "    }", "    }", "    printf(\"由小到大排序输出:\\n\");", "     for(i=0;i<=6;i++)", "    printf(\"%d\\n\",a[i]);", "    return 0;", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.Scanner;\n\n&lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; A {\n\n  &lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; main(String[] args) {\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b[] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c[] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n    Scanner sc &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; Scanner(&lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;请输入第1个数组的10个整数:&amp;#34;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n      &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.print(&amp;#34;请输入第&amp;#34; &amp;#43; (i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43; &amp;#34;个整数&amp;#xff1a;&amp;#34;);\n      a[i] &amp;#61; sc.nextInt();\n    }\n    &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;请输入第2个数组的10个整数:&amp;#34;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n      &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.print(&amp;#34;请输入第&amp;#34; &amp;#43; (i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43; &amp;#34;个整数&amp;#xff1a;&amp;#34;);\n      b[i] &amp;#61; sc.nextInt();\n      c[i] &amp;#61; a[i] &amp;#43; b[i];\n    }\n    sc.&lt;span class=\"hljs-keyword\"&gt;close&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&amp;#34;第3个数组的10个数&amp;#34;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;){\n      &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(c[i]);\n    }\n  }\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["编写Java程序，定义三个长度为10的整型数组，从键盘输入整数分别存储到前两个数组中，将前两个数组中的整数相加后存储到第三个数组中，并将第三个数组中的元素值输出", ["运行效果如下"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;一般定义变量的话就地初始化&amp;#xff0c;就算你不知道赋多少&amp;#xff0c;一般都会赋值个0&amp;#xff0c;不然char c&amp;#xff1b;这样定义的话&amp;#xff0c;c是一个随机数&amp;#xff0c;这样很危险&amp;#xff0c;所以这里定义char c&amp;#61;&amp;#39;a&amp;#39;;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言，将占字节多的整形数据赋给一个占字节少的整型变量或字符变量", ["如题，将一个占字节多整型数据赋给一个占字节少的整型变量或字符变量，会有截断。", "图中给的例子里，为什么不直接写char c，而要写char c＝'a'，这样不是将97赋给c了吗，难道不是多此一举吗"]], "Tag": "程序设计"}
{"Answer": "double，乘以1.0f才是float", "Konwledge_Point": "整型", "Question": ["整形乘以1.0变成什么型了？", ["整形乘以1.0变成什么型了？float 还是double。。。。。。。。。。。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;为指针变量p分配空间大小为sizeof(int)个字节的空间&lt;br /&gt;sizeof(int)的大小与处理器有关&amp;#xff0c;一般是4字节&lt;/p&gt;\n&lt;p&gt;选D&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["整型变量的动态存储单元什么意思？p=_ malloc( sizeof(int));这是函数？ 还有ABCD各个选项分别是什么意思？", ["整型变量的动态存储单元什么意思？p=_malloc( sizeof(int));这是函数？ 还有ABCD各个选项分别是什么意思？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;一个实现&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;{\n    \n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入10个整数&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;){ &lt;span class=\"hljs-comment\"&gt;//获取10个整数输入到数组num中 &lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;num[i]);\n        i&amp;#43;&amp;#43;;\n    }\n    \n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k,p;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; temp;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;;k&amp;#43;&amp;#43;){ &lt;span class=\"hljs-comment\"&gt;//排序数组 &lt;/span&gt;\n        \n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(p&amp;#61;k;p&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;p&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(num[k]&amp;gt;num[p]){  &lt;span class=\"hljs-comment\"&gt;//如果当前k位置的数比p位置的数大&amp;#xff0c;就交换他们的值&amp;#xff0c;达到从小到大排序的目的 &lt;/span&gt;\n                temp&amp;#61;num[k];\n                num[k]&amp;#61;num[p];\n                num[p]&amp;#61;temp;\n            }\n        }\n    }\n    \n    &lt;span class=\"hljs-comment\"&gt;//打印结果 &lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;从小到大排序后&amp;#xff0c;数组的内容为&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,num[i]);\n    }\n} \n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/561492128356141.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["输入10个整数存放在一维数组中，按从小到大的顺序排序后输出", ["非常感谢。", "输入10个整数存放在一维数组中，按从小到大的顺序排序后输出"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这用问&amp;#xff1f;5/2和4/3测试一下就知道了&lt;/p&gt;\n\n&lt;p&gt;再看我这个求余&amp;#xff1a;数-数/10*10&amp;#xff0c;如果数是19求余后得到9&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["请问c加加中如果两个整形相除且得到的会有小数点，他们得到的结果的取值应该如何确定", ["请问c加加中如果两个整形相除且得到的会有小数点，他们得到的结果的取值应该如何确定"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;24&lt;/span&gt;],i,total&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; max&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,min&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;24&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入%d:00-%d:00之间登录的用户数&amp;#xff1a;&amp;#34;&lt;/span&gt;,i,i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n        total &amp;#43;&amp;#61; a[i];\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[i]&amp;gt;a[max]) max &amp;#61; i;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[i]&amp;lt;a[min]) min &amp;#61; i;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;时间      登录人数  所占比例\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;24&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%2d:00-%2d:00 %15d  %25.1f\\n&amp;#34;&lt;/span&gt;,i,i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,a[i],&lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;*a[i]/total);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;最大登录人数%d发生在%2d&amp;#xff1a;00到%2d&amp;#xff1a;00之间\\n&amp;#34;&lt;/span&gt;,a[max],max,max&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;最小登录人数%d发生在%2d&amp;#xff1a;00到%2d&amp;#xff1a;00之间\\n&amp;#34;&lt;/span&gt;,a[min],min,min&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    \n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["C语言中的一维数组运用", ["从键盘输入每小时登录网络的用户数到一个有24个整型元素的数组中。写一个程序以如下格式显示一个报告：", "     时间                 登录人数           所占比例", "0:00 – 1:00                1                   0.3", "1:00 – 2:00                 2                   0.7", "     …", "10:00 - 11:00            27                  9.0", "11:00 - 12:00            28                  9.3", "     …", "23:00 - 24:00            8                   2.7", "最大登录人数28发生在11：00到12：00之间", "最小登录人数 1发生在  0：00到 1：00之间(两个时间段登录人数相同时，取排在前面的时间)", "注意：比例后面的%省略，无需输出%，只输出%前面的数即可。", "\n", "**输入格式要求：\"%d\" 提示信息：\"请输入在%d:00和%d:00之间登录的用户数：\"", "**输出格式要求：", "\"   时间                 登录人数                 所占比例\\n\"", "\"%2d:00 - %2d:00 %15d %25.1f\\n\"", "\"最大登录人数%d发生在%2d：00到%2d：00之间\\n\"", "\"最小登录人数%d发生在%2d：00到%2d：00之间\\n\""]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;#include &amp;lt;stdio.h&amp;gt;\nconst int n &amp;#61; 8;\nint main() {\n\tint a[n];\n\tint i &amp;#61; 0;\n\tfor (; i &amp;lt; n; &amp;#43;&amp;#43;i) {\n\t\tscanf(&amp;#34;%d&amp;#34;, a &amp;#43; i);\n\t}\n\tprintf(&amp;#34;正序存放&amp;#xff1a;\\n&amp;#34;);\n\tfor (i &amp;#61; 0; i &amp;lt; n; &amp;#43;&amp;#43;i) {\n\t\tprintf(&amp;#34;%d &amp;#34;, a[i]);\n\t}\n\tprintf(&amp;#34;\\n倒序存放\\n&amp;#34;);\n\tfor (i &amp;#61; n - 1; i &amp;gt;&amp;#61; 0; --i){\n\t\tprintf(&amp;#34;%d &amp;#34;, a[i]);\n\t}\n\treturn 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;以上是代码。其实不用去实际存放&amp;#xff0c;直接从开头到结尾&amp;#xff0c;再从结尾返回到开头这样输出一下就行了&amp;#xff0c;空间复杂度是O&amp;#xff08;1&amp;#xff09;。如果存放的话空间复杂度就是O&amp;#xff08;n&amp;#xff09;了。&lt;/p&gt;\n\n&lt;p&gt;哪里不懂私信我。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["从键盘输入长度为8的整型数组的值，然后将其按逆序存放，将逆序前和逆序后的数组输出。", ["从键盘输入长度为8的整型数组的值，然后将其按逆序存放，将逆序前和逆序后的数组输出。", "\n\n", " ", "\n\n", " ", "\n\n", " "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;回顾一下这个吧&lt;/strong&gt;&lt;br /&gt;&lt;a href=\"https://m.php.cn/article/463870.html\" id=\"textarea_1633240186195_1633240295454_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://m.php.cn/article/463870.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["&非法怎么回事，表达式必须包含整型", ["这两个错误不知道该怎么改😫😫"]], "Tag": "程序设计"}
{"Answer": "用下面的代码，`tempVal`保持整型输出\r\n\r\n    int tempVal = ceil((float)56/50);\r\n    \r\n    NSLog(@\"%d\", tempVal);", "Konwledge_Point": "整型", "Question": ["iphone获取最近最大的整数值", ["有一些数学相关的实现代码，方程式如下：", "\n\n", "int tempVal = 56/50;\nNSLog(@\"%d\", tempVal);\n", "\n\n", "输出：", "\n\n", "2013-03-25 16:29:36.749 TestApp[1467:c07] 1\n", "\n\n", "实际上", "56/50 = 1.12", "，并且tempVal是整型，因此结果是 ", "1", " 。", "\n\n", "不过我想要结果输出的是最近的最大的整数，就是 ", "2", "。", "\n\n", "不能在tempVal中这样手动进行增量加，比如", "tempVal+1", " 或者 ", "tempVal = tempVal + 1", "。", "\n\n", "请高手给个方法。谢谢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;C代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/19368056384616.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; r;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf %d&amp;#34;&lt;/span&gt;,&amp;amp;r,&amp;amp;k);\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt;(k)\n    {\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;圆的面积&amp;#xff1a;%lf\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3.14&lt;/span&gt;*r*r);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;圆的周长&amp;#xff1a;%lf\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*&lt;span class=\"hljs-number\"&gt;3.14&lt;/span&gt;*r);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;圆的面积&amp;#xff1a;%lf&amp;#xff0c;圆的周长&amp;#xff1a;%lf\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3.14&lt;/span&gt;*r*r,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*&lt;span class=\"hljs-number\"&gt;3.14&lt;/span&gt;*r);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["输入圆的半径r和一个整型数k，当k=1时，计算圆的面积；当k=2时，计算圆的周长；当k=3时，计算圆的面积和周长。", ["输入圆的半径r和一个整型数k，当k=1时，计算圆的面积；当k=2时，计算圆的周长；当k=3时，计算圆的面积和周长。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main(){\n    int A[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;];\n    int i,&lt;span class=\"hljs-keyword\"&gt;j;\n&lt;/span&gt;    for(i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; 3; &amp;#43;&amp;#43;i){&lt;!-- --&gt;&lt;/span&gt;\n        for(&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; j &amp;lt; 3; &amp;#43;&amp;#43;j){&lt;!-- --&gt;&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;scanf(&amp;#34;%d&amp;#34;,&amp;amp;A[i][j]);\n&lt;/span&gt;        }\n    }\n    int MIN &amp;#61; A[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n    int I &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-keyword\"&gt;J &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    for(i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; 3; &amp;#43;&amp;#43;i){&lt;!-- --&gt;&lt;/span&gt;\n        for(&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; j &amp;lt; 3; &amp;#43;&amp;#43;j){&lt;!-- --&gt;&lt;/span&gt;\n            if(A[i][&lt;span class=\"hljs-keyword\"&gt;j] &lt;/span&gt;&amp;lt; MIN){\n                MIN &amp;#61; A[i][&lt;span class=\"hljs-keyword\"&gt;j];\n&lt;/span&gt;                I &amp;#61; i;\n                &lt;span class=\"hljs-keyword\"&gt;J &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;j;\n&lt;/span&gt;            }\n        }\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;, MIN);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d,\\t%d\\n&amp;#34;&lt;/span&gt;, I &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-keyword\"&gt;J &lt;/span&gt;&amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;; //行号和列号是对应索引号加1&amp;#xff0c;比如第一行对应的索引为0&lt;/span&gt;\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["一个3*3的矩阵，并求出矩阵中的最小值以及最小值所在的行号和列号。", ["建立一个3*3的矩阵，并求出矩阵中的最小值以及最小值所在的行号和列号。矩阵元素由键盘输入。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;有用请采纳&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;def fun(m):\n    &lt;span class=\"hljs-built_in\"&gt;result&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0.0&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;start&lt;/span&gt;, &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-title\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-title\"&gt;2&lt;/span&gt; * &lt;span class=\"hljs-title\"&gt;m&lt;/span&gt;&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;start&lt;/span&gt; &amp;lt;&amp;#61; &lt;span class=\"hljs-keyword\"&gt;end&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;result&lt;/span&gt; &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; / &lt;span class=\"hljs-built_in\"&gt;start&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;start&lt;/span&gt; &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n\n    &lt;span class=\"hljs-literal\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;result&lt;/span&gt;\n\nprint(&lt;span class=\"hljs-built_in\"&gt;result&lt;/span&gt;)\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["请编写fun函数，其功能为根据整型形参m，计算如下公式的值", ["请编写fun函数，其功能为根据整型形参m，计算如下公式的值：y=1/2+1/4+1/6+…+1/2m。"]], "Tag": "程序设计"}
{"Answer": "```\r\n#include &lt;stdio.h&gt;\r\n#define N 10\r\nvoid sort(int *a,int N)\r\n{\r\nfor (int i = 0; i &lt; N - 1; i++)\r\n{\r\nint min = i;\r\nfor (int j = i + 1; j &lt; N; j++) if (a[min] &gt; a[j]) min = j;\r\nint t = a[min]; a[min]=a[i];a[i] =t;\r\n}\r\n}\r\n\r\nvoid main()\r\n{ int a[N],i;\r\nprintf(\"Input %d numbers:\\n\",N);\r\nfor(i=0;i&lt;N;i++) /* 从键盘输入数组a的N个元素 /\r\nscanf(\"%d\",&amp;a[i]);\r\nsort(a,N); / 排序 */\r\nprintf(\"The sorted numbers:\\n\");\r\nfor(i=0;i&lt;N;i++)\r\nprintf(\"%4d \",a[i]);\r\n}\r\n```\r\n# 如果问题得到解决的话，请点下采纳，包括之前的问题。", "Konwledge_Point": "整型", "Question": ["下面的程序完成对长度为N的整型数组a进行从小到大的排序。请分别用选择排序法、冒泡排序法完成函数sort。", ["下面的程序完成对长度为N的整型数组a进行从小到大的排序。请分别用选择排序法、冒泡排序法完成函数sort。", "\n#include ", "\n#define N 10", "\n\n", "void main()", "\n{       int a[N],i;", "\n        printf(\"Input %d numbers:\\n\",N);", "\n        for(i=0;i<N;i++)  /* 从键盘输入数组a的N个元素 ", "/", "\n            scanf(\"%d\",&a[i]);", "\n        sort(a,N);     /", " 排序 */", "\n        printf(\"The sorted numbers:\\n\");", "\n        for(i=0;i<N;i++)", "\n            printf(\"%4d \",a[i]);", "\n}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;%-7d就是输出的整数占7个字符位置&amp;#xff0c;如果整数不足7位&amp;#xff0c;则右侧用空格填补。&lt;br /&gt;浮点数有误差&amp;#xff0c;%f默认输出6位小数&amp;#xff0c;但后几位由于精度问题&amp;#xff0c;是不准确的。主要是你整数部分有4位&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["关于整型与浮点型的输出问题", ["第50行的 %-7d 是什么意思？", "第51行的%f的输出为什么不是1234.567000而是1234.567017", "谢谢各位解答！"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-java\"&gt;public class Test {\n\n\tpublic static void main(String[] args) {\n\t\tRandom random &amp;#61; new Random();\n\t\tList&amp;lt;Integer&amp;gt; collect &amp;#61; Stream.generate(() -&amp;gt; random.nextInt(100))\n\t\t\t\t\t\t\t\t\t.limit(100)\n\t\t\t\t\t\t\t\t\t.filter(Test::isPrime)\n\t\t\t\t\t\t\t\t\t.distinct()\n\t\t\t\t\t\t\t\t\t.collect(Collectors.toList());\n\t\tfor (Integer num : collect) {\n\t\t\tSystem.out.println(num);\n\t\t}\n\t}\n\n\tstatic boolean isPrime(Integer num) {\n\t\tif (num &amp;lt;&amp;#61; 3) {\n        return num &amp;gt; 1;\n\t\t}\n\t\t// 不在6的倍数两侧的一定不是质数\n\t\tif (num % 6 !&amp;#61; 1 &amp;amp;&amp;amp; num % 6 !&amp;#61; 5) {\n\t\t\treturn false;\n\t\t}\n\t\tint sqrt &amp;#61; (int) Math.sqrt(num);\n\t\tfor (int i &amp;#61; 5; i &amp;lt;&amp;#61; sqrt; i &amp;#43;&amp;#61; 6) {\n\t\t\tif (num % i &amp;#61;&amp;#61; 0 || num % (i &amp;#43; 2) &amp;#61;&amp;#61; 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["java，创建一个整型数组，随机产生100个整型数据，分别赋值给数组，（去掉重复元素）。", ["动态创建一个长度为100的整型数组，随机产生100个整型数据(0-100),分别赋值给数组各元素，输出其中所有的素数（去掉重复元素）。", "\n\n", "主要问一下怎么才能去掉重复元素"]], "Tag": "程序设计"}
{"Answer": "```\r\n#include &lt;stdio.h&gt;\r\n#include&lt;string.h&gt;\r\nint main()\r\n{\r\n    int arr[10];\r\n    int n,i;\r\n    for(i=0;i&lt;10;i++)\r\n        scanf(\"%d\",&amp;arr[i]);\r\n    scanf(\"%d\",&amp;n);\r\n    for(i=0;i&lt;9;i++)\r\n        if(i&gt;=n)\r\n            arr[i] = arr[i+1];\r\n    arr[i] = 0;\r\n    for(i=0;i&lt;9;i++)\r\n        printf(\"%d \",arr[i]);\r\n     printf(\"\\n\");\r\n    return 0;\r\n}\r\n```", "Konwledge_Point": "整型", "Question": ["长度为10的整型数组，数组的10个数由键盘输入，输入非负整数n（n<10），将下标为n的元素从数组删除，并将其后的元素前移，输出删除一个元素后的数组内所有数据。", ["长度为10的整型数组，数组的10个数由键盘输入，输入非负整数n（n<10），将下标为n的元素从数组删除，并将其后的元素前移，输出删除一个元素后的数组内所有数据。"]], "Tag": "程序设计"}
{"Answer": "问题1：\r\n```\r\nint print_k(linklist l，int k)\r\n{\r\nint * arr = (int *)malloc(sizeof(int) * k);\r\nfor (int i = 0; i &lt; k; i++) arr[i] = -1;\r\nwhile (l)\r\n{\r\nfor (int i = 1; i &lt; k; i++) arr[i] = arr[i - 1];\r\narr[0] = l-&gt;data;\r\nl = l-&gt;next;\r\n}\r\nreturn arr[0];\r\n}\r\n```\r\n问题2：\r\n\r\n```\r\n#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\ntypeof struct \r\n{\r\nint N;\r\nint *arr;\r\n} * Sqlist;\r\nint main()\r\n{\r\nint N;\r\nscanf(\"%d\", &amp;N);\r\nSqlist; l;\r\nl-&gt;N = N + 1; \r\nl-&gt;arr = (int *) malloc(sizeof(int) * (N + 1)) ;\r\nfor (int i = 0; i &lt; N; i++) scanf(\"%d\", &amp;l-&gt;arr[i]);\r\nint y;\r\nint x;\r\nscanf(\"%d%d\",&amp;x, &amp;y);\r\nint j = 0;\r\nfor (j = 0; j &lt; N; j++) if (l-&gt;arr[i] == y) break;\r\nfor (int k = N; k &gt; i; k--) l-&gt;arr[k] = l-&gt;arr[k - 1]; \r\narr[j] = x;\r\n}\r\n\r\n```\r\n算法时间复杂度O(n)，空间复杂度O(1)", "Konwledge_Point": "整型", "Question": ["数据结构链表相关问题", ["1.某单链表中的数据元素结构如下：", "\n\n", "struct node{\n\n    char data；\n\n    struct node * next；\n\n}\n", "\n\n", "并有如下别名：", "\n\n", "typedef struct node * linklist；\n\n", "\n\n", "要求实现一个函数，打印链表中的倒数第k个结点中的值（如果有的话），并返回0；如果找不到，则返回-1 。函数原型如下：", "\n\n", "int print_k(linklist l，int k)\n", "\n\n", "\n", "定义一个定长整型数组结构（结构体类型），设计两个算法：①.在第一次出现的元素y之前插入元素x；②.将所有奇数元素放在前面、偶数元素放在后面，并说明这两个算法的时间、空间复杂度。", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可以&amp;#xff0c;这里的a[20]是个定值&amp;#xff0c;所以right可以直接定义&amp;#xff1a;&lt;br /&gt;right &amp;#61; 19&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["从键盘输入一整数，然后在一个整型一维数组a[15]中，用折半查找法找出该数是数组中第几个元素的值。如果该数不在数组中，则打印“无此数”", ["在谭浩强主编的《C语言程序设计》中本题的代码如下：", "#include<stdio.h>", "int main()", "{", "    int array[20]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};", "    int left=0;", "    int right=sizeof(array)/sizeof(array[0]);", "    int key=0;", "    printf(\"Please enter the number you want to find:\\n\");", "    scanf(\"%d\",&key);", "    while(left<right)", "    {", "        int mid=left+((right-left)>1);", "        if(key==array[mid])", "        {", "            printf(\"%d\\n\",mid);", "            break;", "        }", "        else if(key<array[mid])", "        {", "            right=mid;", "        }", "        else", "        {", "            left=mid+1;", "        }", "    }", "    if(left>=right)", "    printf(\"No found\\n\");", "    return 0;", "}", "但是sizeof涉及到内存管理，对于非计算机专业的学生没讲到这么深，并且函数还没有学完，有没有可以不用内存管理和函数的简单代码？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;循环输入改成如下&amp;#xff0c;你之前没把scanf放在for循环内&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;for (&lt;span class=\"hljs-name\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)&lt;/span&gt;\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Please enter the array:\\n&amp;#34;&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;a&lt;/span&gt;[i])&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    }\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["编写函数int find(int *p,int n,int x),在指针p所指的数组中查找整型数x,如果x在数组中,则该函数返回1,否则返回0。n为数组的大小", ["#include<stdio.h>", "int find(int", "p,int n,int x);", "int main()", "{", "    int i,n,x,t;", "    scanf(\"%d\",&n);", "    int a[n];", "    for(i=0;i<n;i++)", "    scanf(\"%d\",&a[i]);", "    scanf(\"%d\",&x);", "    t=find(a,n,x);", "    printf(\"%d\\n\",t);", "    return 0;", "}", "int find(int *p,int n,int x)", "{", "    int i;", "    for(i=0;i<n;i++,p++)", "    if(*p==x)", "    return 1;", "    return 0;", "}", "代码如果这样写，可以运行出结果，同时也正确，运行结果如下：", "为了让程序有可读性，在原代码加上了几句printf语句，新代码如下：", "#include<stdio.h>", "int find(int", "p,int n,int x);", "int main()", "{", "    int i,n,x,t;", "    printf(\"Please enter the length of the array:\\n\");", "    scanf(\"%d\",&n);", "    int a[n];", "    for(i=0;i<n;i++)", "    printf(\"Please enter the array:\\n\");", "    scanf(\"%d\",&a[i]);", "    printf(\"Please enter the figure you want to find:\\n\");", "    scanf(\"%d\",&x);", "    t=find(a,n,x);", "    printf(\"%d\\n\",t);", "    return 0;", "}", "int find(int *p,int n,int x)", "{", "    int i;", "    for(i=0;i<n;i++,p++)", "    if(*p==x)", "    return 1;", "    return 0;", "}", "此时运行结果却出现了问题，也不能输入想查询的数了，运行结果如下，求问怎样改：", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;], b[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;], c[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;], i, j, k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入a数组&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a[i]);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入数组b:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;b[i]);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[i] &amp;#61;&amp;#61; b[j])\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (j &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\n            c[k&amp;#43;&amp;#43;] &amp;#61; a[i];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; k; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, c[i]);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["5)已知数组a中有10个互不相等的元素，数组b中有5个互不相等的元素，而数组c中包含那些在a中但不在b中的元素，编程产生数组c。", ["#include<stdio.h>", "int main()", "{int a[10],b[5],c[10],i,j,k=0;", "printf(\"输入a数组：\");", "for(i=0;i<10;i++)scanf(\"%d\",&a[i]);", "printf(\"输入数组b:\");", "for(i=0;i<5;i++)", "scanf(\"%d\",&b[5]);", "for(i=0;i<10;i++)", "{for(j=0;j<5;j++)", "if(a[i]=b[j])break;", "if(j>=5);c[k++]=a[i];", "}", "for(i=0;i<k;i++)", "printf(\"%d\",c[i]);", "return0;}"]], "Tag": "程序设计"}
{"Answer": "# 如果问题得到解决，请点我回答左上角的采纳，谢谢\r\n\r\n```\r\n#include &lt;stdio.h&gt;\r\n\r\nint main()\r\n{\r\n\tint a[6];\r\n\tprintf(\"请输入5个数：\");\r\n\tfor (int i = 0; i &lt; 5; i++)\r\n\t\tscanf(\"%d\", &amp;a[i]);\r\n\tint num;\r\n\tprintf(\"请输入num：\");\r\n\tscanf(\"%d\", &amp;num);\r\n\tint n = 5;\r\n\twhile (n != 6)\r\n\t{\r\n\t\tif (a[5] == num) n = 6;\r\n\t\tfor (int i = 0; i &lt; n - 1; i++)\r\n\t\t\tfor (int j = 0; j &lt; n - 1 - i; j++)\r\n\t\t\t{\r\n\t\t\t\tif (a[j] &gt; a[j + 1])\r\n\t\t\t\t{\r\n\t\t\t\t\tint t = a[j];\r\n\t\t\t\t\ta[j] = a[j + 1];\r\n\t\t\t\t\ta[j + 1] = t;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\ta[5] = num;\r\n\t}\r\n\tfor (int i = 0; i &lt; 6; i++)\r\n\t\tprintf(\"%d \", a[i]);\r\n\treturn 0;\r\n}\r\n```", "Konwledge_Point": "整型", "Question": ["(C语言)定义一个数组a[6]，输入5个整型数据", ["定义一个数组a[6]，输入5个整型数据，把它们排好序后输出，再输入一个整数num，将num插入到已排好序的数组中，并输出这个数组的所有数。", "\n\n", "输入输出范例   ", "\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;int main()&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  int a,b;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  scanf(&amp;#34;%d%d&amp;#34;,&amp;amp;a,&amp;amp;b);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  a&amp;#61;a&amp;#43;b;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  puts(a);&lt;/span&gt;&lt;br /&gt;}&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["编写c语言程序:输入两个整型变量a,b 的值，将b的值加到a里，输出a的值", ["从键盘上输入两个整型变量a,b 的值，将b的值加到a里，输出a的值"]], "Tag": "程序设计"}
{"Answer": "用一个空字符串和它相加就行了\r\n\r\nString[]param={user.getUName(),user.getUPass(),user.getHead(),\"\"+user.getUId()};", "Konwledge_Point": "整型", "Question": ["整型数据类型怎么转换成字符串类型？", ["在java中，整型数据类型怎么转换成字符串类型？", "\n如下类的数组中，其最一个值是整型，要换成字符串才不出现错误", "\nString[]param={user.getUName(),user.getUPass(),user.getHead(),user.getUId()};"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\nint[]&lt;span class=\"hljs-built_in\"&gt; array &lt;/span&gt;&amp;#61;&lt;span class=\"hljs-built_in\"&gt; new &lt;/span&gt;int[10];\n       &lt;span class=\"hljs-built_in\"&gt; int &lt;/span&gt;ans &amp;#61; 0;\n        Scanner scanner &amp;#61;&lt;span class=\"hljs-built_in\"&gt; new &lt;/span&gt;Scanner(System.in);\n        for(int i&amp;#61;0;i&amp;lt;10;i&amp;#43;&amp;#43;){\n            array[i] &amp;#61; scanner.nextInt();\n            if(array[i]%5&amp;#61;&amp;#61;0){\n                ans&amp;#43;&amp;#61;1;\n            }\n        }\n        System.out.println(ans);\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["通过键盘给一个长度为10的整型数组各元素赋值，然后统计出该数组中能够被5整除的元素个数", ["通过键盘给一个长度为10的整型数组各元素赋值，然后统计出该数组中能够被5整除的元素个数（java）"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;没有为什么&amp;#xff0c;语法就这么规定的&lt;br /&gt;这就导致你不可以先声明一个int n&amp;#xff0c;再用n去初始化数组。除非n是常量。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["为什么一维数组的类型说明符数组名是常量表达式而不是整型常量或整型表达式", ["在C语言中,一维数组的定义方式为类型说明符数组名()。", "A ［常量表达式］", "B ［整型表达式］", "C ［整型常量］或［整型表达式］", "D ［整型常量］"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;第11行修改为&amp;#xff1a;  scanf_s(&amp;#34;%d,%c,%f&amp;#34;, &amp;amp;num, &amp;amp;r,1, &amp;amp;f);&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["缺少“scanf_s”的浮点型参数: 添加一个对应于转换说明符“4”的浮点型参数。", ["\n", "#", "include", " ", "<stdio.h>", "\n", "void", " ", "main", "()", "\n", "{\n    ", "/*int i = 10, j = 20;\n    printf(\"i=%d,j=%d\\n\", i, j);*/", "\n    ", "int", " num;\n    ", "char", " r;\n    ", "float", " f;\n    ", "printf", "(", "\"输入一个整数，一个字符，一个小数：\\n\"", ");\n    ", "scanf_s", "(", "\"%d,%c,%f\"", ", &num, &r, &f);\n    ", "printf", "(", "\"输入的整数是%d,输入的字符是%c，输入的小数是%f\"", ", num, r, f);\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;修改如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; N 10&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//FOUND&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *a,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *b,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *c,max&amp;#61;*a;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(c&amp;#61;a&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;c&amp;lt;a&amp;#43;n;c&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(*c&amp;gt;max)\n        {\n           max&amp;#61;*c;\n           &lt;span class=\"hljs-comment\"&gt;//FOUND&lt;/span&gt;\n           *b&amp;#61;c-a; &lt;span class=\"hljs-comment\"&gt;//b&amp;#61;c-a;&lt;/span&gt;\n        }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; max;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[N],i,max,p&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;please enter 10 integers:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;N;i&amp;#43;&amp;#43;)\n    &lt;span class=\"hljs-comment\"&gt;//FOUND&lt;/span&gt;\n       &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a[i]); &lt;span class=\"hljs-comment\"&gt;//get(&amp;#34;%d&amp;#34;,a[i]);&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;//FOUND&lt;/span&gt;\n    max&amp;#61;&lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(a,&amp;amp;p,N); &lt;span class=\"hljs-comment\"&gt;//m&amp;#61;fun(a,p,N);&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;max&amp;#61;%d,position&amp;#61;%d\\n&amp;#34;&lt;/span&gt;,max,p);\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["以下程序的功能是在一个一维整型数组中找出其中最大的数及其下标。请改正程序中的错误。", ["#include <stdio.h>", "#define N 10", "/", "FOUND", "/", "float fun(int *a,int *b,int n)", "{  int *c,max=*a;", "for(c=a+1;c<a+n;c++)", "if(*c>max)", "{  max=*c;", "/", "FOUND", "/", "b=c-a;", "}", "return max;", "}", "void main()", "{  int a[N],i,max,p=0;", "printf(\"please enter 10 integers:\\n\");", "for(i=0;i<N;i++)", "/", "FOUND", "/", "get(\"%d\",a[i]);", "/", "FOUND", "/", "m=fun(a,p,N);", "printf(\"max=%d,position=%d\\n\",max,p);", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;超过范围就溢出&amp;#xff0c;但不像int溢出后变负数&amp;#xff0c;无符号的溢出后还是个正数。&lt;br /&gt;无符号int最大值在limits.h里定义了&amp;#xff1a;#define UINT_MAX      0xffffffff&amp;#xff0c;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["无符号整型怎么样相加", ["为啥这个结果是这样的呢，它是咋算的，什么情况下无符号整型数据加减会溢出"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1、计算机中的有符号数有三种表示方法&amp;#xff0c;即原码、反码和补码。三种表示方法均有符号位和数值位两部分&amp;#xff0c;符号位都是用0表示“正”&amp;#xff0c;用1表示“负”&amp;#xff0c;而数值位&amp;#xff0c;三种表示方法各不相同 [1]  。在计算机系统中&amp;#xff0c;&lt;strong&gt;数值一律用补码来表示和存储&lt;/strong&gt;。&lt;br /&gt;2、int在计算机中占4个字节&amp;#xff0c;int默认是有符号的整型。&lt;br /&gt;原码&amp;#xff1a;10000000 00000000 00000000 00000001&lt;br /&gt;反码&amp;#xff1a;11111111 11111111 11111111 11111110&lt;br /&gt;补码&amp;#xff1a;11111111 11111111 11111111 11111111&lt;br /&gt;3、%u表示的就是unsigned int。65535&lt;br /&gt;补码&amp;#xff1a;11111111 11111111 11111111 11111111&lt;br /&gt;反码&amp;#xff1a;11111111 11111111 11111111 11111111&lt;br /&gt;原码&amp;#xff1a;11111111 11111111 11111111 11111111&lt;br /&gt;4、对原码、反码、补码的转换机制得有了解。&lt;br /&gt;正数反码等于原码&amp;#xff0c;正数补码等于原码。&lt;br /&gt;负数反码等于原码符号位不变&amp;#xff0c;其余取反&amp;#xff0c;负数补码等于反码&amp;#43;1。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["格式输出函数 无符号整型", ["格式输出函数 无符号整型", "为什么-1用%u输出是65535啊", "是怎么转化的呢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;m&amp;#61;&amp;#xff08;w&amp;lt;x&amp;#xff09;?w:x会将w和x中最小的数赋值给m&amp;#xff0c;下面的同理&amp;#xff0c;所以m应为w、x、y、z中最小的数1&amp;#xff0c;选a&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["若w、x、y、z、m均为整型变量，执行下面语句后m为  w=1；x=2；y=3；z=4", ["若w、x、y、z、m均为整型变量，执行下面语句后m为", "w=1；x=2；y=3；z=4；m=（w<x）?w:x；m=（w<y）?w:y；m=（w<z）?w:z； ", "\n", "a1    b2    c3    d4 ", "\n", "请问选哪个？"]], "Tag": "程序设计"}
{"Answer": "帮你改了一下，样例是对的，但是第三个点会超时。\r\n不过第三个点好像超过了数据范围，我用数据范围的最大值测了一下，没有超过一秒\r\n```\r\n#include &lt;iostream&gt;\r\nusing namespace std;\r\nint main() {\r\n    long long N, Sum = 0, result = 0;\r\n    while (cin &gt;&gt; N) {\r\n        long long jiecheng = 1;\r\n        for (register long long i = 1; i &lt;= N; i++) {\r\n        \tjiecheng = (jiecheng * i) % 1000000007;\r\n        \tSum = (Sum + jiecheng) % 1000000007;\r\n        }\r\n        result = Sum % 1000000007;\r\n        Sum = 0;\r\n        cout &lt;&lt; result &lt;&lt; '\\n' &lt;&lt; endl;\r\n    \t}\r\n    return 0;\r\n}\r\n```", "Konwledge_Point": "整型", "Question": ["C++中整型溢出怎么办？", ["3-11阶乘和加强版难度系数2 阶乘和 (10 分)", "\n计算阶乘和Sum= 1!+2!+...+n! 对1000000007求模的结果(不含前导0)。", "\n\n", "输入格式:", "\n输入若干个整数 ，其中每个整数 N ，满足1<=N<=20000000。", "\n\n", "输出格式:", "\n输出对应各个整数的阶乘和对1000000007求模的结果，每个一行，最后一行后面一样有换行符。", "\n\n", "输入样例:", "\n在这里给出一组输入。例如：", "\n\n", "5", "\n18", "\n200000000", "\n\n", "输出样例:", "\n在这里给出相应的输出。例如：", "\n\n", "153", "\n478885618", "\n9949683", "\n\n", "#include <iostream>\nusing namespace std;\nint main() {\n    int fac(int n);\n    long long N, f, Sum = 0, result = 0;\n    while (cin >> N) {\n        if (N >= 1 && N <= 20000000)\n            do {\n                f = fac(N);\n                Sum += f;\n                N -= 1;\n            } while (N);\n            result = Sum % 1000000007;\n            Sum = 0;\n            cout << result << '\\n' << endl;\n            }\n    return 0;\n}\nint fac(int n) {\n    int f;\n    if (n == 1)f = 1;\n    else\n        f = n * fac(n - 1);\n    return f;\n}\n", "\n\n", "我写的代码输入18和200000000数据溢出，有什么解决方法吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;除法是合法的&amp;#xff0c;但是%号是取余数&amp;#xff0c;取余要求符号左右都必须是整数&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["c语言浮点型除以整形是合法的吗", ["c语言浮点型除以整形是合法的吗？？\n例如3.6％5"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这些代码没错。注释里的代码有问题。需要&amp;#xff1a;&lt;/p&gt;\n\n&lt;p&gt;free(*num);&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["c语言整形指针动态分配内存问题", ["如图，想通过传递整形指针动态分配赋值，", "\n\n", "但如此操作，free释放出现错误，感觉这么写有问题，请问主函数箭头处，fun函数应该如何传值", "\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;正解答   int a[4][4]; 然后进行赋值&amp;#xff0c;接着对二维数组进行循环&amp;#xff0c;判断 &lt;/p&gt;\n\n&lt;p&gt;int i,j;&lt;br /&gt;\nint sum&amp;#61;0;&lt;/p&gt;\n\n&lt;p&gt;int max;&lt;br /&gt;\nprintf(&amp;#34;请输入该 4*4 矩阵\\n&amp;#34;);&lt;br /&gt;\nfor (i&amp;#61;0;i&amp;lt;4;i&amp;#43;&amp;#43;)&lt;br /&gt;\nfor (j&amp;#61;0;j&amp;lt;4;j&amp;#43;&amp;#43;)&lt;br /&gt;\n{&lt;!-- --&gt;&lt;br /&gt;\nscanf(&amp;#34;%d&amp;#34;,&amp;amp;a[i][j]);&lt;br /&gt;\n}&lt;/p&gt;\n\n&lt;p&gt;max &amp;#61; a[0][0];&lt;/p&gt;\n\n&lt;p&gt;for (i&amp;#61;0;i&amp;lt;4;i&amp;#43;&amp;#43;)&lt;br /&gt;\nfor (j&amp;#61;0;j&amp;lt;4;j&amp;#43;&amp;#43;)&lt;br /&gt;\n{&lt;!-- --&gt;&lt;br /&gt;\n    if( i &amp;#61;&amp;#61; j) {&lt;!-- --&gt;&lt;/p&gt;\n\n&lt;p&gt;       sum&amp;#43;&amp;#61;a[i][j];&lt;/p&gt;\n\n&lt;p&gt;    }&lt;/p&gt;\n\n&lt;p&gt;  if(a[i][j] &amp;gt;max) {&lt;!-- --&gt;&lt;/p&gt;\n\n&lt;p&gt;     max &amp;#61; a[i][j];&lt;/p&gt;\n\n&lt;p&gt;  }&lt;/p&gt;\n\n&lt;p&gt;  } &lt;/p&gt;\n\n&lt;p&gt;}&lt;br /&gt;\n&lt;br /&gt;\nprintf(&amp;#34;%d\\n&amp;#34;,sum);&lt;br /&gt;\nprintf(&amp;#34;%d\\n&amp;#34;,max);&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["c++输出4×4整型数组（方阵）主对角线的最大值及主对角线所有元素的乘积。", ["c++输出4×4整型数组（方阵）主对角线的最大值及主对角线所有元素的乘积。算法提示：主对角线上的数组元素列和行下标相等。\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;浮点型&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["浮点型除于整型得到的结果是什么类型？", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;整形通俗点就是整数&amp;#xff0c;浮点数就是有小数点的&lt;br /&gt;举个例子:  3/4的结果是1   3/4.0的结果是1.33333333&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["整形和浮点型的用法和区别", ["整形型int 和浮点型float 有什么区别，它们的用法分别是什么"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;乘1.0放在前面&amp;#xff0c;1.0 * i就是浮点数&amp;#xff0c;然后除以(2 * i-1)的结果也是浮点数&lt;br /&gt;反之&amp;#xff0c;i和 2 * i - 1都是整数&amp;#xff0c;那么结果是整除&amp;#xff0c;再乘以1.0已经晚了&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言基础问题，整型数据变成小数", ["请问这个1.0乘在前面和乘在后面为什么输出的结果会不一样呢？"]], "Tag": "程序设计"}
{"Answer": "你这个，我姑且理解为大整数除法和求余数，我之前刚好写过一个大整数类，贴出代码你看一下：\r\n这样你可以声明一个大数，然后不断除32算余数和商\r\n\r\n声明部分\r\n```\r\n #define MAXN 9999  \r\n#define MAXSIZE 10  \r\n#define DLEN 4  \r\n\r\nclass HugeInt\r\n{\r\nprivate:\r\n\tint a[500];    //可以控制大数的位数   \r\n\tint len;       //大数长度  \r\n\tbool sign;\r\npublic:\r\n\tHugeInt(){ len = 1; memset(a, 0, sizeof(a)); }   //构造函数  \r\n\tHugeInt(const int);       //将一个int类型的变量转化为大数  \r\n\tHugeInt(const char*);     //将一个字符串类型的变量转化为大数  \r\n\t\r\n\t\tHugeInt operator/(const int   &amp;) const;    //重载除法运算符，大数对一个整数进行相除运算  \r\n\t\tint    operator%(const int  &amp;) const;    //大数对一个int类型的变量进行取模运算  \r\n```\r\n函数部分：\r\n\r\n\r\n```\r\n HugeInt::HugeInt(const char*s)     //将一个字符串类型的变量转化为大数  \r\n{\r\n\tint t, k, index, l, i;\r\n\tmemset(a, 0, sizeof(a));\r\n\tl = strlen(s);\r\n\tif (s[0] == '-')\r\n\t{\r\n\t\tsign = false;\r\n\t}\r\n\telse sign = true;\r\n\tlen = l / DLEN;\r\n\tif (l%DLEN)\r\n\t\tlen++;\r\n\tindex = 0;\r\n\tint end = 0;\r\n\tfor (i = l - 1; i &gt;= 0; i -= DLEN)\r\n\t{\r\n\t\tt = 0;\r\n\t\tk = i - DLEN + 1;\r\n\t\tif (k&lt;0)\r\n\t\t\tk = 0;\r\n\t\tfor (int j = k; j &lt;= i; j++)\r\n\t\t{\r\n\t\t\tif (s[j] == '-')\r\n\t\t\t{\r\n\t\t\t\tt = 0;\r\n\t\t\t\tend = 1;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tt = t * 10 + s[j] - '0';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (end == 1 &amp;&amp; t == 0)\r\n\t\t{\r\n\t\t\tlen--;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ta[index++] = t;\r\n\t}\r\n}\r\n\r\nHugeInt HugeInt::operator/(const int &amp; b) const   //大数对一个整数进行相除运算  \r\n{\r\n\tHugeInt ret;\r\n\tif (b == 0) return ret;\r\n\tbool bsign = true;\r\n\tif (b &lt; 0) bsign = false;\r\n\tif (sign == bsign) ret.sign = true;\r\n\telse ret.sign = false;\r\n\tint d = abs(b);\r\n\tint i, down = 0;\r\n\tfor (i = len - 1; i &gt;= 0; i--)\r\n\t{\r\n\t\tret.a[i] = (a[i] + down * (MAXN + 1)) / d;\r\n\t\tdown = a[i] + down * (MAXN + 1) - ret.a[i] * d;\r\n\t}\r\n\tret.len = len;\r\n\twhile (ret.a[ret.len - 1] == 0 &amp;&amp; ret.len &gt; 1)\r\n\t\tret.len--;\r\n\treturn ret;\r\n}\r\n\r\nint HugeInt::operator %(const int &amp; b) const    //大数对一个int类型的变量进行取模运算      \r\n{\r\n\tint i, d = 0;\r\n\tif (b == 0) return d;\r\n\tfor (i = len - 1; i &gt;= 0; i--)\r\n\t{\r\n\t\td = ((d * (MAXN + 1)) % b + a[i]) % b;\r\n\t}\r\n\r\n\tif (!sign) d = -d;\r\n\treturn d;\r\n}\r\n\r\n```", "Konwledge_Point": "整型", "Question": ["求内存数据转整形的c算法", ["对内存32字节的数据，也就是256位，以5位分割，计算其整形数值，如11111计算为31，", "\n直到计算到250既可以，一共计算出50个整形保存到数组中，32字节是随机的，在内存中", "\n都是0或1.限C语言实现。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;typeid(int)&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C++可以用什么方法判断一个数据是不是整型", ["在if语句中怎么判断数据是不是整型", "我想在if的判断条件里面判断数据是不是整型"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(a !&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ){\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Input a number:&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Your input is %d\\n&amp;#34;&lt;/span&gt;, a);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Game over! Thank you!\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["3 1关于#c语言#的问题：提示：声明一个整型变量，通过scanf函数给这个整型变量赋值，然后输出这个变量的值", ["编写一个程序观察整型变量的溢出效果。提示：声明一个整型变量，通过scanf函数给这个整型变量赋值，然后输出这个变量的值，看和刚才输入的是否相同。"]], "Tag": "程序设计"}
{"Answer": "http://wenku.baidu.com/link?url=y-jHOk1JtO69cKjdNZ5gt2WJ8tem1edevifR9OHRt4T7FoLVRXgGROr0QrJBMLkammCqdUK7Tw7SFIkbHguLNUY8MX8k0xW9oTGWYGEWOGe", "Konwledge_Point": "整型", "Question": ["请问怎么使用插值算法对整形数来进行插值呢？          ", ["请问怎么使用插值算法对整形数来进行插值呢？整形数是从下位机通过串口采集来的，具体应该怎么对解包的数据进行插值填补呢？"]], "Tag": "程序设计"}
{"Answer": "和操作系统、CPU无关，和编译器有关，turbo c的int就是2字节的。你编译了程序拿到windows 8（注意只有windows 8 32bit可以运行16位程序）跑，用Intel Core i7支持64位的处理器，还是2个字节。", "Konwledge_Point": "整型", "Question": ["是不是所有的系统整型字节数都是4", ["win、Linux、mac等系统是不是所有的系统整型字节数都是4？字符类型都是两个字节？如果有例外，麻烦举例说明，谢谢老师"]], "Tag": "程序设计"}
{"Answer": "转成long怎么样，或者将其他整数转成string", "Konwledge_Point": "整型", "Question": ["超过10位的String类型的整数转换成整型问题。", ["请问下各位，我现在有个超过了10位的String类型的整数，想要把它转换成整型，然后用这个整型去跟其它的整型去作比较，请问下该怎么转换呢，Integer.parseInt()方法试了，要报java.lang.NumberFormatException异常，该怎么弄呢呢呢呢呢呢！！！！"]], "Tag": "程序设计"}
{"Answer": "最好是手机通过httpclient去你的服务器（php端）去抓取数据，轮询。", "Konwledge_Point": "整型", "Question": ["php如何将一个整型数发到Java写的手机APP中", ["PHP将服务器上的信息发给客户端，只需发送一个整型数，最好有代码示例"]], "Tag": "程序设计"}
{"Answer": "随便写入的地址会出现冲突或者内存溢出的情况。", "Konwledge_Point": "整型", "Question": ["设置一绝对地址为0x67a9的整型变量的值为0xaa66", ["这个嵌入式经典问题，我copy代码到VS运行却不对，大家帮我看看咋回事，顺便给我讲下理解吧，我不太理解这个地址转换，谢谢", "\n\n", "    int* ptr;\n    ptr = (int*)0x67a9;\n    *ptr = 0xaa55;\n    cout << *ptr << \" \" << ptr << endl;\n", "\n\n", "错误原因是引发了异常: 写入访问权限冲突。", "\nptr 是 0x67A9。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;max你是在main里定义的&amp;#xff0c;Max函数里没定义呀&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["为啥没法scanner(关键词-整型)", ["输入3个整型数字，编写max方法求出这三数的最大值，最后在主方法内调用输出。", "  能帮我看看我的码该怎么改吗，为啥没法scanner？", "\n", "import", " java.util.Scanner;\n", "public", " ", "class", " Findmax{\n    ", "public", " static ", "int", " Max(", "int", " a,", "int", " b,", "int", " c){\n        ", "if", "(a>b){\n        max =a;}\n         ", "else", " ", "if", "(max<c){\n        c=max;}\n        ", "return", " max;\n}\n    ", "public", " static ", "void", " main(String[] args){\n        Scanner ", "in", "=", "new", " Scanner(", "System", ".", "in", ");\n    ", "System", ".", "out", ".println(\"请输入第一个数字\");\n    ", "int", " a=", "in", ".nextlnt();\n    ", "System", ".", "out", ".println(\"请输入第二个数字\");\n    ", "int", " b=", "in", ".nextlnt();\n    ", "System", ".", "out", ".println(\"请输入第s三个数字\");\n    ", "int", " c=", "in", ".nextlnt();\n    ", "int", " max;\n        ", "System", ".", "out", ".println(\"求出的最大值是\"+Max(a,b,c));}\n}\n\n", "\n", "报错内容为以下：", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; N 10&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Inverse&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *pData, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; nLen)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[N],i;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入10个数&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;N ;i&amp;#43;&amp;#43; )\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n源数组序列是&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;N ;i&amp;#43;&amp;#43; )\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%4d&amp;#34;&lt;/span&gt;,a[i]);\n\n    &lt;span class=\"hljs-built_in\"&gt;Inverse&lt;/span&gt;(a,N);\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n逆序后数组序列是&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;N ;i&amp;#43;&amp;#43; )\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%4d&amp;#34;&lt;/span&gt;,a[i]);\n\n    \n    &lt;span class=\"hljs-built_in\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Inverse&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *pData, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; nLen)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,t;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;nLen/&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        t&amp;#61;pData[i];\n        pData[i]&amp;#61;pData[nLen-i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];\n        pData[nLen-i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;t;\n    }    \n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["从键盘输入10个整型数，保存在一维数组中，编写一个函数，实现该数组逆序排列，函数参数必须用指针变量实现；主函数中实现数据的输入以及逆序前后的输出。", ["函数原型：void  Inverse(int *pData, int nLen);", "\n", "程序运行结果示例：", "\n", "请输入10个数：1 3 5 7 9 2 4 6 8 10", "\n", "源数组序列是：   1   3   5   7   9   2   4   6   8  10", "\n", "逆序后数组序列是：  10   8   6   4   2   9   7   5   3   1", "\n", "输入提示信息：\"请输入10个数：\"", "\n", "输入格式：\"%d\"", "\n", "逆序前输出提示：\"\\n源数组序列是：\"", "\n", "逆序前输出格式：\"%4d\"", "\n", "逆序后输出提示：\"\\n逆序后数组序列是：\"", "\n", "输出格式：\"%4d\"，所有数据输出后回车"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;源和目标不能用同一个变量吧&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["python中整型转字节型报错", ["import rsa", "\n", "先生成一对密钥，然后保存.pem格式文件，当然也可以直接使用", "\n", "(pubkey, privkey) = rsa.newkeys(512)", "\n", "pub = pubkey.save_pkcs1()", "pri = privkey.save_pkcs1()", "\n", "load公钥和密钥", "\n", "message = '123.234'.encode('utf-8')", "pubkey = rsa.PublicKey.load_pkcs1(pub)", "privkey = rsa.PrivateKey.load_pkcs1(pri)", "\n", "用公钥加密、再用私钥解密", "\n", "crypto = rsa.encrypt(message, pubkey)", "print(crypto)", "crypto = int.from_bytes(crypto, byteorder='little', signed=True)", "print(crypto)", "crypto = crypto.to_bytes(crypto, byteorder='little', signed=True)", "message = rsa.decrypt(crypto, privkey)", "print(message.decode('utf-8'))", "在倒数第三行代码那儿将整型转为字节型显示溢出报错，具体修改方案不知道怎么修改，希望可以帮助一下"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;文章中有解释说明&amp;#xff1a;&lt;br /&gt;&lt;a href=\"https://www.cnblogs.com/yfish/p/9840021.html\" id=\"textarea_1632813546738_1632813565191_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;为什么字符数组要以\\0结尾 - eatwhat - 博客园&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;一个数组能不能把数组元素大小作为一个元素放在数组的末尾 如果是char类型数组 char string[6]&amp;#61;{&amp;#39;h&amp;#39;,&amp;#39;e&amp;#39;,l&amp;#39;,l&amp;#39;,&amp;#39;o&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://common.cnblogs.com/favicon.svg\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://www.cnblogs.com/yfish/p/9840021.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["整型数组为什么不用加'\\0'，而字符数组要加。", ["整型数组为什么不用加'\\0'，而字符数组要加。整型数组为什么不用加'\\0'，而字符数组要加。整型数组为什么不用加'\\0'，而字符数组要加。整型数组为什么不用加'\\0'，而字符数组要加。整型数组为什么不用加'\\0'，而字符数组要加。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;原题目和扩展功能都实现了&amp;#xff0c;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;//这个函数不改变res中的数据&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;transfer&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; res[],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; goal[],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(res[i]%&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            goal[k&amp;#43;&amp;#43;] &amp;#61; res[i];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; k;\n}\n&lt;span class=\"hljs-comment\"&gt;//这个函数删除res中的奇数&amp;#xff0c;只保留偶数&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;transfer_2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; res[],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; goal[],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(res[i]%&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            goal[k&amp;#43;&amp;#43;] &amp;#61; res[i];\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            res[j&amp;#43;&amp;#43;] &amp;#61; res[i];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; k;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;};\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;],k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    k &amp;#61; &lt;span class=\"hljs-built_in\"&gt;transfer&lt;/span&gt;(a,b,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n    &lt;span class=\"hljs-comment\"&gt;//输出b&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;新生成的奇数数组&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;k;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,b[i]);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-comment\"&gt;//输出a&lt;/span&gt;\n    k &amp;#61; &lt;span class=\"hljs-built_in\"&gt;transfer_2&lt;/span&gt;(a,b,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;); &lt;span class=\"hljs-comment\"&gt;//调用第二个函数&amp;#xff0c;删除a中的奇数&amp;#xff0c;只保留偶数&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a中的数据&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;-k;i&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;//a中只剩下10-k个数据&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["把整型数组res中所有奇数放到另一个整型数组goal中", ["自定义函数，把整型数组res中所有奇数放到另一个整型数组goal中，并返回写入到goal数组中元素的个数。函数原型为：int transfer(int res[],int goal[],int n); n为res数组中有效元素的个数。", "自定义 按下标顺序输出数组中有效元素值。函数原型：void print(int a[],int n);", "在main函数中，自定义数组并调用自定义的transfer函数，测试该函数功能实现。", "扩展：调用transfer函数后，res数组中的奇数如果不保留，仅保留偶数，该如何实现？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;long int a &amp;#61; -2L;  // 定义一个长整型变量&amp;#xff0c;变量名为a&amp;#xff0c;并进行初始化。初始化的时候将-2转化为长整型后再赋给变量a&lt;/p&gt;\n&lt;p&gt;int a &amp;#61; -2L;  // 定义一个整型变量a&amp;#xff0c;并进行初始化。初始化时-2L表示先将-2转化为长整型&amp;#xff0c;但由于a是int类型&amp;#xff0c;所以之后又转化为int类型赋值给变量a&lt;/p&gt;\n&lt;p&gt;有帮助的话采纳一下&amp;#xff0c;谢谢&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["若a为整型变量，则下列语句的输出值为什么是-2", ["a=-2L", "printf(\"%d\\n\",a);"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;scanf_s输入%c、%s这些格式的数据需要指定长度&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;scanf_s(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%c%d&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;data1&lt;/span&gt;, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;op&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;data2&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["缺少scanf_s的整型参数对应于4", ["近几日刚开始学习，抄书上的程序运行，这啥意思啊？", "哪里错了？怎么改呢？", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n\n&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;#61; input(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入数字:&amp;#34;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;.isdigit():\n    &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;)\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入数字:&amp;#34;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["写简单便于看的懂，用Python写一个判断是否为整数不是则转换为整型的程序", ["写代码实现对用户输入的值判断，是否为整数，如果是则转换为整型并输出，否则直接输出“请输入数字”"]], "Tag": "程序设计"}
{"Answer": "可以通过Render来定制显示的格式吧。\r\n\r\npublic class MyIntRenderer extends DefaultTableCellRenderer {\r\n\r\n\tpublic Component getTableCellRendererComponent(JTable table, Object value,\r\n\t\t\tboolean isSelected, boolean hasFocus, int row, int column) {\r\n\t\tComponent c = super.getTableCellRendererComponent(table, value,\r\n\t\t\t\tisSelected, hasFocus, row, column);\r\n\t\tif(value != null &amp;&amp; value instanceof Integer) {\r\n\t\t\tDecimalFormat df = new DecimalFormat(\"#,##0\");\r\n\t\t\tthis.setHorizontalAlignment(RIGHT);\r\n\t\t\tthis.setValue(df.format(value));\r\n\t\t}\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n然后设置一下你的Integer类型的默认Render就可以了：\r\n\r\ntable.setDefaultRenderer(Integer.class, new MyIntRenderer()); \r\n\r\n这样看看是否符合你的需求？", "Konwledge_Point": "整型", "Question": ["JTable显示整型数据格式问题", ["在JTable里有一列整型数据，比如内容是1234，我想正常显示的时候是1,234，编辑的时候变为1234。", "\n这个效果可以把列内容的类型设为Double类型来实现。但是如果设成Double型的话，编辑的时候就会变成1234.0。我不想要后面的小数点和0，不知有什么办法可以做到？ :D "]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; str[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,str);\n&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,n);\n&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,str);\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/836527141046174.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["改错题:使用scanf接收整型变量和字符数组输入并输出", ["使用scanf接收整型变量和字符数组输入并输出", "#include <stdio.h>", "void main()", "{", "    int n;", "char str[10];", "/", "FOUND", "/", "scanf(\"%f\",&n);", "/", "FOUND", "/", "    scanf(\"%s\",str[10]);", "    printf(\"%d\\n\",n);", "        printf(\"%s\",str);", "    return 0;"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;用for循环输出啊&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, *p, array[&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;];\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;;i&amp;#43;&amp;#43;)\n{\narray[i]&amp;#61;i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\np&amp;#61;array;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;;i&amp;#43;&amp;#43;)\n{\n      &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-4d&amp;#34;&lt;/span&gt;,*(p&amp;#43;i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;));\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i%&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n          &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["C语言定义一个大小为50的整型数组，将数字1~50存入该数组，利用指针将数组中的值输出，每行5个，每个数字占4个符号位，左对齐", ["请完善", "\n", "#", "include", " ", "<stdio. h>", "\n\n", "#", "include", " ", "<stdlib. h>", "\n\n", "int", " ", "main", "()", "\n", "{\n", "int", " i, *p, array[", "50", "];\n", "for", "(i=", "0", ";i<", "50", ";i++)\n{\narray[i]=i+", "1", ";\n}\np=αrrαy；\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1 1 1&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["设x,y均为整型变量求值", ["设x，y均为整型变量，且x的值为10，y的值为20，则!（y==x/2）、y!=x%3、x!=y‖x>=y的值是多少"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;int类型不能被赋值为字符&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C++给整型变量输入字符，结果变量值为0？", ["C++给整型变量输入字符，结果变量值为0？", "\n", "编译器版本：gcc (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0", "\n", "#", "include", "<iostream>", "\n", "using", " ", "namespace", " std;\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " a;\n    cin>>a;\n    cout<<a;\n    ", "system", "(", "\"pause\"", ");\n    ", "return", " ", "0", ";\n}\n", "\n", "\n", "我以为是输入字符给整型变量不成功，输出的是系统给变量赋的初始值，然后我又尝试将初始值改为1。", "\n", "#", "include", "<iostream>", "\n", "using", " ", "namespace", " std;\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " a=", "1", ";\n    cin>>a;\n    cout<<a;\n    ", "system", "(", "\"pause\"", ");\n    ", "return", " ", "0", ";\n}\n", "\n", "\n", "请问朋友们这是什么原因？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;改动处见注释&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;#include&amp;lt;stdio.h&amp;gt;\nint main()\n{\n    int a[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;],i,j,k,t,count&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    for(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        for(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;;j&amp;#43;&amp;#43;)\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i][j]);\n    }\n    for(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;;j&amp;#43;&amp;#43;)\n    {\n        for(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;i&amp;#43;&amp;#43;)     //(i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;i&amp;#43;&amp;#43;) 修改\n            for(k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;-i;k&amp;#43;&amp;#43;)//(k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;k&amp;#43;&amp;#43;) 修改\n                if(a[k][j]&amp;gt;a[k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j])\n                {\n                    t&amp;#61;a[k][j];\n                    a[k][j]&amp;#61;a[k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j];\n                    a[k&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j]&amp;#61;t;  //a[k][j]&amp;#61;t; 修改\n                }\n    }//修改\n    for(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        for(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;;j&amp;#43;&amp;#43;)\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%4d&amp;#34;&lt;/span&gt;,a[i][j]);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["功能说明：从键盘输入5行6列整型二维数组的各元素，然后将数组各列元素分别按升序排序，再按行输出数组的各元素。", ["\n", "#include<stdio.h>", "\nint main()\n{\n    int a[5][6],i,j,k,t,", "count", "=0;\n    ", "for", "(", "i", "=0;i<5;i++)\n       {\n        ", "for", "(", "j", "=0;j<6;j++)\n        scanf(", "\"%d\"", ",&a[i][j]);\n       }\n       ", "for", "(", "j", "=0;j<6;j++)\n       {\n           ", "for", "(", "i", "=1;i<5;i++)\n            ", "for", "(", "k", "=0;k<5;k++)\n            ", "if", "(a[k][j]>a[k+1][j])\n            {\n                ", "t", "=a[k][j];\n                a[k][j]=a[k+1][j];\n                a[k][j]=t;\n            }\n            ", "for", "(", "i", "=0;i<5;i++)\n                {", "for", "(", "j", "=0;j<6;j++)\n                printf(", "\"%4d\"", ",a[i][j]);\n            printf(", "\"\\n\"", ");\n       }}\n    return 0;\n}\n", "\n", "怎么实现题目要求的那样，我这为什么原样输出了"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0.0f&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a;\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a);\n            sum &amp;#43;&amp;#61; a;\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.2f\\n&amp;#34;&lt;/span&gt;, sum / n);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["c语言计算一组整型数据的平均值", ["输入数据有多组，每组占一行，每组由多个整数组成，中间由空格隔开。每一行第一个正整数T，表示有T个整数。", "求解"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,b &amp;#61; &lt;span class=\"hljs-number\"&gt;18&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a&amp;#61;%d,b&amp;#61;%d\\n&amp;#34;&lt;/span&gt;,a,b);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["打印输出两个整型变量的值，两个变量的值分别为8和18。", ["打印输出两个整型变量的值，两个变量的值分别为8和18。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;#include &amp;#34;stdio.h&amp;#34;\nint main(){\n    int a[10]&amp;#61;{1,2,3,4,5,6,7,8,9,10};\n\n    int i;\n\n    for(i&amp;#61;9;i&amp;gt;&amp;#61;0;i--){\n        printf(&amp;#34;%d\\t&amp;#34;,a[i]);\n    }\n\n    return 0;\n}&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["定义一个包含10个整型元素(12 345.678910)的一维数组,将数组 元素逆序输出。", ["定义一个包含10个整型元素(12\n345.678910)的一维数组,将数组\n元素逆序输出。怎么解决"]], "Tag": "程序设计"}
{"Answer": "找本 数电或模电书看下就可以了。这电路不得复杂，可惜我也忘光了。。。。", "Konwledge_Point": "整型", "Question": ["运算放大整形电路求解释", ["看不懂这个电路中的运放，求大神解释下。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;提问的几道题目&amp;#xff0c;在这里都有&lt;br /&gt;&lt;a href=\"https://wenku.baidu.com/view/29902d3a7fd184254b35eefdc8d376eeaeaa17ea.html\" id=\"textarea_1665194478840_1665194564711_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;实验三基本运算与输入输出 - 百度文库&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"margin: 0px 0 2px\"&gt;&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://edu-wenku.bdimg.com/v1/pc/2020%E6%96%B0%E9%A6%96%E9%A1%B5/wenku-header-icon.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://wenku.baidu.com/view/29902d3a7fd184254b35eefdc8d376eeaeaa17ea.html&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["3.2C语言问题 编写一个程序输出一个无符号整型变量的二进制形式", ["．编写一个程序，输出一个无符号整型变量值的二进制形式。下面是一段可以实现逐位输出功能的语句，请理解后应用到自己的程序中。", "   unsigned int a,b,n,mode;", "   scanf(\"%u\",&a);", "   n=16; b=a; mode=0x8000;", "   printf(\"%u in binary format is:\",a);", "   while(n>0) {　　　　 / *　表示在条件满足，即n>0的时候循环执行{}内的4条语句 */", "        printf(\"%d\",b/mode);", "        b=b%mode;", "        mode=mode/2;", "        n=n-1;", "   }"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;实现Count_Digit方法&amp;#xff0c;在方法中遍历循环判断是否满足末位是x&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Count_Digit&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;( &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[ ][&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; ], &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x )&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{ &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;],i,j,num&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,m,n,x;\n&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;m,&amp;amp;n) ; &lt;span class=\"hljs-comment\"&gt;//读入行列数目&amp;#xff0c;并输入m行n列元素&amp;#xff0c;m和n保证小于10&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;m; i&amp;#43;&amp;#43;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j&amp;lt;n; j&amp;#43;&amp;#43;)\n&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a[i][j]);\n&lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;x); &lt;span class=\"hljs-comment\"&gt;// 读入数组元素后&amp;#xff0c;再读入指定的末位数字x&lt;/span&gt;\nnum&amp;#61;&lt;span class=\"hljs-built_in\"&gt;Count_Digit&lt;/span&gt;(a,m,n, x) ; &lt;span class=\"hljs-comment\"&gt;// 调用函数求num&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;num&amp;#61;%d&amp;#34;&lt;/span&gt;, num);\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Count_Digit&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;( &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[ ][&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; ], &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x )&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; count&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;they are &amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;m;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n;j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[i][j]%&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#61;&amp;#61;x){\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d,&amp;#34;&lt;/span&gt;, a[i][j]);\n                count&amp;#43;&amp;#43;;\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; count;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["本题要求实现一个函数，可统计整型二维数组中所有末位是x（x是0-9）的元素的个数并输出这些元素。", ["本题要求实现一个函数，可统计整型二维数组中所有末位是x（x是0-9）的元素的个数并输出这些元素。", "要求主函数读入二维数组的行、列数，以及各个元素值。并读入x的值。", "在子函数输出满足要求的元素（注意：英文逗号分隔），回主函数输出满足要求的元素个数。", "\n", "函数接口定义：", "int Count_Digit (  int a[ ][10 ],  int m,int n,int x );", "其中 a 和 x 都是用户传入的参数。 a是主函数传递的二维数组，m和n分别是二维数组的行、列元素个数。", "x是指定的末位数字。函数输出所有末位是x（x是0-9）的元素，并返回末位是x的元素个数。", "\n", "裁判测试程序样例：", "在这里给出函数被调用进行测试的例子。例如：", "#include <stdio.h>", "int Count_Digit (  int a[ ][10 ],  int m,int n,int x );", "int main()", "{ int  a[10][10],i,j,num=0,m,n,x;", "  scanf(\"%d%d\",&m,&n) ; //读入行列数目，并输入m行n列元素，m和n保证小于10", "    for(i=0; i<m; i++)", "    for(j=0; j<n; j++)", "         scanf(\"%d\", &a[i][j]);", "     scanf(\"%d\", &x);                  // 读入数组元素后，再读入指定的末位数字x", "   num=Count_Digit(a,m,n, x)  ;        //  调用函数求num", "   printf(\"num=%d\", num) ;", "  return 0;", "}", "\n", "/* 请在这里填写答案 */", "输入样例：", "3 4", "13 15 25 36", "35 18 17 23", "12 22 45 565", "5", "输出样例：", "在这里给出相应的输出。例如：", "\n", "they are 15,25,35,45,565,num=5", "代码长度限制", "16 KB", "时间限制", "400 ms", "内存限制", "64 MB", "C (gcc)", "1", "​", "上一题"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; N 20&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[N],b[N],c[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;*N],m,n,i,j,k;\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请分别输入两组升序数列的长度:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d,%d&amp;#34;&lt;/span&gt;,&amp;amp;m,&amp;amp;n);\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入第一组 %d 个整数数据:&amp;#34;&lt;/span&gt;,m);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;m;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入第二组 %d 个整数数据:&amp;#34;&lt;/span&gt;,n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;b[i]);\n\n    i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i &amp;lt; m &amp;amp;&amp;amp; j &amp;lt; n)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[i] &amp;gt;&amp;#61; b[j])\n           c[k&amp;#43;&amp;#43;] &amp;#61; b[j&amp;#43;&amp;#43;];\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n           c[k&amp;#43;&amp;#43;] &amp;#61; a[i&amp;#43;&amp;#43;];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i &amp;#61;&amp;#61; m)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(k &amp;lt; m &amp;#43; n)\n        {\n            c[k&amp;#43;&amp;#43;] &amp;#61; b[j&amp;#43;&amp;#43;];\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j &amp;#61;&amp;#61; n)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(k &amp;lt; m &amp;#43; n)\n        {\n            c[k&amp;#43;&amp;#43;] &amp;#61; a[i&amp;#43;&amp;#43;];\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i &amp;lt; m&amp;#43;n;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%4d&amp;#34;&lt;/span&gt;,c[i]);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["给定两组已按顺序排列好的整形数据，编写一个程序把他们合并为一组按顺序排列的数据。请问后面部分怎么改？", ["int main()", "{", "    int m,n,r,i,j,k,t;", "    printf(\"请分别输入两组升序数列的长度:\");", "    scanf(\"%d,%d\",&m,&n);", "    r=m+n,i=m,j=n;", "    int a[i],b[j],c[r];", "    printf(\"请输入第一组整数数据:\");", "    scanf(\"%d\",&a[i]);", "    printf(\"请输入第二组整数数据:\");", "    scanf(\"%d\",&b[j]);", "    for(k=0;k<m;k++)", "    {", "        c[k]=a[i];", "        i++;", "     for(k=m;k<m+n;k++)", "     {", "         c[k]=b[j];", "         j++;", "     for(k=0;k<m+n;k++)", "     for(r=0;r<m+n;r++)", "    {", "      if(c[r+1]<c[r])", "     {", "         t=c[r];", "        c[r]=c[r+1];", "        c[r+1]=t;", "     }", "     }", "     }", "     }", "     printf(\"%d\",&c[r]);", "     return 0;", " }"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;  average&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;  a,b,c,d;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d %d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;b,&amp;amp;c,&amp;amp;d);\n    average&amp;#61;(a&amp;#43;b&amp;#43;c&amp;#43;d)/&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Sum &amp;#61;%d&amp;#34;&lt;/span&gt;,a&amp;#43;b&amp;#43;c&amp;#43;d) ;\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Average &amp;#61;%d&amp;#34;&lt;/span&gt;,average);\n    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["本题要求编写程序，计算4个整数的和与平均值。题目保证输入与输出均在整型范围内", ["  请问这个程序在DEV 运行没什么问题但是在在线的检测系统下报错。", "\n", "\n", "#", "include", " ", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{", "float", " average=", "0.0", ";\n", "double", " a;\n", "double", " b;\n", "double", " c;\n", "double", " d;\n", "scanf", "(", "\"%lf %lf %lf %lf\"", ",&a,&b,&c,&d);\naverage=(a+b+c+d)/", "4", ";\n", "printf", "(", "\"Sum =%.0f\"", ",a+b+c+d) ;\n", "printf", "(", "\"Average =%.1f\"", ",average);\n", "return", " ", "0", ";}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"hljs language-cpp\"&gt;void fun(int x[],int n)\n\n{\n\nint minPos &amp;#61; 0;\n\nfor(int i&amp;#61;1;i&amp;lt;n;i&amp;#43;&amp;#43;)\n\n     if(x[i] &amp;lt; x[minPos])\n\n   {\n\n      minPos &amp;#61; i;\n\n   }\n\nint tmp &amp;#61; x[0];\n\nx[0] &amp;#61; x[minPos];\n\nx[minPos] &amp;#61; tmp;\n\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["一维整型数组输入10个整数，调用fun函数找出其中最小数,并和数组的第一个元素作交换。", ["#include \"stdio.h\"", "\n\n", "void fun(int x[],int n)", "\n\n", "{", "\n\n", "/**********Program**********/", "\n\n", " ", "\n\n", "/**********  End  **********/ ", "\n\n", "}", "\n\n", "main()", "\n\n", "{", "\n\n", "   int a[10],i,min;", "\n\n", "   for(i=0;i<10;i++)", "\n\n", "         scanf(\"%d\",&a[i]);", "\n\n", "   fun(a,10);", "\n\n", "   printf(\"%d\\n\",a[0]); ", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;是一个意思&amp;#xff0c;都是指针地址增加。&lt;br /&gt;for循环里的是想存储多次输入的值&amp;#xff0c;因为最开始第一次前&amp;#xff0c;指针p已经指向数组的首地址了。&lt;br /&gt;相当于是地址增加偏移的意思。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["下面是用指针变量输出整型数组a的10个元素", ["我不太理解的是第6行，scanf语句括号里面为什么要用p++", "第8行，for循环语句里面，为什么要用p++", "这两处所用的p++是一个意思吗？还是所蕴含的含义不相同?", "求解答!"]], "Tag": "程序设计"}
{"Answer": "基本上不可能知道。\r\n如果你一定想知道，可以试试给数组赋一个不会用到的初值，如：0xFFFFFFFF，或者 零。\r\n然后对数组进行循环统计，看看哪些下标不再是初值，就是实际的元素。然后，统计一下个数即可。", "Konwledge_Point": "整型", "Question": ["一个未满的整型数组，怎么求真实元素个数？", ["比如一个整型数组：int a[10];    这个数组没有存放满10个数。我怎么知道其中的数据元素个数？"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,b &amp;#61; &lt;span class=\"hljs-number\"&gt;18&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a&amp;#61;%d,b&amp;#61;%d\\n&amp;#34;&lt;/span&gt;,a,b);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n \n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["打印输出两个整型变量的值，两个变量的值分别为8和18", ["打印输出两个整型变量的值，两个变量的值分别为8和18"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;修改如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; str[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;],i,k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,a[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;},flg;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入整数&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;str[i]);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,flg&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;;j&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;//while(i!&amp;#61;j)&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i !&amp;#61; j &amp;amp;&amp;amp; str[i]%str[j]&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;//if(str[j]/str[i]&amp;#61;&amp;#61;0)&lt;/span&gt;\n            {\n                  flg &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//a[k]&amp;#61;str[i];&lt;/span&gt;\n                  &lt;span class=\"hljs-comment\"&gt;//k&amp;#43;&amp;#43;;&lt;/span&gt;\n            }\n                          &lt;span class=\"hljs-comment\"&gt;//j&amp;#43;&amp;#43;;&lt;/span&gt;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flg) a[k&amp;#43;&amp;#43;] &amp;#61; str[i];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;k;i&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;//for(i&amp;#61;0;i&amp;lt;20;i&amp;#43;&amp;#43;)&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,a[i]);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["输入20个整数存入整型数组中，输出能被数组中其他元素整除的元素", ["#include<stdio.h>", "int main()", "{", "    int str[20],i,k=0,j=0,a[20];", "    printf(\"请输入整数：\");", "    for(i=0;i<20;i++)", "    scanf(\"%d\",&str[i]);", "    for(i=0;i<20;i++)", "    {", "        while(i!=j)", "        {", "            if(str[j]/str[i]==0)", "            {", "                a[k]=str[i];", "               k++;", "            }", "            j++;", "        }", "    }", "    for(i=0;i<20;i++)", "        printf(\"%d\\n\",a[i]);", "    return 0;", "}哪里出了问题😪"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\nvoid tidy(&lt;span class=\"hljs-name\"&gt;char&lt;/span&gt; *s, int *s_4, int *j)  //按4位转换成整数&amp;#xff0c;对齐没看明白。\n{\n    int i;\n    *j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    //转换为&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;位整数组\n    int len &amp;#61; strlen(&lt;span class=\"hljs-name\"&gt;s&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    for(&lt;span class=\"hljs-name\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; len; i&amp;#43;&amp;#43;)&lt;/span&gt;\n    {\n        s_4[*j] &amp;#61; s_4[*j] * 10 &amp;#43; (s[i] - &amp;#39;0&amp;#39;);\n\n        if((i&amp;#43;1) % 4 &amp;#61;&amp;#61; 0)\n            (*j)&amp;#43;&amp;#43;&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    }\n    if(&lt;span class=\"hljs-name\"&gt;s_4&lt;/span&gt;[*j]!&amp;#61;0)(*j)&amp;#43;&amp;#43;&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n}\n\nint main()\n{\n    int i, j1 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, j2 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    int s1_4[&lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;]&amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}, s2_4[&lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;]&amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    char s1[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;]&amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}, s2[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;]&amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;}&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    //memset(&lt;span class=\"hljs-name\"&gt;s1&lt;/span&gt;, &amp;#39;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#39;, sizeof(&lt;span class=\"hljs-name\"&gt;s1&lt;/span&gt;))&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    //memset(&lt;span class=\"hljs-name\"&gt;s2&lt;/span&gt;, &amp;#39;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;#39;, sizeof(&lt;span class=\"hljs-name\"&gt;s2&lt;/span&gt;))&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入两个大整数&amp;#xff0c;回车结束&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    gets(&lt;span class=\"hljs-name\"&gt;s1&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    gets(&lt;span class=\"hljs-name\"&gt;s2&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    //tidy2(&lt;span class=\"hljs-name\"&gt;s1&lt;/span&gt;, s2, s1_4, s2_4, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;j1&lt;/span&gt;, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;j2&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;//参数在函数里修改后把值带回来&amp;#xff0c;需要用指针。&lt;/span&gt;\n    tidy(&lt;span class=\"hljs-name\"&gt;s1&lt;/span&gt;, s1_4, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;j1&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    tidy(&lt;span class=\"hljs-name\"&gt;s2&lt;/span&gt;, s2_4, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;j2&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\nresult:\\n&amp;#34;&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n\n    for(&lt;span class=\"hljs-name\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; j1; i&amp;#43;&amp;#43;)&lt;/span&gt;\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, s1_4[i])&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    }\n\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n\n    for(&lt;span class=\"hljs-name\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; j2; i&amp;#43;&amp;#43;)&lt;/span&gt;\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, s2_4[i])&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n    }\n\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["如何将纯数字字符型数组转换为四个一组整形数组？", ["下面是源代码，但是有好多bug，但是实在找不到", "\n", "问题相关代码，请勿粘贴截图", "\n", "#define _CRT_SECURE_NO_WARNINGS", "\n", "#include<stdio.h>", "\n", "#include<string.h>", "\n\n", "int", " max(a, b)\n{\n    ", "if", " (a > b) ", "return", " a;\n    ", "else", " ", "return", " b;\n}\n", "int", " min(a, b)\n{\n    ", "if", " (a < b) ", "return", " a;\n    ", "else", " ", "return", " b;\n}\n", "void", " tidy(", "char", "* s1, ", "char", "* s2,", "int", " *s1_4,", "int", " *s2_4,", "int", " j1,", "int", " j2)\n{\n    \n    ", "int", " i;\n    j1 = j2 = ", "0", ";\n    //转换为", "4", "位整数组\n    ", "for", " (i = ", "0", "; i < ", "100", "; i += ", "4", ")\n    {\n        s1_4[j1] = ((", "int", ")s1[i] - ", "48", ") * ", "1000", " + ((", "int", ")s1[i + ", "1", "] - ", "48", ") * ", "100", " + ((", "int", ")s1[i + ", "2", "] - ", "48", ") * ", "10", " + ((", "int", ")s1[i + ", "3", "] - ", "48", ");\n        ", "if", " (s1_4[j1] == ", "0", ")\n            break;\n        j1++;\n    }\n    ", "for", " (i = ", "0", "; i < ", "100", "; i += ", "4", ")\n    {\n        s2_4[j2] = ((", "int", ")s2[i] - ", "48", ") * ", "1000", " + ((", "int", ")s2[i + ", "1", "] - ", "48", ") * ", "100", " + ((", "int", ")s2[i + ", "2", "] - ", "48", ") * ", "10", " + ((", "int", ")s2[i + ", "3", "] - ", "48", ");\n        ", "if", " (s1_4[j1] == ", "0", ")\n            break;\n        j2++;\n    }\n    //数组反序，实现数位对齐\n    ", "int", " start = ", "0", ", end1 = j1, end2 = j2;\n    ", "int", " ", "temp", ";\n    ", "while", " (", "start", " < end1)\n    {\n        ", "temp", " = s1_4[end1];\n        s1_4[end1] = s1_4[", "start", "];\n        s1_4[", "start", "] = ", "temp", ";\n        ", "start", "++;\n        end1", "--;", "\n\n    }\n    start = ", "0", ";\n    ", "while", " (", "start", " < end2)\n    {\n        ", "temp", " = s1_4[end1];\n        s1_4[end1] = s1_4[", "start", "];\n        s1_4[", "start", "] = ", "temp", ";\n        ", "start", "++;\n        end1", "--;", "\n\n    }\n    \n}\n", "void", " main()\n{\n    ", "int", " j1 = ", "0", ", j2 = ", "0", ";\n    ", "int", " s1_4[", "25", "], s2_4[", "25", "];\n    ", "int", " i;\n    ", "char", " s1[", "100", "], s2[", "100", "];\n    memset(s1, ", "'0'", ", sizeof(s1));\n    memset(s2, ", "'0'", ", sizeof(s2));\n    printf(\"输入两个大整数，回车结束：\");\n    gets(s1);\n    gets(s2);\n    tidy(s1, s2, s1_4, s2_4, j1, j2);\n    printf(\"\\nresult:\\n\");\n    ", "for", " (i = ", "0", "; i < j1; i++)\n    {\n        printf(\"%d\", s1_4[i]);\n    }\n    printf(\"\\n\");\n    ", "for", " (i = ", "0", "; i < j2; i++)\n    {\n        printf(\"%d\", s2_4[i]);\n    }\n}\n\n", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *a, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[i] &amp;#43; a[j] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; j; k &amp;lt; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; k&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;// j后面元素前移&lt;/span&gt;\n                    a[k] &amp;#61; a[k &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                n--;\n\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; i; k &amp;lt; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; k&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;// i后面元素前移&lt;/span&gt;\n                    a[k] &amp;#61; a[k &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                n--;\n\n                i--; &lt;span class=\"hljs-comment\"&gt;// 重新从i处查找&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; n;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *a, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; *n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt; *n; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[i] &amp;#43; a[j] &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; j; k &amp;lt; *n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; k&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;// j后面元素前移&lt;/span&gt;\n                    a[k] &amp;#61; a[k &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                (*n)--;\n\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k &amp;#61; i; k &amp;lt; *n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; k&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;// i后面元素前移&lt;/span&gt;\n                    a[k] &amp;#61; a[k &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                (*n)--;\n\n                i--; &lt;span class=\"hljs-comment\"&gt;// 重新从i处查找&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n    }\n}\n\n&lt;span class=\"hljs-comment\"&gt;/* fun2简写\nvoid fun2(int *a, int *n)\n{\n    *n &amp;#61; fun(a, *n);\n}\n//*/&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;};\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b[] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;};\n\n    n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(a, n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n        cout &amp;lt;&amp;lt; a[i] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n    cout &amp;lt;&amp;lt; endl;\n\n    n &amp;#61; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;fun2&lt;/span&gt;(b, &amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n        cout &amp;lt;&amp;lt; a[i] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["一个整型数组有 N个元素，c++编写一函数实现删除数组中所有两个值相加为的10 元素。", ["例如原数组为{1,3,8,2,2,9,7,7}，输出的数组则为{2,7}。要求用值传递和指针传递2种方式实现。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这个简单&amp;#xff0c;先将数组的第一个数据保存一下&amp;#xff0c;即&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;int FirstNum &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后将数组的每个数据与其后面的数据进行替换&amp;#xff0c;即&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i &amp;lt; arr.&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n{\n    v &amp;#61; arr[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//获取后面的值&lt;/span&gt;\n    arr[i] &amp;#61; v;&lt;span class=\"hljs-comment\"&gt;//将后面的值替换为前面的值&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;注意&amp;#xff0c;这里我没用foreach循环而且条件语句是i &amp;lt; arr.length() - 1;之所以这样&amp;#xff0c;是因为如果遍历到数组的最后一个数值&amp;#xff0c;那么在i&amp;#43;1这个位置就会抛出一个数组越界的异常。所以是arr.length() -1&lt;br /&gt;接着&amp;#xff0c;我们将数组的最后一个值赋值为我们记录的数组的第一个值&amp;#xff0c;即&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;arr[arr.length-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; FirstNum&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这样&amp;#xff0c;一个数组的最后一个取值替换为第一个取值并将其他数据前移的代码就写好了。总代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] arr &amp;#61; new &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[]{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;&amp;#xff0c;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;&amp;#xff0c;....&lt;span class=\"hljs-number\"&gt;.6&lt;/span&gt;};\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; FirstNum &amp;#61; arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i &amp;lt; arr.&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n{\n    v &amp;#61; arr[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//获取后面的值&lt;/span&gt;\n    arr[i] &amp;#61; v;&lt;span class=\"hljs-comment\"&gt;//将后面的值替换为前面的值&lt;/span&gt;\n}\narr[arr.&lt;span class=\"hljs-built_in\"&gt;length&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;] &amp;#61; FirstNum;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;我们可以在最后面插入两个println语句来观察这种变化&amp;#xff1a;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/808942319936125.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;可以看到&amp;#xff0c;数组的第一个值1已经成了它后面的值2&amp;#xff0c;数组最后一个值4已经成了数组第一个值1&lt;br /&gt;如果将利用toString数组更改前与更改后的变化输出&amp;#xff0c;则是&amp;#xff1a;&lt;br /&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/564354319936184.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;OK&amp;#xff0c;如果以上内容帮助了你的话&amp;#xff0c;请采纳&amp;#xff0c;谢谢qwq&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["程序中已经定义了一个整型数组，如下所示：", ["int[] arr={6,8,7,4,9,10,……}", "要求编写一个程序，将数组的第一个元素的取值放到数组的最后一个元素，即arr变为：｛8，7，4，9，10，.....6｝。", "求解答"]], "Tag": "程序设计"}
{"Answer": "[quote]只是一个数值，付给一个short类型的变量而已。[/quote]\r\n\r\n还有了short 本身就是短整型。所以完全可以对其进行整型赋值，不要超出他的精度就可以了", "Konwledge_Point": "整型", "Question": ["Java中整型字面值常量为什么可以赋值给short", ["如：", "\n[code=\"java\"]short s = 3;[/code]", "\n3不是int型吗"]], "Tag": "程序设计"}
{"Answer": "int num = 10;\r\nstring s = Console.ReadLine();\r\nint n = 0;\r\nif (int.TryParse(s, out n))\r\n{\r\nnum = Convert.ToInt32(s);\r\nConsole.WriteLine(num);\r\n}\r\nelse\r\n{\r\nConsole.WriteLine(string.Concat(s.Select(x =&gt; x.ToString(\"X2\"))));\r\n}", "Konwledge_Point": "整型", "Question": ["C#中将字符或者字符串赋值给已定义的整型变量", ["已经在方法体中编写如下代码：", "\n                        int num = 10;", "\n            num = Convert.ToInt32(Console.ReadLine());", "\n            Console.WriteLine(num);", "\n            Console.Read();", "\n                        现在问题是如果在输入字符或者一个字符串程序就会终止，有什么办法将输入的字符或字符串转换成ASCII码再输出显示呢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;稍微改了下&amp;#xff0c;你看看&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;int main()\n{\n    int a[10]&amp;#61;{ 3,6,1,7,8,4,9,5,10,2}, i, j, k, t;\n    \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;数组中的初值是&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);    \n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;0;i&amp;lt;10;i&amp;#43;&amp;#43;)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-4d&amp;#34;&lt;/span&gt;,a[i]);\n    }\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;1;i&amp;lt;9;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;j&lt;/span&gt;&amp;#61;i&amp;#43;1;j&amp;lt;9;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[j]&amp;gt;a[i])\n            {\n                &lt;span class=\"hljs-attribute\"&gt;t&lt;/span&gt;&amp;#61;a[i];\n                a[i]&amp;#61;a[j];\n                a[j]&amp;#61;t;\n            }\n        }\n    }\n    \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n排序后的数组元素是&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;0;i&amp;lt;10;i&amp;#43;&amp;#43;)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-4d&amp;#34;&lt;/span&gt;,a[i]);\n    }\n    \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    \n    return 0;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["来个人看看我哪错了：定义一个大小为10的整型一维数组，初始化所有数组元素，编程对中间的8个元素进行降序排序，即第一个和最后一个元素不参与排序", ["#include<stdio.h>", "int main()", "{", "    int a[10]={ 3,6,1,7,8,4,9,5,10,2}, i, j, k, t;", "    printf(\"数组中的初值是：\\n\");", "    for(i=0;i<10;i++)", "    {", "        printf(\"%-4d\",a[i]);", "    }", "    for(i=1;i<7;i++)", "    {", "        for(j=1;j<7-i;j++)", "        {", "            if(a[j]>a[j-1])", "            {", "                t=a[j];", "                a[j]=a[j-1];", "                a[j-1]=t;", "            }", "        }", "    }", "    printf(\"\\n排序后的数组元素是：\\n\");", "    for(i=1;i<8;i++)", "    {", "        printf(\"%-4d\",a[i]);", "    }", "    printf(\"\\n\");", "    return 0;", "}"]], "Tag": "程序设计"}
{"Answer": "http://wenku.baidu.com/link?url=GD-5NhPC0qwppBCSdyfYJ4hbC0SFl_OI-yTTx_D8y1VOJ6fCMeAaSBV_95BB78n3D5jTtvixfAoprMi3K5qTiE6vStevFb-VX_mmb1PJl3a", "Konwledge_Point": "整型", "Question": ["单片机是怎么将浮点模拟量和整形开关量通过串口通讯发送到上位机的？", ["单片机是怎么将浮点模拟量和整形开关量通过串口通讯发送到上位机的？上位机如何对收到的字节流解包？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;for(int i&amp;#61;0; i&amp;lt;x; i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;br /&gt;printf(&amp;#34;%d &amp;#34;,a[i]);&lt;br /&gt;}&lt;/p&gt;\n&lt;p&gt;这里应该是 printf(&amp;#34;%d &amp;#34;,c[i]);&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["给定两个整型数组，本题要求找出不是两者共有的元素。看看我写的有啥问题。", ["给定两个整型数组，本题要求找出不是两者共有的元素。", "输入格式:", "\n", "输入分别在两行中给出两个整型数组，每行先给出正整数N（≤20），随后是N个整数，其间以空格分隔。", "输出格式:", "\n", "在一行中按照数字给出的顺序输出不是两数组共有的元素，数字间以空格分隔，但行末不得有多余的空格。题目保证至少存在一个这样的数字。同一数字不重复输出。", "输入样例:", "\n", "10 3 -5 2 8 0 3 5 -15 9 100", "11 6 4 8 2 6 -5 9 0 100 8 1", "结尾无空行", "\n", "输出样例:", "\n", "3 5 -15 6 4 1", "\n", "\n", "#include <stdio.h>", "\nint main(){\nint n,m,x=", "0", ";\nint a[", "20", "],", "b[20],c[40];\n", "scanf(\"%d\",&n);\n", "for(int i=", "0", "; i<n; i++){", "\n    ", "scanf(\"%d\",&a[i]);\n", "}\n", "scanf(\"%d\",&m);\n", "for(int ", "j=0; ", "j<m; ", "j++){\n", "    ", "scanf(\"%d\",&b[j]);\n", "}\nint ", "count", "=", "0", ",", "bount=0;\n", "for(int i=", "0", "; i<n; i++){", "\n    for(int ", "j=0; ", "j<m; ", "j++){\n", "        if(a[i]==", "b[j]){\n", "            ", "count", "++;\n        }\n    }\n    if(", "count", "==", "0", "){\n    c[x]=a[i];\n    x++", ";}", "\n}\nfor(int ", "j=0; ", "j<m; ", "j++){\n", "    for(int i=", "0", "; i<n; i++){", "\n        if(", "b[j]==a[i]){\n", "            ", "bount++;\n", "        }\n    }\n    if(", "bount==0){\n", "        c[x]=", "b[j];\n", "        x++;\n    }\n}\nfor(int i=", "0", "; i<x; i++){", "\nprintf(", "\"%d \"", ",a[i]);\n}\nreturn ", "0", ";\n}\n\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;长度是3的时候&amp;#xff0c;你确定要输出ten-ten这种东西吗&lt;br /&gt;你就直接判断千位和百位只要不是0就输出文字就行了&amp;#xff0c;没有特殊转化&lt;br /&gt;还有&amp;#xff0c;你必须判断个位非0&amp;#xff0c;才能加-&amp;#xff0c;否则20会输出成twenty-&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;single&amp;#61;[&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;three&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;four&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;five&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;six&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;seven&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;eight&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;nine&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;ten&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;eleven&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;tweleve&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;thirting&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;fourting&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;fifting&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;sixting&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;seventing&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;eighting&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;nineting&amp;#39;&lt;/span&gt;]   \n&lt;span class=\"hljs-built_in\"&gt;double&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;twenty&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;thirty&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;fourty&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;fifty&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;sixty&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;seventy&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;eighty&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;ninety&amp;#39;&lt;/span&gt;]  \nnumstr&amp;#61;input(&lt;span class=\"hljs-string\"&gt;&amp;#39;Enter a number 0--1000: &amp;#39;&lt;/span&gt;)  \n&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(numstr)\nqian&amp;#61;&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//1000&lt;/span&gt;\nbai&amp;#61;&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//100&lt;/span&gt;\nshi&amp;#61;&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//10&lt;/span&gt;\nge&amp;#61;&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;%&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; qian&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#39;{single[qian]} thousand &amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; bai&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#39;{single[bai]} hundred &amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; shi&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#39;{double[shi]}&amp;#39;&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ge&amp;gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:\n        &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#39;-{single[ge]}&amp;#39;&lt;/span&gt;)\nelif &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(f&lt;span class=\"hljs-string\"&gt;&amp;#39;{single[ge]}&amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;:\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;zero&amp;#39;&lt;/span&gt;)\n\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["给出一个整型值,返回代表该值得英文", ["给出一个整型值,返回代表该值得英文,比如输入89会返回“eight-nine”", "附加题:能够返回符合英文语法规律的新式,比如输入89会返回“eighty-nine”", "single=['','one','two','three','four','five','six','seven','eight','nine']", "double1=['ten','eleven','tweleve','thirting','fourting','fifting','sixting','seventing','eighting','nineting']", "double2=['','','twenty','thirty','fourty','fifty','sixty','seventy','eighty','ninety']", "numstr=raw_input('Enter a number 0--1000: ')", "numlen=len(numstr)", "num=int(numstr)", "if numlen==1:", "    if int(numstr[0])>0:", "        print(single[num])", "    else:", "        print('zero')", "elif numlen==2:", "    if numstr[0]=='1':", "        print(double1[num-10])", "    else:", "        print(double2[int(numstr[0])]+'-'+single[int(numstr[1])])", "elif numlen==3:", "    if numstr[1]=='1':", "        tmp=double1[int(numstr[2])]", "    else:", "        tmp=double2[int(numstr[1])]+'-'+single[int(numstr[2])]", "    print(single[int(numstr[0])]+' hundred '+tmp)", "else:", "    print('one thousand')", "请问有什么错误？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;通过左右移分解出四个字节&amp;#xff0c;再左右移进行组合&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-attribute\"&gt;unsigned&lt;/span&gt; int a;\n&lt;span class=\"hljs-attribute\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%u&amp;#34;&lt;/span&gt;,&amp;amp;a);\n&lt;span class=\"hljs-attribute\"&gt;unsigned&lt;/span&gt; char n1,n2,n3,n4;\n&lt;span class=\"hljs-attribute\"&gt;n1&lt;/span&gt; &amp;#61; a&amp;gt;&amp;gt;&lt;span class=\"hljs-number\"&gt;24&lt;/span&gt;;\n&lt;span class=\"hljs-attribute\"&gt;n2&lt;/span&gt; &amp;#61; a&amp;lt;&amp;lt;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;\n&lt;span class=\"hljs-attribute\"&gt;n2&lt;/span&gt; &amp;#61; n2&amp;gt;&amp;gt;&lt;span class=\"hljs-number\"&gt;24&lt;/span&gt;;\n&lt;span class=\"hljs-attribute\"&gt;n3&lt;/span&gt; &amp;#61; a&amp;lt;&amp;lt;&lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;;\n&lt;span class=\"hljs-attribute\"&gt;n3&lt;/span&gt; &amp;#61; n3&amp;gt;&amp;gt;&lt;span class=\"hljs-number\"&gt;24&lt;/span&gt;;\n&lt;span class=\"hljs-attribute\"&gt;n4&lt;/span&gt; &amp;#61; a &amp;amp; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;xff;\n&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt; &amp;#61; n4 &amp;lt;&amp;lt; &lt;span class=\"hljs-number\"&gt;24&lt;/span&gt; &amp;#43; n3 &amp;lt;&amp;lt; &lt;span class=\"hljs-number\"&gt;16&lt;/span&gt; &amp;#43; n2&amp;lt;&amp;lt;&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt; &amp;#43; n1;\n&lt;span class=\"hljs-attribute\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%x&amp;#34;&lt;/span&gt;,a);\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["从键盘上输入一个长整型数，将最高8位与最低8位、次高8位与次低8位交换，以十六进制形式输出交换后的结果。", ["从键盘上输入一个长整型数，将最高8位与最低8", "位、次高8位与次低8位交换，以十六进制形式输出交换", "后的结果。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你这都没输入呀&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["输入一个3*3的整形矩阵，中间用空格或回车分割，将其转置后输出", ["pta输出后显示答案错误，要和题目里的输入和输出相同，要怎么改，sos", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;题主代码修改如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; N 10&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;   a[N][N],i,j,m,n,sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,x[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;],k;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* s[N]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;ling&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;yi&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;er&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;san&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;si&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;wu&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;liu&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;qi&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;ba&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;jiu&amp;#34;&lt;/span&gt;};\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;m,&amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;m;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n;j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i][j]);\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;m;i&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n;j&amp;#43;&amp;#43;)\n            sum &amp;#43;&amp;#61; a[i][j];\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d:&amp;#34;&lt;/span&gt;,sum);\n        k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; x[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(sum){\n            x[k&amp;#43;&amp;#43;] &amp;#61; sum % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n            sum /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(k &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) k&amp;#43;&amp;#43;;  &lt;span class=\"hljs-comment\"&gt;//当sum为0时 输出 ling&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(k--;k &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k--)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s &amp;#34;&lt;/span&gt;,s[x[k]]);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["从键盘输入不超过10行10列的整型二维数组的各元素，求出各奇数行（下标为0,2,4,6...的行，即第1,3,5,7...行）之和， 并把和的每位数字转成拼音输出，各数拼音之间以一个空格分隔。", ["样例输入：", "  5  6", "  56  78  36  4   50  80", "  19  44  95  72  -8  60", "  85  67  -3  32  12  35", "  29  21  47  88  28  -9", "  7   66  53  40  20  15", "样例输出：", "304:san ling si", "228:er er ba", "201:er ling yi", "样例说明：", "输入5行6列二维数组；分别求出第1,3,5行的和304, 228, 201，", "并转换成拼音输出。", "\n", "\n", "#include<stdio.h>", "\n", "#define N 10", "\nint main()\n{\n    int a[N][N],i,j,m,n,", "sum", "=0,x,k;\n    char s[N][N]={", "\"ling\"", ",", "\"yi\"", ",", "\"er\"", ",", "\"san\"", ",", "\"si\"", ",", "\"wu\"", ",", "\"liu\"", ",", "\"qi\"", ",", "\"ba\"", ",", "\"jiu\"", "};\n    scanf(", "\"%d%d\"", ",&m,&n);\n    ", "for", "(", "i", "=0;i<m;i++)\n        ", "for", "(", "j", "=0;j<n;j++)\n        scanf(", "\"%d\"", ",&a[i][j]);\n    ", "for", "(", "i", "=0;i<m;i=i+2)\n    {\n        ", "for", "(", "j", "=0;j<n;j++)\n            ", "sum", "=sum+a[i][j];\n        printf(", "\"%d:\\n\"", ",sum);\n        ", "sum", "=0;\n    }\n    return 0;\n}\n", "\n", "怎么把拼音加到数字后面"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-bash\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;){\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n}\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入的数据&amp;#xff1a;&amp;#34;&lt;/span&gt;); \n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;){\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n}\n&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n逆序输出数据&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;){\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;-i]);\n}\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["定义长度为10的整形一组数据，完成一下功能", ["\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; *p &amp;#61; &amp;amp;a;\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d,%p,%p,%d&amp;#34;&lt;/span&gt;,a,&amp;amp;a,p,*p);\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["关于#c语言#的问题：定义整型变量a并赋值、定义指向该变量的指针变量p，输出a、&a、p和*p的值", ["定义整型变量a并赋值、定义指向该变量的指", "针变量p，输出a、&a、p和*p的值。"]], "Tag": "程序设计"}
{"Answer": "str[i]取到的是一个字符，它有着自己的一个ASCII值，str[i]-'0' 就代表str[i]的ASCII码值减去0的ASCII值，差值得到的就是数字本身了\r\n举个例子: 字符‘0’的ASCII是48 ， 而字符‘1’是49，‘1’-‘0’也就是int的1\r\n\r\n整个公式就相当于是把字符串按位拆分出来计算： 两位数 = 十位 * 10 + 个位", "Konwledge_Point": "整型", "Question": ["c++字符串123转换为整型123", ["其中有一句代码：", "\nsum=sum*10+str[i]-'0'", "\n是什么意思", "\n求详细解释"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;switch()里面包含多个参数&amp;#xff0c;按照从右原则&amp;#xff0c;会先判断最后边的参数&amp;#xff0c;判断完进入case后&amp;#xff0c;执行break会跳出&amp;#xff0c;所以你的程序只能统计整数末位数字0、1、…、9各出现的次数。这里你需要再设计一下。&lt;br /&gt;另外&amp;#xff0c;当三位数时&amp;#xff0c;提取10位数字的e&amp;#61;(a[i]%100)/10是不正确的&amp;#xff0c;应该为e&amp;#61;(a[i]/10)%10&amp;#xff1b;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["假定在一个整形数组中，每一个元素都是不超过3位的正整数，统计该数组全部元素中数字0、1、…、9各出现的次数", ["下列代码不知哪里出错了", "#include", "#include", "using namespace std;", "int xunzhao(int a[10])", "{", "    int i,flag,f,b,c,d,e,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,L=0;", "    for(i=0;i<10;i++)", "    {", "        flag=log10(a[i])+1;", "        if(flag==1)", "        {", "            switch(a[i])", "            {", "                case 1:B++;break;", "                case 2:C++;break;", "                case 3:D++;break;", "                case 4:E++;break;", "                case 5:F++;break;", "                case 6:G++;break;", "                case 7:H++;break;", "                case 8:I++;break;", "                case 9:L++;break;", "            }", "        }", "        if(flag==2)", "        {", "            f=a[i]/10;", "            b=a[i]%10;", "            switch(f,b)", "            {", "                case 0:A++;break;", "                case 1:B++;break;", "                case 2:C++;break;", "                case 3:D++;break;", "                case 4:E++;break;", "                case 5:F++;break;", "                case 6:G++;break;", "                case 7:H++;break;", "                case 8:I++;break;", "                case 9:L++;break;", "            }", "        }", "        if(flag==3)", "        {", "            c=a[i]%10;", "            d=a[i]/100;", "            e=(a[i]%100)/10;", "            switch(c,d,e)", "            {", "                case 0:A++;break;", "                case 1:B++;break;", "                case 2:C++;break;", "                case 3:D++;break;", "                case 4:E++;break;", "                case 5:F++;break;", "                case 6:G++;break;", "                case 7:H++;break;", "                case 8:I++;break;", "                case 9:L++;break;", "            }", "        }", "    }", "    cout << \"出现0的次数为：\" <<  A << '\\t';", "    cout << \"出现1的次数为：\" <<  B << '\\t';", "    cout << \"出现2的次数为：\" <<  C << '\\t';", "    cout << \"出现3的次数为：\" <<  D << '\\t';", "    cout << \"出现4的次数为：\" <<  E << '\\t';", "    cout << \"出现5的次数为：\" <<  F << '\\t';", "    cout << \"出现6的次数为：\" <<  G << '\\t';", "    cout << \"出现7的次数为：\" <<  H << '\\t';", "    cout << \"出现8的次数为：\" <<  I << '\\t';", "    cout << \"出现9的次数为：\" <<  L << endl;", "}", "\n", "int main()", "{", "    int a[10],j;", "    for(j=0;j<10;j++)", "    {", "        cin >> a[j];", "    }", "    xunzhao(a);", "    return 0;", "}"]], "Tag": "程序设计"}
{"Answer": "自己整个数组存在你要随机的值，然后随机数组的下标就行了", "Konwledge_Point": "整型", "Question": ["js生成整型随机数问题", ["在随机数的范围内，怎么去除一些随机数，假如，是生成1到10的随机数，但我不想要它", "\n生成5的随机数，该怎么做？或者只生成指定的几个随机数，而不是生成随机数范围该怎么做?"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;一个简单地实现&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;exchangeArr&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; * arr1, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; * arr2, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; length )&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,temp;\n    &lt;span class=\"hljs-comment\"&gt;//按顺序依次交换 &lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;length;i&amp;#43;&amp;#43;){\n        temp &amp;#61; arr2[i];\n        arr2[i]  &amp;#61; arr1[i];\n        arr1[i] &amp;#61; temp;\n     }\n    \n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;{\n    \n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;],b[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;];\n    \n    &lt;span class=\"hljs-comment\"&gt;//获取数组a的输入 &lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入数组a的5个元素&amp;#xff1a;&amp;#34;&lt;/span&gt;); \n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;){\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n        i&amp;#43;&amp;#43;;\n    }\n    \n    &lt;span class=\"hljs-comment\"&gt;//获取数组b的输入 &lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入数组a的5个元素&amp;#xff1a;&amp;#34;&lt;/span&gt;); \n    i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;){\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;b[i]);\n        i&amp;#43;&amp;#43;;\n    }\n    \n    &lt;span class=\"hljs-comment\"&gt;//调用函数&amp;#xff0c;交换数组a和数组b的值 &lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;exchangeArr&lt;/span&gt;(a,b,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;);\n    \n    &lt;span class=\"hljs-comment\"&gt;//打印数组a的值 &lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;交换后的a数组值为&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n    } \n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    \n    &lt;span class=\"hljs-comment\"&gt;//打印数组b的值 &lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;交换后的b数组值为&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,b[i]);\n    } \n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    \n    \n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["定义一个自定义函数，用指针作为参数，实现两个具有5个元素的整型数组对应元素值的交换", []], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;#include&amp;lt;stdio.h&amp;gt;&lt;br /&gt;#include&amp;lt;math.h&amp;gt;&lt;br /&gt;int main() {&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  int y[50],i,min;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  int qmin(int y[]);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  for(i&amp;#61;0;i&amp;lt;50;i&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    y[i]&amp;#61;600*sin(i*0.16);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  min&amp;#61;qmin(y);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  printf(&amp;#34;min&amp;#61;%d&amp;#34;,min);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  return 0;&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;int qmin(int y[])&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  {int min,i,j;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   min&amp;#61;y[0];&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  for(i&amp;#61;0;i&amp;lt;50;i&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;   {if(min&amp;gt;y[i])min&amp;#61;y[i];}&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  return min;}&lt;/span&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["编写函数找出数组中的最小数", ["求一维整型数组中的最小元素。要求：主函数定义数组y[50]，y[j]=600", "sin(j", "0.16) (j=0,1,2…49)，调用自定义函数qmin求出最小元素，最后在主函数中输出结果。要求必须使用 for语句实现。", "输入用例", "无", "输出用例", "min=-598"]], "Tag": "程序设计"}
{"Answer": "public class B{\r\n\tprivate int a;\r\n\tprivate OnAUpdateListener onAUpdateListener;\r\n\t\r\n\tpublic void setOnAUpdateListener(OnAUpdateListener onAUpdateListener){\r\n\t\tthis.onAUpdateListener = onAUpdateListener;\r\n\t}\r\n\t\r\n\tpublic void setA(int a){\r\n\t\tthis.a = a;\r\n\t}\r\n\t\r\n\tpublic interface OnAUpdateListener{\r\n\t\tvoid updateListener(int a);\r\n\t}\r\n}\r\n\r\npublic class A implements OnAUpdateListener{\r\n\tpublic static void main(String[] args){\r\n\t\tB b = new B();\r\n\t\tb.setOnAUpdateListener(this);\r\n\t}\r\n\t\r\n\tvoid updateListener(int a){\r\n\t\t// B中的变量发生了变化\r\n\t}\r\n}", "Konwledge_Point": "整型", "Question": ["Java在一个A类中监听另一个B类里面一个整型变量值的变化", ["B类中值一变化A就得到这个变化的值，我知道应该是用观察者模式来实现，但不知道具体的方法"]], "Tag": "程序设计"}
{"Answer": "看你希望怎么解决，因为我们不知道你的约束条件在那里。但是可以做很多办法来补偿。\r\n\r\n比如说在数据库层面，用两个整数字段，或者字符串字段来存储单个的整数。\r\n比如说，数据库不能修改，但是可以通过编程语言做修正。\r\n\r\n需要你先给出你的场景，还有代码，然后才好找到进一步的方法\r\n\r\nC/C++直接用指针暴力转换就可以了。\r\n\r\n不同的编译器对64bit的整数的支持不一样，以下代码在gcc编译\r\n在线验证网址：https://c.runoob.com/compile/12\r\n```\r\n#include &lt;stdio.h&gt;\r\n\r\nint main()\r\n{\r\n\tdouble d = -6.29187711124658e-311;\r\n\t__int64_t *l = (__int64_t *)&amp;d;\r\n\tprintf(\"%llu\", *l);\r\n    return 0;\r\n}\r\n```\r\n9223384771755824298\r\n\r\n关键是Java，它不支持指针，所以没办法简单暴力，需要用BigInteger\r\n代码如下：\r\n\r\n```\r\nimport java.math.BigInteger;\r\n\r\npublic class HelloWorld {\r\n    public static void main(String []args) {\r\n\t\tdouble d = -6.29187711124658e-311;\r\n\t\tlong value = Double.doubleToRawLongBits(d);\r\n\t\tBigInteger bi = new BigInteger(\"0\");\r\n\t\tBigInteger base = new BigInteger(\"1\");\r\n\t\tBoolean sign = (value &lt; 0);\r\n\t\tif (value &lt; 0)\r\n\t\t{\r\n\t\t\tvalue += 9223372036854775807L;\r\n\t\t\tvalue += 1L;\r\n\t\t}\r\n\t\twhile (value &gt; 0)\r\n\t\t{\r\n\t\t\tbi = bi.add(new BigInteger(String.valueOf(value % 2)).multiply(base));\r\n\t\t\tbase = base.multiply(new BigInteger(\"2\"));\r\n\t\t\tvalue /= 2;\r\n\t\t}\r\n\t\tif (sign) bi = bi.add(new BigInteger(\"9223372036854775808\"));\r\n       \tSystem.out.println(bi);\r\n    }\r\n}\r\n```\r\n9223384771755824298\r\n\r\n如果一种语言不支持  Double.doubleToRawLongBits 这样的方法\r\n那么你可以根据IEEE标准的浮点数的格式自己去转换。\r\n\r\n如果你还需要别的语言的例子，可以继续追问。\r\n如果问题解决，麻烦采纳下，谢谢\r\n\r\n下面是SQLite数据类型参考手册上关于这个问题的解释：\r\n&gt;datatype reference in SQLite\r\nINTEGER. The value is a signed integer, stored in 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value.\r\nThat is, you can only store values from -2**63 to (2**63-1). What does SQLite do for a value outside of this range? As we saw earlier, it switches over into floating point. Again, quoting from the SQLite reference:\r\nREAL. The value is a floating point value, stored as an 8-byte IEEE floating point number.\r\nMany programmers are familiar with this type under the name double.\r\n\r\n\r\nPHP版本\r\n\r\n```\r\n&lt;?php\r\n$binarydata = pack(\"d\", -3.68861248304756e-311);\r\n$value = unpack(\"Q\", $binarydata);\r\necho(\"float format: \");\r\necho($value[1] + pow(2, 64));\r\necho(\"\\ninteger format: \");\r\n$ofvalue = $value[1] + 9223372036854775808;\r\necho (\" 92233\");\r\necho ($ofvalue + 72036854775808);\r\n?&gt;\r\n```\r\nfloat format: 9.2233795026896E+18\r\ninteger format:  9223379502689557504", "Konwledge_Point": "整型", "Question": ["sqlite 中使用无符号整数存储的数据，再读取的时候，“溢出”的数据全变成浮点数了，怎么解决？", ["\n\n", "谁能用php帮我解决掉这个问题，加分。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/68024644426612.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;如有用&amp;#xff0c;望采纳&amp;#xff0c;十分感谢&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["为什么整型数组不能直接赋值给整型指针变量？", ["为什么char*p=\"sea.com\";可以", "而int *p={2,3,4}；非法，麻烦讲讲这个本质"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;A --0f1不是十六进制的表示方法&lt;br /&gt;B 12,456 逗号错误&lt;br /&gt;D 03f也不是十六进制的表示方法&lt;br /&gt;十六进制的前缀是0x或0X&amp;#xff0c;AD选项中的十六进制均为指定前缀&amp;#xff0c;报错&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["下面是合法的整型常量的选项是C，可以说下其余选项的错误吗？", ["A.--0f1          -0xffff                0011", "B.-0Xcdf           017                 12,456", "C.-017               999                 0x5e2", "D.-0x48eg          -068              03f"]], "Tag": "程序设计"}
{"Answer": "理论上10应该是常量分配在常量区，但是实际上没有任何编译器傻到这么做，因为不必要，int等简单类型可以直接装入寄存器，没必要再在常量区存它的一个副本。", "Konwledge_Point": "整型", "Question": ["C语言整型变量内存分配问题", ["定义了了 int a=10,a是分配在栈区，而10因为是常量，是不是分配在常量区？还是在给a在栈里分配的内存写入10的二进制？如果是分配在常量区，那么接着a=20,这一句改的是哪个内存？是栈里的内存还是10所在的常量区的那个内存？"]], "Tag": "程序设计"}
{"Answer": "```\r\n#include&lt;stdio.h&gt;\r\nint main(){\r\n\tint n;\r\n\tint arr1[20];\r\n\tint arr2[20];\r\n\tint curr = 0;\r\n\tscanf(\"%d\", &amp;n);\r\n\tfor (int i = 0; i &lt; n; i++)\r\n\t{\r\n\t\tint x;\r\n\t\tint j;\r\n\t\tscanf(\"%d\", &amp;x);\r\n\t\tfor (j = 0; j &lt; curr; j++)\r\n\t\t{\r\n\t\t\tif (arr1[j] == x)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tif (curr == j)\r\n\t\t{\r\n\t\t\tarr1[curr] = x;\r\n\t\t\tarr2[curr++] = 1;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tarr2[j]++;\r\n\t\t}\r\n\t}\r\n\tfor (int i = 0; i &lt; curr; i++)\r\n\t{\r\n\t\tif (arr2[i] == 1) printf(\"%d \", arr1[i]);\r\n\t}\r\n}\r\n```\r\n14\r\n12 34 12 34 56 78 67 67 78 98 98 89 89 55\r\n56 55 Press any key to continue . . .\r\n\r\n# 如果问题得到解决，请点下采纳", "Konwledge_Point": "整型", "Question": ["限制头文件#include<stdio.h>  一个整型数组中（数组长度不超过20）除了两个数字之外，其他的数字都出现了两次。请写程序找出这2个只出现一次的数字。", ["输入要求", "\n\n", "先输入一个N，接下来一排有N个整数，N小于20", "\n这N个数在int范围内", "\n\n", "输出要求", "\n\n", "2个整数。按照输入顺序优先输出", "\n\n", "限制要求", "\n\n", "只能使用限制头文件所含的内容", "\n\n", "# ", "我自己的错误代码示范", "\n", "\n\n", "（你问我为什么什么都没学也要做，那就教了这个我也没办法啊）", "\n\n", "#include<stdio.h>\nint main(){\n    int N;\n    int n=0;\n    int c,i=0,v=1,d=0,x=1;\n    int r,h=0;\n    int a[19];\n    int b[19];\n    int e[19];\n    while(scanf(\"%d\", &N)!=EOF){// N 总个数 \n\n        for(i;i<=N-1;i++){\n            scanf(\"%d\", &a[i]);\n            e[i-1]=a[i];\n            b[i]=a[i];\n            }c=1;\n        if(c==1){   \n            for(x;x<=N;x++) {\n                for(n;n<=N-2;n++){ \n                r=a[x] - e[n];    //相同时候r为0 \n                 printf(\"x=%d  n=%d r=%d  x=%d ax=%d en=%d \\n\",x,n,r,x,a[x],e[n]);      \n                if(r==0){    //相同数字 \n                    printf(\"b=%d\\n\", b[n]);\n                    b[x]=0;\n                    }       \n                    }}  }               \n                    for(h;h<=N-1;h++){\n                    if(b[h]!=0){\n             printf(\"bn=%d \\n\",b[2]);//输出答案 \n                   }}\n\n                //   测试数据14【回车】  12 34 12 34 56 78 67 67 78 98 98 89 89 55\n\n\n\n\n\n}}//结尾 \n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;(int)a&amp;#43;b&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["java中 整型与长整型的问题", [" public class SumDemo{", "public static void main(String args[]){", "  long a=10L;", "  int b=5,c;", "  c=                 ;            //此行该如何完成", "   System.out.println(\"a+b=\"+c);", "}", "}"]], "Tag": "程序设计"}
{"Answer": "在JAVA中设置的int最大值是\r\n0111,1111,1111,1111,1111,1111,1111,1111  这个值就是2147483647\r\n如果你给+1就会变成\r\n1000,0000,0000,0000,0000,0000,0000,0000,  这个值就溢出来了，这成了负数了。\r\n\r\n你上面的数是因为溢出了，，被截去了前面（32位以前的）的部分。。最后就变成了\r\n以11111111111开头的数，，这个就是负数", "Konwledge_Point": "整型", "Question": ["整型数据溢出的问题", ["给出一个数据，如int i=0xFFFFFFF1；", "\n明显的超出了int的32位范围，用eclips运行了system.out.print(i);打印出的结果是-15.", "\n为什么会是这个结果？java是怎么处理这种数据溢出的？", "\n查了半天没弄明白，不要笑我，本人初学java。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;#include&amp;lt;stdio.h&amp;gt;&lt;br /&gt; int main ()&lt;br /&gt; {&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;     int a,b,c;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;     scanf(&amp;#34;%d%d%d&amp;#34;,&amp;amp;a,&amp;amp;b,&amp;amp;c);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;     if(a&amp;#43;b&amp;gt;c &amp;amp;&amp;amp; a&amp;#43;c&amp;gt;b &amp;amp;&amp;amp; b&amp;#43;c&amp;gt;a)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;     {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        if(a&lt;/span&gt;&lt;em&gt;a&amp;#43;b&lt;/em&gt;b&amp;#61;&amp;#61;c&lt;em&gt;c || a&lt;/em&gt;a&amp;#43;c&lt;em&gt;c&amp;#61;&amp;#61;b&lt;/em&gt;b || c&lt;em&gt;c&amp;#43;b&lt;/em&gt;b&amp;#61;&amp;#61;a*a)&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;         printf(&amp;#34;Right triangle&amp;#34;);&lt;/span&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;     &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a&lt;span class=\"hljs-number\"&gt;*a&lt;/span&gt;&amp;#43;b&lt;span class=\"hljs-number\"&gt;*b&lt;/span&gt;&amp;lt;c&lt;span class=\"hljs-number\"&gt;*c&lt;/span&gt;||a&lt;span class=\"hljs-number\"&gt;*a&lt;/span&gt;&amp;#43;c&lt;span class=\"hljs-number\"&gt;*c&lt;/span&gt;&amp;lt;b&lt;span class=\"hljs-number\"&gt;*b&lt;/span&gt;||b&lt;span class=\"hljs-number\"&gt;*b&lt;/span&gt;&amp;#43;c&lt;span class=\"hljs-number\"&gt;*c&lt;/span&gt;&amp;lt;a&lt;span class=\"hljs-number\"&gt;*a&lt;/span&gt;)\n     printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Obtuse triangle&amp;#34;&lt;/span&gt;);\n     &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a&lt;span class=\"hljs-number\"&gt;*a&lt;/span&gt;&amp;#43;b&lt;span class=\"hljs-number\"&gt;*b&lt;/span&gt;&amp;gt;c&lt;span class=\"hljs-number\"&gt;*c&lt;/span&gt;||a&lt;span class=\"hljs-number\"&gt;*a&lt;/span&gt;&amp;#43;c&lt;span class=\"hljs-number\"&gt;*c&lt;/span&gt;&amp;gt;b&lt;span class=\"hljs-number\"&gt;*b&lt;/span&gt;||c&lt;span class=\"hljs-number\"&gt;*c&lt;/span&gt;&amp;#43;b&lt;span class=\"hljs-number\"&gt;*b&lt;/span&gt;&amp;gt;a&lt;span class=\"hljs-number\"&gt;*a&lt;/span&gt;)\n     printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Acute triangle&amp;#34;&lt;/span&gt;);\n }\n &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; \n printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Not triangle&amp;#34;&lt;/span&gt;);\n return 0;\n \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt; }&lt;/p&gt;\n&lt;p&gt;这样就可以了&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["望解答一下我那里错了，pta中的题，三角形", ["输入三条线段的长度（整型），根据是否能组成三角形，输出以下结果之一：锐角三角形、直角三解形、钝角三角形、不能构成三角形。", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;整型数组必须循环逐个元素输入才行&lt;br /&gt;for(i&amp;#61;0;i&amp;lt;5;i&amp;#43;&amp;#43;)&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  scanf(&amp;#34;%d&amp;#34;,&amp;amp;arr[i]);&lt;/span&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["Scanf对数组的整形输入", ["\n", "\n", "当我直接给数组赋值的时候，程序可以正常运行，但是我用scanf给数组赋值，程序又运行错误"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;屏幕显示的是符合条件的数的和&lt;br /&gt;文件里写入的是最小的20个数和符合条件的数的个数&lt;br /&gt;运行结果&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/61379601255613.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码如下&amp;#xff1a;&lt;br /&gt;lSmin.h文件&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;ifndef&lt;/span&gt; _lSmin_H_&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; _lSmin_H_&lt;/span&gt;\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ICntMin&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* p, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;/span&gt;;\n\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;endif&lt;/span&gt; &lt;span class=\"hljs-comment\"&gt;// !_lSmin_H_&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;主函数文件&amp;#xff08;.cpp文件&amp;#xff09;&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;lSmin.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-comment\"&gt;//冒泡排序&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;BubbleSort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* p, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j, t;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; num &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; num - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - i; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p[j] &amp;gt; p[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]) &lt;span class=\"hljs-comment\"&gt;//升序排列&amp;#xff0c;也就是大的放在后面&lt;/span&gt;\n            {\n                t &amp;#61; p[j];\n                p[j] &amp;#61; p[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                p[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; t;\n            }\n        }\n    }\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ICntMin&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* p,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, cnt &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;//排序&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;BubbleSort&lt;/span&gt;(p, num);\n    &lt;span class=\"hljs-comment\"&gt;//遍历前20个&amp;#xff0c;第一个数相对于自己&amp;#xff0c;偏移量是0&amp;#xff0c;所以直接从第二个数开始&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt; &amp;amp;&amp;amp; i &amp;lt; num; i&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;//这里避免不够20个数据的情况&amp;#xff0c;所以多加了一个条件&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((p[i] - p[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]) % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; p[i] % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; p[i] % &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            sum&amp;#43;&amp;#61; p[i];\n            cnt&amp;#43;&amp;#43;;\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;sum&amp;#61;%d\\n&amp;#34;&lt;/span&gt;, sum); &lt;span class=\"hljs-comment\"&gt;//在屏幕显示符合条件的数的和&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; cnt; &lt;span class=\"hljs-comment\"&gt;//返回个数&lt;/span&gt;\n\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    ifstream is;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;* p &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//数组指针&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; size &amp;#61; &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; nmb &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//数据个数&lt;/span&gt;\n    p &amp;#61; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;)*size); &lt;span class=\"hljs-comment\"&gt;//先申请20个空间&lt;/span&gt;\n    is.&lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;datafile01.dat&amp;#34;&lt;/span&gt;, ios::in);\n\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!is.&lt;span class=\"hljs-built_in\"&gt;is_open&lt;/span&gt;())\n    {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;datafile01.data打开失败&amp;#xff01;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;//读取数据&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (!is.&lt;span class=\"hljs-built_in\"&gt;eof&lt;/span&gt;())\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (nmb &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;)\n        {\n            size &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//扩容&lt;/span&gt;\n            p &amp;#61; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*)&lt;span class=\"hljs-built_in\"&gt;realloc&lt;/span&gt;(p, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;) * size);\n        }\n\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (is &amp;gt;&amp;gt; p[nmb])\n            nmb&amp;#43;&amp;#43;;\n    }\n    is.&lt;span class=\"hljs-built_in\"&gt;close&lt;/span&gt;(); \n\n    &lt;span class=\"hljs-comment\"&gt;//调用函数处理&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cnt &amp;#61; &lt;span class=\"hljs-built_in\"&gt;ICntMin&lt;/span&gt;(p, nmb);\n    &lt;span class=\"hljs-comment\"&gt;//将最小的20个数和结果写入文件&lt;/span&gt;\n    ofstream os;\n    os.&lt;span class=\"hljs-built_in\"&gt;open&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;resultdata.dat&amp;#34;&lt;/span&gt;, ios::out);\n    &lt;span class=\"hljs-comment\"&gt;//把最小的20个数写入文件&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; nmb; i&amp;#43;&amp;#43;)\n        os &amp;lt;&amp;lt; p[i] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;//把函数结果写入文件&amp;#xff0c;此次只写入符合条件的个数&lt;/span&gt;\n    os &amp;lt;&amp;lt; cnt;\n    os.&lt;span class=\"hljs-built_in\"&gt;close&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["C++文件问题求解答，具体过程发图片", ["#", "#在datafile01.dat中存储了一系列整型数据，在progl.cpp文件中求这一系列整型数据中最小20个数中相对于第一个数据偏移量为奇数的数据中能够被2和5整除的数据的个数，将所求得的和显示在屏幕并将这20个最小的数与所求得的结果写入文件resultdata.dat中，要求:1)使用动态分配读取datafile01.dat中的数据;2)使用函数", "int ICntMin(int*pint num)", "//先排序，再求满足条件的数据的个数", "求文件datafile01.dat中最小20个数中相对于第一个数据偏移量为奇数的数据中能够被2和5整除的数据的个数，并将该函数放在头文件“lSmin.h”中，以供主函数调用。3)resultdata.dat文件在程序运行过程中动态创建。"]], "Tag": "程序设计"}
{"Answer": "if(e01.getText().toString().equals(“”+mDay))", "Konwledge_Point": "整型", "Question": ["使用整形比较ibutton文本", ["代码中比较getText()和int值，为什么Toast信息不正确？", "\n\n", "谢谢。", "\n\n", "    public static int mDay;\n    Button e01;\n    public static String[][] a = new String[6][7];\n       e02.setText(\"\" + a[0][2]);\n     if(e01.getText().toString().equals(mDay))\n{\n    e01.setTextColor(Color.parseColor(\"#FFBBFF\"));\nToast.makeText(this, \"Button2 text equals!\", Toast.LENGTH_SHORT).show();\n}\n      //// in debug mode both gives value 29\n           e01.getText().toString() =29\n           mDay=29\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;第2 3 行位置互换下&amp;#xff0c;n 都没输入&amp;#xff0c;就定义int  a[n];&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["本题要求统计一个整型序列中出现次数最多的整数及其出现次数。", ["  输入格式： 输入在一行中给出序列中整数个数N（0<N≤1000），以及N个整数。数字间以空格分隔。  输出格式： 在一行中输出出现次数最多的整数及其出现次数，数字间以空格分隔。题目保证这样的数字是唯一的。", "测试用例：10 3 2 -1 5 3 4 3 0 3 2", "输出样例：3  4", "我的代码：", "int main(void)", "{", "    int n,i,j,k;", "\n", "int ", "max", "=0;\nint a[n];\nscanf(", "\"%d \"", ",&n);\n\n", "for", "(", "i", "=0;i<n;i++){\n    scanf(", "\"%d \"", ",&a[i]);\n}\n ", "for", "(", "i", "=0;i<n;i++){\n    int ", "m", "=0;\n", "for", "(", "j", "=0;j<n;j++){\n", "if", "(a[i]==a[j]){\n   m++;\n}\n}\n    ", "if", "(m>max){\n        ", "max", "=m;\n        ", "k", "=a[i];\n    }\n    }\n printf(", "\"%d %d\"", ",k,max); \n return 0;\n", "\n", "}", "\n", "输出样例：3 1", "不知道为什么会这样，求解！"]], "Tag": "程序设计"}
{"Answer": "for (p = &amp;a; p &lt; (a+10);p++)\r\n-&gt;\r\nfor (p = a; p &lt; (a+10);p++)\r\n\r\nhttp://codepad.org/xKCx1BSI\r\n编译通过", "Konwledge_Point": "整型", "Question": ["数组指针与整形指针问题", ["#include", "\n#include", "\nint main(){", "\n    int a[10];", "\n    int *p,i;", "\n    puts(\"\\nPlease input ten integer:\");", "\n    for(i=0;i<10;i++)", "\n        scanf(\"%d\",&a[i]);", "\n    printf(\"\\n\");", "\n    for (p = &a; p < (a+10);p++)", "\n        printf(\"%d\", *p);", "\n    puts(\"\\n\\nPress any key to quit...\");", "\n    getch();", "\n    return 0;", "\n}", "\n//照书上敲的代码，不知道错在哪"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#include &amp;lt;stdio.h&amp;gt;\n \nvoid bubble_sort(int a[],int n)\n{\n    int i,j,t;\n    for (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        for (j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;-i;j&amp;#43;&amp;#43;)\n        {\n            if(a[j] &amp;gt; a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])  //从小到大&amp;#xff0c;升序\n            {\n                t &amp;#61; a[j];\n                a[j]&amp;#61;a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;t;\n            }\n        }\n    }\n}\n \n \nint main()\n{\n    int a[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;],i,j;\n    int h,row,col;\n    char stu[&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    int nmb[&lt;span class=\"hljs-number\"&gt;26&lt;/span&gt;]; //记录每个姓名开头的人数 \n    for(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;26&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        nmb[i]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n \n    for (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        for (j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;j&amp;#43;&amp;#43;)\n        {\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i][j]);\n        }\n    }\n    //排序\n    bubble_sort(&amp;amp;a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;],&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;);\n    //输出\n    for (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        for (j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;j&amp;#43;&amp;#43;)\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i][j]);\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    //charu\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入插入班级的小朋友身高&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;h);\n    for (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        for (j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;j&amp;#43;&amp;#43;)\n        {\n            if(a[i][j] &amp;gt;&amp;#61; h)\n                break;\n        }\n    }\n    if(i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;)\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;第6行第1列\\n&amp;#34;&lt;/span&gt;);\n    else\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;第%d行第%d列\\n&amp;#34;&lt;/span&gt;,i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n \n    //输入学生姓名&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;名 \n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入20名学生的姓名&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;); \n    for (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        for(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;j&amp;#43;&amp;#43;)\n        {\n            gets(stu[i]);\n            if(stu[i][j] &amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; stu[i][j]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;)\n                nmb[stu[i][j]-&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]&amp;#43;&amp;#43;;\n            else if(stu[i][j] &amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; stu[i][j]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;)\n                nmb[stu[i][j]-&lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;]&amp;#43;&amp;#43;;\n        }\n    }\n    //显示\n    for (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;26&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        if(nmb[i] &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c开头的小朋友%d个\\n&amp;#34;&lt;/span&gt;,(char)(&lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&amp;#43;i),nmb[i]);\n    }\n \n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["C++数组处理幼儿园排座位", ["幼儿园某个班级共有学生20人，老师按照身高给学生分配座位，教室为五行四列，如果有新增小朋友，增加行。", "1．定义一个整型数组，数组内容为学生身高（身高单位为厘米），学生身高用scanf函数输入。输入之后对这20个学生按照身高升序排序。", "2．有一个小朋友插班进入这个班级，还按照身高将这个小朋友选择一个合适的位置，要求输出新进入小朋友的座位位置（即行号和列号）。", "3．定义一个字符数组，数组内容为学生姓名（英文名），分别统计不同字母开头的小朋友的个数。例如姓名以L开头的小朋友3个，姓名以P开头的小朋友4个。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;没有这样的特殊值&amp;#xff0c;只能另外增加变量记录&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["c语言中想在整形数组里存放一个特殊值，无法被输入的那种", ["定义完一个数组，想判定某个位置是否被输入值，就例如if(a[1] == *)    *的地方表示想填的一个值，如果填一个常量的话输入相同常量就无法判定了"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这里假设输入非负&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j,n;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    cin &amp;gt;&amp;gt; n;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(n &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n        a[n % &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;] &amp;#43;&amp;#43;;\n        n /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;;i &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i--){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[i] &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;){\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j &amp;lt; a[i];j&amp;#43;&amp;#43;){\n                cout &amp;lt;&amp;lt; i;\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["怎么编啊，能不能教我一下", ["编写一个程序：从键盘输入一个整型数，把这个数的各位数按降序输出。例如，输入34125，输出54321"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&amp;#34;&amp;#34;.join(b)不会改变b本身&amp;#xff0c;你应该把它直接输出&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;m&amp;#61;&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;()\nm&amp;#61;m&lt;span class=\"hljs-selector-class\"&gt;.split&lt;/span&gt;()\nn&amp;#61;&lt;span class=\"hljs-selector-tag\"&gt;input&lt;/span&gt;()\nn&amp;#61;n&lt;span class=\"hljs-selector-class\"&gt;.split&lt;/span&gt;()\na&amp;#61;m&amp;#43;n\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.sort&lt;/span&gt;()\nb&amp;#61;&lt;span class=\"hljs-selector-attr\"&gt;[]&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;i&lt;/span&gt; not &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt;:\n        &lt;span class=\"hljs-selector-tag\"&gt;b&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.append&lt;/span&gt;(i)\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;.join(b)&lt;/span&gt;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["Python输出有问题", ["问题描述】", "\n", "将两个整型数组按照升序合并，并且过滤掉重复数组元素", "\n", "【输入形式】", "【输出形式】", "【样例输入】", "\n", "5 2 3 97", "\n", "1 8 6 4", "\n", "【样例输出】123456897", "m=input()", "m=m.split(\" \")", "n=input()", "n=n.split(\" \")", "a=m+n", "a.sort()", "b=[]", "for i in a:", "if i not in b:", "b.append(i)", "\"\".join(b)", "print(b)", "我输出的['1', '2', '3', '4', '5', '6', '8', '97']"]], "Tag": "程序设计"}
{"Answer": "第三个参数是地址的形式吧 &amp;a &amp;b 吧,我刚开始也遇到过,老忘记", "Konwledge_Point": "整型", "Question": ["MFC中sscanf函数从字符串中取整型数据出现问题", ["如图所示，注释掉sscanf该行后没有问题。但恢复之后就出现图二的问题，编译都没有问题", "\n下图二"]], "Tag": "程序设计"}
{"Answer": "首先，这个影响整个问题的结果的操作是x++,它是先使用x然后再加的，等价于\r\n\r\n```\r\n System.out.println((x)/3);//此处x=2\r\n x=x+1;\r\n```\r\n其次，除法操作，整数的除法返回值还是int类型，2/3返回的值取整数还是0的。\r\n最后，要想得到1，必须让x&gt;=3，如++x，是先将x+1然后再使用的。", "Konwledge_Point": "整型", "Question": ["JAVA中的整形基本运算", ["public class Demo1 {", "\n    public static void main (String [] args) {", "\n        int x = 2;", "\n        System.out.println((x++)/3);", "\n    }", "\n}", "\n为什么运算结果是0，而不是1？", "\n跪谢~"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;减去&amp;#39;0&amp;#39;&amp;#xff0c;就可以将数字字符转换为数字&lt;br /&gt;比如数字字符&amp;#39;2&amp;#39;&amp;#xff0c;减去&amp;#39;0&amp;#39;后&amp;#xff0c;得到的就是数字2&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["字符数组转入整型数组", ["14 19行代码中-'0'是什么意思？有人能跟我说一说吗？没有看懂啊。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;修改如下&amp;#xff0c;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nstruct student{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; num;\n    char name[&lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; great;\n};\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n   &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i,j,n,&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;;\n   struct student students[&lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;],temp;\n   scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n   &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n       scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %d&amp;#34;&lt;/span&gt;,&amp;amp;students[i].num,students[i].name,&amp;amp;students[i].great);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;修改\n       //scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %d&amp;#34;&lt;/span&gt;,&amp;amp;students[i].num,&amp;amp;students[i].name,students[i].great);\n   }\n   &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;#43;&amp;#43;){\n       &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;&amp;#61;i;\n       &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;lt;n;j&amp;#43;&amp;#43;){\n           &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(students[j].great&amp;gt;students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;].great){\n              &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;&amp;#61;j;\n           }\n       }\n       &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt; !&amp;#61; i){   &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;  修改\n           temp&amp;#61;students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;];\n           students[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;]&amp;#61;students[i];\n           students[i]&amp;#61;temp;\n       }\n   }\n   &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n       &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %d\\n&amp;#34;&lt;/span&gt;,students[i].num,students[i].name,students[i].great);\n   }\n   &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["样例输入不能都输进去，不知道错哪了？", ["建立一个关于学生信息的结构体,包括员学号(整型), 姓名(字符串), 总分 (整型)。从键盘输入n个学生的信息, 然后将n个学生按总分从高到低进行排序，并输出排序后的学生信息..", "【输入形式】先输入n, 然后再输入学生的信息.", "【样例输入】", "\n", "3", "\n", "1001 zhangsan 136", "\n", "1002 lisi 137", "\n", "1003 wangwu 139", "【样例输出】", "\n", " 1003 wangwu 139", "\n", " 1002 lisi 137", "\n", " 1001 zhangsan 136", "\n", "\n\n```c\n\n", "#include<stdio.h>", "\nstruct student{\n", "int", " num;\n", "char", " ", "name", "[", "80", "];\n", "int", " great;\n};\n", "int", " main()\n{\n", "int", " i,j,n,", "index", ";\nstruct student students[", "80", "],", "temp", ";\nscanf(\"%d\",&n);\n", "for", "(i=", "0", ";i<n;i++){\n   scanf(\"%d %s %d\",&students[i].num,&students[i].name,students[i].great); \n}\n", "for", "(i=", "0", ";i<n", "-1", ";i++){\n", "index", "=i;\n ", "for", "(j=i+", "1", ";j<n;j++){\n     ", "if", "(students[j].great>students[", "index", "].great){\n         ", "index", "=j;\n     }\n }\n ", "temp", "=students[", "index", "];\n students[", "index", "]=students[i];\n students[i]=", "temp", ";\n}\n", "for", "(i=", "0", ";i<n;i++){\nprintf(\"%d %s %d\\n\",students[i].num,students[i].name,students[i].great);\n}\n", "return", " ", "0", ";\n}\n\n", "\n", "```"]], "Tag": "程序设计"}
{"Answer": "http://www.ppkao.com/daan/3107867/a0a14c067ac981b8027e614e559b0d00\r\nC", "Konwledge_Point": "整型", "Question": ["设有说明int (*ptr)[M]; 其中ptr是", ["设有说明int (*ptr)[M]; 其中ptr是", "\nA. M个指向整型变量的指针  B. 指向M个整型变量的函数指针   C. 一个指向具有M个整型元素的一维数组的指针   D. 具有M个指针元素的一维指针数组，每个元素都只能指向整型量"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;blockquote&gt;\n  &lt;p&gt;How to implement in Go that output is called semi-regularly roughly at 1ms ticks?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Use the standard &lt;a href=\"https://golang.org/pkg/time/#Ticker\" rel=\"nofollow noreferrer\"&gt;time.Ticker&lt;/a&gt;, configured to flush output &lt;a href=\"https://play.golang.org/p/Ic9FiHsOrw_L\" rel=\"nofollow noreferrer\"&gt;every 1 millisecond&lt;/a&gt;.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["如何在Go中实现简单的流量整形", ["\n\n", "I am trying as an exercise to implement simple traffic shaper in go.", "\n\n", "The API is:\npush(int): puts an int in the shaper\nout(): outputs 1 or more int(s) from the shaper.", "\n\n", "push is called by the clients and the rate can't be controlled.\nout is called roughly every 1ms and can output 1 or more ints and is trying to maintain a constant out put rate of r ints per 1s but can output more if the intrnal buffer of the shaper is in danger of getting filled up. However the output should be as uniform as possible. For example:\nOut: 1 1 2 2 2 1 is better than\nOut: 1 1 5 1 1", "\n\n", "since the second example is bursty (there's an output of 5 ints).", "\n\n", "I have an idea of how to do this using leaky bucket algorithm.", "\n\n", "My question:\nHow to implement in Go that output is called semi-regularly roughly at 1ms ticks?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;for (j &amp;#61; 0; b[j] !&amp;#61; &amp;#39;\\0&amp;#39;; j&amp;#43;&amp;#43;)&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    printf(&amp;#34;%d\\t&amp;#34;, b[j]);&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;因为你这个输出循环的结束条件是b[j] !&amp;#61; &amp;#39;\\0&amp;#39;啊&amp;#xff01;&amp;#xff01;&amp;#xff01;你为啥要写这个条件呢&amp;#xff1f;&amp;#xff1f;&amp;#xff1f;&amp;#xff1f;&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["我定义的是整型数组，为什么要加字符串结束符,输出才不会报错", ["问题遇到的现象和发生背景", "\n", "题目：输入一个字符串，内有数字和非数字字符，将其中连续的数字作为一个数字，依次存放到一数组中去。123放在a[0],456存放到a[1]", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "#include<stdio.h>", "\n", "int main()", "{", "    void search(char* pt);", "    char str[100];", "    printf(\"enter a string:\");", "    gets(str);", "    char* p = str;", "    search(p);", "    return 0;", "}", "\n", "void search(char* pt)", "{", "    int b[50];", "    int i, j = 0, flag = 0, sum = 0;", "    char z;", "    for (i = 0;*(pt + i) != '\\0'; i++)", "    {", "        z = *(pt + i);", "        if (z >= '0' && z <= '9')", "        {", "            sum = sum * 10 + (z - '0');", "                flag = 1;", "        }", "        else", "        {", "            if (flag == 1)", "            {", "                b[j] = sum;", "                j++;", "            }", "            sum = 0;", "            flag = 0;", "        }", "    }", "    if (flag == 1)", "    {", "        b[j] = sum;", "        j++;", "    }", "    b[j] = '\\0';      //为什么一定要加字符串结束符？", "\n", "printf", "(", "\"Number of integers:%d\\n\"", ", j);\n", "printf", "(", "\"these numbers are:\"", ");\n", "for", " (j = ", "0", "; b[j] != ", "'\\0'", "; j++)\n{\n    ", "printf", "(", "\"%d\\t\"", ", b[j]);\n}\n", "\n", "}", "\n", "/*解题思路：输入一个字符串，筛选出字符串里的数字字符，再转化为数字，接着将数字存放到新数组中", "\n", "       如果遇到其他字符，就将前面的字符存放到新数组中去，再判断下一个字符\n", "\n", "       判断结束后，如果最后一个字符是数字字符，则需要在循环结束后，将数字存放到新数组中去\n", "\n", "/", "\n", "运行结果及报错内容", "\n", "严重性    代码    说明    项目    文件    行    禁止显示状态", "警告    C6001    使用未初始化的内存“b[BYTE:0]”。    "]], "Tag": "程序设计"}
{"Answer": "16位寄存器那就是16位的CPU吧，对应的int也是16位的。", "Konwledge_Point": "整型", "Question": [" 一个寄存器怎么存储一个int整形？", ["一个16位的寄存器能存的最大数是65535，也就是存一个int型的数，需要消耗两个寄存器吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;import java.util.List;\nimport java.util.Scanner;\npublic class BinaryTree {\n    private Node root;\n    /**\n     * 内部节点类\n     */\n    private class Node{\n        private Node left;\n        private Node right;\n        private int data;\n        public Node(int data){\n            this.left &amp;#61; null;\n            this.right &amp;#61; null;\n            this.data &amp;#61; data;\n        }\n    }\n\n    public BinaryTree(){\n        root &amp;#61; null;\n    }\n\n    /**\n     * 递归创建二叉树\n     * &amp;#64;param node\n     * &amp;#64;param data\n     */\n    public void buildTree(Node node,int data){\n        if(root &amp;#61;&amp;#61; null){\n            root &amp;#61; new Node(data);\n        }else{\n            if(data &amp;lt; node.data){\n                if(node.left &amp;#61;&amp;#61; null){\n                    node.left &amp;#61; new Node(data);\n                }else{\n                    buildTree(node.left,data);\n                }\n            }else{\n                if(node.right &amp;#61;&amp;#61; null){\n                    node.right &amp;#61; new Node(data);\n                }else{\n                    buildTree(node.right,data);\n                }\n            }\n        }\n    }\n\n    /**\n     * 前序遍历\n     * &amp;#64;param node\n     */\n    public void preOrder(Node node,StringBuilder sb){\n        if(node !&amp;#61; null){\n            sb.append(node.data&amp;#43;&amp;#34;,&amp;#34;);\n            preOrder(node.left,sb);\n            preOrder(node.right,sb);\n        }\n    }\n\n    /**\n     * 中序遍历\n     * &amp;#64;param node\n     */\n    public void inOrder(Node node,StringBuilder sb){\n        if(node !&amp;#61; null){\n            inOrder(node.left,sb);\n            sb.append(node.data&amp;#43;&amp;#34;,&amp;#34;);\n            inOrder(node.right,sb);\n        }\n    }\n\n    /**\n     * 后序遍历\n     * &amp;#64;param node\n     */\n    public void postOrder(Node node,StringBuilder sb){\n        if(node !&amp;#61; null){\n            postOrder(node.left,sb);\n            postOrder(node.right,sb);\n            sb.append(node.data&amp;#43;&amp;#34;,&amp;#34;);\n        }\n    }\n\n    //查询双亲\n    public Node parent(int target){\n        Node temp&amp;#61;parent(root, target);\n        return temp;\n    }\n    public Node parent(Node node,int target){\n        if(node&amp;#61;&amp;#61;null){\n            return null;\n        }\n        if((node.left!&amp;#61;null&amp;amp;&amp;amp;node.left.data&amp;#61;&amp;#61;target)||(node.right!&amp;#61;null&amp;amp;&amp;amp;node.right.data&amp;#61;&amp;#61;target)){\n            return node;\n        }\n\n        //在左子树中查找 &amp;#xff0c; 如果左子树中没有去右子树中查找\n        Node N;\n        if((N&amp;#61;parent(node.left,target))!&amp;#61;null){\n            return N;\n        }else{\n            return parent(node.right,target);\n        }\n    }\n\n    //查询目标当前节点\n    public Node findNode(int target){\n        Node node &amp;#61; new Node(target);\n        if(root&amp;#61;&amp;#61;null){\n            return null;\n        }else{\n            Node temp&amp;#61;findNode(root,target);\n            return temp;\n        }\n    }\n    public Node findNode(Node root,int target){\n        if(root&amp;#61;&amp;#61;null){\n            return null;\n        }\n        if(root.data&amp;#61;&amp;#61;target){\n            return root;\n        }\n        Node N;\n        Node P;\n        if((N&amp;#61;findNode(root.left,target))!&amp;#61;null){\n            return N;\n        }else{\n            root&amp;#61;root.right;\n            if((P&amp;#61;findNode(root,target))&amp;#61;&amp;#61;null){\n                return null;\n            }else{\n                return P;\n            }\n        }\n    }\n    \n\n\n    public static void main(String[] args) {\n        StringBuilder sb&amp;#61;new StringBuilder();\n        Scanner scanner&amp;#61;new Scanner(System.in);\n        System.out.println(&amp;#34;输入&amp;#xff1a;&amp;#34;);\n        int count&amp;#61;scanner.nextInt();\n        String[] a &amp;#61; scanner.next().split(&amp;#34;,&amp;#34;);\n        int target&amp;#61;scanner.nextInt();\n        BinaryTree bTree &amp;#61; new BinaryTree();\n        for (int i &amp;#61; 0; i &amp;lt; a.length; i&amp;#43;&amp;#43;) {\n            bTree.buildTree(bTree.root, Integer.valueOf(a[i]));\n        }\n        System.out.println(&amp;#34;输出&amp;#xff1a;&amp;#34;);\n        Node parent &amp;#61; bTree.parent(target);\n        if (parent&amp;#61;&amp;#61;null){\n            System.out.println(target&amp;#43;&amp;#34;无双亲&amp;#34;);\n        }else{\n            System.out.println(target&amp;#43;&amp;#34;的双亲是&amp;#34;&amp;#43;parent.data);\n        }\n        Node currNode &amp;#61; bTree.findNode(target);\n        if (currNode&amp;#61;&amp;#61;null){\n            System.out.println(&amp;#34;不存在当前节点&amp;#34;);\n        }else{\n            if(currNode.left&amp;#61;&amp;#61;null&amp;amp;&amp;amp;currNode.right&amp;#61;&amp;#61;null){\n                System.out.println(target&amp;#43;&amp;#34;无孩子&amp;#34;);\n            }else{\n                System.out.print(target&amp;#43;(currNode.left&amp;#61;&amp;#61;null?&amp;#34;无左孩子&amp;#34;:&amp;#34;左孩子是&amp;#34;&amp;#43;currNode.left.data));\n                System.out.println(currNode.right&amp;#61;&amp;#61;null?&amp;#34;无右孩子&amp;#34;:&amp;#34;右孩子是&amp;#34;&amp;#43;currNode.right.data);\n            }\n        }\n        if(parent&amp;#61;&amp;#61;null){\n            System.out.println(target&amp;#43;&amp;#34;无兄弟&amp;#34;);\n        }else {\n            if (parent.right &amp;#61;&amp;#61; null || parent.left &amp;#61;&amp;#61; null) {\n                System.out.println(target &amp;#43; &amp;#34;无兄弟&amp;#34;);\n            } else {\n                System.out.println(target &amp;#43; &amp;#34;的兄弟是&amp;#34; &amp;#43; (parent.right.data &amp;#61;&amp;#61; currNode.data ? parent.left.data : parent.right.data));\n            }\n        }\n        bTree.preOrder(bTree.root,sb);\n        System.out.println(&amp;#34;前序结果&amp;#34;&amp;#43;sb.toString().substring(0,sb.length()-1));\n        sb.setLength(0);\n        bTree.inOrder(bTree.root,sb);\n        System.out.println(&amp;#34;中序结果&amp;#34;&amp;#43;sb.toString().substring(0,sb.length()-1));\n        sb.setLength(0);\n        bTree.postOrder(bTree.root,sb);\n        System.out.println(&amp;#34;后序结果&amp;#34;&amp;#43;sb.toString().substring(0,sb.length()-1));\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["二叉树创建并查询 (java)", ["要求：用java编写代码，不用C++；", "\n\n", "创建一个二叉树，结点存放的是整型数据，遵循的规则是：第一个数值作为二叉树的树根，小于父节点的值放在左子节点，大于父节点的值放在右子节点。 在创建好二叉树的基础之上，进行查询，通过输入的要查询的值，找出它双亲结点、孩子结点、兄弟结点。 输出二叉树的前序、中序、后序遍历结果。", "\n\n", "输入格式:", "\n\n", "输入数值为整型，多行输入。 第一行：二叉树的结点个数。 第二行：结点的值，以逗号间隔。 第三行：要查询的结点值。", "\n\n", "输出格式:", "\n\n", "第一行输出要查询的结点的双亲结点。 第二行输出要查询的结点的孩子结点。 第三行输出兄弟结点。 第四行为二叉树前序遍历结果。 第五行为二叉树中序遍历结果。 第六行为二叉树后序遍历结果。", "\n\n", "输入样例:", "\n\n", "在这里给出一组输入。例如：", "\n\n", "\n", "8\n5,2,9,11,4,23,10,16\n23", "\n\n", "输出样例:", "\n\n", "在这里给出相应的输出。例如：", "\n\n", "\n", "23的双亲是11\n23的左孩子是16无右孩子\n23的兄弟是10\n前序结果5,2,4,9,11,10,23,16\n中序结果2,4,5,9,10,11,16,23\n后序结果4,2,10,16,23,11,9,5", "\n\n", "输入样例2:", "\n\n", "在这里给出一组输入。例如：", "\n\n", "\n", "1\n7\n7", "\n\n", "输出样例2:", "\n\n", "在这里给出相应的输出。例如：", "\n\n", "\n", "7无双亲\n7无孩子\n7无兄弟\n前序结果7\n中序结果7\n后序结果7"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        a[i] &amp;#61; i*i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\t&amp;#34;&lt;/span&gt;,a[i]);    \n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;19&lt;/span&gt;;i&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i--){\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\t&amp;#34;&lt;/span&gt;,a[i]);    \n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["PTA  7-7 一维数组反序输出", ["编程定义一个有20个元素的整型数组，遍历一次赋数组元素的值为下标的平方加1，然后再反序遍历一次输出数组的所有元素。", "\n", "输入样例:", "\n", "输出样例:", "362 325 290 257 226 197 170 145 122 101 82 65 50 37 26 17 10 5 2 1"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;看一下那个输出样例&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言 数字字符 数字字符，整形数据", ["\n", "提交后系统判断错误"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; buf1[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;],buf2[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,b&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s %s&amp;#34;&lt;/span&gt;,buf1,buf2);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (buf1[i])\n    {\n        a &amp;#61; a* &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; buf1[i] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n        i&amp;#43;&amp;#43;;\n    }\n    i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (buf2[i])\n    {\n        b &amp;#61; b* &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; buf2[i] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;\n        i&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,a&amp;#43;b);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["C语言将字符串数组转为整型，如输入“123”，“555”，将这两个字符做加法运算，输入结果为678", ["输入2个三位数的字符串，完成加法，并输出结果", "如输入“123”和“555”，结果为678！", "（不能用函数去转换）"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;char a[2];&lt;br /&gt;改成&lt;br /&gt;char a[3];或者更大的长度&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["整形变量输出值改变了", ["#include <stdio.h>", "#include <stdlib.h>", "#include <string.h>", "void k()", "{", "  printf(\"\\n\");", "   printf(\"\\n\");", "   printf(\"\\n\");", "   printf(\"\\n\");", "   printf(\"\\n\");", "   printf(\"\\t\\t\\t\\t请输入你所需商品代号\\n\");", "   printf(\"\\t\\t\\t\\t水果类：\\n\");", "   printf(\"\\t\\t\\t\\t01苹果 10元一斤\\t02香蕉 10元两斤\\t03橘子 10元五斤\\n\");", "\n", "   char a[2];", "   int b=10;", "   gets(a);", "   if(strcmp(a,\"01\")==0)", "   {", "     printf(\"\\t%d\",b);", "   }", "}", "int main()", "{", "    k();", "    return 0;", "}", "输入01，为什么输出不是10而是0？"]], "Tag": "程序设计"}
{"Answer": "申请多少内容，不是根据工作多少时间，无是根据接收到多少数据量！\r\n如果数据量不大，就可以一次完成内存申请；如果数据量不确定，就必须采用动态分配 ralloc &amp; reralloc 的方法。", "Konwledge_Point": "整型", "Question": ["我把串口接受的数据放到数组里面进行处理，", ["现在遇到一个问题，这个串口可能会不停工作，工作一天以上，这样的话这个数组应该怎么动态申请内存呢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这个很正常&amp;#xff0c;浮点数有精度问题&amp;#xff0c;甚至不同计算机计算出的结果都有差异。你换一台计算机计算的结果可能就是10.&lt;/p&gt;\n&lt;p&gt;所以我们才需要定义精度范围。&lt;/p&gt;\n&lt;p&gt;如果有帮助麻烦您采纳一下&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["c语言运算浮点型转换整形问题", ["#include<stdio.h>", "int main()", "{", "    double c, t;", "    scanf(\"%lf\",&c);", "    t=(c-(int)c)*1000;printf(\"%f    \",t);", "    int b=t;", "    printf(\"%d\",b);", "    return 0;", "}", "假设我输入的是131.01,为什么输出结果b等于9?"]], "Tag": "程序设计"}
{"Answer": "32不要加单引号，'32'的ascii不是32，空格的ascii码刚好是32，所以你用空格可以，这是碰巧了，正确的做法就是32不加单引号", "Konwledge_Point": "整型", "Question": ["学习ascll码是关于字符和整型变量之间相互转换的问题", ["int main()", "\n    {", "\n    char ch1=‘m’;", "\n    char ch2=‘m’ - ‘32’;", "\n    printf(“请输入一个小写英文字母：%c\\n转换后的字母为:%c\\n”,ch1,ch2);", "\n    return 0;", "\n    }", "\n\n", "它转换后的字母显示不应该是M吗？怎么会打出了分号。我把源代码中32换成空格就可以打出，为什么？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;177777&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["无符号整型输出为八进制怎么算？", ["设unsigned int a=65535;则printf(\"%o\",a);的输出是（   ）"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;在 IEEE 754标准中&amp;#xff0c;&lt;code class=\"language-javascript\"&gt;double&lt;/code&gt;类型占64位&amp;#xff0c;其中符号占1位&amp;#xff0c;指数占11位&amp;#xff0c;有效精度占52位。52位有效精度最多能精确表示17位10进制有效数字。&lt;br /&gt;而3.14&amp;#43;1e20精确结果的有效数字是达22位&amp;#xff0c;因此&lt;code class=\"language-javascript\"&gt;double&lt;/code&gt;类型无法精确表示结果中的尾数314&amp;#xff0c;计算时尾数314就被截断了&amp;#xff0c;所以3.14&amp;#43;1e20的结果变成1e20&amp;#xff0c;(3.14&amp;#43;1e20)-1e20的结果变成0.0&lt;/p&gt;\n&lt;p&gt;用两个浮点数进行计算时&amp;#xff0c;一定要注意两个数相差不能太大&amp;#xff0c;否则的话就容易出现上面这样截断误差&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\" id=\"textarea_1646036926067_1646040302195_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://en.wikipedia.org/wiki/Double-precision_floating-point_format&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["相关的整型int溢出问题", ["为什么（3.14+1e20）-1e20=0.0呢，溢出产生了特殊的值+∞"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;整形就可以了&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["“生日”应该是字符型还是整型?应该是字符型吧，但是怎么比较年龄大小呢？", []], "Tag": "程序设计"}
{"Answer": "fun()函数里面的转置操作有问题，不需要每个元素换位置，比如2行1列和1行2列这两个元素换一次就可以了，你的代码实际换了两次。建议吧fun函数里面for(n=0;n&lt;3;n++)这句话改成for(n=0;n&lt;m;n++)", "Konwledge_Point": "整型", "Question": ["C语言：运用指针，输出3*3矩阵的转置阵。大佬们帮忙看看哪里出问题了", ["#include \"stdafx.h\"\n#include <stdio.h>\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    void fun(int *x);\n    int a[3][3],i;\n    int *p=&a[0][0];\n    printf(\"请输入一个整形矩阵:\");\n    for(i=0;i<3;i++)\n    {\n      scanf(\"%d %d %d\",&a[i][0],&a[i][1],&a[i][2]);\n    }\n    fun(p);\n    printf(\"输出转置矩阵：\\n\");\n    for(i=0;i<3;i++)\n    {\n      printf(\"%d %d %d\\n\",a[i][0],a[i][1],a[i][2]);\n    }\n    return 0;\n}\nvoid fun(int *x)\n{\n    int m,n,s;\n    for(m=0;m<3;m++)\n    {\n        for(n=0;n<3;n++)\n        {\n                s=*(x+3*m+n);\n                *(x+3*m+n)=*(x+3*n+m);\n                *(x+3*n+m)=s;\n        }\n\n    }\n\n}\n\n\n\n", "\n\n", "输入：1 2 3 4 5 6 7 8 9", "\n输出：1 2 3", "\n          4 5 6", "\n                    7 8 9", "\n结果依然是原矩阵，是哪一步出问题了呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;\n#include&amp;lt;math.h&amp;gt;\nint main()\n{\n    int a,t,n,i;\n    printf(&amp;#34;输入a、n的值&amp;#xff1a;\\n&amp;#34;);\n    scanf(&amp;#34;%d%d&amp;#34;,&amp;amp;a,&amp;amp;n);\n    double Sn&amp;#61;0.0;\n    for(i&amp;#61;1;i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n        {\n            a&amp;#61;(pow(10,(float)i)-1.0)/9.0*a;\n            Sn&amp;#43;&amp;#61;a;\n        }\n    printf(&amp;#34;Sn&amp;#61;%.0lf&amp;#34;,Sn);\n    return 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;int类型在c语言中是2个字节&amp;#xff0c;你输入的数超出范围了。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["做题用pow函数出现点问题，准确说是整型和浮点型数据有点混乱", ["/*", "\n求Sn=a+aa+aaa+aa...a(n个a),其中a是一个数字，n表示a的位数，n由键盘输入", "\n*/", "\n#include<stdio.h>", "\n#include<math.h>", "\nint main()", "\n{", "\n    int Sn=0,a,n,i;", "\n    printf(\"输入a、n的值：\\n\");", "\n    scanf(\"%d%d\",&a,&n);", "\n    for(i=1;i<=n;i++)", "\n        {", "\n            a=(pow((float)10,i)-1.0)/9.0*a;", "\n            Sn+=a;", "\n        }", "\n    printf(\"Sn=%d\",Sn);", "\n    return 0;", "\n}", "\n\n", "运行结果：输入2_1,2_2时，Sn=2和Sn=4（正确的），输入2_3，Sn=2466，输入2_4，Sn=2715528（之后都是错误的）", "\n\n", "书上的方法是用a*10，然后不断循环，我想用pow函数，但是就出现上述问题。求解。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iomanip&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,y&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,z&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; ave&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    cin&amp;gt;&amp;gt;x&amp;gt;&amp;gt;y&amp;gt;&amp;gt;z;\n    sum&amp;#61;x&amp;#43;y&amp;#43;z;\n    ave&amp;#61;(x&amp;#43;y&amp;#43;z)/&lt;span class=\"hljs-number\"&gt;3.0&lt;/span&gt;; \n    cout&amp;lt;&amp;lt;sum&amp;lt;&amp;lt;endl;\n    cout.&lt;span class=\"hljs-built_in\"&gt;setf&lt;/span&gt;(ios::fixed);\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;setprecision&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;);\n    cout&amp;lt;&amp;lt;ave&amp;lt;&amp;lt;endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["c++求三个数的平均值", ["从键盘输入三个整数，分别存入xy,z三个整型变量中，计算并输出三个数的和以及平均值。", "【输入形式】", "从键盘输入三个整数，整数之间以空格隔开。", "【输出形式】", "在屏幕上分两行显示结果：", "第一行为三个数的和，整数形式输出;", "第二行为三个数的平均值，浮点数形式输出，小数点后保留两位小数。", "【样例输入】", "323", "【样例输出】", "8267", "【样例说明】", "3、2、3的和为8，所以第一行输出8;", "第二行输出3、2、3的平均值2.67 （保留两位小数）"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;char是整数型&amp;#xff0c;这是标准保证了的。但要注意&amp;#xff1a;&lt;br /&gt;1、和其他整数型都是默认有符号不同&amp;#xff0c;标准没有规定char是否有符号。如果有需要&amp;#xff0c;需要显式指定signed或unsigned。&lt;br /&gt;2、char存储ASCII码的说法是&lt;strong&gt;错误的&lt;/strong&gt;。标准没有规定char的字符集&amp;#xff0c;不兼容ASCII的也是可以的&amp;#xff0c;虽然很少见。但是特别强调&amp;#xff1a;这不影响这段代码将数字字符转为数字的正确性&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; x&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;5&amp;#39;&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, x - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;); &lt;span class=\"hljs-comment\"&gt;// 输出一定是5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这是因为&amp;#xff0c;标准规定&amp;#xff1a;无论char采用何种字符集&amp;#xff0c;其中的数字字符的整数值必须是连续的。&lt;br /&gt;&amp;#61;&amp;#61;&amp;#61;&amp;#61;分割线&amp;#61;&amp;#61;&amp;#61;&amp;#61;&lt;br /&gt;由于多数平台采用ASCII码作为char的字符集&amp;#xff0c;而ASCII中字符a的编码就是97&amp;#xff0c;因此输出当然是一样的。&lt;br /&gt;计算机中&amp;#xff0c;所有东西都被编码为二进制序列来保存&amp;#xff0c;从文本到图像再到视频&amp;#xff0c;莫不如此。字符也是有编码的&amp;#xff0c;这里的ASCII就是一种编码方案。当兼容ASCII的终端遇到二进制串0110 0001&amp;#xff08;也就是97的二进制形式&amp;#xff09;时&amp;#xff0c;就将其解释为字符a。&amp;#xff08;字符串“97”则是&amp;#xff1a;0011 1001 0011 0111&amp;#xff09;至于为什么这么编码……只能说是历史原因&amp;#xff0c;没有那么多为什么。但它总得有一个编码吧——事实上&amp;#xff0c;计算机内不存在任何未经编码的东西。计算机中&amp;#xff0c;任何东西的处理都要经过编码-解码的过程&amp;#xff0c;甚至包括数字本身&amp;#xff08;补码&amp;#xff09;。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["字符型数据与整型数据通用是什么意思？", ["为什么输出cChar1和cChar2结果都是a呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt; int a&amp;gt;b&amp;gt;c;  这行想干啥&amp;#xff1f;&lt;br /&gt;b&amp;#43;c &amp;gt; a &amp;amp;&amp;amp; a - b &amp;lt; c这两个条件是一回事啊&lt;br /&gt;三个if交换后&amp;#xff0c;a是最小值&amp;#xff0c;c是最大值啊&amp;#xff0c;你写反了吧。将if条件从&amp;gt;改为小于&amp;#xff0c;保证a是最大值&amp;#xff0c;才符合你下面代码逻辑&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;int main() {\n    int a, &lt;span class=\"hljs-keyword\"&gt;b, &lt;/span&gt;c, t;\n    &lt;span class=\"hljs-keyword\"&gt;scanf(&amp;#34;%d%d%d&amp;#34;, &lt;/span&gt;&amp;amp;a, &amp;amp;&lt;span class=\"hljs-keyword\"&gt;b, &lt;/span&gt;&amp;amp;c);\n    if (a &amp;lt; &lt;span class=\"hljs-keyword\"&gt;b) &lt;/span&gt;{\n        t &amp;#61; a;\n        a &amp;#61; &lt;span class=\"hljs-keyword\"&gt;b;\n&lt;/span&gt;        &lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;&amp;#61; t;\n    }\n    if (a &amp;lt; c) {\n        t &amp;#61; a;\n        a &amp;#61; c;\n        c &amp;#61; t;\n    }\n    if (&lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;&amp;lt; c) {\n        t &amp;#61; &lt;span class=\"hljs-keyword\"&gt;b;\n&lt;/span&gt;        &lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;&amp;#61; c;\n        c &amp;#61; t;\n    }\n    if (&lt;span class=\"hljs-keyword\"&gt;b&amp;#43;c &lt;/span&gt;&amp;gt; a) {\n        if (&lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;* &lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;&amp;#43; c * c &amp;#61;&amp;#61; a * a) {\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Right triangle&amp;#34;&lt;/span&gt;);\n        }\n        else if (&lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;* &lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;&amp;#43; c * c &amp;gt; a * a) {\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Acute triangle&amp;#34;&lt;/span&gt;);\n        }\n        else if (&lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;* &lt;span class=\"hljs-keyword\"&gt;b &lt;/span&gt;&amp;#43; c * c &amp;lt; a * a) {\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Obtuse triangle&amp;#34;&lt;/span&gt;);\n        }\n    } else {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Not triangle&amp;#34;&lt;/span&gt;);\n    }\n\n \n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["请问我哪里还存在错误，我自己知道有错，但我自己找不出来", ["任务描述", "输入三条线段的长度（整型），根据是否能组成三角形，输出以下结果之一：锐角三角形、直角三解形、钝角三角形、不能构成三角形。", "\n", "输入格式:", "三个整数", "\n", "输出格式:", "锐角三角形输出：Acute triangle", "直角三解形输出：Right triangle", "钝角三角形输出：Obtuse triangle", "不能构成三角形输出：Not triangle", "输入样例:", "2 3 3", "输出样例:", "Acute triangle", "输入样例:", "5 4 3", "输出样例:", "Right triangle", "输入样例:", "6 4 3", "输出样例:", "Obtuse triangle", "输入样例:", "8 4 3", "输出样例:", "Not triangle", "\n", "#include <stdio.h>", "\n\nint main() {\n    int a, ", "b, ", "c, t;\n    ", "scanf(\"%d%d%d\", ", "&a, &", "b, ", "&c);\n    if (a > ", "b) ", "{\n        t = a;\n        a = ", "b;\n", "        ", "b ", "= t;\n    }\n    if (a > c) {\n        t = a;\n        a = c;\n        c = t;\n    }\n    if (", "b ", "> c) {\n        t = ", "b;\n", "        ", "b ", "= c;\n        c = t;\n    }\n    int a>", "b>c;\n", "    if (", "b+c ", "> a && a - ", "b ", "< c) {\n        if (", "b ", "* ", "b ", "+ c * c == a * a) {\n            printf(", "\"Right triangle\"", ");\n        }\n        else if (", "b ", "* ", "b ", "+ c * c > a * a) {\n            printf(", "\"Obtuse triangle\"", ");\n        }\n        else if (", "b ", "* ", "b ", "+ c * c < a * a) {\n            printf(", "\"Acute triangle\"", ");\n        }\n    } else {\n        printf(", "\"Not triangle\"", ");\n    }\n    return ", "0", ";\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;min&amp;#61; x&amp;lt;y?x:y;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["编写程序，输出两个整形数中的最小值", ["\n", "大神求解"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\nint main ()\n{\n\tint a[6][6];\n\tint m,n;\n\tint i,j;\n\tint max;\n\tint indexx&amp;#61;0,indexy&amp;#61;0;\n\tscanf(&amp;#34;%d %d&amp;#34;,&amp;amp;m,&amp;amp;n);\n\tfor (i &amp;#61; 0;i&amp;lt;m;i&amp;#43;&amp;#43;)\n\t{\n\t\tfor (j &amp;#61; 0;j&amp;lt;n;j&amp;#43;&amp;#43;)\n\t\t{\n\t\t\tscanf(&amp;#34;%d&amp;#34;,&amp;amp;a[i][j]);\n\t\t\tif(i &amp;#61;&amp;#61; 0 &amp;amp;&amp;amp; j&amp;#61;&amp;#61;0)\n\t\t\t{\n\t\t\t\tmax &amp;#61; a[i][j];\n\t\t\t\tindexx &amp;#61; 0;\n\t\t\t\tindexy &amp;#61; 0;\n\t\t\t}else\n\t\t\t{\n\t\t\t\tif (a[i][j] &amp;gt; max)\n\t\t\t\t{\n\t\t\t\t\tmax &amp;#61; a[i][j];\n\t\t\t\t\tindexx &amp;#61; i;\n\t\t\t\t\tindexy &amp;#61; j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\tprintf(&amp;#34;%d,%d,%d\\n&amp;#34;,max,indexx,indexy);\n\treturn 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["二维数组找最值3qqqq", ["从键盘输入m(2<=m<=6)行n(2<=n<=6)列整型数据，编程找出其中的最大值及其所在位置的行列下标值并输出。", "\n\n", "输入格式:", "\n\n", "在第一行输入数据的行数m和列数n的值，从第二行开始以二维数组的形式依次输入m行n列整型数据。", "\n\n", "输出格式:", "\n\n", "依次输出最大值及其所在位置的行列下标值，中间以逗号,分隔，最后换行。", "\n\n", "输入样例:", "\n\n", "\n", "3 4\n1 2 3 4\n8 9 7 6\n5 6 7 0", "\n\n", "输出样例:", "\n\n", "\n", "9,1,1"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;\n#include&amp;lt;iostream&amp;gt;\n#include&amp;lt;fstream&amp;gt;\n#include&amp;lt;string.h&amp;gt;\n#include&amp;lt;malloc.h&amp;gt;\n#include&amp;lt;conio.h&amp;gt;\ntypedef struct bookfuns{//书籍信息\n    float price[10];\n    int number[5];//馆存数量\n}bookfun;/*&amp;#61;{};测试*/\ntypedef struct node\n{\n    bookfuns data;//数据域\n    struct node * next;//指针域\n}ListNode,* LinkList;\n\nLinkList InitList();\nLinkList Init();\nLinkList Create(LinkList head);//读取文件信息\n\n\nLinkList InitList()\n{\n    LinkList head&amp;#61;(LinkList)malloc(sizeof(ListNode));//创立头结点\n    if(head&amp;#61;&amp;#61;NULL)\n    {\n        printf(&amp;#34;空间分配无效!&amp;#34;);\n        exit(-1);//退出程序\n    }\n    head-&amp;gt;next&amp;#61;NULL;\n    return head;\n}\n\nLinkList Create(LinkList head)\n{\n    bookfuns LM;//接受文件数据\n    LinkList rear;\n    rear&amp;#61;head;//尾指针指向头节点head\n    FILE *fp&amp;#61; fopen(&amp;#34;D:\\\\ok.txt&amp;#34;,&amp;#34;r&amp;#34;);\n    if(fp&amp;#61;&amp;#61;NULL)\n    {\n        printf(&amp;#34;打开文件失败!\\n&amp;#34;);\n        return NULL;\n    }\n    else{\n   \nwhile(fscanf(fp,&amp;#34;%f\\n%d\\n&amp;#34;,LM.price,LM.number)!&amp;#61;EOF)//处理到文件尾\n    {\n       LinkList s&amp;#61;(LinkList)malloc(sizeof(ListNode));\n       s-&amp;gt;data&amp;#61;LM;\n       s-&amp;gt;next&amp;#61;NULL;\n       rear-&amp;gt;next&amp;#61;s;\n       rear&amp;#61;s;//尾插法 r指向s\n       printf(&amp;#34;\\n\\n价格&amp;#xff1a;%f\\n馆藏数量: %d\\n&amp;#34;,&amp;amp;LM.price,&amp;amp;LM.number);//输出书籍信息\n\n    }\n\nprintf(&amp;#34;\\n信息录入成功&amp;#xff01;\\n&amp;#34;);\n\n    }\n    fclose(fp);\n    return head;\n}\nint main()\n{\n    LinkList head&amp;#61;InitList();\n    head&amp;#61;Create(head);\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;我帮你修改了一下代码&amp;#xff0c;万望采纳。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["c语言从文档读取数据 浮点型整形 读取失败什么情况 。。。。", ["#include<stdio.h>", "\n#include<iostream>", "\n#include<fstream>", "\n#include<string.h>", "\n#include<malloc.h>", "\n#include<conio.h>", "\ntypedef struct bookfuns{//书籍信息", "\n    float price[10];", "\n    int number[5];//馆存数量", "\n}bookfun;/*={};测试*/", "\ntypedef struct node", "\n{", "\n    bookfuns data;//数据域", "\n    struct node * next;//指针域", "\n}ListNode,* LinkList;", "\n\n", "LinkList InitList();", "\nLinkList Init();", "\nLinkList Create(LinkList head);//读取文件信息", "\n\n", "\nLinkList InitList()", "\n{", "\n    LinkList head=(LinkList)malloc(sizeof(ListNode));//创立头结点", "\n    if(head==NULL)", "\n    {", "\n        printf(\"空间分配无效!\");", "\n        exit(-1);//退出程序", "\n    }", "\n    head->next=NULL;", "\n    return head;", "\n}", "\n\n", "LinkList Create(LinkList head)", "\n{", "\n    bookfuns LM;//接受文件数据", "\n    LinkList rear;", "\n    rear=head;//尾指针指向头节点head", "\n    FILE *fp= fopen(\"D:\\\\ok.txt\",\"r\");", "\n    if(fp==NULL)", "\n    {", "\n        printf(\"打开文件失败!\\n\");", "\n        return NULL;", "\n    }", "\n    else{", "\n   ", "\nwhile(fscanf(fp,\"%f\\n%d\\n\",LM.price,LM.number)!=EOF)//处理到文件尾", "\n    {", "\n\n", "       LinkList s=(LinkList)malloc(sizeof(ListNode));", "\n       s->data=LM;", "\n       s->next=NULL;", "\n       rear->next=s;", "\n       rear=s;//尾插法 r指向s", "\n       printf(\"\\n\\n价格：%f\\n馆藏数量: %d\\n\",LM.price,LM.number);//输出书籍信息", "\n\n", "    }", "\n\n", "printf(\"\\n信息录入成功！\\n\");", "\n\n", "    }", "\n    fclose(fp);", "\n    return head;", "\n}", "\nint main()", "\n{", "\n    LinkList head=InitList();", "\n    head=Create(head);", "\n}", "\n\n", "\n\n", " "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;4199901应该是array函数地址&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["封装函数，利用冒泡排序，实现整型数组的升序排序的结果为何出现4199901 ？", [" #include<stdio.h>", "\nvoid bubblesort(int *arr,int len)    //冒泡 ", "\n{", "\n    int i,j;", "\n    for(i=0;i<len;i++)", "\n    {", "\n        int tamp;", "\n        for(j=0;j<len-1-i;j++)", "\n        {", "\n            if(arr[j]>arr[j+1])", "\n                {", "\n                    tamp=arr[j];", "\n                    arr[j]=arr[j+1];", "\n                    arr[j+1]=tamp;", "\n                }", "\n        }", "\n    }", "\n}", "\nvoid array(int *arr,int len)        // 打印数组 ", "\n{", "\n    int k;", "\n    for(k=0;k<len;k++) ", "\n    {", "\n        printf(\"%d\\n\",arr[k]);", "\n    }", "\n}", "\nint main(void)", "\n{", "\n    int arr[10]={4,3,6,9,1,2,10,8,7,5};", "\n    int len;", "\n    len=sizeof(arr)/sizeof(arr[0]);", "\n    bubblesort(arr,len);          //实现冒泡 ", "\n    array(arr,len);", "\n    {", "\n        printf(\"%d\\n\",array);", "\n    }", "\n}", "\n\n", " ", "\n\n", "实现结果", "\n\n", "1", "\n2", "\n3", "\n4", "\n5", "\n6", "\n7", "\n8", "\n9", "\n10", "\n4199901"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;通讯的话&amp;#xff0c;建议先根据协议的定义一个收发数据结构体&amp;#xff0c;发送方定义一个结构体变量&amp;#xff0c;把结构体各个成员都填充完成。然后发送的时候把结构体指针强制转换成char数组发送。接收的时候反过来&amp;#xff0c;先接收一个char数组里&amp;#xff0c;然后把cha指针强制转换成结构体指针&amp;#xff0c;就可以通过结构体直接读出各个成员。&lt;br /&gt;需要注意两边的大小端模式是否一致&amp;#xff0c;不一致需要转换&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["如何在51单片机通过串口接收整型数组，并逐一提取内部元素到指定变量", ["目前在做一个单片机倒计时时钟，思路是上位机设定好时分秒，打包成数组通过串口发到单片机下位机。现在不知道单片机这边怎么编程序才能接受数组并将数组内部元素提出来。", "目前的思路是单片机这边写一个三元素数组对接，先把传过来的数据放进数组再赋值给变量，但是不知道怎么接受和提取数组。", "希望大家能够提出宝贵的意见，谢谢大家。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-xml\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[ ][M])&lt;/span&gt; \n&lt;/span&gt;{\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j,max&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\nmax&amp;#61;a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;#43;&amp;#43;)\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;M;j&amp;#43;&amp;#43;)\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[i][j]&amp;gt;max)max&amp;#61;a[i][j];\n\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; max;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["二维数组：求最大元素的值", ["二维数组：求最大元素的值", "请编写一个函数fun，它的功能是：求出一个2×M整型二维数组中最大元素的值，并将此值返回调用函数。", "\n", "函数接口定义：", "在这里描述函数接口。例如：", "int fun (int a[ ][M]) ;", "在这里解释接口参数。例如：其中 N 和 D 都是用户传入的参数。 N 的值不超过int的范围； D 是[0, 9]区间内的个位数。函数须返回 N 中 D 出现的次数。", "\n", "裁判测试程序样例：", "\n", "#include <stdio.h>", "#define M 4", "#include <stdio.h>", "fun (int a[][M]) ;", "\n", "int main()", "{   int arr[2][M] , i , j ;", "    for(i=0;i<2;i++)", "     for(j=0; j<M; j++)", "            scanf(\"%d\", &arr[i][j])  ;", "    printf(\"max=%d\" , fun(arr) ) ;", "    return 0 ;", "}", "\n", "/* 请在这里填写答案 */", "输入样例：", "在这里给出一组输入。例如：", "\n", "1 8 5 9", "3 2 10 1", "输出样例：", "在这里给出相应的输出。例如：", "\n", "max=10"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; row 2  &lt;span class=\"hljs-comment\"&gt;//行数&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; col 3  &lt;span class=\"hljs-comment\"&gt;//列数&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[], &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; r,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c)&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//二维数组转换为一维传递&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; r; i&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;//行&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt; c; j&amp;#43;&amp;#43;)&lt;span class=\"hljs-comment\"&gt;//列&lt;/span&gt;\n            a[i * c] &amp;#43;&amp;#61; a[i * c &amp;#43; j];&lt;span class=\"hljs-comment\"&gt;//每一行元素的和存放到每一行的第一个元素中&lt;/span&gt;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[row][col], i, j;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; row; i&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;//行&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; col; j&amp;#43;&amp;#43;) &lt;span class=\"hljs-comment\"&gt;//列&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a[i][j]);&lt;span class=\"hljs-comment\"&gt;//输入二维数组元素 2 行  3 列&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], row, col);  &lt;span class=\"hljs-comment\"&gt;//函数调用&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; row; i&amp;#43;&amp;#43;, &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;))\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; col; j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, a[i][j]);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/544463035456167.jpg\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["用C语言编程数组元素求和", ["将一个2行3列整型数组中每一行元素的和存放到每一行的第一个元素中，主函数负责输入和输出。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;很明显啊&amp;#xff0c;你在哪里见过有用()括号申明数组的用法&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["请问在c99标准中下面那个是一维整形数组a的错误说明", []], "Tag": "程序设计"}
{"Answer": "&lt;h1 id=\"h1_5_1640885246983\"&gt;5&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,n;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;输入n:&amp;#34;&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; n;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[n];\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;输入&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;n&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;个数:&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;n; i&amp;#43;&amp;#43;)\n    {\n        cin &amp;gt;&amp;gt; a[i];\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; min &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[i]&amp;lt;a[min])\n            min &amp;#61; i;\n    }\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;最小元素是:&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; a[min] &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;,位置:&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; min &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/684099288046128.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;h1 id=\"h1_6_1640885247026\"&gt;6&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *&lt;span class=\"hljs-title\"&gt;getString&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *p &amp;#61; (&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;);\n    cin.&lt;span class=\"hljs-built_in\"&gt;getline&lt;/span&gt;(p,&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; p;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;getString&lt;/span&gt;() &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["c++请大家们回答一下问题", ["1.从键盘输入一段字符（最多80个字符），分别统计出其中的字母、数字、空格和其他字符的个数，并将小写字母转变为大写字母输出。", "\n", "2.从键盘输入n个整数（n<1000），存放在一个一维数组中，输出其中的完全数。", "\n", "3.从键盘输入n个整数（n<1000），将这些数存放在一个一维数组中，求数列中所有数值的和及平均值，并从小到大输出所有偶数元素。", "\n", "4.从键盘输入一段字符，将字符串首尾互换，并与原字符串相连接后输出。", "\n", " 5、  用指针完成程序编写：从键盘输入n个整数（n<100），找出最小元素的位置，并输出。", "\n", "6、  设计一个函数char*get String(),从键盘接受一任意长度的字符串（以回车作为结束符），返回接收到的字符串的首地址。", "7、有10个学生，每个学生的数据包括学号、姓名、英语、数学、物理三门课的成绩，从键盘输入10个学生数据，要求打印出3门课程的总平均成绩，以及最高分的学生的数据（包括学号，姓名，3门课的平均成绩，平均分数）。", "8、设计一个2×2的矩阵结构体，然后计算一个矩阵A的n次幂。为了避免整型溢出，请输出矩阵中每个元素模109+7的结果。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;#include &amp;#34;stdio.h&amp;#34;&lt;br /&gt;\nint fsarr(int *a, int n);&lt;br /&gt;\nint main()&lt;/p&gt;\n\n&lt;p&gt;{&lt;!-- --&gt;&lt;br /&gt;\n    int a[10]&amp;#61;{21,23,25,27,29,31,33,28,22,33},i;&lt;br /&gt;\n    fsarr(a,10);&lt;br /&gt;\n    i&amp;#61;0;&lt;br /&gt;\n    while(i&amp;lt;10)&lt;br /&gt;\n    {&lt;!-- --&gt;&lt;br /&gt;\n        printf(&amp;#34;%d\\t&amp;#34;,a[i]);&lt;br /&gt;\n        i&amp;#43;&amp;#43;;&lt;br /&gt;\n    }&lt;br /&gt;\n}&lt;/p&gt;\n\n&lt;p&gt;int fsarr(int *a, int n)&lt;br /&gt;\n{&lt;!-- --&gt;&lt;br /&gt;\n    int i,j,t;&lt;br /&gt;\n    i&amp;#61;0;j&amp;#61;n-1;&lt;br /&gt;\n    while(i &amp;lt; j)&lt;br /&gt;\n    {&lt;!-- --&gt;&lt;br /&gt;\n        t&amp;#61;a[i];&lt;br /&gt;\n        a[i]&amp;#61;a[j];&lt;br /&gt;\n        a[j]&amp;#61;t;&lt;br /&gt;\n        i&amp;#43;&amp;#43;;j--;&lt;br /&gt;\n    }&lt;br /&gt;\n    return 1;&lt;br /&gt;\n}&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["定义整型数组a，试用函数将数组元素颠倒后输出（在空白处填写适当信息）。", ["#include \"stdio.h\"", "\n\n", "int fsarr(_____);", "\n\n", "int main()", "\n\n", "{", "\n\n", " int a[10]={21,23,25,27,29,31,33,28,22,33},i;", "\n\n", " fsarr(a,10);", "\n\n", " i=0;", "\n\n", " while(i<10)", "\n\n", " {", "\n\n", "     printf(\"%d\\t\",a[i]);", "\n\n", "     i++;", "\n\n", " }", "\n\n", " ", "\n\n", "}", "\n\n", "int fsarr(_______)", "\n\n", "{", "\n\n", "    int i,j,t;", "\n\n", " i=0;j=n-1;", "\n\n", " while(_________)", "\n\n", " {", "\n\n", "  t=a[i];", "\n\n", "  a[i]=a[j];", "\n\n", "  a[j]=t;", "\n\n", "  i++;j--;", "\n\n", " }", "\n\n", " return 1;", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://www.cnblogs.com/dudududu/p/8514669.html\" id=\"textarea_1634806768767_1634806803737_0\"&gt;https://www.cnblogs.com/dudududu/p/8514669.html&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["定义一个长度为100的整型数组a，用随机值初始化该数组（数值范围-100~100） ，使用 直", ["使用 直接插入排序算法将其从小到大排序， 然后输入一个数值范围-100", "100的整数，用二分查 找的算法查找该整数在已排序的数组中的下标，没有则提示不存在。  问题在于直接插入排序我真的弄不开，请大佬指点迷津"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;scanf_s(&amp;#34;%c&amp;#34;, &amp;amp;oper_ch, 1);&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["c语言中c6064警告怎么解决", ["代码没有错误，但出现c6064警告，警告描述如下：", "缺少scanf_s的整型参数（对应于转换说明符2），图片如下", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;li &amp;#61; [7,9,1,5,9,6,1,2,9]&lt;/p&gt;\n\n&lt;p&gt;maxnum &amp;#61; max(li)&lt;/p&gt;\n\n&lt;p&gt;minnum &amp;#61; min(li)&lt;/p&gt;\n\n&lt;p&gt;li &amp;#61; [x for x in li if x!&amp;#61;maxnum and x!&amp;#61;minnum]&lt;/p&gt;\n\n&lt;p&gt;print(li)&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["Python删除列表中最大元素和最小元素", ["读入一个整数列表，输出删除最大元素和最小元素后的列表。最大元素和最小元素可能有多个。", "\n\n", " "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;最后一行代码a[n]错了&amp;#xff0c;应该是a[n-1]&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["运行结果对，但是没有分", ["对一个整型数组进行排序。从键盘接收一个整型数据n，用户输入的值一定位于1到9之间（含边界）。接下来接收n个整数到数组中，选用任何一种方式对数据元素降序排列后，输出数组中的每一个值。", "\n", "输入格式:", "输入第一行给出一个不超过9的正整数n。第二行给出n个整数，其间以空格分隔。", "\n", "输出格式:", "在一行中输出从大道小降序排列后的数组元素，两个数字之间有且仅有一个空格。最后一个数字后，没有空格。", "\n", "输入样例:", "第一个整数6，表示要接收6个整数到数组中：", "\n", "6", "6 1 0 2 1 3", "结尾无空行", "输出样例:", "数值从大到小排列，最后一个数之后没有空格。", "\n", "6 3 2 1 1 0", "结尾无空行", "\n", "\n", "#include<stdio.h>\n", "int", " main(){\n    ", "int", " a[", "10", "]={", "0", "},", "n", ",i=", "0", ",", "t", ",j;\n    scanf(", "\"%d\"", ",&", "n", ");\n    for(i=", "0", ";i<", "n", ";i++)scanf(", "\"%d\"", ",&a[i]);\n    for(i=", "0", ";i<", "n", ";i++)\n        for(j=i+", "1", ";j<", "n", ";j++)\n            ", "if", "(a[i]<a[j]){\n                ", "t", "=a[i];\n                a[i]=a[j];\n                a[j]=", "t", ";\n            }\n    for(i=", "0", ";i<", "n", "-", "1", ";i++) \n       printf(", "\"%d \"", ",a[i]);\n    printf(", "\"%d\"", ",a[", "n", "]);\n }\n\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;因为输出的时候用的是%d,char在计算机内部存储的时候实际是存储了对应的ascii码,使用%d打印即将ascii码本身打印出来&lt;br /&gt;你无法输出是因为你的%和d写反了&lt;br /&gt;&lt;strong&gt;有帮助望采纳~&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["为什么定义的是char型，输出的是整型数，用编程工具也执行不出来", ["\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m, n;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; max;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; indexx &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, indexy &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt;, &amp;amp;m, &amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a[i][j]);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; j &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                max &amp;#61; a[i][j];\n                indexx &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                indexy &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            {\n               &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[i][j] &amp;gt; max)\n               {\n                     max &amp;#61; a[i][j];\n                    indexx &amp;#61; i;\n                    indexy &amp;#61; j;\n                }\n            }\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d,%d,%d\\n&amp;#34;&lt;/span&gt;, max, indexx, indexy);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["用C语言解决一个二维数组找最值问题", ["​", "二维数组找最值", "从键盘输入m(2<=m<=6)行n(2<=n<=6)列整型数据，编程找出其中的最大值及其所在位置的行列下标值并输出。 输入格式: 在第一行输入数据的行数m和列数n的值，从第二行开始以二维数组的形式依次输入m行n列整型数据。 输出格式: 依次输出最大值及其所在位置的行列下标值，中间以逗号,分隔，最后换行。", "\n", "输入样例:", "\n", "3 4", "1 2 3 4", "8 9 7 6", "5 6 7 0", "\n", "输出样例:", "\n", "9,1,1", "\n", "​"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;ifndef&lt;/span&gt; INT_H&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; INT_H&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Int&lt;/span&gt;\n{\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; value;\n\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n    &lt;span class=\"hljs-comment\"&gt;//请在以下空白书写功能构造函数&amp;#xff0c;此处要求以一个整型作为参数&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;/********** Begin **********/&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;Int&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; v) : &lt;span class=\"hljs-built_in\"&gt;value&lt;/span&gt;(v) {}\n    &lt;span class=\"hljs-comment\"&gt;/********** End **********/&lt;/span&gt;\n\n    &lt;span class=\"hljs-comment\"&gt;//请不要改动以下成员函数&lt;/span&gt;\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;getValue&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; value; }\n};\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;Int.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x;\n    cin &amp;gt;&amp;gt; x;\n    &lt;span class=\"hljs-function\"&gt;Int &lt;span class=\"hljs-title\"&gt;a&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(x)&lt;/span&gt;&lt;/span&gt;;\n    cout &amp;lt;&amp;lt; a.&lt;span class=\"hljs-built_in\"&gt;getValue&lt;/span&gt;() &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["为类提供功能构造函数该怎么写？", ["#ifndef ", "INT_H", "#define ", "INT_H", "  ", "\n", "class Int {", "\n", "private", ":\n    ", "int", " value;\n\n", "public", ":\n    ", "//请在以下空白书写功能构造函数，此处要求以一个整型作为参数", "\n    ", "/********** Begin **********/", "\n\n\n\n    ", "/********** End **********/", "\n\n    ", "//请不要改动以下成员函数", "\n    ", "int", " ", "getValue", "()", "const", " ", "{", "return", " value;}\n", "\n", "};", "\n", "#endif", "\n", "主函数如下：", "#include \"Int.h\"", "#include ", "using namespace std;", "int main() {", "    int x;", "    cin >> x;", "    Int a(x);", "    cout << a.getValue() << endl;", "    return 0;", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;min_l提示没有初始化&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/554772623956165.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["设有一个3行4列的整形矩阵，输出该矩阵中每行元素的最小值和最大值，并输出它们的位置。", ["根据题目写出了以下代码，能顺利打印输出最大和最小元素和最大值的位置，但无法输出最小值的位置。", "\n", "\n", "\n", "\n", "运行结果出错，错误提示信息Run-Time Check Failure #3 - The variable 'min_l' is being used without being initialized.", "\n", "请问怎么改？感谢！"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;\n#include&amp;lt;stdio.h&amp;gt;\nvoid main()\n{\n  int i,sum&amp;#61;0,ave;\n  int a[10]&amp;#61;{12,35,14,7,82,46,28,19,3,20};\n    for(i&amp;#61;0;i&amp;lt;10;i&amp;#43;&amp;#43;){\n        printf(&amp;#34;%d &amp;#34;,a[i]);\n        sum&amp;#43;&amp;#61;a[i];\n    }\n    printf(&amp;#34;\\n&amp;#34;);\n    printf(&amp;#34;sum&amp;#61;%d,ave&amp;#61;%.2f&amp;#34;,sum,sum*1.0/10);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"207\" src=\"https://img-ask.csdnimg.cn/upload/1624179721765.png\" width=\"796\" /&gt; &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言题目，大神帮帮我，求完整代码，在线等。", ["问题:定义一个 10个元素的整型数组的同时全部赋初值:12,35,14,7,82,46,28,19,3,20，求该数组元素的和及平均值。", "\n\n", "具体要求①定义数组的同时给数组全部赋值；", "\n\n", " ②用for 循环显示数组元素；", "\n\n", "③用 for循环求和以及平均值并显示。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;int a &amp;#61;100;&lt;span class=\"hljs-built_in\"&gt;\nint &lt;/span&gt;*p1 &amp;#61; &amp;amp;a;&lt;span class=\"hljs-built_in\"&gt;\nint &lt;/span&gt;**p2 &amp;#61; &amp;amp;p1;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["用对象a分别给出下面定义", ["（1）一个整型类型的对象", "（2）一个指向整型类型对象的指针", "（3）一个指向指针的指针，它指向的指针是指向一个整型类型的对象。", "4.3怎么写", "是将a定义成题目所说，还是?", "例如（2）int i=100；", "                   int *a=&i；", "还是 int a=100；", "         int *ptr=&a；", "是上面情况的哪一种呢?"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;int arr[10], i,  j&amp;#xff0c;target;&lt;br /&gt;for(i&amp;#61;0; i&amp;lt;10; i&amp;#43;&amp;#43;)&lt;br /&gt;scanf(&amp;#34;%d&amp;#34;, &amp;amp;arr[i]);&lt;/p&gt;\n&lt;p&gt;scanf(&amp;#34;%d&amp;#34;, &amp;amp;target);&lt;br /&gt;for(i&amp;#61;0; i&amp;lt;9; i&amp;#43;&amp;#43;)&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    for(j&amp;#61;i&amp;#43;1;j&amp;lt;10; j&amp;#43;&amp;#43;)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    {&lt;!-- --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        if(a[i]&amp;#43;a[j]&amp;#61;&amp;#61;target)&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;        printf(&amp;#34;%d %d\\n&amp;#34;,a[i],a[j]);&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    }&lt;/span&gt;&lt;br /&gt;}&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["请问这个程序怎么写啊", [" 输入 10 个整型存入到数组中，然后再输入一个整型数字 target，", "然后输出数组中两个数字之和为 target 的所有情况（输出的情况应不", "同，输出顺序无要求）。", "输入范例一：", "2 2 2 2 2 2 2 2 2 2", "4", "输出范例一：", "2 2", "输入范例二：", "8 5 -1 5 6 2 7 12 10 3", "10", "输出范例二：", "8 2", "5 5", "7 3"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;供参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt;  Max  100&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;function2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[], &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j, tmp;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)&lt;span class=\"hljs-comment\"&gt;//冒泡排序&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - i; j&amp;#43;&amp;#43;)\n\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((a[j] % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;lt; a[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) || &lt;span class=\"hljs-comment\"&gt;//当前一个元素为偶数&amp;#xff0c;后一个元素为奇数时     &lt;/span&gt;\n                ((a[j] % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt; &amp;#61;&amp;#61; a[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] % &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) &amp;amp;&amp;amp; (a[j] &amp;gt; a[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])))\n                      &lt;span class=\"hljs-comment\"&gt;// 前后两个元素同为奇数或偶数&amp;#xff0c;并且前一个元素比后一个元素大时&lt;/span&gt;\n            {\n                tmp &amp;#61; a[j];\n                a[j] &amp;#61; a[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                a[j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; tmp;\n\n            }\n        }\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[] &amp;#61; { &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; ,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;11&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; ,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt; ,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt; ,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt; ,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt; ,&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt; }, n &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, i;\n    n &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(a) / &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]);\n    &lt;span class=\"hljs-built_in\"&gt;function2&lt;/span&gt;(a, n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)&lt;span class=\"hljs-comment\"&gt;//遍历数组&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, a[i]);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["请问这个该怎么写啊？", ["编写函数 function2，用于将某一整型数组中n（0<n<100）个数按先奇数后偶数的方式从 小到大顺序存放"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;数据输入和操作完全用指针实现&amp;#xff0c;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/760723412646135.jpg\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; N 10&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[N],*p&amp;#61;a,i,j;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *t;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入%d个元素&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;,N);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;N;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,p&amp;#43;&amp;#43;);\n    &lt;span class=\"hljs-comment\"&gt;//将0元素移动到数组末尾&lt;/span&gt;\n    p&amp;#61;a;&lt;span class=\"hljs-comment\"&gt;//重置p&lt;/span&gt;\n    t&amp;#61;a;\n    j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;N;i&amp;#43;&amp;#43;,p&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(*p!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            *t &amp;#61; *p;\n            t&amp;#43;&amp;#43;;\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            j&amp;#43;&amp;#43;; &lt;span class=\"hljs-comment\"&gt;//记录0的个数&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-comment\"&gt;//把t后面的置0&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;j;i&amp;#43;&amp;#43;)\n    {\n        *t &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        t&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-comment\"&gt;//输出&lt;/span&gt;\n    p&amp;#61;a;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;N;i&amp;#43;&amp;#43;,p&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,*p);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["C语言指针数组移动。", ["声明一个整型数组arr，数组长度为常量N(取值自定)，其数组元素通过控制台输入。数组元素中有若干个零和若干个非零。要求：1) 把arr中的零元素移至数组末尾，非零整数移至数组前面，并保持非零元素的原有顺序；2) 输出移动后的数组；3) 不允许使用数组下标访问数组元素或为数组元素赋值；4) 除了main函数外，不声明任何函数。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;int max&amp;#61;arr[0];&lt;br /&gt;for(int i&amp;#61;1;i&amp;lt;sizeof(arr)/sizeof(arr[0]);i&amp;#43;&amp;#43;)&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;  if(max&amp;lt;arr[i])&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    max&amp;#61;arr[i];&lt;/span&gt;&lt;br /&gt;printf(&amp;#34;%d&amp;#34;,arr[i]);&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["数组问题，我基础不好，请求帮助", ["问题是这个样子的", "编写程序，找出一个整型数组(长度不大于1000)中的最大值，并输出最大值", "希望能帮我解答，谢谢啦"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;那就定义指针的指针指向二维数组&amp;#xff0c;用指针访问二维数组元素&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["关于#c语言#的问题：2) 不允许使用数组下标访问数组元素或为数组元素赋值", ["声明一个3×2的二维整型数组arr，其数组元素通过控制台输入。输出输入的数组，转置，输出转置后的数组。要求：1) 声明一个以指向数组元素的指针变量为参数的函数并在main函数中调用，该函数把arr中的元素转置；2) 不允许使用数组下标访问数组元素或为数组元素赋值。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/646126765846173.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["100%采纳，C++关于指针变量", ["问题:使用指针变量，输出一个长度为N的整型数组中的最大值和最小值，并将其逆序后输出，假定长度N为10.", "\n", "#", "include", " ", "<iostream>", "\n", "using", " ", "namespace", " std;\n", "void", " ", "main", "()", "\n", "{\n    ", "int", " a[", "10", "],*p=a,i;\n    ", "for", "(i=", "0", ";i<", "10", ";i++)\n    {\n        p[i]=i;\n    }\n    cout<<p[", "9", "]<<endl<<p[", "0", "];\n    ", "for", "(i=", "9", ";i>=", "0", ";i--)\n    {\n        cout<<p[i];\n    }\n}\n\n", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这题可以通过乘法原理计算&amp;#xff1a;&lt;br /&gt;第一位只能填4个数字&lt;br /&gt;第二位只能填3个数字&lt;br /&gt;第三位只能填2个数字&lt;br /&gt;最后一位只有1中填法&lt;br /&gt;4x3x2x1等于24&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["求数组内元素的排列可能", ["给出一个长度为四的整形数组，请写出其元素所有的排列可能，怎么做啊😱仅可用选择结构顺序结构循环结构和数组知识编译，要求编程简单且简洁，求帮忙", "这个排列可能是指的大小排列可能，还是数的排列可能？可数的排列可能有无数种-_-||", "它也没指定元素是什么，字符和整数怎么排？"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main()\n{\n    int s[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;],i,&lt;span class=\"hljs-keyword\"&gt;j,t;\n&lt;/span&gt;    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Please enter scores:\\n&amp;#34;&lt;/span&gt;);\n    for(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;i&amp;lt;30;i&amp;#43;&amp;#43;)&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;scanf(&amp;#34;%d&amp;#34;,&amp;amp;a[i]);\n&lt;/span&gt;    for(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;i&amp;lt;29;i&amp;#43;&amp;#43;)&lt;/span&gt;\n        for(&lt;span class=\"hljs-keyword\"&gt;j&amp;#61;0;j&amp;lt;29-i;j&amp;#43;&amp;#43;)\n&lt;/span&gt;        {\n            if(s[&lt;span class=\"hljs-keyword\"&gt;j] &lt;/span&gt;&amp;lt; s[&lt;span class=\"hljs-keyword\"&gt;j&amp;#43;1])\n&lt;/span&gt;            {\n                t &amp;#61; s[&lt;span class=\"hljs-keyword\"&gt;j];\n&lt;/span&gt;                s[&lt;span class=\"hljs-keyword\"&gt;j] &lt;/span&gt;&amp;#61; s[&lt;span class=\"hljs-keyword\"&gt;j&amp;#43;1];\n&lt;/span&gt;                s[&lt;span class=\"hljs-keyword\"&gt;j&amp;#43;1] &lt;/span&gt;&amp;#61; t;\n            }\n        }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;Sorted results:\\n&amp;#34;&lt;/span&gt;);\n    for(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;i&amp;lt;30;i&amp;#43;&amp;#43;)&lt;/span&gt;\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,a[i]);\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["排序c语言，保存数组", ["从键盘任意输入某班30个学生的成绩(成绩类型为整型)，保存到数组中，并输出成绩按由高到低的排序结果。", "输入:\"%d\" 提示信息\"Please enter scores:\\n\"", "输出:提示信息\"Sorted results:\\n\"，且每个成绩占一行\"%d\\n”"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;按位置依次输出即可&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,n,a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;n;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;){\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-comment\"&gt;/*1 2 3 4 5 6 7 8 9 10\n3*/&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img title=\"image.png\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/511988901036124.png\" /&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["pta c语言数组循环移动n位怎么做", ["\n", "    ", "7", "-", "91", "数组", "12", "：循环移位（", "30", "分）\n定义一个有", "10", "个元素的整型一维数组a，输入", "10", "个数存于该一维数组，将一维数组中元素向左循环移位", "n", "位，", "n", "由键盘输入，最后将移位完的", "10", "个元素输出\n输入格式：\n输入数据有两行，第一行输入", "10", "个整数，空格间隔，赋值给数组，第二行输入", "n", "（系统保证", "1", "<=", "n", "<=", "8", "）。\n输出格式：\n输出移位完的数组，元素之间用空格间隔\n输入样例：\n 样例输入\n  ", "12345678910", "\n  ", "3", "\n   ①结尾无空行\n输出样例：\n 样例输出\n  ", "45678910123", "\n   ①结尾无空行\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;*p;\n    cin &amp;gt;&amp;gt; n;\n    p &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[n];\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n        cin &amp;gt;&amp;gt; p[i];\n    &lt;span class=\"hljs-comment\"&gt;//输出&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-comment\"&gt;//显示奇数&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;lt;&amp;#61;p[i];j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j%&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n                cout &amp;lt;&amp;lt; j &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n        }\n        cout &amp;lt;&amp;lt; endl;\n        &lt;span class=\"hljs-comment\"&gt;//显示偶数&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;lt;&amp;#61;p[i];j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j%&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                cout &amp;lt;&amp;lt; j &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n        }\n        cout &amp;lt;&amp;lt; endl;\n     \n    }\n    &lt;span class=\"hljs-keyword\"&gt;delete&lt;/span&gt;[] p;\n    p &amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["C++奇偶分离怎么写？", ["7-1 奇偶分离 (10 分)", "任务描述", "\n", "有一个正整型数k(2<=k<=10000),你要做的是：先把1到k中的所有奇数从小到大输出，再把所有的偶数从小到大输出。", "\n", "输入格式:", "\n", "第一行有一个整数n（2<=n<30)表示有n组测试数据； 之后的n行，每行有一个整型数k。", "\n", "输出格式:", "\n", "对于每组数据：", "\n", "第一行输出所有的奇数（行末尾没有空格）", "\n", "第二行输出所有的偶数（行末尾没有空格）", "\n", "每组数据后面有一个换行。", "\n", "输入样例:", "\n", "2", "10", "14", "结尾无空行", "输出样例:", "\n", "1 3 5 7 9", "2 4 6 8 10", "\n", "1 3 5 7 9 11 13", "2 4 6 8 10 12 14", "结尾无空行", "\n", "格式要求输入完成后一次性输出"]], "Tag": "程序设计"}
{"Answer": "```\r\n#include &lt;stdio.h&gt;\r\nint max_odd;\r\nint max_even;\r\nvoid f(int a[], int n)\r\n{\r\nint max_odd = a[0];\r\nint max_even = a[1];\r\nfor (int i = 2; i &lt; n; i += 2)\r\nif (max_odd &lt; a[i]) max_odd = a[i];\r\nfor (int i = 3; i &lt; n; i += 2)\r\nif (max_even &lt; a[i]) max_even = a[i];\r\n}\r\nint main()\r\n{\r\nint n;\r\nscanf(\"%d\", &amp;n);\r\nif (n &lt; 2) { printf(\"n cannot less than 2.\"); return; }\r\nif (n &gt; 100) { printf(\"n cannot be larger than 100.\"); return; }\r\nint a[100];\r\nfor (int i = 0; i&lt; n; i++) scanf(\"%d\", &amp;a[i]);\r\nf(a, n);\r\nprintf(\"%d %d\", max_odd, max_even);\r\nreturn;\r\n}\r\n```\r\n# 问题解决的话，请点采纳", "Konwledge_Point": "整型", "Question": ["跪求！C语言编程题答案。", ["编写函数求一维整型数组（需键盘输入数组元素的值）中最大的奇数及偶数（分别用全局变量max_odd与max_even表示），并在主函数中输出。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;给你一个C语言的实现把。 &lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-cpp\"&gt;#include &amp;lt;stdio.h&amp;gt;\n\nvoid printBinary(int x){\n    int l &amp;#61; sizeof(x) * 8;\n    int mask &amp;#61; 0x80000000;\n    for(int i &amp;#61; 0; i &amp;lt; l; i&amp;#43;&amp;#43;){\n        if(x&amp;amp;mask){\n            printf(&amp;#34;1&amp;#34;);\n        }\n        else{\n            printf(&amp;#34;0&amp;#34;);\n        }\n        x&amp;#61;x&amp;lt;&amp;lt;1;\n    }\n    printf(&amp;#34;\\n&amp;#34;);\n}\n\nvoid printTrueCode(int x){\n    if(x &amp;lt; 0){\n        x &amp;#61; ~x&amp;#43;1;\n    }\n    printf(&amp;#34;Print True Code. \\n&amp;#34;);\n    printBinary(x);\n}\n\nint main()\n{\n    int n;\n    scanf(&amp;#34;%d&amp;#34;, &amp;amp;n);\n    printf(&amp;#34;%d\\n&amp;#34;, n);\n    printTrueCode(n);\n    printf(&amp;#34;Print Complemental Code.\\n&amp;#34;);\n    printBinary(n);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;\n\n&lt;p&gt;本来数字在计算机中存储的就是补码形式。如果想要获取他的原码&amp;#xff0c;只需要当这个数字是负数的时候取反加一即可。&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"519\" src=\"https://img-ask.csdnimg.cn/upload/1615885068261.png\" width=\"993\" /&gt;&lt;/p&gt;\n\n&lt;p&gt;试一试~如果问题得到解决&amp;#xff0c;记得采纳一波。 &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["设计一个程序，要求如下", ["实现一个数据的输入（整形），转变为原码，再变成补码，按照计算机处理过程模拟，开发语言不限，要求可视化模拟细节过程。"]], "Tag": "程序设计"}
{"Answer": "按照要求，实例代码如下:\r\n\r\n```\r\n public class A {\r\n\tprivate int data;\r\n\tprivate String str;\r\n\t\r\n\tpublic A(){\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic A(int data,String str){\r\n\t\tthis.data = data;\r\n\t\tthis.str = str;\r\n\t}\r\n\t\r\n\tpublic A add(int k, String s){\r\n\t\tthis.data += k;\r\n\t\tthis.str+=s;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tA a = new A(10,\"a\");\r\n\t\ta.add(1, \"add\");\r\n\t\tSystem.out.println(\"after add ,data is:\"+a.getData()+\";str is:\"+a.getStr());\r\n\t}\r\n\t\r\n\tpublic int getData() {\r\n\t\treturn data;\r\n\t}\r\n\r\n\tpublic void setData(int data) {\r\n\t\tthis.data = data;\r\n\t}\r\n\r\n\tpublic String getStr() {\r\n\t\treturn str;\r\n\t}\r\n\r\n\tpublic void setStr(String str) {\r\n\t\tthis.str = str;\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n```", "Konwledge_Point": "整型", "Question": ["有个Java的小程序不会写", ["定义一个类A，类中有一个private的整型变量data;一个private的字符串对象str。类中有两个构造函数，一个不含参数，初始化data和str为其缺省值；另一个有两个参数，分别用来初始化data和str。类中还定义了三个方法，方法头的定义和其功能如下。", "\npublic  A  add(int k, String s)；该方法把data和str的值分别加上k和s。", "\n编写应用程序测试类A，使用类A中的add方法并将结果输出"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;if(min&amp;#43;cen&amp;lt;max||a&amp;lt;&amp;#61;0||b&amp;lt;&amp;#61;0||c&amp;lt;&amp;#61;0)&lt;br /&gt;改为&lt;br /&gt;if(min&amp;#43;cen&amp;lt;&amp;#61;max||a&amp;lt;&amp;#61;0||b&amp;lt;&amp;#61;0||c&amp;lt;&amp;#61;0)&lt;br /&gt;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&amp;#61;&lt;br /&gt;当min&amp;#43;cen和max相等时&amp;#xff0c;也是不能构成三角形的&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["三角形的判断代码不对，求解惑", ["问题遇到的现象和发生背景", "\n", "求解惑，我的代码问题出在哪里，样例通过，但不对，是15，16段越界判断的可能性小，求解惑，我知道正确的代码，请不要直接给代码，尽可能用原来代码思路，谢谢", "输入三条线段的长度（整型），根据是否能组成三角形，输出以下结果之一：锐角三角形、直角三解形、钝角三角形、不能构成三角形。", "\n", "输入格式:", "三个整数", "\n", "输出格式:", "锐角三角形输出：Acute triangle", "直角三解形输出：Right triangle", "钝角三角形输出：Obtuse triangle", "不能构成三角形输出：Not triangle", "输入样例:", "2 3 3", "输出样例:", "Acute triangle", "输入样例:", "5 4 3", "输出样例:", "Right triangle", "输入样例:", "6 4 3", "输出样例:", "Obtuse triangle", "输入样例:", "8 4 3", "输出样例:", "Not triangle", "\n", "问题相关代码，请勿粘贴截图", "\n", "\n", "#", "include", " ", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " a,b,c;\n    ", "scanf", "(", "\"%d%d%d\"", ",&a,&b,&c);\n    ", "int", " max=(a>b?a:b)>c?(a>b?a:b):c;", "//求三者最大值", "\n    ", "int", " min=(a<b?a:b)<c?(a<b?a:b):c;", "//求三者最小值", "\n    ", "int", " cen=a+b+c-max-min;", "//中间值", "\n    ", "if", "(min+cen<max||a<=", "0", "||b<=", "0", "||c<=", "0", "){\n        ", "printf", "(", "\"Not triangle\"", ");\n    }", "else", "{\n        ", "if", "(min*min+cen*cen==max*max){\n        ", "printf", "(", "\"Right triangle\"", ");\n    }", "else", " ", "if", "(min*min+cen*cen<max*max){\n        ", "printf", "(", "\"Obtuse triangle\"", ");\n    }", "else", " ", "if", "(min*min+cen*cen>max*max){\n        ", "printf", "(", "\"Acute triangle\"", ");\n    }\n    }\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;zaas&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["寻找250 对方不想和你说话，并向你扔了一串数…… 而你必须从这一串数字中找到“250”这个高大上的感人数字。", ["对方不想和你说话，并向你扔了一串数…… 而你必须从这一串数字中找到“250”这个高大上的感人数字。", "\n", "输入格式：", "输入在一行中给出不知道多少个绝对值不超过1000的整数，其中保证至少存在一个“250”。", "\n", "输出格式：", "在一行中输出第一次出现的“250”是对方扔过来的第几个数字（计数从1开始）。题目保证输出的数字在整型范围内。", "\n", "输入样例：", "888 666 123 -233 250 13 250 -222", "结尾无空行", "输出样例："]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&amp;#xff0c;第十行&amp;#xff0c;if(a[i]&amp;gt;&amp;#61;0)如果有入的整数为0&amp;#xff0c;你的结果就错了&amp;#xff0c;所以应改为if(a[i]&amp;gt;0)&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["代码不知道哪有问题运行结果是对的，但是在C语言网上提交显示的答案错误", ["从键盘输入任意20个整型数，统计其中的负数个数并求所有正数的平均值。", "保留两位小数", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; [] args)&lt;/span&gt;&lt;/span&gt;{\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; []arr&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;};\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t&amp;#61;arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;arr.length;i&amp;#43;&amp;#43;){\n            arr[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;arr[i];\n        }\n        arr[arr.length&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;t;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; arr.length; i&amp;#43;&amp;#43;) {\n            System.out.&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(arr[i]&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;);\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["这个是问题真的不懂呀", ["程序中已经定义了一个整型数组，如下所示：int［］arr=｛6，8，7，4，9，10，……｝；要求编写一个程序，将数组的第一个元素的取值放到数组的最后一个元素，即arr变为：｛8，7，4，9，10，… ..6｝。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#  问题1&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;lst1&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;78&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;]\n&lt;span class=\"hljs-attribute\"&gt;lst2&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;55&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;56&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;]\n&lt;span class=\"hljs-attribute\"&gt;lst&lt;/span&gt;&amp;#61;[]\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i in lst1:\n    &lt;span class=\"hljs-attribute\"&gt;if&lt;/span&gt; not i in lst2:\n        &lt;span class=\"hljs-attribute\"&gt;lst&lt;/span&gt;.append(i)\n&lt;span class=\"hljs-attribute\"&gt;lst&lt;/span&gt;.sort()\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(lst)\n&lt;span class=\"hljs-comment\"&gt;# 问题2&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;nums&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;151&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;54&lt;/span&gt;]\n&lt;span class=\"hljs-attribute\"&gt;nums1&lt;/span&gt;&amp;#61;[]\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i in nums:\n    &lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;nums.count(i)\n    &lt;span class=\"hljs-attribute\"&gt;nums1&lt;/span&gt;.append(a)\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(max(nums1))\n&lt;span class=\"hljs-comment\"&gt;#  问题4&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;l&lt;/span&gt;&amp;#61;[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;21&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;34&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;55&lt;/span&gt;]\n&lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;int(input())\n&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;while&lt;/span&gt; i &amp;lt;n:\n    &lt;span class=\"hljs-attribute\"&gt;x&lt;/span&gt;&amp;#61;l[i-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#43;l[i-&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]\n    &lt;span class=\"hljs-attribute\"&gt;l&lt;/span&gt;.append(x)\n    &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(x)\n&lt;span class=\"hljs-comment\"&gt;#  问题5&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;n&lt;/span&gt;&amp;#61;int(input())\n&lt;span class=\"hljs-attribute\"&gt;m&lt;/span&gt;&amp;#61;int(input())\n&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;n\n&lt;span class=\"hljs-attribute\"&gt;l1&lt;/span&gt;&amp;#61;[]\n&lt;span class=\"hljs-attribute\"&gt;while&lt;/span&gt; i &amp;lt;m:\n    &lt;span class=\"hljs-attribute\"&gt;l1&lt;/span&gt;.append(i)\n    &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#43;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(l1)\n&lt;span class=\"hljs-comment\"&gt;#  问题5&lt;/span&gt;\n&lt;span class=\"hljs-attribute\"&gt;import&lt;/span&gt; numpy as np\n&lt;span class=\"hljs-attribute\"&gt;message&lt;/span&gt;&amp;#61;{&amp;#39;姓名&amp;#39;:&amp;#39;&amp;#39;,&amp;#39;性别&amp;#39;:&amp;#39;&amp;#39;,&amp;#39;平均成绩&amp;#39;:&amp;#39;&amp;#39;}\n&lt;span class=\"hljs-attribute\"&gt;a&lt;/span&gt;&amp;#61;input(&amp;#39;请输入姓名&amp;#xff1a;&amp;#39;)\n&lt;span class=\"hljs-attribute\"&gt;b&lt;/span&gt;&amp;#61;input(&amp;#39;请输入性别&amp;#xff1a;&amp;#39;)\n&lt;span class=\"hljs-attribute\"&gt;c&lt;/span&gt;&amp;#61;input(&amp;#39;请输入成绩&amp;#xff1a;&amp;#39;)\n&lt;span class=\"hljs-attribute\"&gt;d&lt;/span&gt;&amp;#61;c.split(&amp;#39; &amp;#39;)\n&lt;span class=\"hljs-attribute\"&gt;e&lt;/span&gt;&amp;#61;[]\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(d)\n&lt;span class=\"hljs-attribute\"&gt;for&lt;/span&gt; i in d:\n    &lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;int(i)\n    &lt;span class=\"hljs-attribute\"&gt;e&lt;/span&gt;.append(i)\n&lt;span class=\"hljs-attribute\"&gt;message&lt;/span&gt;[&amp;#39;姓名&amp;#39;]&amp;#61;a\n&lt;span class=\"hljs-attribute\"&gt;message&lt;/span&gt;[&amp;#39;性别&amp;#39;]&amp;#61;b\n&lt;span class=\"hljs-attribute\"&gt;message&lt;/span&gt;[&amp;#39;平均成绩&amp;#39;]&amp;#61;np.mean(e)\n&lt;span class=\"hljs-attribute\"&gt;print&lt;/span&gt;(message)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["请问以下几问怎么写呀？", ["1、给定两个整型列表，找出不是两者共有的元素。这些元素不重复的放入新的列表，并升序排列。输出结果列表", "2、对于一个包含自然数的列表nums，计算他的度。列表的度定义为列表里任一元素出现的频率的最大值。", "3、给定两个整型列表，找出不是两者共有的元素。这些元素不重复的放入新的列表，并升序排列。输出结果列表", "4、编写函数获得第n项斐波那契数列的值。斐波那契数列前10项如下：[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]。第1项为1，第二项为1，从第三项开始，每一项等于前两项之和。", "5、输入两个数，n,m。n是奇数，产生n和m之间的奇数列。不包含m。输出奇数列表", "6、录入学生的基本信息，取得学生的姓名、性别和平均成绩（科目数量不确定,但至少有一项）"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint main()\n{\n      int a[10]&amp;#61;{12,6,18,57,61,62,89,33,78,15};\n      int i,&lt;span class=\"hljs-attribute\"&gt;sum&lt;/span&gt;&amp;#61;0;\n      &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-attribute\"&gt;i&lt;/span&gt;&amp;#61;0;i&amp;lt;10;i&amp;#43;&amp;#43;)\n          &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i%&lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;1 &amp;amp;&amp;amp; a[i]%&lt;span class=\"hljs-attribute\"&gt;2&lt;/span&gt;&amp;#61;&amp;#61;0)\n              sum &amp;#43;&amp;#61; a[i]&lt;span class=\"hljs-number\"&gt;*a&lt;/span&gt;[i];\n      printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;sum&amp;#61;%d&amp;#34;&lt;/span&gt;,sum);\n      return 0;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["C语言实验报告，答案网上也搜不到，有没有伙伴解答一下", ["（1）在已知的整型数组a[10]={12,6,18,57,61,62,89,33,78,15}中，求同时满足以下条件的数的平方和（要求用循环实现）", "条件如下：（1）数组元素下标为奇数；（2）数组元素的值为偶数。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;数组传递相当于地址传递&amp;#xff0c;两个数组其实是同一个数组&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["为啥啊，求B和C的讲解", ["设有一函数 f(int b[ ]），在某一主调用函数中有f（a），其中a是一个整型数组且已赋值，则正确的叙述是：                                                    C", "\n", "A) a数组与b数组各占用不同的存储空间。  B)  对b数组值的修改不影响a数组的值。", "\n", "C)  对b数组元素值的修改实际上就是修改a数组。 D)  实参与形参的结合是双向传递。"]], "Tag": "程序设计"}
{"Answer": "```\r\n#include&lt;stdio.h&gt;\r\n#include&lt;math.h&gt;\r\nlong int sushu(long int n);\r\nint main()\r\n{\r\nlong int i,number,count=0;\r\nscanf(\"%d\",&amp;number);\r\nfor(i=2;i&lt;=number;i++)\r\n{\r\nif(sushu(i)==1){\r\nprintf(\"%6d\",i);\r\ncount++;\r\nif(count%10==0)\r\nprintf(\"\\n\");\r\n}\r\n}\r\n}\r\nlong int sushu(long int n)\r\n{\r\nint i;\r\nfloat pf;\r\npf=sqrt((double)n);\r\nfor(i=2;i&lt;=pf;i++)\r\n{\r\nif(n%i==0||n==1)\r\nreturn 0;\r\n\r\n}\r\nif(i&gt;pf)\r\nreturn 1;\r\n}\r\n```", "Konwledge_Point": "整型", "Question": ["我写了一个，但答案不对(每行不到十个就换行了），希望帮忙改一下，谢谢", ["7-10 输出2到n之间的全部素数 (20 分)", "\n本题要求输出2到n之间的全部素数，每行输出10个。素数就是只能被1和自身整除的正整数。注意：1不是素数，2是素数。", "\n\n", "输入格式:", "\n输入在一行中给出一个长整型范围内的整数。", "\n\n", "输出格式:", "\n输出素数，每个数占6位，每行输出10个。如果最后一行输出的素数个数不到10个，也需要换行。", "\n\n", "输入样例:", "\n10", "\n输出样例:", "\n     2     3     5     7", "\n\n", "这是我写的\n\n    #include<stdio.h>\n", "\n\n", "#include", "\nlong int sushu(long int n);", "\nint main()", "\n{", "\n    long int i,number,count=0;", "\n    scanf(\"%d\",&number);", "\n    for(i=2;i<=number;i++)", "\n    {", "\n        if(sushu(i)==1)", "\n            printf(\"%6d\",i);", "\n            count++;", "\n        if(count%10==0){", "\n            printf(\"\\n\");}", "\n    }", "\n    if(count%10!=0)", "\n     printf(\"\\n\");", "\n}", "\nlong int sushu(long int n)", "\n{", "\n    int i;", "\n    float pf;", "\n    pf=sqrt(n);", "\n    for(i=2;i<=pf;i++)", "\n    {", "\n        if(n%i==0||n==1)", "\n            return 0;", "\n    }", "\n    if(i>pf)", "\n        return 1;", "\n}"]], "Tag": "程序设计"}
{"Answer": "double fun(int m){\r\n    int i;double s=0.00;\r\n    if(m%2==0){\r\n      for(i=2;i&lt;=m;i=i+2){\r\n        s=s+1.00/i;\r\n      }\r\n      return s;\r\n    }\r\n    else\r\n        return 0.000;\r\n}", "Konwledge_Point": "整型", "Question": ["大一新生，C语言程序设计题求解答", ["功能：编写函数fun其功能是：根据整型形参m，计算如下公式的值：y=1/2！+1/4！+.....+1/m！（m是偶数）。", "\n#include\"stdio.h\"", "\ndouble fun(int m)", "\n{", "\n    我不会写的部分！求解答", "\n}", "\nmain()", "\n{", "\n    int n;", "\n    printf(\"Enter n:\");", "\n    scanf(\"%d\",&n);", "\n    printf(\"\\nThe result is %lf\\n\",fun(n));", "\n}"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;],i;\n    a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        a[i] &amp;#61; a[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;a[i&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i!&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; i%&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["C语言定义数组和数组元素赋值", ["1、定义一个大小为30的整型一维数组x，并将该数组的前2个元素初始化为1，使用循环语句将Fibonacci(斐波那契)数列的前30项依次赋给x[0]、x[1]、x[2]……。(Fibonacci数列为：数列的第1项、第2项均为1，从第3项开始，后一项是前两项之和。对应数组，则：　x[0]=1，x[1]=1，x[2]=x[0]+x[1]，　x[3]=x[1]+x[2]，依此类推。", "2、输出数组x(指数组x的元素)，要求每行只输出5个元素，相邻两个数之间至少有一个空格。", "按以上要求编写程序。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你题目的解答代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;count&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; d[], &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (d[i] &amp;#61;&amp;#61; k)\n            count&amp;#43;&amp;#43;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; count;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n, k, i;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入数据的个数n&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; d[n];\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入%d个整数&amp;#xff1a;&amp;#34;&lt;/span&gt;, n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;d[i]);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入要查找的数&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;k);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d出现的次数&amp;#xff1a;%d&amp;#34;&lt;/span&gt;, k, &lt;span class=\"hljs-built_in\"&gt;count&lt;/span&gt;(d, n, k));\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/712614166146120.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请点击我的回答下方的&lt;strong&gt;【采纳该答案】&lt;/strong&gt;按钮帮忙采纳下&amp;#xff0c;谢谢!&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/101342676936187.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "整型", "Question": ["c语言编写程序实现功能：从键盘输入一个序列整数，再输入一个数据，统计这个指定数据在指 定数组中出现的次数", ["编写程序实现功能：", "从键盘输入一个序列整数，再输入一个数据，统计这个指定数据在指定数组中出现的次数。", "1.自定义一个函数：int count(int d[],int n, int k)其中数组d为指定数组；k存放指定数据。统计指定数据在指定数组中出现的次数并返回，若该数据没出现则返回0值。", "2.编写主函数，完成整型数组以及指定数据的输入，调用函数 count 完成统计，并输出统计的结果。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;&lt;span class=\"hljs-comment\"&gt;//输入第一个数组的位数。 &lt;/span&gt;\n    cin&amp;gt;&amp;gt;n;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; arr[n];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; arrb[n&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;];\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        cin&amp;gt;&amp;gt;arr[i];\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;n&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        arrb[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;arr[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#43;arr[i]&amp;#43;arr[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n        cout&amp;lt;&amp;lt;arrb[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i%&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            cout&amp;lt;&amp;lt;endl;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["如何将一个数组的数相加后给到下一个数组", ["一整型数组a的第一个元素开始，每三个元素求和并将和值存入到另一数组中（最后一组可以不足3个元素），最后输出所求的所有和值且每行输出5个值。", "如何将一个数组的数相加后给到下一个数组？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代码可以这样写&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; numpy &lt;span class=\"hljs-keyword\"&gt;as&lt;/span&gt; np\n\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;proc&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;d&lt;/span&gt;):\n    new &amp;#61; {}\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; k,v &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; d.items():\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(v).isdigit(): \n            new.update({k:v})\n        &lt;span class=\"hljs-keyword\"&gt;elif&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;all&lt;/span&gt;([x.isdigit() &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; x &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;(v).split(&lt;span class=\"hljs-string\"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)]):\n            new.update({k: &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;float&lt;/span&gt;(v))})\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; new\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;std&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;):\n    a&amp;#61;np.array(arr)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; np.std(a)\n&lt;span class=\"hljs-keyword\"&gt;def&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;std1&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;arr&lt;/span&gt;):\n    a&amp;#61;np.array(arr)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; (a-np.mean(a))/std(a)\nd&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-string\"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#39;22.8&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;21.5&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;:&lt;span class=\"hljs-number\"&gt;23&lt;/span&gt;}\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(proc(d))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(std([&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;]))\n&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(std1([&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如有帮助&amp;#xff0c;请采纳。点击我回答右上角【采纳】按钮。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["创建函数完成对字典的清理转换操作", ["各位大佬，初学python对下面这个问题不太能理解，求帮助。", "创建以下函数，完成对字典的清理。", "转换操作1.定义一个函数，删除字典中非数字的元素(如空值，非数字字符,若是数字字符转换为整型)，返回一个清理后的字典", "2.定义一个函数，用于求一组数据的标准差", "3. 定义一个函数，对于一组数据进行标化处理 公式：x*=(x-均值)/标准差", " 创建一个字典，调用以上函数，先进行清理，然后将清理后的每元素值进行标化"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;第2行这里&amp;#xff1a;scanf_s(&amp;#34;%s&amp;#34;, name, 40);   //scanf_s(&amp;#34;%s&amp;#34;, name);&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C Primer Plus第四章的第一个程序，环境是VS2022，", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "// talkback_4_1.c -- 演示与用户交互", "#include <stdio.h>", "#include <string.h>  // 提供strlen()函数的原型", "#define DENSITY 62.4  // 人体密度（单位：磅/立方英尺）", "int main(void)", "{", "    float weight, volume;", "    int size, letters;", "    char name[40];  // name是一个可容纳40个字符的数组", "\n", "printf", "(", "\"Hi！What's are your first name?\\n\"", ");\nscanf_s(", "\"%s\"", ",name);\n", "printf", "(", "\"%s,what's your weight in pounds?\\n\"", ", name);\nscanf_s(", "\"%f\"", ", &weight);\nsize = sizeof(name);\nletters = strlen(name);\nvolume = weight / DENSITY;\n", "printf", "(", "\"Well,%s,your volume is %2.2f cubic feet.\\n\"", ",\n    name, volume);\n", "printf", "(", "\"Also,your first name has %d letters,\\n\"", ",\n    letters);\n", "printf", "(", "\"and we have %d bytes to store it .\\n\"", ", size);\n\n", "return", " ", "0", ";\n", "\n", "}", "\n", "运行结果及报错内容", "\n", "严重性    代码    说明    项目    文件    行    禁止显示状态", "警告    C6064    缺少“scanf_s”的整型参数(对应于转换说明符“2”)。    Project1    E:\\code\\C_4\\Project1\\Project1\\talkback_4_1.c    12", "严重性    代码    说明    项目    文件    行    禁止显示状态", "警告    C6054    可能没有为字符串“name”添加字符串零终止符。    Project1    E:\\code\\C_4\\Project1\\Project1\\talkback_4_1.c    16    ", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;定义俩个变量初始值都等于数组第一个元素用来存数。然后遍历数组&amp;#xff0c;最大值那个只要发现有数比他大就更新一次&amp;#xff0c;次大的多个条件&amp;#xff0c;就是比他大而且还要比刚刚存的最数小然后再更新一下就行了。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["c语言不用排序求最大值和次大值", ["定义一个有10个元素的整型一维数组a，输入10个无重复数据存于该一维数组，找出其中最大数和次大数，要求不用排序实现，用一个循环实现。", "\n", "输入格式:", "输入10个整数，空格间隔，赋值给数组a，系统保证输入的数据不重复。", "\n", "输出格式:", "输出两行，第一行为最大数，第二行为次大数。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;方法一&amp;#xff1a;&lt;br /&gt;把scanf_s(&amp;#34;%s&amp;#34;,name);改成&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;scanf&lt;span class=\"hljs-constructor\"&gt;_s(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;name&lt;/span&gt;,40)&lt;/span&gt;;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;方法二&amp;#xff1a;&lt;br /&gt;把scanf_s(&amp;#34;%s&amp;#34;,name);改成 scanf(&amp;#34;%s&amp;#34;,name);&lt;br /&gt;并&lt;strong&gt;在文件的第一行&lt;/strong&gt;添加如下代码&amp;#xff1a;(一定要在第一行)&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; _CRT_SECURE_NO_WARNINGS 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["这个为什么打印不了啊？vs2022", ["#include<stdio.h>", "#define PRAISE \"YOU are an extraordinary being.\"", "int main(void)", "{", "    char name[40];", "    printf(\"What's you**r name? \");", "    scanf_s(\"%s\",name);", "    printf(\"Hello, %s. %s\\n\", name, PRAISE);", "    return 0;", "}", "\n", "运行结果及报错内容", "\n", "已启动生成…", "1>已启动生成: 项目: 测试, 配置: Debug x64", "1>Test.c", "1>D:\\VS2022\\测试\\Test.c(166,10): warning C4473: “scanf_s”: 没有为格式字符串传递足够的参数", "1>D:\\VS2022\\测试\\Test.c(166,10): message : 占位符和其参数预计 2 可变参数，但提供的却是 1 参数", "1>D:\\VS2022\\测试\\Test.c(166,10): message : 缺失的可变参数 2 为格式字符串“%s”所需", "1>D:\\VS2022\\测试\\Test.c(166,10): message : 此参数用作缓冲区大小", "1>测试.vcxproj -> D:\\VS2022\\测试\\x64\\Debug\\测试.exe", "1>已完成生成项目“测试.vcxproj”的操作。", "\n", "严重性    代码    说明    项目    文件    行    禁止显示状态", "警告    C6064    缺少“scanf_s”的整型参数(对应于转换说明符“2”)。    测试    D:\\VS2022\\测试\\Test.c    166", "警告    C4473    “scanf_s”: 没有为格式字符串传递足够的参数    测试    D:\\VS2022\\测试\\Test.c    166"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;stdio.h&amp;gt;\n#pragma warning(disable:&lt;span class=\"hljs-number\"&gt;4996&lt;/span&gt;)\n\n\nvoid &lt;span class=\"hljs-constructor\"&gt;BubbleSort(&lt;span class=\"hljs-params\"&gt;int&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;*&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;array&lt;/span&gt;, &lt;span class=\"hljs-params\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;len&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; tmp &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; len - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; len - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; - i; j&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (*(&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;&amp;#43;j) &amp;gt; *(&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;&amp;#43;j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)) {\n                tmp &amp;#61; &lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;j&lt;/span&gt;]&lt;/span&gt;;\n                *(&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt; &amp;#43; j) &amp;#61; *(&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt; &amp;#43; j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n                *(&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt; &amp;#43; j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#61; tmp;\n            }\n        }\n    }\n\n}\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;]&lt;/span&gt; &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; }, i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (; i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-constructor\"&gt;BubbleSort(&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;, 10)&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, a&lt;span class=\"hljs-literal\"&gt;[&lt;span class=\"hljs-identifier\"&gt;i&lt;/span&gt;]&lt;/span&gt;);\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/624522360656129.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言：求解决一道c指针问题", ["题目内容：", "\n", "从键盘输入", "10", "个整型数据存入一维数组", "a", "，用指针方法，将一维数组int ", "a", "[10]", " 中元素按从小到大顺序输出。\n", "\n", "输入格式:", "\n", "10个整数，用空格隔开\n", "\n", "输出格式：", "\n", "排序后的10个数，空格隔开\n", "\n", "输入样例：", "\n", "9 ", "1", " ", "7", " ", "2", " ", "4", " ", "6", " ", "5", " ", "3", " ", "0", " ", "8", "[回车]\n", "\n", "输出样例：", "\n", "   0 1 2 3 4 5 6 7 8 9[空格]"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; N 100&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[N]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;},i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,n,k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    FILE *fp;\n    fp &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;org.txt&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(fp &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;){                 &lt;span class=\"hljs-comment\"&gt;//从文件读取数据&lt;/span&gt;\n          &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;fscanf&lt;/span&gt;(fp,&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[k]) !&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n          k&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;fclose&lt;/span&gt;(fp);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;数据读入成功&amp;#xff0c;请输入待插入数:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n); &lt;span class=\"hljs-comment\"&gt;//输入待插入的数&lt;/span&gt;\n \n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (n &amp;gt; a[k- &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]) {&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//插入操作&lt;/span&gt;\n        a[k] &amp;#61; n;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; k; n &amp;lt; a[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;amp;&amp;amp; i &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) {\n            a[i] &amp;#61; a[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n        }\n        a[i] &amp;#61; n;\n    }\n \n    fp &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;org.txt&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;);  &lt;span class=\"hljs-comment\"&gt;//输出及写回文件&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(fp &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; k &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;){&lt;!-- --&gt;&lt;span class=\"hljs-comment\"&gt;//输出 插入数后的有序数列&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%4d&amp;#34;&lt;/span&gt;, a[i]);\n        &lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(fp,&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]); &lt;span class=\"hljs-comment\"&gt;//写数据到文件&lt;/span&gt;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;fclose&lt;/span&gt;(fp);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n \n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["文件输入一个数排序后输出", ["用记事本创建org.txt文件，往其中写入一组已排好序的整数数列，再由键盘输入一个整数，按排序的规律插入数列中，最后将数列仍写入文件org.txt中。例如：原整数数列为：3 6 9 11 55。将35插入后，输出数列为3 6 9 11 35 55。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;if(num[j]&amp;lt;num[j&amp;#43;1])这一行代码中将&amp;lt;改成&amp;gt;就可以了。&lt;/p&gt;\n\n&lt;p&gt;流程图...emmm...有点麻烦&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言编写函数，用冒泡法对数组中的10个整数按从小到大排序，在主函数中调用此函数", ["我忘记了怎么遍写，求帮忙，顺便求一下流程图", "\n\n", "#include <stdio.h>", "\n", "\nvoid fun(int *num)", "\n{", "\nint temp;", "\nfor(int i=0; i<10; ++i)", "\nfor(int j=0; j<10-i-1; ++j)", "\n{", "\nif(num[j]<num[j+1])", "\n{", "\ntemp=num[j];", "\nnum[j]=num[j+1];", "\nnum[j+1]=temp;", "\n}", "\n}", "\n}", "\n", "\nvoid main()", "\n{", "\nint num[10]={3,2,4,1,5,6,4,3,9,8};", "\nfun(num);", "\nfor(int i=0; i<10; ++i)", "\nprintf(\"%-2d\",num[i]);", "\n}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这里输入的一直是a[5][4]&amp;#xff0c;没有意义&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["五行四列的班级里定义一个数组，其中内容为学生身高，身高用scant输入，输入后将这20个人身高以升序排序", ["我编号程序后结果成为离谱的数字，没有达到预期效果，而且我没办法以五行四列的形式输入数字，尝试了多种办法", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;我试了一下&amp;#xff0c;这没啥问题&amp;#xff0c;能正常运行&amp;#xff1a;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/269074259056145.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;&lt;strong&gt;代码&amp;#xff1a;&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;trans&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; (*s)[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;], &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;;        &lt;span class=\"hljs-comment\"&gt;//定义转置函数&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;], *p, i, j;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (p&amp;#61;*a, &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Please enter array: \\n&amp;#34;&lt;/span&gt;); p&amp;lt;*a&amp;#43;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, p&amp;#43;&amp;#43;));    &lt;span class=\"hljs-comment\"&gt;//输入矩阵元素&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;trans&lt;/span&gt;(a, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;);                                                          &lt;span class=\"hljs-comment\"&gt;//调用转置函数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;; &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;), i&amp;#43;&amp;#43;)                                        &lt;span class=\"hljs-comment\"&gt;//输出矩阵&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;; &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, *(*(a&amp;#43;i)&amp;#43;j&amp;#43;&amp;#43;)));\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-comment\"&gt;//转置函数&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;trans&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; (*s)[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;], &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; y)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j, t;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;x; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j&amp;lt;y; i!&amp;#61;j&amp;amp;&amp;amp;i&amp;lt;j ? t&amp;#61;*(*(s&amp;#43;i)&amp;#43;j), *(*(s&amp;#43;i)&amp;#43;j)&amp;#61;*(*(s&amp;#43;j)&amp;#43;i), *(*(s&amp;#43;j)&amp;#43;i)&amp;#61;t, j&amp;#43;&amp;#43; : j&amp;#43;&amp;#43;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;如有帮助&amp;#xff0c;还请帮忙点下采纳&amp;#xff01;感谢&amp;#xff01;&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "整型", "Question": ["写一个函数将3*3的矩阵转置", ["\n", "代码是csdn上抄的，可以运行，但是运行为什么是这样的啊？我运行手法有问题吧，请教怎么运行？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你修改了正在遍历的列表&amp;#xff0c;索引过程出了问题。&lt;br /&gt;很简单就不写注释了&lt;br /&gt;还有if可以单独构成单分支条件语句&amp;#xff0c;不用加个没有用的else&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;ls&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;eval&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;())\nmax_num &amp;#61; &lt;span class=\"hljs-built_in\"&gt;max&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;ls&lt;/span&gt;)\nmin_num &amp;#61; &lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;ls&lt;/span&gt;)\nnums &amp;#61; &lt;span class=\"hljs-keyword\"&gt;ls&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;copy&lt;/span&gt;()\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; num in nums:\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; num &amp;#61;&amp;#61; max_num &lt;span class=\"hljs-built_in\"&gt;or&lt;/span&gt; num &amp;#61;&amp;#61; min_num:\n        &lt;span class=\"hljs-keyword\"&gt;ls&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;remove&lt;/span&gt;(num)\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;ls&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["读入一个整数列表，输出删除最大元素和最小元素后的列表。最大元素和最小元素可能有多个", ["问题遇到的现象和发生背景", "\n", "问题相关代码，请勿粘贴截图", "\n", "运行结果及报错内容", "\n", "我的解答思路和尝试过的方法", "\n", "这里是哪里有问题啊"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;Set.h&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;ifndef&lt;/span&gt; SET_H_INCLUDED&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; SET_H_INCLUDED&lt;/span&gt;\n \n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Set&lt;/span&gt;\n{\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;* set;&lt;span class=\"hljs-comment\"&gt;//the pointer to double array&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; number;&lt;span class=\"hljs-comment\"&gt;//the number of elements in array&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n    &lt;span class=\"hljs-built_in\"&gt;Set&lt;/span&gt;()&lt;span class=\"hljs-comment\"&gt;//constructor with no args&lt;/span&gt;\n    {\n        set&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n        number&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;Set&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; number,&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;* set)&lt;span class=\"hljs-comment\"&gt;//constructor with tow args&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(number&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;amp;&amp;amp;set!&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;number&amp;#61;number;\n            &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; tmp[number];\n            &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;set&amp;#61;&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;[number];\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;number;i&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;set[i]&amp;#61;set[i];\n            }\n            &lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;set,&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;set&amp;#43;number);\n \n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(number&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;||set&amp;#61;&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;set&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;number&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;An empty set will be created.\\n&amp;#34;&lt;/span&gt;);\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(number&amp;lt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n \n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d must be greater than or equal to zero.\\n An empty set will be created.\\n&amp;#34;&lt;/span&gt;,number);\n            &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;set&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;number&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n \n \n \n    }\n \n \n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//the print function&lt;/span&gt;\n        &lt;/span&gt;{\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;number;i&amp;#43;&amp;#43;)\n            {\n                cout&amp;lt;&amp;lt;&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;set[i]&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;  &amp;#34;&lt;/span&gt;;\n            }\n            cout&amp;lt;&amp;lt;endl;\n        }\n \n \n \n \n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;getNumber&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//the function return the number of elements in array&lt;/span&gt;\n        &lt;/span&gt;{\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;number;\n        }\n \n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;setSet&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;* s)&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;//the setSet function&lt;/span&gt;\n        &lt;/span&gt;{\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;amp;&amp;amp;s!&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;number&amp;#61;n;\n                &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;set&amp;#61;&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt;[n];\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n                {\n                    &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;set[i]&amp;#61;s[i];\n                }\n                &lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;set,&lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;set&amp;#43;n);\n \n            }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;||s&amp;#61;&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;number&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;set&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;An empty set will be created.\\n&amp;#34;&lt;/span&gt;);\n            }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d must be greater than or equal to zero.\\n An empty set will be created.\\n&amp;#34;&lt;/span&gt;,n);\n                &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;set&amp;#61;&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;-&amp;gt;number&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            }\n \n        }\n \n \n \n        &lt;span class=\"hljs-comment\"&gt;//tow friend functions overriding operator&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;friend&lt;/span&gt; Set &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt;&amp;#43;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Set a,&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Set b);\n        &lt;span class=\"hljs-keyword\"&gt;friend&lt;/span&gt; Set &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt;*(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Set a,&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Set b);\n \n};\n \nSet &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt;&amp;#43;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Set a,&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Set b)\n    {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; na&amp;#61;a.&lt;span class=\"hljs-built_in\"&gt;getNumber&lt;/span&gt;();\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; nb&amp;#61;b.&lt;span class=\"hljs-built_in\"&gt;getNumber&lt;/span&gt;();\n        &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; tmp[a.&lt;span class=\"hljs-built_in\"&gt;getNumber&lt;/span&gt;()&amp;#43;b.&lt;span class=\"hljs-built_in\"&gt;getNumber&lt;/span&gt;()&amp;#43;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;na;i&amp;#43;&amp;#43;)\n        {\n            tmp[i]&amp;#61;a.set[i];\n        }\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;nb;j&amp;#43;&amp;#43;)\n        {\n            tmp[i&amp;#43;j]&amp;#61;b.set[j];\n        }\n        &lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(tmp,tmp&amp;#43;na&amp;#43;nb);\n        &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; tmp_2[a.&lt;span class=\"hljs-built_in\"&gt;getNumber&lt;/span&gt;()&amp;#43;b.&lt;span class=\"hljs-built_in\"&gt;getNumber&lt;/span&gt;()&amp;#43;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n        i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;(na&amp;#43;nb);j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                tmp_2[i]&amp;#61;tmp[j];\n                i&amp;#43;&amp;#43;;\n            }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(j&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&amp;amp;&amp;amp;tmp[j]!&amp;#61;tmp[j&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;])\n            {\n                tmp_2[i]&amp;#61;tmp[j];\n                i&amp;#43;&amp;#43;;\n            }\n \n        }\n \n        &lt;span class=\"hljs-function\"&gt;Set &lt;span class=\"hljs-title\"&gt;result&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(i,tmp_2)&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; result;\n    }\n \nSet &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt;*(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Set a,&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; Set b)\n{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; tmp[a.&lt;span class=\"hljs-built_in\"&gt;getNumber&lt;/span&gt;()&amp;#43;b.&lt;span class=\"hljs-built_in\"&gt;getNumber&lt;/span&gt;()&amp;#43;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; cnt&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;a.&lt;span class=\"hljs-built_in\"&gt;getNumber&lt;/span&gt;();i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;b.&lt;span class=\"hljs-built_in\"&gt;getNumber&lt;/span&gt;();j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a.set[i]&amp;#61;&amp;#61;b.set[j])\n            {\n                tmp[cnt]&amp;#61;a.set[i];\n                cnt&amp;#43;&amp;#43;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n    }\n \n    &lt;span class=\"hljs-function\"&gt;Set &lt;span class=\"hljs-title\"&gt;result&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(cnt,tmp)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; result;\n \n}\n \n \n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;endif&lt;/span&gt; &lt;span class=\"hljs-comment\"&gt;// SET_H_INCLUDED&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;main.cpp&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &amp;lt;iostream&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&amp;lt;stdio.h&amp;gt;\n#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;Set.h&amp;#34;&lt;/span&gt;\nusing namespace std;\n \n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;\n{\n \n&lt;span class=\"hljs-comment\"&gt;//We test the class Set here.&lt;/span&gt;\n \n \n&lt;span class=\"hljs-comment\"&gt;//  1. Declare two double arrays a and b that contain the following values&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//     (in the given order).&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//      array a &amp;#61; -6.2, -3.1, 0.0, 1.9, 5.2, 8.3, 9.5, 10.7, 11.0, 12.5&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//      array b &amp;#61; -8.1, -3.1, 0.0, 2.5, 5.8, 8.3, 9.5, 11.0&lt;/span&gt;\n \n    double a&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;&amp;#61;{-&lt;span class=\"hljs-number\"&gt;6.2&lt;/span&gt;,-&lt;span class=\"hljs-number\"&gt;3.1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0.0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1.9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5.2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8.3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9.5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10.7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;11.0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;12.5&lt;/span&gt;};\n    double b&lt;span class=\"hljs-literal\"&gt;[]&lt;/span&gt;&amp;#61;{-&lt;span class=\"hljs-number\"&gt;8.1&lt;/span&gt;,-&lt;span class=\"hljs-number\"&gt;3.1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;0.0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2.5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5.8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8.3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9.5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;11.0&lt;/span&gt;};\n \n&lt;span class=\"hljs-comment\"&gt;//  2. Calculate the size of a and b using the sizeof function.  DO NOT assume&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//     that array a has 10 elements and DO NOT assume b has 8 elements.&lt;/span&gt;\n \n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; na&amp;#61;sizeof(a)/&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; nb&amp;#61;sizeof(b)/&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;;\n \n \n&lt;span class=\"hljs-comment\"&gt;//  3. If na is the size of a and nb the size of b then create a Set object&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//     named X using the constructor that takes NO parameters (this makes X&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//     the empty set).  Then use the setSet function for set X, passing it&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//     na and a.  This sets X to a set that contains the numbers in array a.&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//  4. Then print X.&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//  5. Create a second Set object named Y with the constructor that takes two&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//     parameters.  Pass nb abd b to the constructor.&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//  6. Then print Y.&lt;/span&gt;\n \n    Set &lt;span class=\"hljs-constructor\"&gt;X(&lt;span class=\"hljs-params\"&gt;na&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;)&lt;/span&gt;;\n    Set &lt;span class=\"hljs-constructor\"&gt;Y(&lt;span class=\"hljs-params\"&gt;nb&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;b&lt;/span&gt;)&lt;/span&gt;;\n \n \n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;X&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;print&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Y&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;print&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n \n&lt;span class=\"hljs-comment\"&gt;//  7. Create a Set object named Z using the constructor that takes NO parameters&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//     (this makes Z the empty set).&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//  8. Calculate the set union Z &amp;#61; X &amp;#43; Y and print Z.&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//  9. Calculate the set intersection Z &amp;#61; X * Y and print Z.&lt;/span&gt;\n \n \n    Set Z;\n    Z&amp;#61;X&amp;#43;Y;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Z&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;print&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n    Z&amp;#61;X*Y;\n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Z&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;print&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n \n \n&lt;span class=\"hljs-comment\"&gt;//  10. Attempt to create Set object U as follows.&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//          Set U(-na,a);&lt;/span&gt;\n \n    Set &lt;span class=\"hljs-constructor\"&gt;U(-&lt;span class=\"hljs-params\"&gt;na&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;a&lt;/span&gt;)&lt;/span&gt;;\n \n&lt;span class=\"hljs-comment\"&gt;//  11. Reset set Z as follows&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//          Z.setSet(nb,NULL);&lt;/span&gt;\n \n \n    &lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;Z&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;set&lt;span class=\"hljs-constructor\"&gt;Set(&lt;span class=\"hljs-params\"&gt;nb&lt;/span&gt;,NULL)&lt;/span&gt;;\n \n \n    &lt;span class=\"hljs-comment\"&gt;//cout &amp;lt;&amp;lt; &amp;#34;Hello world!&amp;#34; &amp;lt;&amp;lt; endl;&lt;/span&gt;\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["c++设计一个整数集合类Set", ["一、设计一个整数集合类Set", "1、数据成员：string name;//存放集合元素名称", "int num;//集合中整数值", "构造函数：Set(string s. int a)", "成员函数：get函数", "void disp(//输出集合所有元素", "二、继承类SetFloat它是Set的派生类（子类）公有继承；数据成员：float f://集合中单精度浮点数", "构造函数：", "SetFloat (string s,int a,float m)//重载父类成员函数：getF和setFvoid disp ()//重载父类函数", "3)成员函数：用成员重载的方式完成两个集合类中整数对象的相减", "4)友元函数：用友员重载的方式完成两个集合类中浮点对象的相加运算", "5)编写主函数进行测试三、编写主函数进行测试", "求完整代码，谢谢啦"]], "Tag": "程序设计"}
{"Answer": "这篇文章有讲，http://blog.csdn.net/solomon1558/article/details/40798901，讲的挺详细的", "Konwledge_Point": "整型", "Question": ["c语言中整数97按照%f的格式输出为什么是0.000000？", ["是因为在内存中存储的方式不一样吗？", "\n谁能帮我解释一下，或者给我点相关的资料"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff0c;记得点采纳哦&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#61; input(&lt;span class=\"hljs-string\"&gt;&amp;#39;请输入3个整数&amp;#xff08;以空格分开&amp;#xff09;&amp;#xff1a;&amp;#39;&lt;/span&gt;)\nlist1 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;.&lt;span class=\"hljs-built_in\"&gt;split&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; list1:\n    &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt; &amp;#43; int(i)\nprint(&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;)\n&lt;span class=\"hljs-built_in\"&gt;avg&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-built_in\"&gt;round&lt;/span&gt;((&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;/&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(list1)), &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\nprint(&lt;span class=\"hljs-built_in\"&gt;avg&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["python刚入门计算三个数的平均值和和", ["这段代码怎么编写啊，写的简单一点"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&amp;#39;成绩单数字.csv&amp;#39;,是什么格式啊&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["横杠处为代码需要补全的地方，实在是不会写了，利用Python中的numpy库对数据进行分析，这是一道成绩分析的题。希望可以有人看一下我吧，我搜了又搜，把书看了好多遍了，但还是写不对", ["import numpy as np", "\n", "读取文件'成绩单数字.csv'中的数据到数组中，数据类型为字符串", "\n", "分隔符为逗号，编码为utf-8", "\n", "score = np.loadtxt('成绩单数字.csv', str, delimiter=',',encoding='utf-8')print(score)  # 输出读取的数组", "\n", "将数组中标题、姓名和学号等非数值型字符串部分去掉", "\n", "生成只包含成绩的新数组，成绩转整型", "\n", "score_in_num = —.astype(int)print(score_in_num)   # 输出数组", "\n", "输出python课程的平均成绩、中位数、成绩标准差和罗明的平均成绩", "\n", "结果保留2位小数", "\n", "输出python课的平均成绩", "\n", "print('平均成绩{:.2f}'.format(—(score_in_num[:, 2])))", "\n", "输出python成绩中位数", "\n", "print('中位数{:.2f}'.format(—))", "\n", "输出python成绩标准差", "\n", "print('成绩标准差{:.2f}'.format(—))", "\n", "输出罗明平均成绩", "\n", "print('罗明平均成绩{:.2f}';.format(—))"]], "Tag": "程序设计"}
{"Answer": "这里建议使用格式化输出，即printf，int的格式符是“%d”，char的格式符是“%c”。你举的例子可以这样——如果输出int的话，用 printf(\"%d\",i) ;输出char的话，用printf(\"%c\",i)就可以了。\r\n另一种方法，用流输出——cout。但是需要强制类型转换，即把转换的类型打上括号加在变量前面——(char)i，或者把变量本身加上括号——char(i)", "Konwledge_Point": "整型", "Question": ["怎样把一个整数转换成字符形式输出啊？比如int i=97 ,将i以字符形式输出", ["怎样把一个整数转换成字符形式输出啊？比如int i=97 ,将i以字符形式输出"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;*&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;:\n    &lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt; &amp;#61; float(input())\n    print(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.1f&amp;#34;&lt;/span&gt;%(&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;*&lt;span class=\"hljs-keyword\"&gt;a&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["7-5 求输入数字的平方，如果平方运算后小于50则退出", ["7-5 求输入数字的平方，如果平方运算后小于50则退出。 (15 分)", "求输入数字的平方，如果平方运算后小于50则退出。", "\n", "输入格式:", "在一行中输入需要求平方的数字a。", "\n", "输出格式:", "如果数字a的平方小于50则退出，否则输出数字a的平方，并继续提示输入数字a。", "\n", "提示：使用while循环判断", "\n", "输入样例:", "在这里给出一组输入。例如：", "\n", "25", "10", "2", "结尾无空行", "输出样例:", "在这里给出相应的输出。例如：", "\n", "625.0", "100.0", "4.0", "结尾无空行"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;最简单的方式代码如下&amp;#xff1a;{如果对你有帮助&amp;#xff0c;可以给我个采纳吗&amp;#xff0c;谢谢!! 点击我这个回答右上方的【采纳】按钮}。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;m &amp;#61; input(&amp;#34;输入一组列表(以空格分隔):&amp;#34;).split(&amp;#34; &amp;#34;)\nli &amp;#61; [int(x) for x in m]\nli[0::2] &amp;#61; sorted(li[0::2],reverse&amp;#61;True)\nprint(li)&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img alt=\"\" height=\"37\" src=\"https://img-ask.csdnimg.cn/upload/1623939653399.png\" width=\"348\" /&gt;&lt;/p&gt;\n\n&lt;p&gt;先将下标为偶数的元素用li[0::2]切片取出组成新列表&amp;#xff0c;&lt;/p&gt;\n\n&lt;p&gt;倒序排序之后再重新赋值回下标为偶数元素的切片li[0::2]的各个位置中。&lt;/p&gt;\n\n&lt;p&gt; &lt;/p&gt;\n\n&lt;p&gt; \n&lt;/p&gt;&lt;ul&gt;&lt;/ul&gt;\n\n\n&lt;ul&gt;&lt;/ul&gt;\n\n&lt;ul&gt;&lt;/ul&gt;\n\n&lt;ul&gt;&lt;/ul&gt;\n\n&lt;ul&gt;&lt;/ul&gt;\n\n&lt;ul&gt;&lt;li&gt;&lt;br /&gt;\n\t \n&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "整型", "Question": ["Python 输入一组数据，对其中偶数下标的元素进行降序排列，奇数下标的元素不变，并输出排列后的列表", ["例如：", "\n\n", "输入 3 5 12 67 32 71", "\n\n", "输出【32，5，12，67，3，71】"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;int *p1[5]&amp;#xff1b;&lt;br /&gt;int (*p2)[5]&amp;#xff1b;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["指针 好难搞懂啊求解  所以（*p）[4]到底是p包含4个整形元素的一维数组还是 包含四个整型指针的一维数组", ["若定义 int a[3][4]，（", "p）[4]=a；", "则", "（*p+1）代表的数组元素是"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;改为&lt;br /&gt;scanf_s(&amp;#34;%lf %c %lf&amp;#34;,&amp;amp;a,&amp;amp;op,1,&amp;amp;b);&lt;br /&gt;需要增加一个参数1&amp;#xff0c;表明&amp;amp;op指向的空间大小&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["这个scanf是啥问题我晕了", []], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff0c;如有帮助&amp;#xff0c;请采纳一下&amp;#xff0c;谢谢。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;stdlib.h&amp;gt;\n\nint main()\n{\n\tint arr[10][10] &amp;#61; {0};\n\tfor (int t &amp;#61; 0; t &amp;lt;24; )\n\t{\n\t\tint i &amp;#61; rand() %10; //生成随机的i\n\t\tint j &amp;#61; rand() %10; //生成随机的j\n\t\tint d &amp;#61; 1&amp;#43; rand() % 1000; //生成随机数\n\t\tif(arr[i][j] !&amp;#61; 0) //避免出现重复\n\t\t\tcontinue;\n\t\telse\n\t\t{\n\t\t\tarr[i][j] &amp;#61; d;\n\t\t\tt&amp;#43;&amp;#43;;\n\t\t}\n\t}\n\n\t//打印\n\tfor (int i &amp;#61; 0; i &amp;lt; 10; i&amp;#43;&amp;#43;)\n\t{\n\t\tfor(int j &amp;#61; 0; j &amp;lt; 10; j&amp;#43;&amp;#43;)\n\t\t\tprintf(&amp;#34;%d &amp;#34;,arr[i][j]);\n\t\tprintf(&amp;#34;\\n&amp;#34;);\n\t}\n\tgetchar();\n\tgetchar();\n\treturn 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["实现随机随机生成数字的二维矩阵", ["C实现在一个指定的10*10的矩阵arr中要生成一个含有24个非零元素的稀疏矩阵"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;025&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;25&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d,%d\\n&amp;#34;&lt;/span&gt;,i,j);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["设有整数变量i.其值为025，整数变量j，其值为25，执行语句print（“%d，%d/n”，i.j)", ["设有整数变量i.其值为025，整数变量j，其值为25，执行语句print（“%d，%d/n”，i.j)"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;字符就是char型&amp;#xff0c;char型本身也是整型&lt;br /&gt;字符这个东西是用来“看“的&amp;#xff0c;内存中实际是ASCII码&amp;#xff0c;是个整数。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["为什么定义为int类型输入char类型也不报错", ["这是在网上看到的一段代码", "就很疑惑", "为什么定义ch为整型", "但是输入字符时", "也不影响输出结果诶"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n public &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; main(&lt;span class=\"hljs-built_in\"&gt;String&lt;/span&gt;[] args) {\n        &lt;span class=\"hljs-comment\"&gt;//定义一个整型数组&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[] &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;85&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;};\n        &lt;span class=\"hljs-comment\"&gt;//对数组排序从而确定最大值&amp;#xff0c;使用冒泡排序&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt;&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;.length&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; ; i&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt;&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;.length&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;-i; j&amp;#43;&amp;#43;) {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;[j]&amp;gt;&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]){\n                    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; temp&amp;#61;&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;[j];\n                    &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;[j]&amp;#61;&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                    &lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#61;temp;\n                }\n            }\n        }\n        System.out.println(&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;[&lt;span class=\"hljs-built_in\"&gt;num&lt;/span&gt;.length&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你这书是盗版的吧&amp;#xff0c;整型写成整形&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["Javaopp找最大值的方法，要求传入一个有值的数组，输出这个数组的最大值", []], "Tag": "程序设计"}
{"Answer": "https://blog.csdn.net/kalilili/article/details/47066423", "Konwledge_Point": "整型", "Question": ["C语言求问这个二进制转换的问题怎么计算，要用到图的知识", ["Problem Description", "\nsoda has a undirected graph with n vertices and m edges. He wants to make the graph become a bipartite graph by deleting only one vertex. You need to tell him which vertex can be deleted.", "\n\n", "Input", "\nThere are multiple test cases. The first line of input contains an integer T, indicating the number of test cases. For each test case:", "\n\n", "The first contains two integer n and m (1≤n,m≤105), the number of vertices and the number of edges.", "\nNext m lines contain two integers each, ui and vi (1≤ui,vi≤n,ui≠vi) , indicating there is an edge between vertices ui and vi.", "\n\n", "Output", "\nFor each test case, output binary string of length n. The i-th character is '1' if soda can delete i-th vertex to make the graph become a bipartite graph, otherwise the i-th character is '0'.", "\n\n", "Sample Input", "\n2", "\n5 4", "\n1 4", "\n2 4", "\n3 5", "\n4 5", "\n5 5", "\n1 2", "\n1 3", "\n2 3", "\n2 4", "\n3 5", "\n\n", "Sample Output", "\n11111", "\n11100"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;code class=\"language-javascript\"&gt;int *p &amp;#61; 100;&lt;/code&gt;是定义一个指向整型的指针并赋初始值100&amp;#xff0c;所以指针值是100&amp;#xff0c;一般不建议这么做&amp;#xff0c;除非你知道这个地址值是有效的。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; *p &amp;#61; &amp;amp;a&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;span class=\"hljs-symbol\"&gt;*p&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这里的&lt;code class=\"language-javascript\"&gt;*p&amp;#61;100;&lt;/code&gt;是向p指针所指的内存赋值100&amp;#xff0c;即a&amp;#61;100&amp;#xff0c;p的值仍然是a的地址没有变&amp;#xff0c;和前面赋初值不一样的。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["整数到底可不可以直接赋值给一个指针变量？", ["今天看书的时候发现有一个矛盾的地方，在指针变量这一章前面刚说完不要讲一个整数赋值给指针变量，不合法，后面举例子的时候立马又说可以了，到底可不可以，还是说如果这个指针变量已经有指向的变量了就可以直接将整数赋给它？", "\n"]], "Tag": "程序设计"}
{"Answer": "```\r\npublic class Rectangle {\r\n    private Integer length;\r\n\r\n    private Integer width;\r\n\r\n    public void setDemo(Integer length, Integer width){\r\n        if(length &lt; 0){\r\n            throw new RuntimeException(\"length 不能小于0\");\r\n        }\r\n\r\n        if(width &lt; 0){\r\n            throw new RuntimeException(\"width 不能小于0\");\r\n        }\r\n\r\n        this.length = length;\r\n        this.width = width;\r\n    }\r\n\r\n    public Integer arer(){\r\n        return length * width;\r\n    }\r\n}\r\npublic class Test {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(\"请输入length：\");\r\n        int length = scanner.nextInt();\r\n        System.out.println(\"请输入width：\");\r\n        int width = scanner.nextInt();\r\n        Rectangle rectangle = new Rectangle();\r\n        rectangle.setDemo(length,width);\r\n        System.out.println(rectangle.arer());\r\n    }\r\n}\r\n\r\n```", "Konwledge_Point": "整型", "Question": ["编程创建一个Rectangle类，在类中:定义两个私有变量length和width表示长、宽；定义一个方法setDemo(...)对长和宽进行初始化，当长或者宽<0时，......", ["编程创建一个Rectangle类，在类中:", "\n（1）定义两个私有变量length和width表示长、宽；", "\n（2）定义一个方法setDemo(...)对长和宽进行初始化，当长或者宽<0时，给出错误提示；", "\n（3）定义一个方法area()求面积；", "\n创建主类Test，要求在主类主方法中，创建Rectangle类的对象，求给定尺寸的长方形的面积（假设长、宽分别从键盘输入）"]], "Tag": "程序设计"}
{"Answer": "merge使用并进行连接前，要注意对连接的关键字做字符化或者整型化，保证连接的关键字值和类型一致。", "Konwledge_Point": "整型", "Question": ["python用merge数据合并空值怎么办？", ["请问怎么解决啊", "就算我用'outer'保留所有数据可是还是不是想要的合并结果，就是他会变成这样？", "\n\n", "怎么解决啊？"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m, n;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j, k, min &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, found &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;m, &amp;amp;n);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[m][n];\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a[i][j]);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[i][j] &amp;gt; a[i][min])\n                min &amp;#61; j;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; k &amp;lt; m; k&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a[i][min] &amp;gt; a[k][min])\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (k &amp;#61;&amp;#61; m) {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Array[%d][%d]&amp;#61;%d&amp;#34;&lt;/span&gt;, i, min, a[i][min]);\n            found &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!found)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;None&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["c语言鞍点的求法，只有一列的特殊情况", ["#include<stdio.h>", "int main(void)", "{", "    /", "Begin", "/", "int m,n;", "int i,j,k,flag,pos,max;", "scanf(\"%d %d\",&m,&n);", "int a[m][n];", "for(i=0;i<m;i++){", "    for(j=0;j<n;j++){", "        scanf(\"%d\",&a[i][j]);", "    }", "}", "for(i=0;i<m;i++){", "    max=a[i][0];", "    pos=0;", "    for(j=0;j<n;j++){", "        if(a[i][j]>max){", "            max=a[i][j];", "            pos=j;", "        }", "    }flag=1;", "    for(k=0;k<n;k++){", "        if(a[k][pos]<max){", "            flag=0;", "        }", "        if(flag==1){", "            printf(\"Array[%d][%d]=%d\",k,pos,max);", "        }break;", "        if(flag==0){", "            printf(\"None\");", "        }", "    }", "\n", "}", "\n", "/", "*****", "****End**", "*****", "***", "/\nreturn 0;\n", "\n", "}", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;print内前半部分都要加双引号,不是只有%f左右加,&lt;code class=\"language-javascript\"&gt;printf(&amp;#34;Celsius&amp;#61;%lf&amp;#34;,C);&lt;/code&gt;这种写法&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["从键盘输入一个华氏温度F，计算对应的摄氏温度C。计算公式：C=5×(F-32)/9，C和F均定义为double型变量。", ["题目内容：", "\n", "从键盘输入一个华氏温度F，计算对应的摄氏温度C。计算公式：C=5×(F-32)/9，C和F均定义为double型变量。", "\n", "输入格式:", "\n", "scanf中的格式控制串为\"%lf\"", "\n", "说明：scanf之前不能用printf提示输入内容", "\n", "输出格式：", "\n", "参照输出样例给出printf语句，对应于C变量的格式控制串为\"%lf\"", "\n", "输入样例：", "\n", "150.7", "\n", "输出样例：", "\n", "Celsius=65.944444", "\n", "时间限制：500ms内存限制：32000kb"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/767552798946170.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;两个数组拿到外面来,程序中重复定义的注释掉.&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/592833798946138.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;然后&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/180324798946161.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["用C语言计算矩阵的n次幂", ["问题遇到的现象和发生背景", "\n", " 我是一个编程初学者。问题是：输入一个M行M列的矩阵A，并输入整数N，求出矩阵B，即A的N次幂", "在我编写程序时并没有报错，但生成解决方案时显示无法解析的符号和命令", "\n", "问题相关代码，请勿粘贴截图", "\n", "#include<stdio.h>", "int x, y, i, j, p, q;", "int N, M, T, n;", "int scan_init_m();", "void print_targ_m();", "int make_targ_m();", "\n", "int main(void) {", "    scanf_s(\"%d\\n%d\\b%d\\n\", &T,&M,&N);", "    scan_init_m();", "    make_targ_m();", "    print_targ_m();", "    return 0;", "}", "\n", "int scan_init_m() {                                        // 输入函数，输入initial_matrix  (i,j)", "    int init_m[10][10] = {};", "    for (i = 0; i < M; i++) {", "        for (j = 0; j < M; j++) {", "            scanf_s(\"\\b%d\", &init_m[i][j]);", "        }", "        printf(\"\\n\");", "    }", "    return (init_m[M][M]);", "}", "\n", "void print_targ_m() {                                    // 打印函数，打印target_matrix  (x,y)", "    extern int targ_m[10][10];", "    for (x = 0; x < M; x++) {", "        for (y = 0; y < M; y++) {", "            printf(\"\\b%d\", targ_m[x][y]);", "        }", "        printf(\"\\n\");", "    }", "}", "\n", "int make_targ_m() {                    // 制作target_matrix", "    int curr_m[10][10] = {};", "    int targ_m[10][10] = {};", "    extern int init_m[10][10];", "\n", "for ", "(", "n", " = 0; n < N; n++)", " {                                            ", "//", " 不包括N = 0 !!!\n    ", "if", " ", "(", "n", " == 0)", " {\n        for ", "(", "x", " = 0, ", "i", " = 0; p < M; x++, i++)", " {                \n            for ", "(", "y", " = 0, ", "j", " = 0; y < M; y++, j++)", " {\n                targ_m[x][y] = init_m[i][j];\n            }\n        }\n    }\n    else {                                                            ", "//", " 制作current_matrix  ", "(p,q)", "\n        for ", "(", "p", " = 0, ", "x", " = 0; p < M; p++, x++)", " {                        ", "//", " targ * init\n            for ", "(", "q", " = 0, ", "j", " = 0; q < M; q++, j++)", " {\n                for ", "(", "y", " = 0, ", "i", " = 0; y < M; y++, j++)", " {                ", "//", " 计算current_matrix元素\n                    curr_m[p][q] += targ_m[x][y] * init_m[i][j];\n                }\n            }\n        }\n    }\n}\nreturn targ_m[M][M];\n", "\n", "}", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我尝试过改变函数的定义但还是不对", "\n", "我想要达到的结果", "\n", "希望能够解决问题，谢谢"]], "Tag": "程序设计"}
{"Answer": "第二个题目\r\nx=5\r\nx+=x\r\nx=10\r\nx++\r\nx=11\r\n++x\r\nx=12\r\n+2\r\n等于14\r\n\r\n最后一个题目\r\nx=023（八进制）=2x8+3=19\r\n--x\r\n18", "Konwledge_Point": "整型", "Question": ["c语言基础题，麻烦解答一下谢谢", []], "Tag": "程序设计"}
{"Answer": "long整型变量赋值给一个short整型 会报错，类型转换出错，long转short大范围转小范围错误", "Konwledge_Point": "整型", "Question": ["c语言数据变量赋值类型", ["假定有一个程序，它把一个long整型变量赋值给一个short整型变量。当你编译程序的时候会发生什么情况？当你运行程序时会发生什么情况？你认为其他编译器的结果是否也是如此？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;提供两个思路叭&amp;#xff0c;个人观念。&lt;/p&gt;\n\n&lt;p&gt;1.用int转成string型&amp;#xff0c;再一个一个赋值再强转&amp;#xff1b;&lt;/p&gt;\n\n&lt;p&gt;2.循环通过比大小来从高位到低位储存。&lt;/p&gt;\n\n&lt;p&gt;可以试一试&amp;#xff0c;不过都有点麻烦。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["如何把int型数字里每个数字存入数组里", ["如何把int型数字里每个数字存入数组里", "\n\n", "用C语言"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;改成scanf_s(&amp;#34;%c&amp;#34;, &amp;amp;ch,2); &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["scanf_s函数遇到char型问题", ["\n```c\n", "#", "include", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n  \n    ", "char", " ch;\n    ", "scanf_s", "(", "\"%c\"", ", &ch);  ", "// 编译的时候老是提示警告,有什么办法可以解决这类问题呢", "\n    ", "fflush", "(stdin);\n    ", "printf", "(", "\"ch = %c\\n\"", ", ch);\n   \n    ", "return", " ", "0", ";\n}\n\n", "\n", "\n警告    C6064    缺少“scanf_s”的整型参数(对应于转换说明符“", "2", "”)。\n警告    C4473    “scanf_s”: 没有为格式字符串传递足够的参数\n\n![img](https:", "//img", "-mid.csdnimg.cn", "/release/", "static", "/image/mi", "d", "/ask/", "265906800256194", ".jpg ", "\"#left\"", ")\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;麻烦采纳一下&amp;#xff0c;你的采纳&amp;#xff0c;是对我最好的鼓励&amp;#xff0c;谢谢&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-bash\"&gt;\n&lt;span class=\"hljs-comment\"&gt;/**\n* &amp;#xff1a;1、对value 随机赋值&amp;#xff1b;\n* 2、让数组a[n]的值等于value“位n”的值&amp;#xff0c;0&amp;lt;&amp;#61;n&amp;lt;&amp;#61;31。\n* &amp;#64;author Administrator\n*/&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Foo&lt;/span&gt; {\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;main&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;String&lt;/span&gt;[] args) {\n&lt;span class=\"hljs-comment\"&gt;// 产生随机数&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;random&lt;/span&gt; &amp;#61; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;) (Math.&lt;span class=\"hljs-property\"&gt;random&lt;/span&gt;() * Integer.&lt;span class=\"hljs-property\"&gt;MAX_VALUE&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n&lt;span class=\"hljs-comment\"&gt;// 转换成二进制字符串&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;String&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt; &amp;#61; Integer.&lt;span class=\"hljs-property\"&gt;toBinaryString&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;random&lt;/span&gt;);\n&lt;span class=\"hljs-comment\"&gt;// 转换成二进制时最前面的零被省略, 补上省略的0&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;length&lt;/span&gt;() &amp;lt; &lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;) {\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;32&lt;/span&gt; - &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;length&lt;/span&gt;(); i&amp;#43;&amp;#43;) {\n&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;;\n}\n}\n&lt;span class=\"hljs-comment\"&gt;// 给数组赋值&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] a &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new &lt;/span&gt;&lt;span class=\"hljs-class title_\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;];\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;length&lt;/span&gt;(); i&amp;#43;&amp;#43;) {\na[i] &amp;#61; Integer.&lt;span class=\"hljs-property\"&gt;parseInt&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;String&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;valueOf&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;str&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;charAt&lt;/span&gt;(i)));\nSystem.&lt;span class=\"hljs-property\"&gt;out&lt;/span&gt;.&lt;span class=\"hljs-property\"&gt;println&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a[&amp;#34;&lt;/span&gt; &amp;#43; i &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;]&amp;#61;&amp;#34;&lt;/span&gt; &amp;#43; a[i]);\n}\n}\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["现有一个32位的整数变量value和一个有32个元素的数组a[32]", ["现有一个32位的整数变量value和一个有32个元素的数组a[32]", "1.对value进行随机赋值", "2.让数组a[n]的值等于value“位n”的值"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-xml\"&gt;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; fun(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a[M][M])\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;sum&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;M;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;M;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;#61;&amp;#61;j)\n                &lt;span class=\"hljs-keyword\"&gt;sum&lt;/span&gt; &amp;#43;&amp;#61; a[i][j];  &lt;span class=\"hljs-comment\"&gt;//主对角线&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (i&amp;#43;j &amp;#61;&amp;#61;M&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;sum&lt;/span&gt; &amp;#43;&amp;#61; a[i][j];  &lt;span class=\"hljs-comment\"&gt;//副对角线&lt;/span&gt;\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;sum&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["二维数组：求方阵主、副对角线上元素之和", ["二维数组：求方阵主、副对角线上元素之和", "二维数组：求5行5列矩阵的主、副对角线上元素之和。 注意：两条对角线相交的元素只加一次。", "\n", "函数接口定义：", "int fun(int a[M][M]) ;", "函数返回主副对角线元素的累加和。", "\n", "裁判测试程序样例：", "\n", "#include <stdio.h>", "#define M 5", "int fun(int a[M][M]) ;", "\n", "int main()", "{", "  int a[M][M],i,j;", "  int y;", "  for(i=0;i<M;i++)", "     for(j=0; j<M; j++)", "            scanf(\"%d\", &a[i][j])  ;", "  y=fun(a);", "  printf(\"sum=%d\", y) ;", "  return 0;", "  }", "\n", "/* 请在这里填写答案 */", "输入样例：", "1 3 5 7 19", "2 4 6 1 10", "1 2 3 4 15", "2 5 6 2 18", "3 3 8 8 12", "输出样例：", "sum=50"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c1[&lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    &lt;span class=\"hljs-built_in\"&gt;gets&lt;/span&gt;(c1);\n    i&amp;#61;j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(c1[i]!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;){\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(c1[i]&amp;gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; c1[i]&amp;lt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;)\n            {a[j] &amp;#61; a[j] * &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt; &amp;#43; (c1[i] - &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);}\n            \n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            {sum &amp;#43;&amp;#61; a[j];\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c1[i - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;gt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; c1[i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;] &amp;lt;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;)\n                j&amp;#43;&amp;#43;;}\n        &lt;span class=\"hljs-comment\"&gt;//printf(&amp;#34;%c&amp;#34;,a[i]);&lt;/span&gt;\n        i&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,sum);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=\"https://ask.csdn.net/questions/7714102?answer&amp;#61;7714102&amp;amp;spm&amp;#61;1005.2026.3001.5703\" id=\"textarea_1652259434376_1652259511493_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;div class=\"md_link_card\"&gt;\n      \n        &lt;span class=\"md_link_title\"&gt;对字符串中的整数进行求和&amp;#xff0c;并且显示求和结果。-编程语言-CSDN问答&lt;/span&gt;\n        \n      &lt;span class=\"md_link_desc\" style=\"\"&gt;CSDN问答为您找到对字符串中的整数进行求和&amp;#xff0c;并且显示求和结果。相关问题答案&amp;#xff0c;如果想了解更多关于对字符串中的整数进行求和&amp;#xff0c;并且显示求和结果。 c语言 技术问题等相关问答&amp;#xff0c;请访问CSDN问答。&lt;/span&gt;\n      &lt;span class=\"md_flex_card\"&gt;\n      &lt;img class=\"md_link_img\" id=\"md_link_img\" src=\"https://g.csdnimg.cn/static/logo/favicon32.ico\" /&gt;\n        &lt;span class=\"flex-1\"&gt;\n          &lt;span class=\"md_link_url\"&gt;https://ask.csdn.net/questions/7714102?answer&amp;#61;7714102&amp;amp;spm&amp;#61;1005.2026.3001.5703&lt;/span&gt;\n        &lt;/span&gt;\n      &lt;/span&gt;&lt;/div&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言 输入一串含有正整数的字符串，对字符串中的整数进行求和，并且显示求和结果。", ["被引用的函数代码如下：", "int f4(int sum)", "{", "    char c[80];", "    int a[80]={0},i,j;", "    printf(\"输入一串字符（少于80个）:\");", "gets(c);", "i=0;j=0;sum=0;", "while(c[i]!='\\0')", "{", "if(c[i]>='0'&&c[i]<='9')", "    a[0]=a[0]*10+(c[i]-'0');", "else if(c[i-1]>='0'&&c[i-1]<='9')", "{sum=sum+a[j];j++;}", "\n", "i", "++", ";", "\n", "\n", "}", "printf(\"sum=%d\",sum);", "return 0;", "}", "要求如下：", "\n", "\n", "运行结果如图：", "应该的结果是sum=23;但是。", "求解答！"]], "Tag": "程序设计"}
{"Answer": "把\"jobIds \" 的引号去掉", "Konwledge_Point": "整型", "Question": ["ajax传递数组参数后台接受，注意不是传json，是整数数组", ["getIdSelections()函数会返回一个map遍历后的封装数组，其中用于传递数组的重要参数 traditional: true,也已经给了。但是后台接受的时候会报空指针", "\n\n", " var jobIds =[];\n    jobIds = getIdSelections();\n    $.ajax({\n        url:\"${pageContext.request.contextPath}/ht/quartz/pause.html\",\n        data:{\"jobIds\":jobIds},\n        dataType:'json',\n        type:'post',\n        traditional: true,\n        success:function(data){\n            alert(\"成功\");\n        }\n    })\n", "\n\n", "/**\n     * 暂停定时任务\n     */\n    @ResponseBody()\n    @RequestMapping(\"/pause.html\")\n    public Object pause(Long[] jobIds){\n        System.out.println(\">>>>>>>>>>>>>>>>>>\"+jobIds.toString());\n        scheduleJobService.pause(jobIds);\n        return JsonResultUtil.getSuccessJson(\"成功！\");\n    } \n", "\n\n", "应该怎么接收，大神帮忙指点一下"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;先提取素数&amp;#xff0c;然后再排序&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;//从键盘中输入10个正整数到一个一维数组&amp;#xff0c;将数组中的素数按从小到大的顺序排列后输出&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;isprime&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;lt;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n      &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;i*i&amp;lt;&amp;#61;n;i&amp;#43;&amp;#43;)\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n%i&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,n&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,t;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;isprime&lt;/span&gt;(a[i]))\n           a[n&amp;#43;&amp;#43;] &amp;#61; a[i];\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;Not Found&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n-i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[j] &amp;gt; a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n            {\n                t &amp;#61; a[j];\n                a[j] &amp;#61; a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                a[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; t;\n            }\n        }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["C或者C++，从键盘中输入10个正整数到一个一维数组，将数组中的素数按从小到大的顺序排列后输出", ["C或者C++，从键盘中输入10个正整数到一个一维数组，将数组中的素数按从小到大的顺序排列后输出"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;  &lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n  &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n &lt;/span&gt;{\n     &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,x;\n   &lt;span class=\"hljs-keyword\"&gt;do&lt;/span&gt;\n  {\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;x);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,x);\n    sum&amp;#61;sum&amp;#43;x;\n  }\n   &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;getchar&lt;/span&gt;()!&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n   &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;sum&amp;#61;%d&amp;#34;&lt;/span&gt;,sum);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n   }\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["键盘输入一个用逗号隔开的字符串，从中分离各整数，输出并计算这些整数的和", ["例如：输入：1，2，3，4，5", "输出：1 2 3 4 5", "sum=15", "用上for语句"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;&lt;a href=\"http://golang.org/pkg/sort/#Ints\"&gt;sort.Ints&lt;/a&gt; is a convenient function to sort a couple of ints. Generally you need to implement the &lt;a href=\"http://golang.org/pkg/sort/#Interface\"&gt;sort.Interface&lt;/a&gt; interface if you want to sort something and &lt;a href=\"http://golang.org/pkg/sort/#Reverse\"&gt;sort.Reverse&lt;/a&gt; just returns a different implementation of that interface that redefines the &lt;code&gt;Less&lt;/code&gt; method.&lt;/p&gt;\n\n&lt;p&gt;Luckily the sort package contains a predefined type called &lt;a href=\"http://golang.org/pkg/sort/#IntSlice\"&gt;IntSlice&lt;/a&gt; that implements sort.Interface:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;keys := []int{3, 2, 8, 1}\nsort.Sort(sort.Reverse(sort.IntSlice(keys)))\nfmt.Println(keys)\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["如何对整数Go的切片进行反向排序？", ["\n\n", "I am trying to reverse-sort a slice of integers in Go.", "\n\n", "  example := []int{1,25,3,5,4}\n  sort.Ints(example) // this will give me a slice sorted from 1 to the highest number\n", "\n\n", "How do I sort it so that it goes from highest to lowest? so [25 5 4 3 1]", "\n\n", "I have tried this ", "\n\n", "sort.Sort(sort.Reverse(sort.Ints(keys)))\n", "\n\n", "Source: ", "http://golang.org/pkg/sort/#Reverse", "\n\n", "However, I am getting the error below", "\n\n", "# command-line-arguments\n./Roman_Numerals.go:31: sort.Ints(keys) used as value\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;改成&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a ,c;\nscanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a);\nc &amp;#61; a%4;\n&lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,c);\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["C语言取余运算式，为什么输入什么都是零", ["int main()", "{", "   int a ,c;", "    c = a%4;", "    scanf(\"%d\", &a);", "   printf(\"%d\",c);", "    return 0;", "}", "    为什么输入什么数字进去的都是显示零。我刚学C语言不明白"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;解决方案&amp;#xff1a;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;删除delete a[];这一行代码。&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;原因&amp;#xff1a;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;delete这一行已经释放掉了当前a中的内存。再继续进行*&amp;#xff08;a&amp;#43;j&amp;#xff09;的读入&amp;#xff0c;是在向一个未分配空间的地址进行读入&amp;#xff0c;会造成内存访问异常。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["用cin给动态整数数组赋值出现异常如何解决", []], "Tag": "程序设计"}
{"Answer": "int main()\r\n{\r\n    ifstream infile;\r\n    ///这里好像要有用绝对路径\r\n    infile.open(\"/home/xxx/xxx/xxx/data.json\", ios::binary);\r\n    if (!infile.is_open())\r\n    {\r\n        cout &lt;&lt; \"file open failure\" &lt;&lt; endl;\r\n        return 0;\r\n    }\r\n    std::string data;\r\n    char str[1000] = {0};\r\n    while(!infile.eof())\r\n    {\r\n        infile&gt;&gt;str;\r\n        data += str;\r\n        memset(str, 0, sizeof(str));\r\n    }\r\n    infile.close();\r\n    Json::Reader reader;\r\n    Json::Value root;\r\n    if (!reader.parse(data.c_str(), root))\r\n    {\r\n        return -1;\r\n    }\r\n    cout &lt;&lt; root &lt;&lt; endl;\r\n    return 0;\r\n}\r\n\r\n\r\n\r\n\r\n------json数据，json数据最后一个元素后不能跟逗号(,)--------\r\n[\r\n{\r\n    \"comment\": 0,\r\n    \"from\": \"北京-北京市-海淀区\",\r\n    \"comments\": [],\r\n    \"to\": \"河北省-承德市-隆化县\",\r\n    \"score\": \"0\",\r\n    \"corp\": \"兴铁物流\",\r\n    \"time\": \"1398175318.988036\"\r\n},\r\n{\r\n    \"comment\": 0,\r\n    \"from\": \"北京-北京市-海淀区\",\r\n    \"comments\": [],\r\n    \"to\": \"河北省-承德市-隆化县\",\r\n    \"score\": \"0\",\r\n    \"corp\": \"兴铁物流\",\r\n    \"time\": \"1398175318.988036\"\r\n}\r\n]", "Konwledge_Point": "整型", "Question": ["c++用jsoncpp读取json文件并，有数千个数据，求把这些数据转成数组？", ["我有一个json文件，现在想把里面的数据读取出来，并转化为数组或是线性表。", "\n文件是这样的，有数千个类似的这样的。我在网上找了很多的教程，但是里面的例子一般都是直接", "\nint comment = root[\"comment\"].asInt();", "\n但是我这里有数千个，而且后面要统计from相同的数量等等，所以想用数组或者是线性表来存储，方便后面。", "\n因为是第一次接触json，完全菜鸟，所以很多概念都不了解，希望各位大神能够给一些简单一点的回答，非常感谢", "\n\n", "[", "\n  {", "\n    \"comment\": 0,", "\n    \"from\": \"北京-北京市-海淀区\",", "\n    \"comments\": [],", "\n    \"to\": \"河北省-承德市-隆化县\",", "\n    \"score\": \"0\",", "\n    \"corp\": \"兴铁物流\",", "\n    \"time\": \"1398175318.988036\"", "\n  },", "\n    void readFileJson()", "\n{", "\n\n", "根据网上的教程就写了一点点，我把添加到了源文件那里，可是好像打不开，运行的话就直接弹出Error poening file\nvoid readFileJson()\n", "\n\n", "{", "\n\n", "Json::Reader reader;//json解析\nJson::Value root;//表示一个json格式的对象 \nifstream in(\"rating(1).json\", ios::binary);\n\nif (!in.is_open())\n{\n    cout << \"Error opening file\\n\";\n    return;\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n       &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;],min&amp;#61;&lt;span class=\"hljs-number\"&gt;100000&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,index&amp;#61;&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;){\n      &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(min&amp;gt;a[i]){\n          min&amp;#61;a[i];\n          index &amp;#61; i;    \n      }\n      \n    } \n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;最小数&amp;#xff1a;%d,下标是:%d&amp;#34;&lt;/span&gt;,min,index);\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["输入10个数放在一维数组中，输出最小的数及其下标", ["输入10个数放在一维数组中，输出最小的数及其下标"]], "Tag": "程序设计"}
{"Answer": "else与if语句应是同层级的；scanf(“%f%f%f”，&amp;a，&amp;b，&amp;c)", "Konwledge_Point": "整型", "Question": ["大一新生刷题遇到的问题，为什么报错？？", ["#include", "\nint main()", "\n{", "\n    int M,a,b,c;", "\n    int i=1;", "\n    scanf(\"%d\",&M);", "\n    while(i<=M)", "\n    {", "\n        i=i+1;", "\n        scanf(\"%f% f% %f\",&a,&b,&c);", "\n\n", "    if(a+b>c&&a+c>b&&c+b>a)\n    {\n            printf(\"YES\\n\");\n    }\n        else\n    {\n            printf(\"NO\\n\");\n    }\n}\nreturn 0;\n", "\n\n", "}", "\n\n", "为什么会疯狂报错啊", "\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{ \n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf%d&amp;#34;&lt;/span&gt;,&amp;amp;a,&amp;amp;b);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf\\n&amp;#34;&lt;/span&gt;,a*b);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["计算机计算一个小数和一个整数相乘，怎么写", ["计算机计算一个小数和一个整数相乘，怎么写，计算机初学者，搞不清楚，两个同时出现，怎么写都是错误的"]], "Tag": "程序设计"}
{"Answer": "你这个函数的作用是将value数组的第startIndex字节数据转换成int类型，不管有没有if (startIndex % 4 == 0)这句话，都是将value数组的第startIndex字节数据转换成int类型。else里面返回的int类型一定是小端模式的，比如pbyte 后面4个字节分别是0x12,0x34,0x56,0x78那么else里面返回一定是0x78563412.但是if里面就不一定了，如果使用的芯片是小端模式，那么return *((int*)pbyte); 返回的还是0x78563412,但是如果你使用的芯片是大端模式,这时return *((int*)pbyte);返回的数据就不是0x78563412了。\r\n而是0x12345678;*((int*)pbyte这句话的意思是将pbyte指针强制转换成int类型的指针，然后再取这个int类型指针的值，就是将alue[startIndex]往后读4字节的数据再转换成int型。", "Konwledge_Point": "整型", "Question": ["有关byte数组转int32的计算过程的一些疑问", ["下面的一段代码是用来将byte[]转为int数值的，在里面我用注释标记了两个问题：", "\n1. 为什么startIndex是4的整数倍就可以用下面这种方式得到int值？", "\n2. *((int*)pbyte) 这句代码具体做了哪些操作？数据发生了哪些变化？", "\n\n", "希望有大佬给解释一下，谢谢！", "\n\n", "\n\n", "// 将字节数组转换为int\nint bytesToInt32(char value[], int startIndex)\n{\n    char* pbyte = &value[startIndex];\n\n    if (startIndex % 4 == 0) // data is aligned \n    {\n        // 为什么startIndex是4的整数倍就可以用下面这种方式得到int值？\n        // *((int*)pbyte) 这句代码具体做了哪些操作？数据发生了哪些变化？\n        return *((int*)pbyte);\n    }\n    else\n    {\n        return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);\n    }\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf,%d&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;capital&lt;/span&gt;, &lt;span class=\"hljs-symbol\"&gt;&amp;amp;n&lt;/span&gt;)&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["第一次写c 语言，这是书上的题:设银行定期存款的年利率rate为2.25%,已知存款期为n年，存款本金为capital,本利之和为deposit 元，计算并输出n 年之后所得本利之和deposit。", ["各位大佬，求问下面程序是哪里出了问题🙏:", "#include <stdio.h>", "#include <math.h>", "int main(void)", "{", "    int n;", "    float rate=0.0225;", "    double capital,deposit;", "    printf(\"input capital,n:\");", "    scanf(\"%lf，%d\\n\",&capital,&n);", "    deposit=capital*pow((1+rate),n);", "    printf(\"deposit=%f\\n\",deposit);", "    return 0;", "}", "程序运行没报错，可是结果一直显示", "input capital,n:300 4", "deposit=inf", "Program ended with exit code: 0"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n&lt;span class=\"hljs-built_in\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; main(String[] args) {\n        &lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;[] arr &amp;#61; &lt;span class=\"hljs-built_in\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;Integer&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;];\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;){\n            arr[i] &amp;#61; i*i;\n            i&amp;#43;&amp;#43;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(arr.length);\n        &lt;span class=\"hljs-keyword\"&gt;System&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(Arrays.toString(arr).replaceAll(&amp;#34;,|\\\\[|\\\\]&amp;#34;,&amp;#34;&amp;#34;)&amp;#43;&amp;#34;\\r\\n&amp;#34;);\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["创建一个5个整数的一维数组，并将每个数组元素赋值为数组下标的平方。输出数组的长度；然后在下一行依次输出每个数组元素的值，元素之间用空格分开，最后一个元素后输出换行。", ["题目描述", "创建一个5个整数的一维数组，并将每个数组元素赋值为数组下标的平方。输出数组的长度；然后在下一行依次输出每个数组元素的值，元素之间用空格分开，最后一个元素后输出换行。", "\n", "输入描述", "无", "\n", "输出描述", "省略", "\n", "输入样例", "无", "\n", "输出样例", "省略"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;解法一:时间复杂度o(n)&amp;#xff0c;空间复杂度o(n)&lt;br /&gt;解法二:时间复杂度o(k*n)&amp;#xff0c;空间复杂度o(1)&lt;br /&gt;解法三:时间复杂度o(n)&amp;#xff0c;空间复杂度o(1)&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["n个元素的数组向左循环移动i个位置", ["n个元素的数组向左循环移动i个位置", "解法一:", "先将数组前i个元素存在临时数组,在将余下的n-i个元素左移i个位置,最后将临时数组中的元素复制到后面i个位置", "\n", "复杂度:", "需移动i+(n-i)+i = i+n 次数组单元", "需i个额外存储单元", "\n", "解法二:", "设计一个函数将数组向左移动一个位置,然后在调用函数i次", "\n", "复杂度:", "需移动i*n次数组单元", "只需1个额外存储单元", "\n", "解法三:", "AB(A代表前i个元素,B代表后n-i个元素),先将A置换,在将B置换,最后将AB置换", "AB -> A-1B -> A-1B-1 -> BA", "\n", "讲解每个解法的时间效率与空间效率"]], "Tag": "程序设计"}
{"Answer": "`Integer.toHexString(s1)+Integer.toHexString(s2)`", "Konwledge_Point": "整型", "Question": ["java 两个16进制数组成的字符串合成一个字符串", ["比如 string s1=“17”，string s2=“11”，我想让他合成1711，而不是28或者其他的，该怎么做呢？注意，这里的17，11都是16进制的数，因为我在地铁上用手机发帖只能这样简略了…"]], "Tag": "程序设计"}
{"Answer": "建议阅读Linux中这个两个函数的原码，其中有详细的解释", "Konwledge_Point": "整型", "Question": ["这是一个关于C语言输入输出函数的问题", ["int a;\nscanf(\"%d\",&a);\nprintf(\"%d\",a);\n", "\n\n", "这是我写的一段代码，我有个疑问，输人输出语句，逗号前面的参数相同，逗号后面的参数", "\n为什么一个有取地址符号，一个没有取地址符号呢。"]], "Tag": "程序设计"}
{"Answer": "```\r\npublic static void main(String[] args) {\r\n\t\tString a=RandomStringUtils.random(8, \"abcdefghijklmnopqrstuvwxyz1234567890\");\r\n\t\tSystem.out.println(a);\r\n\t}\r\n \r\n```\r\n\r\n一般来说不会重复，重复的概率比你中500万还低", "Konwledge_Point": "整型", "Question": ["java 生成八位 永远不重复的字符串", ["java 生成八位 永远不重复的字符串。。。。。。。。。。。。。。。。。"]], "Tag": "程序设计"}
{"Answer": "可以一次性输入，但循环来取如输入 1 2 3 4 5 6 7 8,cin会取8次，因为碰到空格会结束一次，接下来继续取，所以这样就是输入了8 个整数，你内部分别存下来就是，这比循环输入要好一些，你想要的好像没有", "Konwledge_Point": "整型", "Question": ["C++ 整型数组连续输入", ["C++可以使用cin.get（）或者cin.getline（）输入char型数组。", "\n如果需要输入int 型整数数组怎么办呢？", "\n我知道，已知可以使用循环一个个输入，那么有没有和cin.getline（）差不多的流可以输入整型数组啊。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code&gt;# include &amp;lt;stdio.h&amp;gt;\nbinarySearch(int a[], int n, int key){\n    int low &amp;#61; 0;\n    int high &amp;#61; n - 1;\n    while(low&amp;lt;&amp;#61; high){\n        int mid &amp;#61; (low &amp;#43; high)/2;\n        int midVal &amp;#61; a[mid];\n        if(midVal&amp;lt;key)\n            low &amp;#61; mid &amp;#43; 1;\n        else if(midVal&amp;gt;key)\n            high &amp;#61; mid - 1;\n        else\n            return mid;\n    }\n    return -1;\n}\nint main(void)\n{\n\tint  val, ret;\n\t\n    int a[] &amp;#61; {900, 2, 3, -58, 34, 76, 32, 43, 56, -70, 35, -234, 532, 543, 2500};\n    int n;  //存放数组a中元素的个数\n    int i;  //比较的轮数\n    int j;  //每轮比较的次数\n    int buf;  //交换数据时用于存放中间数据\n    n &amp;#61; sizeof(a) / sizeof(a[0]);  /*a[0]是int型, 占4字节, 所以总的字节数除以4等于元素的个数*/\n     printf(&amp;#34;排序前的数组为&amp;#xff1a;\\n&amp;#34;);\n    for (i&amp;#61;0; i&amp;lt;n; &amp;#43;&amp;#43;i)\n    {\n        printf(&amp;#34;%d\\x20&amp;#34;, a[i]);\n    }\n    printf(&amp;#34;\\n\\n&amp;#34;);\n    for (i&amp;#61;0; i&amp;lt;n-1; &amp;#43;&amp;#43;i)  //比较n-1轮\n    {\n        for (j&amp;#61;0; j&amp;lt;n-1-i; &amp;#43;&amp;#43;j)  //每轮比较n-1-i次,\n        {\n            if (a[j] &amp;gt; a[j&amp;#43;1])\n            {\n                buf &amp;#61; a[j];\n                a[j] &amp;#61; a[j&amp;#43;1];\n                a[j&amp;#43;1] &amp;#61; buf;\n            }\n        }\n    }\n    printf(&amp;#34;排序后的数组为&amp;#xff1a;\\n\\n&amp;#34;);\n    for (i&amp;#61;0; i&amp;lt;n; &amp;#43;&amp;#43;i)\n    {\n        printf(&amp;#34;%d\\x20&amp;#34;, a[i]);\n    }\n    printf(&amp;#34;\\n\\n请输入要查找的数&amp;#xff1a;&amp;#34;);\n    \n    scanf(&amp;#34;%d&amp;#34;,&amp;amp;val);\n    ret &amp;#61; binarySearch(a,20,val);\n    if(-1 &amp;#61;&amp;#61; ret)\n        printf(&amp;#34;查找失败&amp;#xff0c;按任意键退出 \\n&amp;#34;);\n    else\n        printf (&amp;#34;查找成功 \\n&amp;#34;);\n    \n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言做一个随机生成数组，数组排序，二分查找，增删改查的集成程序", ["1.随机生成数组", "\n\n", "2.数组排序", "\n\n", "3.二分查找", "\n\n", "4.增删改查", "\n\n", "5.集成为一个C语言程序"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;a &amp;#61; [1,2,3]&lt;br /&gt;b &amp;#61; 0.5&lt;br /&gt;c &amp;#61; [t * b for t in a]&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["序列不能和浮点数的非整数相乘怎么解决", ["\n"]], "Tag": "程序设计"}
{"Answer": "也算值传递，只不过是传递的对象引用的值，然后你可以通过引用来修改对象的数据。\r\n而C++中，有直接的引用的概念，它就是实实在在传递的对象的引用。", "Konwledge_Point": "整型", "Question": ["java中只有值传递的问题", ["求解：", "\n在调用方法时，传递的是 对象引用的复制 。 这个也算是值传递吗，明明引用的复制，它也是个引用啊。 这个很疑惑"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;scanf(&amp;#34;%d&amp;#34;,&amp;amp;x);//注意&amp;amp;x不要写在引号里面&lt;br /&gt;printf(&amp;#34;%d&amp;#34;,multipliedby);&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;有帮助请&lt;font color=\"red\"&gt;&lt;strong&gt;采纳&lt;/strong&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["我想输入一个整数，计算平方。", ["出来的结果总为0。", "\n"]], "Tag": "程序设计"}
{"Answer": "什么第二小题？请截图。sqrt()就是求平方根，例如sqrt(100)就是10\r\n注意事项有的，先要import math才能用。返回的是小数（浮点），如sqrt(100)返回10.0\r\nmath模块是Python自带的\r\n示例\r\n\r\n```python\r\nfrom math import *  #导入模块\r\nprint(sqrt(100))\r\nnumber=sqrt(9)+10\r\nprint(sqrt(number+10))\r\n```\r\n也可以是\r\n\r\n```python\r\nimport math\r\nprint(math.sqrt(100))\r\n```\r\n# 点赞加关注，程序员要互帮互助", "Konwledge_Point": "整型", "Question": ["第二小题怎么写 那个sqrt函数不太懂请教各位大佬", ["各位大佬给小弟讲解一下，这个sqrt函数有什么需要注意的事项吗"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nimport numpy as np\n&lt;span class=\"hljs-selector-tag\"&gt;a&lt;/span&gt; &amp;#61; np&lt;span class=\"hljs-selector-class\"&gt;.random&lt;/span&gt;&lt;span class=\"hljs-selector-class\"&gt;.randint&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;,(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;))\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;max&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;min&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a)&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;max&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(a)&lt;/span&gt;&lt;/span&gt; - min(a)\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["1. (基础题)随机产生10行10列的矩阵（每个数的范围：100~1000），求最大值、最小值及最大最小值的差。（利用Numpy模块）", ["(基础题)随机产生10行10列的矩阵（每个数的范围：100~1000），求最大值、最小值及最大最小值的差。（利用Numpy模块）", "\n", "程序运行效果如下：", "\n", "程序完整代码："]], "Tag": "程序设计"}
{"Answer": "最后\r\n\r\n\r\n```\r\nfor (int j = 0; j &lt; i - 1; j++)\r\n cout &lt;&lt; temp[i];\r\n\r\n```\r\n\r\n错了吧，循环变量是j,应该是\r\n\r\n\r\n```\r\nfor (int j = 0; j &lt; i - 1; j++)\r\n cout &lt;&lt; temp[j];\r\n\r\n```\r\n\r\n而且temp[i]是一个申请的存储空间（）", "Konwledge_Point": "整型", "Question": ["请大家看看这个程序错在哪？", ["#include ", "\n#include ", "\n using namespace std;", "\n int main(void)", "\n {", "\n char ch;", "\n int i=1;", "\n char *before = new char[1],*temp;", "\n while (cin >> ch)", "\n {", "\n temp = new char[i];", "\n temp[i - 1] = ch;", "\n for (int j = 0; j < i - 1; j++)", "\n temp[j] = before[j];", "\n delete[] before;", "\n before = temp;", "\n ++i;", "\n }", "\n for (int j = 0; j < i - 1; j++)", "\n cout << temp[i];", "\n }"]], "Tag": "程序设计"}
{"Answer": "我找到原因了，因为你是在for(int j=0）的循环中每次循环时又对arrays[i] = new了一次操作，导致，最终arrays都是一个新new的对象，都是默认值。\r\n修正代码如下：\r\n\r\n```\r\n for (int i = 0; i &lt; arrays.length; i++) {\r\n\t\t\tString str = sc.nextLine();\r\n\t\t\tString[] strArray = str.split(\",\");\r\n\t\t\t//在列循环外面，对每一行的数据new\r\n\t\t\tarrays[i] = new int[strArray.length];\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j &lt; strArray.length; j++) {\r\n\t\t\t\tarrays[i][j] = Integer.parseInt(strArray[j]);\r\n\t\t\t\tSystem.out.print(\"i\"+i+\",j:\"+j+\",value:\"+arrays[i][j] + \",\");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n```", "Konwledge_Point": "整型", "Question": ["java 用键盘输入初始化二维数组后，遍历每一行数组时，输出结果有问题", ["这个问题是在写一个小程序时遇到的：", "\n程序功能：", "\n将两个数组合并后排序并输出：", "\n输入：", "\n5，3 （两个数组各自的长度）", "\n9，6，5，3，1   （第一个数组）", "\n7，4，2    （第二个数组）", "\n输出：", "\n1，2，3，4，5，6，7，9", "\n\n", "下面是代码：", "\npublic class Main2 {", "\n    public static void main(String[] args){", "\n        Scanner sc=new Scanner(System.in);", "\n        int[][] arrays=new int[3][];  //用于存放输入的三行数据，每行数据都存入一个数组", "\n        for(int i=0;i<arrays.length;i++){", "\n            String str=sc.nextLine();", "\n            String[] strArray=str.split(\",\");", "\n            for(int j=0;j<strArray.length;j++){", "\n                arrays[i]=new int[strArray.length];", "\n                arrays[i][j]=Integer.parseInt(strArray[j]);", "\n                System.out.print(arrays[i][j]+\",\");", "\n            }", "\n            System.out.println();", "\n        }", "\n        for(int num:arrays[1]){   //检测arrays[1]中的数据，为什么这里不对？？？", "\n            System.out.print(num+\",\");", "\n        }", "\n        System.out.println(); ", "\n\n", "    for(int num:arrays[2]){   //检测arrays[2]中的数据，为什么这里不对？？？\n        System.out.print(num+\",\");\n    }\n    System.out.println();\n\n    int[] combineArray=Arrays.copyOf(arrays[1],arrays[1].length+arrays[2].length);\n    for(int num:combineArray){\n        System.out.print(num+\",\");\n    }\n    System.out.println();\n\n    System.arraycopy(arrays[2], 0, combineArray, arrays[1].length, arrays[2].length);\n    for(int num:combineArray){\n        System.out.print(num+\",\");\n    }\n    System.out.println();\n\n    Arrays.sort(combineArray);\n    for(int num:combineArray){\n        System.out.print(num+\",\");\n    }\n    System.out.println();\n}\n", "\n\n", "}", "\n为什么", "\nfor(int num:arrays[1]){   //检测arrays[1]中的数据，为什么这里不对？？？", "\n            System.out.print(num+\",\");", "\n        }", "\n        System.out.println(); ", "\n\n", "    for(int num:arrays[2]){   //检测arrays[2]中的数据，为什么这里不对？？？\n        System.out.print(num+\",\");\n    }\n    System.out.println();\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;没人回答就我来献丑吧&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-html\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; n&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,z&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,b&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\nscanf&lt;span class=\"hljs-constructor\"&gt;_s(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;n&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;;i&amp;#43;&amp;#43;)\n{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;amp;b)&amp;gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; z&amp;#43;&amp;#43;;\n    b*&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n}\nprintf&lt;span class=\"hljs-constructor\"&gt;_s(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-params\"&gt;z&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;代码前后自己补充&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言   统计一个数的二进制中1的个数  求程序", ["C语言   统计一个数的二进制中1的个数  求程序", "C语言   统计一个数的二进制中1的个数  求程序"]], "Tag": "程序设计"}
{"Answer": "```\r\n#include&lt;stdio.h&gt; \r\n#include&lt;stdlib.h&gt;\r\n\r\nvoid zhuanz(int(*p)[4])\r\n{\r\n\tfor (int i = 0; i &lt; 4; i++)\r\n\t\tfor (int j = 0; j &lt;= i; j++)\r\n\t\t{\r\n\t\t\tint t = p[i][j];\r\n\t\t\tp[i][j] = p[j][i];\r\n\t\t\tp[j][i] = t;\r\n\t\t}\r\n}\r\nint main()\r\n{\r\n\tint a[4][4];\r\n\tfor (int i = 0; i &lt; 4; i++)\r\n\t\tfor (int j = 0; j &lt; 4; j++)\r\n\t\t\tscanf(\"%d\", &amp;a[i][j]);\r\n\tzhuanz(a);\r\n\tfor (int i = 0; i &lt; 4; i++)\r\n\t{\r\n\t\tfor (int j = 0; j &lt; 4; j++)\r\n\t\t\tprintf(\"%d \", a[i][j]);\r\n\t\tprintf(\"\\n\");\r\n\t}\r\n\treturn 0;\r\n}\r\n```\r\n*（p)[4]和*p[4]什么区别\r\n一个是指针的数组，也就是4个指针，一个是数组的指针，也就是只有一个指针。", "Konwledge_Point": "整型", "Question": ["编写函数zhuanz(int (*p)[4]) 用行指针作参数实现矩阵转置", ["/*在主函数中定义整型数组a[4][4]，从键盘输入值赋给数组元素后，调用zhuanz函数将a数组转置，并输出转置后的数组。*/", "\n\n", "#include", "\n#include", "\nmain()", "\n{/************found************/", "\n\n", "}", "\nzhuanz(int (*p)[4])", "\n{/************found************/", "\n\n", "}/*萌新崩溃，还有就是*（p)[4]和*p[4]什么区别，，*/"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;不是少分号的问题&amp;#xff0c;分号截图的时候不小心点掉了&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["c语言  88行有错误，请问要怎么改呀？", ["\n", "\n", "\n", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "char *q=p+L;表示定义一个指针，指向字符串最后一个元素的地址；\r\n\t程序功能是判断一个字符串是否是回文数", "Konwledge_Point": "整型", "Question": ["一个字符串+一个整数结果是？", ["#include <stdio.h>\n#include <string.h>\nchar fun(char *p)\n{ \n    int L=strlen(p)-1;\n    char *q=p+L;\n    while (p<q) \n\n    { \n    if ((*p++) != (*q--))\n          return 0; \n    }\n    return 1;\n}  \n\nvoid main()\n\n{\n      char str1[]=\"acba\";\n      int i=fun(str1);\n      printf(\"%d \\n\",i);\n}\n", "\n\n", "第五行不知道是什么意思，愿听大佬讲解这是什么操作", "\n（如果身边把其他每行也解释一下就更好了，我还是个）", "\n用debug显示此时的*q=a"]], "Tag": "程序设计"}
{"Answer": "\\后面加数字代表ASCII码中相应的字符\r\n第一句中，\\0表示空字符，也是字符串的结束字符，所以第一句输出应该是ab\r\n第二句中，也有个\\+数字，而这个数字是060，显然这个是8机制的写法，所以060（8进制）= 48（10进制），所以那个字符就是\\48，即字符0，所以第二句输出应该是ab0efg\r\n\r\n最后的输出就是abab0efg", "Konwledge_Point": "整型", "Question": ["c语言里面遇到的小问题", ["\\0空字符有什么用?intmain()", "\n{", "\ninta=1;", "\nprintf(\"ab\\0efg\\n\");", "\nprintf(\"ab\\060efg\");", "\nreturn0; 输出是什么？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;流的数据类型不匹配时可能发生流损坏。流损坏后就无法再读取内容了&amp;#xff0c;除非重置流状态。由于流损坏后无法再读取内容&amp;#xff0c;你的while里试图通过fscanf获取的变量就会一直处于原来的值。&lt;/p&gt;\n\n&lt;p&gt;详见&amp;#xff1a;man ferror&lt;/p&gt;\n\n&lt;p&gt;&amp;#xff08;Linux上的手册页写得非常详细。在线版&amp;#xff1a;&lt;a href=\"https://linux.die.net/man/3/ferror\"&gt;https://linux.die.net/man/3/ferror&lt;/a&gt;&amp;#xff09;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言fscanf函数遇到与其对应数据类型不同时会发生什么？", ["#include <stdio.h>", "\n#include <stdlib.h>", "\n\n", "int main()", "\n{", "\n    FILE *fp;", "\n    char ch,name[20];", "\n    int a[5]={0},score,num;", "\n    if((fp=fopen(\"C:\\\\Users\\\\wy207\\\\Desktop\\\\a.txt\",\"r\"))==NULL){", "\n        printf(\"不能打开文件！\\n\");", "\n        exit(0);", "\n    }", "\n    while(!feof(fp))", "\n    {", "\n    /*读出并显示文件当前行的内容*/", "\n     if(fscanf(fp,\"%d\",&score)==-1) break;", "\n     printf(\"%d\\n\",score);", "\n\n", "     /*统计各等级人数*/", "\n    if(score>=90)a[0]++;", "\n    else if(score>=80)a[1]++;", "\n    else if(score>=70)a[2]++;", "\n    else if(score>=60)a[3]++;", "\n    else a[4]++;", "\n    }", "\n    printf(\"\\n\");", "\n    printf(\"A级有%d人\\n\",a[0]);", "\n    printf(\"B级有%d人\\n\",a[1]);", "\n    printf(\"C级有%d人\\n\",a[2]);", "\n    printf(\"D级有%d人\\n\",a[3]);", "\n    printf(\"E级有%d人\\n\",a[4]);", "\n}", "\n\n", " ", "\n\n", "无限循环输出相同数字"]], "Tag": "程序设计"}
{"Answer": "long func(long int x)\r\n{\r\n\t\tlong int tmp_num = x;\r\n\t\ttmp_num /10*i\r\n}", "Konwledge_Point": "整型", "Question": ["一道关于C语言的题目求帮助！", ["1． 请编写函数long fun(long int x)，功能是：将长整型数x中每一位上为奇数的数依次取出，并逆序构成一个新数返回。例如：程序运行时输入123456789，输出：b=97531。", "\n#include", "\nlong fun(long int x)", "\n{ ", "\n}", "\nvoid main()", "\n{long a,b;", "\n printf(\"Please input a long int num:\");", "\n scanf(\"%ld\",&a);", "\n b=fun(a);", "\n printf(\"b=%ld\\n\",b);", "\n}"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Perhaps to add to add to Adrian's answer. If you add &lt;code&gt;fmt.Fprintf(digester, reflect.TypeOf(ob))&lt;/code&gt; before each object. That would make Hash(\"12\", \"3\") and Hash(\"123\") different. &lt;/p&gt;\n\n&lt;p&gt;package main&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import (\n    \"crypto\"\n    _ \"crypto/md5\"\n    \"fmt\"\n    \"reflect\"\n)\n\nfunc main() {\n    fmt.Printf(\"%x\n\", Hash(\"12\", \"3\"))\n    fmt.Printf(\"%x\n\", Hash(\"123\"))\n}\n\nfunc Hash(objs ...interface{}) []byte {\n    digester := crypto.MD5.New()\n    for _, ob := range objs {\n        fmt.Fprint(digester, reflect.TypeOf(ob))\n        fmt.Fprint(digester, ob)\n    }\n    return digester.Sum(nil)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;c3d5dcf1d7540d3e46e7d7b5a8c6e8ae\n787ca7e12a2fa991cea5051a64b49d0c\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://play.golang.org/p/nufD3wTJkb\" rel=\"nofollow noreferrer\"&gt;https://play.golang.org/p/nufD3wTJkb&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["在Golang中散列多个值", ["\n\n", "I'm currently working on an application in go that needs to cache different resources. Different types of resources have handlers that will know what data is relevant to determine, if we have to rebuild a resource or if we can fetch it from cache. For this purpose handlers shall generate a hash of all relevant data for caching. Depending on the context that data can be primitives (int, float, ...), strings, slices, structs and maps. So almost everything. The number of objects used for hashing might also vary.", "\n\n", "To calculate that hash in handlers, I've created a hashing function with variadic parameters of type ", "interface{}", ".", "\n\n", "My current approach is this:", "\n\n", "func Hash(objs ...interface{})([]byte) {\n    // Use MD5 because it's fast and is reasonably enough protected against accidental collisions.\n    // There is no scenario here where intentional created collisions could do harm.\n    digester := crypto.MD5.New()\n\n    encoder := gob.NewEncoder(digester)\n    encoder.Encode(objs) // In real life one would handle that error\n\n    return digester.Sum(make([]byte, 0))\n}\n", "\n\n", "This works. But there are a few things that give me headaches with this implementation. Because I'm not sure that ", "gob will always behave deterministic", ", for the current version that seems to be the case, but as the referenced answer points out, there might be changes between versions.\nAccording to the documentation for gob, default values (0 for ints, empty strings, nil, ...) will be omitted when transporting structs. Also all int values will be transmitted as generic numbers. So unit64 and int will be the same. I can't think of an actual issue with this for my usecase, but this smells like a source for trouble.", "\n\n", "Now if I would write that function from scratch I would properly play it safe, traverse the structure with reflection and create a hashing tree. But I don't want to do that. ", "\n\n", "I'm pretty sure I'm not the first one out there with these requirements, but I wasn't able to find any well tested go code on the web, that addresses this issue.", "\n\n", "Appendix", "\n\n", "Also see: ", "https://crypto.stackexchange.com/questions/10058/how-to-hash-a-list-of-multiple-items", "\n\n", "This is not as trivial as it may seem. Simply concatenating data as pointed out by Adrian won't work, because then ", "Hash(\"12\", \"3\")", " and ", "Hash(\"123\")", " will generate the same hash. One possible solution is to prepend the length of data (and the number of elements of lists) before hashing or to create a tree of hashes, but I can't think of a reliable way to do either of that with complex data structures, without writing a lot of reflection code that handles all the different cases (integers, floats, strings, structs, slices, ...) and walks through the entire structure. I want to avoid that, because there are a lot of special cases that can be overseen doing so and it seems unnecessary complicated to me. This is why I tried to solve the problem using serialization, which will take care of most of the problems described above. I'm just not sure if there are not some drawbacks of using gob in this scenario and if there isn't a smarter solution to the problem.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;In php basic comparison, an array with elements==&lt;code&gt;True&lt;/code&gt; and an empty array==&lt;code&gt;False&lt;/code&gt;.&lt;br&gt;\n&lt;code&gt;array_shift()&lt;/code&gt; reduce the size of array.&lt;/p&gt;\n\n&lt;p&gt;So, in your example, the loop reduce the size of &lt;code&gt;$phases&lt;/code&gt; until the &lt;code&gt;$phases&lt;/code&gt; is empty.&lt;br&gt;\n(better: until &lt;code&gt;$phases&lt;/code&gt; is empty or one of the other conditions are &lt;code&gt;False&lt;/code&gt;)&lt;/p&gt;\n\n&lt;h3&gt;Edit:&lt;/h3&gt;\n\n&lt;p&gt;There is not a comparison between array and integer, the condition is:&lt;br&gt;\nARRAY IS NOT EMPTY &lt;strong&gt;AND&lt;/strong&gt; INT &amp;gt; INT &lt;strong&gt;AND&lt;/strong&gt; INT &amp;gt; INT.&lt;/p&gt;\n\n&lt;h3&gt;Edit 2:&lt;/h3&gt;\n\n&lt;p&gt;Please note that there are a sort of incongruity in php &lt;a href=\"http://php.net/manual/en/language.types.type-juggling.php\" rel=\"nofollow\"&gt;type juggling&lt;/a&gt; comparison:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;array() == False\n''      == False\n0       == False\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;''      == 0\narray() != ''   &amp;lt;------ !!!!\narray() != 0    &amp;lt;------ !!!!\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["在PHP中将数组与int进行比较", ["\n\n", "I'm reading through the drupal_bootstrap code at: ", "https://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/drupal_bootstrap/7", " to try to understand how to bootstrap drupal code. I have experience in other languages but not php. This line of code below puzzles me, because $phases is an array, and everything else is int. What does it mean when it compares array with an int?", "\n\n", "while ($phases && $phase > $stored_phase && $final_phase > $stored_phase) {\n      $current_phase = array_shift($phases);\n", "\n\n", "Thanks!", "\n    "]], "Tag": "程序设计"}
{"Answer": "已经解决了\r\n用了parameter参数来解决，谢谢大家\r\nmycom.Parameters.Add(new SqlParameter(\"@员工编号\", SqlDbType.NChar));\r\n        mycom.Parameters.Add(new SqlParameter(\"@姓名\", SqlDbType.NChar));\r\n        mycom.Parameters.Add(new SqlParameter(\"@性别\", SqlDbType.NChar));\r\n        mycom.Parameters.Add(new SqlParameter(\"@出生日期\", SqlDbType.DateTime));\r\n        mycom.Parameters.Add(new SqlParameter(\"@基本工资\", SqlDbType.Int));\r\n        mycom.Parameters.Add(new SqlParameter(\"@单位编码\", SqlDbType.NChar));\r\n        //给参数赋值 \r\n        mycom.Parameters[\"@员工编号\"].Value = TextBoxNo.Text;\r\n        mycom.Parameters[\"@姓名\"].Value = TextBoxName.Text;\r\n        mycom.Parameters[\"@性别\"].Value = TextBoxSex.Text;\r\n        mycom.Parameters[\"@出生日期\"].Value = TextBoxBirthday.Text;\r\n        mycom.Parameters[\"@基本工资\"].Value = TextBoxSalary.Text;", "Konwledge_Point": "整型", "Question": ["请问在C#中如何将TextBox框的值转换为int并且插入到数据库中？", ["\n\n", "—————————————————————————————————", "\n\n", "是这样的，我的基本工资在数据库中设置为Int类型，然后在在textbox中输入基本工资，并且插入到数据中，但是会报值为NULL，无法插入。我想把转换为int再插入，但是报错误：  无法将类型“string”隐式转换为“int”"]], "Tag": "程序设计"}
{"Answer": "http://blog.csdn.net/a709743744/article/details/50876650", "Konwledge_Point": "整型", "Question": ["God's Birthday                             ", ["Problem Description", "\nDo you know God's birthday?", "\nStupid Wiskey and Michelle say they didn't knew.", "\nNow, Gods want to make a game let them guess the answer.", "\nThis game is a two-player alternative game and is played as follows:", "\n1.God tell the month to Wiskey, and tell the day to Michelle.", "\n2.There are many dates in a list, Wiskey and Michelle must choose the date from the list.", "\n3.Wiskey guesses first, then Michelle and alternative to reply YES or NO, if he/she konws the answer, he/she will say YES, or he/she will say NO.", "\n4.Who first know God's birthday when is his/her turn and his/her answer is right, he/she is the winner.", "\nYour task is telling me who will win, Wiskey or Michelle?", "\n\n", "Input", "\nFirst line will contain one integer means how many cases will follow by.", "\nEach line will contain three integers N, M, D.", "\nN represents the number of dates God tell them. (1 <= N <= 365)", "\nM, D represent God's birthday is the M-th month, the D-th day. (1 <= M <= 12, 1 <= D <= 31)", "\n\n", "Output", "\nIf Wiskey win, print \"Wiskey Win\".", "\nIf Michelle wins, print \"Michelle Win\".", "\nElse print \"No\" if nobody will win the game.", "\n\n", "Sample Input", "\n4", "\n\n", "3 12 25", "\n12 25", "\n10 25", "\n11 25", "\n\n", "3 12 25", "\n12 25", "\n12 23", "\n12 24", "\n\n", "4 12 25", "\n11 25", "\n11 25", "\n12 24", "\n12 24", "\n\n", "3 12 25", "\n11 25", "\n12 25", "\n12 24", "\n\n", "Sample Output", "\nWiskey Win", "\nMichelle Win", "\nNo", "\nMichelle Win"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;其实不是乱码&amp;#xff0c;而是 &lt;strong&gt;DataOutputStream 的特性&lt;/strong&gt;&amp;#xff0c;它使用的是一个&lt;strong&gt;和平台无关的方式写入到文件中&lt;/strong&gt;。也就是说里面不是纯文本形式的。即在每个数据前面会带点前缀的形式来标示后面数据的格式。例如&amp;#xff1a;你写的是一个数字&amp;#xff0c;可能前面就会有 0000 0001 这种来标示后面是一个数字&amp;#xff0c;普通的字符串可能就是 0000 0002。&lt;/p&gt;\n\n&lt;p&gt;这只是举例&amp;#xff0c;实际上怎么标示的我也不知道&amp;#xff0c;但是这些标示的字符不管用什么编码去打开都是 &amp;#39;乱码&amp;#39; 因为本来也不是那种有效的字符&amp;#xff0c;所以这个是正常的。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["java程序输出数据写入txt文件。编译运行后，打开txt,发现全是乱码，请各位指点一下，谢谢！", ["import java.io.*;", "\npublic  class  DataOut{", "\n       public static  void  main(String args[])throws IOException{", "\n              FileOutputStream fout=new FileOutputStream(\"data011.txt\");", "\n              DataOutputStream out=new DataOutputStream(fout);", "\n              String [ ] items={\"面包\",\"笔\",\"被子\",\"牙膏\",\"毛巾\"};", "\n              int[] units={2,5,1,2,3};", "\n              float[] prices={1.5f,2.8f,125f,7.2f,5.6f};", "\n              for(int i=0;i<items.length;i++){", "\n                     out.writeUTF(items[i]);", "\n                     out.writeChar('\\t');", "\n                     out.writeFloat(prices[i]);", "\n                     out.writeChar('\\t');", "\n                     out.writeInt(units[i]);", "\n                     out.writeChar('\\t');", "\n             }", "\n                  out.close();", "\n                 fout.close();", "\n       }", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-comment\"&gt;//type&amp;#61;0表示摄氏转华式&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;calc&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; value, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; type &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; f&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, c&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (type &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    {\n        f &amp;#61; (value * &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt; / &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; f;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        c &amp;#61; (value - &lt;span class=\"hljs-number\"&gt;32&lt;/span&gt;) * &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; / &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; c;\n    }\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; v, t;\n    cin &amp;gt;&amp;gt; v;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;  摄氏温度&amp;#xff1a;%.15lf\\n&amp;#34;&lt;/span&gt;,v);\n    t &amp;#61; &lt;span class=\"hljs-built_in\"&gt;calc&lt;/span&gt;(v, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;gt;华氏温度&amp;#xff1a;%.15lf\\n&amp;#34;&lt;/span&gt;, t);\n    t &amp;#61; &lt;span class=\"hljs-built_in\"&gt;calc&lt;/span&gt;(t, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#61;&amp;gt;摄氏温度&amp;#xff1a;%.15lf\\n&amp;#34;&lt;/span&gt;, t);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;2&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;template&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-keyword\"&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;pow&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(T value, T&amp;amp; pingfang, T&amp;amp; lifang)&lt;/span&gt;\n&lt;/span&gt;{\n    pingfang &amp;#61; value * value;\n    lifang &amp;#61; value * value * value;\n}\n\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; n;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; pf, lf;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;请输入1个输&amp;#xff0c;按回车结束&amp;#xff1a;&amp;#34;&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; n;\n    &lt;span class=\"hljs-built_in\"&gt;pow&lt;/span&gt;(n, pf, lf);\n    cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;的平方&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; pf &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;的立方&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; lf &amp;lt;&amp;lt; endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;3:(数据直接录入了&amp;#xff0c;输入需要查询的科目和学号即可输出&amp;#xff0c;另外&amp;#xff0c;再差某个科目的最低和最高成绩的时候&amp;#xff0c;只保留了一个学生的信息)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/997347399356130.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;#define &lt;span class=\"hljs-symbol\"&gt;_CRT_SECURE_NO_WARNINGS&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;\n#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;string&amp;gt;\nusing namespace std;\n//定义最大课程数\n#define &lt;span class=\"hljs-symbol\"&gt;MAXKC&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;\nclass &lt;span class=\"hljs-symbol\"&gt;Student&lt;/span&gt;\n{\nprivate:\n    string mId;\n    string mName;\n    string mSex;\npublic:\n    &lt;span class=\"hljs-symbol\"&gt;Student&lt;/span&gt;() { mId &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;; mName &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;; mSex &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;; }\n    void setId(string id) { mId &amp;#61; id; }\n    string getId() { return mId; }\n    void setName(string n) { mName &amp;#61; n; }\n    string getName() { return mName; }\n    void setSex(string s) { mSex &amp;#61; s; }\n    string getSex() { return mSex; }\n};\n\nclass &lt;span class=\"hljs-symbol\"&gt;Grade&lt;/span&gt;\n{\nprivate:\n    string mName;\n    int mScore;\npublic:\n    &lt;span class=\"hljs-symbol\"&gt;Grade&lt;/span&gt;() { mName &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;; mScore &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; }\n    void setName(string n) { mName &amp;#61; n; }\n    string getName() { return mName; }\n    void setScore(int n) { mScore &amp;#61; n; }\n    int getScore() { return mScore; }\n};\n\n\nclass &lt;span class=\"hljs-symbol\"&gt;StudentGrade&lt;/span&gt;\n{\npublic:\n    &lt;span class=\"hljs-symbol\"&gt;Student&lt;/span&gt; mStu;\n    &lt;span class=\"hljs-symbol\"&gt;Grade&lt;/span&gt; mGrade[&lt;span class=\"hljs-symbol\"&gt;MAXKC&lt;/span&gt;];\n    \n    void show()\n    {\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;姓名&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; mStu.getName() &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;性别&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; mStu.getSex() &amp;lt;&amp;lt; endl;\n        cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;学号&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; mStu.getId() &amp;lt;&amp;lt; endl;\n        for (int j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=\"hljs-symbol\"&gt;MAXKC&lt;/span&gt;; j&amp;#43;&amp;#43;)\n        {\n            if (j &amp;lt; &lt;span class=\"hljs-symbol\"&gt;MAXKC&lt;/span&gt; - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n                cout &amp;lt;&amp;lt; mGrade[j].getName() &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; mGrade[j].getScore() &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;;\n            else\n                cout &amp;lt;&amp;lt; mGrade[j].getName() &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; mGrade[j].getScore() &amp;lt;&amp;lt; endl;\n        }\n    }\n    &lt;span class=\"hljs-comment\"&gt;/*\npublic:\n    StudentGrade() { mNmb &amp;#61; 0; }\n    void SetStu(Student s) { mStu &amp;#61; s; }\n    Student getStu() { return mStu; }*/&lt;/span&gt;\n    \n};\n\n\n\nint main()\n{\n    &lt;span class=\"hljs-symbol\"&gt;StudentGrade&lt;/span&gt; arr[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;];\n    //添加学生信息\n    arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].mStu.setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;Zhang&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].mStu.setSex(&lt;span class=\"hljs-string\"&gt;&amp;#34;男&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].mStu.setId(&lt;span class=\"hljs-string\"&gt;&amp;#34;001&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;65&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;70&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;53&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;80&lt;/span&gt;);\n    \n\n    arr[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].mStu.setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;Cheng&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].mStu.setSex(&lt;span class=\"hljs-string\"&gt;&amp;#34;女&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].mStu.setId(&lt;span class=\"hljs-string\"&gt;&amp;#34;002&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;75&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;75&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;85&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;78&lt;/span&gt;);\n\n    arr[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].mStu.setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;Li&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].mStu.setSex(&lt;span class=\"hljs-string\"&gt;&amp;#34;女&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].mStu.setId(&lt;span class=\"hljs-string\"&gt;&amp;#34;003&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;68&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;45&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;95&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;72&lt;/span&gt;);\n\n    arr[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].mStu.setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;Cha&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].mStu.setSex(&lt;span class=\"hljs-string\"&gt;&amp;#34;男&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].mStu.setId(&lt;span class=\"hljs-string\"&gt;&amp;#34;004&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;67&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;70&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;64&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;62&lt;/span&gt;);\n\n    arr[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;].mStu.setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;Xun&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;].mStu.setSex(&lt;span class=\"hljs-string\"&gt;&amp;#34;男&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;].mStu.setId(&lt;span class=\"hljs-string\"&gt;&amp;#34;005&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;A&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;65&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;90&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;78&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].setName(&lt;span class=\"hljs-string\"&gt;&amp;#34;D&amp;#34;&lt;/span&gt;);\n    arr[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;].mGrade[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;].setScore(&lt;span class=\"hljs-number\"&gt;85&lt;/span&gt;);\n\n    //输出制定科目最高分和最低分的学生信息\n    string skm;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;请输入科目名称&amp;#xff0c;查询该科目的最高和最低的学生课程成绩信息&amp;#xff1a;&amp;#34;&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; skm;\n    int max&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, min&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, maxindex &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, minindex &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    for (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        for (int j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=\"hljs-symbol\"&gt;MAXKC&lt;/span&gt;; j&amp;#43;&amp;#43;)\n        {\n            if (arr[i].mGrade[j].getName().compare(skm) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                if (max &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || arr[i].mGrade[j].getScore() &amp;gt; max)\n                {\n                    max &amp;#61; arr[i].mGrade[j].getScore();\n                    maxindex &amp;#61; i;\n                }\n                if (min &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || arr[i].mGrade[j].getScore() &amp;lt; min)\n                {\n                    min &amp;#61; arr[i].mGrade[j].getScore();\n                    minindex &amp;#61; i;\n                }\n            }\n            \n        }\n    }\n    //输出\n    cout &amp;lt;&amp;lt; skm &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;科目分数最高的&amp;#xff1a;&amp;#34;&lt;/span&gt;;\n    arr[maxindex].show();\n\n    cout &amp;lt;&amp;lt; skm &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;科目分数最低的&amp;#xff1a;&amp;#34;&lt;/span&gt;;\n    arr[minindex].show();\n\n    //\n    string id;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学生学号&amp;#xff0c;以查询该学生科目分数的最高和最低分&amp;#xff1a;&amp;#34;&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; id;\n    for (int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        if (arr[i].mStu.getId().compare(id) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            max &amp;#61; arr[i].mGrade[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].getScore();\n            min &amp;#61; arr[i].mGrade[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;].getScore();\n            maxindex &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            minindex &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n            for (int j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt; &lt;span class=\"hljs-symbol\"&gt;MAXKC&lt;/span&gt;; j&amp;#43;&amp;#43;)\n            {\n                if (arr[i].mGrade[j].getScore() &amp;gt; max)\n                {\n                    max &amp;#61; arr[i].mGrade[j].getScore();\n                    maxindex &amp;#61; j;\n                }\n                if (arr[i].mGrade[j].getScore() &amp;lt; min)\n                {\n                    min &amp;#61; arr[i].mGrade[j].getScore();\n                    minindex &amp;#61; j;\n                }\n            }\n            //输出\n            //cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;姓名&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; arr[i].mStu.getName() &amp;lt;&amp;lt; endl;\n            //cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;性别&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; arr[i].mStu.getSex() &amp;lt;&amp;lt; endl;\n            //cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;学号&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; arr[i].mStu.getId() &amp;lt;&amp;lt; endl;\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;最高成绩&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; arr[i].mGrade[maxindex].getName() &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; arr[i].mGrade[maxindex].getScore() &amp;lt;&amp;lt; endl;\n            cout &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34;最低成绩&amp;#xff1a;&amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; arr[i].mGrade[minindex].getName() &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;lt;&amp;lt; arr[i].mGrade[minindex].getScore() &amp;lt;&amp;lt; endl;\n            break;\n        }\n    }\n\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["三个小问题，本人0基础真的不会写，有偿求解答", ["（使用C/C++语言解答，一个程序每个子功能后都用//备注一下是发挥什么功能，谢谢 ! ）", "\n", "问题1", "\n", "问题2", "\n", "问题3"]], "Tag": "程序设计"}
{"Answer": "factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]\r\nlast = [1, 0, 'x', 9, 8, 7, 6, 5, 4, 3, 2]\r\n\r\nid_num = input('输入身份证号码:')\r\nif len(id_num) == 18:\r\n    count = 0\r\n    try:\r\n        for i in range(17):\r\n            count += int(id_num[i]) * factor[i]\r\n    except ValueError:\r\n        print('请输入数字')\r\n    last_num = last[count % 11]\r\n    if (id_num[17].lower() == last_num) or int(id_num[17]) == last_num:\r\n        print('身份证合法')\r\n        if int(id_num[16]) % 2:\r\n            print('男滴')\r\n        else:\r\n            print('女滴')\r\n    else:\r\n        print('不合法')\r\nelse:\r\n    print('输入有误,请重新输入')", "Konwledge_Point": "整型", "Question": ["这个问题如何解决？求指导", ["5．中华人民共和国居民身份证号码由17位数字和1位校验码组成。其中，前6位为所在地编号，第7~14位为出生年月日，第15~17位为登记流水号，其中第17位偶数为女性，奇数为男性。效验码的生成规则如下：", "\n    将前面的身份证号码17位数字分别乘以不同的系数。第1~17位的系数分别为：7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2，将这17位数字和系数相乘的结果相加，用相加的结果与11求模，余数结果只能是0,1,2,3,4,5,6,7,8,9,10这11个数字，它们分别对应的最后一位身份证的号码为1,0,X,9,8,7,6,5,4,3,2。", "\n    例如：如果余数是2，最后一位数字就是罗马数字X，如果余数是10，则身份证最后一位就是2.", "\n请设计程序实现输入18为身份证号，辨别其真伪。若为真，则进一步判断性别；若不是18位或身份证号非法，则提示重新输入。", "\n提示：定义如下两个元组，对输入字符串进行遍历。", "\nfactor=(7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2)", "\nlast=(“1”, “0”, “X”, “9”, “8”, “7”, “6”, “5”, “4”, “3”, “2”)"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The easiest and safest way is to copy it to a slice, not specifically to &lt;code&gt;[1024]byte&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;mySlice := C.GoBytes(unsafe.Pointer(&amp;amp;C.my_buff), C.BUFF_SIZE)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To use the memory directly without a copy, you can \"cast\" it through an &lt;code&gt;unsafe.Pointer&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;mySlice := (*[1 &amp;lt;&amp;lt; 30]byte)(unsafe.Pointer(&amp;amp;C.my_buf))[:int(C.BUFF_SIZE):int(C.BUFF_SIZE)]\n// or for an array if BUFF_SIZE is a constant\nmyArray := *(*[C.BUFF_SIZE]byte)(unsafe.Pointer(&amp;amp;C.my_buf))\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["如何将[1024] C.char转换为[1024] byte", ["\n\n", "How do I convert this C (array) type:", "\n\n", "char my_buf[BUF_SIZE];\n", "\n\n", "to this Go (array) type:", "\n\n", "type buffer [C.BUF_SIZE]byte\n", "\n\n", "? Trying to do an interface conversion gives me this error:", "\n\n", "cannot convert (*_Cvar_my_buf) (type [1024]C.char) to type [1024]byte\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;看看这个。&lt;br /&gt;&lt;a href=\"https://ask.csdn.net/questions/7729654/53805825\" id=\"textarea_1653752462204_1653752850941_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://ask.csdn.net/questions/7729654/53805825&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;max直接换会导致后面的顺序变乱&amp;#xff0c;循环中记录最大值的下标&amp;#xff0c;这一行扫描完了再交换。&lt;br /&gt;连接图上的max都没必要存在&amp;#xff0c;直接a[i][k]比较&amp;#xff0c;if中更改k的值。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["输入n和m的值(n<10,m<10)，以及一个 n×m的矩阵，找出每行中最大的元素并与该行第 1列的元素进行交换，输出交换后的矩阵", ["问题遇到的现象和发生背景", "\n", "输入n和m的值(n<10,m<10)，以及一个 n×m的矩阵，找出每行中最大的元素并与该行第 1列的元素进行交换，输出交换后的矩阵", "\n", "问题相关代码，请勿粘贴截图", "\n", "#include<stdio.h>", "int main(void)", "{", "    /", "Begin", "/", "   int n,m;", "   int a[10][10];", "   int i,j;", "   scanf(\"%d%d\",&n,&m);", "   for(i=0;i<n;i++)", "      for(j=0;j<m;j++)", "         scanf(\"%d\",&a[i][j]);", "   for(i=0;i<n;i++)", "    {", "        int max=a[i][0];", "        for(j=1;j<m;j++)", "        if(max<a[i][j])", "        {", "         max=a[i][j];", "         a[i][j]=a[i][0];", "         a[i][0]=max;", "        }", "    }", "   for(i=0;i<n;i++)", "   {", "    for(j=0;j<m;j++)", "    printf(\"%d \",a[i][j]);", "    printf(\"\\n\");", "   }", "    /", "End", "*/", "    return 0;", "}", "\n", "运行结果及报错内容", "\n", "5 1 2 3", "8 3 4 7", "9 2 1 3 ", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "5 2 1 3", "8 4 7 3", "9 2 1 3"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;网上有很多啊&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;  &lt;span class=\"hljs-title\"&gt;Fib&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; || n&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n      &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n   &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Fib&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;) &amp;#43; &lt;span class=\"hljs-built_in\"&gt;Fib&lt;/span&gt;(n&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n        sum &amp;#43;&amp;#61; &lt;span class=\"hljs-built_in\"&gt;Fib&lt;/span&gt;(i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\n&amp;#34;&lt;/span&gt;,sum);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["C语言编写一个递归函数 Fib，用于求Fabonacci的第n项数列。", ["题目描述:编写一个递归函数 Fib，用于求Fabonacci的第n项数列。", "如图所示"]], "Tag": "程序设计"}
{"Answer": "http://www.atguigu.com/download.shtml\r\n\r\n这个链接你点击进去,这里面的免费视频中有个bank项目,是java基础的,你看看就可以写出自己的了；\r\n其实也不难,主要就是数据库操作,用到事务罢了;\r\n\r\n如果回答对你有帮助,记得采纳", "Konwledge_Point": "整型", "Question": ["JAVA ATM类 很急 在线等", ["初学者求教，题目如下，谢谢大家了", "\n应用Java面向对象概念编写一个银行ATM系统Java应用，要求实现下列功能：", "\n\n", "1、查询余额", "\n2、存款", "\n2、取款；", "\n3、转账", "\n\n", "应用技术要求：", "\n1、要应用到Java面向对象技术（封装，基础和多态，也可有接口等技术）", "\n2、要求有图形界面作为界面，后台应用非图形界面", "\n3、可应用其他Java技术"]], "Tag": "程序设计"}
{"Answer": "提供参考\r\npublic static int byteToInt2(byte[] b) {\r\n\r\n                   int mask=0xff;\r\n                   int temp=0;\r\n                   int n=0;\r\n                   for(int i=0;i&lt;4;i++){\r\n                      n&lt;&lt;=8;\r\n                      temp=b[i]&amp;mask;\r\n                      n|=temp;\r\n                  }\r\n         return n;\r\n    }", "Konwledge_Point": "整型", "Question": ["JAVA byte[]数组转成int整数", ["用JAVA  把byte[]数组转成int整数", "\n\n", "怎么做呢？"]], "Tag": "程序设计"}
{"Answer": "用math.log10", "Konwledge_Point": "整型", "Question": ["C#怎么求一个整数是几位数，如果不转字符串的话？", ["C#怎么求一个整数是几位数，如果不转字符串的话？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;在Java中比long更大的数据类型可以使用浮点数double&amp;#xff0c;或者 BigInteger&amp;#xff0c;但是一般递归也不会得到这么大的数字呀&amp;#xff0c;除非是有意而为之&amp;#xff0c;或者如果递归写的有问题就会出现栈溢出&amp;#xff0c;报java.lang.StackOverflowError错误&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["JAVA中整数递归后的值long类型放不下咋办", ["JAVA中整数递归后的值long类型放不下咋办"]], "Tag": "程序设计"}
{"Answer": "import java.applet.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\npublic class Applet求两数之和 extends Applet implements ActionListener\r\n\r\n\r\n{\r\n int a1,a2,a3;\r\n TextField a;\r\n TextField b;\r\n Label c;\r\n Label d;\r\n Label g;\r\n Button f;\r\n \r\n public void init()\r\n {\r\n  c=new Label(\"请输入第一个数\");\r\n  d=new Label(\"请输入第二个数\");\r\n  f=new Button(\"求和\");\r\n  g=new Label(\"\");\r\n  a=new TextField(5);\r\n  b=new TextField(5);\r\n  this.add(c);this.add(a);this.add(d);this.add(b);this.add(f);this.add(g);\r\n  f.addActionListener(this);\r\n  \r\n }\r\n public void actionPerformed(ActionEvent e)\r\n {\r\n  a1=Integer.parseInt(a.getText());\r\n  a2=Integer.parseInt(b.getText());\r\n  a3=a1+a2;\r\n  g.setText(a3+\"\");\r\n  a.setText(\"\");\r\n  b.setText(\"\");\r\n }\r\n\r\n}", "Konwledge_Point": "整型", "Question": ["java 笔试题", ["[功能]：在两个文本框中输入数据，将两个数的和显示在第三个文本框中。", "\n（2）、编译并运行程序，将编写的代码和运行结果截图贴至下方。 "]], "Tag": "程序设计"}
{"Answer": "if (n = 1)\r\n-&gt;\r\nif (n == 1)", "Konwledge_Point": "整型", "Question": ["查找数组的算法，哪里错了", ["#include ", "\n\n", "int* search(int *p, int n, int x)", "\n{", "\n    if (n = 1) return *p == x ? p : NULL;", "\n    int *i = search(p, n / 2, x);", "\n    if (i) return i;", "\n    i = search(&p[n / 2],n-n/2, x);", "\n    if (i) return i; else return NULL;", "\n}", "\nint main()", "\n{", "\n    int a[] ={1,4,10,17,20,23,51};", "\n    int *n = search(&a[0], 7, 10);", "\n    printf(\"%d\", *n);", "\n    return 0;", "\n}"]], "Tag": "程序设计"}
{"Answer": "```\r\n for( i=1;i&lt;=10;i++){\r\n\t result*=i;\r\n }\r\n return result;\r\n```", "Konwledge_Point": "整型", "Question": ["求大神解答一到c题目一题", ["求10！，用c语言我知道怎么求出来，但是不知道怎么输出这个式子，就是输出1×2×3×4×5×6×7×8×9×10，不知道怎么输出"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/223459439866116.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/214089439866179.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;br /&gt;max的逻辑没有错&amp;#xff0c;但是名字和库里面的会冲突&amp;#xff0c;建议改成Max&lt;br /&gt;下面是帮你修改的代码&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; N 3&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Student&lt;/span&gt;\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; name[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; score[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; aver;\n};\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;input&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Student* p1)&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Student&lt;/span&gt;* &lt;span class=\"hljs-built_in\"&gt;Max&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Student* p2);&lt;span class=\"hljs-comment\"&gt;//max的名字改成首字母大写了&lt;/span&gt;\n\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Student* p3)&lt;/span&gt;&lt;/span&gt;;&lt;span class=\"hljs-comment\"&gt;//生命加上&lt;/span&gt;\n\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入3位学生的信息:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Student&lt;/span&gt;* p;\n    p &amp;#61; (&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Student*)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Student) * &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;);&lt;span class=\"hljs-comment\"&gt;//3个学生&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;application failed&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;memset&lt;/span&gt;(p, &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Student*));\n    &lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(p);\n\n    &lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;Max&lt;/span&gt;(p));\n    &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(p);\n    p &amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;input&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Student* p1)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; N; i&amp;#43;&amp;#43;, p1&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %f %f %f&amp;#34;&lt;/span&gt;, &amp;amp;(p1-&amp;gt;num), &amp;amp;(p1-&amp;gt;name), &amp;amp;(p1-&amp;gt;score[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]), &amp;amp;(p1-&amp;gt;score[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]), &amp;amp;(p1-&amp;gt;score[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]));\n        p1-&amp;gt;aver &amp;#61; (p1-&amp;gt;score[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#43; p1-&amp;gt;score[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#43; p1-&amp;gt;score[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]) / &lt;span class=\"hljs-number\"&gt;3.0&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Student&lt;/span&gt;* &lt;span class=\"hljs-built_in\"&gt;Max&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Student* p2)\n{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; N; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((p2 &amp;#43; i)-&amp;gt;aver &amp;gt; (p2 &amp;#43; m)-&amp;gt;aver)\n        {\n            m &amp;#61; i;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; (p2 &amp;#43; m);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;print&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; Student* p3)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;平均成绩最高的学生是&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;学生号:%d\\n学生姓名:%s\\n各个课程的成绩:%5.2f%5.2f%5.2f\\n平均成绩:%3.2f&amp;#34;&lt;/span&gt;, p3-&amp;gt;num, p3-&amp;gt;name, p3-&amp;gt;score[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], p3-&amp;gt;score[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], p3-&amp;gt;score[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;], p3-&amp;gt;aver);\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["问题：有n个结构体变量，内含学生学号、姓名和3门课程的成绩。要求输出平均成绩最高的学生的信息", ["问题遇到的现象和发生背景", "\n", "题目：有n个结构体变量，内含学生学号、姓名和3门课程的成绩。要求输出平均成绩最高的学生的信息", "不知道错在哪", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "#", "pragma", " ", "warning", "(disable : 4996) ", "\n", "#", "include", "<stdio.h>", "\n", "#", "include", "<stdlib.h>", "\n", "#", "define", " N 3", "\n\n", "struct", " ", "Student", "\n{\n    ", "int", " num;\n    ", "char", " name[", "20", "];\n    ", "float", " score[", "3", "];\n    ", "double", " aver;\n};\n\n", "int", " ", "main", "()", "\n", "{\n    ", "void", " ", "input", "(", "struct", " Student* p1)", ";\n    ", "struct", " ", "Student", "* ", "max", "(", "struct", " Student* p2);\n    ", "printf", "(", "\"输入3位学生的信息:\\n\"", ");\n    ", "struct", " ", "Student", "* p;\n    p = (", "struct", " Student*)", "malloc", "(", "sizeof", "(", "struct", " Student));\n    ", "if", " (p == ", "NULL", ")\n    {\n        ", "printf", "(", "\"application failed\"", ");\n        ", "return", " ", "-1", ";\n    }\n    ", "memset", "(p, ", "0", ", ", "sizeof", "(", "struct", " Student*));\n    ", "input", "(p);\n    ", "print", "(", "max", "(p));\n    ", "free", "(p);\n    p = ", "NULL", ";\n    ", "return", " ", "0", ";\n}\n\n", "void", " ", "input", "(", "struct", " Student* p1)", "\n", "{\n    ", "int", " i;\n    ", "for", " (i = ", "0", "; i < N; i++,p1++)\n    {\n        ", "scnaf", "(", "\"%d %s %f %f %f\"", ", &(p1->num), &(p1->name), &(p1->score[", "0", "]), &(p1->score[", "1", "]), &(p1->score[", "2", "]));\n        p1->aver = (p1->score[", "0", "] + p1->score[", "1", "] + p1->score[", "2", "]) / ", "3.0", ";\n    }\n}\n\n", "struct", " ", "Student", "* ", "max", "(", "struct", " Student* p2)\n{\n    ", "int", " i;\n    ", "int", " m = ", "0", ";\n    ", "for", " (i = ", "0", "; i < N; i++)\n    {\n        ", "if", " ((p2 + i)->aver > (p2 + m)->aver)\n        {\n            m = i;\n        }\n    }\n    ", "return", " (p2 + m);\n}\n\n", "void", " ", "print", "(", "struct", " Student* p3)", "\n", "{\n    ", "printf", "(", "\"平均成绩最高的学生是：\\n\"", ");\n    ", "printf", "(", "\"学生号:%d\\n学生姓名:%s\\n各个课程的成绩:%5.2f%5.2f%5.2f\\n平均成绩:%3.2f\"", ", p3->num, p3->name, p3->score[", "0", "], p3->score[", "1", "], p3->score[", "2", "], p3->aver);\n}\n\n", "\n", "运行结果及报错内容", "\n", "struct Student* max(struct Student* p2)函数报错"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;用数组、指针作为函数参数&amp;#xff0c;实际是一样的啊&lt;/p&gt;\n\n&lt;p&gt;void fun(int *p,int n)&lt;/p&gt;\n\n&lt;p&gt;void fun(int p[],int n)&lt;/p&gt;\n\n&lt;p&gt;没有区别&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["编写程序，用一个函数将一个3*4的整型矩阵转置，分别用数组、指针变量作为函数参数实现", ["编写程序，用一个函数将一个3*4的整型矩阵转置，分别用数组、指针变量作为函数参数实现"]], "Tag": "程序设计"}
{"Answer": "另外printf你又拼错了。", "Konwledge_Point": "整型", "Question": ["请高手看一段C程序代码不知道哪里出错了 ", []], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;第一题&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&amp;#96;&amp;#96;&amp;#96;c\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; argc, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (argc &amp;lt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请提供文件名作为参数\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 打开文件&lt;/span&gt;\n    FILE *file &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(argv[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;], &lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!file) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;无法打开文件: %s\\n&amp;#34;&lt;/span&gt;, argv[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 在文件中打印九九乘法表&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; j&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(file, &lt;span class=\"hljs-string\"&gt;&amp;#34;%d * %d &amp;#61; %d\\n&amp;#34;&lt;/span&gt;, i, j, i * j);\n        }\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 关闭文件&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;fclose&lt;/span&gt;(file);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n第二题\n\n&amp;#96;&amp;#96;&amp;#96;c\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;ctype.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;// 从键盘输入一个字符串&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入一个字符串&amp;#xff08;以&amp;#39;!&amp;#39;结束&amp;#xff09;&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; line[&lt;span class=\"hljs-number\"&gt;256&lt;/span&gt;];\n    &lt;span class=\"hljs-built_in\"&gt;fgets&lt;/span&gt;(line, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(line), stdin);\n\n    &lt;span class=\"hljs-comment\"&gt;// 把字符串中的小写字母全部转换成大写字母&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; line[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        line[i] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;toupper&lt;/span&gt;(line[i]);\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 将字符串保存到文件中&lt;/span&gt;\n    FILE *fp &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;test.txt&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;fputs&lt;/span&gt;(line, fp);\n    &lt;span class=\"hljs-built_in\"&gt;fclose&lt;/span&gt;(fp);\n\n    &lt;span class=\"hljs-comment\"&gt;// 从文件中读取字符串&amp;#xff0c;把其转换成小写字母并打印到屏幕上&lt;/span&gt;\n    fp &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;test.txt&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;fgets&lt;/span&gt;(line, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(line), fp);\n    &lt;span class=\"hljs-built_in\"&gt;fclose&lt;/span&gt;(fp);\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; line[i] !&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        line[i] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;tolower&lt;/span&gt;(line[i]);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;读取文件中的字符串&amp;#xff1a;%s\\n&amp;#34;&lt;/span&gt;, line);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;第三题&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; NUM_STUDENTS 5   &lt;span class=\"hljs-comment\"&gt;// 定义学生数量&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; NUM_COURSES 3    &lt;span class=\"hljs-comment\"&gt;// 定义每个学生的课程数量&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-keyword\"&gt;typedef&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; {        &lt;span class=\"hljs-comment\"&gt;// 定义学生信息结构体&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; id;             &lt;span class=\"hljs-comment\"&gt;// 学号&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; name[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];      &lt;span class=\"hljs-comment\"&gt;// 姓名&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; scores[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;];      &lt;span class=\"hljs-comment\"&gt;// 成绩&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; average;      &lt;span class=\"hljs-comment\"&gt;// 平均分&lt;/span&gt;\n} Student;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i, j;\n    Student students[NUM_STUDENTS];   &lt;span class=\"hljs-comment\"&gt;// 定义学生信息结构体数组&lt;/span&gt;\n    \n    &lt;span class=\"hljs-comment\"&gt;// 从键盘输入学生数据&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; NUM_STUDENTS; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入第%d个学生的信息&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;, i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;学号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;students[i].id);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;姓名&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, students[i].name);\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; NUM_COURSES; j&amp;#43;&amp;#43;) {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;第%d门课的成绩&amp;#xff1a;&amp;#34;&lt;/span&gt;, j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;students[i].scores[j]);\n        }\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 计算平均成绩&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; NUM_STUDENTS; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; NUM_COURSES; j&amp;#43;&amp;#43;) {\n            sum &amp;#43;&amp;#61; students[i].scores[j];\n        }\n        students[i].average &amp;#61; (&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt;)sum / NUM_COURSES;\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 将原有数据和平均成绩存放到文件中&lt;/span&gt;\n    FILE *fp &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;students.txt&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; NUM_STUDENTS; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-built_in\"&gt;fprintf&lt;/span&gt;(fp, &lt;span class=\"hljs-string\"&gt;&amp;#34;%d %s %d %d %d %.2f\\n&amp;#34;&lt;/span&gt;,\n                students[i].id, students[i].name,\n                students[i].scores[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], students[i].scores[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;],\n                students\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;第四题&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;// 定义文件名&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; file1[] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;file1.txt&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; file2[] &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;file2.txt&amp;#34;&lt;/span&gt;;\n\n    &lt;span class=\"hljs-comment\"&gt;// 打开文件&amp;#xff0c;以追加模式打开 file1&lt;/span&gt;\n    FILE *fp1 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(file1, &lt;span class=\"hljs-string\"&gt;&amp;#34;a&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (fp1 &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;无法打开文件%s&amp;#xff01;\\n&amp;#34;&lt;/span&gt;, file1);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 打开文件&amp;#xff0c;以读模式打开 file2&lt;/span&gt;\n    FILE *fp2 &amp;#61; &lt;span class=\"hljs-built_in\"&gt;fopen&lt;/span&gt;(file2, &lt;span class=\"hljs-string\"&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (fp2 &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;无法打开文件%s&amp;#xff01;\\n&amp;#34;&lt;/span&gt;, file2);\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 从 file2 中读取一行&amp;#xff0c;追加到 file1 末尾&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; line[&lt;span class=\"hljs-number\"&gt;256&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;fgets&lt;/span&gt;(line, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(line), fp2) !&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;fputs&lt;/span&gt;(line, fp1);\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 关闭文件&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;fclose&lt;/span&gt;(fp1);\n    &lt;span class=\"hljs-built_in\"&gt;fclose&lt;/span&gt;(fp2);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;第五题&lt;br /&gt;1&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 定义函数 Nw&amp;#xff0c;对 n 个字符开辟连续的存储空间&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *&lt;span class=\"hljs-title\"&gt;Nw&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *p &amp;#61; (&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(n);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;分配内存空间失败&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;exit&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; p;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;// 调用 Nw 函数&amp;#xff0c;分配内存空间&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *p &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Nw&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n\n    &lt;span class=\"hljs-comment\"&gt;// 向内存空间写入数据&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;sprintf&lt;/span&gt;(p, &lt;span class=\"hljs-string\"&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;);\n\n    &lt;span class=\"hljs-comment\"&gt;// 打印存储在内存空间中的字符串&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;, p);\n\n    &lt;span class=\"hljs-comment\"&gt;// 释放内存空间&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(p);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;2:&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 定义函数 Nw&amp;#xff0c;对 n 个字符开辟连续的存储空间&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *&lt;span class=\"hljs-title\"&gt;Nw&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *p &amp;#61; (&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *)&lt;span class=\"hljs-built_in\"&gt;malloc&lt;/span&gt;(n);\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (p &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;分配内存空间失败&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;exit&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; p;\n}\n\n&lt;span class=\"hljs-comment\"&gt;// 定义函数 Free&amp;#xff0c;将指定的内存段释放&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Free&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *p)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;free&lt;/span&gt;(p);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-comment\"&gt;// 调用 Nw 函数&amp;#xff0c;分配内存空间&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *p &amp;#61; &lt;span class=\"hljs-built_in\"&gt;Nw&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n\n    &lt;span class=\"hljs-comment\"&gt;// 向内存空间写入数据&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;sprintf&lt;/span&gt;(p, &lt;span class=\"hljs-string\"&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;);\n\n    &lt;span class=\"hljs-comment\"&gt;// 打印存储在内存空间中的字符串&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s\\n&amp;#34;&lt;/span&gt;, p);\n\n    &lt;span class=\"hljs-comment\"&gt;// 调用 Free 函数&amp;#xff0c;释放内存空间&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;Free&lt;/span&gt;(p);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["c语言基础这几个该怎么搞", ["\n", "实在不会搞关于文件这几个", "不会传，唉", "要求使用最开始那个main（int argc，char*const *argv）划重点！！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a[][&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; *p;\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; sum &amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        p&amp;#61; a[i];\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;j&amp;#43;&amp;#43;,p&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;#61;&amp;#61;j)\n                sum &amp;#43;&amp;#61; *p;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; sum;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入4*4的数组:\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;,&amp;amp;a[i][j]);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;对角线元素和等于%g&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(a,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;));\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["用c语言代码，求4*4矩阵的对角线之和", ["使用指针，函数，数组来实现。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/962789876466158.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n\n#include&amp;lt;iostream&amp;gt;\nusing namespace std;\n\n&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Date&lt;/span&gt;{                    &lt;span class=\"hljs-comment\"&gt;//日期类的定义&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;:\n    bool &lt;span class=\"hljs-title function_\"&gt;setDate&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;display&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;getMonth&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;);\n&lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt;:\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;month&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;;  &lt;span class=\"hljs-comment\"&gt;//存储日期的年、月、日&lt;/span&gt;\n}; &lt;span class=\"hljs-comment\"&gt;//获取月份的英文输出内容&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; Date::&lt;span class=\"hljs-title function_\"&gt;getMonth&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m){\n    &lt;span class=\"hljs-built_in\"&gt;month&lt;/span&gt; &amp;#61; m;\n\n}  &lt;span class=\"hljs-comment\"&gt;//设置成员变时&amp;#xff0c;如果成功赋值则返回ture&amp;#xff0c;否则返回false&lt;/span&gt;\nbool Date::&lt;span class=\"hljs-title function_\"&gt;setDate&lt;/span&gt;( &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; mm, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dd, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; yy) {\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (mm &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; dd &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; yy &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) {\n        &lt;span class=\"hljs-built_in\"&gt;month&lt;/span&gt; &amp;#61; mm;\n        &lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt; &amp;#61; dd;\n        &lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt; &amp;#61; yy;\n\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;false&lt;/span&gt;;\n}   &lt;span class=\"hljs-comment\"&gt;//在屏幕上显示日期&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; Date::&lt;span class=\"hljs-title function_\"&gt;display&lt;/span&gt;()\n{\n    &lt;span class=\"hljs-keyword\"&gt;enum&lt;/span&gt; months\n    {\n        January &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, February, March, April, May, June, July, August, September, October, November, December\n    };\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;month&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-title function_\"&gt;switch&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;month&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; January: cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;January&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;January&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;\n        &amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;January&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; February: cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;February&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;\n                           &amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;February&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; March: cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;March&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;\n                        &amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;March&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; April: cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;April&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;\n                        &amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;April&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; May: cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;May&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;\n                      &amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;May&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; June: cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;June&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;\n                       &amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;June&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; July: cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;July&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;\n                       &amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;July&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; August: cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;August&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;\n                         &amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;August&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; September: cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;September&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;\n                            &amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;September&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; October: cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;October&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;\n                          &amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;October&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; November: cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;November&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;\n                           &amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;November&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; December: cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;December&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;\n                           &amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;December&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;: cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;Error input\\n&amp;#34;&lt;/span&gt;; &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n}\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;main&lt;/span&gt;()   {\n\n    Date myDate;   &lt;span class=\"hljs-comment\"&gt;//存储日期&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;month&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;; &lt;span class=\"hljs-comment\"&gt;//临时存储年&amp;#xff0c;月&amp;#xff0c;日&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-literal\"&gt;true&lt;/span&gt;)\n    {\n        cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;请按yyyy格式输入年&amp;#xff1a;&amp;#34;&lt;/span&gt;;\n        cin&amp;gt;&amp;gt;&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;;\n        cin.&lt;span class=\"hljs-property\"&gt;ignore&lt;/span&gt;();&lt;span class=\"hljs-comment\"&gt;//用来清除输入缓冲区的内容&amp;#xff0c;清除上一次输入对下一次输入的影响&amp;#xff0c;默认为cin.ignore(1,EOF)&amp;#xff0c;即把EOF前的1个字符清掉&lt;/span&gt;\n        cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;请按mm格式输入月&amp;#xff1a;&amp;#34;&lt;/span&gt;;\n        cin&amp;gt;&amp;gt;&lt;span class=\"hljs-built_in\"&gt;month&lt;/span&gt;;\n        cin.&lt;span class=\"hljs-property\"&gt;ignore&lt;/span&gt;();\n        cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;请按dd格式输入日&amp;#xff1a;&amp;#34;&lt;/span&gt;;\n        cin&amp;gt;&amp;gt;&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;;\n        cin.&lt;span class=\"hljs-property\"&gt;ignore&lt;/span&gt;();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(myDate.&lt;span class=\"hljs-property\"&gt;setDate&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;month&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;))\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;日期输入错&amp;#xff01;请重新输入&amp;#xff1a;&amp;#34;&lt;/span&gt;;\n    }\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;你输入的日期是&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;;\n    myDate.&lt;span class=\"hljs-property\"&gt;display&lt;/span&gt;();     &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["设计date类，采用整数储存日期", ["设计Date类，该类采用整数存储日期：month、day和year。其函数成员具有按如下方式输出日期的功能：5-25-2015May 25,201525 May 2015写一个完整程序，检验此类。注意：对于日期day成员，不能接受大于31或小于1的值，对于月month，不能接受大于12或小于1的值。1）部分参考程序，仅参考，可以有不一样的设计思路。", "\n", "#", "include", "<iostream>", "\n", "using", " ", "namespace", " std;\n", "class", " ", "Date", "{                    ", "//日期类的定义     ", "\n", "public", ":        \n", "bool", " ", "setDate", "(", "int", ", ", "int", ", ", "int", ")", ";        \n", "void", " ", "display", "()", ";        \n", "char", " *", "getMonth", "(", "int", ")", ";    \n", "private", ":        \n", "int", " year,month,day;  ", "//存储日期的年、月、日", "\n }; ", "//获取月份的英文输出内容", "\n", "char", " *", "Date::getMonth", "(", "int", " m)", "{    \n…… \n}  ", "//设置成员变时，如果成功赋值则返回ture，否则返回false", "\n", "bool", " ", "Date::setDate", "( ", "int", " mm, ", "int", " dd, ", "int", " yy)", " ", "{     \n……  \n}   ", "//在屏幕上显示日期", "\n", "void", " ", "Date::display", "()", "  \n", "{      \n……  \n }    \n", "int", " ", "main", "()", "   ", "{       \nDate myDate;   ", "//存储日期    ", "\n", "int", " year,month,day; ", "//临时存储年，月，日    ", "\n", "while", "(", "true", ")    \n{        \ncout<<", "\"请按yyyy格式输入年：\"", ";        \ncin>>year;        \ncin.", "ignore", "();", "//用来清除输入缓冲区的内容，清除上一次输入对下一次输入的影响，默认为cin.ignore(1,EOF)，即把EOF前的1个字符清掉        ", "\ncout<<", "\"请按mm格式输入月：\"", ";        \ncin>>month;        \ncin.", "ignore", "();        \ncout<<", "\"请按dd格式输入日：\"", ";        \ncin>>day;        \ncin.", "ignore", "();        \n", "if", "(myDate.", "setDate", "(month,day,year))  \n", "break", ";        \n", "else", " cout<<", "\"日期输入错！请重新输入：\"", ";     \n}      \ncout<<", "\"你输入的日期是：\\n\"", ";     \nmyDate.", "display", "();     ", "return", " ", "0", ";       \n}\n", "\n", "2）运行结果", "请按（四个y）格式输入年：2015", "请按mm格式输入月：5", "请按dd格式输入日：25", "你输入的日期是：5-25-2015", "May 25,2015", "25 May 2015"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    \"encoding/json\"\n\n    \"fmt\"\n    \"strconv\"\n)\n\nvar jsonData = []byte(`\n{\n    \"user\": {\n        \"media_count\": 2043,\n        \"follower_count\": 663,\n        \"following_count\": 1300,\n        \"geo_media_count\": 0,\n        \"is_business\": false,\n        \"usertags_count\": 423,\n        \"has_chaining\": true,\n        \"is_favorite\": false,\n        \"has_highlight_reels\": true,\n        \"include_direct_blacklist_status\": true,\n        \"pk\": 145250410,\n        \"username\": \"karahray\",\n        \"full_name\": \"K Ray \\ud83d\\udd35\",\n        \"has_anonymous_profile_picture\": false,\n        \"is_private\": false,\n        \"is_verified\": false,\n        \"profile_pic_url\": \"\",\n        \"profile_pic_id\": \"1403809308517206571_145250410\",\n        \"biography\": \"Austinite, oncology dietitian, lover of food, coffee, beer, scenic jogs, traveling, Los Spurs, my Yorkies and LAUGHING! Fitness/food @LGFTatx!\",\n        \"external_url\": \"\",\n        \"hd_profile_pic_url_info\": {\n            \"height\": 1080,\n            \"url\": \"\",\n            \"width\": 1080\n        },\n        \"hd_profile_pic_versions\": [{\n            \"height\": 320,\n            \"url\": \"\",\n            \"width\": 320\n        }, {\n            \"height\": 640,\n            \"url\": \"\",\n            \"width\": 640\n        }], \n        \"reel_auto_archive\": \"on\",\n        \"school\": null,\n        \"has_unseen_besties_media\": false,\n        \"auto_expand_chaining\": false\n    },\n    \"status\": \"ok\"\n}`)\n\n\n// custom json unmarshal\ntype pk string\n\nfunc (p *pk) UnmarshalJSON(data []byte) error {\n    var tmp int\n    if err := json.Unmarshal(data, &amp;amp;tmp); err != nil {\n        return err\n    }\n    *p = pk(strconv.Itoa(tmp))\n    return nil\n}\n\ntype jsonModel struct {\n    User struct {\n        PK pk `json:\"pk\"`\n    } `json:\"user\"`\n}\n\nfunc main() {\n    // using the custom json unmarshal\n    jm := &amp;amp;jsonModel{}\n    if err := json.Unmarshal(jsonData, jm); err != nil {\n        panic(err)\n    }\n\n    // doing it as map[string]interface, then finding the key, \n    // then converting - you end up needing TONS of casting \n    everything := map[string]interface{}{}\n    if err := json.Unmarshal(jsonData, &amp;amp;everything); err != nil {\n        panic(err)\n    }\n\n    var userPart interface{}\n    userPart, ok := everything[\"user\"]\n    if !ok {\n        panic(\"could not find user key\")\n    }\n    userPartMap := userPart.(map[string]interface{})\n    var pkInterface interface{}\n\n    if pkInterface, ok = userPartMap[\"pk\"]; !ok {\n        panic(\"could not find pk key\")\n    }\n\n    // note that json is going to 'guess' float64 here, so we \n    // need to do a lot of shenanigans.\n    pkString := strconv.FormatInt(int64(pkInterface.(float64)),10)\n\n    fmt.Printf(\"%s\n\", jm.User.PK)\n    fmt.Printf(\"%s\n\", pkString)\n\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;p&gt;145250410 &lt;/p&gt;\n\n&lt;p&gt;145250410&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://play.golang.org/p/OfHi0ybHJXE\" rel=\"nofollow noreferrer\"&gt;https://play.golang.org/p/OfHi0ybHJXE&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["Golang将json值从int转换为字符串", ["\n\n", "I get json response. Which has key pk and it's value as int. I need to convert it as string, what is the easiest way? Here is the example", "\n\n", "\"pk\": 145250410 ", "\n\n", "and i need it to be", "\n\n", "\"pk\": \"145250410\"", "\n\n", "I can not make model, and parse it bacause i don't always know what will my json be like, but i know it will always have pk, so this is how i parse it.", "\n\n", "var bdoc interface{}\nbson.UnmarshalJSON([]byte(gjson.Get(*str, \"user\").String()), &bdoc)\n", "\n\n", "The only problem is that i get pk as int not as string.", "\n    "]], "Tag": "程序设计"}
{"Answer": "第9题\r\n第四行写错了，是 scanf(\"%d\", &amp;base);下面  num[i] = n % base;  n =  n / base; for (j=i-1;j&gt;=0;j--)\r\n其余问题，打开 https://tool.lu/coderunner\r\n下拉选择c语言\r\n把代码贴上去，就有结果\r\n比如\r\n\r\n```\r\n#include &lt;stdio.h&gt;\r\n\r\nint main () {\r\n\tint z,y[3]={1,2,3};z=y[y[1]];printf(\"%d\",z);\r\n\treturn 0;\r\n}\r\n```\r\n![图片说明](https://img-ask.csdn.net/upload/202005/17/1589683481_470458.png)\r\n\r\n运行，右边结果 3\r\n\r\n# 问题解决，请点下采纳", "Konwledge_Point": "整型", "Question": ["C语言基础题，麻烦解答一下谢谢", ["图片上的答案正确性未知"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;&lt;code&gt;strconv.AppendUint&lt;/code&gt; appears to be faster than &lt;code&gt;fmt.Sprintf&lt;/code&gt;. For example,&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;hex_test.go&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    \"fmt\"\n    \"strconv\"\n    \"testing\"\n)\n\nfunc BenchmarkFmtSprintf(b *testing.B) {\n    b.ReportAllocs()\n    for n := 0; n &amp;lt; b.N; n++ {\n        hexNumber := fmt.Sprintf(\"%04x\", n&amp;amp;0xFFFF)\n        _ = hexNumber\n    }\n}\n\nfunc BenchmarkAppend(b *testing.B) {\n    b.ReportAllocs()\n    for n := 0; n &amp;lt; b.N; n++ {\n        buf := []byte{'0', '0', '0', 3 + 4: 0}\n        buf = strconv.AppendUint(buf[:3], uint64(n)&amp;amp;0xFFFF, 16)\n        hexNumber := string(buf[len(buf)-4:])\n        _ = hexNumber // Do some stuff ....\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ go test -bench=. hex_test.go\nBenchmarkSprintf-4      10000000       116 ns/op      16 B/op     1 allocs/op\nBenchmarkAppend-4       100000000       19.2 ns/op     0 B/op     0 allocs/op\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["将int转换为十六进制字符串，然后在Golang中用0填充的有效方法？", ["\n\n", "I'm trying to convert 10 millions of int to Hex, then, padding it with 0's in order to get a 4 characters string which represents the Hex number.", "\n\n", "So far, I tried the following:", "\n\n", "var hexNumber string\nfor idx := O; idx < 10000000; idx++ {\n    hexNumber = fmt.Sprintf(\"%04x\", idx)\n\n    // Do some stuff ....\n}\n", "\n\n", "But ", "fmt.Sprintf", " is not very efficient. How can I achieve this in a efficient way?", "\n\n", "Solution:", " It turns out that @peterSO ", "strconv.AppendInt", " solution is way faster.", "\n\n", "package bench\n\nimport (\n    \"fmt\"\n    \"strconv\"\n    \"strings\"\n    \"testing\"\n)\n\nvar stringHex [16]string\nvar runesHex [16]rune\n\nfunc init() {\n    stringHex = [16]string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    runesHex = [16]rune{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n}\n\nfunc intToHex1(intNumber int) string {\n    hexNumber := []rune(\"0000\")\n    for i, j := int(0), uint(12); i < 4; i, j = i+1, j-4 {\n        hexNumber[i] = runesHex[(intNumber>>j)&0x0f]\n    }\n    return string(hexNumber)\n}\n\nfunc intToHex2(intNumber int) string {\n    hexNumber := \"0000\"\n    for i, j := int(0), uint(12); i < 4; i, j = i+1, j-4 {\n        hexNumber = hexNumber[:i] + stringHex[(intNumber>>j)&0x0f] + hexNumber[i+1:]\n    }\n    return hexNumber\n}\n\nfunc BenchmarkFmtSprintf(b *testing.B) {\n    b.ReportAllocs()\n    for n := 0; n < b.N; n++ {\n        hexNumber := fmt.Sprintf(\"%04x\", n)\n        _ = hexNumber\n    }\n}\n\nfunc BenchmarkStrconvFormatInt(b *testing.B) {\n    b.ReportAllocs()\n    for n := 0; n < b.N; n++ {\n        retStr := strings.Repeat(\"0\", 4) + strconv.FormatInt(int64(n), 16)\n        hexNumber := retStr[(len(retStr) - 4):]\n        _ = hexNumber\n    }\n}\n\nfunc BenchmarkAppend(b *testing.B) {\n    b.ReportAllocs()\n    buf := []byte{'0', '0', '0', '0', 4 + 16: 0}\n    for n := 0; n < b.N; n++ {\n        buf = strconv.AppendInt(buf[:4], int64(n), 16)\n        hexNumber := string(buf[len(buf)-4:])\n        _ = hexNumber\n    }\n}\n\nfunc BenchmarkIntToHex1(b *testing.B) {\n    b.ReportAllocs()\n    for n := 0; n < b.N; n++ {\n        hexNumber := intToHex1(n)\n        _ = hexNumber\n    }\n}\n\nfunc BenchmarkIntToHex2(b *testing.B) {\n    b.ReportAllocs()\n    for n := 0; n < b.N; n++ {\n        hexNumber := intToHex2(n)\n        _ = hexNumber\n    }\n}\n", "\n\n", "So the benchmark:", "\n\n", "BenchmarkFmtSprintf-2            3000000               364 ns/op              16 B/op          2 allocs/op\nBenchmarkStrconvFormatInt-2      5000000               354 ns/op              15 B/op          3 allocs/op\nBenchmarkAppend-2               20000000                75.6 ns/op             0 B/op          0 allocs/op\nBenchmarkIntToHex1-2            10000000               162 ns/op               8 B/op          1 allocs/op\nBenchmarkIntToHex2-2             3000000               536 ns/op              16 B/op          4 allocs/op\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;用一个字符串指针数组存0到9的拼音&amp;#xff0c;然后用输入的数字作为下标对应输出就好了&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言中怎么将输入的整数以汉字形式输出", ["\n", "各位帮忙看一看，感激不尽！！", "C语言中怎么将输入的整数以汉字形式输出", "C语言中怎么将输入的整数以汉字形式输出"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; s[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入 10个字符&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;) {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;, &amp;amp;s[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;; i&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;, s[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["定义一个长度为10的char类型的数组，输入10个字符，然后将其逆序输出。", ["定义一个长度为10的char类型的数组，输入10个字符，然后将其逆序输出。", "（35分）", "任务描述：", "定义一个长度为10的char类型的数组，输入10个字符，然后将其逆序输出。", "#include<stdio.h>", "int main()", "{", "    char s[10];", "    int i;", "    printf(\"请输入 10个字符：\");", "/", "作答区域", "/", "\n", "/", "作答区域", "/", "    return 0;", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;先读一下题干&amp;#xff0c;问的是下列语句正确的是&amp;#xff0c;指的就是下列语句可以正常运行的是。&lt;br /&gt;那理解了题干就好选了。&lt;/p&gt;\n&lt;ul&gt;&lt;li&gt;A&amp;#xff1a;&amp;amp;*a &amp;#61; 3&amp;#xff0c;指想给(*a)的地址赋值为3&amp;#xff0c;但是a不是指针&amp;#xff0c;所以不能这样赋值&amp;#xff1b;&lt;/li&gt;&lt;li&gt;B&amp;#xff1a;*a &amp;#61; 4&amp;#xff0c;同理&amp;#xff0c;a不是指针&amp;#xff0c;所以不能这样赋值&amp;#xff0c;可以这样&amp;#xff1a;a &amp;#61; 4 是可以正常赋值的&lt;/li&gt;&lt;li&gt;C&amp;#xff1a;&lt;em&gt;p是int型指针&amp;#xff0c;&lt;/em&gt;p &amp;#61; 7&amp;#xff0c;可以赋值成功&lt;/li&gt;&lt;li&gt;D&amp;#xff1a;因为 *p 是int型指针&amp;#xff0c;所以 p代表的是内存地址&amp;#xff0c;而内存地址是0xXXXXX格式的&amp;#xff0c;结果p&amp;#61;3.14格式不对&lt;/li&gt;&lt;/ul&gt;\n&lt;p&gt;个人愚见&amp;#xff0c;不知道有没有解答你的问题&amp;#xff1f;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;回复不易&amp;#xff0c;如果我的回复对你有所帮助的话&amp;#xff0c;请记得采纳哦&amp;#xff5e;&lt;/strong&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["请教下面的题为啥选C，原理是什么", ["已知定义：“int a=8,*p=&a;”，则下列语句正确的是（ ）。", "A. &*a=3", "B. *a=4", "C. *p=7", "D. p=3.14"]], "Tag": "程序设计"}
{"Answer": "整形值和浮点数没有什么必然联系，当然不会改变的。", "Konwledge_Point": "整型", "Question": ["下位机上传整形数和上传浮点数同时进行，整形数的值会改变浮点数的精度么？", ["下位机上传整形数和上传浮点数同时进行，整形数的值会改变浮点数的精度么？怎么区分不同的数据类型？"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Implement database/sql/driver.Valuer with a custom type:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type int64array []int64\n\nfunc (a int64array) Value() (driver.Value, error) {\n    // Format a in PostgreSQL's array input format {1,2,3} and return it as as string or []byte.\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["在Golang中将数组插入Postgresql数据库", ["\n\n", "I want to be able to write an array of bigints into a table that I am using for history in Go. Unfortunately, I can't and when I do the error ", "sql: converting Exec argument #1's type: unsupported type []int64, a slice", " is thrown. Here's what I'm doing, edited for brevity:", "\n\n", "type Card struct {\n    cid int64\n}\n\ntype Transaction struct {\n        tid, cardid int64\n        productids []int64\n        salepoint int\n        cardkey string\n}\n\nfunc logPurchase(card *Card, t *Transaction) {\n     _, err := db.Exec(\"INSERT INTO history VALUES ($1, $2, $3, $4)\", rand.Int63(), t.productids, card.cid, t.salepoint);\n}\n", "\n\n", "This is the structure of the table that I wish to insert into:\n", "tid bigint primary key, productids bigint[] not null, cardid bigint not null, salepoint int", "\n    "]], "Tag": "程序设计"}
{"Answer": "因为你服务器端是gbk的，前端和服务端编码要一致", "Konwledge_Point": "整型", "Question": ["新手求助:网页乱码问题   在线等", ["求助:html文件编码格式为utf8,设置了,文件直接使用浏览器打开是没问题的,但是为什么在服务器端打开就乱码了呢?将meta设置为gbk就恢复正常了,是什么原因呢?", "\n三个图片为同一文件"]], "Tag": "程序设计"}
{"Answer": "unsigned n,i=0,j,k;//这里看不懂。。\r\n是unsigned int吧，无符号和有符号的区别是 有符号的最高位是符号位 0为正 1为负，负数在计算机中是以补码的形式存储的。无符号就是所有位都是存储数据的 没有符号位。", "Konwledge_Point": "整型", "Question": ["求解  将一个无符号整数转换为二进制表示存入字符数组的问题", ["#include \"stdio.h“", "\n#define N 20", "\nvoid main()", "\n{ char bin[N],c;", "\n  unsigned n,i=0,j,k;//这里看不懂。。", "\n  scanf(\"%d\",&n);", "\n   do {  bin[i++]=n%2+'0';", "\n            n/=2;", "\n        }while (n!=0);", "\n   bin[i]='\\0';", "\n   for(j=0,k=i-1;j<k;j++,k--)", "\n     { c=bin[j]; ", "\n        bin[j]=bin[k];", "\n        bin[k]=c;}", "\n    puts(bin);", "\n }", "\n 关于 unsigned用法问题 求解 谢谢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;图挂了&amp;#xff0c;重新贴一下&lt;br /&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; F,c;\n    \n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;,&amp;amp;F);\n    c &amp;#61; (F&lt;span class=\"hljs-number\"&gt;-32&lt;/span&gt;)*(&lt;span class=\"hljs-number\"&gt;5.0&lt;/span&gt;/&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%f&amp;#34;&lt;/span&gt;,c);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n} \n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["PTA华氏度与摄氏度转换题目", ["作业在DEVC++中可以正常编译和计算，但是在PTA中却总是提示答案错误，错误如图。希望各位大佬帮忙指点一下_(:* ｣∠)_"]], "Tag": "程序设计"}
{"Answer": "int *data其实也可以写成int data[];\r\n就是在内存地址中创建一个名为data的指针，这个指针的地址也是数组data[]的地址；\r\n(*l).data=(int *)malloc(3*sizeof(int));这句话的意思是为data开辟一个可以存放三个整型的空间，不算是动态开辟空间，因为没有循环而已源程序也指定了只开辟三个int空间而已。", "Konwledge_Point": "整型", "Question": ["【线性表问题】线性表创建时的一点问题", ["typedef struct{", "\n   int *data;", "\n   int length;", "\n}sqlist;", "\n\n", "void init_list(sqlist *l){", "\n    (*l).data=(int *)malloc(3*sizeof(int));", "\n    if(!(*l).data)printf(\"error!\");", "\n    (*l).length=0;", "\n}", "\n\n", "int *data;和(*l).data=(int *)malloc(3*sizeof(int));，这两句话的意思是不是，创建一个int型指针*data指向data，然后为data开辟动态空间？"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;\n&lt;code class=\"language-python\"&gt;n &amp;#61; int(input(&amp;#39;输入分钟数&amp;#xff1a;&amp;#39;))\nh &amp;#61; n//60\ns &amp;#61; n%60\nprint(&amp;#34;可以换算成&amp;#xff1a;&amp;#34;,h,&amp;#34;小时&amp;#34;,s,&amp;#34;分钟&amp;#34;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["python分钟数转换成小时和分钟", ["\n\n", " "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;Java 语言整型常量的三种表示形式&lt;br /&gt;十进制整数&lt;br /&gt;如&amp;#xff1a;99, -5, 0&lt;br /&gt;八进制数&lt;br /&gt;要求以 0 开头&amp;#xff0c;如&amp;#xff1a;012&lt;br /&gt;十六进制数&lt;br /&gt;要求以0x 或 0X 开头&amp;#xff0c;如&amp;#xff1a;0x13&lt;/p&gt;\n&lt;p&gt;这个0x3fedL小写也是没问题的,最后L表示长整型的含义&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["Java整型常量问题", ["请大家详细解答每个选项，感谢大家", "\n", "还有，这个D选项是不是错了，字母不是A~F吗，为什么有小写字母，小写字母这种写法是对的吗。要怎么看是不是整型"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;第12行修改为&amp;#xff1a;scanf_s(&amp;#34;%d %s %d&amp;#34;, &amp;amp;a.num, a.name, sizeof(a.name), &amp;amp;a.score);&lt;br /&gt;第14行修改为&amp;#xff1a;scanf_s(&amp;#34;%d %s %d&amp;#34;, &amp;amp;b.num, b.name, sizeof(b.name), &amp;amp;b.score);&lt;br /&gt;输入时&amp;#xff0c;三个参数间以 空格符  间隔&amp;#xff1a;1001 王五 90&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言使用scanf输入数据后，显示访问冲突怎么解决？", ["问题：", "\n", "\n# ", "include", "<stdio.h>\n", "int", " main", "()", "\n{\n    ", "struct", " Student\n    {\n        ", "int", " num;\n        ", "char", " name", "[", "29", "]", ";\n        ", "int", " score;\n    }a, b;\n    printf(", "\"请输入第一个学生的学号 姓名 分数：\"", ");\n    scanf", "_s(", "\"%d,%s,%d\"", ",&", "a", ".", "num", ",&", "a", ".", "name", ",&", "a", ".", "score", ",", "sizeof", "(", "a", ".", "name", ")", ");\n    printf(", "\"请输入第二个学生的学号 姓名 分数：\"", ");\n    scanf", "_s(", "\"%d,%s,%d\"", ",&", "b", ".", "num", ",&", "b", ".", "name", ",&", "b", ".", "score", ",", "sizeof", "(", "b", ".", "name", ")", ");\n    ", "if", " (a.score > b.score)\n        printf(", "\"较高分学生信息：\\n num:%d\\n name:%s\\n score:%d\\n\"", ", a.num, a.name, a.score);\n    ", "else", " ", "if", " (a.score", " == ", "b.score)\n        printf(", "\"两学生成绩相同，不输出较高分学生信息。\"", ");\n    ", "else", "\n        printf(", "\"较高分学生信息：\\n num:%d\\n name:%s\\n score:%d\\n\"", ", b.num, b.name, b.score);\n    return;\n}\n", "\n", "运行后输入第一行数据，回车：", "\n", "\n", "然后就显示冲突了：", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;One approach would be to use &lt;a href=\"https://golang.org/pkg/sort/#Slice\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;sort.Slice(...)&lt;/code&gt;&lt;/a&gt; with a \"less\" (comparator) function that simply returns the lesser of the distance of the two given values from the target value.&lt;/p&gt;\n\n&lt;p&gt;For example (&lt;a href=\"https://play.golang.com/p/ABJp-LoIIRQ\" rel=\"nofollow noreferrer\"&gt;Go Playground&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func main() {\n  xs := []int{2781, 4706, 1347, 1192, 3087, 2920, 198, 2312, 930, 3284, 1677, 3687, 2011, 4107, 4148, 4195, 2159, 1263, 2918, 2503}\n  sortByDistanceFrom(1200, xs)\n  fmt.Println(xs)\n  // [1192 1263 1347 930 1677 2011 2159 198 2312 2503 2781 2918 2920 3087 3284 3687 4107 4148 4195 4706]\n\n}\n\nfunc sortByDistanceFrom(x int, xs []int) {\n  sort.Slice(xs, func(i, j int) bool {\n    di := math.Abs(float64(x - xs[i]))\n    dj := math.Abs(float64(x - xs[j]))\n    return di &amp;lt; dj\n  })\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the fourth value returned by this example is 930 instead of 1677 produced by your sample output because it computes the absolute distance to the target number (&lt;code&gt;|1200-1677|=433 &amp;gt; |1200-930|=270&lt;/code&gt;). If you want to prefer values greater than the target to values less than the target then you would have to modify your comparator function accordingly.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["在golang中排序int切片", ["\n\n", "say I have an int slice containing the following numbers: 2781,4706,1347,1192,3087,2920,198,2312,930,3284,1677,3687,2011,4107,4148,4195,2159,1263,2918,2503", "\n\n", "I want to sort them based on how close they are away from a certain value.\nFor example, say my value was 1200.", "\n\n", "My slice after being sorted would be: 1192,1263,1347,1677,2011,2159,2312,2503,2781,2918,2920,3087,3284,3687,4107,4148,4195,4706,930,198", "\n\n", "I tried the approach of iterating through the array, subtracting my  specified value, then sorting in ascending order ultimately adding the value again to return to my original number. This approach wouldn't work in all test cases, and I know its bad practice since I'm mutating the array.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&amp;lt;组建B :init&amp;#61;&amp;#34;cc&amp;#34;/&amp;gt; &amp;lt;组建B :ceshi&amp;#61;&amp;#34;789&amp;#34;/&amp;gt;&lt;br /&gt;你写了两次&amp;#xff0c;肯定会掉两次&amp;#xff0c;你的init一样 会出现 undefined&amp;#xff0c;props 加个default,不传参数的默认值&lt;br /&gt;把两个参数写在一个组件上面或者  要调用两次不同场景 请用 v-if销毁 组件&amp;#xff0c;避免相互干扰&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["VUE同级传值多出undefined的问题", ["组件A跟组件B是同级的，都在components文件夹。", "\n", "组建A给组建B传值。组建A的代码很简单", "\n\n<组建B :init=\"cc\"/>\n<组建B :ceshi=\"789\"/>\n", "组建B接收并输出，在视图层可以说是没有问题的，因为数据都可以正常显示出来。", "\n", "export default {", "    props:{", "        init:{type:Array},", "        ceshi:{type:Number},", "    },", "    setup(props) {", "       const num = props.init", "       console.log(num);", "       const num1=props.ceshi", "    //    console.log(num1);       ", "\n", "    ", "return", " {", "num", ",num1}\n},  \n", "\n", "}", "\n", "然而在设置样式的时候，发现是有问题的，在控制台发现，输出数组的时候后面还跟着一个 undefined，所以我样式设置没效果，因为这个数组好像已经不是一个数组了。", "\n", "03:15:11 379", "\n", "Array(9) [ 输出的数组数据，12345一类的]", "\n", "03:15:11 380 undefined", "\n", "于是又测试直接传个789，发现也是会有两个数据，但是跟数组这里又不同，789第一次没有获取到，第二次才获取到。", "\n", "03:25:06 644 undefined ", "\n", "03:25:06 645 789", "\n", "我的问题是，是什么原因导致了这个undefined 的出现，已经如何解决掉这个，我只是想要那个数组的数据，不过也没整明白这个undefined 咋出来的，除了这个undefined 的出现，是没有任何报错的。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;e是以10为底的科学表示法&amp;#xff0c;所以e后面必须有&amp;#43;或-表示幂&amp;#xff0c;不然程序无法理解5.6e中的e是什么意思。&lt;br /&gt;所以题目中的1.23e-4&amp;#43;5.6e&amp;#43;78j在程序看来&amp;#xff0c;就是 (1.23e-4) &amp;#43; (5.6e&amp;#43;78) j&lt;br /&gt;所以实数是1.23e-4&amp;#xff0c;虚数是5.6e&amp;#43;78&lt;br /&gt;选项里只有小数展开的0.000123正确。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["python中复数的实数部分输出", ["上面输出复数的实数为什么不选D呀，它是怎么转化的呀?求一个解析"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;\n#include&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;\nusing namespace std;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;1000&lt;/span&gt;];\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;,m;\n    cin&amp;gt;&amp;gt;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;&amp;gt;&amp;gt;m;\n    &lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;*m;\n    &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; minx&amp;#61;INT_MAX;\n    for(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        cin&amp;gt;&amp;gt;a[i];\n        minx&amp;#61;&lt;span class=\"hljs-built_in\"&gt;min&lt;/span&gt;(minx,a[i]);\n    }\n    long long &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    for(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;lt;&amp;#61;&lt;span class=\"hljs-built_in\"&gt;n&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;&amp;#43;&amp;#61;a[i]-minx;\n    }\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["求c++启蒙题目的答案。", ["描述", "Gx有一个H行、M列的方格，方格第i行、第j列的位置上有个木块。每个位置上的木块数量不一定相同。Gx有一定程度的强迫症，她希望每一个位置上的木块个数相同。请问在给定方格情况下，需要去除多少木块才能使每一个位置上的木块个数相同。", "\n", "输入", "输入有H+1行，", "第一行输入两个整数H和W，分别表示方格的行数和列数。", "其后H行，每一行输入W个整数，表示第i行、第j列的木块个数。", "输出", "输出需要去除的木块个数。", "样例输入", "样例输入1", "2 3", "2 2 3", "3 2 2", "样例输入2", "3 3", "99 99 99", "99 0 99", "99 99 99", "样例输入3", "3 2", "4 4", "4 4", "4 4", "样例输出", "样例输出1", "2", "样例输出2", "792", "样例输出3", "0"]], "Tag": "程序设计"}
{"Answer": "```\r\n#include &lt;iostream&gt;\r\n#include &lt;fstream&gt;\r\nusing namespace std;\r\n \r\nint main()\r\n{\r\n    float data[4];\r\n    fstream  afile;\r\n    afile.open(\"array.dat\", ios::app|ios::out|ios::in);\r\n\t\tfor (int i = 0; i &lt; 4; i++) {\r\n    cin&gt;&gt;data[i];\r\n    afile&lt;&lt;data[i];\r\n    afile&gt;&gt;data[i];\r\n\t\t}\r\n    afile.close();\r\n\t\tfor (int i = 0; i  &lt; 3; i++)\r\n\t\tfor (int j = 0; j &lt; 3; j++)\r\n\t\t{\r\n\t\tif (data[j] &lt; data[j + 1])\r\n\t\t{\r\n\t\tfloat t = data[j]; data[j] = data[j + 1]; data[j + 1] = t;\r\n\t\t}\r\n\t\t}\r\n\t\tfor (int i = 0; i &lt; 4; i++)\r\n\t\tcout &lt;&lt; data[i] &lt;&lt; \" \";\r\n    return 0;\r\n}\r\n```", "Konwledge_Point": "整型", "Question": ["把一个数组写到二进制文件，然后从文件中读出来？", ["编写程序（C++），输入四个整数到一个整数数组，先把该数组写到二进制文件array.dat，然后从文件中读出来，最后按从大到小的顺序依次输出。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    \n    \n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%u\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(c));\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%u\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&amp;#43;c));\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%u\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(!c));\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n} \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/361489046446180.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;结果就是1、4、4&amp;#xff1b;有可能是你编译器的原因&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["关于#c语言#的问题：整型提升", ["最终输出结果是1、4和1，为什么不是1、4和4？", "整型提升发生的前提是参与整型运算，+和！应该都算是单目操作符吧，单目操作符算是整型运算吗？为什么第二个会提升第三个就不行？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;实际情况是&amp;#xff0c;&lt;strong&gt;标准没有规定&lt;/strong&gt;&amp;#xff0c;这是一个实现定义行为&amp;#xff0c;因此编译器可能会做出任何处理。换言之&amp;#xff0c;不能断言会发生什么。&lt;br /&gt;比较常见的处理是进行截断&amp;#xff0c;例如强行存储2147483649可能会只存储低32位&amp;#xff0c;得到1。但这只是一种可能&amp;#xff0c;正如上文所述&amp;#xff0c;如果编译器给你存入2147483647也是有可能的。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？", ["RT将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？将一个大于2147483647的整数赋给一个整型变量，会得到什么结果？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;scanf_s()函数输入字符时&amp;#xff0c;需加一个和参数有关的大小值&amp;#xff0c;这么改&amp;#xff1a;scanf_s(&amp;#34;%c%c%c%c%c&amp;#34;,&amp;amp;c1,1,&amp;amp;c2,1,&amp;amp;c3,1,&amp;amp;c4,1,&amp;amp;c5,1);&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["vs2022用scanf输入字符报错，如何解决？(语言-c语言)", ["大一新生，求帮助", "我想要用scanf输入字符，但它为什么一直提示缺少int啊？"]], "Tag": "程序设计"}
{"Answer": "呃……你没发现有个地方有错吗？\n两个等号是判等，一个等号是赋值。", "Konwledge_Point": "整型", "Question": ["一个简单的C语言问题，求解答", ["问题如下：1.从键盘上输入的10个整数中，找出第一个能被7整除的数。若找到，打印此数后退出循环；若未找到，打印“not exit”", "\n代码：", "\n\n", "运行结果：", "\n\n", "\n\n", "这是为什么呢？"]], "Tag": "程序设计"}
{"Answer": "#include&lt;stdio.h&gt;\r\nvoid main()\r\n{\r\n\tchar a[10] = {0}, b[10] = {0}, c[10]={0};\r\n\tint n = 0, m = 0, k = 0,f = 0;\r\n\tprintf(\"输入字符串:\");\r\n\t\tgets(a);\r\n\tfor(int j = 0; j &lt; 10; j++)\r\n\t{\r\n\t\tif((a[j] &gt;= 'a' &amp;&amp; a[j] &lt;= 'z') || (a[j] &gt;= 'A' &amp;&amp; a[j] &lt;= 'Z'))\r\n\t\t\tb[k++] = a[j];\r\n\t\telse\r\n\t\t\tc[f++] = a[j];\r\n\t}\r\n\tfor(int d = 0; d &lt; f; d++)\r\n\t{\r\n\t\tb[k++] = c[d];\r\n\t}\r\n\tfor(int s = 0; s &lt; k;s++)\r\n\t\tprintf(\"%c\",b[s]);\r\n\tprintf(\"\\n\");\r\n}", "Konwledge_Point": "整型", "Question": ["关于C语言字符串的简单题求助", ["进行对输入的字符串重新排列，要求字母在前，数字在后，并不改变字母和数字之间的字符排列顺序。"]], "Tag": "程序设计"}
{"Answer": "我有  要么。。。。。。。。", "Konwledge_Point": "整型", "Question": ["基于DSP技术的图像线性变换系统设计", ["要求：1.在图形窗口显示原图，处理后的结果图。", "\n             2.图像使用源数据为JPG格式的彩色图像，处理图像为经过变换后的灰度图像。", "\n            3.对灰度图像进行线性变换", "\n            4.使用ccs3.3  编程，c语言"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;您好&amp;#xff0c;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-python\"&gt;def &lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;,y):\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;x&lt;/span&gt;&amp;#43;y\n&lt;span class=\"hljs-keyword\"&gt;data &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-meta\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;输入两个数&amp;#xff0c;空格隔开:&amp;#39;&lt;/span&gt;).split()\npr&lt;span class=\"hljs-meta\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-meta\"&gt;int&lt;/span&gt;(data[0]),&lt;span class=\"hljs-meta\"&gt;int&lt;/span&gt;(data[1])))\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/059402922776157.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;望采纳哦&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;1&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["定义一个求和函数，设置两个参数，返回两个数相加后的值，并调用函数计算两个数的和。", ["定义一个求和函数，设置两个参数，返回两个数相加后的值，并调用函数计算两个数的和。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;成绩管理系统的数据不用保存到数据库吧。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["Java实现学生成绩管理系统", [" ", "\n\n", "1、要求定义一个学生类，在类中通过键盘输入学生的人数，课程的数目（如4门课），并且存储在数组中；", "\n\n", "2、利用键盘输入某个学生的名字，以及该学生对应的某门课的成绩，比如：请输入第1个学生的名字：张三", "\n\n", "          请输入张三java成绩：88", "\n\n", "          请输入张三数据库的成绩：89", "\n\n", "          请输入张三英语的成绩：78", "\n\n", "          请输入张三数学的成绩：90", "\n\n", "并且将该数据存储在二维数组中；", "\n\n", "3、类中的方法有：", "\n\n", "（1）查询某个学生某门课的成绩；", "\n\n", "（2）获取学生的成绩总分；", "\n\n", "（3）获取每个学生所有课程分数的平均分以及所有学生某门课程的平均分；", "\n\n", "（4）获取某门课程的最高分和最低分；", "\n\n", "（5）获取学生的排名。", "\n\n", "4、定义一个主类，在主类中对以上功能进行测试.。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;因为0xb6&amp;#xff0c;0xb600&amp;#xff0c;0xb6000000这些常量默认是int类型啊。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言的整型提升问题", [" 在网上看了很多资料都说整型提升，a和b勉强能够理解，但是c==0xb6000000左边不应该是一个负数，右边是一个正数吗，搞不懂为什么会相等"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你写的he函数是从0累加到数值a&amp;#xff0c;he2函数是从i的平分的累加&amp;#xff0c;这两个都不会产生小数。而上面&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-html\"&gt;&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;(&lt;/span&gt;i&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&lt;span class=\"hljs-operator\"&gt;&amp;lt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-built_in\"&gt;c&lt;/span&gt;;i&lt;span class=\"hljs-operator\"&gt;&amp;#43;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;)&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;{&lt;!-- --&gt;&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;sum&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#43;&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;(&lt;/span&gt;&lt;span class=\"hljs-number\"&gt;1.00&lt;/span&gt;&lt;span class=\"hljs-operator\"&gt;/&lt;/span&gt;&lt;span class=\"hljs-built_in\"&gt;c&lt;/span&gt;&lt;span class=\"hljs-punctuation\"&gt;)&lt;/span&gt;;\n    &lt;span class=\"hljs-punctuation\"&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这一段相加就是c个1/c相加&amp;#xff0c;数值固定为1&amp;#xff0c;也没有小数&amp;#xff0c;所以整个程序就不可能出现小数位了&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["为什么小数点以后输出都为零", ["#include <stdio.h>", "int he(int a);", "int he2(int b);", "int main(){", "    int a,b,c;", "    scanf(\"%d %d %d\",&a,&b,&c);", "    double sum=0.0;", "    int i;", "    for(i=1;i<=c;i++){", "        sum+=(1.00/c);", "    }", "    double g=0.0;", "    g=he(a)+he2(b)+sum;", "    printf(\"%.2f\\n\",g);", "\n", "return", " ", "0", ";\n", "\n", "}", "int he(int a){", "    int i;", "    int sum1=0;", "    for(i=1;i<=a;i++){", "        sum1+=i;", "    }", "    return sum1;", "}", "int he2(int b){", "    int i;", "    int sum2=0;", "    for(i=1;i<=b;i++){", "        sum2+=(i*i);", "    }", "    return sum2;", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I tested that code, and that number have some other encoded char or some other encoding, when i copiead from here, but when i rewrited that number by myself it was not showing error&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;const USER_IMG_SIZE = 5242880;&lt;/code&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["使用未定义的常量（整数）", ["\n\n", "This is my class. I'm using yii2. PHP 5.6. It cannot load page, it says ", "\n\n", "\n  ", "Use of undefined constant ‪5242880‬ - assumed '‪5242880‬'", "\n", "\n\n", "class PicturesOfUser extends \\yii\\db\\ActiveRecord\n{\n    const USER_IMG_SIZE=‪5242880‬;\n}\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;c&amp;#43;&amp;#43;实现两个数组交换&lt;/strong&gt;&lt;br /&gt;&lt;strong&gt;如有帮助&amp;#xff0c;请采纳。点击我回答右上角【采纳】按钮。&lt;/strong&gt;&lt;br /&gt;&lt;strong&gt;效果图&amp;#xff1a;&lt;/strong&gt;&lt;br /&gt;&lt;img alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/1625717190291image.png\" /&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-xml\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Switch&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *s1,&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; *s2)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; c[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;]&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n    &lt;span class=\"hljs-built_in\"&gt;strcpy&lt;/span&gt;(c,s1);\n    &lt;span class=\"hljs-built_in\"&gt;strcpy&lt;/span&gt;(s1,s2);\n    &lt;span class=\"hljs-built_in\"&gt;strcpy&lt;/span&gt;(s2,c);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{ \n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;],b[&lt;span class=\"hljs-number\"&gt;30&lt;/span&gt;];\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;输入第一个数组a:&amp;#34;&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; a;\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;输入第一个数组b:&amp;#34;&lt;/span&gt;;\n    cin &amp;gt;&amp;gt; b;\n    &lt;span class=\"hljs-built_in\"&gt;Switch&lt;/span&gt;(a,b);\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;交换后的字符数组内容&amp;#xff1a;&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;endl;\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;a&amp;#xff1a;&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;a&amp;lt;&amp;lt;endl;\n    cout&amp;lt;&amp;lt;&lt;span class=\"hljs-string\"&gt;&amp;#34;b&amp;#xff1a;&amp;#34;&lt;/span&gt;&amp;lt;&amp;lt;b&amp;lt;&amp;lt;endl;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["用c++交换两个数组的内容", ["如题，要求编写函数Switch（char", "⃣️s1，char", "⃣️s2）"]], "Tag": "程序设计"}
{"Answer": "1,定义数组后面少“；”号\r\n2，checkcode(m) ，这是数组，不是函数\r\n这些问题自己跑一下就出来了", "Konwledge_Point": "整型", "Question": ["C语言验证码的小问题  出不来 请各位指教", ["#include \"stdio.h\"", "\n#include \"string.h\"", "\n#include \"time.h\"", "\n#include \"stdlib.h\"", "\nvoid main()", "\n{", "\n    char checkcode[63]={'q','w','e','r','t','y','u','i','o','p','a','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m','Q','W','E','R','T','Y','U','I','O','P','A','S','D','F','G','H','J','K','L','Z','X','C','V','B','N','M','0','1','2','3','4','5','6','7','8','9'}", "\n    char ch[5];", "\n    srand((int)time(0));", "\n    for(int i=0;i<4;i++)", "\n    {", "\n        int m=rand()%62;", "\n        ch[i]=checkcode(m);", "\n    }", "\n    ch[i]='\\0';", "\n    puts(ch);", "\n    printf(\"\\n\");", "\n}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;5/9是两个整数相除&amp;#xff0c;执行的是整除操作&amp;#xff0c;所以结果只有整数部分&lt;br /&gt;5.0/9不是两个整数相除&amp;#xff0c;就是普通除法&amp;#xff0c;结果有小数&lt;br /&gt;只要不是两个整数相除就是普通除法&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["运算类型的区分：整型与float类型", ["1.背景：顺序程序设计例题探究过程中所遇到的运算困扰   问题：（5/9）与（5.0/9）的区别。", "\n", "2.截图：", "。", "\n", "3.解答：（5/9）是整形相除，结果为整形0，", "（5.0/9）是double类型与整形相除，结果为double类型0.555556。", "\n", "   结论：整数/整数最后的结果是整数，不保留小数部分，用float类型/整数结果是float类型。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;\nvoid main()\n{\n    int &lt;span class=\"hljs-attr\"&gt;a&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;b&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;, &lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入数组行数\\n&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a);\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入数组列数\\n&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;b);\n\n    int**&lt;span class=\"hljs-attr\"&gt;array&lt;/span&gt; &amp;#61; (int**)malloc(sizeof(int*)*a);\n    for (&lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; b; i&amp;#43;&amp;#43;)\n        array[i] &amp;#61; malloc(sizeof(sizeof(int)*b));\n\n    for (&lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; a; i&amp;#43;&amp;#43;)\n    {\n        for (&lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; b; j&amp;#43;&amp;#43;)\n        {\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入第%d行%d列元素&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;, i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;array[i][j]);\n        }\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#61;&amp;#61;&amp;#61;&amp;#61;输入完毕&amp;#61;&amp;#61;&amp;#61;&amp;#61;\\n&amp;#34;&lt;/span&gt;);\n\n    int maxi,&lt;span class=\"hljs-attr\"&gt;maxj&amp;#61;0,mini&amp;#61;0,minj,&lt;/span&gt; x, y,x_i,y_j;\n    for (&lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; a; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-attr\"&gt;maxi&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        for (&lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; b; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (maxi &amp;lt; array[i][j])\n            {\n                &lt;span class=\"hljs-attr\"&gt;maxi&lt;/span&gt; &amp;#61; array[i][j];\n                &lt;span class=\"hljs-attr\"&gt;x&lt;/span&gt; &amp;#61; i;\n                &lt;span class=\"hljs-attr\"&gt;y&lt;/span&gt; &amp;#61; j;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!mini || mini &amp;gt; maxi)\n        {\n            &lt;span class=\"hljs-attr\"&gt;mini&lt;/span&gt; &amp;#61; maxi;\n            &lt;span class=\"hljs-attr\"&gt;x_i&lt;/span&gt; &amp;#61; x;\n            &lt;span class=\"hljs-attr\"&gt;y_j&lt;/span&gt; &amp;#61; y;\n        }\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;各行最大之最小为%d,下标%d %d\\n&amp;#34;&lt;/span&gt;, mini, x_i, y_j);\n    for (&lt;span class=\"hljs-attr\"&gt;i&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; b; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-attr\"&gt;minj&lt;/span&gt; &amp;#61; INT_MAX;\n        for (&lt;span class=\"hljs-attr\"&gt;j&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; a; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (minj &amp;gt;array[j][i])\n            {\n                &lt;span class=\"hljs-attr\"&gt;minj&lt;/span&gt; &amp;#61; array[j][i];\n                &lt;span class=\"hljs-attr\"&gt;x&lt;/span&gt; &amp;#61; j;\n                &lt;span class=\"hljs-attr\"&gt;y&lt;/span&gt; &amp;#61; i;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!maxj || maxj &amp;lt; minj)\n        {\n            &lt;span class=\"hljs-attr\"&gt;maxj&lt;/span&gt; &amp;#61; minj;\n            &lt;span class=\"hljs-attr\"&gt;x_i&lt;/span&gt; &amp;#61; x;\n            &lt;span class=\"hljs-attr\"&gt;y_j&lt;/span&gt; &amp;#61; y;\n        }\n    }\n    printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;各列最小之最大为%d,下标%d %d\\n&amp;#34;&lt;/span&gt;, maxj, x_i, y_j);\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["编写函数，求出一个二维数组中各行最大值中最小的数及其下标，求出各列最小值中最大的数及其下标。在main函数中验证。要求：二维数组的行数、列数、数组元素均在main函数中由键盘输入。", ["#include <stdio.h>", "void main()", "{", "    int a = 0, b = 0,i=0,j=0,array1[a][b],array2[b];", "    int array2[b];", "    printf(\"请输入数组行数\\n\");", "    scanf(\"%d\", &a);", "    printf(\"请输入数组列数\\n\");", "    scanf(\"%d\", &b);", "\n", "for", " (i = ", "0", "; i < a; i++)\n{\n    ", "for", " ( j = ", "0", "; j < b; j++)\n    {\n        ", "printf", "(", "\"请输入第%d行%d列元素：\\n\"", ", i+", "1", ",j+", "1", ");\n        ", "scanf", "(", "\"%d\"", ", &array1[i][j]);\n    }\n}\n", "printf", "(", "\"\\n====输入完毕====\\n\"", ");\n\n", "int", " max;\n", "for", " (", "int", " j = ", "0", "; j < b; j++)\n{\n    max = ", "0", ";\n    ", "for", " (", "int", " i = ", "0", "; i < a; i++)\n    {\n        ", "if", " (max<array1[i][j]) max=array1[i][j];\n    }\n    array2[j] = max;\n}\n", "printf", "(", "\"\\narray1:\\n\"", ");\n", "for", " (", "int", " i = ", "0", "; i < a; i++)\n{\n    ", "printf", "(", "\"\\n\"", ");\n    ", "for", " (", "int", " j = ", "0", "; j < b; j++)\n    {\n        ", "printf", "(", "\"%d\\t\"", ",array1[i][j]);\n    }\n}\n", "printf", "(", "\"\\narray2\\n\"", ");\n", "for", " (", "int", " i = ", "0", "; i < b; i++)\n{\n    ", "printf", "(", "\"%d\\t\"", ",array2[i]);\n}\n", "\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;该回答内容部分引用GPT&amp;#xff0c;GPT_Pro更好的解决问题&lt;br /&gt;在编程中&amp;#xff0c;整型数据是一种最常见的数据类型&amp;#xff0c;他们可以用来存储整数&amp;#xff0c;我们可以将他们用在很多地方&amp;#xff0c;但是不同的语言支持的整型数据有所不同&amp;#xff0c;所以编写程序时需要根据实际情况选择合适的整型数据。&lt;/p&gt;\n&lt;p&gt;首先我们应该了解一下常见的几种整型数据类型&amp;#xff1a;&lt;/p&gt;\n&lt;ol&gt;&lt;li&gt;&lt;p&gt;int&amp;#xff1a;int 类型是一个常用的有符号整型&amp;#xff0c;他可以表示正数、负数、零。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;unsigned int&amp;#xff1a;unsigned int 类型是一个无符号的整型&amp;#xff0c;他只能表示正数或者零&amp;#xff0c;不能表示负数。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;long&amp;#xff1a;long 类型也是一个有符号的整型&amp;#xff0c;他可以表示比 int 表示的范围更大的正、负、零数。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;unsigned long&amp;#xff1a;unsigned long 类型也是一个无符号的整型&amp;#xff0c;他只能表示比 unsigned int 所表示的范围更大的正数或者零。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;short&amp;#xff1a;short 类型是一个有符号的整型&amp;#xff0c;它可以表示比 int 所表示的范围小的正、负、零数。&lt;/p&gt;\n&lt;/li&gt;&lt;li&gt;&lt;p&gt;unsigned short&amp;#xff1a;unsigned short 类型也是一个无符号的整型&amp;#xff0c;它可以表示比 unsigned int 所表示的范围小的正数或者零。&lt;/p&gt;\n&lt;/li&gt;&lt;/ol&gt;\n&lt;p&gt;在选择合适的整型数据时&amp;#xff0c;首先需要根据需要表达的数字大小来选择。如果需要表达很大或者很小的数字&amp;#xff0c;就需要使用 long 或者 unsigned long 类型&amp;#xff1b;如果需要表达一般大小的正、负、零数字&amp;#xff0c;就使用 int 或者 unsigned int 类型&amp;#xff1b;如果需要表达很小的正、负、零数字&amp;#xff0c;就使用 short 或者 unsigned short 类型。 &lt;/p&gt;\n&lt;p&gt;另外还需要考虑使用有符号还是无符号。在这里主要考虑两方面&amp;#xff1a;一方面是根据所需要表达的正、负、零数字来决定使用有符号还是无符号进行表达&amp;#xff1b;另外一方面也要考虑在代码中出现的形式。例如当一个变量在乘法中出现时我们尽量选择无符号进行表达。 &lt;/p&gt;\n&lt;p&gt;举个例子来说明&amp;#xff1a; &lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;// 使用有符号 int 类型 &lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a &amp;#61; &lt;span class=\"hljs-number\"&gt;-20&lt;/span&gt;; \n&lt;span class=\"hljs-comment\"&gt;// 使用无符号 int 类型 &lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b &amp;#61; &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;; \n&lt;span class=\"hljs-comment\"&gt;// 使用有符号 long 类型 &lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; c &amp;#61; &lt;span class=\"hljs-number\"&gt;-20000&lt;/span&gt;; \n&lt;span class=\"hljs-comment\"&gt;// 使用无符号 long 类型 &lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; d &amp;#61; &lt;span class=\"hljs-number\"&gt;20000&lt;/span&gt;; \n&lt;span class=\"hljs-comment\"&gt;// 使用有符号 short 类型 &lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;short&lt;/span&gt; e &amp;#61; &lt;span class=\"hljs-number\"&gt;-100&lt;/span&gt;; \n&lt;span class=\"hljs-comment\"&gt;// 使用无符号short 类型 &lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;unsigned&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;short&lt;/span&gt; f &amp;#61; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;总之在写代码时选择合适的整型数据尤为重要&amp;#xff0c;因为不同的语言对应不同的端字大小、有无符号都会影响到代码的执行。所以在写代码时应该根据实际情况去选择适当的整型数据。&lt;br /&gt;如果回答有帮助&amp;#xff0c;望采纳。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["关于整型数据的一些疑问", ["书上讲了很多种类型的整型数据，我想问一下这些东西在实际我们写程序的时候有什么用，什么时候该用哪一类呢"]], "Tag": "程序设计"}
{"Answer": "用unsigned long long 来计算(就是用这个代替int)然后就可以算出来了\r\n\r\n下面代码我试过，可以用\r\n```\r\n #include &lt;iostream&gt;\r\nusing namespace std;\r\nint main(){\r\n\tunsigned long long ans = 1;\r\n\tfor (int i = 2; i &lt;= 30;++i) {\r\n\t\tans *= i;\r\n\t}\r\n\tcout &lt;&lt; ans;\r\n} \r\n```\r\n9682165104862298112\r\n上面是结果\r\n可以关注我的CSDN，或者是我的微信公众号: 肥宅Sean笔记\r\n我日常写写笔记\r\n在公众号回复help就可以得到帮助文档", "Konwledge_Point": "整型", "Question": ["c++如何输出一个int范围的整型数", ["计算30！后，想要将结果整型数的形式输出，但是已经超出int的范围，应该怎样做？希望得到大神的解答！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;只有%号要求必须是整型&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["请问是不是只有%要求运算数是整形", ["%    ++    !    /  这四个运算符要求运算数必须是整形的有哪些？"]], "Tag": "程序设计"}
{"Answer": "https://blog.csdn.net/weixin_34320159/article/details/91342160", "Konwledge_Point": "整型", "Question": ["一个有关子树的数据结构方面的问题比较困惑，请问怎么C语言实现？", ["Problem Description", "\nThere is a complete binary tree with N nodes.The subtree of the node i has Ai nodes.How many distinct numbers are there of Ai?", "\n\n", "Input", "\nThere are multiple test cases, no more than 1000 cases.", "\nFor each case contains a single integer N on a line.(1≤N≤1018)", "\n\n", "Output", "\nThe output of each case will be a single integer on a line:the number of subtrees that contain different nodes.", "\n\n", "Sample Input", "\n5", "\n6", "\n7", "\n8", "\n\n", "Sample Output", "\n3", "\n4", "\n3", "\n5"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;public &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-literal\"&gt;void&lt;/span&gt; main(&lt;span class=\"hljs-built_in\"&gt;String&lt;/span&gt;[] args) {\n    List&amp;lt;Long&amp;gt; &lt;span class=\"hljs-keyword\"&gt;list&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();\n    &lt;span class=\"hljs-keyword\"&gt;list&lt;/span&gt;.add(&lt;span class=\"hljs-number\"&gt;20241021000159&lt;/span&gt;L);\n    &lt;span class=\"hljs-keyword\"&gt;list&lt;/span&gt;.add(&lt;span class=\"hljs-number\"&gt;20211020000258&lt;/span&gt;L);\n    &lt;span class=\"hljs-keyword\"&gt;list&lt;/span&gt;.add(&lt;span class=\"hljs-number\"&gt;20231021000159&lt;/span&gt;L);\n    &lt;span class=\"hljs-keyword\"&gt;list&lt;/span&gt;.add(&lt;span class=\"hljs-number\"&gt;20220211160441&lt;/span&gt;L);\n    &lt;span class=\"hljs-keyword\"&gt;list&lt;/span&gt;.add(&lt;span class=\"hljs-number\"&gt;20211029080608&lt;/span&gt;L);\n\n    &lt;span class=\"hljs-keyword\"&gt;list&lt;/span&gt;.sort&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-params\"&gt;((a, b) -&amp;gt; a.compareTo(b))&lt;/span&gt;; // 你的写法\n    &lt;span class=\"hljs-title\"&gt;list&lt;/span&gt;.&lt;span class=\"hljs-title\"&gt;forEach&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(System.out::println)&lt;/span&gt;;\n\n    &lt;span class=\"hljs-title\"&gt;list&lt;/span&gt;.&lt;span class=\"hljs-title\"&gt;sort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Long::compareTo)&lt;/span&gt;; // &lt;span class=\"hljs-title\"&gt;lambda&lt;/span&gt;写法\n    &lt;span class=\"hljs-title\"&gt;list&lt;/span&gt;.&lt;span class=\"hljs-title\"&gt;forEach&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(System.out::println)&lt;/span&gt;;\n\n    &lt;span class=\"hljs-title\"&gt;List&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-title\"&gt;Long&lt;/span&gt;&amp;gt; &lt;span class=\"hljs-title\"&gt;result&lt;/span&gt; &amp;#61; &lt;span class=\"hljs-title\"&gt;list&lt;/span&gt;.&lt;span class=\"hljs-title\"&gt;stream&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;.&lt;span class=\"hljs-title\"&gt;sorted&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Long::compareTo)&lt;/span&gt;.&lt;span class=\"hljs-title\"&gt;collect&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Collectors.toList())&lt;/span&gt;; // &lt;span class=\"hljs-title\"&gt;stream&lt;/span&gt;\n    &lt;span class=\"hljs-title\"&gt;result&lt;/span&gt;.&lt;span class=\"hljs-title\"&gt;forEach&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(System.out::println)&lt;/span&gt;;\n\n  }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["java集合长整型Comparator排序问题", ["现在有一个长整型的数组，想根据大小排序，但是出来后的结果不是想要的，请问这是怎么回事呢？", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;这跟提升没有关系&amp;#xff0c;这是运算优先级问题&lt;br /&gt;&amp;#43;&amp;#43;a&amp;#xff0c;运算优先级最高&amp;#xff0c;所以是先进行a的自加之后&amp;#xff0c;执行sizeof(a)&amp;#xff0c;那么返回的依然是a自身的类型&lt;br /&gt;而&amp;#43;a其实等同于0&amp;#43;a&amp;#xff0c;0可以不写&amp;#xff0c;这是个表达式&amp;#xff0c;在运算中&amp;#xff0c;所有变量会先转成最大的类型&amp;#xff0c;而0是int型的常量&amp;#xff0c;所以a会被转换成int型&amp;#xff0c;相加的结果也是int型&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言自加问题与整形提升", ["在程序里，++a和+a在sizeof里，明显++a没有进行运算而+a进行运算并整形提升，这是为什么？"]], "Tag": "程序设计"}
{"Answer": "最简单的程序，初始化一个窗口场景。你的问题是什么？如果一窍不通，找一本书系统地学下。", "Konwledge_Point": "整型", "Question": [" 很简单的程序  求大神回答", ["package com.example.first_game;", "\n\n", "import org.cocos2d.layers.CCScene;", "\nimport org.cocos2d.nodes.CCDirector;", "\nimport org.cocos2d.opengl.CCGLSurfaceView;", "\nimport org.cocos2d.layers.CCLayer;", "\n\n", "import android.os.Bundle;", "\nimport android.app.Activity;", "\nimport android.view.Menu;", "\n\n", "public class MainActivity extends Activity {", "\n\n", "private CCGLSurfaceView view = null;\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    view=new CCGLSurfaceView(this);\n    setContentView(view);\n    CCDirector director=CCDirector.sharedDirector();\n    director.attachInView(view);\n    director.setDisplayFPS(true);\n    director.setAnimationInterval(1/30.0);\n    CCScene scene=CCScene.node();\n    game w=new game();\n    scene.addChild(w);\n    director.runWithScene(scene);\n\n}\n", "\n\n", "}", "\n\n", "public class game extends CCLayer{", "\n\n", "    public game(){\n\n    }\n", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;h1 id=\"h1_1_1637227652748\"&gt;1&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;gcd&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;lcm&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x,y;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (x&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; x&amp;lt;&lt;span class=\"hljs-number\"&gt;667&lt;/span&gt;; &amp;#43;&amp;#43;x)\n    {\n        y &amp;#61; &lt;span class=\"hljs-number\"&gt;667&lt;/span&gt; - x;\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; gcdValue &amp;#61; &lt;span class=\"hljs-built_in\"&gt;gcd&lt;/span&gt;(x, y);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; lcmValue &amp;#61; &lt;span class=\"hljs-built_in\"&gt;lcm&lt;/span&gt;(x, y);\n\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ( &lt;span class=\"hljs-number\"&gt;120&lt;/span&gt; * gcdValue &amp;#61;&amp;#61; lcmValue ) {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d\\n&amp;#34;&lt;/span&gt;,x,y);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;gcd&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;lt; b)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;gcd&lt;/span&gt; (b, a);\n  &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (b &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a;\n  &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;gcd&lt;/span&gt; (b, a % b);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;lcm&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b)&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a * b / &lt;span class=\"hljs-built_in\"&gt;gcd&lt;/span&gt; (a, b);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/878299622736145.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;h1 id=\"h1_2_1637227652806\"&gt;2&lt;/h1&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; sum, hight;\n    sum &amp;#61; &lt;span class=\"hljs-number\"&gt;100.0&lt;/span&gt;;\n    hight &amp;#61; &lt;span class=\"hljs-number\"&gt;100.0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; i &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        hight /&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        sum &amp;#43;&amp;#61; hight * &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;第%d次&amp;#xff1a;%.2f  %.2f\\n&amp;#34;&lt;/span&gt;, i, sum, hight);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%.2f  %.2f\\n&amp;#34;&lt;/span&gt;, sum, hight);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/664256722736169.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["实验内容第一个怎么写？（C语言）", []], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&amp;amp;a改为a&lt;br /&gt;你打印的是a的地址&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["没法正常输出整型数？乱码怎么解决", ["为什么我的codeblocks没有办法正常输出整型数了？之前都还好好的sad，我是mac虚拟机下的windows版的codeblocks"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;底层都是二进制&amp;#xff0c;设置的时候可以定义进制是为了让你不用换算可以直接输入&lt;br /&gt;有帮助望采纳&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["整型常量和代码之间的关系？", ["整型常量二进制八进制十进制十六进制对于代码而言有什么作用？"]], "Tag": "程序设计"}
{"Answer": "http://blog.csdn.net/coolszy/article/details/5524253\r\nhttp://blog.csdn.net/kevin_samuel/article/details/29432651", "Konwledge_Point": "整型", "Question": ["已知一个 A程序 里面变量s的地址以及A程序PID值", ["B程序 该怎么使用 ReadProcessMemory函数，得到程序变量s的值？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;一般整数就用整形呀&amp;#xff0c;如果有小数就浮点型&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言中浮点型数据和整型数据", ["C语言编程中，应该什么时候用整型数据，什么时候用浮点型数据，请求帮忙回答🙏🙏"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;import math\ns&amp;#61;&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入一个三位数&amp;#34;&lt;/span&gt;))\n\na&amp;#61;s&lt;span class=\"hljs-comment\"&gt;//100&lt;/span&gt;\nb&amp;#61;(s&lt;span class=\"hljs-comment\"&gt;//10)%10&lt;/span&gt;\nc&amp;#61;s%&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;\nt&amp;#61;math.pow(a,c)\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;该三位数百位为&amp;#34;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-keyword\"&gt;str&lt;/span&gt;(a)&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;,十位为&amp;#34;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-keyword\"&gt;str&lt;/span&gt;(b)&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;,个位为&amp;#34;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-keyword\"&gt;str&lt;/span&gt;(c)&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;,百位的个位次幂是&amp;#34;&lt;/span&gt;&amp;#43;&lt;span class=\"hljs-keyword\"&gt;str&lt;/span&gt;(t))&lt;span class=\"hljs-comment\"&gt;;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["从键盘输入一个三位整数，分别求出个位数，十位数，百位数并输出，然后输出百位数的个位数字的幂，假设输入的是312，输出个位是2，十位是1，百位是3，百位的个位次幂是9 ，求解答", ["从键盘输入一个三位整数，分别求出个位数，十位数，百位数并输出，然后输出百位数的个位数字的幂，假设输入的是312，输出个位是2，十位是1，百位是3，百位的个位次幂是9."]], "Tag": "程序设计"}
{"Answer": "如果不需要计算a/b，检测a/b的余数是否为空：\r\n\r\n    if (fmod(a,b) == 0) {\r\n      // integer result\r\n    } else {\r\n      // floating-point result\r\n    }", "Konwledge_Point": "整型", "Question": ["检测数字是浮点型或者整型", ["做了一个IOS的计算器应用，我想获取两个数字的分隔是浮点型数值还是整型值，不知道有没有高手可以指点一下？谢谢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;因为cout 并没有void*的运算符重载&amp;#xff0c;所以输出是要指定具体类型&amp;#xff0c;如&amp;#xff1a;&lt;br /&gt;cout&amp;lt;&amp;lt; * ((char * )p)&amp;lt;&amp;lt;endl;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C++如何从void*指针中取值？", ["这是我的代码：", "\n", "#", "include", " ", "<iostream>", "\n", "using", " ", "namespace", " std;\n\n", "int", " ", "main", "()", "\n", "{\n    ", "char", " a = ", "'x'", ";\n    ", "void", " *p=&a;\n    cout << *p << endl;\n    ", "return", " ", "0", ";\n}\n", "\n", "报错：cout << *p << endl：非法的间接寻址。", "把【void *p】改成【char ", "p】，没问题了。", "但是我需要用void。所以我想问：C++如何从void", "指针中取值？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;list一个字典只保存键组成的列表&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["他俩都是整型为什么比较不了", ["他俩都是整型为什么不能比较，两个都是元组的第二个数为什么比较不了，可以详细告诉我一下可以吗感谢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;具体举例说一下&amp;#xff0c;不明白你意思&amp;#xff0c;浮点型怎么就不能乘除法了&amp;#xff1f;&amp;#xff1f; &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言浮点型计算整型和浮点型", ["我在进行C语言学习时发现基础的整型可以用基本的乘除法计算而，一但定义为浮点型就不行了这是为什么有什么解决办法吗？", "\n", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;if后面的语句需要用大括号括起来吧&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["请从键盘上输入3个整数 ，分别存放到变量a、b、c中，请将a、b、c按照从小到大的次序排列的题目中，输出结果错误", ["运行结果错误但检查不出（也没有完全不正确）格式是正确的", "题目：", "请从键盘上输入3个整数 ，分别存放到变量a、b、c中，请将a、b、c按照从小到大的次序排列。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.*;\n\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;A&lt;/span&gt; {\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title function_\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=\"hljs-type\"&gt;Scanner&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;sc&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Scanner&lt;/span&gt;(System.in);\n        &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; &lt;span class=\"hljs-variable\"&gt;s&lt;/span&gt; &lt;span class=\"hljs-operator\"&gt;&amp;#61;&lt;/span&gt; sc.nextLine();\n        sc.close();\n        &lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt; {\n            System.out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;我叫XXX,今年&amp;#34;&lt;/span&gt; &amp;#43; Integer.parseInt(s) &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;岁,爱吃X&amp;#34;&lt;/span&gt;);\n        } &lt;span class=\"hljs-keyword\"&gt;catch&lt;/span&gt; (Exception e) {\n            System.out.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;我叫XXX,爱吃X,年龄输入错误&amp;#34;&lt;/span&gt;);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["2.1如果年龄输入为整型变量，打印出\"我叫，今年岁，爱吃X\"  2.2如果年龄输入成非整型变量，打印出“我叫，爱吃。年龄输入错误”Integer.parselnt0;", ["2.控制台提示用户输入姓名(使用自己的名字)、年龄和自己爱吃的食物。", "\n", "2.1如果年龄输入为整型变量，打印出\"我叫XXX，今年X岁，爱吃X", "\n", "2.2如果年龄输入成非整型变量，打印出“我叫XX，爱吃X。年龄输入错误”Integer.parselnt0;"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1.先看变量定义&amp;#xff0c;a是整形变量&amp;#xff0c;p是指向整形变量的指针&lt;br /&gt;2.*p在不是定义的时候是指&amp;#xff0c;解引用p指针所指对象&amp;#xff0c;即a&lt;br /&gt;3.结果是&amp;#xff0c;在使用时&amp;#xff0c;*p是 int类型&amp;#xff0c;p是int*类型&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["函数原型是输入整型和指针，调用的时候为何变为指针加指针，求解", ["调用函数的类型为啥变了，函数是整型和指针，调用的时候变成指针加整型？？了？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;C 库函数 &lt;code class=\"language-javascript\"&gt;void *malloc(size_t size) &lt;/code&gt;分配所需的内存空间&amp;#xff0c;并返回一个指向它的指针。&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/834679530856115.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;&lt;strong&gt;一、类型不对&lt;br /&gt;二、少了括号&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言结构体里的整形指针使用malloc为什么会报错？顺序表", ["刚刚学习了顺序表", "我想开辟一块用于存储数据的整型数组 发现为什么结构体里的整型数组使用malloc的时候会出现这样的错误？", "\n", "那要怎么解决这些错误呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你scanf里面 %f 用逗号隔开&amp;#xff0c;你键盘输入数据也要用逗号隔开&amp;#xff0c;明显你现在的输入是空格隔开的&amp;#xff0c;你换成逗号试试&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言中通过键盘输入三个数x、y、z,求三个数的平均值aver,并输出结果。", ["通过键盘输入三个数x、y、z,求三个数的平均值aver,并输出结果。", "\n", "为什么是这个结果，我错哪了"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你要边算边取余&amp;#xff0c;不是算到最后一起取余&lt;br /&gt;一个对n余数为a的数加一个对n余数b的数&amp;#xff0c;两数相加对n取余余数是a&amp;#43;b&amp;#xff0c;可以证明&lt;br /&gt;把第一个数记为xn&amp;#43;a,第二个数记为yn&amp;#43;b&lt;br /&gt;两数相加是xn&amp;#43;yn&amp;#43;a&amp;#43;b&amp;#xff0c;取余之后xn和yn都没了&amp;#xff0c;就是a&amp;#43;b&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["斐波那契数列超大数用什么整型?", ["我要求斐波那契数列第100000000项的取余，但是用longlong或者double转int取余都不行，输出是负数，，还有更大的整型吗？还是说问题其实不在这里?"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;循环里每次相加都取余&amp;#xff0c;不要最后变成一个超大的数再取余&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["斐波那契数列超长数字用什么整型?", ["我要求斐波那契数列的第100000000项取余，用longlong和double转int取余都不行，会输出负数……还有更长的整型吗？还是说其实问题不在这里？(p_q）"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;a href=\"https://so.csdn.net/so/search?q&amp;#61;%E6%95%B4%E5%9E%8B&amp;amp;spm&amp;#61;1001.2101.3001.7020\"&gt;整型&lt;/a&gt;数据在内存中是以其二进制的补码的形式存放的&amp;#xff01;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["请问整型数据在内存中存放形式怎么看", ["请问整型数据在内存中存放形式怎么看 看了几个视频没看懂000000000000100000那些"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;//仅供参考&amp;#xff01;谢谢&amp;#xff01;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/237011074966185.jpg\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; _CRT_SECURE_NO_WARNINGS&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;intcmp&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; *a, &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; *b)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *x &amp;#61; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *)a;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *y &amp;#61; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; *)b;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; *x &amp;gt; *y ? &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; : (*x &amp;#61;&amp;#61; *y ? &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; : &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; arr1[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;][n];                &lt;span class=\"hljs-comment\"&gt;// 第一行记录数组 第二行记录编号&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; arr2[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;][n];\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;arr1[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][i]);    &lt;span class=\"hljs-comment\"&gt;// 输入-3 75 51 90 1118 51 -3&lt;/span&gt;\n        arr2[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][i] &amp;#61; arr1[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][i];\n    }\n    \n    &lt;span class=\"hljs-comment\"&gt;// 先排序&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;qsort&lt;/span&gt;(arr2[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;], n, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;), intcmp);\n\n    &lt;span class=\"hljs-comment\"&gt;// 编号&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, flag &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;// flag是标记&lt;/span&gt;\n    \n    arr2[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-comment\"&gt;// 因为arr2数组已经从大到小排好序列的了&amp;#xff0c;&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;// 所以第一个元素肯定排第1号&amp;#xff0c;我们对应在第2行第1个直接编号1&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)    &lt;span class=\"hljs-comment\"&gt;// 遍历已排序的数组&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; i; j&amp;#43;&amp;#43;)    &lt;span class=\"hljs-comment\"&gt;// 遍历已经编有序号的数组&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (arr2[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][i] &amp;#61;&amp;#61; arr2[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][j])\n            {\n                &lt;span class=\"hljs-comment\"&gt;// 当前未编号的数据与前面编好序列的所有元素进行一一比较&lt;/span&gt;\n                &lt;span class=\"hljs-comment\"&gt;// 如果有相同的元素&amp;#xff0c;则当前要编号的元素跟前面编好号的一样&lt;/span&gt;\n                &lt;span class=\"hljs-comment\"&gt;// 也就是把前面已编号的元素编号赋值给当前元素编号&lt;/span&gt;\n                arr2[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][i] &amp;#61; arr2[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j];\n                flag &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;        &lt;span class=\"hljs-comment\"&gt;// 标记赋值为假&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;            &lt;span class=\"hljs-comment\"&gt;// 目前元素已经编上号了&amp;#xff0c;无需再一一比较&amp;#xff0c;跳出此内层循环&lt;/span&gt;\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (flag)                &lt;span class=\"hljs-comment\"&gt;// 对应上面的标记&amp;#xff0c;一真一假&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-comment\"&gt;// 标记的作用是&amp;#xff0c;看前面有没有相同的元素的验证&lt;/span&gt;\n            &lt;span class=\"hljs-comment\"&gt;// 如果flag为真表示该待编号的元素在已经编好号的元素找不到相同值&lt;/span&gt;\n            &lt;span class=\"hljs-comment\"&gt;// 此时编号就必须递增1并作为该元素的编号&lt;/span&gt;\n            arr2[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][i] &amp;#61; &amp;#43;&amp;#43;num;\n        }\n        flag &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;                &lt;span class=\"hljs-comment\"&gt;// 重置标记 进入下一轮循环&lt;/span&gt;\n    }\n\n    &lt;span class=\"hljs-comment\"&gt;// 这下面个循环应该很容易理解了吧&amp;#xff1f;&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (arr1[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][i] &amp;#61;&amp;#61; arr2[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][j])\n            {\n                arr1[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][i] &amp;#61; arr2[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][j];\n            }\n        }\n    }\n    \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, arr1[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;][i]);    &lt;span class=\"hljs-comment\"&gt;// 打印编号&lt;/span&gt;\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["C语言给一个整型数组编号", ["【问题描述】给一个整型数组中的数按从大到小连续编号，要求相同数字编号相同，编号从1开始，输出编号结果时按照原数组元素的顺序输出。", "【输入形式】从控制台输入数据，第一行输入数组元素个数（个数大于等于1，并且小于等于20），第二行输入整型数组元素，各个整数之间以空格分隔。", "【输出形式】在屏幕上输出编号结果，各个编号之间用一个空格分隔。", "【样例输入】", "7", "-3 75 51 90 1118 51 -3", "【样例输出】5 3 4 2 1 4 5", "【样例说明】共输入了7个整数，分别为： - 3  75  51  90  1118  51 - 3，其编号分别为5  3  4  2  1  4  5，其中有两个 - 3和51，", "//它们的编号相同。", "\n", "#", "define", " _CRT_SECURE_NO_WARNINGS", "\n", "#", "include", "<stdio.h>", "\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " n = ", "0", ";\n    ", "scanf", "(", "\"%d\"", ", &n);", "//输入7", "\n    ", "int", " arr[", "2", "][", "21", "];", "//第一行记录数组 第二行记录编号", "\n    ", "int", " temp = ", "0", ";", "//记录最大值的个数", "\n    ", "for", " (", "int", " i = ", "0", "; i < n; i++)\n    {\n        ", "scanf", "(", "\"%d\"", ", arr[", "0", "][i]);", "//输入-3 75 51 90 1118 51 -3", "\n    }\n    ", "int", " max = arr[", "0", "][", "0", "];\n    ", "for", " (", "int", " j = ", "0", "; j < n-temp; j++)\n    {\n        ", "for", " (", "int", " i = ", "0", "; i < n; i++)\n        {\n            ", "if", " (max < arr[", "0", "][i])\n                max = arr[", "0", "][i];", "//找出最大值", "\n        }\n        ", "for", " (", "int", " i = ", "0", "; i < n; i++)\n        {\n            ", "if", " (arr[", "0", "][i] == max)", "//找出多个最大值", "\n            {\n                arr[", "1", "][i] = i + ", "1", ";", "//编号", "\n                arr[", "0", "][i] = ", "' '", ";", "//将已找过的最大值置空", "\n                temp++;\n            }\n        }\n    }\n    ", "for", " (", "int", " i = ", "0", "; i < n; i++)\n        ", "printf", "(", "\"%d \"", ", arr[", "1", "][i]);", "//打印编号", "\n}\n\n", "\n", "\n", "请问哪里出错了，怎么修改，非常感谢！！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;3ac3fd8b是非数字的字符串&amp;#xff0c;不能转换为整形&amp;#xff0c;如果是16进制字符串参考&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; main(&lt;span class=\"hljs-keyword\"&gt;String&lt;/span&gt;[] args) {\n        &lt;span class=\"hljs-keyword\"&gt;String&lt;/span&gt; str &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;3ac3fd8b&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;Integer&lt;/span&gt; in &amp;#61; &lt;span class=\"hljs-keyword\"&gt;Integer&lt;/span&gt;.valueOf(str,&lt;span class=\"hljs-number\"&gt;16&lt;/span&gt;);\n        System.out.println(in);\n    }\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["String类型的\"3ac3fd8b\"转整形", ["java中，String类型的\"3ac3fd8b\"转整形Int，", "试用了Integer类的好多方法都抛出异常"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/048171527776124.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; java.util.Arrays;\n\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-symbol\"&gt;Main&lt;/span&gt; {\n    &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; static &lt;span class=\"hljs-built_in\"&gt;void&lt;/span&gt; main(String[] args) {\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;[] &lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;1 &amp;#61;  {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;23&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;56&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;89&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;22&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;90&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;13&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;55&lt;/span&gt;};\n        \n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;1.length;i&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; j&amp;#61;i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;1.length;j&amp;#43;&amp;#43;){\n                &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; temp&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;1[i]&amp;gt;&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;1[j]){\n                    temp&amp;#61;&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;1[i];\n                    &lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;1[i]&amp;#61;&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;1[j];\n                    &lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;1[j]&amp;#61;temp;\n                }\n            }\n        }\n\n        System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(Arrays.toString(&lt;span class=\"hljs-built_in\"&gt;array&lt;/span&gt;1));\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["写一个冒泡算法，整型数组从小到大排序", ["写一个冒泡算法，整型数组从小到大排序", "这多次循环还是多次排序一样吗？一个循环能不能写完这个问题？"]], "Tag": "程序设计"}
{"Answer": "用4次整数计算，先算最低32位，并且判断是否溢出，溢出把进位/借位放进来，再算33~64，以此类推。", "Konwledge_Point": "整型", "Question": ["JAVA 将128位二进制串转换为整型，在进行位运算，计算汉明距离", ["JAVA，现有两个128位的二进制串，我要计算它们之间的汉明距离，但在Java中位运算好像都需要事先转换为整型。但是128位的二进制数也太大，int并不能满足要求，用长整型好像也不太行。求大神指导。"]], "Tag": "程序设计"}
{"Answer": "http://wenku.baidu.com/link?url=yxzdtNvocWf5gqvuBDe4XlHxP2rXvIoLdGcjyV6c2MTT2l-0Xhfebr5iKBvmJNXCK9M0a19J1tTgO198EXN4MCRvUcRAJVgOKJsC6gfUF8u", "Konwledge_Point": "整型", "Question": ["整形的采样值遇到数据缺失怎么进行插值                        ", ["整形的采样值遇到数据缺失怎么进行插值，使得产生一个连续的采样序列，怎么通过插值算法使得采样记录保持连续？"]], "Tag": "程序设计"}
{"Answer": "```\r\n#include &lt;stdio.h&gt;\r\nint main() {\r\nint a[8];\r\nfor (int i = 0; i &lt; 8; i++) scanf(\"%d\", &amp;a[i]);\r\nint max, min;\r\nmax = min = a[0];\r\nfor (int i = 1; i &lt; 8; i++)\r\n{\r\nif (max &lt; a[i]) max = a[i];\r\nif (min &gt; a[i]) min = a[i];\r\n}\r\nprintf(\"%d\", max - min);\r\nreturn 0;\r\n}\r\n```\r\n\r\n# 问题解决的话，请点下采纳", "Konwledge_Point": "整型", "Question": ["c语言编程为整形数组a[8]输入数值，输出最大值与最小值之差？", ["c语言编程为整形数组a[8]输入数值，输出最大值与最小值之差？求大佬解答！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;找到原因了&amp;#xff0c;MySQL在 &lt;code class=\"language-javascript\"&gt;8.0.17&lt;/code&gt; 版本开始&amp;#xff0c;就不会显示如 &lt;code class=\"language-javascript\"&gt;TINYINT&lt;/code&gt; , &lt;code class=\"language-javascript\"&gt;SMALLINT&lt;/code&gt; , &lt;code class=\"language-javascript\"&gt;MEDIUMINT&lt;/code&gt; , &lt;code class=\"language-javascript\"&gt;INT&lt;/code&gt; , &lt;code class=\"language-javascript\"&gt;BIGINT&lt;/code&gt; 这些数据类型的字段长度。&lt;br /&gt;MySQL官网上是这么说的&amp;#xff1a;  &lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/639248143846162.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/067948143846175.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["【MySQL】请问为什么字段长度(4)不见了呢？", ["起因", "\n", "事情是这样的，我在MySQL中创建了一个叫“销售表”的table，其中有一个字段为“序号”，我为它设置了", "主键约束PRIMARY KEY", "，", "字段长度为 4", "，同时也为它设置了", "auto-increment 字段", "。", "但是就在我在查表的时候发现 ", "字段长度 4", " 不见了，请问这是什么原因呢？", "\n", "问题相关代码", "\n", "这是我建表时的源代码：", "\n", "CREATE", " ", "TABLE", " 销售表\n(序号 TINYINT(", "4", ") ", "PRIMARY", " KEY ", "NOT", " ", "NULL", " AUTO_INCREMENT,\n销售日期 ", "DATE", " ", "NULL", ",\n客户名称 ", "VARCHAR", "(", "30", ") ", "NULL", ",\n货号 ", "CHAR", "(", "4", ") ", "NULL", ",\n单价 ", "DECIMAL", "(", "8", ", ", "2", ") ", "NULL", ",\n数量 ", "INT", "(", "4", ") ", "NULL", ",\n`销售员ID` ", "CHAR", "(", "6", ") ", "NULL", ",\n", "FOREIGN", " KEY (货号) ", "REFERENCES", " 商品一览表(货号),\n", "FOREIGN", " KEY (销售员ID) ", "REFERENCES", " 员工表(员工ID)\n);\n", "\n", "运行结果及报错内容", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;不写L也可以的。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["为什么长整型要重复标记两次？", ["比如", "\n", "long 长整数", "=", "-", "100000", "L\n\n", "\n", "，后面的L表示他是长整型，前面的long也是同样的意思，这不是重复了吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;define 那里最后数值后面不用加分号&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["编写一个程序，提示用户输入身高，并分别以厘米和英尺、英寸为单位显示该值。", ["该程序允许有小数部分，程序应该能让用户重复输入身高，直到用户输入一个非负值。", "搞不懂那一句为什么会出错", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你这userid是整型的话&amp;#xff0c;开头的0肯定会被过滤掉&amp;#xff0c;如果是字符串的话&amp;#xff0c;这串数字应该加上引号&lt;br /&gt;既然 declare &lt;a class=\"md_call_user\" type=\"user\"&gt;&amp;#64;userid &lt;/a&gt;varchar(100)&lt;br /&gt;那么 set &lt;a class=\"md_call_user\" type=\"user\"&gt;&amp;#64;userid &lt;/a&gt;&amp;#61; &amp;#39;01541815191726247754&amp;#39;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["sql 引用变量时第一位的0被去除掉如何处理", ["sql server 2008 r2", "\n", "代码：", "declare ", "@userid ", "varchar(100)", "declare ", "@sql ", "varchar(1000)", "\n", "set ", "@userid ", "= 01541815191726247754", "\n", "set ", "@sql ", "= ' select * from test where userid = '''+", "@userid+ ", "''''", "\n", "select ", "@sql", "\n", "结果：", " select * from test where userid = '1541815191726247754'", "\n", "引用变量", "@userid ", "时第一位0被去除掉了，导致查不到数据，这个要怎么处理？", "看了网上都是以知道位数为前提的处理方法，但是userid没有固定的位数，无法那样处理"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;public class Max {&lt;!-- --&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;[] args)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[] numbers &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;];\n    Scanner sc &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Scanner&lt;/span&gt;(System.in);\n\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; numbers.length; i&amp;#43;&amp;#43;) {\n        System.out.&lt;span class=\"hljs-built_in\"&gt;println&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入第&amp;#34;&lt;/span&gt;&amp;#43; (i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) &amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;个数字&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; s &amp;#61; sc.&lt;span class=\"hljs-built_in\"&gt;nextInt&lt;/span&gt;();\n        numbers[i] &amp;#61; s;\n    }\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; max &amp;#61; numbers[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; min &amp;#61; numbers[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; count &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; numbers.length; i&amp;#43;&amp;#43;) {\n        count&amp;#43;&amp;#61;numbers[i];\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (max &amp;lt; numbers[i]) {\n            max &amp;#61; numbers[i];\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (min &amp;gt; numbers[i]) {\n            min &amp;#61; numbers[i];\n        }\n    }\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; avg&amp;#61; count/&lt;span class=\"hljs-number\"&gt;5.0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; number : numbers) {\n        System.out.&lt;span class=\"hljs-built_in\"&gt;print&lt;/span&gt;(number &amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt;);\n    }\n    System.out.&lt;span class=\"hljs-built_in\"&gt;println&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;中最大值为:&amp;#34;&lt;/span&gt; &amp;#43;max &amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;,最小值是:&amp;#34;&lt;/span&gt; &amp;#43;min &amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;,总分是:&amp;#34;&lt;/span&gt; &amp;#43; count&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34;,平均分是:&amp;#34;&lt;/span&gt; &amp;#43;avg);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;}&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["编写Java程序Task6_2.java，定义一个数组，数组一共有5个元素，接收用户输入的5个数，找出最大值和最小值输出。", ["运行效果如下", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;没太听懂你到底想干什么&lt;br /&gt;你是一个很长的整数型&amp;#xff0c;要存成多个字节吗&lt;br /&gt;但是这涉及到好多问题&amp;#xff0c;比如转成字节之后&amp;#xff0c;是按什么规则转的&amp;#xff0c;是大端序还是小端序&lt;br /&gt;如果都不考虑那些的话&amp;#xff0c;其实有个简单的办法&lt;br /&gt;你直接int转字符串&amp;#xff0c;然后按字符串转byte数组的方式转&lt;br /&gt;对方先byte数组转字符串&amp;#xff0c;然后字符串转int&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["c#十进制整型变量直接写成十六进制数并存入byte数组中", ["如题，有没有简洁的方式，", "在c#中，十进制整型变量直接写成十六进制数并存入byte数组中"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\nint main()\n{\n\tint a[10],i,n;\n\tint isfind &amp;#61; 0;\n\tprintf(&amp;#34;please set array values:&amp;#34;);\n\tfor(i&amp;#61;0;i&amp;lt;10;i&amp;#43;&amp;#43;)\n\t\tscanf(&amp;#34;%d&amp;#34;,&amp;amp;a[i]);\n\n\tprintf(&amp;#34;please enter one num:&amp;#34;);\n\tscanf(&amp;#34;%d&amp;#34;,&amp;amp;n);\n\tfor (i&amp;#61;0;i&amp;lt;10;i&amp;#43;&amp;#43;)\n\t{\n\t\tif(a[i] &amp;lt; n)\n\t\t{\n\t\t\tisfind &amp;#61; 1;\n\t\t\tprintf(&amp;#34;%d &amp;#34;,a[i]);\n\t\t}\n\t}\n\t\n\tif(isfind)\n\t\tprintf(&amp;#34;\\n&amp;#34;);\n\telse\n\t\tprintf(&amp;#34;not find\\n&amp;#34;);\n\t\n\t\n\treturn 0;\n}&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["整形数组输入一个数查找比它小的元素", ["一个整型数组有10元素，请先给这10个元素赋值，然后随便输入一个数，最后输出数组中比这个数小的所有元素，每个数用空格隔开，如果没有找到，则输出no find。", "\n ", "\n\n", "\n\n", " "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可以&amp;#xff0c;甚至不需要long long &lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* &lt;span class=\"hljs-title\"&gt;solution&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; dig)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt; (dig)\n    {\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;: \n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;wan&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;shi wan&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;bai wan&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;qian wan&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;yi&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;shi yi&amp;#34;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;default&lt;/span&gt;:\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;0&amp;#34;&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; num &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,dig &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;num);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (num)\n    {\n        num /&amp;#61; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;\n        dig &amp;#43;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;solution&lt;/span&gt;(dig));\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["关于#c语言#的问题：能不能用定义长整型数的方法写出来哎", ["这个题目可以用字符串写出来，能不能用定义长整型数的方法写出来哎"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;先用split()去掉空格&amp;#xff0c;然后列表的每个元素用int()转换成整数型&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["python读取文件整型怎么除去空格并区分十位数，百位数", ["想要将图中的数存到列表中并分别转换成整型", "但是没法区分空格遇到空格转换失败，而且十位数他无法当成一个整体"]], "Tag": "程序设计"}
{"Answer": "另外maxlength与minlength适合的数据类型为sting及其派生类型，hexBinary，base64Binary，anyURI，QName，NOTATION!", "Konwledge_Point": "整型", "Question": ["Schema验证，xsd文件中整型(浮点型)数据如何约束其长度？", ["比如，在xsd文件中，如下节点：", "xs:simpleType", "/xs:minLength", "/xs:maxLength", "/xs:restriction", "/xs:simpleType", "/xs:element", "\n想要限制“InstdPty”节点的整型数据长度，使用xs:minLength和xs:maxLength后报错“cos-applicable-facets: Facet 'minLength' is not allowed by type #AnonType_InstdPty.”", "\n提示不允许定义，为何？如果不是用xs:minLength，那么用什么方法限定整型（浮点型）数据长度？ "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你先试着自己写这个实现啊&amp;#xff0c;不然这种问题你提到这&amp;#xff0c;对自己学习意义不大。&lt;br /&gt;可以参考答案多多练习&amp;#xff0c;必须多练习&amp;#xff0c;不然理解不了。&lt;/p&gt;\n&lt;p&gt;做这个题&amp;#xff0c;你至少先得梳理实现这个逻辑的思路&amp;#xff0c;然后根据有思路来梳理这个。&lt;/p&gt;\n&lt;p&gt;1 2 3 4 5  &amp;#61;&amp;#61;&amp;gt;编程 5 1 2 3 4&lt;br /&gt;可以先保存数组最后下标的值&amp;#xff0c;然后遍历前面的&amp;#xff0c;依次从后往前重新赋值&amp;#xff0c;然后最后把5赋值开始位置&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;shiftright&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; *a, &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; t; &lt;span class=\"hljs-comment\"&gt;//注意下面有个t变量&lt;/span&gt;\n    t &amp;#61; *(a&amp;#43;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;); &lt;span class=\"hljs-comment\"&gt;//理解这个吗&amp;#xff1f; 数组的指针&amp;#43;1的动作  a是数组起始地址&amp;#xff0c;&amp;#43;n-1其实到最后一个位置了&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i &amp;#61; n&lt;span class=\"hljs-number\"&gt;-2&lt;/span&gt;; i&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i--) &lt;span class=\"hljs-comment\"&gt;//已经保存最后一个变量了&amp;#xff0c;要循环后移一位&amp;#xff0c;是不是直接重新赋值&lt;/span&gt;\n    {\n        a[i&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; a[i];&lt;span class=\"hljs-comment\"&gt;//后移以为&lt;/span&gt;\n    }\n    a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; t; &lt;span class=\"hljs-comment\"&gt;//把数组最后面的值赋值&lt;/span&gt;\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; arr[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;};\n\n    &lt;span class=\"hljs-built_in\"&gt;shiftright&lt;/span&gt;(arr, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%6.2f &amp;#34;&lt;/span&gt;, arr[i]);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-comment\"&gt;//输出是 &amp;#xff1a; 5.00   1.00   2.00   3.00   4.00 &lt;/span&gt;\n&amp;#96;&amp;#96;&amp;#96;c\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&amp;#96;&amp;#96;&amp;#96;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["shiftright函数实现将整型一维数组的元素依次循环后移一位，以下空格如何填写", ["shiftright函数实现将整型一维数组的元素依次循环后移一位，以下空格如何填写"]], "Tag": "程序设计"}
{"Answer": "这个问题如果你用orm的话 你可以在前台输出的时候给它格式化一下嘛 用jstl的fmt标签就可以地", "Konwledge_Point": "整型", "Question": ["mysql整形数为什么每千位加逗号呢", ["为什么MySQL里面的整型数get出来会变成每千位自动加逗号呢？", "\n比如数据库里面是：1659", "\nget后来以后竟然变成：1,659", "\n怎么处理阿？（我用了iBatis作ORM，如果是用JDBC那种，getInt()以后可以替换“,”为\"\"，但是用ORM工具后怎么办呢？）", "\n[b]问题补充：[/b]", "\n找到答案了。", "\n\n", "我是用Freemarker的，估计就是因为在Configuration少定义了数字输出格式才导致这样的，应该不是MySQL本身的问题！", "\n\n", "于是新增设置：", "\ncfg = new Configuration();", "\n//当然，也可以在页面中定义:<#setting number_format=\"0\">", "\ncfg.setNumberFormat(\"0\");", "\n\n", "搞定了这个头痛的问题，哈哈！"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m,n;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;,&amp;amp;m,&amp;amp;n);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; i &amp;lt; m; i&amp;#43;&amp;#43; )\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j &amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; j &amp;lt; n ; j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i][j]);\n    }\n    \n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; i&amp;lt; n; i&amp;#43;&amp;#43; )\n            {\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ; j &amp;lt; m ; j&amp;#43;&amp;#43;)\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[j][i]);\n                    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n            }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["矩阵转置c语言编程代码", ["从键盘输入一个m(2<=m<=6)*n(2<=n<=6)阶的矩阵，编程输出它的转置矩阵, 在第一行输入矩阵的行数m和列数n的值，在第二行按照矩阵格式输入矩阵的数据，同行数据之间用空格隔开。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;望采纳&amp;#xff01;&amp;#xff01;&amp;#xff01;&amp;#xff01;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;String args[]&lt;/span&gt;)&lt;/span&gt; {\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a&amp;#61;&lt;span class=\"hljs-number\"&gt;101&lt;/span&gt;;\n        &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; b&amp;#61;&lt;span class=\"hljs-number\"&gt;198&lt;/span&gt;;\n        System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;a&amp;#61;&amp;#34;&lt;/span&gt;&amp;#43;a&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34; 对应字符&amp;#xff1a;&amp;#34;&lt;/span&gt;&amp;#43;(&lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt;)a);\n        System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&lt;span class=\"hljs-string\"&gt;&amp;#34;b&amp;#61;&amp;#34;&lt;/span&gt;&amp;#43;b&amp;#43;&lt;span class=\"hljs-string\"&gt;&amp;#34; 对应字符&amp;#xff1a;&amp;#34;&lt;/span&gt;&amp;#43;(&lt;span class=\"hljs-built_in\"&gt;char&lt;/span&gt;)b);\n        \n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/978119076876128.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["3、已知整型变量a=101、b=198,请用程序算出a和b对应的字符。", ["3、已知整型变量a=101、b=198,请用程序算出a和b对应的字符。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;printf的返回值&amp;#xff1a;如果函数执行成功&amp;#xff0c;则返回所打印的字符总数&amp;#xff0c;如果函数执行失败&amp;#xff0c;则返回一个负数&lt;br /&gt;第一个输出了一个2&amp;#xff0c;所以返回值为1&amp;#xff0c;p&amp;#43;&amp;#61;1后p&amp;#61;2&lt;br /&gt;第二个输出了一个2&amp;#xff0c;一个换行符&amp;#xff0c;所以返回值为2&amp;#xff0c;p&amp;#43;&amp;#61;2后p&amp;#61;3&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["整型数据+=一条printf语句的含义", ["整型数据+=一条printf语句的含义", "\n", "查代码看到的一条", "\n", "\n            p += ", "printf", "(", "\"%d\"", ", T->freq);\n\n", "\n", "我自己编了一个，没有报错：", "这个出来的是", "22", "\n", "int", " main(){\n    ", "int", " p,", "q", ";\n    p =", "1", "; ", "q", "=", "2", ";\n    p += ", "printf", "(", "\"%d\"", ",", "q", ");\n    ", "printf", "(", "\"%d\"", ",p);\n    ", "return", " ", "0", ";\n}\n", "\n", "这个出来是", "2", "3", "\n", "int", " main(){\n    ", "int", " p,", "q", ";\n    p =", "1", "; ", "q", "=", "2", ";\n    p += ", "printf", "(", "\"%d\\n\"", ",", "q", ");\n    ", "printf", "(", "\"%d\"", ",p);\n    ", "return", " ", "0", ";\n}\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;string.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n,t;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];     &lt;span class=\"hljs-comment\"&gt;//定义数组&lt;/span&gt;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入n:&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;n);   &lt;span class=\"hljs-comment\"&gt;//输入n&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)      &lt;span class=\"hljs-comment\"&gt;//输入n个数&lt;/span&gt;\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;c[i]);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n - &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i&amp;#43;&amp;#43;)     &lt;span class=\"hljs-comment\"&gt;//选择排序&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;)\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (c[i] &amp;gt; c[j])\n            {\n                t &amp;#61; c[j]; c[j] &amp;#61; c[i]; c[i] &amp;#61; t;\n            }\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)     &lt;span class=\"hljs-comment\"&gt;//输出排序后数组&lt;/span&gt;\n       &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, c[i]);\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["定义一个长度为100的int型数组       （希望加一下注释）", ["定义一个长度为100的int型数组，输入n（n>=1&&n<=100）,输入n个值到数组中，用选择排序法将它们从小到大排序后输出"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; 单元格.&lt;span class=\"hljs-attribute\"&gt;value&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt; then\n   &lt;span class=\"hljs-attribute\"&gt;xxx&lt;/span&gt;&amp;#61;0\n&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n  &lt;span class=\"hljs-attribute\"&gt;xxx&lt;/span&gt;&amp;#61;单元格.value\nend &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["VBA声明M为整型，M=空白单元格.value时报错", ["问题：VBA定义XXX为整型，让XXX=单元格.value。当单元格为空白时报错13，类型不符。", "         Dim XXX As Integer", "临时解决方案：", "    单元格为空白时，先填写为0再删除0即可正常运行", "困惑：", "    请问为啥会报错，如果改的话应该怎么改？"]], "Tag": "程序设计"}
{"Answer": "int a[2][2],b,i,j;\r\n-&gt;\r\nint a[3][3],b,i,j;", "Konwledge_Point": "整型", "Question": ["有人看下scanf函数的问题吗", ["int main()\n{\n    int a[2][2],b,i,j;\n\n    for(i=0;i<=2;i++)\n    {\n        for(j=0;j<=2;j++)\n        {\n            scanf(\"%d\",&a[i][j]);\n        } \n    } \n    for(i=0;i<=2;i++)\n    {\n        for(j=0;j<=2;j++)\n        {\n            printf(\"a[%d][%d](%d)=%d\\n\",i,j,&a[i][j],a[i][j]);\n        } \n    } \n\n}\n", "\n\n", "\n结果是这样，为什么3没有输入进去"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;我们现在假想一个问题&amp;#xff0c;如果我们有&amp;#43;0和-0这两种情况&amp;#xff0c;我们用二进制该怎么表示呢&amp;#xff1f;&lt;br /&gt;对于&amp;#43;0&amp;#xff0c;它应该是0000 0000 0000 0000&amp;#xff1b;&lt;br /&gt;对于-0&amp;#xff0c;它应该是1000 0000 0000 0000。&lt;br /&gt;但是无论&amp;#43;0还是-0&amp;#xff0c;从数学的角度它都应该是0&amp;#xff0c;但是在计算机的二进制存储中我们却发现-0的二进制竟然和16位二进制存储中的最小值&amp;#xff08;即前面提到的1000 0000 0000 0000&amp;#xff09;一样&amp;#xff0c;但是0肯定不是这里的最小值啊&amp;#xff0c;于是为了解决这个问题&amp;#xff0c;我们规定&amp;#xff0c;1000 0000 0000 0000表示16位中的最小值&amp;#xff0c;即-32768。&lt;/p&gt;\n&lt;p&gt;表示正数时&amp;#xff0c;最高位为符号位&amp;#xff08;正数的符号位为0&amp;#xff09;&amp;#xff0c;最大的正数为0111 1111 1111 1111 即2^15 - 1 &amp;#61; 32767。&lt;/p&gt;\n&lt;p&gt;所以16位的短整型所能表示的范围是-32768 - 32767。&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;a href=\"https://blog.csdn.net/lws123253/article/details/80227236\" id=\"textarea_1632296304897_1632297219658_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/lws123253/article/details/80227236&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "整型", "Question": ["为什么有符号短整型能表示的最小整数是1000000000000000，也就是－32768，而不是1111111111111111呢？", ["为什么有符号短整型能表示的最小整数是1000000000000000，也就是－32768，而不是1111111111111111呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;printf参数是有指定的用法的&lt;br /&gt;%d输出类型为有符号的十进制整数&lt;br /&gt;%f/%lf&lt;br /&gt;输出类型为十进制表示的浮点数&amp;#xff0c;默认精度为6&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"https://baike.baidu.com/item/printf/7467706?fr&amp;#61;aladdin\" id=\"textarea_1668691048003_1668691122857_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://baike.baidu.com/item/printf/7467706?fr&amp;#61;aladdin&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言 形式为实形的变量为什么不能直接%d变整形输出", ["C语言 形式为实形的变量为什么不能直接%d变整形输出，如double m;", "m＝5.68997;", "printf（\"%d\",m）;", "为什么结果是错的"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;用三元组表示&amp;#xff0c;用三元组表示&amp;#xff0c;用三元组表示&lt;br /&gt;3就是三元组呀&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["设每个整型数占 2 个字节，则用三元组表示该矩阵时，所需的字节数是", ["有一个 100×90 的稀疏矩阵，非零元素有10，设每个整型数占 2 个字节，则用三元组表示该矩阵时，所需的字节数是66", "怎么算出来是66的，解析是10×3，那个3怎么来的，看不明白", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; r[],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; k;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; tem;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; k&amp;lt;n/&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;; k&amp;#43;&amp;#43;)\n    {\n        tem&amp;#61;r[k];\n        r[k]&amp;#61;r[n-k&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;];\n        r[n-k&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;]&amp;#61;tem;\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;p&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j&amp;lt;n; j&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[j]);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; number[&lt;span class=\"hljs-number\"&gt;250&lt;/span&gt;],n,i;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;数组元素个数:&amp;#34;&lt;/span&gt;) ;\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n) ;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i&amp;lt;n; i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;number[i]);\n    &lt;span class=\"hljs-built_in\"&gt;fun&lt;/span&gt;(number,n);\n    &lt;span class=\"hljs-built_in\"&gt;p&lt;/span&gt;(number,n);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["编写参数为整型指针变量的函数fun，函数功能是将数组元素按输入顺序逆置存放，要求在主函输入数组元素的值，在主函数中输出逆置后的数组。", ["编写参数为整型指针变量的函数fun，函数功能是将数组元素按输入顺序逆置存放，要求在主函数中输入数组元素的值，在主函数中输出逆置后的数组。"]], "Tag": "程序设计"}
{"Answer": "http://www.docin.com/p-40548737.html", "Konwledge_Point": "整型", "Question": ["下位机采集整形数序列，按照时序排列后如何用插值算法补充缺失的数据？", ["下位机采集整形数序列，按照时序排列后如何用插值算法补充缺失的数据？如何保持插值数据的连贯完整，采样值的平滑？"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nntoe&amp;#61;{&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#39;zero&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#39;three&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#39;four&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#39;five&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#39;six&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#39;seven&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#39;eight&amp;#39;&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;:&lt;span class=\"hljs-string\"&gt;&amp;#39;nine&amp;#39;&lt;/span&gt;}\nnum_to_eng&amp;#61;&lt;span class=\"hljs-built_in\"&gt;input&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入一个数(0-1000):&amp;#34;&lt;/span&gt;)\n# num&amp;#61;&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(num_to_eng)\n# numlen&amp;#61;&lt;span class=\"hljs-built_in\"&gt;len&lt;/span&gt;(num_to_eng)\nnumlist&amp;#61;[]\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in num_to_eng:\n    numlist.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(ntoe[&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt;(i)])\n# &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; i in &lt;span class=\"hljs-built_in\"&gt;range&lt;/span&gt;(numlen):\n    # numlist.&lt;span class=\"hljs-keyword\"&gt;append&lt;/span&gt;(ntoe[num])\n&lt;span class=\"hljs-keyword\"&gt;print&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;join&lt;/span&gt;(numlist))\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["给出一个整型值,返回代表该值得英文", ["给出一个整型值,返回代表该值得英文,比如输入89会返回“eight-nine”", "ntoe={0:'zero',1:'one',2:'two',3:'three',4:'four',5:'five',6:'six',7:'seven',8:'eight',9:'nine'}", "num_to_eng=input(\"请输入一个数(0-1000):\")", "num=int(num_to_eng)", "numlen=len(num_to_eng)", "numlist=[]", "for i in range(numlen):", "    numlist.append(ntoe[num])", "print('-'.join(numlist))", "\n", "怎样改才对"]], "Tag": "程序设计"}
{"Answer": "http://blog.csdn.net/froglian/article/details/23246949", "Konwledge_Point": "整型", "Question": ["混合类型的数组怎么才能在vb6.0中定义，偶数为整形，奇数为浮点可以实现么？", ["混合类型的数组怎么才能在vb6.0中定义，偶数为整形，奇数为浮点可以实现么？怎么在vb中定义和调用混合类型的数组？"]], "Tag": "程序设计"}
{"Answer": "报这个warning的不是你的转换，而是你接下来的这句getString()\r\n你改测试就简单的好好测，看如下\r\n\r\n\r\n    try {\r\n                int s = Integer.parseInt(size);\r\n        　　　　System.out.println(\"Got num is:\"+s);//正确\r\n                //Log.i(\"s\", getString(s));\r\n            .....\r\n\r\n关于getString()的用法解释是:\r\n **Return a localized string from the application's package's default string table.** \r\n你可以在values下的strings.xml下定义一个\r\n\r\n    &lt;string name=\"my_str\"&gt;abc123456&lt;/string&gt;\r\n\r\n然后这样去得到它:\r\n\r\n    Log.i(\"s\", getString(R.string.my_str));//s abc123456", "Konwledge_Point": "整型", "Question": ["android无法转换字符串到整型", ["求助：", "\n\n", "从一个XML文件中获取字符串，内容大概就是", "262626", "这样。现在需要将字符串转换到 ", "MB (/1024)", "  形式。但是不能转换int或者长整型。我的测试代码：", "\n\n", "String size = parser.getValue(e, parser.KEY_FileSizeInByte);\nLog.i(\"menuItems\",size);\n\n    try {\n        int s = Integer.parseInt(size);\n        Log.i(\"s\", getString(s));\n    }\n    catch (Exception e1) {\n        Log.i(\"error\", e1.getMessage());\n    }\n", "\n\n", "我还测试了：", "\n\n", "Integer.valueOf(str); \n", "\n\n", "得到的错误：", "\n\n", "04-15 23:06:17.652: I/menuItems(6819): 97035\n04-15 23:06:17.652: W/ResourceType(6819): No package identifier when getting value for resource number 0x00017b0b\n04-15 23:06:17.652: I/error(6819): String resource ID #0x17b0b\n04-15 23:06:17.692: I/menuItems(6819): 2957\n04-15 23:06:17.692: W/ResourceType(6819): No package identifier when getting value for resource number 0x00000b8d\n04-15 23:06:17.692: I/error(6819): String resource ID #0xb8d\n04-15 23:06:17.692: I/menuItems(6819): 559711\n04-15 23:06:17.692: W/ResourceType(6819): No package identifier when getting value for resource number 0x00088a5f\n04-15 23:06:17.692: I/error(6819): String resource ID #0x88a5f\n04-15 23:06:17.692: I/menuItems(6819): 153651\n04-15 23:06:17.692: W/ResourceType(6819): No package identifier when getting value for resource number 0x00025833\n04-15 23:06:17.692: I/error(6819): String resource ID #0x25833\n04-15 23:06:17.692: I/menuItems(6819): 1733630\n04-15 23:06:17.692: W/ResourceType(6819): No package identifier when getting value for resource number 0x001a73fe\n04-15 23:06:17.692: I/error(6819): String resource ID #0x1a73fe\n04-15 23:06:17.692: I/menuItems(6819): 532105\n04-15 23:06:17.692: W/ResourceType(6819): No package identifier when getting value for resource number 0x00081e89\n04-15 23:06:17.692: I/error(6819): String resource ID #0x81e89\n04-15 23:06:17.702: I/menuItems(6819): 28817\n04-15 23:06:17.702: W/ResourceType(6819): No package identifier when getting value for resource number 0x00007091\n04-15 23:06:17.702: I/error(6819): String resource ID #0x7091\n04-15 23:06:17.702: I/menuItems(6819): 90787\n04-15 23:06:17.702: W/ResourceType(6819): No package identifier when getting value for resource number 0x000162a3\n04-15 23:06:17.702: I/error(6819): String resource ID #0x162a3\n04-15 23:06:17.702: I/menuItems(6819): 33556\n04-15 23:06:17.702: W/ResourceType(6819): No package identifier when getting value for resource number 0x00008314\n04-15 23:06:17.702: I/error(6819): String resource ID #0x8314\n04-15 23:06:17.702: I/menuItems(6819): 122145\n04-15 23:06:17.702: W/ResourceType(6819): No package identifier when getting value for resource number 0x0001dd21\n04-15 23:06:17.702: I/error(6819): String resource ID #0x1dd21\n04-15 23:06:17.702: I/menuItems(6819): 323312\n04-15 23:06:17.702: W/ResourceType(6819): No package identifier when getting value for resource number 0x0004eef0\n04-15 23:06:17.702: I/error(6819): String resource ID #0x4eef0\n04-15 23:06:17.702: I/menuItems(6819): 532676\n04-15 23:06:17.702: W/ResourceType(6819): No package identifier when getting value for resource number 0x000820c4\n04-15 23:06:17.702: I/error(6819): String resource ID #0x820c4\n04-15 23:06:17.712: I/menuItems(6819): 49133\n04-15 23:06:17.712: W/ResourceType(6819): No package identifier when getting value for resource number 0x0000bfed\n04-15 23:06:17.712: I/error(6819): String resource ID #0xbfed\n04-15 23:06:17.712: I/menuItems(6819): 622507\n04-15 23:06:17.712: W/ResourceType(6819): No package identifier when getting value for resource number 0x00097fab\n04-15 23:06:17.712: I/error(6819): String resource ID #0x97fab\n04-15 23:06:17.712: I/menuItems(6819): 57333\n04-15 23:06:17.712: W/ResourceType(6819): No package identifier when getting value for resource number 0x0000dff5\n04-15 23:06:17.712: I/error(6819): String resource ID #0xdff5\n04-15 23:06:17.712: I/menuItems(6819): 17265\n04-15 23:06:17.712: W/ResourceType(6819): No package identifier when getting value for resource number 0x00004371\n04-15 23:06:17.712: I/error(6819): String resource ID #0x4371\n"]], "Tag": "程序设计"}
{"Answer": "dici[i]是二维数组，在输出时，数组移动的步长是一行，就是说先定位在数组的首地址，当循环继承进行时，会移动到下一行，依次如上移动", "Konwledge_Point": "整型", "Question": ["字符数组连接为整型，输出非预期问题", ["从文件中读取数据，在连接成整型，头一二个没问题，第三个就全是非预期的数值，求解", "\n文件读取查不出什么问题。", "\nchar dicii[256*sizeof(int)] = {0};", "\nchar dici1[256][sizeof(int)] = {0};", "\nint dici[256] = {0};", "\n//.........省略", "\nfin.seekg(0,std::ios::cur);", "\nfin.read(cpq,3*sizeof(long long));  //没问题", "\nfin.read(dicc,256);       //没问题", "\nfin.read(dicii,256*sizeof(int));", "\nfor(int i=0,t=0;i<3;i++){", "\n   for(int j=0;j<sizeof(long long);j++){", "\n      cpq1[i][j] = cpq[t];", "\n      t++;", "\n   }", "\n}", "\nfor(int i=0;i<3;i++) icpq[i] = ", "(long long", ")cpq1[i]; //这个输出正常", "\nfor(int i=0,t=0;i<256;i++){", "\n   for(int j=0;j<sizeof(int);j++){", "\n      dici1[i][j] = dicii[t];", "\n      t++;", "\n   }", "\n}", "\nfor(int i=0;i<256;i++) dici[i] = ", "(int", ")dici1[i]; //连接后输出非预期 "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;If your DB2 date is \"$date_from_db2\":&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$newdate = date(\"Y-m-d\", strtotime('$date_from_db2'));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That requires an intermediate step, of course.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["将DB2中的整数转换为日期间隔，以便mysql插入", ["\n\n", "I have a php script with this select query:", "\n\n", "$plcQueryDB2 = \" \n\n    select  \n            cstnoc AS DEALER,\n            framec AS FRAME,\n            covr1c AS COVER,\n            colr1c AS COLOR ,\n            extd1d AS SHIPDATE\n      FROM GPORPCFL\n      group by invnoc,cstnoc, slsnoc, orqtyc, framec, covr1c,colr1c, extd1d\n      limit 200\n\";\n", "\n\n", "The result set is correct, but the issue is I'm using the result to insert into mysql and need the SHIPDATE column in true date format since it's an integer in DB2. It looks like 20180202 whereas I need 2018-02-02 for mysql.", "\n\n", "The other factor is I need to use that one value (SHIPDATE) for 2 values on the insert.", "\n\n", "I need to insert SHIPDATE + 7 DAYS for start_date and SHIPDATE + 127 DAYS for expire_date.", "\n\n", "Here's the insert:", "\n\n", "$stmt = $PDO->prepare(\"\n        INSERT INTO placements (sku_id, group_id, dealer_id, start_date, expire_date)\n        SELECT id, sku_group_id, :DEALER, :SHIPDATE + 7 day interval, :SHIPDATE + 127 day interval\n        FROM skus s\n        WHERE  s.frame=:FRAME AND s.cover1=:COVER AND s.color1=:COLOR\n    \");\n", "\n\n", "Obviously I get a mysql syntax error at : ", ":SHIPDATE + 7 day interval, :SHIPDATE + 127 day interval", "\n\n", "And that's still not putting it into true date format. So I have two issues revolving around the same field here.", "\n\n", "What's the best way I can convert to true date format and add the intervals for this select or insert?", "\n\n", "I can either ammend the select to convert and add the interval or do it at the insert level, I just don't really know how or which is best. ", "\n    "]], "Tag": "程序设计"}
{"Answer": "```\r\n CString ChineseCapitalMoney(double Num)\r\n{\r\n    CString szChMoney,szNum; \r\n    int iLen, iNum, iAddZero=0;\r\n    TCHAR* hzUnit[18]={_T(\"分\"),_T(\"角\"),_T(\"元\"),_T(\"拾\"),_T(\"佰\"),_T(\"仟\"),_T(\"万\"),_T(\"拾\"),_T(\"佰\"),_T(\"仟\"),_T(\"亿\"),_T(\"拾\"),_T(\"佰\"),_T(\"仟\"),_T(\"万\"),_T(\"拾\"),_T(\"佰\"),_T(\"仟\")};\r\n    TCHAR* hzNum[10]={_T(\"零\"),_T(\"壹\"),_T(\"贰\"),_T(\"叁\"),_T(\"肆\"),_T(\"伍\"),_T(\"陆\"),_T(\"柒\"),_T(\"捌\"),_T(\"玖\")};\r\n    szNum.Format(_T(\"%18.0f\"), Num*100); //只是到分\r\n    szNum.TrimLeft();\r\n    iLen=szNum.GetLength();\r\n    if(iLen&gt;15 || iLen==0 || Num&lt;0)return \"\"; //数据错误返回\r\n \r\n    for(int i=0;i&lt;iLen;i++)\r\n    {\r\n        iNum=_ttoi((LPCTSTR)szNum.Mid(i,1));\r\n        if(iNum==0)//如果为0\r\n            iAddZero++;\r\n        else\r\n        {\r\n            if(iAddZero&gt;0) \r\n                szChMoney+=_T(\"零\");\r\n            szChMoney+=hzNum[iNum];//转换为相应的数字\r\n            iAddZero=0;\r\n        }   \r\n        if(iNum!=0||iLen-i==3||iLen-i==11||((iLen-i+1)%8==0&amp;&amp;iAddZero&lt;4))\r\n        szChMoney+=hzUnit[iLen-i-1];//添加相应的汉字\r\n    }\r\n    if(szNum.Right(2)==_T(\"00\")) //没有角和分\r\n     szChMoney+=_T(\"整\");\r\n    return szChMoney;\r\n}\r\n```", "Konwledge_Point": "整型", "Question": ["求用C++写任意整数转换成中文大写的代码", ["我正在学习C++，才开始不懂怎么写，还没有理清头绪，希望有人能帮我写一下，我好有一个指路灯，谢谢"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;去重后用新数组存储。不要在原数组上进行删除。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["有两个整型数组A和B，要求找出不相同的数组", ["问题遇到的现象和发生背景", "\n", "有两个整型数组A和B，要求找出不相同的数组", "\n", "问题相关代码，请勿粘贴截图", "\n", "数组A和B，里面有相同的数，如数组A，有相同的参数（两个以上）还有其他不一样的参数，数组B也有相同的参数（两个以上），还有其他不一样的参数", "我怎么去除A与B和数组本身相同的参数", "\n", "我的解答思路和尝试过的方法", "\n", "两层循环再判断去重，但是好像是去重位置出错了", "\n", "我想要达到的结果", "\n", "去重，打印不同的数组"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;应该是寻找行最大值那里错了&amp;#xff0c;可以使用一个变量存储最大值&amp;#xff0c;逐一比较完整行后寻找出行最大值&amp;#xff0c;及其行列坐标值&amp;#xff0c;如果还需要打印每行其他相同最大值&amp;#xff0c;还需要修改下&amp;#xff0c;修改如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-comment\"&gt;#define _CRT_SECURE_NO_WARNINGS&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; m &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;n, &amp;amp;m);\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; arr[&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; m; j&amp;#43;&amp;#43;)\n        {\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;arr[i][j]);\n        }\n    }\n    \n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i,j;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; row[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-string\"&gt;{0}&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;存放最大值行的数组 \n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; col[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-string\"&gt;{0}&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;存放最大值列的数组 \n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; temp1 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;暂时的最大值\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; max;  &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;最大值 \n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; n; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; \n        &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; flag &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        max &amp;#61; arr[i][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;默认此行第一个数为此行最大值&amp;#xff0c;以便于此行其他值来比较 \n        row[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;]&amp;#61;i; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;把此行的下标存入行最大值坐标数组 \n        col[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;把第一列下标存入列最大值坐标数组 \n        \n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; m; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (max&amp;lt;arr[i][j]) //如果此行其他列的值比最大值大&amp;#xff0c;则把此值赋给最大值变量&amp;#xff0c; \n            {\n                max &amp;#61; arr[i][j];\n                row[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;] &amp;#61; i; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;把此行的下标存入行最大值坐标数组 \n                col[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;] &amp;#61; j; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;把此列下标存入列最大值坐标数组 \n                \n                \n            }\n//            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n//            {\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;                temp1 &amp;#61; arr[i][j &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;                row &amp;#61; i;\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;                col &amp;#61; j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;            }//找出每一行的最大值\n        }\n        \n        //寻找此行其他数值相同的最大值 \n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; m; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (max&amp;#61;&amp;#61;arr[i][j]&amp;amp;&amp;amp;col[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;]!&amp;#61;j)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;&amp;#43;&amp;#43;;\n                \n                row[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;] &amp;#61; i;\n                col[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;] &amp;#61; j;\n                \n            }\n\n        }\n        \n        \n       // &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;i&amp;#61;%d,j&amp;#61;%d,row&amp;#61;%d,col&amp;#61;%d, arr[%d][%d]&amp;#61;%d\\n&amp;#34;&lt;/span&gt;,i,j,row[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;],col[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;],row[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;],col[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;],arr[row[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;]][col[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;]]); \n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; k &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; k &amp;lt; n; k&amp;#43;&amp;#43;)  \n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (arr[row[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;]][col[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;]] &amp;gt;&amp;#61; arr[k][col[&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;]])\n                flag&amp;#43;&amp;#43;;\n        }//遍历找出的行最大的所在列&amp;#xff0c;判断其是否所在列最大\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (flag &amp;#61;&amp;#61; n)\n        {\n            &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;打印所有的最大值 \n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; k&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;k&amp;lt;&amp;#61;&lt;span class=\"hljs-keyword\"&gt;index&lt;/span&gt;;k&amp;#43;&amp;#43;){\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d %d %d\\n&amp;#34;&lt;/span&gt;, arr[row[k]][col[k]], row[k]&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, col[k]&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;);\n            }\n            \n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/120840573966187.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言二维整型数组的“最大点”", ["求二维整型数组的\"最大点\"。二维数组的\"最大点\"定义为：某个数是所在行的最大值，并且是所在列的最大值。注意：某行或某列上可能有多个\"最大点\"", "【输入形式】", "从控制台读入二维数组。", "第一行只有以空格分隔的两个正整数n和m（n,m<=10），n代表二维数组的行数，m代表二维数组的列数。", "然后在后续n行上输入二维数组的元素，每行有m个以若干空格分隔的整数，代表二维数组在该行上的所有元素。", "【输出形式】", "向控制台输出二维数组的\"最大点\"，按行下标、列下标从小到大的顺序输出，每行一个，先输出\"最大点\"数值，再输出对应的行数、列数（行列都从1开始计数），以一个空格分隔。", "【样例输入】", "3  4", "8  60  7  100", "10  498  12  49", "-71  132  4  85", "【样例输出】", "100 1 4", "498 2 2", "\n", "#define _CRT_SECURE_NO_WARNINGS", "\n", "#", "include", "<", "stdio.h", ">", "\n", "int", " main()\n{\n    ", "int", " n = ", "0", ";\n    ", "int", " m = ", "0", ";\n    scanf(", "\"%d%d\"", ", &n, &m);\n    ", "int", " arr[", "100", "][", "100", "];\n    ", "for", " (", "int", " i = ", "0", "; i < n; i++)\n    {\n        ", "for", " (", "int", " j = ", "0", "; j < m; j++)\n        {\n            scanf(", "\"%d\"", ", &arr[i][j]);\n        }\n    }\n    \n    ", "for", " (", "int", " i = ", "0", "; i < n; i++)\n    {\n        ", "int", " flag = ", "0", ";\n        ", "int", " ", "row", " = ", "0", ";", "//行", "\n        ", "int", " ", "col", " = ", "0", ";", "//列", "\n        ", "int", " temp1 = ", "0", ";", "//暂时的最大值", "\n        ", "for", " (", "int", " j = ", "0", "; j < m; j++)\n        {\n            ", "if", " (arr[i][j] > arr[i][j + ", "1", "])\n            {\n                temp1 = arr[i][j];\n                ", "row", " = i;\n                ", "col", " = j;\n            }\n            ", "else", "\n            {\n                temp1 = arr[i][j + ", "1", "];\n                ", "row", " = i;\n                ", "col", " = j+", "1", ";\n            }", "//找出每一行的最大值", "\n        }\n        ", "for", " (", "int", " j = ", "0", "; j < n; j++)\n        {\n            ", "if", " (arr[", "row", "][", "col", "] >= arr[j][", "col", "])\n                flag++;\n        }", "//遍历找出的行最大的所在列，判断其是否所在列最大", "\n        ", "if", " (flag == n)\n        {\n            printf(", "\"%d %d %d\\n\"", ", arr[", "row", "][", "col", "], ", "row", "+", "1", ", ", "col", "+", "1", ");\n            \n        }\n    }\n    \n    ", "return", " ", "0", ";\n}\n\n", "\n", "\n", "请问我的代码哪里出问题了，谢谢指教！！"]], "Tag": "程序设计"}
{"Answer": "&lt;ol&gt;&lt;li&gt;pow运算参数和返回值均为double类型&amp;#xff0c;你赋值给int&amp;#xff0c;进行了一次转换。&lt;br /&gt;参考&amp;#xff1a;&lt;a href=\"https://www.cplusplus.com/reference/cmath/pow/?kw&amp;#61;pow\" id=\"textarea_1640112238318_1640112522537_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.cplusplus.com/reference/cmath/pow/?kw&amp;#61;pow&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;参考&amp;#xff1a;&lt;a href=\"https://blog.csdn.net/lin200753/article/details/27952897\" id=\"textarea_1640112238318_1640112522537_1\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/lin200753/article/details/27952897&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;printf输出会根据格式化的不同再次进行转换。例如%d则转为int, %u则转为unsigned int&lt;/li&gt;&lt;li&gt;输出long long int&amp;#xff0c;使用%lld&lt;br /&gt;参考&amp;#xff1a;&lt;a href=\"https://www.cplusplus.com/reference/cstdio/printf/?kw&amp;#61;printf\" id=\"textarea_1640112238318_1640112522537_2\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://www.cplusplus.com/reference/cstdio/printf/?kw&amp;#61;printf&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;", "Konwledge_Point": "整型", "Question": ["整型数据 long long int ，unsigned int 输出异常，求解！", ["我对比了一下int，long，long long，unsigned  这个四种整型数据的不同的输出情况，有一下几个疑问：", "\n", "unsigned int  d1 = pow(2,32) 计算结果为 - 1。个人思考是：数据溢出，因为int只有最多能表达的数是4294967295，2的32次方大于4294967295所以直接取值4294967295，输出的是%d为有符号整型，故值为 - 1.", "long long int 中 c1，c5，c6 的值，%ld 输出为什么是 0 和 - 1？long long 型字节数为8，即有64为存储空间，但是输出的数据却不大于2的32次方？实际上该如何输出？", "\n", "以下为代码（新手上路，请海涵！使用编译器code blocks）：", "\n", "#include <stdio.h>", "\n\n", "int", " main()\n\n{\n    int ", "a1", ", ", "a2", ", ", "a3", ", ", "a4", ",a5,a6", ";", "\n    ", "a1", " = pow(", "2", ",", "32", ")", ";", "\n    ", "a2", " = pow(", "2", ",", "32", ") - ", "2", ";", "\n    ", "a3", " = pow(", "2", ",", "31", ")", ";", "\n    ", "a4", " = pow(", "2", ",", "31", ") - ", "2", ";", "\n\n    long int b1, b2, b3, b4", ";", "\n    b1 = pow(", "2", ",", "32", ")", ";", "\n    b2 = pow(", "2", ",", "32", ") - ", "2", ";", "\n    b3 = pow(", "2", ",", "31", ")", ";", "\n    b4 = pow(", "2", ",", "31", ") - ", "2", ";", "\n\n    long long int ", "c1", ", ", "c2", ", ", "c3", ", ", "c4", ", ", "c5", ", ", "c6", ";", "\n    ", "c1", " = pow(", "2", ",", "32", ")", ";", "\n    ", "c2", " = pow(", "2", ",", "32", ") - ", "2", ";", "\n    ", "c3", " = pow(", "2", ",", "31", ")", ";", "\n    ", "c4", " = pow(", "2", ",", "31", ") - ", "2", ";", "\n    ", "c5", " = pow(", "2", ",", "43", ")", ";", "\n    ", "c6", " = pow(", "2", ",", "43", ")-", "1", ";", "\n\n    unsigned int ", "d1", ", ", "d2", ", ", "d3", ", ", "d4", ";", "\n    ", "d1", " = pow(", "2", ",", "32", ")", ";", "\n    ", "d2", " = pow(", "2", ",", "32", ") - ", "2", ";", "\n    ", "d3", " = pow(", "2", ",", "31", ")", ";", "\n    ", "d4", " = pow(", "2", ",", "31", ") - ", "2", ";", "\n\n    printf(", "\"  a1 = %d\\n, a2 = %d\\n, a3 = %d\\n, a4 = %d\\n\"", ",", "a1", ", ", "a2", ", ", "a3", ", ", "a4", ")", ";", "\n    printf(", "\"\\n  b1 = %d\\n, b2 = %d\\n, b3 = %d\\n, b4 = %d\\n\"", ",b1, b2, b3, b4)", ";", "\n    printf(", "\"\\n  c1 = %d\\n, c2 = %d\\n, c3 = %d\\n, c4 = %d\\n, c5 = %d\\n, c6 = %d\\n\"", ",", "c1", ", ", "c2", ", ", "c3", ", ", "c4", ", ", "c5", ", ", "c6", ")", ";", "\n    printf(", "\"\\n  d1 = %d\\n, d2 = %d\\n, d3 = %d\\n, d4 = %d\\n\"", ",", "d1", ", ", "d2", ", ", "d3", ", ", "d4", ")", ";", "\n\n    printf(", "\"\\n  uc1 = %u\\n, uc2 = %u\\n, uc3 = %u\\n, uc4 = %u\\n, uc5 = %u\\n\"", ",", "c1", ", ", "c2", ", ", "c3", ", ", "c4", ", ", "c5", ")", ";", "\n    printf(", "\"\\n  ud1 = %u\\n, ud2 = %u\\n, ud3 = %u\\n, ud4 = %u\\n\"", ",", "d1", ", ", "d2", ", ", "d3", ", ", "d4", ")", ";", "\n\n    printf(", "\"\\n  ld1 = %ld\\n, ld2 = %ld\\n, lc1 = %ld\\n, lc2 = %ld\\n, lc5 = %ld\\n, lc6 = %ld\\n\"", ",", "d1", ", ", "d2", ", ", "c1", ", ", "c2", ", ", "c5", ")", ";", "\n\n    return ", "0", ";", "\n\n}\n\n\n", "\n", "以下为输出结果：", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The same way you would in any other language:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;s := []int{1, 2, 3}\nn := 0\nfor _, sn := range s {\n    n *= 10\n    n += sn\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Playground: &lt;a href=\"http://play.golang.org/p/SSemwbJuTz\" rel=\"nofollow\"&gt;http://play.golang.org/p/SSemwbJuTz&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; if you're planning to work with more that just single-digit numbers, the loop is a bit trickier:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for _, sn := range s {\n    shift := 10\n    for shift &amp;lt; sn {\n        shift *= 10\n    }\n    n *= shift\n    n += sn\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works with inputs like &lt;code&gt;[]int{1, 23, 456}&lt;/code&gt;: &lt;a href=\"http://play.golang.org/p/h1xsu9vtmP\" rel=\"nofollow\"&gt;http://play.golang.org/p/h1xsu9vtmP&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Look out for the &lt;a href=\"https://en.wikipedia.org/wiki/Integer_overflow\" rel=\"nofollow\"&gt;integer overflow&lt;/a&gt; though.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["在数组golang中连接整数-GoLang", ["\n\n", "I have an array with 3 positions, imagine it has the number 5 in all of them.", "\n\n", "[5 5 5]\n", "\n\n", "how can I pass it to a var in a way that it stays 555? just like this.", "\n\n", "n:= 555 \n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;int  (*p)[5] &amp;#61; a[3][5];访问可以 p[i][j]也可以*(*(p&amp;#43;i)&amp;#43;j) 这是数组指针&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["有某个3行5列的二维整型数组，如果现在想定一个指针p以便于能够指向该数组，应该如何定义", ["有某个3行5列的二维整型数组，如果现在想定一个指针p以便于能够指向该数组，应该如何定义"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;代码如下&amp;#xff0c;如有帮助&amp;#xff0c;请采纳一下&amp;#xff0c;谢谢。&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\n\n#define N (int)5\n\nint main()\n{\n\tint a[N] &amp;#61; {1,5,3,92,6};\n\tint tmp;\n\tfor (int i &amp;#61; 0; i &amp;lt; N-1; i&amp;#43;&amp;#43;)\n\t{\n\t\tfor (int j &amp;#61; 0;j &amp;lt; N-1-i;j&amp;#43;&amp;#43;)\n\t\t{\n\t\t\tif (a[j] &amp;gt; a[j&amp;#43;1])\n\t\t\t{\n\t\t\t\ttmp &amp;#61; a[j];\n\t\t\t\ta[j] &amp;#61; a[j&amp;#43;1];\n\t\t\t\ta[j&amp;#43;1] &amp;#61; tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i &amp;#61; 0; i &amp;lt; N; i&amp;#43;&amp;#43;)\n\t{\n\t\tprintf(&amp;#34;%d &amp;#34;,a[i]);\n\t}\n\t//getchar();\n\t//getchar();\n\treturn 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["定义一个包含5个整型元素(1.5, 3，92，6)的维数组,将数组元素按照由 小到大的顺序输出", ["定义一个包含5个整型元素(1.5, 3，92，6)的维数组,将数组元素按照由 小到大的顺序输出。怎么做"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;end&amp;#61;n-1;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C语言：定义一个元素为n的数组，输入n以及n个整数，求逆序", ["#include <stdio.h>", "int main()", "{int i,n,t;", " scanf(\"%d\",&n);", " int begin=0,end=n;", " int a[n];", " for(i=0;i<n;i++)", " scanf(\"%d\",&a[i]);", " while(begin<end)", " {", "     int t=a[begin];", "         a[begin]=a[end];", "         a[end]=t;", "         begin++;", "         end--;", " }", " for(i=0;i<n;++i)", " printf(\"%d \",a[i]);", "return 0;", "}", "\n", "\n", "哪里错了"]], "Tag": "程序设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;参考如下&amp;#xff1a;&lt;/li&gt;&lt;/ul&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; x , y , z;\n    x &amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;;\n    y &amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;\n    z &amp;#61; x - y;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, z);\n\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;br /&gt;\n\n&lt;p&gt;&lt;b&gt;如有帮助&amp;#xff0c;欢迎点赞&amp;#43;采纳哈&amp;#xff01;&lt;/b&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["关于#c语言#的问题：定义三个整型变量x,y,z给x,y赋值2、3,x减去y的值赋给z,输出z", ["定义三个整型变量x,y,z给x,y赋值2、3,x减去y的值赋给z,输出z"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;int a[5][10],用rand方法随机生成。&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; N 5&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;define&lt;/span&gt; M 5&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[N][M];\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j,sum&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; max &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; ,index1 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;,index2 &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-built_in\"&gt;srand&lt;/span&gt;(&lt;span class=\"hljs-built_in\"&gt;time&lt;/span&gt;(&lt;span class=\"hljs-literal\"&gt;NULL&lt;/span&gt;));\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;N;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;M;j&amp;#43;&amp;#43;){\n            a[i][j] &amp;#61; &lt;span class=\"hljs-built_in\"&gt;rand&lt;/span&gt;()%&lt;span class=\"hljs-number\"&gt;101&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || j&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || i&amp;#61;&amp;#61;N&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt; || j&amp;#61;&amp;#61; M&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;){\n                sum &amp;#43;&amp;#61; a[i][j];    \n            }\n        }\n    }  \n    &lt;span class=\"hljs-comment\"&gt;//显示数据数&lt;/span&gt;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;N;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;M;j&amp;#43;&amp;#43;){\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\t&amp;#34;&lt;/span&gt;,a[i][j]);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(a[i][j]&amp;gt;max){\n                max &amp;#61; a[i][j];\n                index1 &amp;#61; i;\n                index2 &amp;#61; j;\n            }\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;sum&amp;#61;%d\\n&amp;#34;&lt;/span&gt;,sum);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;max &amp;#61; %d ,i&amp;#61;%d,j&amp;#61;%d&amp;#34;&lt;/span&gt;,max,index1,index2);\n    \n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["关于#c语言#的问题：定义一个 N×M（N 和 M 为常量或宏）的整型二维数组", ["定义一个 N×M（N 和 M 为常量或宏）的整型二维数组，随机生成 N×M 个 0~100之间的整数，放进二维数组中。计算并输出二维数组周边元素之和；查找并输出二维数组中最大元素及其下标。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%2s%14s\\n&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;i&amp;#34;&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;some_data[i]&amp;#34;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这样写输出的是&amp;#34;i&amp;#34;和 &amp;#34;some_data[i]&amp;#34;两个字符串&amp;#xff0c;而不是上面定义的值&lt;br /&gt;这样写只是打印一个类似于表头的东西。为了让格式看起来比较清晰&lt;br /&gt;i             some_data[i]&lt;br /&gt;0                  1492&lt;br /&gt;1                  1066&lt;br /&gt;这样的&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["关于c语言整型变量使用%s，地址符需要加双引号的问题。", ["#", "include", "<stdio.h>", "\n", "#", "define", " SIZE 4", "\n\n", "int", " ", "main", "()", "\n", "{\n    ", "int", " some_data[SIZE] = { ", "1492", ", ", "1066.", " };\n    ", "int", " i;\n\n    ", "printf", "(", "\"%2s%14s\\n\"", ", ", "\"i\"", ", ", "\"some_data[i]\"", ");\n    ", "for", " (i = ", "0", "; i < SIZE; i++)\n        ", "printf", "(", "\"%2d%14d\\n\"", ", i, some_data[i]);\n    \n    ", "return", " ", "0", ";\n}\n\n", "\n", "想问一下，为什么第一个printf后面的整型变量i和some_data[i]。需要加双引号？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;最小的一分为10&amp;#xff0c;大的一整形&lt;/p&gt;\n&lt;p&gt;&amp;#61;&amp;#61;&amp;#61;&amp;#61;啥意思啊&amp;#xff1f;&amp;#xff1f;&amp;#xff1f;&lt;br /&gt;参数是命令行参数&amp;#xff0c;还是输入参数&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["编写一个程序，在输入时获得两个参数-数字x和y。最小的一分为10，大的一整形。在屏幕上显示结果。", ["编写一个程序，在输入时获得两个参数-数字x和y。最小的一分为10，大的一整形。在屏幕上显示结果。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;]&amp;#61;{(&lt;span class=\"hljs-number\"&gt;3.5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;2.6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3.9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4.5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4.8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5.7&lt;/span&gt;),(&lt;span class=\"hljs-number\"&gt;2.9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;3.5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4.4&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5.9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4.9&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5.8&lt;/span&gt;),(&lt;span class=\"hljs-number\"&gt;3.5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4.8&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5.3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6.5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;4.3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5.6&lt;/span&gt;),(&lt;span class=\"hljs-number\"&gt;4.5&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;5.6&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;6.3&lt;/span&gt;,&lt;span class=\"hljs-number\"&gt;7.7&lt;/span&gt;)};\n&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; b[&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//存储每行乘积&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; c[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;];&lt;span class=\"hljs-comment\"&gt;//存储每列乘积&lt;/span&gt;\n&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; s &amp;#61; &lt;span class=\"hljs-number\"&gt;1.0&lt;/span&gt;;\n&lt;span class=\"hljs-comment\"&gt;//计算乘积&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;i&amp;#43;&amp;#43;)\n{\nb[i]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\nc[i]&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;;j&amp;#43;&amp;#43;){\nb[i]&amp;#61;a[i][j];\nc[i]&amp;#61;a[j][i];\ns*&amp;#61;a[i][j];\n}\n}\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;;i&amp;#43;&amp;#43;){\n&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;第%d行乘积:%f\\n&amp;#34;&lt;/span&gt;, i, b[i]);\n}\n\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;;i&amp;#43;&amp;#43;){\n&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;第%d列乘积:%f\\n&amp;#34;&lt;/span&gt;, i, c[i]);\n}\n&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;全部乘积:%f\\n&amp;#34;&lt;/span&gt;, s);\n&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["对某整型二维数组a[4][6],初始化填入一些浮点数，分别求其各行、各列以及所有数之乘积, 并显示数组的数据与计算结果", ["对某整型二维数组a[4][6],初始化填入一些浮点数，分别求其各行、各列以及所有数之乘积, 并显示数组的数据与计算结果 。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;cin是C&amp;#43;&amp;#43;编程语言中的标准输入流对象&amp;#xff0c;即istream类的对象。cin主要用于从标准输入读取数据&amp;#xff0c;这里的标准输入&amp;#xff0c;指的是终端的键盘。此外&amp;#xff0c;cout是流的对象&amp;#xff0c;即ostream类的对象&amp;#xff0c;cerr是标准错误输出流的对象&amp;#xff0c;也是ostream 类的对象。这里的标准输出指的是终端键盘&amp;#xff0c;标准错误输出指的是终端的屏幕。&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["cin有什么用各位 比如说我先int a=0 然后我再cout<<“请给整型函数a赋值”endl", ["cin有什么用各位 比如说我先int a=0 然后我再cout<<“请给整型函数a赋值”endl；然后我再cin>>a; 然后我再cout<<整型函数a的值为 请问cin到底有什么用？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;起泡法就是冒泡法吧&amp;#xff1f;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;sort&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; b[] ,&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,j,t;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n-i&lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(b[j] &amp;lt; b[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;])\n            {\n                  t &amp;#61; b[j];\n                  b[j] &amp;#61; b[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                  b[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; t;\n            }\n        }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;],i;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n    &lt;span class=\"hljs-built_in\"&gt;sort&lt;/span&gt;(a,&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["写一个函数void sort(int b[] ,int n)，用“起泡法”对输入的n个整型数按由大到小的顺序排列，要求在主函数中输完成数据的输入、输出", ["写一个函数void sort(int b[] ,int n)，用“起泡法”对输入的n个整型数按由大到小的顺序排列，要求在主函数中输完成数据的输入、输出"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;遍历数组,记录数值最小的元素下标,将这个下标后面的元素都向前移动一个位置&lt;br /&gt;代码示例如下:&lt;br /&gt;&lt;code class=\"language-javascript\"&gt;有帮助望采纳~&lt;/code&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; argc, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;};\n  &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; min, loc &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(a)/&lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;); i&amp;#43;&amp;#43;)\n  {\n      &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (!i)\n      {\n          min &amp;#61; a[i];\n      }\n      &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n      {\n          &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (min &amp;gt; a[i])\n          {\n              min &amp;#61; a[i];\n              loc &amp;#61; i;\n          }\n      }\n  }\n  &lt;span class=\"hljs-built_in\"&gt;memcpy&lt;/span&gt;(a &amp;#43; loc, a &amp;#43; loc &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;, &lt;span class=\"hljs-built_in\"&gt;sizeof&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt;) * (&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt; - loc));\n  &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;; i&amp;#43;&amp;#43;)\n  {\n      &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;,a[i]);\n  }\n  \n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/677582541536155.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["已知一整型数组  a[6]={10,3,9,7,1,5}，删除其中最小元素，其余元素对应位置不变。", ["练习:已知一整型数组", "\n", "a[6]={10,3,9,7,1,5}，删除其中最小元素，其余元素对应位置不变。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;源程序&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code class=\"language-objectivec\"&gt;#include &amp;lt;stdio.h&amp;gt;\n\nint main()\n{\n    int i,s&amp;#61;0;\n\tint num[10]&amp;#61;{2, 4, 6, 8, 10, 12, 14, 16, 18, 20};\n\tfor(i&amp;#61;0;i&amp;lt;10;)\n\t{\n\t\ts &amp;#43;&amp;#61; num[i];\n\t\ti &amp;#43;&amp;#61; 2;\n\t}\n   printf(&amp;#34;奇数和为&amp;#xff1a;%d&amp;#34;,s);   \n   return 0;\n}&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;运行结果&amp;#xff1a;&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;奇数和为&amp;#xff1a;50\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; &lt;/p&gt;\n\n&lt;p&gt;如有帮助还望您采纳下哦 谢谢&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["救救孩子吧\n已知一个整型数据定义如下: int num[10]={2, 4, 6, 8, 10, 1", ["救救孩子吧\n已知一个整型数据定义如下: int num[10]={2, 4, 6, 8, 10, 12, 14, 16, 18, 20};计算出数组中所有奇数下标的数组元素之和。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你没发现&amp;#xff0c;你的代码在逻辑上还没走通吗&amp;#xff1f;什么叫做“超过部分”&amp;#xff1f;&amp;#xff1f;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;double&lt;/span&gt; x, y, z, k;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入应税月收入&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;, &amp;amp;x);\n    y &amp;#61; x - &lt;span class=\"hljs-number\"&gt;5000&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (y &amp;lt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; y &amp;gt; &lt;span class=\"hljs-number\"&gt;-5000&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;缴纳税额为&amp;#xff1a;0\\n纳税后实际收入为&amp;#xff1a;%.0lf\\n&amp;#34;&lt;/span&gt;,x);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (y &amp;lt; &lt;span class=\"hljs-number\"&gt;-5000&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入数据有误&amp;#34;&lt;/span&gt;);    \n        }\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (y &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;3000&lt;/span&gt;)\n            {\n                k &amp;#61; y * &lt;span class=\"hljs-number\"&gt;0.03&lt;/span&gt;;\n                z &amp;#61; x - k;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;缴纳税额为&amp;#xff1a;%.0lf\\n纳税后实际收入为&amp;#xff1a;%.0lf\\n&amp;#34;&lt;/span&gt;, k, z);\n            }\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (y &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;12000&lt;/span&gt;)\n            {\n                k &amp;#61; &lt;span class=\"hljs-number\"&gt;3000&lt;/span&gt; * &lt;span class=\"hljs-number\"&gt;0.03&lt;/span&gt; &amp;#43; (y - &lt;span class=\"hljs-number\"&gt;3000&lt;/span&gt;) * &lt;span class=\"hljs-number\"&gt;0.1&lt;/span&gt;;\n                z &amp;#61; x - k;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;纳税额为:%.2lf\\n纳税后实际输入为&amp;#xff1a;%.2lf\\n&amp;#34;&lt;/span&gt;, k, z);\n            }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (y &amp;lt;&amp;#61; &lt;span class=\"hljs-number\"&gt;25000&lt;/span&gt;)\n            {\n                k &amp;#61; &lt;span class=\"hljs-number\"&gt;3000&lt;/span&gt; * &lt;span class=\"hljs-number\"&gt;0.03&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-number\"&gt;9000&lt;/span&gt; * &lt;span class=\"hljs-number\"&gt;0.1&lt;/span&gt; &amp;#43; (y - &lt;span class=\"hljs-number\"&gt;12000&lt;/span&gt;) * &lt;span class=\"hljs-number\"&gt;0.2&lt;/span&gt;;\n                z &amp;#61; x - k;\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;纳税额为:%.2lf\\n纳税后实际输入为&amp;#xff1a;%.2lf\\n&amp;#34;&lt;/span&gt;, k, z);\n            }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            {\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;暂时无法计算税额\\n&amp;#34;&lt;/span&gt;);\n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["个税计算问题中同一区间输出整型和float型同时存在", ["问题遇到的现象和发生背景", "\n", "个税计算问题。根据国家的纳税政策，个人应税起征点为月收入5000元；应纳税所得额=应税月收入- 5000元（起征点）。", "应纳税所得额不超过3000元的，按3%交纳个人所得税；超过3000至12000元的，超过部分按10%交纳个人所得税；超过12000至25000元的，超过部分按20%交纳个人所得税。超过25000元的，暂时不做税收处理，输出“暂时无法计算税额！”。编写一个程序，输入某人的应税月收入，计算并输出纳税额及纳税后的实际收入。", "如何输出这个整型和float型同时存在", "\n", "\n", "用代码块功能插入代码，请勿粘贴截图", "\n", "#include<stdio.h>", "int main()", "{", "    double x,y,z;", "    printf(\"请输入应税月收入：\");", "    scanf(\"%lf\",&x);", "    y=x-5000;", "    if(y<0&&y>-5000)", "    {", "        printf(\"缴纳税额为：0\\n纳税后实际收入为：%.0lf\\n\",x);", "    }", "    else", "    {", "        if(y<-5000)", "        {", "            printf(\"输入数据有误\");", "        }", "        else", "        {", "            if(y<=3000)", "            {", "                z=x-y*0.03;", "                printf(\"缴纳税额为：%.0lf\\n纳税后实际收入为：%.0lf\\n\",y*0.03,z);", "            }", "            else", "            {", "                if(y<=12000)", "                {", "                    z=x-y*0.1;", "                    printf(\"纳税额为:%.2lf\\n纳税后实际输入为：%.2lf\\n\",y*0.1,z);", "                }", "                else", "                {", "                    if(y<=25000)", "                    {", "                        z=x-y*0.2;", "                        printf(\"纳税额为:%.2lf\\n纳税后实际输入为：%.2lf\\n\",y*0.2,z);", "                    }", "                    else", "                    {", "                        if(y>25000)", "                        {", "                            printf(\"暂时无法计算税额\\n\");", "                        }", "\n", "                }\n            }\n        }\n    }\n}\n", "return", " ", "0", ";\n", "\n", "}", "\n", "运行结果及报错内容", "\n", "\n", "我想要达到的结果", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Add&lt;/span&gt;{\n  &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a&amp;#61;&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;;\n  &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; b&amp;#61;&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;;\n  &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;add&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; a,&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; b&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; a&amp;#43;b;\n  }\n  &lt;span class=\"hljs-comment\"&gt;//main方法不需要就去掉&lt;/span&gt;\n  &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;String []args&lt;/span&gt;)&lt;/span&gt;{\n    System.&lt;span class=\"hljs-keyword\"&gt;out&lt;/span&gt;.println(&lt;span class=\"hljs-keyword\"&gt;add&lt;/span&gt;(a,b));\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["编写一个add类加法，有两个int的属性，值分别为6，7，有一个计算加法计算add方法，该方法有两个整形参数，返回值也为int性，输入样例为空，输出样例为13，", ["编写一个add类加法，有两个int的属性，值分别为6，7，有一个计算加法计算add方法，该方法有两个整形参数，返回值也为int性，输入样例为空，输出样例为13，"]], "Tag": "程序设计"}
{"Answer": "因为你没法保证a[4]的下一个存储单元的值是0，这个内存上是随机的值\r\n因此while(*a)可能导致越界发生，读取到了a[4]数组之后的内存，停不下来，输出了很多别的东西。", "Konwledge_Point": "整型", "Question": ["为什么用指针自加读整型数组的时侯读不出0元素？", ["指针自加读整型数组的时侯读不出0元素，而且数组大小要比数组中非零元素的个数大，否则会读出随机数", "\n\n", "#include<stdio.h>\n#include<iostream>\nusing namespace std;\nmain()\n{\n    int b[6]={5,8,3,4,0};\n    int* a=b;\n    while(*a)\n    {\n        cout<<*a<<endl;\n        a++;\n    }\n    return 0;\n}\n\n", "\n\n", "这种的结果是", "\n5", "\n8", "\n3", "\n4", "\n\n", "#include<stdio.h>\n#include<iostream>\nusing namespace std;\nmain()\n{\n    int b[6]={5,8,3,4,1};\n    int* a=b;\n    while(*a)\n    {\n        cout<<*a<<endl;\n        a++;\n    }\n    return 0;\n}\n\n", "\n\n", "这种的结果是", "\n5", "\n8", "\n3", "\n4", "\n1", "\n\n", "#include<stdio.h>\n#include<iostream>\nusing namespace std;\nmain()\n{\n    int b[5]={5,8,3,4,1};\n    int* a=b;\n    while(*a)\n    {\n        cout<<*a<<endl;\n        a++;\n    }\n    return 0;\n}\n", "\n\n", "这种结果是", "\n5", "\n8", "\n3", "\n4", "\n1", "\n1703808", "\n4332105", "\n1", "\n10228376", "\n10228496", "\n4331872", "\n4331872", "\n3842048"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你具体哪个问题不懂&amp;#xff1f;&lt;br /&gt;可以看看 &lt;a href=\"https://blog.csdn.net/uniqsa/article/details/78519140\" id=\"textarea_1661427937221_1661428058767_0\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;span class=\"md_link_url\"&gt;https://blog.csdn.net/uniqsa/article/details/78519140&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["关于c++转python的问题", ["请问有人能帮我把以下这段c++代码转成python代码吗？十分感谢！", "\n", "问题描述：", "地图每个位置都有一个数字表示经过这个位置需要用的时间，地图如下：", "1 6 6 6", "15 7 6 6", "15 3 6 6", "15 15 1 1", "输入：第一行包含两个正整数 N 和 M(1<N,M<30）表示地图长和宽", "下面一行包含 4 个整数，", "前两个数表示起点，后面两个数表示终点，最后是一个 N 行 M 列的二维数组，", "每个数字表示走当前位置需要用的时间。", "输出：一个整数，表示最短时间。样例输入：", "【样例输入】", "4 4", "1 1 4 4", "1 6 6 6", "15 7 6 6", "15 3 6 6", "15 15 1 1", "【样例输出】", "25", "【样例解释】", "\n", "\n", "#include<bits/stdc++.h>\nusing namespace std;\n\nint a", "[101]", "[101]", ",m,n,sum=0,mins=2147483647;\nint f", "[4]", "[2]", "={{0,1},{-1,0},{1,0},{0,-1}};\nint sx,sy,ex,ey,book", "[101]", "[101]", ";\n\nvoid dfs(int x,int y){\n    book", "[x]", "[y]", "=1;\n    sum+=a", "[x]", "[y]", ";\n    if(x==ex && y==ey){\n        mins=sum<mins?sum:mins;\n        book", "[x]", "[y]", "=0;\n        sum-=a", "[x]", "[y]", ";\n        return;\n    }\n    for(int i=0;i<4;i++){\n        int xx=x+f", "[i]", "[0]", ";\n        int yy=y+f", "[i]", "[1]", ";\n        if(xx>=1 && xx<=n && yy>=1 && yy<=m && a", "[xx]", "[yy]", " && book", "[xx]", "[yy]", "==0){\n            dfs(xx,yy);\n        }\n    }\n    book", "[x]", "[y]", "=0;\n    sum-=a", "[x]", "[y]", ";\n    return;\n}\nint main(){\n    cin >> n >> m;\n    cin >> sx >> sy >> ex >> ey;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            cin >> a", "[i]", "[j]", ";\n        }\n    }\n    dfs(sx,sy);\n    cout << mins;\n    return 0;\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;[] ? c main 格式是 void main&amp;#xff08;&amp;#xff09;{}  你这个多了[]  少了{}&lt;/p&gt;\n&lt;p&gt;打印输出是 printf 不是 prinft printr &lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["这个缺少printf声明是什么意思？", ["#include<stdio.h>", "[int main()", "int a,b,c;", "printf(\"Input a,b,c=\");", "scanf(\"%d,％d,％d\",&a,&b,&c);", "if(a>b)", "if(b>c)", "prinft(\"%d,％d,%d\\n\",a,b,c);", "else", "if(a>c)", "prinft(\"%d,%d,％d\\n\",a,c,b);", "else", "prinft(\"%d,%d,%d\\n\",c,a,b);", "else", "if(a>c)", "printr(\"%d,%d,%d\\n\"\",b,a,c);", "else", "if(b>c)", "printf(\"%d,%d,%d\\n\",b,c,a);", "else", "printf(\"%d,%d,%d\\n\"\",c,b,a);", "return 0;", "]"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;那你希望指针应该是什么样的表现形式&amp;#xff1f;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt; A pointer is a variable that holds a memory address.&lt;br /&gt;This address is the location of another object (typically, a variable) in memory.&lt;br /&gt;That is, if one variable contains the address of another variable, the first variable is said to point to the second.&lt;/p&gt;\n&lt;/blockquote&gt;", "Konwledge_Point": "整型", "Question": ["为什么指针是整数，。", ["。。。。。。。。。。。。。。。。。。。。。。。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;基于Monster 组和GPT的调写&amp;#xff1a;&lt;br /&gt;这个程序存在几个问题:&lt;/p&gt;\n&lt;ul&gt;&lt;li&gt;函数zifu没有指定返回类型&amp;#xff0c;应该使用char*或者string作为返回类型。&lt;/li&gt;&lt;/ul&gt;\n&lt;ul&gt;&lt;li&gt;函数zifu中的str是一个局部变量&amp;#xff0c;函数结束后该变量将被释放。因此&amp;#xff0c;返回指向该变量的指针是不安全的。你可以通过将str定义为静态变量或使用动态内存分配来避免这个问题。&lt;/li&gt;&lt;/ul&gt;\n&lt;ul&gt;&lt;li&gt;函数zifu中的sprintf可能会导致缓冲区溢出。你应该使用sprintf_s或者snprintf来避免这个问题。&lt;/li&gt;&lt;/ul&gt;\n&lt;p&gt;下面是修正后的代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* &lt;span class=\"hljs-title\"&gt;zifu&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; str[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    &lt;span class=\"hljs-built_in\"&gt;sprintf_s&lt;/span&gt;(str, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, a);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; str;\n}\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m;\n    cin &amp;gt;&amp;gt; m;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;zifu&lt;/span&gt;(m);\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;或者使用std::string作为返回类型&amp;#xff0c;避免了内存管理问题&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;bits/stdc&amp;#43;&amp;#43;.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n \n&lt;span class=\"hljs-function\"&gt;string &lt;span class=\"hljs-title\"&gt;zifu&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; str[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    &lt;span class=\"hljs-built_in\"&gt;sprintf_s&lt;/span&gt;(str, &lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;, &lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, a);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;string&lt;/span&gt;(str);\n}\n \n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m;\n    cin &amp;gt;&amp;gt; m;\n    cout &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;zifu&lt;/span&gt;(m);\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["关于#ar#的问题：我想写一个把整型数字换成字符数组的函数我的程序如下#include <bits>(语言-c++)", ["我想写一个把    整型数字     换成     字符数组    的函数", "我的程序如下", "\n", "#", "include", "<bits/stdc++.h>", "\n", "using", " ", "namespace", " std;\n\n", "zifu", "(", "int", " a){\n    ", "char", " str[", "20", "];\n    ", "sprintf", "(str,", "\"%d\"", ",a);\n    ", "return", " str;\n}\n\n", "int", " ", "main", "()", "{\n    ", "int", " m;\n    cin>>m;\n    cout<<", "zifu", "(m);\n}\n\n", "\n", "但是报错了，我也不知道问题在哪，请帮忙解答！", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;最好是定义一个类&amp;#xff0c;一个ID&amp;#xff0c;一个name&amp;#xff0c;然后根据枚举ID及值&amp;#xff0c;保存到数组&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["SNMP中哪里可以定义数组？", ["SNMP中哪里可以自定义数组？能否举例说明。", "SNMP中哪里可以自定义数组？能否举例说明。"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-comment\"&gt;#define N 2&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#define M 3&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;\nint(* &lt;span class=\"hljs-keyword\"&gt;Multiply(int(*arr)[M], &lt;/span&gt;int(*&lt;span class=\"hljs-keyword\"&gt;brr)[N], &lt;/span&gt;int C[N][N]))[N]\n{\n    int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; int k &amp;#61; 0;&lt;/span&gt;\n    \n    for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; N; i&amp;#43;&amp;#43;)&lt;/span&gt;\n    {\n        for (k&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; k &amp;lt; M; k&amp;#43;&amp;#43;)&lt;/span&gt;\n        {\n            int &lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; int sum1 &amp;#61; 0;&lt;/span&gt;\n            for (&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; j &amp;lt; M; j&amp;#43;&amp;#43;)&lt;/span&gt;\n            {\n                sum1 &amp;#43;&amp;#61; arr[i][&lt;span class=\"hljs-keyword\"&gt;j] &lt;/span&gt;* &lt;span class=\"hljs-keyword\"&gt;brr[j][k];\n&lt;/span&gt;                &lt;span class=\"hljs-comment\"&gt;/*sum2 &amp;#43;&amp;#61; arr[i][j] * brr[j][1];*/&lt;/span&gt;\n            }\n            C[i][k] &amp;#61; sum1;\n        \n        }\n        \n\n        \n    }\n    return &amp;amp;C;\n}\nint main()\n{\n    int C[N][N] &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; };\n    int A[N][M] &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; };\n    int &lt;span class=\"hljs-keyword\"&gt;B[M][N] &lt;/span&gt;&amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; };\n    int i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; N; i&amp;#43;&amp;#43;)&lt;/span&gt;\n    {\n        int &lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        for (&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; j &amp;lt; M; j&amp;#43;&amp;#43;)&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;scanf(&amp;#34;%d&amp;#34;, &lt;/span&gt;&amp;amp;A[i][&lt;span class=\"hljs-keyword\"&gt;j]);\n&lt;/span&gt;        }\n    }\n    for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; M; i&amp;#43;&amp;#43;)&lt;/span&gt;\n    {\n        int &lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        for (&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; j &amp;lt; N; j&amp;#43;&amp;#43;)&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;scanf(&amp;#34;%d&amp;#34;, &lt;/span&gt;&amp;amp;&lt;span class=\"hljs-keyword\"&gt;B[i][j]);\n&lt;/span&gt;        }\n    }\n    int (*p)[N]&amp;#61;&lt;span class=\"hljs-keyword\"&gt;Multiply(A, &lt;/span&gt;&lt;span class=\"hljs-keyword\"&gt;B,C);\n&lt;/span&gt;    for (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; i &amp;lt; N; i&amp;#43;&amp;#43;)&lt;/span&gt;\n    {\n        int &lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        for (&lt;span class=\"hljs-keyword\"&gt;j &lt;/span&gt;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;&lt;span class=\"hljs-comment\"&gt;; j &amp;lt; N; j&amp;#43;&amp;#43;)&lt;/span&gt;\n        {\n            printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, p[i][&lt;span class=\"hljs-keyword\"&gt;j]);\n&lt;/span&gt;        }\n        printf(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    return &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["2、矩阵相乘 输入2×3矩阵A和3×2矩阵B各元素值，计算矩阵A和矩阵B相乘的结果  输入说明：输入整形数组A和数组B,数组元素用空格分隔", ["2、矩阵相乘", "输入2×3矩阵A和3×2矩阵B各元素值，计算矩阵A和矩阵B相乘的结果", "\n", "输入说明：输入整形数组A和数组B,数组元素用空格分隔", "\n", "输出说明：输出矩阵A*B的结果，矩阵元素之间用空格分隔，数组每行元素用换行分隔"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;if (a[new] &amp;lt; a[old])&lt;br /&gt;应该是if (a[smlr] &amp;lt; a[old])&lt;br /&gt;if (a[new] &amp;gt; a[old])&lt;br /&gt;应该是&lt;br /&gt;if (a[bigr] &amp;gt; a[old])&lt;br /&gt;你的输入数据太整齐了&amp;#xff0c;导致前半部分不需要怎么排就是有序的&amp;#xff0c;你换个数据&amp;#xff0c;前半部分也是乱的&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["将具有20个数组元素的整型数组的前10个数升序排列，后10个降序排列。后续部分排序为什么乱套了", ["\n//将具有", "20", "个数组元素的整型数组的前", "10", "个数升序排列，后", "10", "个降序排列。\n", "#include <stdio.h>", "\nmain()\n{\n    ", "int", " a[", "20", "], trans, smlr, bigr;\n    ", "for", " (", "int", " i = ", "0", "; i < ", "20", "; i++)\n        scanf_s(\"%d\", &a[i]);\n    ", "for", " (", "int", " ", "old", " = ", "0", "; ", "old", " < ", "10", "; ", "old", "++)\n    {\n        smlr = ", "old", ";\n        ", "for", " (", "int", " ", "new", " = ", "1", " + ", "old", "; ", "new", " < ", "10", "; ", "new", "++)\n            ", "if", " (a[", "new", "] < a[", "old", "])\n                smlr = ", "new", ";\n        ", "if", " (smlr != ", "old", ")\n        {\n            trans = a[", "old", "];\n            a[", "old", "] = a[smlr];\n            a[smlr] = trans;\n        }\n    }\n    ", "for", " (", "int", " ", "old", " = ", "10", "; ", "old", " < ", "20", "; ", "old", "++)\n    {\n        bigr = ", "old", ";\n        ", "for", " (", "int", " ", "new", " = ", "1", " + ", "old", "; ", "new", " < ", "20", "; ", "new", "++)\n            ", "if", " (a[", "new", "] > a[", "old", "])\n                bigr = ", "new", ";\n        ", "if", " (bigr != ", "old", ")\n        {\n            trans = a[", "old", "];\n            a[", "old", "] = a[bigr];\n            a[bigr]=trans;\n        }\n    }\n    ", "for", " (", "int", " i = ", "0", "; i < ", "20", "; i++)\n        printf(\"%d \", a[i]);\n}\n\n", "\n", "调试结果：", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "12", "13", "11", "15", "10", "14", "16", "17", "18", "19", "0 1 2 3 4 5 6 7 8 9 19 18 12 17 11 15 16 14 13 10", "D:\\Files\\vs\\test1\\x64\\Debug\\test1.exe (进程 17308)已退出，代码为 0。", "按任意键关闭此窗口. . ."]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;会提示你输入数组索引值应为int整数&amp;#xff0c;而不是浮点数&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["请问数组括号内不是整数会怎么样", ["列入 a[1.3]表示的是什么意思呢？adasfqweasewgerhhdfghsrtsdfsdgaeta"]], "Tag": "程序设计"}
{"Answer": "```\r\n\t\t\tTextWatcher textWatcher = new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                //s--未改变之前的内容\r\n                //start--内容被改变的开始位置\r\n                //count--原始文字被删除的个数\r\n                //after--新添加的内容的个数\r\n                //---------start和count结合从s中获取被删除的内容-------\r\n                String deleText = s.toString().substring(start, start + count);\r\n            }\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                //s--改变之后的新内容\r\n                //start--内容被改变的开始位置\r\n                //before--原始文字被删除的个数\r\n                //count--新添加的内容的个数\r\n                //---------start和count结合从s中获取新添加的内容-------\r\n                String addText = s.toString().substring(start, start + count);\r\n            }\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n                //s--最终内容\r\n            }\r\n        };\r\n\t edit_content.addTextChangedListener(textWatcher);\r\n```\r\n监听输入内容，不合法的输入剔除就可以了", "Konwledge_Point": "整型", "Question": ["如何解决java进制转换越界问题", ["进制转换器中有两组radio button,如果要2进制转换10进制,输入了3就会出现问题 其他进制也一样 该怎么解决?"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;using&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;namespace&lt;/span&gt; std;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;strcmpa&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* s1, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* s2)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* &lt;span class=\"hljs-title\"&gt;strcate&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* s1, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* s2)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-function\"&gt;ifstream &lt;span class=\"hljs-title\"&gt;inf&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;in.txt&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-function\"&gt;ofstream &lt;span class=\"hljs-title\"&gt;outf&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;out.txt&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; }, b[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;] &amp;#61; { &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; };\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; c;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (inf &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b)\n    {\n        c &amp;#61; &lt;span class=\"hljs-built_in\"&gt;strcmpa&lt;/span&gt;(a, b);\n        outf &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"hljs-built_in\"&gt;strcate&lt;/span&gt;(a, b) &amp;lt;&amp;lt; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt;;\n    }\n    inf.&lt;span class=\"hljs-built_in\"&gt;close&lt;/span&gt;();\n    outf.&lt;span class=\"hljs-built_in\"&gt;close&lt;/span&gt;();\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;strcmpa&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* s1, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* s2)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (*s1 &amp;#61;&amp;#61; *s2)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (*s1 &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; *s2 &amp;#61;&amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n        s1&amp;#43;&amp;#43;;\n        s2&amp;#43;&amp;#43;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (*s1 &amp;gt; *s2)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;-1&lt;/span&gt;;\n    }\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* &lt;span class=\"hljs-title\"&gt;strcate&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* s1, &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* s2)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* p &amp;#61; s1;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (*s1&amp;#43;&amp;#43;)\n    {\n    }\n    s1--;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (*s2)\n    {\n        *s1 &amp;#61; *s2;\n        s1&amp;#43;&amp;#43;;\n        s2&amp;#43;&amp;#43;;\n    }\n    *s1 &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#39;\\0&amp;#39;&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; p;\n}\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["字符串的比较与连接——为何将返回值为整型的函数的返回值输出出来，会输出乱码？", ["问：为何用文件输出流 输出的第二行的第一个整型数据，是乱码？？", "\n", "/*字符串的比较与连接,不使用字符串处理函数\n两个字符串s1和s2，其长度都不超过30，比较字符串的大小（字符串比较是从左到右逐位比较），\n如果s1>s2，输出1；s1=s2，输出0；s1<s2，输出-1。编写函数实现该功能。\nint strcmpa(const char *s1,const char *s2)\n然后编写函数将两个字符串连接起来\nchar * strcate(char *s1,const char *s2)\n将s2连接到s1之后，并返回s1\n\n如：in.txt\nC++ Program\nstudent student\ngood evening\n则:out.txt\n-1 C++Program\n0 studentstudent\n1 goodevening\n注意：请勿改动主函数main和其它函数中的任何内容，仅在Begin和End之间填入你编写的若干语句\n---------------------------------------------------------------------------------------------------*/", "\n", "#", "include", "<fstream>", "\n", "using", " ", "namespace", " std;\n", "int", " ", "strcmpa", "(", "char", " *s1,", "char", " *s2)", ";\n", "char", " * ", "strcate", "(", "char", " *s1,", "char", " *s2)", ";\n", "int", " ", "main", "()", "\n", "{    ", "ifstream ", "inf", "(", "\"in.txt\"", ")", ";\n    ", "ofstream ", "outf", "(", "\"out.txt\"", ")", ";\n    ", "char", " a[", "10", "],b[", "10", "];\n    ", "int", " c;\n    ", "while", "(inf>>a>>b)\n    {    c=", "strcmpa", "(a,b);\n        outf<<c<<", "' '", "<<", "strcate", "(a,b)<<", "'\\n'", ";\n    }\n    inf.", "close", "();\n    outf.", "close", "();\n    ", "return", " ", "0", ";\n}\n", "int", " ", "strcmpa", "(", "char", " *s1,", "char", " *s2)", "\n", "{    ", "while", "(*s1==*s2)\n    {    ", "if", "(*s1==", "'\\0'", "&&*s2==", "'\\0'", ")\n        {    ", "return", " ", "0", ";\n        }\n        s1++;\n        s2++;\n    }\n    ", "if", "(*s1>*s2)\n    {    ", "return", " ", "1", ";\n    }\n    ", "else", "\n    {    ", "return", " ", "-1", ";\n    }\n}\n", "char", " *", "strcate", "(", "char", " *s1,", "char", " *s2)", "\n", "{    ", "char", " *p=s1;\n    ", "while", "(*s1++)\n    {\n    }\n    s1--;\n    ", "while", "(*s2)\n    {    *s1=*s2;\n        s1++;\n        s2++;\n    }\n    *s1=", "'\\0'", ";\n    ", "return", " p;\n}\n\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;把double换成float。&lt;br /&gt;float t,c,num&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["c语言double计算能看出哪里出错了", []], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;fun2&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[],&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-type\"&gt;float&lt;/span&gt; sum &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n        sum &amp;#43;&amp;#61; a[i];\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; sum/n;\n}\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; i,a[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;],b[&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;];\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入3个分数\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;a[i]);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入5个分数\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;;i&amp;#43;&amp;#43;)\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;b[i]);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;a的平均分是%0.2f&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;fun2&lt;/span&gt;(a,&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;));\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;b的平均分是%0.2f&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-built_in\"&gt;fun2&lt;/span&gt;(b,&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;));\n    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["编写一个函数fun2计算平均分，在主函数中定义并初始化两个整型数组，分别为3个人和5个人的成绩，调用fun2求平均分(调用格式形如fun2(x,3))，结果在主函数中输出。", ["编写一个函数fun2计算平均分，在主函数中定义并初始化两个整型数组，分别为3个人和5个人的成绩，调用fun2求平均分(调用格式形如fun2(x,3))，结果在主函数中输出。"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;When you compare a number with something else, the other thing is first converted to a number, and then these two numbers are compared. So a comparison like &lt;code&gt;\"90\" == 90&lt;/code&gt; does what you expect -- it's equivalent to &lt;code&gt;90 == 90&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The problem you're having is that &lt;code&gt;$node-&amp;gt;nid&lt;/code&gt; is not a string, it's an object of class &lt;code&gt;Drupal\\Core\\Field\\FieldItemList&lt;/code&gt;. The class doesn't provide a method to convert this type to a number, so it's not able to perform the comparison.&lt;/p&gt;\n\n&lt;p&gt;However, it appears that this type has a method to convert to string. But PHP won't do a double conversion when performing the comparison. So you need to perform the object-&amp;gt;string conversion explicitly, and then PHP will convert the string to an integer.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if (isset($node-&amp;gt;nid) &amp;amp;&amp;amp; (string)$node-&amp;gt;nid == 90)\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["如何在PHP中正确比较字符串和整数？", ["\n\n", "I purchased a Drupal theme and the the support is...lacking. So I thought I'd try and tackle it myself. I'm relatively new to PHP programming, so please take it easy on me :)", "\n\n", "The error I got was:\nNotice: Object of class Drupal\\Core\\Field\\FieldItemList could not be converted to int in theme_css_alter()", "\n\n", "Digging into the error, it came from the first line of code in this if statement:", "\n\n", "if(isset($node->nid) && $node->nid == 90){\n    //do stuff\n }\n", "\n\n", "I did my research and found that its a PHP error when using the == operator, likely since $node->nid is being fetched as a string, and 90 is an integer, and it can't convert the nid on the fly.", "\n\n", "Possible solutions I found while Googling were either making a 'getter' to fetch the nid as an integer (which sounds more complicated than necessary), using the === operator; and I'm guessing on my own that if I convert 90 to a string it would also work?", "\n\n", "Now, doing a test run, === does stop the error from showing, but my research shows that === only works when both the value and type are equal, and given I'm comparing a string and an integer, I assume that it would always just be false then.", "\n\n", "So...", "\n\n", "\n", "Am I correct in saying that in PHP 90 (as a string) does not == 90 (as an integer)?", "\n", "Am I correct in saying that using === instead of == is NOT the correct way to compare a string and integer? ", "\n", "Would $node->nid == (string)90{ be the correct way to compare for this if statement? What is the most correct way to do this comparison?", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "就是加上字符‘0’的其实位置，其他数字字符相对于他多了多少", "Konwledge_Point": "整型", "Question": ["C语言整数转字符串输出", ["#include ", "\n#include ", "\nvoid to_str(n)", "\nint n;", "\n{ char s[10];", "\n  int i = 0;", "\n  if(n\n  { putchar('-');", "\n    n = -n;", "\n  }", "\n  do", "\n  { s[i++] = n%10 +'0';", "\n     n/=10;", "\n  }", "\n  while(n>0);", "\n      while(i--)putchar(s[i]);", "\n}", "\nmain()", "\n{ int x,y;", "\n  scanf(\"%d\",&x);", "\n  to_str(x);", "\n}", "\n这里面的{ s[i++] = n%10 +'0';这行不懂，为什么要加'0'，不加就不行呢，请赐教。"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You get this error because you have already declare \"err\", when you using \":=\" operator you are trying to redeclare(create the variable with the same name) this variable. You should use \"=\" to change value. And code blow work fine, but you`d better add validation: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var loop_count int\nfmt.Print(\"Insert loop_count ID: \")\n\n_, err := fmt.Scanf(\"%d\", &amp;amp;loop_count)\n\nif err != nil {\n    fmt.Println(err)\n}\n\nvar url_id int\nfmt.Print(\"\nInsert url_id ID: \") //From where it starts\n\n_, err = fmt.Scanf(\"%d\", &amp;amp;url_id)\n\nif err != nil {\n    fmt.Println(err)\n}\n\nfmt.Println(\"\nStarting download from: \", url_id)\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["从命令行询问两个整数-GOlang [关闭]", ["\n\n", "I am perfectly fine with asking one integer input from user, but with two, it fails with \"no new variables on left side of :=(undefined)\"", "\n\n", "and i dont see any ideas how to fix it..", "\n\n", "i tried to create two variable-s (int type). with one it works perfectly fine, but with adding other one, it wails..", "\n\n", "var loop_count int\n         fmt.Println(\"Insert start ID : \")\n\n         _, err1 := fmt.Scanf(\"%d\", &loop_count)\n\n         if err1 != nil {\n            fmt.Println(err)\n         }\n\n    arr := make([]uint8, loop_count) //How many times it loops\n\n    var url_id int\n         fmt.Println(\"Insert start ID : \") //From where it starts\n\n         _, err := fmt.Scanf(\"%d\", &url_id)\n\n         if err != nil {\n            fmt.Println(err)\n         }\n\n         fmt.Println(\"Starting download from : \", url_id)\n", "\n\n", "So i want to ask two things from console: ", "\n\n", "\n", "Loop count (how many times should it loop)", "\n", "From what ID it should start downloading.", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;For your question:-&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Can I decode this using the json decoder with [][]interface{}&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes you can there is nothing wrong with decoding the JSON output. This is an array of JSON.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[[\"9BC67ACD\", \"example1\", \"example1.co.uk\", \"2018-08-06 08:46:44\", \"2018-08-06 08:46:44\", \"2018-08-06 08:46:44\", \"FINISHED\", 1], [\"B339CBA2\", \"example2\", \"example2.co.uk\", \"2018-08-06 08:38:25\", \"2018-08-06 08:38:24\", \"2018-08-06 08:38:27\", \"FINISHED\", 1]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or you can Unmarshal the JSON into an interface{}. But in both cases you need type assertion to fetch the underlying value of an interface.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    \"fmt\"\n    \"encoding/json\"\n)\n\nvar jsonBytes string = `[[\"9BC67ACD\", \"example1\", \"example1.co.uk\", \"2018-08-06 08:46:44\", \"2018-08-06 08:46:44\", \"2018-08-06 08:46:44\", \"FINISHED\", 1], [\"B339CBA2\", \"example2\", \"example2.co.uk\", \"2018-08-06 08:38:25\", \"2018-08-06 08:38:24\", \"2018-08-06 08:38:27\", \"FINISHED\", 1]]`\n\nfunc main() {\n    var result interface{}\n    if err := json.Unmarshal([]byte(jsonBytes), &amp;amp;result); err != nil{\n        fmt.Println(err)\n    }\n    fetchValue(result) // This function recursively get the underlying value of an interface.\n}\n\nfunc fetchValue(value interface{}) {\n    switch value.(type) {\n    case string:\n        fmt.Printf(\"%v is an string \n \", value.(string))\n    case bool:\n        fmt.Printf(\"%v is bool \n \", value.(bool))\n    case float64:\n        fmt.Printf(\"%v is float64 \n \", value.(float64))\n    case []interface{}:\n        fmt.Printf(\"%v is a slice of interface \n \", value)\n        for _, v := range value.([]interface{}) {\n            fetchValue(v)\n        }\n    case map[string]interface{}:\n        fmt.Printf(\"%v is a map \n \", value)\n        for _, v := range value.(map[string]interface{}) {\n            fetchValue(v)\n        }\n    default:\n        fmt.Printf(\"%v is unknown \n \", value)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://play.golang.org/p/I6q4CPi2Gvo\" rel=\"nofollow noreferrer\"&gt;Playground example&lt;/a&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["解码字符串和整数的切片", ["\n\n", "How do you decode a slice of strings and integers which don't have field names?", "\n\n", "This is the output from the remote API I am trying to decode:", "\n\n", "[[\"9BC67ACD\", \"example1\", \"example1.co.uk\", \"2018-08-06 08:46:44\", \"2018-08-06 08:46:44\", \"2018-08-06 08:46:44\", \"FINISHED\", 1], [\"B339CBA2\", \"example2\", \"example2.co.uk\", \"2018-08-06 08:38:25\", \"2018-08-06 08:38:24\", \"2018-08-06 08:38:27\", \"FINISHED\", 1]]\n", "\n\n", "I get this as a slice of bytes after doing ", "\n\n", "rBody, err := ioutil.ReadAll(r.Body)\n", "\n\n", "Can I decode this using the json decoder with ", "[][]interface{}", "?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;&lt;br /&gt;使用&lt;code class=\"language-javascript\"&gt;reuqests&lt;/code&gt;模拟浏览器请求的时候&amp;#xff0c;需要注意的地方&lt;br /&gt;1、请注意添加headers&lt;br /&gt;2、请注意data数据是否有缺失&lt;br /&gt;3、如果上边都做到了&amp;#xff0c;请查看获取的返回结果和报错信息是什么&lt;/p&gt;\n&lt;p&gt;根据它们的状态码和返回信息进行下一步判断&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;如有问题及时沟通&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["requests post请求时传参报错", ["requests post请求传参是无法使用，如下图，请各位帮忙看看，谢谢！"]], "Tag": "程序设计"}
{"Answer": "https://blog.csdn.net/qq_41933331/article/details/79889083", "Konwledge_Point": "整型", "Question": ["已知整型数组int a[]={12,5,9,19,22,-4,66,-17,28,13}。", ["已知整型数组int a[]={12,5,9,19,22,-4,66,-17,28,13}，求出数组中最大值，最小值,将最小元素与数组首元素交换,最大元素与数据尾元素交换。", "\n\n", "显示结果如下图", "\n\n", "\n\n", "我的代码一直报错", "\n望大神指点", "\n\n", "int main()", "\n\n", "{", "\n\n", "int a[] = { 12, 5 ,9 ,19 ,22 ,-4 ,66 ,-17 ,28 ,13 }; \nint a_conut = sizeof(a) / sizeof(int); \nint a_min=NULL, a_max= NULL;\nint min_i = NULL, max_i = NULL; \nint tmp_data[2]; \nfor (int i = 0; i<a_conut ; i++)\n{\n    if ( a[i] < a_min )\n    {\n        a_min = a[i]; 、\n        min_i = i; \n    }\n    else if ( a[i] > a_max ) \n    {\n        a_max = a[i]; \n        max_i = i; \n    printf(\"%d  \", a[i]); \n}\nprintf(\"\\r\\n\"); \ntmp_data[0] = a[0]; \ntmp_data[1] = a[a_conut-1]; \n\na[0] = a_min; \na[min_i] = tmp_data[0]; \na[a_conut-1] = a_max; \na[max_i] = tmp_data[1]; \n\nfor (int i = 0; i < a_conut; i++)\n{\n    printf(\"%d  \", a[i]); \n}\n\ngetchar();\nreturn 0;\n", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Use &lt;a href=\"http://php.net/manual/en/class.datetime.php\"&gt;&lt;code&gt;DateTime()&lt;/code&gt;&lt;/a&gt; with &lt;a href=\"http://php.net/manual/en/class.datetimezone.php\"&gt;&lt;code&gt;DateTimeZone()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// Create the DateTime() object and set the timezone to 'America/New_York'\n$date = new DateTime('2015-06-05 14:05:01', new DateTimeZone('America/New_York'));\n\n// Change the timezone to 'America/Los_Angeles'\n$date-&amp;gt;setTimezone(new DateTimeZone('America/Los_Angeles'));\n\n// Print out the date and time in the new timezone\necho $date-&amp;gt;format('M d h:i A');\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://eval.in/376270\"&gt;Demo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Easy to read which makes it easy to mantain.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["使用php转换时区？", ["\n\n", "How do I convert the timestamp ", "2015-06-05 14:05:01", " to another timezone using php? ", "\n\n", "I've read and tried numerous ways listed on here but I cannot get the desired result. Using ", "date_format($date,\"M d h:i A\")", " and ", "date_default_timezone_set('America/New_York')", " I get ", "June 05 2:05 PM", " which is the original origin of the server timezone and correct. ", "\n\n", "What I need is to convert ", "2015-06-05 14:05:01", " using for example ", "date_default_timezone_set('America/Los_Angeles')", " and ", "date_format($date,\"M d h:i A\")", " to get the result ", "June 05 11:05 AM", ". ", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;img src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/1625115621651IMG_20210701_130001.jpg\" alt=\"img\" /&gt;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["C++编程实现输入两个整数并求和。", ["运行结果为\na:\nb:", "\n", "sum="]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;3/2按照整型计算&amp;#xff0c;结果取整&amp;#xff0c;结果就是1&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["有谁知道为什输出结果是1", []], "Tag": "程序设计"}
{"Answer": "你们信么，我误打误撞把问题解决了！\r\n\r\nsqlite3_column_value 可以直接获取二进制数据，我直接从地址里获取数据了，获取到了如图所示的数据：（部分字节做了一下 &amp; 255 操作）\r\n\r\n![图片说明](https://img-ask.csdn.net/upload/201908/16/1565937433_970703.png)\r\n\r\n根据右边那一列标记来确定数据的位置，整数就在24-31字节，“浮点数”就在16-23字节，此问题完美解决，也谢谢各位回答的朋友了。\r\n\r\n代码奉上：\r\n\r\n```\r\nchar *key = NULL;\r\nint i = 0;\r\n\r\nkey = sqlite3_column_value(stat, k);\r\n\t\t\t\t\r\n\t\t\t\tif ((key[38] &amp; 255) == 2) {\r\n\t\t\t\t\tfor (i = 23; i &gt;= 16; --i) {\r\n\t\t\t\t\t\toutput = key[i] &amp; 255;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tif (output &gt; 15) {\r\n\t\t\t\t\t\t\tprintf(\"%x\", output);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprintf(\"0%x\", output);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfor (i = 31; i &gt;= 24; --i) {\r\n\t\t\t\t\t\toutput = key[i] &amp; 255;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tif (output &gt; 15) {\r\n\t\t\t\t\t\t\tprintf(\"%x \", output);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprintf(\"0%x \", output);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n```\r\n具体稳定性还有待观察，但是这是我目前能想到的唯一思路了。而且，对于 sqlite3_column_value 返回的数据结构我还尚不熟悉，熟悉后可能会有更高效的写法。\r\n\r\n========== 2019-11-15 更新 ==========\r\n\r\nsqlite3_column_value 获取到的数据会受到sqlite.c版本影响，之前的代码是基于3.7.9写的，后来我将sqlite更新到3.29.0后，数据的位置变成了0-7字节，不区分整数型与浮点数型了。但是如果字段值本身是null，该处内存会保留上一条记录的数据，这会引起一些bug。好在8号字节有个标记，4和8为正常，1为异常的null（上一条数据的值），做下兼容判断就好。\r\n\r\n```\r\nkey = (char *) sqlite3_column_value(stmt, 1);\r\n\r\nif ((key[8] &amp; 255) == 1) {\r\n\t// null，直接跳过\r\n\tcontinue;\r\n}\r\n\r\nfor (i = 7; i &gt;= 0; --i) {\r\n\tvalueNum = key[i] &amp; 255;\r\n\r\n\tif (valueNum &gt; 15) {\r\n\t\t_snprintf(value, 32, \"%x\", valueNum);\r\n\t}\r\n\telse {\r\n\t\t_snprintf(value, 32, \"0%x\", valueNum);\r\n\t}\r\n\r\n\tstrcat(record, value);\r\n}\r\n```", "Konwledge_Point": "整型", "Question": ["C语言开发中，sqlite 中的溢出整数如何能准确读取出来？", ["在sqlite中，有一个字段存储的是64位无符号整数。", "\n\n", "小于 2^63-1 的数据都没问题，但是我们有大量超过此值的数据，比如 9223379502689557271，存到数据库里就变成了 -3.68861248304756E-311。", "\n\n", "9223379502689557271 是 0x800006ca466e1b17，-3.68861248304756E-311 是一个精度不足（有效数字不足）的 0x800006ca466e1b17，我用数据库软件打开了这个数据库后，发现该浮点数的 hex 值依然是正确的，如图：（软件的十六进制展示是从右往左的）", "\n\n", "\n\n", "我尝试着用 sqlite3_column_blob sqlite3_column_int sqlite3_column_text 等方法去读取这个值，但是得到的数据都是 -3.68861248304756E-311，而且，这个值因为精度不足，无法还原成 9223379502689557271，我想请问大神们，既然数据库存储的原始数据是准确的，那么我该如何书写代码，才能将 9223379502689557271 或者 0x800006ca466e1b17 准确的读取出来呢？"]], "Tag": "程序设计"}
{"Answer": "可以直接传json的\r\n RequestBody body = RequestBody.create(JSON, json);\r\n      Request request = new Request.Builder()\r\n      .url(url)\r\n      .post(body)\r\n      .build();", "Konwledge_Point": "整型", "Question": ["okhttp请求设置提交参数类型", ["FormBody form = new FormBody.Builder() // 添加参数的键值对", "\n                .add(\"yl_jobId\", json.getString(\"yl_jobId\"))", "\n                .add(\"public_key\", json.getString(\"public_key\"))", "\n                .add(\"timestamp\", json.getString(\"timestamp\")).build();", "\n\n", "因为add的key和value都是String类型的, FormBody有没有方法可以传int或者集合类型的方法。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你的char b[0]&amp;#xff0c;定义一个长度为0的数组&amp;#xff1f;还有这个scanf_s(&amp;#34;%[^\\n]&amp;#34;, a);是干什么的。还有你说的j没有用指的是第二次scanf之后&amp;#xff0c;j不等于0了&amp;#xff1f;&lt;/p&gt;", "Konwledge_Point": "整型", "Question": ["为什么第二次scanf之后，之前定义的整形j就没有用了，printf出来的都是第二次输入的字符ASCLL码", ["为什么第二次scanf之后，之前定义的整形j就没有用了，printf出来的都是第二次输入的字符ASCLL码，把printf输出预计往前提发现从第二次scanf之后，printf就不对了，代码中的printf很多是测试出错具体位置的时候加上的", "\n", "#include <stdio.h>", "#include <string.h>", "int main()", "{", "    char a[1000];", "    char b[0];", "    int i;", "    int j=0;", "    scanf(\"%[^\\n]\",a);", "//    printf(\"%d\\n\",j);      //测试用", "    fflush(stdin);", "//    printf(\"%d\\n\",j);      //测试用", "    scanf(\"%c\",b);", "//    printf(\"%d\\n\",j);      //测试用", "    for(i=0;i<strlen(a);i++)", "    {", "        if(a[i]>='A'&&a[i]<='Z')", "            a[i]+=32;", "        if(b[0]>='A'&&b[0]<='Z')", "            b[0]+=32;", "        printf(\"%c\\n\",b[0]);", "        if(a[i]==b[0])", "        {", "            j++;", "            b[0]=b[0]-1;", "//            printf(\"%c,%c\\n\",a[i],b[0]);    //测试用", "//            printf(\"%d\\n\",j);      //测试用", "        }", "    }", "    printf(\"%d\",j);", "    return 0;", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;If you cannot describe your data with a properly typed struct then consider using a map with values of type &lt;code&gt;interface{}&lt;/code&gt; (essentially any type):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;output_map := map[string]map[string]interface{}{}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;output_map := map[string]map[string]interface{}{\n  \"age\": {\n    \"$gt\": 18,\n  },\n  \"location\": {\n    \"eq\": \"London\",\n  },\n}\nbytes, err := json.MarshalIndent(&amp;amp;output_map, \"\", \"  \")\nif err != nil {\n  panic(err)\n}\n// {\n//   \"age\": {\n//     \"$gt\": 18\n//   },\n//   \"location\": {\n//     \"eq\": \"London\"\n//   }\n// }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course, using the &lt;code&gt;interface{}&lt;/code&gt; type is not a best-practice; however, it's sometimes the only way to accomplish certain things.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["包含字符串和整数的Golang映射", ["\n\n", "I am trying to create a JSON string from a map using JSON.Marshal() in golang. However, the int values are being displayed as strings surrounded by double quotes.", "\n\n", "My code is outputting:", "\n\n", "{ \"age\":\n    {\n        \"$gt\":\"22\",\n        \"$lt\":\"20\"\n    },\n  \"location\":\n    {\n        \"$eq\":\"london\"\n    },\n  \"name\":{\n        \"$eq\":\"fred\"\n    }\n}\n", "\n\n", "instead of ", "\n\n", "{ \"age\":\n    {\n        \"$gt\":22,\n        \"$lt\":20\n    },\n  \"location\":\n    {\n        \"$eq\":\"london\"\n    },\n  \"name\":{\n        \"$eq\":\"fred\"\n    }\n}\n", "\n\n", "I am using:", "\n\n", "var output_map = map[string]map[string]string{}\n\n//Populate map here\n\noutput_json, err := json.Marshal(output_map)\n\nif err!= nil {\n    fmt.Println(\"Error encoding JSON\")\n}\n\nfmt.Println(output_json)\n", "\n\n", "My understanding is that JSON.Marshal() will print the integers correctly if they are supplied but my map won't contain integers. I could change my map to map[string]map[string]int{} but then it wouldn't contain the string values for 'name' and 'location'.", "\n\n", "The ultimate problem is that I need the map to contain both int and string values. Some sort of map[string]map[string]{}.", "\n\n", "How can I achieve this? Thank you in advance.", "\n\n", "Harry", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; m, n, i, j, z, max, min, nmax;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入两个大于2且小于10的整数\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;scanf_s&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &amp;amp;m, &amp;amp;n);\n    z &amp;#61; m * n;\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入%d个整数&amp;#xff0c;注意最大值和最小值应该在同一行\\n&amp;#34;&lt;/span&gt;, z);\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;scanf_s&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a[i][j]);\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;该数组为&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d\\t&amp;#34;&lt;/span&gt;, a[i][j]);\n        }\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\n    }\n    max &amp;#61; a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;][&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; m; i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; n; j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (max &amp;lt;&amp;#61; a[i][j])\n            {\n                max &amp;#61; a[i][j];\n                nmax &amp;#61; i &amp;#43; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            }\n        }\n    }\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;最大值和最小值都在第%d行&amp;#34;&lt;/span&gt;, nmax);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "整型", "Question": ["首先输入一个大于2且小于10的整数m 和n,然后定义一个二维整形数组（m*n）,初始化该数组，将该数组中最大元素所在的行和最小元素所在行对调。", ["2、首先输入一个大于2且小于10的整数m 和n,然后定义一个二维整形数组（m", "n）,初始化该数组，将该数组中最大元素所在的行和最小元素所在行对调。", "要求：", "（1）m", "n数组元素的值由scanf函数从键盘输入（假定最大值和最小值不在同一行），然后输出该数组；", "（2）查找最大值最小值所在行，将两行元素对调后输出新的数组；", "（3）为直观起见，数组按照m行n列的方式输出；", "（4）假设最大值最小最出现在同一行上，请修改程序。", "Void main()(部分参考代码)", "{int martix[9][9],min,max,temp;", "int i,j,m,n,nMax=0,nMin=0;", "printf(“please input m and n of martix:\\n”);", "scanf(......);", "......}"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;For int simple remove the single quotes &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;\n     var number = &amp;lt;?php echo $number ?&amp;gt;;\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note : Make sure that $number should not empty . if it's empty use ternary operator if statement to handle that .  &lt;code&gt;var number =&amp;lt;?php echo !empty($number)? $number:0 ?&amp;gt;;&lt;/code&gt;&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["如何在javascript中使用php整数变量作为整数变量", ["\n\n", "I have passed my php integer variable ", "$number", " into javascript. \nBut can't access that php variable without using quotation ", "\n\n", "<script>\n var number = '<?php echo $number?>';\n</script>\n", "\n\n", "if I use quotation it can accessible but don't get the integer value actually. It became string since use quotation.\nWithout quotation can't get anything.", "\n\n", "I have googling that but don't get the appropriate answer yet.", "\n\n", "How to get the integer value.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;If you want to pass elements of a slice to a function with variadic parameter, you have to use &lt;code&gt;...&lt;/code&gt; to tell the compiler you want to pass all elements individually and not pass the slice value as a single argument, so simply do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;tx.Exec(sqlStr, vals...)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is detailed in the spec: &lt;a href=\"https://golang.org/ref/spec#Passing_arguments_to_..._parameters\" rel=\"noreferrer\"&gt;Passing arguments to ... parameters&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://golang.org/pkg/database/sql/#Tx.Exec\" rel=\"noreferrer\"&gt;&lt;code&gt;Tx.Exec()&lt;/code&gt;&lt;/a&gt; has the signature of:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func (tx *Tx) Exec(query string, args ...interface{}) (Result, error)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So you have to pass &lt;code&gt;vals...&lt;/code&gt;. Also don't forget to check returned error, e.g.:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;res, err := tx.Exec(sqlStr, vals...)\nif err != nil {\n    // handle error\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["Golang Join数组接口", ["\n\n", "I try to create bulk insert. I use gorm ", "github.com/jinzhu/gorm", " ", "\n\n", "import (\n    \"fmt\"\n    dB \"github.com/edwinlab/api/repositories\"\n)\n\nfunc Update() error {\n    tx := dB.GetWriteDB().Begin()\n    sqlStr := \"INSERT INTO city(code, name) VALUES (?, ?),(?, ?)\"\n    vals := []interface{}{}\n\n    vals = append(vals, \"XX1\", \"Jakarta\")\n    vals = append(vals, \"XX2\", \"Bandung\")\n\n    tx.Exec(sqlStr, vals)\n\n    tx.Commit()\n\n    return nil\n}\n", "\n\n", "But I got an error:", "\n\n", "\n  ", "Error 1136: Column count doesn't match value count at row 1 becuse i return wrong query", "\n\n", "INSERT INTO city(code, name) VALUES ('XX1','Jakarta','XX2','Bandung', %!v(MISSING)),(%!v(MISSING), %!v(MISSING))\n", "\n", "\n\n", "If I use manual query it works:", "\n\n", "tx.Exec(sqlStr, \"XX1\", \"Jakarta\", \"XX2\", \"Bandung\")\n", "\n\n", "It will generate:", "\n\n", "INSERT INTO city(code, name) VALUES ('XX1', 'Jakarta'),('XX2', 'Bandung')\n", "\n\n", "The problem is how to make array interface to generate string like ", "\"XX1\", \"Jakarta\", ...", "\n\n", "Thanks for help.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;result name=\"success\" type=\"json\"&gt;\r\n   &lt;param name=\"root\"&gt;属性名称&lt;/param&gt;\r\n&lt;/result&gt;", "Konwledge_Point": "整型", "Question": ["Struts2+json，如何配置让客户端收到的json数据前面不包含数据在action中的属性名称？", ["Struts2+json，如何配置让客户端收到的json数据前面不包含数据在action中的属性名称？就是具体的数据内容，没有属性名称"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You cannot use a slice of int as a &lt;code&gt;driver.Value&lt;/code&gt;. The arguments to &lt;code&gt;Scan&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; be of one of the &lt;a href=\"https://golang.org/pkg/database/sql/driver/#Value\" rel=\"noreferrer\"&gt;supported types&lt;/a&gt;, or implement the &lt;a href=\"https://golang.org/pkg/database/sql/#Scanner\" rel=\"noreferrer\"&gt;sql.Scanner&lt;/a&gt; interface.&lt;/p&gt;\n\n&lt;p&gt;The reason you're seeing &lt;code&gt;[]uint8&lt;/code&gt; in the error message is that the raw value returned from the database is a &lt;code&gt;[]byte&lt;/code&gt; slice, for which &lt;code&gt;[]uint8&lt;/code&gt; is a synonym.&lt;/p&gt;\n\n&lt;p&gt;To interpret that &lt;code&gt;[]byte&lt;/code&gt; slice appropriately as a custom PostgreSQL array type, you should use the appropriate array types defined in the &lt;a href=\"https://godoc.org/github.com/lib/pq\" rel=\"noreferrer\"&gt;pq&lt;/a&gt; package, such as the &lt;a href=\"https://godoc.org/github.com/lib/pq#Int64Array\" rel=\"noreferrer\"&gt;Int64Array&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Try something like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var ret pq.Int64Array\nerr = db.QueryRow(\"SELECT bar FROM foo WHERE id=$1\", 1).Scan(&amp;amp;ret)\nif err != nil {\n    fmt.Println(err)\n}\n\nfmt.Println(ret)\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["从PostgreSQL查询整数数组总是返回[] uint8", ["\n\n", "Take a simple PostreSQL db with an integer array:  ", "\n\n", "CREATE TABLE foo (\n    id                       serial PRIMARY KEY,\n    bar               integer[]\n);\n\nINSERT INTO foo VALUES(DEFAULT, '{1234567, 20, 30, 40}');\n", "\n\n", "Using pq, these values are for some reason being retrieved as an array of []uint8.", "\nThe ", "documentation", " says that integer types are returned as int64. Does this not apply to arrays as well?", "\n\n", "db, err := sql.Open(\"postgres\", \"user=a_user password=your_pwd dbname=blah\")\nif err != nil {\n    fmt.Println(err)\n}\n\nvar ret []int\nerr = db.QueryRow(\"SELECT bar FROM foo WHERE id=$1\", 1).Scan(&ret)\nif err != nil {\n    fmt.Println(err)\n}\n\nfmt.Println(ret)\n", "\n\n", "Output:", "\n\n", "sql: Scan error on column index 0: unsupported Scan, storing driver.Value type []uint8 into type *[]int64\n[]\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The only solution I found was to use the tag  to define a method I added to the SVNPDF class above. Then TCPDF will call this method with the tracking in parameter.&lt;/p&gt;\n\n&lt;p&gt;Here's a snapshot:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;tcpdf method=\"my_custom_func\" params=\"'.TCPDF_STATIC::serializeTCPDFtagParameters(array('tracking number here')).'\" /&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and in SVNPDF class:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public function my_custom_func( $tracking_num ){\n            $cur_page = $this-&amp;gt;PageNo();\n            // I can now store the $tracking_num in some private array and retrieve it in the Footer() as per current page number\n        }\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["如何从TCPDF中的Footer（）方法中检索当前页面HTML代码？", ["\n\n", "I'm using TCPDF to render some report generated through a sequence of HTML tables. These tables contain some tracking code I want to parse from Footer() method and add to current page footer. Any idea how to get the html code of the current page from TCPDF ?", "\n\n", "I'm basically doing this:", "\n\n", "class SVNPDF extends TCPDF {\n\n        // Page footer\n        public function Footer() {\n\n            // Position at 15 mm from bottom\n            $this->SetY(-15);\n            // Set font\n            $this->SetFont('helvetica', 'I', 10);\n            // Page number\n            $this->Cell(0, 10, 'Page '.$this->getAliasNumPage().'/'.$this->getAliasNbPages(), 0, false, 'R', 0, '', 0, false, 'T', 'M');\n\n            $this->SetY(-15);\n            $this->SetFont('helvetica', 'I', 10);\n            $this->Cell(0, 10, 'Picking #'.$glb_picking_num.'', 0, false, 'L', 0, '', 0, false, 'T', 'M');\n\n            // HERE I NEED TO RETRIEVE CURRENT PAGE HTML CONTENT AND EXTRACT THE TRACKING NUMBER INSIDE FOR DISPLAY IN CURRENT FOOTER\n        }\n}\n\n$report = 'SOME LONG HTML CODE HERE';\n$pdf = new SVNPDF('L', 'mm', 'A4', true, 'UTF-8', false);\n$pdf->AddPage();\n$pdf->writeHTML($report, true, false, true, false, '');\n$pdf->Output(dirname(__FILE__) . '/test.pdf', 'I');\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I came up with this solutions:&lt;/p&gt;\n\n&lt;pre class=\"lang-golang prettyprint-override\"&gt;&lt;code&gt;package main\n\nimport (\n    \"fmt\"\n    \"time\"\n\n    \"github.com/nbari/base58\"\n)\n\nfunc encode(i uint64) {\n    x := base58.Encode(i)\n    fmt.Printf(\"%d = %s\n\", i, x)\n    time.Sleep(time.Second)\n}\n\nfunc main() {\n    concurrency := 4\n    sem := make(chan struct{}, concurrency)\n    for i, val := uint64(0), uint64(1&amp;lt;&amp;lt;16); i &amp;lt;= val; i++ {\n        sem &amp;lt;- struct{}{}\n        go func(i uint64) {\n            defer func() { &amp;lt;-sem }()\n            encode(i)\n        }(i)\n    }\n    for i := 0; i &amp;lt; cap(sem); i++ {\n        sem &amp;lt;- struct{}{}\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Basically, start 4 workers and calls the encode function, to notice/understand more this behavior a sleep is added so that the data can be printed in chunks of 4.&lt;/p&gt;\n\n&lt;p&gt;Also, these answers helped me to better understand concurrency understanding: &lt;a href=\"https://stackoverflow.com/a/18405460/1135424\"&gt;https://stackoverflow.com/a/18405460/1135424&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If there is a better way please let me know.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["如何同时迭代int范围", ["\n\n", "For purely educational purposes I created a ", "base58", " package. It will encode/decode a ", "uint64", " using the ", "bitcoin base58 symbol chart", ", for example:", "\n\n", "b58 := Encode(100)  // return 2j\n\nnum := Decode(\"2j\") // return 100\n", "\n\n", "While creating the first tests I came with ", "this", ":", "\n\n", "func TestEncode(t *testing.T) {\n    var i uint64\n    for i = 0; i <= (1<<64 - 1); i++ {\n        b58 := Encode(i)\n        num := Decode(b58)\n        if num != i {\n            t.Fatalf(\"Expecting %d for %s\", i, b58)\n        }\n    }\n}\n", "\n\n", "This \"naive\" implementation, tries to convert all the range from uint64 (From 0 to 18,446,744,073,709,551,615) to base58 and later back to uint64 but takes too much time.", "\n\n", "To better understand how ", "go", " handles concurrency I would like to know how to use channels or ", "goroutines", " and perform the iteration across the full uint64 range in the most efficient way?", "\n\n", "Could data be processed by chunks and in parallel, if yes how to accomplish this?", "\n\n", "Thanks in advance.", "\n\n", "UPDATE", ": ", "\n\n", "Like mention in the answer by ", "@Adrien", ", one-way is to use ", "t.Parallel()", " but that applies only when testing the package, In any case, by implementing it I found that is noticeably slower, it runs in parallel but there is no speed gain.", "\n\n", "I understand that doing the full ", "uint64", " may take years but what I want to find/now is how could a channel or goroutine, may help to speed up the process (testing with small range ", "1<<16", ") probably by using something like this ", "https://play.golang.org/p/9U22NfrXeq", " just as an example.", "\n\n", "The question is not about how to test the package is about what algorithm, technic could be used to iterate faster by using concurrency.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;For example,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    \"flag\"\n    \"fmt\"\n    \"os\"\n    \"strconv\"\n)\n\nfunc main() {\n    flag.Parse()\n    s := flag.Arg(0)\n    // string to int\n    i, err := strconv.Atoi(s)\n    if err != nil {\n        // handle error\n        fmt.Println(err)\n        os.Exit(2)\n    }\n    fmt.Println(s, i)\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "整型", "Question": ["在 Go 中将字符串转换为整数类型？", ["\n\n", "I'm trying to convert a string returned from ", "flag.Arg(n)", " to an ", "int", ". What is the idiomatic way to do this in Go?", "\n    ", "\n\n", "转载于:https://stackoverflow.com/questions/4278430/convert-string-to-integer-type-in-go"]], "Tag": "程序设计"}
