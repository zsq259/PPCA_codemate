{"Answer": "&lt;p&gt;P_arr类型不对啊&amp;#xff0c;你这个参数中&amp;#xff0c;P_arr是个二维数组&amp;#xff0c;但其数组原始是double *类型&amp;#xff0c;不是double类型啊。是不是你写错了呢&lt;br /&gt;如果P_arr是double型的二维数组&amp;#xff0c;那么参数应该是double P_arr[][4]才对&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["C++变量类型报错：表达式必须具有整数或未区分范围的枚举类型", ["这里P_arr[a][j[和P都是double类型，可以相减的吧", "P这里为什么会报错：表达式必须具有整数或未区分范围的枚举类型", "\n", "谢谢解惑！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;没有表明打开文件的方式吧&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["c++报错:表达式必须具有整数或未区分范围的枚举类型", ["在VS2022上，就是写一个写文件的操作时出现的，在这之前也写了另一个文件的“写文件操作”没啥问题，一到这儿就报错了", "\n"]], "Tag": "程序设计"}
{"Answer": "存储类型用字符串 然后多个关键词之间通过”，“分割", "Konwledge_Point": "枚举类型", "Question": ["请教关于mysql数据库字段枚举类型的问题", ["数据库里有一个problem（问题）表，表中需要一个字段是存储这道题都覆盖了哪些point(知识点,字符串类型)。我想到要用枚举类型或者set类型，但是它们都要求在创建表的时候，要初始化其中的值。而我希望知识点是由用户添加问题的时候自定义加入的。", "\n这问题就好比是发了一篇blog，然后发布之前要输入相关的标签（关键词）一样。", "\n请问大牛们这个该怎么实现。", "\nP.S：本人小白一枚"]], "Tag": "程序设计"}
{"Answer": "自己搞懂了\r\nMy_Code::Date b(2,(My_Code::Month)9,1992);\r\n\tb.Show();", "Konwledge_Point": "枚举类型", "Question": ["枚举类型作为函数参数的问题", ["Date类中声明一个枚举变量", "\npublic：enum Month{jan=1,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec};", "\nDate(int,Month,int);", "\n主函数中声明一个Date类变量的时候", "\nMy_Code::Date b(2,jan,1992);", "\n会报错,说jan是声明的标识符？参数2如何写是正确的？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;已经向navicat官方团队反馈此问题&amp;#xff0c;官方技术人员告知此为bug&amp;#xff0c;他们正在努力修复。&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["为什么Navicat无法增加enum类型字段（mysql添加枚举类型字段）？", ["为什么Navicat无法增加enum类型字段（mysql添加枚举类型字段）？", "\n", "Navicat16 想在表中增加一个枚举型字段，参照教程 ", "https://blog.csdn.net/qq_42991839/article/details/123652386", "\n", "我在操作的时候，为什么没有让填写枚举值的地方？"]], "Tag": "程序设计"}
{"Answer": "package srcio;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class TestM {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n     TestM  tm=new TestM();\r\n     \r\n     Color [] cl={Color.红色,Color.绿色,Color.黄色};\r\n     \r\n     Scanner s=new Scanner(System.in);\r\n     \r\n     System.out.println(\"请输入交通灯颜色:\"); \r\n     \r\n     String clo=s.nextLine().trim();\r\n     \r\n     String cll=tm.checkColor(cl, clo);\r\n     \r\n     if(null!=tm.checkColor(cl, clo)){\r\n    \t if(cll.equals(clo)){\r\n    \t\t System.out.println(\"ppppp\");\r\n    \t }\r\n    \t \r\n     }else{\r\n    \t System.out.println(\"没有此颜色 请重新输入!\");\r\n     }\r\n\r\n\t}\r\n\r\n\tpublic String checkColor(Color[] cl,String s){\r\n\t\tfor(int i=0;i&lt;cl.length;i++){\r\n\t\t\tif((cl[i].toString()).equals(s)){\r\n\t\t\t\t//  枚举类型转化为String类型\r\n\t\t\t\treturn cl[i].toString();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t\t\r\n\t}\r\n}", "Konwledge_Point": "枚举类型", "Question": ["枚举类型", ["package cn.com.liheng.test;", "\n\n", "import java.util.Scanner;", "\n\n", "public class Test {", "\npublic static void main(String[] args) {", "\n    week b=new week();", "\n    for (int i = 1; i > 0; i++) {", "\n        Scanner sc=new  Scanner(System.in);", "\n        System.out.println(\"请输入交通灯颜色！\");", "\n        String sv=sc.nextLine().trim();", "\n\n", "}\n", "\n\n", "}", "\n}为什么week b=new week();", "\nweek();这个方法总是报错类型不匹配了？", "\n下面的是枚举类：", "\npackage cn.com.liheng.test;", "\n\n", "public enum week {", "\n     红色,绿色,黄色,", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你说的是定一个函数&amp;#xff0c;函数的返回值是枚举类型吧&amp;#xff01;&lt;br /&gt;正常来说&amp;#xff0c;如果这个函数没有具体实现&amp;#xff0c;函数的最后也没有return返回的话&amp;#xff0c;在现在的编译器&amp;#xff0c;编译运行是会报错的&amp;#xff0c;编译器不允许一个函数有定义返回类型而不进行返回&amp;#xff1b;&lt;br /&gt;如果是很老的一些编译工具&amp;#xff0c;应该是可以编译通过的&amp;#xff0c;但是具体返回什么我也不太清楚&amp;#xff0c;反正不会是枚举中的随机一个值&amp;#xff0c;我猜是返回乱值(-87421, 65871...等这类&amp;#xff09;&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["枚举类型应用到函数返回值类型", ["定义一个枚举类型的函数，如果这个函数没有具体的实现语句，那么返回值是什么？是枚举中的随机一个值吗？"]], "Tag": "程序设计"}
{"Answer": "C++中的枚举直接作为常量使用\r\nenum MyEnum\r\n{\r\n    F = 0,\r\n    T = 1\r\n};\r\n\r\n判断直接使用\r\nif(X==F)\r\n\r\n而MyEnum::F这种使用为当这个枚举被命名空间作用才可以\r\n例如\r\nnamespace MyEnum\r\n{\r\n\t   enum TESTEnum\r\n    {\r\n    F = 0,\r\n    T = 1\r\n    };\r\n}", "Konwledge_Point": "枚举类型", "Question": ["linux g++编译器处理枚举类型的问题", ["简易代码如下", "\n\n", " #include <iostream>\nenum MyEnum\n{\n    F = 0,\n    T = 1\n};\n\nbool juge(MyEnum x)\n{\n    if (x == MyEnum::F)\n    {\n        return false;\n    }\n    else\n    {\n        return true;\n    }\n}\n\nint main(int argc, char** argv)\n{\n    MyEnum x = MyEnum::T;\n    if (juge(x))\n    {\n        std::cout << \"true\" << std::endl;\n    }\n    else\n    {\n        std::cout << \"false\" << std::endl;\n    }\n    return 0;\n}\n", "\n\n", "\n\n", "既不是类也不是命名空间。", "\nwindows下的VS2013编译没有问题，为啥linux的G++不能接受。"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You update must be:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;'UPDATE tbl_users SET userStatus = ?, tokenCode = ? WHERE userID = ?\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See the comma instead of &lt;code&gt;AND&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;And make sure that &lt;code&gt;$userID&lt;/code&gt; exists in your DB&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["更新枚举类型", ["\n\n", "This is my Code:", "\n\n", "public function enUser($userID) {\n    try {\n        $userStatus = \"Y\";\n        $tokenCode = \"\";\n        $sql = ('UPDATE tbl_users SET userStatus = ? AND tokenCode = ? WHERE userID = ?');\n\n        $stmt = $this->conn->prepare($sql);\n        $stmt->bindParam(1, $userStatus);\n        $stmt->bindParam(2, $tokenCode);\n        $stmt->bindParam(3, $userID);\n        $stmt->execute();\n\n    } catch (PDOException $e) {\n        echo $e->getMessage();\n    }\n}\n", "\n\n", "This is my enum in database", "\n\n", "I have try more to edit it. But in database always appear nothing. I mean in the field 'userStatus' after running the update script, its just value like \"\" (empty). Can any one help me? Thanks.", "\n    "]], "Tag": "程序设计"}
{"Answer": "http://ideone.com/6ghz84\r\nSunny\r\n\r\n\r\n\r\n```\r\n /* package whatever; // don't place package name! */\r\n \r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n \r\n/* Name of the class has to be \"Main\" only if the class is public. */\r\nclass Ideone\r\n{\r\n\tpublic enum Weather{ Sunny,Rainy,Cloudy}\r\n \r\n\tpublic static void main (String[] args) throws java.lang.Exception\r\n\t{\r\n\t\t// your code goes here\r\n\t\tString s = Weather.Sunny.toString();\r\n\t\tSystem.out.println(s);\r\n\t}\r\n}\r\n```", "Konwledge_Point": "枚举类型", "Question": ["java 枚举类型怎么输出", ["public enum Weather{ Sunny,Rainy,Cloudy}", "\npublic String toString(){", "\n        return ; //这里怎么写才能输出是 Sunny或Rainy或Cloudy呢？", "\n    }"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;枚举要获取属性值&amp;#xff0c;在枚举里面设置好对应的属性get方法然后获取。其实控制台打印是正确的&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/421048690356175.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;下面哪个Season&amp;#xff0c;打印的都是他对象的内存地址。可以加上toString方法&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/846392790356137.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["Idea 使用打印输出枚举类型方法语句和静态方法语句输出都不正常 foreach语句也是", ["使用的是java语言 idk1.8 大家帮忙看看 刚入门搞不懂这啥问题", "\n", "\n", "\n", "\n", "\n\n"]], "Tag": "程序设计"}
{"Answer": "请确定您所使用的JDK版本是否是5.0或以上\r\n另外，枚举值起始值为0,如果只有两个值的话，应该是0和1才对，没有1和2的说法\r\n然后sex字段类型是什么？如果以数字存储于数据库中，一般用int，或boolean类型", "Konwledge_Point": "枚举类型", "Question": ["枚举类型映射", ["我有一个枚举类型[code=\"java\"]public enum Sex{MALE,FEMALE}[/code]", "\n然后在实体类中用到这个枚举类，[code=\"java\"]", "\n@Enumerated(value = EnumType.ORDINAL)", "\npublic Sex getSex(){ return sex; }", "\n[/code]", "\n在数据表中存的sex字段值为1(1:男 2：女), 我在查询时抛出异常", "\njava.lang.IllegalArgumentException: Unknown name value for enum class com.test.Sex: 1", "\n请问下我应该怎样配置才能将数据库中的1 转换为枚举的MALE啊?"]], "Tag": "程序设计"}
{"Answer": "https://www.cnblogs.com/liushui-sky/p/8563223.html", "Konwledge_Point": "枚举类型", "Question": ["qt如何将int等基础类型转换成qenum类型", ["我定义了一组枚举值", "\n\n", "enum DrawingTabClickMode\n{\n    SingleClick = 0x0001,\n    DoubleClick = 0x0002\n};\nQ_DECLARE_FLAGS(DrawingTabClickModes,DrawingTabClickMode)\n", "\n\n", "在函数A中使用参数DrawingTabClickModes类型：", "\n\n", "funcA(DrawingTabClickModes mode){}\n", "\n\n", "但是这个参数需要由其他函数给出，并且为int型，如何将int型转换为已被Q_DECLARE_FLAGS声明过的qenum类型呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;枚举是要将属于一类的东西放在枚举里&amp;#xff0c;比如春夏秋冬&amp;#xff0c;都是季节&amp;#xff0c;那就放在季节枚举类里。又或者年月日时分秒&amp;#xff0c;都是时间格式&amp;#xff0c;可以放在时间格式枚举类里。&lt;/p&gt;\n&lt;p&gt;如果不属于一类&amp;#xff0c;那就不要强行建一个枚举&amp;#xff0c;否则枚举就失去了它的意义。建一个常量类就可以了&amp;#xff0c;规范这东西&amp;#xff0c;不能不要&amp;#xff0c;但又不能老是盯着它&amp;#xff08;尤其是强迫症&amp;#xff09;&amp;#xff0c;应该要将更多的注意力集中在业务开发、技术架构、产品设计层次。&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["常量字符串和枚举类，哪个更好？", ["java，spring。mysql。", "背景业务：有一个功能读取的是数据库中的json字符串的配置，代码中要转成json然后逐级读取配置。根据我们常规的开发原则，代码中不要出现局部魔法字符。", "按照我常规的处理方式，一般是定义一个静态终止字符串。", "但是我突然想到，这个东西是全局在用。而面对这种情况，常用的选项必然是枚举类或者公共的静态字符串。", "但是我现在有点犹豫，用哪个更好呢？", "我可以定义一个类，然后里面存放这些静态字符，在这些静态字符的属性上打上注释。", "也可以定义美剧，枚举中有两个属性，一个是value存放我的字符，text里面存放我的说明文本。", "所以这两个手段哪一个会更好一点呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;h1&gt;Basic concept&lt;/h1&gt;\n\n&lt;p&gt;The &lt;a href=\"https://golang.org/pkg/reflect/\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt; package does not provide access to exported identifiers, as there is no guarantee they will be linked to the executable binary (and thus available at runtime); more on this: &lt;a href=\"https://stackoverflow.com/questions/38875016/splitting-client-server-code/38875901#38875901\"&gt;Splitting client/server code&lt;/a&gt;; and &lt;a href=\"https://stackoverflow.com/questions/42825926/how-to-remove-unused-code-at-compile-time/42827979#42827979\"&gt;How to remove unused code at compile time?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This is a source-code level checking. What I would do is write a test that checks if the number of error code constants matches the map length. The solution below will only check the map length. An improved version (see below) may also check if the keys in the map match the values of the constant declarations too.&lt;/p&gt;\n\n&lt;p&gt;You may use the &lt;a href=\"https://golang.org/pkg/go/parser/\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;go/parser&lt;/code&gt;&lt;/a&gt; to parse the Go file containing the error code constants, which gives you an &lt;a href=\"https://golang.org/pkg/go/ast/#File\" rel=\"nofollow noreferrer\"&gt;&lt;code&gt;ast.File&lt;/code&gt;&lt;/a&gt; describing the file, containing the constant declarations. You just need to walk through it, and count the error code constant declarations.&lt;/p&gt;\n\n&lt;p&gt;Let's say your original file is named &lt;code&gt;\"errcodes.go\"&lt;/code&gt;, write a test file named &lt;code&gt;\"errcodes_test.go\"&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This is how the test function could look like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func TestMap(t *testing.T) {\n    fset := token.NewFileSet()\n    f, err := parser.ParseFile(fset, \"errcodes.go\", nil, 0)\n    if err != nil {\n        t.Errorf(\"Failed to parse file: %v\", err)\n        return\n    }\n\n    errCodeCount := 0\n    // Range through declarations:\n    for _, dd := range f.Decls {\n        if gd, ok := dd.(*ast.GenDecl); ok {\n            // Find constant declrations:\n            if gd.Tok == token.CONST {\n                for _, sp := range gd.Specs {\n                    if valSp, ok := sp.(*ast.ValueSpec); ok {\n                        for _, name := range valSp.Names {\n                            // Count those that start with \"APIErrorCode\"\n                            if strings.HasPrefix(name.Name, \"APIErrorCode\") {\n                                errCodeCount++\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if exp, got := errCodeCount, len(APIErrorCodeMessages); exp != got {\n        t.Errorf(\"Expected %d err codes, got: %d\", exp, got)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Running &lt;code&gt;go test&lt;/code&gt; will result in:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;--- FAIL: TestMap (0.00s)\n    errcodes_test.go:39: Expected 2 err codes, got: 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The test properly reveals that there are 2 constant error code declarations, but the &lt;code&gt;APIErrorCodeMessages&lt;/code&gt; map contains only 1 entry.&lt;/p&gt;\n\n&lt;p&gt;If we now \"complete\" the map:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var APIErrorCodeMessages = map[APIErrorCode]string{\n    APIErrorCodeInternalError:  \"Internal Error\",\n    APIErrorCodeAuthentication: \"asdf\",\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And run &lt;code&gt;go test&lt;/code&gt; again:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;PASS\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note: it's a matter of style, but the big loop may be written this way to decrease nesting level:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// Range through declarations:\nfor _, dd := range f.Decls {\n    gd, ok := dd.(*ast.GenDecl)\n    if !ok {\n        continue\n    }\n    // Find constant declrations:\n    if gd.Tok != token.CONST {\n        continue\n    }\n    for _, sp := range gd.Specs {\n        valSp, ok := sp.(*ast.ValueSpec)\n        if !ok {\n            continue\n        }\n        for _, name := range valSp.Names {\n            // Count those that start with \"APIErrorCode\"\n            if strings.HasPrefix(name.Name, \"APIErrorCode\") {\n                errCodeCount++\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Full, improved detection&lt;/h1&gt;\n\n&lt;p&gt;This time we will check the exact type of the constants, not their names. We will also gather all the constant values, and in the end we will check each if that exact constant value is in the map. If something is missing, we will print the exact values of the missing codes.&lt;/p&gt;\n\n&lt;p&gt;So here it is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func TestMap(t *testing.T) {\n    fset := token.NewFileSet()\n    f, err := parser.ParseFile(fset, \"errcodes.go\", nil, 0)\n    if err != nil {\n        t.Errorf(\"Failed to parse file: %v\", err)\n        return\n    }\n\n    var keys []APIErrorCode\n    // Range through declarations:\n    for _, dd := range f.Decls {\n        gd, ok := dd.(*ast.GenDecl)\n        if !ok {\n            continue\n        }\n        // Find constant declrations:\n        if gd.Tok != token.CONST {\n            continue\n        }\n        for _, sp := range gd.Specs {\n            // Filter by APIErrorCode type:\n            valSp, ok := sp.(*ast.ValueSpec)\n            if !ok {\n                continue\n            }\n            if id, ok2 := valSp.Type.(*ast.Ident); !ok2 ||\n                id.Name != \"APIErrorCode\" {\n                continue\n            }\n            // And gather the constant values in keys:\n            for _, value := range valSp.Values {\n                bslit, ok := value.(*ast.BasicLit)\n                if !ok {\n                    continue\n                }\n                keyValue, err := strconv.Atoi(bslit.Value)\n                if err != nil {\n                    t.Errorf(\"Could not parse value from %v: %v\",\n                        bslit.Value, err)\n                }\n                keys = append(keys, APIErrorCode(keyValue))\n            }\n        }\n    }\n\n    for _, key := range keys {\n        if _, found := APIErrorCodeMessages[key]; !found {\n            t.Errorf(\"Could not found key in map: %v\", key)\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Running &lt;code&gt;go test&lt;/code&gt; with an \"incomplete\" &lt;code&gt;APIErrorCodeMessages&lt;/code&gt; map, we get the following output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;--- FAIL: TestMap (0.00s)\n    errcodes_test.go:58: Could not found key in map: 1000\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["如何枚举某种类型的常量", ["\n\n", "I'd like to ensure with a test, that for each ", "APIErrorCode", " constant defined as below, the map ", "APIErrorCodeMessages", " contains an entry. How can I enumerate all constants of a certain type in Go?", "\n\n", "// APIErrorCode represents the API error code\ntype APIErrorCode int\n\nconst (\n    // APIErrorCodeAuthentication represents an authentication error and corresponds with HTTP 401\n    APIErrorCodeAuthentication APIErrorCode = 1000\n    // APIErrorCodeInternalError represents an unknown internal error and corresponds with HTTP 500\n    APIErrorCodeInternalError APIErrorCode = 1001\n)\n\n// APIErrorCodeMessages holds all error messages for APIErrorCodes\nvar APIErrorCodeMessages = map[APIErrorCode]string{\n    APIErrorCodeInternalError: \"Internal Error\",\n}\n", "\n\n", "I've looked into ", "reflect", " and ", "go/importer", " and tried ", "tools/cmd/stringer", " without success.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You could try to:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Create a new text column named \"roleTemp\"&lt;/li&gt;\n&lt;li&gt;Run a query to set this column for each record - based on the \"role\" column&lt;/li&gt;\n&lt;li&gt;Remove the \"role\" column&lt;/li&gt;\n&lt;li&gt;Rename \"roleTemp\" to \"role\"&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Now simply change your database schema as is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$table-&amp;gt;increments('id');\n$table-&amp;gt;string('fullName');\n$table-&amp;gt;string('email')-&amp;gt;unique();\n$table-&amp;gt;string('password', 50);\n$table-&amp;gt;string('role');\n$table-&amp;gt;rememberToken();\n$table-&amp;gt;timestamps();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Basically you duplicate the role values to a (temporarily) column and rename it. At least it is safe and won't take a lot of time.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["在Laravel迁移中更改列类型的最佳方法是什么？", ["\n\n", "I have a User table in my DB:", "\n\n", "        $table->increments('id');\n        $table->string('fullName');\n        $table->string('email')->unique();\n        $table->string('password', 50);\n        $table->enum('role',['boss','employee','customer'])->default('customer');\n        $table->rememberToken();\n        $table->timestamps();\n", "\n\n", "I need to change 'role' column type  to 'text' and after that, run the new migration in Laravel. If I want to have no effect on previous data, what is the best way to do this.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;那你要看find函数的返回值是什么了&amp;#xff0c;如果找不到&amp;#xff0c;应该返回为-1&amp;#xff0c;if(-1)是成立的&amp;#xff0c;所以会输出yes&lt;br /&gt;应该是if (it-&amp;gt;second.find(SendMode::bin) &amp;gt;&amp;#61; 0)&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["c++如何实现判断一个值是否属于enum中的值", ["c++如何实现判断一个值是否属于enum中的值", "\n", "#", "include", "<iostream>", "\n", "#", "include", "<map>", "\n", "#", "include", " ", "<type_traits>", "\n", "using", " ", "namespace", " std;\n\n", "enum", " ", "SendMode", " {\n    text,\n    bin\n};\n", "int", " ", "main", "(", "int", " argc, ", "char", "* argv[])", "\n", "{\n    std::map<string, string>a;\n    a[", "\"key\"", "] = ", "\"text\"", ";\n    map<string, string>::iterator it;\n    ", "for", " ( it = a.", "begin", "(); it !=a.", "end", "(); it++)\n    {\n        cout << it->first << endl;\n        cout << it->second << endl;\n        ", "if", " (it->second.", "find", "(SendMode::bin))", "//我的目的是为了判断map value是不是SendMode中的一个值，但是不知为什么还会输出yes", "\n        {\n            cout << ", "\"yes\"", " << endl;\n        }\n    }\n}\n\n\n"]], "Tag": "程序设计"}
{"Answer": "你应该用动态设置查询条件的参数\r\nString hql = \"select p from Product p where p.nType=? order by p.id desc\"; \r\n\r\nquery.setParameter(0,NType.MOBILE);", "Konwledge_Point": "枚举类型", "Question": ["关于java枚举类型字段的查询", ["[code=\"java\"]", "\npublic class Product(){", "\n\n", "public enum NType {", "\n     NOTEBOOK/*笔记本*/,MOBILE/*手机*/,CAMERA/*相机 摄像机*/,MP34/*MP3,MP4*/,OTHERDIGITAL/*其它数码*/", "\n }", "\n\n", "private Long id;", "\n\n", "private String name;", "\n\n", "private NType nType;", "\n\n", "//略去SET GET方法", "\n\n", "}", "\n\n", "[/code]", "\n\n", "ORM框架用的是HIBERNATER ", "\n现在想要查询某一类产品 如手机类 我的HQL写法如下：", "\nselect p from Product p where p.nType='MOBILE' order by p.id desc;", "\n\n", "当然这样得不到我想要的结果  每次他默认查笔记本类去了 不管我nType值是CAMERA还是MP34＝＝", "\n\n", "如果我不写where p.nType='MOBILE'  这个过滤条件 那么就不会默认查笔记本类型的PRODUCT了 所以我想是我的枚举类型的查询写错了 不是这样写 ", "\n\n", "因为用原生的SQL可以实现", "\n\n", "请那位过路的神仙帮忙下 谢了", "\n\n", "[b]问题补充：[/b]", "\n[code=\"java\"]", "\n  @Entity", "\n\n", "public class Product(){", "\n\n", "public enum NType {", "\n\n", "NOTEBOOK/*笔记本*/,MOBILE/*手机*/,CAMERA/*相机 摄像机*/,MP34/*MP3,MP4*/,OTHERDIGITAL/*其它数码*/", "\n\n", "}", "\n\n", "//略去注解", "\n\n", "private Long id;", "\n\n", "//略去注解", "\n\n", "private String name;  ", "\n\n", "[b]@Column(name=\"gtype\")[/b]", "\n\n", "private NType nType;", "\n\n", "//略去SET GET方法", "\n\n", "}", "\n\n", "[/code]"]], "Tag": "程序设计"}
{"Answer": "**1**. enum枚举类型中的值是“符号常量”，对应值为整型值。不会是字符串，所以你想要从终端输入“add等函数名”是不能和枚举中的add比较的。因为enum\r\n中的add是整型，默认第一位是0。 对于enum具体使用可以参考博客：https://blog.csdn.net/lixiaogang_theanswer/article/details/56681227\r\n\r\n\r\n\r\n# 楼主，你想要的功能实现如下：\r\n\r\n```\r\n#define FUNC_LIST_NUM   4\r\n#ifndef ALARM_ARRAY_SIZE\r\n#define ALARM_ARRAY_SIZE(array) (sizeof(array) / sizeof(array[0]))\r\n#endif\r\n#define FIND_INDEX_BY_KEY(a, k, i)   \t\t\t\t\t\t\t\t\t  \\\r\n              for(int j = 0; j &lt; ALARM_ARRAY_SIZE(a); ++j)\t\t  \\\r\n              { \t\t\t\t\t\t\t\t\t\t\t\t\t\t  \\\r\n                  if(strlen(k) != strlen(a[j])) continue;\t\t\t\t  \\\r\n                  if(!strncmp(a[j], k, strlen(k)))\t\t\t\t\t  \\\r\n                  { \t\t\t\t\t\t\t\t\t\t\t\t\t  \\\r\n                      i = j;\t\t\t\t\t\t\t\t\t\t\t  \\\r\n                      break;\t\t\t\t\t\t\t\t\t\t\t  \\\r\n                  } \t\t\t\t\t\t\t\t\t\t\t\t\t  \\\r\n              }\r\n\r\n\r\nconst char *szGlobalFuncList[] = {\"add\", \"gcd\", \"crt\", \"primroot\"};\r\ntypedef void (*MatchingFunc[FUNC_LIST_NUM])(int a, int b);\r\n\r\nvoid add(int a, int b){printf(\"a:%d\\tb:%d\\n\", a, b);}\r\nvoid gcd(int a, int b){printf(\"a:%d\\tb:%d\\n\", a, b);}\r\nvoid crt(int a, int b){printf(\"a:%d\\tb:%d\\n\", a, b);}\r\nvoid primroot(int a, int b){printf(\"a:%d\\tb:%d\\n\", a, b);}\r\n\r\nMatchingFunc SelectMFunc = {add, gcd, crt, primroot};\r\n\r\nint main()\r\n{\r\n\tchar buf[128] = {0};\r\n    int a = 0, b = 0;\r\n    int index = -1;\r\n    fgets(buf, sizeof(buf), stdin);\r\n    if(strlen(buf))\r\n    {\r\n        //add(a,b);\r\n        char *p = strstr(buf,\"(\");\r\n        if(p)\r\n        {\r\n            char funcName[56] = {0}; //函数名\r\n            strncpy(funcName, buf, strlen(buf)-strlen(p));  //funcName:函数名\r\n            p = strstr(p,\",\");\r\n            if(p)\r\n            {\r\n                //第一个值\r\n                char firstVar[56] = {0};\r\n                int len = strlen(funcName) + 1;\r\n                strncpy(firstVar, buf+ len , strlen(buf)-strlen(p)-len);\r\n\r\n                //第二个值\r\n                p = strstr(p, \")\");\r\n                if(p)\r\n                {\r\n                    char secondVar[56] = {0};\r\n                    int len2 = len + strlen(firstVar) + 1;\r\n                    strncpy(secondVar, buf+len2, strlen(buf)-len2-strlen(p));\r\n                    FIND_INDEX_BY_KEY(szGlobalFuncList, funcName, index);\r\n                    if(index &gt;= 0)\r\n                    {\r\n                        a = atoi(firstVar);\r\n                        b = atoi(secondVar);\r\n                        SelectMFunc[index](a,b);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\t\r\n\treturn 0;\r\n}\r\n```\r\n\r\n\r\n\r\n效果：\r\n![图片说明](https://img-ask.csdn.net/upload/201911/08/1573201094_77291.png)\r\n\r\n\r\n\r\n现在支持你直接从终端输入：函数名（参数1的值，参数2的值）；如：add(1,2).  后续若后新增函数，则直接在szGlobalFuncList数组后面添加就可以了。\r\n\r\n\r\n# 若有帮助，还望楼主采纳！！非常感谢！！！！\r\n\r\n\r\n\r\n\r\n/*================================================*/\r\n楼主，对于你的评论，是这样的。这个得看你使用的编译器，不同编译器版本其效果不同，比如在linux系统下的gcc编译是可以通过的。在windows下的qt也是可以通过的。\r\n\r\n我被CSDN禁言了，所以不能直接回复你的评论，只有在这里回复你刚才的评论了，望理解。", "Konwledge_Point": "枚举类型", "Question": ["C语言strncmp 与枚举类型比对的问题。", ["C语言如何使用strncmp函数  比对键盘输入的字符串  是否为 typedef enum 中枚举的某一函数，并进入这个函数执行？", "\n\n", "啊好困惑", "\n\n", "比如  枚举了以下自定义函数", "\n\n", "            typedef enum mathfuntion\n                                    ｛\n\n                                   add,\n\n                                    gcd,\n\n                                    crt，\n\n                                primroot//等等自定义函数名\n                                    ｝mymathfuntion；\n", "\n\n", "在命令提示符 键盘输入", "\n                                                                        add(1,2) 回车", "\n\n", "                                                                                3\n", "\n\n", "我的想法是使用strncmp 对比stdin数据流中的前3位是否是枚举类型中的某个函数 然后进入该函数执行"]], "Tag": "程序设计"}
{"Answer": "public enum ByType {\r\n    xpath,  linkText, name, className, cssSelector, partialLinkText, tagName\r\n\t\tprivate String id;\r\n\t\tpublic ByType(String id){\r\n\t\t\t\tthis.id=id;\r\n\t\t}\r\n}\r\n\r\n可以参考这篇文章。http://blog.csdn.net/vvhesj/article/details/45394587", "Konwledge_Point": "枚举类型", "Question": ["java枚举类型的构造方法处理", ["我知道构造函数怎么写，但是枚举类型，枚举其他的对象，这里应该怎么添加呢？能不能给我以id为例，进行枚举的构造方法添加啊？不胜感激啊", "\npackage com.java;", "\n\n", "public class Locator {", "\n    private String element;", "\n\n", "private int waitSec;\n\npublic enum ByType {\n    xpath, id, linkText, name, className, cssSelector, partialLinkText, tagName\n}\n\nprivate ByType byType;\n\npublic Locator() {\n\n}\n\n\npublic Locator(String element) {\n    this.element = element;\n    this.waitSec = 3;\n    this.byType = ByType.xpath;\n\n}\n\npublic Locator(String element, int waitSec) {\n    this.waitSec = waitSec;\n    this.element = element;\n    this.byType = ByType.xpath;\n\n}\n\n\n\npublic Locator(String element, int waitSec, ByType byType) {\n    this.waitSec = waitSec;\n    this.element = element;\n    this.byType = byType;\n}\n\npublic String getElement() {\n    return element;\n}\n\npublic int getWaitSec() {\n    return waitSec;\n}\n\npublic ByType getBy() {\n    return byType;\n}\n\npublic void setBy(ByType byType) {\n    this.byType = byType;\n}\n\npublic void setReplace(String rep, String rex)\n{\n    StringTools.replaceAll(element, rex, rep);\n}\n", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;当然可以&amp;#xff0c;枚举类实际就是继承自java.lang.Enum类&amp;#xff0c;当然能被序列化&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["想问一个问题，就是Java的枚举类型可以被序列化吗", ["今天是2022/5/20，现在是20:03，今天是星期五。明天是星期六", "很好，上面都是废话。", "没办法，CSDN正文长度小于30个字符不让发 ，我就是想简单问一下Java的枚举类型可不可以序列化，真麻烦", "bi~", "好，回到正题，我就是想问一下，Java的枚举类型可以被序列化吗？"]], "Tag": "程序设计"}
{"Answer": "不是很明白问题，直接返回满足条件的枚举常量比如Enum.PENDING，然后系统根据返回的枚举值处理就可以", "Konwledge_Point": "枚举类型", "Question": ["小白问题，枚举类型返回一个常量问题java", ["需要给一个系统返回枚举类型(不可变)。", "\n该枚举类型有三个枚举常量：PENDING(\"PENDING\", \"待确认\"),", "\n                                                                                        SUCCESS(\"SUCCESS\", \"确认成功\"),", "\n                                                                                        CANCELED(\"CANCELED\", \"取消\");", "\n但只能返回三个常量的其中一个状态，可是另外两个也有值怎么办呀？(直接返回的话对方系统会得到三个状态)", "\n常量创建时有一个构造函数给常量赋过key,value属性值了导致所有常量的key,value属性都有值：", "\n属性：", "\nprivate String key;", "\nprivate String value;", "\n构造函数：", "\n private OrderStatus(String key, String value) {", "\n  this.key = key;", "\n  this.value = value;", "\n}"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;you either do a &lt;code&gt;switch&lt;/code&gt; with no value, and put comparison expressions in each &lt;code&gt;case&lt;/code&gt;, or you treat each case as a &lt;code&gt;==&lt;/code&gt; for the checked value. e.g.:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if node, ok := area.Nodes[coord]; ok {\n    switch node.Type {\n        case  City:\n            // do something for City\n        case Town:\n            // do something for Town\n        case Outpost:\n            // do something for Outpost\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The other &lt;code&gt;switch&lt;/code&gt; syntax is used when you're switching between conditions that are not based on a single value. e.g.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;switch {\n    case node.Type == City:\n        // do something for City\n    case node.OtherParam == \"foo\":\n        ///\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which means basically you're switching between binary conditions. Personally, I use it just to remove clutter from long if/else blocks that don't rely on a single value, but I rarely use it.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["在golang中切换基于枚举/基于iota的类型", ["\n\n", "I defined an enumeration and struct type like so:", "\n\n", "type NodeType int\nconst (\n        City NodeType = iota\n        Town\n        Village\n)\n\ntype AreaNode struct {\n        Location Coord2D\n        Type NodeType\n}\n", "\n\n", "and now I'm iterating over a series of nodes that each have a type", "\n\n", "if node, ok := area.Nodes[coord]; ok {\n    switch node.Type {\n        case node.Type == City:\n            // do something for City\n        case node.Type == Town:\n            // do something for Town\n        case node.Type == Outpost:\n            // do something for Outpost\n    }\n}\n", "\n\n", "However I'm getting an error: incompatible types in binary expression.", "\n\n", "How can I resolve this?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;举例往测试表t中插入几条记录来说明具体用法。&lt;br /&gt;首先&amp;#xff0c;创建测试表t&amp;#xff0c;定义gender字段为枚举类型&amp;#xff0c;成员为“M”和“F”&amp;#xff1a;&amp;#96;&amp;#96;&amp;#96;shell&lt;/p&gt;\n&lt;p&gt;mysq1&amp;gt; create table t (gender enum(&amp;#39;M&amp;#39;&amp;#xff0c;&amp;#39;));&lt;br /&gt;Query OK&amp;#xff0c;0 rows affected (0.14 sec)&lt;code class=\"language-javascript\"&gt; 然后插入4 条不同的记录:&lt;/code&gt;&lt;br /&gt;shellmysq&lt;br /&gt;1&amp;gt; INSERT INTO t VALUES(&amp;#39;M&amp;#39;),(&amp;#39;1&amp;#39;),(&amp;#39;f&amp;#39;),(NULL);&lt;br /&gt;Query OK&amp;#xff0c;4 rows affected (0.00 sec)&lt;/p&gt;\n&lt;p&gt;Records:4 Duplicates: 0warnings:0&lt;/p&gt;\n&lt;p&gt;mysqI&amp;gt; select * from t;&lt;br /&gt;&amp;#43;--------&amp;#43;&lt;br /&gt;| gender |&lt;br /&gt;&amp;#43;--------&amp;#43;&lt;br /&gt;| M      |&lt;br /&gt;| M      |&lt;br /&gt;| F      |&lt;br /&gt;| NULL   |&lt;br /&gt;&amp;#43;--------&amp;#43;&lt;br /&gt;4 rows in set (0.01 sec)&amp;#96;&amp;#96;&amp;#96;从上面的例子中&amp;#xff0c;可以看出ENUM类型是忽略大小写的&amp;#xff0c;在存储“M”、“f”时将它们都转成了大写&amp;#xff0c;还可以看出对于插入不在ENUM指定范围内的值时&amp;#xff0c;并没有返回警告&amp;#xff0c;而是插入了enum(M,F)的第一个值“M”&amp;#xff0c;这点用户在使用时要特别注意。另外&amp;#xff0c;ENUM类型只允许从值集合中选取单个值&amp;#xff0c;而不能一次取多个值。&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["ENUM枚举类型的使用方法？", ["请问，在MYSQL中，ENUM枚举类型的具体使用方法是什么？有人可以介绍一下吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;枚举是 C 语言中的一种基本数据类型,它可以让数据更简洁,更易读。&lt;/p&gt;\n&lt;p&gt;结构体(Struct)是一种构造类型或复杂类型&amp;#xff0c;它可以包含多个类型不同的成员。&lt;/p&gt;\n&lt;p&gt;第一个&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["判断题：结构体与枚举类型", ["哪个错了？", "一个结构体内不是可以包含另一个不同类型的结构体作为其成员吗？", "在C语言中，枚举类型是不是一种基本数据类型？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;//定义季节枚举类型&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;enum&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Jijie&lt;/span&gt;\n{\n    e_jj_chun&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,\n    e_jj_xia,\n    e_jj_qiu,\n    e_jj_dong\n};\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;show&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;enum&lt;/span&gt; Jijie e)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt;(e)\n    {\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; e_jj_chun:\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;春季生长缓慢&amp;#xff0c;生长速度逐渐加快&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; e_jj_xia:\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;夏季进入生长高峰期&amp;#xff0c;果实逐渐成熟&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; e_jj_qiu:\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;秋季进入收获季节&amp;#xff0c;叶子逐渐枯黄、脱落&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; e_jj_dong:\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;植株枯败&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n};\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; n;\n    &lt;span class=\"hljs-keyword\"&gt;enum&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Jijie&lt;/span&gt; e;\n    \n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;1.春季\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;2.夏季\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;3.秋季\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;4.冬季\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请选择季节&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-built_in\"&gt;scanf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;n);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(n&amp;gt;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; n&amp;lt;&amp;#61;&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入错误&amp;#xff0c;请重新输入&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    }\n    \n    &lt;span class=\"hljs-built_in\"&gt;switch&lt;/span&gt;(n)\n    {\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;:e&amp;#61;e_jj_chun;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;:e&amp;#61;e_jj_xia;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;:e&amp;#61;e_jj_qiu;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;case&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;:e&amp;#61;e_jj_dong;&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n    }\n    &lt;span class=\"hljs-built_in\"&gt;show&lt;/span&gt;(e);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "枚举类型", "Question": ["用c语言实现一个季节枚举类型，并根据输入的季节，输出庄稼的生长状态。", ["一年有春夏秋冬四季，一年里庄稼按春种、夏长、秋收、冬藏的规律生长。", "定义并应用一个季节枚举类型，根据用户输入的季节，输出庄稼的生长状态。", "要求:用结构体和定义函数的方式来完成"]], "Tag": "程序设计"}
{"Answer": "你可以在自己的类Student加一个Map(key可就是subject的name, value就是subject的value), 然后在页面枚举Map里的key,value", "Konwledge_Point": "枚举类型", "Question": ["如何在jsf标签中使用java的枚举类型", ["在后台Java对象中有个枚举类型属性，例如学生的学科用枚举类型表示", "\nclass Student  {", "\nprivate Subject subject;", "\npublic enum Subject{", "\n        yuwen(\"语文\"),shuxue(\"数学\"),yingyu(\"英语\"),;", "\n\n", "    private String desc;\n\n    private Subject(String desc) {\n        this.desc = desc;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n}\n", "\n\n", "}", "\n如何在页面,用jsf标签的下拉列表框表示？里面的值就是枚举类型的这些值，语文、数学、英语。", "\n我是用seam+jsf开发的", "\n[b]问题补充：[/b]", "\n那我在jsf标签中怎么循环显示出来用呢？不会弄诶 :cry: "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;You can use the &lt;code&gt;for-in&lt;/code&gt; loop as shown by others. However, you also have to make sure that the key you get is an actual property of an object, and doesn't come from the prototype.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Here is the snippet:&lt;/strong&gt;\n&lt;/p&gt;&lt;div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\"&gt;\r\n&lt;div class=\"snippet-code\"&gt;\r\n&lt;pre class=\"snippet-code-js lang-js prettyprint-override\"&gt;&lt;code&gt;var p = {\r\n    \"p1\": \"value1\",\r\n    \"p2\": \"value2\",\r\n    \"p3\": \"value3\"\r\n};\r\n\r\nfor (var key in p) {\r\n    if (p.hasOwnProperty(key)) {\r\n        console.log(key + \" -&amp;gt; \" + p[key]);\r\n    }\r\n}&lt;/code&gt;&lt;/pre&gt;\r\n&lt;/div&gt;\r\n&lt;/div&gt;\r\n\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["我如何循环或枚举一个 JavaScript 对象？", ["\n\n", "I have a JavaScript object like the following:", "\n\n", "var p = {\n    \"p1\": \"value1\",\n    \"p2\": \"value2\",\n    \"p3\": \"value3\"\n};\n", "\n\n", "Now I want to loop through all ", "p", " elements (", "p1", ", ", "p2", ", ", "p3", "...) And get their keys and values. How can I do that?", "\n\n", "I can modify the JavaScript object if necessary. My ultimate goal is to loop through some key value pairs and if possible I want to avoid using ", "eval", ".", "\n    ", "\n\n", "转载于:https://stackoverflow.com/questions/684672/how-do-i-loop-through-or-enumerate-a-javascript-object"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;1.你switch里没有写break&amp;#xff0c;所以会贯穿标签&lt;br /&gt;2.你的枚举里没有给初值&lt;br /&gt;3.你的枚举都没有用上&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["c++枚举类型输出是星期几", ["初学c++枚举类型", "\n", "遇到的现象和发生背景，请写出第一个错误信息", "\n", "用代码块功能插入代码，请勿粘贴截图。 不用代码块回答率下降 50%", "\n", "/*3.    已知某月的第一天是星期三，编写程序实现输入当月中的一个日期号，输出是星期几。\n使用枚举类型来定义一个星期中的每一天。*/", "\n", "#", "include", "<iostream>", "\n", "using", " ", "namespace", " std;\n", "int", " ", "main", "()", " ", "{\n    ", "int", " n = ", "0", ";\n    ", "enum", " ", "day", "{Monday,Tuesday,Wedsday,Thursday,Friday,Saturday,Sunday};\n    day day1 = Monday, day2 = Tuesday, day3 = Wedsday, day4 = Thursday, day5 = Friday, day6 = Saturday, day7 = Sunday;\n    cout << ", "\"please enter the day\"", " << endl;\n    cin >> n;\n    ", "if", " (n < ", "1", " || n>", "31", ") {\n        cout << ", "\"enter again\"", " << endl;\n    }\n    ", "int", " m = n % ", "7", ";\n    ", "switch", " (m) {\n    ", "case", " ", "1", ":\n        cout << day3;\n    ", "case", " ", "2", ":\n        cout << day4;\n    ", "case", " ", "3", ":\n        cout << day5;\n    ", "case", " ", "4", ":\n        cout << day6;\n    ", "case", " ", "5", ":\n        cout << day7;\n    ", "case", " ", "6", ":\n        cout << day1;\n    ", "case", " ", "7", ":\n        cout << day2;\n    }\n    ", "return", " ", "0", ";\n}\n\n\n", "\n", "\n", "please enter the day", "3", "45601", "\n", "我的解答思路和尝试过的方法，不写自己思路的，回答率下降 60%", "\n", "不知道输出值是什么意思，有什么合适的解决方法", "\n", "我想要达到的结果，如果你需要快速回答，请尝试 “付费悬赏”"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;尽管并没有为枚举本身定义算术运算&amp;#xff0c;在算术表达式中同时使用枚举和常规整数&amp;#xff0c;这时的color &amp;#61;3&amp;#43;red; 就是很好的例子&amp;#xff0c;red可以转换为int整型数据&amp;#xff0c;整型数据&amp;#43;3&amp;#xff0c;3也是int整型数据&amp;#xff0c;因此结果也是int整型数据&amp;#xff0c;且是合法的。&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["C++枚举问题中关于转换int值", ["为什么color =3+red;是合法的，哪位佬解答一下？实在是不能理解。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;比如枚举值只有0,1,2&lt;br /&gt;但是你给它赋值成3并不会报错&lt;br /&gt;这是因为c语言是弱类型&amp;#xff0c;在c#和java里这样赋值是不允许的&lt;br /&gt;所以虽然它是个int&amp;#xff0c;但是不要真把它当int来用&amp;#xff0c;应该给它赋值一个枚举值&amp;#xff0c;否则容易出现bug&amp;#xff0c;可读性也会非常差&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["图意思是给枚举类型变量 赋值 没有任何意义和作用吗？(语言-c语言)", ["图中意思是 给枚举类型的变量赋值 没有任何意义和作用吗？", "没懂这个。。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;→_→    因为这个传参本来就是想知道你这数据是什么类型&amp;#xff0c;你传Class等于没传&amp;#xff0c;就像你养了一只宠物&amp;#xff0c;人家问你什么宠物&amp;#xff0c;你说就是宠物呀&amp;#xff0c;所以它是猫&amp;#xff1f;是狗&amp;#xff1f;是鱼&amp;#xff1f;别人怎么知道&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["Enum中ValueOf方法参数为什么只能是枚举类型.class的形式", ["        Class clasz = Constants.Constants_A.getDeclaringClass();", "\n        Constants con = Enum.valueOf(Constants.class, \"Constants_A\");", "\n        Constants con2 = (Constants)Enum.valueOf(clasz, \"Constants_B\");", "\n\n", "我用Constants.class可以编译通过。用Clazz接收一个Constants枚举类型的Class对象放进去，就编译不通过，必须要向下转型为Constants才能编译通过是为什么？？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;构造函数是么一个类都必须有的&amp;#xff0c;即使是enum类。如果没有显式的声明构造函数&amp;#xff0c;默认填充无参构造。&lt;br /&gt;这里解释一下&amp;#xff0c;为什么Enum类&amp;#xff0c;必须显式的生命构造函数才能对枚举值进行赋值&amp;#xff0c;因为Enum类是一个特殊的java类&amp;#xff0c;我们创建的字段的类型就是Enum类本身&amp;#xff0c;但是并没有显式的声明他&amp;#xff0c;所以如果想对字段赋值&amp;#xff0c;必须先创建该Enum类的构造函数。给你贴个图&amp;#xff0c;你就看懂了&amp;#xff0c;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/091556706436129.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;这里有两个字段&amp;#xff0c;一个是red&amp;#xff0c;一个是blue&amp;#xff0c;我们编译以后生成.class文件&amp;#xff0c;在看一下&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/711457706436163.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;可以看到&amp;#xff0c;声明的red和blue实际上都是EnumClass类型的。这也就解释了&amp;#xff0c;为什么要显式的声明构造函数。&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["家人能不能解释一下为什么枚举要有构造函数", []], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Remember that &lt;code&gt;NULL &amp;lt;&amp;gt; '1'&lt;/code&gt; is itself &lt;code&gt;NULL&lt;/code&gt; and therefore your condition won't match rows whose &lt;code&gt;UserStatus&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;.  Use this expression instead:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;UserStatus IS NULL OR UserStatus &amp;lt;&amp;gt; '1'\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["使用mysql中的enum字段选择行", ["\n\n", "I am facing an abnormal issue with the enum field(UserStatus) of my table(userinfo). The table structure is as follows:", "\n\n", "Field       Type        Default\n------------------------------------------\nId          int(11)       (NULL)\nFirstName   varchar(50)   (NULL)\nLastName    varchar(50)   (NULL)\n....        ...           ...\n....        ...           ...   \nUserStatus  enum('0','1') (NULL)\n", "\n\n", "Here I have rows with the UserStatus values as NULL, 0 and 1. But When I am trying to select rows on the basis of the UserStatus field like:", "\n\n", "SELECT \n    * \nFROM \n    userinfo \nWHERE \n    UserStatus<>'1'\n", "\n\n", "Its not working and resulting in an empty resultset.", "\n\n", "Thanks in advance.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;因为K、M才是枚举变量。&amp;#xff08;&amp;#34;Kb&amp;#34;, &amp;#34;KB&amp;#34;,1_000L&amp;#xff09;只是枚举内容。&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["springboot 中 定义的枚举类型值为KB/MB，api映射被转为K/M，为什么？", ["1. 枚举类型", "\n\n", "\n", "@Getter\n@AllArgsConstructor\npublic enum DataUnitTypeEnum {\n    K(\"Kb\", \"KB\",1_000L),\n    M(\"Mb\", \"MB\",1000_000L),\n    BIT(\"bit\", \"BIT\",1L),\n    ;\n    private final String name;\n    private final String value;\n    private final Long conversionRate;\n}", "\n\n", "2. 实体类", "\n\n", "\n", "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder(toBuilder = true)\n@Slf4j\npublic class DataTransferEvent  {\n\n    /**\n     * 数据单位类型\n     **/\n    private DataUnitTypeEnum dataUnitType;\n}", "\n\n", "3、swagger-ui 解析的model", "\n\n", "\n", "{\n  \"dataUnitType\": \"M\",\n}", "\n\n", "问题，为什么是M而不是MB ?", "\n\n", "前端给后端传值为M时能映射成功，传MB时映射失败，值为KB时也存在同样的问题"]], "Tag": "程序设计"}
{"Answer": "应该是用在判断一个数值e是否是有效的枚举值的时候，用`e&lt;=ADC__nlastState`而不是`e&lt;=ADC__nGetTwoPinSensors`；假如以后再添加一个 `ADC__nGetThreePinSensors`的时候，只要改`ADC__nlastState`的定义而不用改判断语句了。\r\n编程小技巧。", "Konwledge_Point": "枚举类型", "Question": ["在面试中遇到一个枚举类型相关问题", ["今天在面试中遇到的问题，不知道如何解决", "\nenum ADC__enlSRState{", "\n      ADC__nReset,", "\n      ADC__nActive,", "\n      ADC__nGetMux2,", "\n      ADC__nGetMux3,", "\n      ADC__nGetFuel,", "\n      ADC__nGetTwoPinSensors,", "\n      ADC__nlastState = ADC__nGetTwoPinSensors", "\n}", "\n\n", "在这里ADC__nlastState起到了什么作用？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;直接调呀,需要男的,那么就调用   Sex.男    需要女的就掉Sex,女&lt;br /&gt;原理就是enum类的属性是 final static的&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["性别那里枚举类型应该如何应用", ["package week2;", "import java.lang.annotation.IncompleteAnnotationException;", "import java.util.Scanner;", "enum Sex{男,女};", "class student{", "    String Name;", "\n", "String[] classname = {\"C语言\",\"高数\",\"线代\",\"思想道德与修养\"};\n", "float", "[] score;\n", "public", " ", "void", " init() {\n    Scanner sc = ", "new", " Scanner(", "System", ".", "in", ");\n    Sex sex;\n    score = ", "new", " ", "float", "[", "4", "];\n    ", "System", ".", "out", ".println(\"请输入姓名\");\n    ", "Name", " = sc.next();\n    ", "System", ".", "out", ".println(\"请输入性别\");\n    \n    ", "System", ".", "out", ".println(\"请输入各科成绩\");\n    ", "System", ".", "out", ".println(\"请输入C语言成绩：\");\n    score[", "0", "] = sc.nextFloat();\n    ", "System", ".", "out", ".println(\"请输入高数成绩：\");\n    score[", "1", "] = sc.nextFloat();\n    ", "System", ".", "out", ".println(\"请输入线代成绩：\");\n    score[", "2", "] = sc.nextFloat();\n    ", "System", ".", "out", ".println(\"请输入思想道德与修养成绩：\");\n    score[", "3", "] = sc.nextFloat();\n}\n", "\n", "}", "public class Selfstudent {", "    public static void main(String[] args){", "        student stu = new student();", "        stu.init();", "        System.out.println(\"我的名字叫\"+stu.Name+\",\"+stu.sex+\",\"+\"我上学期通过努力，取得了好成绩，各门功课成绩如下：\"", "                +stu.classname[0]+stu.score[0]+\",\"+stu.classname[1]+stu.score[1]+\",\"+stu.classname[2]+stu.score[2]", "                +stu.classname[3]+stu.score[3]);", "    }", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可以的。&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img width=\"600px\" align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/557008935636141.png\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["c语言枚举类型能否作为参数传入函数", []], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;That was a good suggestion, but it didn't work either.  But it got me going in the right direction.  I took your idea, created the 2 classes, and tried to explicitly set the type of the object with a SoapVar and XSD_ANYTYPE.  That almost worked - but it did not set the name space (ns1:) on the fields in the class.&lt;/p&gt;\n\n&lt;p&gt;SO how did I eventually fix this?  It took 2 things.&lt;/p&gt;\n\n&lt;p&gt;I discovered the wonderful &lt;strong&gt;XSD_ANYXML&lt;/strong&gt;.  This lets me roll my own XML for the request.  By itself it failed to add the xsi namespace to the soap envelope.  So I had to force one parameter to be an XSD_STRING to wake up the code that was building the request.  My working code is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$client = new SoapClient($WSDL, $soapSettings);\n$myXml = \"\n  &amp;lt;ns1:obj xsi:type='ns1:DerivedClass'&amp;gt;\n    &amp;lt;ns1:internal_id&amp;gt;$internalId&amp;lt;/ns1:internal_id&amp;gt;\n    &amp;lt;ns1:external_id&amp;gt;$externalId&amp;lt;/ns1:external_id&amp;gt;\n  &amp;lt;/ns1:obj&amp;gt;\n\";\n\n$params = array(\n    // this is needed to force the XSI namespace in the header (there must be a better way)\n    'foo' =&amp;gt; new SoapVar('bar', XSD_STRING, 'String, 'http://www.w3.org/2001/XMLSchema-instance'),\n    // this uses the XML I created\n    'obj' =&amp;gt; new SoapVar($myXml, XSD_ANYXML),\n);\n\n$response = $client-&amp;gt;webmethod($params);\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["PHP Soap Client：如何使用Derived类调用WebService作为参数？", ["\n\n", "I'm using PHP 5, and want to call a webservice that is defined sort of like this:", "\n\n", "webmethod ( AbstractBase obj );\n", "\n\n", "I'm using a ", "SoapClient", " (wsdl-based). The web method is expecting a ", "subclass", " of AbstractBase.  Yet, in PHP, calling the soap method gets me this error: ", "\n\n", "\n    Server was unable to read request. \n        ---> There is an error in XML document  \n        ---> The specified type is abstract: name='AbstractBase'\n", "\n\n", "I'm pretty sure the problem is I have to specify the type of the ", "obj", " parameter in the Soap call - but I can't seem to find the magic word to make it so.", "\n\n", "    $client = new SoapClient($WSDL, $soapSettings);\n    $obj = array(\n        'internal_id' => $internalId,\n        'external_id' => $externald,\n    );\n    $params = array(\n        'obj'      => $obj  // How do I say it is of type: DerivedClass?\n    );\n\n    $response = $client->webmethod($params);\n", "\n    "]], "Tag": "程序设计"}
{"Answer": "枚举类定义的语法就是先定义各个实例后以“；”结束标识枚举常量定义完成；然后才是定义其他成员变量的。", "Konwledge_Point": "枚举类型", "Question": ["关于枚举类型的问题，新手求教", ["public enum Enumtest3 implements d{", "\n    ConstantsA{", "\n        public int geti(){", "\n            return i;", "\n        }", "\n        public String getdescription(){", "\n            return(\"枚举成员A\");", "\n        }", "\n    },", "\n    ConstantsB{", "\n        public int geti(){", "\n            return i;", "\n        }", "\n        public String getdescription(){", "\n            return(\"枚举成员B\");", "\n        }", "\n    };", "\n    private static int i=5;", "\n    public static void main(String[] args) {", "\n        // TODO Auto-generated method stub", "\n        for(int i=0;i<Enumtest3.values().length;i++){", "\n            System.out.println(Enumtest3.values()[i]+\"调getdescription()\"+Enumtest3.values()[i].getdescription());", "\n            System.out.println(Enumtest3.values()[i]+\"调geti()\"+Enumtest3.values()[i].geti());", "\n        }", "\n    }", "\n\n", "}", "\ninterface d{", "\n    public int geti();", "\n    public String getdescription();", "\n}", "\n这个程序中private static int i=5;这一句如果放在ConstantsA和ConstantsB的声明之前就会出错，这是为什么啊。。新手求教！"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;&lt;em&gt;Servicetype&lt;/em&gt; must implement &lt;a href=\"https://golang.org/pkg/database/sql/#Scanner\" rel=\"nofollow\"&gt;Scanner&lt;/a&gt; and &lt;a href=\"https://golang.org/pkg/database/sql/driver/#Valuer\" rel=\"nofollow\"&gt;Valuer&lt;/a&gt; interfaces.&lt;/p&gt;\n\n&lt;p&gt;Take a look on how &lt;a href=\"https://golang.org/src/database/sql/sql.go#87\" rel=\"nofollow\"&gt;std package does it for &lt;em&gt;NullString&lt;/em&gt;&lt;/a&gt; &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// NullString represents a string that may be null.\n// NullString implements the Scanner interface so\n// it can be used as a scan destination:\n\n\ntype NullString struct {\n    String string\n    Valid  bool // Valid is true if String is not NULL\n}\n\n// Scan implements the Scanner interface.\nfunc (ns *NullString) Scan(value interface{}) error {\n    if value == nil {\n        ns.String, ns.Valid = \"\", false\n        return nil\n    }\n    ns.Valid = true\n    return convertAssign(&amp;amp;ns.String, value)\n}\n\n// Value implements the driver Valuer interface.\nfunc (ns NullString) Value() (driver.Value, error) {\n    if !ns.Valid {\n        return nil, nil\n    }\n    return ns.String, nil\n}\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["Json绑定用于Postgres数据库的Golang中的枚举类型值", ["\n\n", "I am implementing a rest api where I send a json request body.", "\n\n", "type Service struct {\n    id int64 `db:\"id\" json:\"id\"`\n    Name string `form:\"name\" db:\"name\" json:\"name\" binding:\"required\"`\n    Servicetype string `form:\"type\"  db:\"type\" json:\"type\" binding:\"required\"`\n}\n\nfunc myHandler(c *gin.Context) {\n    if c.BindJSON(&json) == nil {\n        fmt.Println(json.Servicetype)\n    } else {\n         fmt.Println(\"json binding error\")\n    }\n}\n", "\n\n", "Servicetype is of type enum in my database. How can I have binding for that in my Service struct? I am able to bind the ", "Name", " field as it is of type VARCHAR in database. But it fails to bind when I add ", "Servicetype", " in the struct. I am using postgres as my database.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;那是因为本质上for 循环可以改写成&lt;br /&gt;for(day&amp;#61;1;day&amp;lt;&amp;#61;10;day&amp;#43;&amp;#43;)&lt;br /&gt;{&lt;!-- --&gt;&lt;br /&gt;printf(&amp;#34;day&amp;#61;%d\\n&amp;#34;,day);&lt;br /&gt;}&lt;br /&gt;结果可想而知&amp;#xff1a;1&amp;#xff0c;2&amp;#xff0c;3&amp;#xff0c;4&amp;#xff0c;5&amp;#xff0c;6&amp;#xff0c;7&amp;#xff0c;8&amp;#xff0c;9&amp;#xff0c;10&lt;br /&gt;连元素个数都不符合&amp;#xff1b;&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["C语言中枚举类型中的枚举元素为什么只能在各元素值连续的情况下才可以正确的遍历出枚举元素？", ["#include<stdio.h>", "enum DAY{MON=1, TUE, WED, THU=7, FRI, SAT, SUN};", "\n", "int main()", "{", "        enum DAY day;", "        for(day=MON;day<=SUN;day++)", "        {", "                printf(\"day=%d\\n\",day);", "        }", "        return 0;", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Change the same and try this way... hope it will work.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$table-&amp;gt;enum('event_info', ['sync', 'start_event', 'end_end', 'start_meeting_session', 'last_track_time']);\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["如何在迁移Laravel 5中设置枚举类型的长度", ["\n\n", "I have a migration for MySQL:", "\n\n", " class MakeEventsTable extends Migration\n    {\n        /**\n         * Run the migrations.\n         *\n         * @return void\n         */\n        public function up()\n        {\n            Schema::create('events', function (Blueprint $table) {\n                $table->increments('id');\n                $table->enum('type', ['sync', 'start_event', 'end_end', 'start_meeting_session', 'last_track_time'])->;\n                $table->timestamp('created_at');\n            });\n        }\n}\n", "\n\n", "As a result, I have an error:", "\n\n", "\n  ", "SQLSTATE[01000]: Warning: 1265 Data truncated for column 'type' at row\n  1 (SQL: insert into ", "events", " (", "item_id", ", ", "item_type", ", ", "type", ",\n  ", "created_at", ") values (45, meeting, last_track_time, 2018-02-14\n  06:52:10))", "\n", "\n\n", "This is because field ", "type", " too small, and I am finding out a solution, how to increase the length of the field?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;SET和ENUM类型非常类似&amp;#xff0c;也是一个字符对象&amp;#xff0c;SET里面可以包含0&lt;del&gt;64个成员。根据成员的不同&amp;#xff0c;存储上也有所不同。&lt;br /&gt;1&lt;/del&gt;8成员的集合&amp;#xff0c;占1个字节。&lt;br /&gt;9&lt;del&gt;16成员的集合&amp;#xff0c;占2个字节。&lt;br /&gt;17&lt;/del&gt;24成员的集合&amp;#xff0c;占3个字节。&lt;br /&gt;25&lt;del&gt;32成员的集合&amp;#xff0c;占4个字节。&lt;br /&gt;33&lt;/del&gt;64成员的集合&amp;#xff0c;占8个字节。&lt;/p&gt;\n&lt;p&gt;SET和ENUM除了存储之外&amp;#xff0c;最主要的区别在于SET类型一次可以选取多个成员&amp;#xff0c;而ENUM则只能选一个。SET类型可以从允许值集合中选择任意1个或多个元素进行组合&amp;#xff0c;所以对于输入的值只要是在允许值的组合范围内&amp;#xff0c;都可以正确地注入到SET类型的列中。&amp;#x1f339;&amp;#x1f339;&amp;#x1f339;&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["SET和ENUM枚举类型一样吗？用法一致吗？", ["请问，在MYSQL中，SET和ENUM类型是一样的吗？具体操作的用法一致吗？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;enum 枚举类型本身不支持嵌套定义。也就是说&amp;#xff0c;不能在一个 enum 中嵌套定义另一个 enum。&lt;/p&gt;\n&lt;p&gt;但是你可以通过在一个结构体中定义 enum 枚举类型&amp;#xff0c;来实现类似嵌套的效果。例如&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;struct&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Token&lt;/span&gt; {\n    &lt;span class=\"hljs-keyword\"&gt;enum&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;TokenType&lt;/span&gt; {\n        NUMBER,\n        OPERATOR,\n        EQUALS,\n        OTHER\n    } type;\n    &lt;span class=\"hljs-keyword\"&gt;union&lt;/span&gt; {\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; number;\n        &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;operator&lt;/span&gt;;\n    } value;\n};\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "枚举类型", "Question": ["C语言enum枚举类型可以嵌套使用吗", ["C语言enum枚举类型可以嵌套使用吗？", "比如：", "enum OP {+, -, *, /};", "enum  symbol {NUM, OP, EQ,OTHER};"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;用的C&amp;#43;&amp;#43;编译器吗&amp;#xff1f;C语言应该是可以这样写的。把文件后缀名.cpp改为.c试试。或者把enum color i,j,k,pri;改为int类型int i,j,k,pri;&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["第一次用枚举类型出了问题～", ["#include<stdio.h>", "main()", "{", "    enum color{red,yellow,blue,white,black};", "    enum color i,j,k,pri;", "    int n,loop;", "    n=0;", "    for(i=red;i<=black;i++)", "    for(j=red;j<=black;j++)", "    if(i!=j)", "    {", "        for(k=red;k<=black;k++)", "        if((k!=i)&&(k!=j))", "        {", "            n=n+1;", "            printf(\"%-4d\",n);", "            for(loop=1;loop<=3;loop++)", "            {", "                switch(loop)", "                {case 1:pri=i;break;", "                case 2:pri=j;break;", "                case 3:pri=k;break;", "                default :break;", "                }", "            }", "            switch(loop)", "            {", "                case red:printf(\"%-10f\",\"red\");break;", "                case yellow:printf(\"%-10f\",\"yellow\");break;", "                case blue:printf(\"%-10f\",\"blue\");break;", "                case white:printf(\"%-10f\",\"white\");break;", "                case black:printf(\"%-10f\",\"black\");break;", "                default: break;", "            }", "        }", "        printf(\"\\n\");", "\n", "}\n", "printf", "(", "\"\\n total:%d\"", ",n);\n", "\n", "}", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;enum Color{Red&amp;#61;1,Blue,Green}color;&lt;br /&gt;后面这个color是一个变量&amp;#xff0c;就是说定义了一个名叫Color的枚举后立即声明了一个叫color的变量&amp;#xff0c;相当于下面这个写法的简化版&amp;#xff1a;&lt;br /&gt;enum Color{Red&amp;#61;1,Blue,Green};&lt;br /&gt;Color color;&lt;br /&gt;如果不需要这个变量&amp;#xff0c;那可以只定义枚举不声明变量&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["关于#枚举类型#的问题，如何解决", ["#include <stdio.h>", "enum Color{Red=1,Blue,Green}color;//这后面的color是什么意思后面没有用到这个变量", "int main()", "{", "  int icolor;", "  scanf(\"%d\",&icolor);", "  switch(icolor)", "   {", "    case Red:", "          printf(\"the choice is Red\\n\");", "          break;", "    case Blue:", "          printf(\"the choice is Blue\\n\");", "          break;", "    case Green:", "          printf(\"the choice is Green\\n\");", "          break;", "    default:", "          printf(\"?\\n\");", "          break;", "   }", "   return 0;", "}"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;你这样想&amp;#xff0c;如果枚举类型中的元素值都不是连续&amp;#xff0c;你在 &amp;#43;&amp;#43; 它们该如何处理&amp;#xff1f;&lt;br /&gt;正常来说&amp;#xff0c;枚举变量只能代表枚举中的元素&amp;#xff0c;也只能用枚举中元素赋值。枚举类型不支持像整数类型一样的 自增、自减&amp;#xff1b;&lt;br /&gt;或者&amp;#xff0c;你将其看成一个常量也可以&amp;#xff0c;它不能拿来运算&amp;#xff0c;最多可以拿到比较&amp;#xff1b;&lt;br /&gt;那怎么办呢&amp;#xff1f;&lt;br /&gt;用个int 类型的变量&amp;#xff0c;将枚举的值赋值给它&amp;#xff0c;用它来运算。&lt;br /&gt;所以&amp;#xff0c;你可以将day 定义成int&amp;#xff0c;后面什么都不用变&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["C++中枚举类型不支持迭代该怎么强转它？", ["\n", "有人说它都是明确定义的值，如果想变的话要用int++但我没听明白", "该怎么用int++强转它？"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;The underlying issue is the how enum is stored in mysql&lt;/p&gt;\n\n&lt;p&gt;For &lt;code&gt;enum('0','1','2')&lt;/code&gt; MySQL stores enum values internally as integer keys.&lt;/p&gt;\n\n&lt;p&gt;So for above indexes are &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0 = 1\n1 = 2\n2 = 3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So when you alter the colum to &lt;code&gt;tinyint&lt;/code&gt; then the saved values which are as string being converted to the corresponding indexes for &lt;code&gt;tinyint&lt;/code&gt; and you are getting &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1 for 0, 2 for 1 ....\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["MySql  - 将字段枚举类型更改为tinyint时的奇怪行为", ["\n\n", "I'm updating all of my table fields with enum type to tinyint(1), but I'm seeing some strange behavior.", "\n\n", "Say field_x type is ", "enum('0','1','2')", ";", "\n\n", "After altering the table (", "ALTER TABLE a MODIFY field_x tinyint(1) NOT NULL DEFAULT 1", "), fields with original value 0 now have 1, fields with original value 1 now have 2...", "\n\n", "Does anybody know what is causing this?", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;I think this was actually an issue relating to the quoting of strings when updating the field's values. I'm not sure if Doctrine or I was at fault.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["我是否应该能够使用文本值更新MySQL枚举类型？", ["\n\n", "I'm trying to update the value in a MYSQL enum field from PHP via Doctrine (5.3 and 1.2 respectively).", "\n\n", "I get an error when I try and do this:", "\n\n", "    $q = Doctrine_Query::create()\n            ->update('StMessages')\n            ->set('status','new')\n            ->where('message_id = ?',$msg_id);\n", "\n\n", "I get a sql state error telling me that the column 'new' does not exist. If I enter 3 instead of new (presumably the internal index of the 'new' value), then the query works. In fact it happens in a SQL client too so perhaps this is a quirk of this version of MySQL? Its 5.1.45. ", "\n\n", "Anyone know if this is how MySQL is supposed to treat enums or if this is more likely a Doctrine issue? I have 'use_native_enum' set to true.", "\n    "]], "Tag": "程序设计"}
{"Answer": "C++不支持Indexer的写法\r\n\r\n\r\n```\r\n pRecordset-&gt;Fields-&gt;GetItem(\"photo\")-&gt;Value\r\n```", "Konwledge_Point": "枚举类型", "Question": ["vs2010中报错[\"photo\"]表达式不是整数或者枚举类型，如何改？", ["pRecordset->Fields->Item[\"photo\"]->AppendChunk(pvList);  //JPG图像文件"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/29055784644618.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["C++里的MySQL语句提示表达式必须有整数或枚举类型怎么处理？", []], "Tag": "程序设计"}
{"Answer": "不用switch的那个方法稍作修改\r\n\r\n    public void textIdentify(File f)\r\n    {\r\n        HashMap&lt;String, String&gt; globalMode = new HashMap&lt;String, String&gt;();\r\n        String[] input = readAllFile(f).replaceAll(\"   \", \";\").split(\";\");\r\n        for (int i = 0; i &lt; input.length; i++)\r\n        {\r\n            String re = input[i].replace(\",\", \" \").trim();\r\n            String[] reSplited =  re.split(\" - \");\r\n            \r\n            String key = KEY_MAP.get(reSplited[0]);\r\n\r\n            if (key == \"Author\")\r\n            {\r\n                String authorNames = globalMode.get(key);\r\n                authorNames = (authorNames == null) ? reSplited[1] : (authorNames\r\n                        + \",\" + reSplited[1]);\r\n\r\n                globalMode.put(key, authorNames);\r\n            }\r\n            else\r\n            {\r\n                globalMode.put(key, reSplited[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n有点疑问的地方\r\n1. 你的代码里变量booktitle, title, author, year, isbn分别是做什么用处的, 如果仅这个方法里面用, 那么可以想我那样, 直接不用.\r\n2. String[] input = readAllFile(f).replaceAll(\"   \", \";\").split(\";\");\r\n这里replace完再split是否有必要, 是否可以直接\r\nString[] input = readAllFile(f).split(\"\"   \"\");\r\n3. String re = input[i].replace(\",\", \" \").trim();\r\n\r\n2,3两个代码我觉得比较奇怪, 不过你可能有你自己的意图啦.", "Konwledge_Point": "枚举类型", "Question": ["java中能将字符串赋给枚举类型吗？怎样用switch代替if-else？", ["想简化下面的代码，用switch语句代替if语句来提高效率，但是不知道switch（）括号中的判别式怎么写，请各位帮忙，谢谢！", "\n public void Text_identify(File f) {", "\n    HashMap GlobalMode = new HashMap();", "\n    String[] input = readAllFile(f).replaceAll(\"   \", \";\").split(\";\");", "\n     for (int i = 0; i < input.length; i++) {", "\n    String re = input[i].replace(\",\", \" \").trim();  ", "\n\n", "   if (re.startsWith(\"Book Title\")) {\n booktitle = input[i].substring(input[i].indexOf(\"-\") + 2);\n GlobalMode.put(\"booktitle\", booktitle);\n      contiue；\n}\n\n   if (re.startsWith(\"Chapter Title\")) {\ntitle = input[i].substring(input[i].indexOf(\"-\") + 2);\nGlobalMode.put(\"title\", title);\n      contiue；\n}\n\n// 多个作者识别\n   if (re.startsWith(\"Author\")) {\nStringBuffer au = new StringBuffer();\nauthor = au.append(input[i].substring(input[i].indexOf(\"-\") + 2)).toString();\n     String authorNames = GlobalMode.get(\"author\");\nauthorNames = (authorNames == null) ? author : (authorNames + \",\" + author);\nGlobalMode.put(\"author\", authorNames);\n     contiue；\n}\n\n\n  if (re.startsWith(\"Copyright\")) {\nyear = input[i].substring(input[i].indexOf(\"-\") + 2);\nGlobalMode.put(\"year\", year);\ncontiue；\n       }\nif (re.startsWith(\"isbn\")) {\nisbn = input[i].substring(input[i].indexOf(\"-\") + 2);\nGlobalMode.put(\"isbn\", isbn);\ncontiue；\n      }\n", "\n\n", "}", "\n\n", "补充：目的是处理这样的文本：", "\n\n", " Book Series - \nBook Title  - Graph Drawing\nChapter Title  - VGJ: Visualizing Graphs Through Java\nFirst Page  - 454\nLast Page  - 455\nCopyright  - 1998\nAuthor  - Carolyn McCreary\nAuthor  - Larry Barowski\n", "\n\n", "识别BookTitle = 对应值；author=对应值；..", "\n[b]问题补充：[/b]", "\n不能用switch，那有没有其他简单高效的方法来代替如此多重复的if-else呢？", "\n[b]问题补充：[/b]", "\n我试着用enum了，但是不知道怎么把字符串赋给enum，还有就是switch中的判别式不知道如何写，能否详细说一下呢？谢谢！", "\n[b]问题补充：[/b]", "\n1. 代码里变量booktitle, title, author, year, isbn是用来存放他们的对应值，在其他方法里也用到了", "\n2. Java代码 ", "\nString[] input = readAllFile(f).replaceAll(\"   \", \";\").split(\";\");  这里replace完再split确实没必要,我已经按你的方法修改了。", "\n3. globalMode最后要返回给方法调用者，我最后想要的是：可以自己定义booktitle, title, author, year, isbn对应值的显示顺序。像参考文献那样的格式。"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;According to &lt;a href=\"https://golang.org/pkg/database/sql/\" rel=\"noreferrer\"&gt;current database/sql docs&lt;/a&gt;, the &lt;code&gt;sql&lt;/code&gt; has four builtin functions that returns &lt;code&gt;driver.Value&lt;/code&gt;, and the underlying types are &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;bool&lt;/code&gt;. So I guess that's the only four types supported.&lt;/p&gt;\n\n&lt;p&gt;I just changed the underlying type of my enum from &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;int64&lt;/code&gt; and things are working.&lt;/p&gt;\n\n&lt;p&gt;The problematic section is updated to the following snippet:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// Platform Type enumeration\ntype PlatformType int64\nconst (\n    PLATFORM_TYPE_NOT_A_VALUE PlatformType = iota\n    PLATFORM_TYPE_TYPE1\n    PLATFORM_TYPE_TYPE2 \n)\n\nvar types = [...]string {\n    \"Not a type\",\n    \"Type1\",\n    \"Type2\",\n}\n\nfunc (platform_type PlatformType) String() string {\n    return types[platform_type]\n}\n\nfunc (u *PlatformType) Scan(value interface{}) error { *u = PlatformType(value.(int64)); return nil }\nfunc (u PlatformType) Value() (driver.Value, error)  { return int64(u), nil }\n&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["golang-将枚举类型保存到SQL数据库中“紧急：sql：转换Exec参数1的类型：从Value返回的非Value类型的int”", ["\n\n", "In my current go project (~5K LOC), I am using sqlite3 as my underlying database layer, and I am using gorm as my ORM engine. One of the models is a ", "Platform", " with a field of ", "PlatformType", " enum type. Here's a code snippet to demonstrate my problem.", "\n\n", "package main\n\nimport (\n    _ \"github.com/jinzhu/gorm/dialects/sqlite\"\n    \"github.com/jinzhu/gorm\"\n    \"database/sql/driver\"\n    \"fmt\"\n)\n\n/****************************\\\n    Object Layer\n\\****************************/\n\n// Platform ID \ntype PlatformID string\n\nfunc (u *PlatformID) Scan(value interface{}) error { *u = PlatformID(value.([]byte)); return nil }\nfunc (u PlatformID) Value() (driver.Value, error)  { return string(u), nil }\n\n// Platform Type enumeration\ntype PlatformType int\nconst (\n    PLATFORM_TYPE_NOT_A_VALUE PlatformType = iota\n    PLATFORM_TYPE_TYPE1\n    PLATFORM_TYPE_TYPE2 \n)\n\nvar types = [...]string {\n    \"Not a type\",\n    \"Type1\",\n    \"Type2\",\n}\n\nfunc (platform_type PlatformType) String() string {\n    return types[platform_type]\n}\n\nfunc (u *PlatformType) Scan(value interface{}) error { *u = PlatformType(value.(int)); return nil }\nfunc (u PlatformType) Value() (driver.Value, error)  { return int(u), nil }\n\n// Platform descriptor.\ntype Platform struct {\n    ID              PlatformID          `json:\"ID\" gorm:\"type:varchar(100);unique;not null\"`                // Assigned by LCBO.\n    Type            PlatformType        `json:\"Type\" gorm:\"type:integer\"`   \n}\n\ntype PlatformStore interface {\n    Init() error\n    Save(platform *Platform) error\n}\n\n/****************************\\\n    Persist Layer\n\\****************************/\nfunc NewSqlite3Store(dbname string) *gorm.DB {\n    db, err := gorm.Open(\"sqlite3\", dbname)\n    if err != nil {\n        panic(\"failed to connect database\")\n    }\n    return db\n}\n\ntype DBPlatformStore struct {\n    db *gorm.DB\n}\n\nfunc NewDBPlatformStore(db *gorm.DB) PlatformStore {\n    return &DBPlatformStore{\n        db: db,\n    }\n}\n\nfunc (store *DBPlatformStore) Init() error {\n    err := store.db.AutoMigrate(&Platform{}).Error\n    if err != nil {\n        panic(err)\n    }\n    return err\n}\n\nfunc (store *DBPlatformStore) Save(platform *Platform) error {\n    err := store.db.Create(platform).Error\n    if err != nil {\n        panic(err)\n    }\n    return err\n}\n\n/****************************\\\n    Application Layer\n\\****************************/\nfunc main() {\n    db := NewSqlite3Store(\"enum_test.db\")\n    platformStore := NewDBPlatformStore(db)\n\n    fmt.Println(\"Initialize Database\")\n    err := platformStore.Init()\n    if err != nil {\n        panic(err)\n    }\n\n    platform := new(Platform)\n    platform.ID = \"12345\"\n    platform.Type = PLATFORM_TYPE_TYPE1\n\n    platformStore.Save(platform)\n}\n", "\n\n", "After running the code above, I got a runtime error \"sql: converting Exec argument #1's type: non-Value type int returned from Value\"", "\n\n", "]# go run enumtest.go\nInitialize Database\npanic: sql: converting Exec argument #1's type: non-Value type int returned from Value\n\ngoroutine 1 [running]:\npanic(0x66d380, 0xc8203ae350)\n        /*/panic.go:481 +0x3e6\nmain.(*DBPlatformStore).Save(0xc820020b20, 0xc820304500, 0x0, 0x0)\n        /*/enumtest.go:84 +0x9f\nmain.main()\n        /*/enumtest.go:106 +0x247\nexit status 2\n", "\n\n", "And I checked my database, the ", "platforms", " table has been created successfully.", "\n\n", "]# sqlite3 enum_test.db\nsqlite> .schema platforms\nCREATE TABLE \"platforms\" (\"id\" varchar(100) NOT NULL UNIQUE,\"type\" integer , PRIMARY KEY (\"id\"));\n", "\n\n", "The (not-so) trivial question is ", "how do I modify my code so that I can correctly save the entry to database", ".", "\n\n", "My bigger question is: ", "How to save a customized GO enum type to a sql database?", "(with a ORM engine hopefully)", "\n    "]], "Tag": "程序设计"}
{"Answer": "定义常量（给字面值一个名字，便于追踪，调试，修改）\r\n类内定义的枚举值是类作用域内的名字。\r\n外部引用需要通过类名\r\n因此，和类外定义的同名 标识符 可以区分开来", "Konwledge_Point": "枚举类型", "Question": ["未命名的类中枚举作用是什么？", ["比如：", "\nclass Tips{", "\n enum{ssize = 100};", "\n };", "\n 这种形式的枚举类型定义有什么意义呢？"]], "Tag": "程序设计"}
{"Answer": "public static final FSOption[] values() \r\n  { \r\n    return ((FSOption[])$VALUES.clone());//这里报错，怎么改？ \r\n  } \r\n这段直接删掉就可以吧，enum类型自带values()方法。", "Konwledge_Point": "枚举类型", "Question": ["求逆向工程高手解决个枚举方面的问题", ["反编译了一个程序，里面的枚举类型始终不知道怎么改，麻烦高手些赐教下，反编译的代码如下:", "\npackage nc.bs.pub.filesystem;", "\n\n", "public S FSOption//这里报错，是不是要把S改称enum？", "\n{", "\n  WHEN_DEST_EXIST_OVERWRITE, WHEN_DEST_EXIST_IGNORE, WHEN_DEST_EXIST_STOP, WHEN_DEST_EXIST_RENAME;", "\n\n", "public static final FSOption[] values()", "\n  {", "\n    return ((FSOption[])$VALUES.clone());//这里报错，怎么改？", "\n  }", "\n}"]], "Tag": "程序设计"}
{"Answer": "把枚举定义在其它公用类里", "Konwledge_Point": "枚举类型", "Question": ["C#关于interface（接口）", ["接口里面不能定义枚举类型，那我在继承接口的时候要传枚举类型怎么办？"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;AFAIK, no you can't do that without explicitly typing the name as a string. But you can use the &lt;a href=\"http://godoc.org/golang.org/x/tools/cmd/stringer\" rel=\"noreferrer\"&gt;&lt;code&gt;stringer&lt;/code&gt; tool&lt;/a&gt; from the standard tools package to do it for you:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;For example, given this snippet,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package painkiller\n\ntype Pill int\n\nconst (\n    Placebo Pill = iota\n    Aspirin\n    Ibuprofen\n    Paracetamol\n    Acetaminophen = Paracetamol\n)\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;running this command&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;stringer -type=Pill\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;in the same directory will create the file pill_string.go, in package painkiller, containing a definition of&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func (Pill) String() string\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is recommended to use with the &lt;code&gt;go generate&lt;/code&gt; command of Go 1.4+.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["在Golang中不创建String（）就能获取枚举名称吗", ["\n\n", "Is it possible to get Enum name without creating ", "func (TheEnum) String() string", " in Golang?", "\n\n", "const (\n MERCURY = 1\n VENUS = iota\n EARTH\n MARS\n JUPITER\n SATURN\n URANUS\n NEPTUNE\n PLUTO\n)\n", "\n\n", "or is there a way to define constants on the fly? \nI found two ways ", "struct", "-based and ", "string", "-based, but both way make us retype each  labels 1 more time (or copy-paste and quoting or using editor's macro)", "\n    "]], "Tag": "程序设计"}
{"Answer": "Person类（抽象类）\r\n包含的字段：姓名Name（字符串型）、身高Height（单精度型，单位：米）、体重Weight（单精度，单位：kg）、性别Sex（枚举类型SexType）\r\n包含的属性：身份证号ID（字符串型，长度固定为18，且不包含空格字符）、年龄Age（只读方法）\r\n\r\n这部分需求帮你实现了\r\n\r\n\r\n```\r\n class Person\r\n{\r\n    string Name;\r\n\t\tfloat Height;\r\n\t\tfloat Weight;\r\n\t\tSexType sex;\r\n\t\tpublic string id;\r\n\t\tpublic string ID\r\n\t\t{\r\n\t\t    get { return id; }\r\n\t\t\t\tset { if (Regex.Match(value, \"^\\\\d{18}$\")) id = value; }\r\n\t\t}\r\n\t\tpublic int Age { get; private set; }\r\n}\r\n```\r\n\r\n需要别的请先采纳，谢谢。", "Konwledge_Point": "枚举类型", "Question": ["C#类，求帮忙求帮忙帮忙帮忙", ["定义枚举类型", "\nPublic enum SexType  {男, 女, 未知}；", "\nPublic enum ProTitle  (助教，讲师，副教授、教授、未知)", "\nPublic enum StuTitle {班长，副班长，学委，学员}", "\n定义下面类", "\nPerson类（抽象类）", "\n　　　包含的字段：姓名Name（字符串型）、身高Height（单精度型，单位：米）、体重Weight（单精度，单位：kg）、性别Sex（枚举类型SexType）", "\n　　　包含的属性：身份证号ID（字符串型，长度固定为18，且不包含空格字符）、年龄Age（只读方法）", "\n　　　包含的方法：", "\n　　　Public abstract void Saying();  //该方法为抽象方法", "\n　　　构造函数（带参数和不带参数的各定义一个）：", "\n　　　Public Person（）｛｝；  //在该构造函数对字段进行初始化，按默认值进行初始化，其中身份证号码初始化为“999999999999999999”", "\n　　　Public person(string name, string id, float height, float weight, SexType sex)", "\n　　　{}; //添加代码，利用实例化时传递的参数对类中的字段进行初始化", "\n　　　Public abstract void Write（FileStream fs）;  //功能：将数据保存到文件中", "\n　　　Public abstract void Read(FileStream fs);  //功能：从文件中读取数据", "\nTeacher类，该类从Person类继承", "\n　　　包含的字段：职称Title（ProTitle枚举类型）、课程Courses（集合类型，集合元素类型为字符串，访问控制符为private）", "\n　　　包含的属性：CourseNumber (数据类型：int，只读属性，含义：课程的数量)", "\n　　　包含的方法：", "\n　　　Public string CourseAdd(string coursename) //增加一门课程，同一门课程不能重复添加", "\n　　　Public string CourseDelete(string coursename); //删除一门课程，当要删除的课程不存在时，应给出提示", "\n　　　对父类中的抽象函数Saying（）进行重写；//在控制台上输出：“我正在讲课，不方便接电话”", "\n　　　对Object类中的虚函数ToString（）进行重写；//将有关教师的所有信息整合成一个字符串，并返回。该虚函数在Object中的定义如下：", "\n　　　Public virtual string ToString()", "\n　　　对父类的中Read（）、Write()方法进行重写。（方法中的代码可暂时不写）", "\n定义结构体", "\n　　　Public struct coursescore", "\n　　　{", "\n　　　   String coursename;   //课程的名称", "\n　　　   Float score;   //课程的成绩", "\n　　　}", "\n定义学生类Student，从Person类派生", "\n　　　包含的字段：学号StuID（字符串类型，长度固定，以实际学号的长度为准）、课程成绩CourseScore(集合类型，集合中的元素类型为结构体coursescore，访问修饰符采用private)、学生身份title（类型为枚举类型StuTitle）", "\n　　　包含的属性：", "\n　　　课程门数CourseNumber，定义为只读属性，表示学生所选的课程门数", "\n　　　包含的方法：", "\n　　　Public void CourseAdd(string coursename, float score);", "\n　　　Public void CourseAdd(coursescore  course);", "\n　　　上述2个方法为重载，功能是实现增加一门课程及该课程的成绩", "\n　　　对父类的中的Saying（）进行重写，要求输出“我正在上课，不方便接电话”", "\n　　　对父类的中的Read、Write方法进行重写（方法体中可暂时不写代码）", "\n    增加如下方法：", "\n　　　//功能：获取学生的所有课程的最高分、最低分和平均分", "\n　　　Public void GetScore(ref double HighScore, ref double LowScore, ref double AverageScore)", "\n　　　参数的含义：", "\n　　　HighScore：所有课程中的最高分", "\n　　　LowScore：所有课程中的最低分", "\n　　　AverageScore：所有课程的平均分", "\n　　　对Object类中的虚函数ToString()进行重写，要求该方法将学生的所有信息整合为一个字符串，并返回"]], "Tag": "程序设计"}
{"Answer": "http://blog.csdn.net/liucaoye/article/details/43938289", "Konwledge_Point": "枚举类型", "Question": ["枚举型enum语法错误问题，jdk版本1.7", ["package student;", "\nenum seasonenum//错误位置和提示Syntax error on token \"enum\", interface expected", "\n{", "\n    //在第一行表示枚举实例", "\n    spring,summer,fall,winter;", "\n}", "\npublic class enumtest {", "\n\n", "/**\n * 使用枚举类型表示四季：spring、summer、fall、winter\n */\npublic void judge(seasonenum s)\n{\n    switch (s)\n    {\n    case spring:System.out.println(\"春暖花开，正好踏青。\");break;\n    case summer:System.out.println(\"夏日炎炎，适合游泳。\");break;\n    case fall:System.out.println(\"秋高气爽，进补及时。\");break;\n    case winter:System.out.println(\"冬日雪飘，围炉赏雪。\");break;\n    }\n}\npublic static void main(String[] args) {\n    for(searonenum s:seasonenum.values())\n    {\n        System.out.println(s);\n    }\n    new enumtest().judge(seasonenum.spring);\n}\n", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "https://msdn.microsoft.com/zh-cn/data/hh859576", "Konwledge_Point": "枚举类型", "Question": ["link环境下，如何定义带有枚举的符合实体类型？这种类型怎么定义？", ["link环境下，如何定义带有枚举的符合实体类型？这种类型怎么定义？   "]], "Tag": "程序设计"}
{"Answer": "这里发生了隐式类型转换\r\n```\r\n QString raw_string = \"haasd123ha\";\r\n QByteArray byte_instrument = raw_string.toLocal8Bit();\r\n const char *char_instrument = byte_instrument;  //打印出来发现一样\r\n```\r\nQByteArray自动的保证“最后一个字节之后的那个位”是'\\0'。这就使得QByteArray可以很容易的转换成const char *\r\n调用QByteArray类上面的data()或者constData()函数，仅仅是获得QByteArray内部的一个const char*类型的字符串，从而我们不需要担心内存泄漏等的问题", "Konwledge_Point": "枚举类型", "Question": ["qt中函数参数类型不同也能实现其功能？", ["\n图中data为QByteArray类型，而函数原型为const char类型，broadcast为枚举类型，而函数原型为hostaddress类型。为什么不同也能够实现其功能呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;A typical approach to doing this in PHP would be to use class constants:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Something {\n    const ERR_HI = 'hi';\n    const ERR_FOOBAR = 'foobar';\n}\n\n\n//to use:\nreturn Something::ERR_FOOBAR;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although I would consider using exceptions instead.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["php返回类型或枚举？", ["\n\n", "I am using ", "Codeignitor", " for programming and coming from c#.\nits look like a newbie question ,but i want to do something like this.", "\n\n", "I have some functions that which return some values : ", "\n\n", "Example :", "\n\n", "function Create_db()\n{\n\n//do something\n\n      if (PassWordError) //some errors here it is password incorrect\n       {\n         return \"PASS_ERROR\";\n       }\n\n}\n", "\n\n", "and in some places i am using like this", "\n\n", "$result = Create_db(); //assume that there are some problems and returned \"PASS_ERROR\"\n", "\n\n", "so that the ", "$result", " is string now,", "\n\n", "is there anything like ENUMS in php ? or something like that ?", "\n\n", "so that i can do something like this :", "\n\n", "if (passWordError)\n{\n  return $error->PasswordError();\n}\n", "\n\n", "i assume that i can have some others types too", "\n\n", "like", "\n\n", "Maximum_name_error,authenticationFailedError", " etc", "\n\n", "Thank you.", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;wk &amp;#61; Enum.Parse(typeof(week)&amp;#xff0c;x);&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["别错过！c#枚举引用该怎么办", ["\n", "class", " ", "Program", "\n    ", "{\n        ", "public", " ", "enum", " ", "week", " ", "{ Monday=", "1", ",Tuesday=", "2", ",Wednesday=", "3", ",Thursday=", "4", ",Friday=", "5", ",Saturday=", "6", ",Sunday=", "7", " };\n        ", "static", " ", "void", " Main(", "string", "[] args)\n        {\n            ", "int", " wk;", "string", " x;\n            Console.WriteLine(", "\"please input the date\"", ");\n            x=(", "string", ")( Console.ReadLine());\n            Console.WriteLine(", "\"{0}\"", ", x);\n            wk=(", "int", ")week.x\n            ", "switch", "(wk)\n            {\n                ", "case", " ", "1", ":Console.WriteLine(", "\"dumpling,", "$5", "\"", ");", "break", ";\n                ", "case", " ", "2", ": Console.WriteLine(", "\"noodle,", "$3", "\"", "); ", "break", ";\n                ", "case", " ", "3", ": Console.WriteLine(", "\"meat,", "$7", "\"", "); ", "break", ";\n                ", "case", " ", "4", ": Console.WriteLine(", "\"beef,", "$20", "\"", "); ", "break", ";\n                ", "case", " ", "5", ": Console.WriteLine(", "\"steak,", "$15", "\"", "); ", "break", ";\n                ", "case", " ", "6", ": Console.WriteLine(", "\"fruit sala,", "$6", "\"", "); ", "break", ";\n                ", "case", " ", "7", ": Console.WriteLine(", "\"roast potato,", "$5", "\"", "); ", "break", ";\n                ", "default", ":Console.WriteLine(", "\"input the wrong number\"", "); ", "break", ";\n            }\n求助，我该怎么引用我定义的枚举类型呢\n"]], "Tag": "程序设计"}
{"Answer": "http://www.jb51.net/article/51216.htm", "Konwledge_Point": "枚举类型", "Question": ["怎么把listview的单元格设置成combo?", ["怎么让listview对于枚举类型使用combo控件下拉输入？怎么把listview的单元格设置成combo?"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;做取余运算的时候&amp;#xff0c;表达式必须是个整数&lt;br /&gt;只有2个整数可以进行取余&amp;#xff0c;不能是浮点数&lt;br /&gt;所以a的类型必须是int&amp;#xff0c;后面先把x&amp;#43;y强制转float再取余也是错的&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["怎样修改这表达式使它不报错", ["编译器显示“表达式必须具有整数或未区分范围的枚举类型”我该如何将这个表达式修改正确？"]], "Tag": "程序设计"}
{"Answer": "跟C#里面使用差不多。\r\n\r\n如果你想拿到Error的typeCode，就是Error.getTypeCode();", "Konwledge_Point": "枚举类型", "Question": ["Java中如何定义返回int型数据的枚举", ["在c#里可以定义返回数字类型的枚举", "\n[code=\"C#\"]", "\n\n", "public enum LogType\n{\n\n\n            Error=0,\n            AddUser=1\n", "\n\n", "}", "\n\n", "[/code]", "\n\n", "我想知道Java里怎么定义", "\n[b]问题补充：[/b]", "\n怎么使用啊"]], "Tag": "程序设计"}
{"Answer": "第一题：选B\r\nA和C都是double类型的，D选项的0.0314E2是一个实型常量,用科学计数法表示，只有B是float类型的\r\n第二题：选A\r\n默认情况下，第一个枚举子被赋值0，接下来的枚举子取值是前面一个枚举子的取值+1,，所以NAME应该是0", "Konwledge_Point": "枚举类型", "Question": ["C++初学者，问两个超级简单的问题。我知道这个问题很简单但是看了N遍定义依然不会做", ["下列选项中属于float类型字面常量的是：", "\nA.3.14 B.3.14f C.3.14L D.0.0314E2", "\n已知枚举类型定义语句为：", "\nenum Token {NAME,NUMBER,PLUS=5,MINUS,PRINT=10};", "\n则下列说法中错误的是：", "\nA.枚举常量NAME的值为1", "\nB.枚举常量NUMBER的值为1", "\nC.枚举常量MINUS的值为6", "\nD.枚举常量PRINT的值为10"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;抱歉&amp;#xff0c;我只能写struct函数&amp;#xff0c;代码如下&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c&amp;#43;&amp;#43;\"&gt;struct book\n{\n    &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; sm;        &lt;span class=\"hljs-comment\"&gt;//书名 &lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; ys;       &lt;span class=\"hljs-comment\"&gt;//页数 &lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;year&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;month&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;day&lt;/span&gt;;\n    &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; lb;        &lt;span class=\"hljs-comment\"&gt;//类别:数学类为1,物理类为2,电子类为3,计算机类为4 &lt;/span&gt;\n}&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;10005&lt;/span&gt;];\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;剩下的只好题主自己写了&amp;#xff0c;对不起&amp;#xff01;&lt;br /&gt;&lt;strong&gt;&amp;#xff08;PS&amp;#xff1a;如果要运用struct里面的变量&amp;#xff0c;比如第i个页数&amp;#xff0c;就是a[i].ys&amp;#xff09;&lt;/strong&gt;&lt;br /&gt;&lt;strong&gt;&amp;#xff08;PS2&amp;#xff1a;如果你输入了&amp;#34;book.&amp;#34;,它会弹出一个列表&amp;#xff0c;如下图1-1&amp;#xff0c;你就可以选择&amp;#xff09;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/314812971346112.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;                                            &lt;/span&gt;&lt;strong&gt;&lt;strong&gt;图1-1&lt;/strong&gt;&lt;/strong&gt;&lt;br /&gt;希望对题主有帮助&amp;#xff01;望采纳&amp;#xff01;&lt;p&gt;&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["如何定义一个名为Book结构", ["定义一个名为Book的结构体，包含：书名，总页数，出版日期（包括年、月、日），类别（数学类、物理类、电子类、计算机类）。在main函数中定义Book结构体数组，并初始化。分别按书名排序、按页数排序、按出版日期排序、按类别归类并按书名培训打印结构体信息。其中类别用枚举类型实现。"]], "Tag": "程序设计"}
{"Answer": "[quote]我在FreeMarker中需要将一个枚举类型的所有值都读出来，返回值是一个数组，然后遍历这个数组，生成输出[/quote]建议你把你的逻辑在action中做返回一个list。\r\n在再freemarker中处理\r\n\r\n&lt;#list list as ls&gt;\r\n//do somethoing\r\n&lt;/#lsit&gt;", "Konwledge_Point": "枚举类型", "Question": ["在Freemarker中调用返回值为非字符串的静态方法的问题", ["我在FreeMarker中需要将一个枚举类型的所有值都读出来，返回值是一个数组，然后遍历这个数组，生成输出", "\n\n", "比如我要调用这个方法来获取枚举 org.**.enums.AuditResult.values，我希望在ftl文件中将返回值赋给一个list，然后在做处理，应该怎么做呢？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;enum是C&amp;#43;&amp;#43;中的枚举类型&amp;#xff0c;以一系列字符串&amp;#xff0c;来表示整型数字&amp;#xff0c;起到更方便阅读维护代码的效果。&lt;/p&gt;\n&lt;p&gt;1 enum的定义&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;enum 的定义形式如下&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;1&lt;/p&gt;\n&lt;p&gt;2&lt;/p&gt;\n&lt;p&gt;3&lt;/p&gt;\n&lt;p&gt;4&lt;/p&gt;\n&lt;p&gt;5&lt;/p&gt;\n&lt;p&gt;6&lt;/p&gt;\n&lt;p&gt;7&lt;/p&gt;\n&lt;p&gt;enum enum_name&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-built_in\"&gt;enum_value1,&lt;/span&gt;\n&lt;span class=\"hljs-built_in\"&gt;\nenum_value2,&lt;/span&gt;\n\n...\n\nenum_valuen\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;};&lt;/p&gt;\n&lt;p&gt;如果没有定义enum变量的需求&amp;#xff0c;enum_name可以省略。&lt;/p&gt;\n&lt;p&gt;在以上形式下&amp;#xff0c;第一个值&amp;#xff0c;enum_value1, 默认值为0&amp;#xff0c;以下各条分别为上一条加一。&lt;/p&gt;\n&lt;p&gt;如果要改变enum的第一个值&amp;#xff0c;或enum各个项值不连续&amp;#xff0c;可以写作&lt;/p&gt;\n&lt;p&gt;1&lt;/p&gt;\n&lt;p&gt;2&lt;/p&gt;\n&lt;p&gt;3&lt;/p&gt;\n&lt;p&gt;4&lt;/p&gt;\n&lt;p&gt;5&lt;/p&gt;\n&lt;p&gt;6&lt;/p&gt;\n&lt;p&gt;7&lt;/p&gt;\n&lt;p&gt;8&lt;/p&gt;\n&lt;p&gt;9&lt;/p&gt;\n&lt;p&gt;10&lt;/p&gt;\n&lt;p&gt;enum enum_name&lt;/p&gt;\n&lt;p&gt;{&lt;!-- --&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;enum_value1&amp;#61; -100,\n\nenum_value2,\n\n&lt;span class=\"hljs-meta\"&gt;...&lt;/span&gt;\n\nenum_valuem &amp;#61; 1234,\n\nenum_valuem1,\n\n&lt;span class=\"hljs-meta\"&gt;...&lt;/span&gt;\n\nenum_valuen\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;};&lt;/p&gt;\n&lt;p&gt;其中显式赋值的enum项&amp;#xff0c;实际值就是显式赋值的值。其它项仍遵从上一项加一的原则。&lt;/p&gt;\n&lt;p&gt;于是在这个例子中&amp;#xff0c;enum_value2 &amp;#61; -99, enum_valuem1 &amp;#61; 1235。&lt;/p&gt;\n&lt;p&gt;2 enum 变量的定义&amp;#xff1a;&lt;/p&gt;\n&lt;p&gt;定义一个变量的格式为&lt;/p&gt;\n&lt;p&gt;enum enum_type var &amp;#61; init_value;&lt;/p&gt;\n&lt;p&gt;定义一个enum_type为类型的变量var&amp;#xff0c; 并初始化为init_value. 其中&amp;#61;init_value部分可以省略。&lt;/p&gt;\n&lt;p&gt;3 enum项的使用。&lt;/p&gt;\n&lt;p&gt;enum各个项使用方法类似于无参宏定义。在需要某值的地方&amp;#xff0c;引用对应项即可。&lt;/p&gt;\n&lt;p&gt;如&lt;/p&gt;\n&lt;p&gt;var &amp;#61; enum_value1;&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["C++中使用enum运算", ["计算一串数字中，负数中的最大值和正数中的最小值的和。要使用enum枚举类型。", "最基础的计算最大最小值很简单，我写出来代码能跑。但是这个enum在csdn上搜到的东西很少，基本看不懂，也写不出来。", "有人能讲解一下吗）"]], "Tag": "程序设计"}
{"Answer": "```\r\n  class Student : Person\r\n{\r\n    string StuID;\r\n        List&lt;coursescore&gt; CourseScore = new List&lt;coursescore&gt;();\r\n        StuTitle title;\r\n        public CourseNumber { get; private set; }\r\n        List&lt;string&gt; Courses = new List&lt;string&gt;();\r\n        public int CourseNumber { get; private set; }\r\n                public void CourseAdd(string coursename, float score)\r\n                {\r\n                    coursescore c = new coursescore();\r\n                        c.coursename = coursename;\r\n                        c.score = ccore;\r\n                    Course.Add(c);\r\n                }\r\n　　　public void CourseAdd(coursescore course)\r\n         {\r\n                CourseScore.Add(course);\r\n            }\r\n}\r\n```", "Konwledge_Point": "枚举类型", "Question": ["大神再来，谢谢啦。。。。。。。。。。。。", ["定义学生类Student，从Person类派生", "\n 　　　包含的字段：学号StuID（字符串类型，长度固定，以实际学号的长度为准）、课程成绩CourseScore(集合类型，集合中的元素类型为结构体coursescore，访问修饰符采用private)、学生身份title（类型为枚举类型StuTitle）", "\n 　　　包含的属性：", "\n 　　　课程门数CourseNumber，定义为只读属性，表示学生所选的课程门数", "\n 　　　包含的方法：", "\n 　　　Public void CourseAdd(string coursename, float score);", "\n　　　Public void CourseAdd(coursescore course);"]], "Tag": "程序设计"}
{"Answer": "用sprintf拼接，用%d %s等放你的参数，后面加上变量，和printf用法类似，只是第一个参数是一个字符串。\r\n或者使用存储过程。用字符串拼接可能有sql注入问题。", "Konwledge_Point": "枚举类型", "Question": ["新手，c++操作mysql数据库怎么在sql语句中加入变量或者说有没有像java一样的预编译方法", ["新手，c++操作mysql数据库怎么在sql语句中加入变量或者说有没有像java一样的预编译方法，把数据放入sql语句中执行？", "\n还有像如下的错误表达式为整数或者未区分范围的枚举类型是怎么回事，那错了？求大神解答"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;while是循环&amp;#xff0c;switch是分支选择&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;while&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(条件)&lt;/span&gt;&lt;/span&gt;{\n    循环体\n}\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-title\"&gt;switch&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(条件)&lt;/span&gt;&lt;/span&gt;{\ncase xxx1:\ncase xxx2:\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "枚举类型", "Question": ["java的while的case参数是什么变量？", ["java的基本语法while不是分支选择么。", "今天突然想到个事，while的case的数据储存在哪呢？", "是方法内局部变量？", "不太像，毕竟还有枚举类型可以用。", "但是如果是全局变量，好像也不太对。", "所以这个是怎么储存的呢？", "会是像我们平常使用常量字符串的时候一样，做成静态终止变量么？"]], "Tag": "程序设计"}
{"Answer": "例如\r\n\r\n```\r\n public enum AuditStatus{\r\n    \t\r\n    \t/**审核中*/\r\n    \tAUDITING(0),\r\n    \t/**审核通过*/\r\n    \tAUDIT_PASS(1),\r\n    \t/**审核拒绝*/\r\n    \tAUDIT_REJECT(2),\r\n    \t/**协议签署完成*/\r\n    \tAUDIT_SIGN(3);\r\n    \t\r\n    \tprivate int value;\r\n    \t\r\n    \tprivate AuditStatus(int value){\r\n    \t\tthis.value = value;\r\n    \t}\r\n    \t\r\n    \tpublic int getStatus(){\r\n    \t\treturn this.value;\r\n    \t}\r\n    }\r\n \r\n```", "Konwledge_Point": "枚举类型", "Question": ["java枚举类跟类常量的关系", ["类常量：必须给一个默认值。 int Spring  = 1;", "\n枚举类：可以不给默认值", "\nenum{", "\n            Spring,Summer,Automn,WInter", "\n}", "\n.", "\n\n", "那么问题来了，我在存进数据库的时候 如果第一种方式声明  可以将1存进去，", "\n\n", "枚举怎么存呢？枚举的作用到底是什么，只是在java端做类型校验的吗。"]], "Tag": "程序设计"}
{"Answer": "```\r\n class abstract Person\r\n{\r\n    string Name;\r\n        float Height;\r\n        float Weight;\r\n        SexType sex;\r\n        public string id;\r\n        public string ID\r\n        {\r\n            get { return id; }\r\n                set { if (Regex.Match(value, \"^\\\\d{18}$\")) id = value; }\r\n        }\r\n        public int Age { get; private set; }\r\n\t\t\t\tpublic abstract void Saying();\r\n\t\t\t\tpublic Person() { id = \"999999999999999999\"; }\r\n　　  public Person(string name, string id, float height, float weight, SexType sex)\r\n\t\t    {\r\n\t\t\t\t    Name = name;\r\n\t\t\t\t\t\tthis.id = id;\r\n\t\t\t\t\t\tHeight = height;\r\n\t\t\t\t\t\tWeight = weight;\r\n\t\t\t\t\t\tSex = sex;\r\n\t\t\t\t}\r\n\t\t\t\tpublic abstract void Write(FileStream fs); \r\n　　  public abstract void Read(FileStream fs); \r\n}\r\n```", "Konwledge_Point": "枚举类型", "Question": ["求大神来帮助C#，一个简单学生类", ["定义枚举类型", "\n Public enum SexType {男, 女, 未知}；", "\n Public enum ProTitle (助教，讲师，副教授、教授、未知)", "\n Public enum StuTitle {班长，副班长，学委，学员}", "\n 定义下面类", "\n Person类（抽象类）", "\n 　　　包含的字段：姓名Name（字符串型）、身高Height（单精度型，单位：米）、体重Weight（单精度，单位：kg）、性别Sex（枚举类型SexType）", "\n 　　　包含的属性：身份证号ID（字符串型，长度固定为18，且不包含空格字符）、年龄Age（只读方法）", "\n 　　　包含的方法：", "\n 　　　Public abstract void Saying(); //该方法为抽象方法", "\n 　　　构造函数（带参数和不带参数的各定义一个）：", "\n 　　　Public Person（）｛｝； //在该构造函数对字段进行初始化，按默认值进行初始化，其中身份证号码初始化为“999999999999999999”", "\n 　　　Public person(string name, string id, float height, float weight, SexType sex)", "\n 　　　{}; //添加代码，利用实例化时传递的参数对类中的字段进行初始化", "\n 　　　Public abstract void Write（FileStream fs）; //功能：将数据保存到文件中", "\n 　　　Public abstract void Read(FileStream fs); //功能：从文件中读取数据", "\n Teacher类，该类从Person类继承", "\n 　　　包含的字段：职称Title（ProTitle枚举类型）、课程Courses（集合类型，集合元素类型为字符串，访问控制符为private）", "\n 　　　包含的属性：CourseNumber (数据类型：int，只读属性，含义：课程的数量)", "\n 　　　包含的方法：", "\n 　　　Public string CourseAdd(string coursename) //增加一门课程，同一门课程不能重复添加", "\n 　　　Public string CourseDelete(string coursename); //删除一门课程，当要删除的课程不存在时，应给出提示", "\n 　　　对父类中的抽象函数Saying（）进行重写；//在控制台上输出：“我正在讲课，不方便接电话”", "\n 　　　对Object类中的虚函数ToString（）进行重写；//将有关教师的所有信息整合成一个字符串，并返回。该虚函数在Object中的定义如下：", "\n 　　　Public virtual string ToString()", "\n 　　　对父类的中Read（）、Write()方法进行重写。（方法中的代码可暂时不写）", "\n 定义结构体", "\n 　　　Public struct coursescore", "\n 　　　{", "\n 　　　 String coursename; //课程的名称", "\n 　　　 Float score; //课程的成绩", "\n 　　　}", "\n 定义学生类Student，从Person类派生", "\n 　　　包含的字段：学号StuID（字符串类型，长度固定，以实际学号的长度为准）、课程成绩CourseScore(集合类型，集合中的元素类型为结构体coursescore，访问修饰符采用private)、学生身份title（类型为枚举类型StuTitle）", "\n 　　　包含的属性：", "\n 　　　课程门数CourseNumber，定义为只读属性，表示学生所选的课程门数", "\n 　　　包含的方法：", "\n 　　　Public void CourseAdd(string coursename, float score);", "\n 　　　Public void CourseAdd(coursescore course);", "\n 　　　上述2个方法为重载，功能是实现增加一门课程及该课程的成绩", "\n 　　　对父类的中的Saying（）进行重写，要求输出“我正在上课，不方便接电话”", "\n 　　　对父类的中的Read、Write方法进行重写（方法体中可暂时不写代码）", "\n 增加如下方法：", "\n 　　　//功能：获取学生的所有课程的最高分、最低分和平均分", "\n 　　　Public void GetScore(ref double HighScore, ref double LowScore, ref double AverageScore)", "\n 　　　参数的含义：", "\n 　　　HighScore：所有课程中的最高分", "\n 　　　LowScore：所有课程中的最低分", "\n 　　　AverageScore：所有课程的平均分", "\n 　　　对Object类中的虚函数ToString()进行重写，要求该方法将学生的所有信息整合为一个字符串，并返回"]], "Tag": "程序设计"}
{"Answer": "```\r\n class Teacher : Person\r\n{\r\n    ProTitle Title;\r\n\t\tList&lt;string&gt; Courses = new List&lt;string&gt;();\r\n\t\tpublic int CourseNumber { get; private set; }\r\n\t\tpublic string CourseAdd(string coursename)\r\n\t\t{\r\n\t\t    Courses.Add(coursename);\r\n\t\t}\r\n\t\tpublic string CourseDelete(string coursename)\r\n\t\t{\r\n\t\t    if (Courses.All(x =&gt; x != coursename))\r\n\t\t\t\t    Console.WriteLine(\"不存在\" + coursename);\r\n\t\t\t\tCourses.Remove(coursename);\r\n\t\t}\r\n\t\tpublic override void Saying()\r\n\t\t{\r\n\t\t    Console.WriteLine(\"我正在讲课，不方便接电话\");\r\n\t\t}\r\n\t\tpublic override string ToString()\r\n\t\t{\r\n\t\t    return string.Format(\"Name {0} Title {1} Courses {2}\", Name, Title, string.Join(\",\", Courses.ToString()));\r\n\t\t}\r\n\t\tpublic override void Write(FileStream fs) { }\r\n　 public override void Read(FileStream fs) { }\r\n}\r\n```", "Konwledge_Point": "枚举类型", "Question": ["大神求再来。。。。。。。", ["定义枚举类型", "\nPublic enum SexType {男, 女, 未知}；", "\nPublic enum ProTitle (助教，讲师，副教授、教授、未知)", "\nPublic enum StuTitle {班长，副班长，学委，学员}", "\n定义下面类", "\nPerson类（抽象类）", "\n 　　　包含的字段：姓名Name（字符串型）、身高Height（单精度型，单位：米）、体重Weight（单精度，单位：kg）、性别Sex（枚举类型SexType）", "\n 　　　包含的属性：身份证号ID（字符串型，长度固定为18，且不包含空格字符）、年龄Age（只读方法）", "\n 　　　包含的方法：", "\n 　　　Public abstract void Saying(); //该方法为抽象方法", "\n 　　　构造函数（带参数和不带参数的各定义一个）：", "\n 　　　Public Person（）｛｝； //在该构造函数对字段进行初始化，按默认值进行初始化，其中身份证号码初始化为“999999999999999999”", "\n　　　Public person(string name, string id, float height, float weight, SexType sex)", "\n　　　{}; //添加代码，利用实例化时传递的参数对类中的字段进行初始化", "\n 　　　Public abstract void Write（FileStream fs）; //功能：将数据保存到文件中", "\n 　　　Public abstract void Read(FileStream fs); //功能：从文件中读取数据", "\nTeacher类，该类从Person类继承", "\n 　　　包含的字段：职称Title（ProTitle枚举类型）、课程Courses（集合类型，集合元素类型为字符串，访问控制符为private）", "\n 　　　包含的属性：CourseNumber (数据类型：int，只读属性，含义：课程的数量)", "\n　　　包含的方法：", "\n 　　　Public string CourseAdd(string coursename) //增加一门课程，同一门课程不能重复添加", "\n 　　　Public string CourseDelete(string coursename); //删除一门课程，当要删除的课程不存在时，应给出提示", "\n 　　　对父类中的抽象函数Saying（）进行重写；//在控制台上输出：“我正在讲课，不方便接电话”", "\n　　　对Object类中的虚函数ToString（）进行重写；//将有关教师的所有信息整合成一个字符串，并返回。该虚函数在Object中的定义如下：", "\n 　　　Public virtual string ToString()", "\n　　　对父类的中Read（）、Write()方法进行重写。（方法中的代码可暂时不写）", "\n 定义结构体", "\n 　　　Public struct coursescore", "\n　　　{", "\n　　　 String coursename; //课程的名称", "\n 　　　 Float score; //课程的成绩", "\n 　　　}", "\n定义学生类Student，从Person类派生", "\n 　　　包含的字段：学号StuID（字符串类型，长度固定，以实际学号的长度为准）、课程成绩CourseScore(集合类型，集合中的元素类型为结构体coursescore，访问修饰符采用private)、学生身份title（类型为枚举类型StuTitle）", "\n 　　　包含的属性：", "\n 　　　课程门数CourseNumber，定义为只读属性，表示学生所选的课程门数", "\n 　　　包含的方法：", "\n 　　　Public void CourseAdd(string coursename, float score);", "\n　　　Public void CourseAdd(coursescore course);", "\n　　　上述2个方法为重载，功能是实现增加一门课程及该课程的成绩", "\n 　　　对父类的中的Saying（）进行重写，要求输出“我正在上课，不方便接电话”", "\n　　　对父类的中的Read、Write方法进行重写（方法体中可暂时不写代码）", "\n 增加如下方法：", "\n 　　　//功能：获取学生的所有课程的最高分、最低分和平均分", "\n 　　　Public void GetScore(ref double HighScore, ref double LowScore, ref double AverageScore)", "\n　　　参数的含义：", "\n 　　　HighScore：所有课程中的最高分", "\n 　　　LowScore：所有课程中的最低分", "\n 　　　AverageScore：所有课程的平均分", "\n 　　　对Object类中的虚函数ToString()进行重写，要求该方法将学生的所有信息整合为一个字符串，并返回"]], "Tag": "程序设计"}
{"Answer": "转换成后缀表达式然后计算，比如你的那个算式对应的后缀表达式就是3 4 + 2 5 * 6 - +,然后用栈其实就是利用栈先进后除的原理，遇到数字进栈，遇到符号出栈，计算完了继续进栈", "Konwledge_Point": "枚举类型", "Question": ["数据结构一书的字符优先算法例题，", ["关于栈的简单例题，相信大家都看过，我看了例题后想自己实现下，比如（3+4）+（2*5-6）=", "\n发现最大问题是算符的优先级怎么确定，我想到用枚举类型定义一下，这样可以比较大小，但是有些同级啊比如加减，枚举就解决不了了。我记得似乎有个函数可以映射一下，这样把加减都映射到1，乘除，，，这样，关键是我不熟悉那个函数，各位大神有什么好的思路没，指点一下吧"]], "Tag": "程序设计"}
{"Answer": "看下是不是表没有主键，或者是模型和数据库不同步，重新建立下模型", "Konwledge_Point": "枚举类型", "Question": ["关于ASP.net的小问题吧", ["如图：", "\n\n", "\n\n", "然后翻译过来大意就是：无法创建“System.Data.Entity.DynamicProxies.Admin_B59AC12D57E5361B5480DCE654431076FFDDFAFC1D2D21A0083898AF5C5A00F4”类型的常量值。在此上下文中只支持基本类型或枚举类型。", "\n\n", "检查了控制器视图和实体都没有什么问题，然后就不知道到底是什么问题了，可能我现在有点钻牛角尖，有哪位大神能指点我一下，出现无法创建这玩意一般是哪里出了问题呢，然后又该如何去解决？"]], "Tag": "程序设计"}
{"Answer": "[color=blue][b]改为这样：[/b][/color]\r\npublic enum em {\r\nHello,\r\nworld\r\n}", "Konwledge_Point": "枚举类型", "Question": ["Annotation中定义的enum类型的如何调用", ["Annotation中定义的enum类型的如何调用，我写了一个代码，", "\n@Retention(RetentionPolicy.RUNTIME)", "\n@Target(ElementType.METHOD)", "\n@Inherited", "\npublic @interface MyAnnotation {", "\n    int i();", "\n    String str();", "\n    em e();", "\n    String[] value();", "\n}", "\nenum em {", "\n    Hello,", "\n    world", "\n}", "\n\n", "然后我在测试代码中调用枚举类型的e，代码是这样的：", "\npublic class Main {", "\n\n", "public static void main(String[] args) {\n    Class<TestMyAnnotation> c = TestMyAnnotation.class;\n    Method test = null ;\n    try {\n        test = c.getDeclaredMethod(\"testAnnoation\",String.class);\n    } catch (Exception e) {\n        e.printStackTrace();\n    } \n    MyAnnotation a = test.getAnnotation(MyAnnotation.class);\n    System.out.println(a.i());\n    System.out.println(a.str());\n         System.out.println(a.e());               //此处出错，抛出IllegalAccessError\n              em e = em.Hello;                         //em是我定义的一个enum\n              System.out.println(e);                   //这样是可以的，why？\n}\n", "\n\n", "}"]], "Tag": "程序设计"}
{"Answer": "区别大了；\r\n枚举中相当于一组常量的定义,而枚举类型的变量只能在这些值中取一个,一般来说枚举类型的值是整形,但是如果要赋给一个整形变量最好经过强制转换；\r\n数组定义的是一组相同类型的变量集合；\r\n这里有你想要的详细答案 https://zhidao.baidu.com/question/88667198.html 。", "Konwledge_Point": "枚举类型", "Question": ["java 枚举的作用 感觉和数组一样啊 求大神解惑", ["枚举的作用感觉和数组一样 都是在里面放几个同类型的值~~ 然后", "\n另外一个类 用枚举类名点枚举类里面的一个值 来取枚举里面这个值~~", "\n例如：enum Signal {", "\n    GREEN, YELLOW, RED", "\n}", "\npublic class TrafficLight {", "\n    Signal color = Signal.RED;", "\n        }"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;错误不在这里&amp;#xff0c;要把程序贴全。&lt;br /&gt;数据类型不对&amp;#xff0c;先检查 train_dataloader 内容对不对。&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["python代码报错", ["device = torch.device(", "'cuda'", " ", "if", " torch.cuda.is_available() ", "else", " ", "'cpu'", ")\n", "for", "  batch_idx, batch ", "in", " enumerate(train_dataloader, 0): #枚举类型\n    x_p,x_c,", "y", "=map(lambda x: x.", "to", "(device), batch)\n    ", "print", "(", "\"*********\"", ")\n    ", "print", "(", "\"punchline shape: \"", ",x_p.shape)\n    ", "print", "(", "\"context shape: \"", ",x_c.shape)\n    ", "print", "(", "\"humor labels: \"", ",y)\n    ", "if", " ", "batch_idx", "==5:\n    break\n", "\n", "第二行代码报错", "IndexError: only integers, slices (", ":", "), ellipsis (", "...", "), numpy.newaxis (", "None", ") and integer or boolean arrays are valid indices"]], "Tag": "程序设计"}
{"Answer": "scanf(\"%f,%f,%f,\"&amp;a, &amp;b, &amp;c);改成\r\nscanf(\"%f,%f,%f\",&amp;a, &amp;b, &amp;c);试下，逼死强迫症。", "Konwledge_Point": "枚举类型", "Question": ["C语言基础问题，小白求帮助", ["main()", "\n{", "\n    float a, b, c, d, x1, x2, q, m, n;", "\n    printf(\"please input a,b,c\\n\");", "\n    scanf(\"%f,%f,%f,\"&a, &b, &c);", "\n    d = b*b - 4 * a * c;", "\n    if", "\n        (d >= 0)", "\n    {", "\n        q = sqrt(d);   /*求实根*/", "\n        x1 = (-b + q) / (2 * a);", "\n        x2 = (-b - q) / (2 * a);", "\n        printf(\"x1=%.2f,x2=%.2f\", x1, x2);", "\n\n", "}\nelse\n{\n    m = -b / (2 * a);    /*求实部*/\n    n = sqrt(-d) / (2 * a);     /*求虚部*/\n    printf(\"x1=%.2f+%.2fi\", m, n);\n    printf(\"x1=%.2f-%.2fi\", m, n);\n}\n", "\n\n", "}", "\nVS2015求解一元二次方程时，第五行scanf(\"%f,%f,%f,\"&a, &b, &c);提示表达式必须具有整数或未区分范围的枚举类型"]], "Tag": "程序设计"}
{"Answer": "把属性property的length属性值设置大点\r\n&lt;property name=\"comment\" type=\"string\" column=\"t_comment\" length=\"2000\"/&gt;\r\n\r\n关键是length=\"2000\"设置大点", "Konwledge_Point": "枚举类型", "Question": ["关于用Hibernate往Oracle里存长字符串的问题", ["今天老师让做一个网上商城的项目，其中里面有关于产品描述的模块，我想把这些描述存到oracle数据库中，可是总是添加失败", "\n\n", "请问存较长的字符串有什么限制吗？", "\n\n", "我要存入的字符串", "\n\n", "\"本书赢得了全球程序员的广泛赞誉，即使是最晦涩的概念，在Bruce Eckel的文字亲和力和小而直接的编程示例面前也会化解于无形。从Java的基础语法到最高级特性（深入的面向对象概念、多线程、自动项目构建、单元测试和调试等），本书都能逐步指导你轻松掌握。从本书获得的各项大奖以及来自世界各地的读者评论中，不难看出这是一本经典之作。本书的作者拥有多年教学经验，对C、C++以及Java语言都有独到、深入的见解，以通俗易懂及小而直接的示例解释了一个个晦涩抽象的概念。本书共22章，包括操作符、控制执行流程、访问权限控制、复用类、多态、接口、通过异常处理错误、字符串、泛型、数组、容器深入研究、Java I/O系统、枚举类型、并发以及图形化用户界面等内容。这些丰富的内容，包含了Java语言基础语法以及高级特性，适合各个层次的Java程序员阅读，同时也是高等院校讲授面向对象程序设计语言以及Java语言的绝佳教材和参考书。 \"", "\n\n", "就这么多字，按理说不算太多啊~~~~", "\n\n", "我想把这些字存进去，应该在怎么解决啊？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;g应该是&lt;code class=\"language-javascript\"&gt;int g[13]&lt;/code&gt;吧&amp;#xff1f;你定义&lt;code class=\"language-javascript\"&gt;int *g[13]&lt;/code&gt;是指针数组&amp;#xff0c;即每个元素是&lt;code class=\"language-javascript\"&gt;int*&lt;/code&gt;指针&amp;#xff0c;而不是0~12&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["c++在输出时候的一个问题", ["问题遇到的现象和发生背景", "\n", "在写人工洗牌发牌，要求拿到手的卡牌按大小顺序排，我就设了给数组g[13]用其中数据的大小表示排序的大小（因为前面程序设计思路的原因，直接排序的话相当于重新写一遍代码了），想让g[l]的值（0～12）做为p1[13]的循序输出，但是直接写入的话就显示错误。", "\n", "问题相关代码，请勿粘贴截图", "\n", "int* g[13],* h[13],* j[13],* k[13];", "    fun(&p1[13], &g[13]);", "    fun(&p2[13], &h[13]);", "    fun(&p3[13], &j[13]);", "    fun(&p4[13], &k[13]);", "\n", "for ", "(int ", "l", " = 0; l < 13; l++)", "//", "输出\n{\n    cout << p1[g[l]]", ".huase", " << ", "\" \"", " << p1[l]", ".num", " << ", "\"\\t\"", "\n         << p2[l]", ".huase", " << ", "\" \"", " << p2[l]", ".num", " << ", "\"\\t\"", "\n         << p3[l]", ".huase", " << ", "\" \"", " << p3[l]", ".num", " << ", "\"\\t\"", "\n         << p4[l]", ".huase", " << ", "\" \"", " << p4[l]", ".num", " << endl;\n}\n", "\n", "运行结果及报错内容", "\n", "严重性    代码    说明    项目    文件    行    禁止显示状态", "错误(活动)    E2140    表达式必须具有整数或未区分范围的枚举类型", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果", "\n", "初学者，怎么样才能让g[l]的值（0～12）做为p1[13]的循序输出啊。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;有一些代码细节关注一下&amp;#xff0c;建议可以用beyond compare工具对比一下我的代码和你的代码&amp;#xff0c;思考这些代码细节。&lt;br /&gt;主要问题就是,&lt;br /&gt;第一&amp;#xff1a;注意用数组存储字符串时&amp;#xff0c;数组最好提前初始化为0&amp;#xff0c;或者在输入字符串的最后塞终结符&amp;#39;\\0&amp;#39;&lt;br /&gt;第二&amp;#xff1a;注意指针数组的用法&amp;#xff0c;通过指针取每个数组中的字符串的方法。 &amp;#xff08;取字符串本身就是取首地址&amp;#xff0c;然后一直找终结符&amp;#39;\\0&amp;#39;&amp;#xff0c;指针也是指向一个地址&amp;#xff09; 可以了解一下指针数组存储字符串的逻辑~&lt;/p&gt;\n&lt;p&gt;简单输入进行测试了一下&amp;#xff0c;中英都是ok的&amp;#xff0c;但是可能覆盖不全&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img align=\"left\" alt=\"img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/800793401646126.png\" class=\"md_img\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-keyword\"&gt;include&lt;/span&gt;&lt;span class=\"hljs-string\"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n    &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* e[] &amp;#61; { &lt;span class=\"hljs-string\"&gt;&amp;#34;auto&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;case&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;char&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;const&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;continue&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;default&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;do&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;double&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;else&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;enum&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;extern&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;float&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;for&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;goto&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;if&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;int&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;long&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;register&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;return&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;short&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;signed&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;sizeof&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;static&amp;#34;&lt;/span&gt;,\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;struct&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;switch&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;typedef&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;unsigned&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;union&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;void&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;volatile&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;while&amp;#34;&lt;/span&gt; };\n\n       &lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt;  &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* c[] &amp;#61; { &lt;span class=\"hljs-string\"&gt;&amp;#34;声明变量&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明自动变量&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;跳出当前循环&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;开关语句分支&amp;#34;&lt;/span&gt;,\n\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;声明字符型变量或函数返回值类型&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明只读变量&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;结束当前循环并开始下一轮循环&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;开关语句中的默认分支&amp;#34;&lt;/span&gt;,\n\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;循环语句的循环体&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明双精度浮点型变量或函数返回值类型&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;条件语句否定分支&amp;#34;&lt;/span&gt;,\n\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;声明枚举类型&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明变量或函数是在其他文件或本文件的其他位置定义&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明浮点型变量或函数返回值&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;一种循环语句&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;无条件跳转语句&amp;#34;&lt;/span&gt;,\n\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;条件语句&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明整型变量或函数&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明长整型变量或函数返回值&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明寄存器变量&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;子程序返回语句&amp;#xff08;可以带参数&amp;#xff0c;也可以不带参数&amp;#xff09;&amp;#34;&lt;/span&gt;,\n\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;声明短整型变量或函数返回值&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明有符号类型变量或函数&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;计算数据类型或变量长度&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明静态变量&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明结构体类型&amp;#34;&lt;/span&gt;,\n\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;用于开关语句&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;用以给数据类型取别名&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明无符号类型变量或函数&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明共用体类型&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;声明函数无返回值或无参数&amp;#xff0c;声明无类型指针&amp;#34;&lt;/span&gt;,\n\n        &lt;span class=\"hljs-string\"&gt;&amp;#34;说明变量在程序执行中可被隐含地改变&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;循环语句的循环条件&amp;#34;&lt;/span&gt; };&lt;span class=\"hljs-comment\"&gt;//一共31个关键字&lt;/span&gt;\n\n        &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; a, i, j;\n        &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; k[&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;] &amp;#61; {&lt;!-- --&gt;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;};\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;欢迎使用C语言关键字中英翻译机&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入a的值&amp;#xff08;输入0为中译英&amp;#xff0c;输入1为英译中&amp;#xff09;:&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-built_in\"&gt;scanf_s&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &amp;amp;a);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;; i&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入中文的C语言关键字:&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-built_in\"&gt;scanf_s&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, k,&lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;((&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;*)k, &lt;span class=\"hljs-string\"&gt;&amp;#34;bye&amp;#34;&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                {\n                    &lt;span class=\"hljs-built_in\"&gt;exit&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n                }\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; j&amp;#43;&amp;#43;)\n                {\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(k, c[j]) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                    {\n                        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s对应的英文是%s\\n&amp;#34;&lt;/span&gt;, c[j], e[j]);\n                        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n                    }\n                }\n            }\n        }\n\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (a &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;; i&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入英文的C语言关键字:&amp;#34;&lt;/span&gt;);\n                &lt;span class=\"hljs-built_in\"&gt;scanf_s&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, k, &lt;span class=\"hljs-number\"&gt;50&lt;/span&gt;);\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;((&lt;span class=\"hljs-keyword\"&gt;const&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;*)k, &lt;span class=\"hljs-string\"&gt;&amp;#34;bye&amp;#34;&lt;/span&gt;) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                {\n                    &lt;span class=\"hljs-built_in\"&gt;exit&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;);\n                }\n                    \n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (j &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;; j&amp;#43;&amp;#43;)\n                {\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;strcmp&lt;/span&gt;(k, e[j]) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                    {\n                        &lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s对应的中文是%s \\n&amp;#34;&lt;/span&gt;, e[j], c[j]);\n                        &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n                    }\n                }\n            }\n        }\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "枚举类型", "Question": ["C语言关键字中英翻译机程序不能实现我想要的功能，请问一下我的代码要怎么改？", ["问题遇到的现象和发生背景", "\n", "运行没有出现错误，但是运行出来无法实现该有的功能", "\n", "问题相关代码，请勿粘贴截图", "\n", "#include<stdio.h>", "#include<string.h>", "#include<stdlib.h>", "\n", "void main()", "{", "    char *e[]={\"auto\",\"case\",\"char\",\"const\",\"continue\",\"default\",", "    \"do\",\"double\",\"else\",\"enum\",\"extern\",\"float\",\"for\",\"goto\",\"if\",", "    \"int\",\"long\",\"register\",\"return\",\"short\",\"signed\",\"sizeof\",\"static\",", "    \"struct\",\"switch\",\"typedef\",\"unsigned\",\"union\",\"void\",\"volatile\",\"while\"};", "\n", "char *c[]={", "\"声明变量\"", ",", "\"声明自动变量\"", ",", "\"跳出当前循环\"", ",", "\"开关语句分支\"", ",\n\n", "\"声明字符型变量或函数返回值类型\"", ",", "\"声明只读变量\"", ",", "\"结束当前循环并开始下一轮循环\"", ",", "\"开关语句中的默认分支\"", ",\n\n", "\"循环语句的循环体\"", ",", "\"声明双精度浮点型变量或函数返回值类型\"", ",", "\"条件语句否定分支\"", ",\n\n", "\"声明枚举类型\"", ",", "\"声明变量或函数是在其他文件或本文件的其他位置定义\"", ",", "\"声明浮点型变量或函数返回值\"", ",", "\"一种循环语句\"", ",", "\"无条件跳转语句\"", ",\n\n", "\"条件语句\"", ",", "\"声明整型变量或函数\"", ",", "\"声明长整型变量或函数返回值\"", ",", "\"声明寄存器变量\"", ",", "\"子程序返回语句（可以带参数，也可以不带参数）\"", ",\n\n", "\"声明短整型变量或函数返回值\"", ",", "\"声明有符号类型变量或函数\"", ",", "\"计算数据类型或变量长度\"", ",", "\"声明静态变量\"", ",", "\"声明结构体类型\"", ",\n\n", "\"用于开关语句\"", ",", "\"用以给数据类型取别名\"", ",", "\"声明无符号类型变量或函数\"", ",", "\"声明共用体类型\"", ",", "\"声明函数无返回值或无参数，声明无类型指针\"", ",\n\n", "\"说明变量在程序执行中可被隐含地改变\"", ",", "\"循环语句的循环条件\"", "};", "//", "一共", "31", "个关键字\n\nint a,i,j;\nchar k[", "50", "];\nprintf(", "\"欢迎使用C语言关键字中英翻译机！\\n\"", ");\nprintf(", "\"请输入a的值（输入0为中译英，输入1为英译中）:\"", ");\nscanf(", "\"%d\"", ",a);\n", "if", "(a==", "0", ")\n{\n    ", "for", "(i=", "0", ";i<", "100", ";i++)\n    {\n        printf(", "\"请输入中文的C语言关键字:\"", ");\n        scanf(", "\"%s\"", ",k);\n        ", "if", "(strcmp(k,", "\"bye\"", ")==", "0", ")", "exit", "(", "0", ");\n        ", "for", "(j=", "0", ";j<", "10", ";j++)\n        {\n            ", "if", "(strcmp(k,*c[j])==", "0", ")\n            {\n                printf(", "\"%s对应的英文是%s\\n\"", ",*c[j],*e[j]);\n                ", "break", ";\n            }\n        }\n    }\n}\n\n", "if", "(a==", "1", ")\n{\n    ", "for", "(i=", "0", ";i<", "100", ";i++)\n    {\n        printf(", "\"请输入英文的C语言关键字:\"", ");\n        scanf(", "\"%s\"", ",k);\n        ", "if", "(strcmp(k,", "\"bye\"", ")==", "0", ")", "exit", "(", "0", ");\n        ", "for", "(j=", "0", ";j<", "10", ";j++)\n        {\n            ", "if", "(strcmp(k,*e[j])==", "0", ")\n            {\n                printf(", "\"%s对应的中文是%s\"", ",*e[j],*c[j]);\n                ", "break", ";\n            }\n        }\n    }\n}\n", "\n", "}", "\n", "运行结果及报错内容", "\n", "\n", "我的解答思路和尝试过的方法", "\n", "我想要达到的结果"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;盲猜是 C4996 报错&lt;br /&gt;如果是的话在最上面加上下面这条&lt;br /&gt;#pragma warning(disable:4996)&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["这段中序遍历线索二叉树的代码为什么在dev里能运行，vs不可以", ["#include <stdio.h>\n#include <stdlib.h>\n#define TElemType char", "//宏定义，结点中数据域的类型", "\n", "//枚举，Link为0，Thread为1", "\ntypedef enum {\n    Link,\n    Thread\n}PointerTag;\n", "//结点结构构造", "\ntypedef struct BiThrNode{\n    TElemType ", "data", ";", "//数据域", "\n    struct BiThrNode* lchild,*rchild;", "//左孩子，右孩子指针域", "\n    PointerTag Ltag,Rtag;", "//标志域，枚举类型", "\n}BiThrNode,*BiThrTree;\nBiThrTree pre=NULL;\n", "//采用前序初始化二叉树", "\n", "//中序和后序只需改变赋值语句的位置即可", "\nvoid CreateTree(BiThrTree * ", "tree", "){\n    char ", "data", ";\n    scanf(", "\"%c\"", ",&", "data", ");\n    ", "if", " (", "data", "!=", "'#'", "){\n        ", "if", " (!((*", "tree", ")=(BiThrNode*)malloc(sizeof(BiThrNode)))){\n            printf(", "\"申请结点空间失败\"", ");\n            return;\n        }", "else", "{\n            (*", "tree", ")->", "data", "=", "data", ";", "//采用前序遍历方式初始化二叉树", "\n            C", "reateTree", "(&((*", "tree", ")->", "lchild));", "//初始化左子树", "\n            C", "reateTree", "(&((*", "tree", ")->", "rchild));", "//初始化右子树", "\n        }\n    }", "else", "{\n        *", "tree", "=NULL;\n    }\n}\n", "//中序对二叉树进行线索化", "\nvoid InThreading(BiThrTree p){\n    ", "//如果当前结点存在", "\n    ", "if", " (p) {\n        I", "nThreading", "(p->", "lchild);", "//递归当前结点的左子树，进行线索化", "\n        ", "//如果当前结点没有左孩子，左标志位设为1，左指针域指向上一结点 pre", "\n        ", "if", " (!p->", "lchild) {\n            ", "p", "->", "Ltag=Thread;\n            ", "p", "->", "lchild=pre;\n        }\n        ", "//如果 pre 没有右孩子，右标志位设为 1，右指针域指向当前结点。", "\n        ", "if", " (pre&&!pre->", "rchild) {\n            ", "pre", "->", "Rtag=Thread;\n            ", "pre", "->", "rchild=p;\n        }\n        pre=p;", "//pre指向当前结点", "\n        I", "nThreading", "(p->", "rchild);", "//递归右子树进行线索化", "\n    }\n}\n", "//中序遍历线索二叉树", "\nvoid InOrderThraverse_Thr(BiThrTree p)\n{\n    ", "while", "(p)\n    {\n        ", "//一直找左孩子，最后一个为中序序列中排第一的", "\n        ", "while", "(p->", "Ltag == Link){\n            ", "p", " = p->", "lchild;\n        }\n        ", "printf", "(\"%c \", p->", "data", ");  ", "//操作结点数据", "\n        ", "//当结点右标志位为1时，直接找到其后继结点", "\n        ", "while", "(p->", "R", "tag", " == Thread && p->", "rchild !=NULL)\n        {\n            ", "p", " = p->", "rchild;\n            ", "printf", "(\"%c \", p->", "data", ");\n        }\n        ", "//否则，按照中序遍历的规律，找其右子树中最左下的结点，也就是继续循环遍历", "\n        ", "p", " = p->", "rchild;\n    }\n}\nint main() {\n    BiThrTree t;\n    printf(", "\"输入前序二叉树:\\n\"", ");\n    CreateTree(&t);\n    InThreading(t);\n    printf(", "\"输出中序序列:\\n\"", ");\n    InOrderThraverse_Thr(t);\n    return ", "0", ";\n}\n\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;c语言中没有bool类型&amp;#xff0c;用int类型代替&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["C语言bool型定义报错，怎么解决？", ["枚举类型报错，编译器是DEVC++。文件保存是.cpp。后面是所有代码，写的顺序表操作。", "\n", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<stdlib.h>", "\n\n", "#", "define", " MAXSIZE 5", "\n", "#", "define", " ERROR -1", "\n", "typedef", " ", "enum", " {", "false", ", ", "true", "} ", "bool", ";\n", "typedef", " ", "int", " ElementType;\n", "typedef", " ", "int", " Position;\n", "typedef", " ", "struct", " ", "LNode", " *List;\n", "struct", " ", "LNode", " {\n    ElementType Data[MAXSIZE];\n    Position Last; ", "/* 保存线性表中最后一个元素的位置 */", "\n};\n\n", "List ", "MakeEmpty", "()", "; \n", "Position ", "Find", "( List L, ElementType X )", ";\n", "bool", " ", "Insert", "( List L, ElementType X, Position P )", ";\n", "bool", " ", "Delete", "( List L, Position P )", ";\n\n\n", "int", " ", "main", "()", "\n", "{\n    List L;\n    ElementType X;\n    Position P;\n    ", "int", " N;\n\n    L = ", "MakeEmpty", "();\n    ", "scanf", "(", "\"%d\"", ", &N);\n    ", "while", " ( N-- ) {\n        ", "scanf", "(", "\"%d\"", ", &X);\n        ", "if", " ( ", "Insert", "(L, X, ", "0", ")==", "false", " )\n            ", "printf", "(", "\" Insertion Error: %d is not in.\\n\"", ", X);\n    }\n    ", "scanf", "(", "\"%d\"", ", &N);\n    ", "while", " ( N-- ) {\n        ", "scanf", "(", "\"%d\"", ", &X);\n        P = ", "Find", "(L, X);\n        ", "if", " ( P == ERROR )\n            ", "printf", "(", "\"Finding Error: %d is not in.\\n\"", ", X);\n        ", "else", "\n            ", "printf", "(", "\"%d is at position %d.\\n\"", ", X, P);\n    }\n    ", "scanf", "(", "\"%d\"", ", &N);\n    ", "while", " ( N-- ) {\n        ", "scanf", "(", "\"%d\"", ", &P);\n        ", "if", " ( ", "Delete", "(L, P)==", "false", " )\n            ", "printf", "(", "\" Deletion Error.\\n\"", ");\n        ", "if", " ( ", "Insert", "(L, ", "0", ", P)==", "false", " )\n            ", "printf", "(", "\" Insertion Error: 0 is not in.\\n\"", ");\n    }\n    ", "return", " ", "0", ";\n}\n\n", "/* 你的代码将被嵌在这里 */", "\n", "List ", "MakeEmpty", "()", "\n", "{ ", "//L->Last是int 不能用NULL ", "\n    List L=(List)", "malloc", "(", "sizeof", "(", "struct", " LNode)) ;\n    L->Last=", "0", ";\n}\n", "Position ", "Find", "( List L, ElementType X )", "{\n    \n        ", "for", "(", "int", " i=", "0", ";i<=L->Last;i++){\n        ", "if", "(L->Data[i]==tmp)\n             ", "return", " i;\n    }\n    ", "return", " ERROR;\n    \n    }\n", "bool", " ", "Insert", "( List L, ElementType X, Position P )", "{\n    ", "//插入就是数组后移 结点没有指针 ", "\n    ", "if", "(L->Last==MAXSIZE){\n        ", "return", " FULL;\n    }\n    ", "else", " ", "if", "(P<", "0", "||P>L->Last){\n        ", "printf", "(", "\"ILLEGAL POSITION\\n\"", ");\n        ", "return", " ", "false", ";\n    }    \n    ", "else", " ", "if", "{\n            ", "for", "(", "int", " j=L->Last;j>=P;j--)\n                   L->Data[j+", "1", "]=L->Data[j];    \n     \n     L->Data[P]=X;\n     ", "//最后一个元素位置＋1  ", "\n     L->Last++; \n     ", "return", " ", "true", ";\n    }      \n}\n", "bool", " ", "Delete", "( List L, Position P )", "{\n    ", "//删除元素 数组后移", "\n    ", "if", "(P<", "0", "||P>L->Last){\n        ", "printf", "(", "\"ILLEGAL POSITION\\n\"", ");\n        ", "return", " ", "false", ";\n    }", "else", "{\n        ", "for", "(", "int", " k=p;k<=L->Last;k++)\n          L->Data[P]=L->Data[P+", "1", "];\n    --L->Last;    \n    ", "return", " ", "true", ";\n    } \n}\n\n\n"]], "Tag": "程序设计"}
{"Answer": "调查出来，原来是配置文件的问题", "Konwledge_Point": "枚举类型", "Question": ["急急急！seasar的JdbcManager的问题，请大神帮忙啊！", ["小弟新做了一个保守的项目，用到了seasar框架，可谓是时间紧，任务重。怎奈刚接触，有许多地方还没弄明白，遂上来请教各位前辈，大神!!还望不吝赐教，小弟感激涕零！", "\n\n", "闲话少絮，先把代码贴出来。", "\n\n", "public enum TestEnumType {", "\n    ENUM_TOYOTA(\"01\", \"豊田\"),", "\n    ENUM_HONDA(\"02\", \"本田\");", "\n\n", "TestEnumType(final String code, final String label) {", "\n        this.code = code;", "\n        this.label = label;", "\n    }", "\n\n", "@PersistentValue\npublic String getCode() {\n    return code;\n}\n\npublic String getLabel() {\n    return label;\n}\n", "\n\n", "}", "\n\n", "@Entity", "\n@Table(name = \"test_table\")", "\npublic final class TestTableEntity {", "\n    @Id", "\n    @Column(name = \"test_type\")", "\n    private TestEnumType testEnumType;", "\n\n", "@Id\n@Column(name = \"using_flg\")\nprivate Boolean usingFlag;\n\n@Lob\n@Column(name = \"test_content\")\nprivate String testContent;\n\nget {...}\nset {...}\n", "\n\n", "}", "\n\n", "public class TestDaoImpl implements TestDao {", "\n\n", "@Resource(name = ConnectionTargetType.MASTER)\nprivate JdbcManager jdbcManager;\n\n@Override\npublic List<TestTableEntity> findById(@Nonnull final List<TestEnumType> testEnumType, \n        @Nullable final Boolean usingFlag) throws PersistenceRuntimeException {\n\n    return jdbcManager.from(TestTableEntity.class).where(\n            new SimpleWhere()\n            .in(\"testEnumType\", testEnumType)\n            .eq(\"usingFlag\", usingFlag))\n            .getResultList();\n}\n", "\n\n", "}", "\n\n", "现调用Dao的findById方法，参数是TestEnumType.ENUM_HONDA，false ", "\nList list = testDao.findById(TestEnumType.ENUM_HONDA，false);", "\nLog如下：", "\nselect T1_.test_type as C1_, T1_.using_flg as C2_, T1_.test_content as C3_ from test_table T1_ where (T1_.test_type in ([color=#FF0000]1[/color]) and T1_.using_flg = 0)", "\n\n", "问题来了！！", "\nT1_.test_type in (1) 这个地方，取的是TestEnumType.ENUM_HONDA 的序列，不是我想要的，", "\n我想要的是 TestEnumType.ENUM_HONDA 的Code,也就是 T1_.test_type in ('02')", "\n\n", "QA：", "\n1.是什麽原因使得枚举类型的序列而不是code作为了检索条件？", "\n2.这个应该怎么解决。", "\n\n", "以上！", "\nPS：欢迎大家围观，感谢您提出您的看法～～"]], "Tag": "程序设计"}
{"Answer": "1.首先你的类不是枚举类，枚举类的申明关键字是enum，而不是class\r\n2.你的类构造方法是私有的，那么就只有在该类上申明实例，或者在该类的内部类中申明实例，外部和外部反射实例化是不同的。\r\n3.new关键字就是把类实例化，在堆内存中为类实例分配空间，然后就是SUN持有该空间的引用地址。\r\n4.类实例化的时候其初始空间大小需要计算的，每个变量之间拥有位偏移量，而基本类型可以准确计算出需要的内存空间。", "Konwledge_Point": "枚举类型", "Question": ["java中的枚举问题中的变量", ["新人初学java，在学到枚举的时候遇到了问题，求教各位", "\n枚举中有这样一段定义", "\n\n", "public class WeekDay(){", "\n        private WeekDay(){}", "\n        public final static WeekDay SUN = new WeekDay()", "\n        ......", "\n}", "\n后面就是这样得一些定义星期的代码", "\n不明白的地方：", "\n1.这里是枚举的问题：为什么创建对象可以在这个类的内部，一般来说，不是一般只有在另一个类里创建这个类的对象算是正确吗？", "\n2. 这里有个new关键字，我的理解是new一般会和类搭配使用，用来分配一个空间来存放这个对象，这样对，吗？", "\n3.我是不是可以把java中的类理解一个数据类型，相当于自己定义的，然后WeekDay SUN 相当于int a这个语句，可以这样理解吗？", "\n在下先谢谢各位了"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;如果业务处理返回只是固定的数据&amp;#xff0c;用枚举没问题。在大多数都接口状态用枚举就是这样的处理。&lt;br /&gt;但是实际处理上&amp;#xff0c;返回的对象是不固定的&amp;#xff0c;如查询&amp;#xff0c;不可能把所有查询结果组合都变成枚举。&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["为什么不适用枚举作为数据的返回类型呢？", ["枚举作为最好用的单例模式为什么不适用枚举作为数据的返回类型，明明枚举能实现的都可以实现啊，搞不懂问问各位"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;报错的代码呢&lt;br /&gt;你把using放到函数里面了吗&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["C#中顶级语句必须位于命名空间和类型声明之前", ["C#中顶级语句必须位于命名空间和类型声明之前如何解决？请问一下。"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;There's no way beyond either using &lt;code&gt;iota&lt;/code&gt; and automatic enums, or doing the most straightforward thing:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const(\n     Stage1 FeeStage = 1\n     Stage2 FeeStage = 2\n\n     // or another syntax with same results\n     Stage3 = FeeStage(2)\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which IMHO is less cumbersome than doing stuff like &lt;code&gt;iota + 5&lt;/code&gt; which as you said is really bad.&lt;/p&gt;\n\n&lt;p&gt;I usually either use iota if the value is not important beyond the context of the program, or explicit typing if I need the values to be used in a protocol or something. &lt;/p&gt;\n\n&lt;p&gt;Though I have to say sometimes just using ints or strings is good enough, it depends on the context. See for example the &lt;a href=\"https://golang.org/src/net/http/status.go\" rel=\"nofollow\"&gt;http status codes in the standard library&lt;/a&gt;. They don't have a special type. &lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["在GO中自定义类型的ENUM", ["\n\n", "I am trying to generate an enum for a type I defined", "\n\n", "type FeeStage int\n", "\n\n", "From ", "this", " I learned that I can use iota to create an enum based on this type", "\n\n", "const(\n     Stage1 FeeStage = iota\n     Stage2 \n     Stage3\n)\n", "\n\n", "However, manipulating the actual values of the enum is rather cumbersome and error prone", "\n\n", "const(\n     Stage1 FeeStage = iota           // 0\n     Stage2          = iota + 6       // 7\n     Stage3          = (iota - 3) * 5 // -5\n)\n", "\n\n", "Is there a way to automatically convert a list of ENUMs with custom values to a certain type. This is what I was using before but only converts the first member of the constant to the custom type.", "\n\n", "const(\n     Stage1 FeeStage = 1\n     Stage2          = 2\n     Stage3          = 2\n)\n", "\n\n", "Here", " is a playground with a similar result", "\n    "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;dll里面是无符号的长整形&amp;#xff0c;就算数据不对&amp;#xff0c;也不会是参数不合法吧&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["java使用jna调用C++的dll文件 .参数类型问题", ["头文件", "\n", "H264_DVR_API long  CALL_METHOD ", "H264_DVR_GetDevConfig(", "long", " ", "lLoginID", ", ", "unsigned", " ", "long", " ", "dwCommand", ", ", "int", " ", "nChannelNO", ", ", "char", " ", "*", " ", "lpOutBuffer", ", ", "unsigned", " ", "long", " ", "dwOutBufferSize", ", ", "unsigned", " ", "long", "*", " ", "lpBytesReturned", ",", "int", " ", "waittime", " DEF_PARAM(1000)", ");\n\n\n", "\n", "C++文档:", "\n", "H264_DVR_API ", "long", " CALL_METHOD ", "H264_DVR_GetDevConfig", "(\n", "long", " lLoginID,\n", "unsigned", " ", "long", " dwCommand, \n", "int", " nChannelNO, \n", "char", " * lpOutBuffer,\n", "unsigned", " ", "long", " dwOutBufferSize, \n", "unsigned", " ", "long", "* lpBytesReturned,\n", "int", " waittime DEF_PARAM(", "1000", ")\n)", ";\n\n", "\n", "参数;[in]lLoginID 登录句柄", "[in]dwCommand 配置类型具体定义见数据结构定义中的SDK_CONFIG_TYPE", "[in]nChannelNO 配置通道号，-1表示所有通道", "[out]lpOutBuffer 存放输出参数的缓冲区, 根据不同的类型, 输出不同的配置结构, 具体见数据结构定义中各配置结构", "[in]dwOutBufferSize 输入缓冲区的大小, (单位字节).", "[out]lpBytesReturned 实际返回的缓冲区大小,对应配置结构的大小(单位字节)", "[in]waittime 等待时间", "\n", "java中代码", "//获取设备配置    ", "\n", "NativeLong ", "H264_DVR_GetDevConfig(NativeLong ", "lLoginID", ",", "long", " ", "dwCommand", ",", "int", " ", "nChannelNO", ",Pointer ", "lpOutBuffer", ",", "long", " ", "dwOutBufferSize", ",", "long", " ", "lpBytesReturned", ",", "int", " ", "waittime", ")", ";\n\n", "\n", "调用这个函数一直返回:  -10002   用户参数不合法", "其中第二个参数在C++中是   typedef enum _SDK_CONFIG_TYPE,所以我传的参数是枚举类下标, 请问下是不是传错了 .或者别的参数类型哪里有问题,试过好几种,结果全都是参数不合法,实在是搞不定了."]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;调用方法的时候给对应的枚举就好了&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-typescript\"&gt;send(url: string, &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;method&lt;/span&gt;:&lt;/span&gt; queryMethod, data?: object, headers?: &lt;span class=\"hljs-keyword\"&gt;Record&lt;/span&gt;&amp;lt;string, string&amp;gt; | undefined): void &lt;span class=\"hljs-comment\"&gt;{\n}&lt;/span&gt;\n\n&lt;span class=\"hljs-comment\"&gt;// 调用方法的时候给对应的枚举就好了&lt;/span&gt;\nthis.send(null, queryMethod.GET);\n\n&lt;span class=\"hljs-keyword\"&gt;enum&lt;/span&gt; queryMethod &lt;span class=\"hljs-comment\"&gt;{\n  GET &amp;#61; &amp;#34;GET&amp;#34;,\n  POST &amp;#61; &amp;#34;POST&amp;#34;\n}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "枚举类型", "Question": ["我 TS 里 有一个函数的参数使用了枚举做变量类型 报错", ["问题遇到的现象和发生背景", "\n", "我 TS 里 有一个函数的参数使用了枚举做变量类型", "\n", "问题相关代码，请勿粘贴截图", "\n", "enum queryMethod {", "    GET = \"GET\",", "    POST = \"POST\"", "}", "function send(url: string, method: queryMethod, data?: object, headers?: Record<string, string> | undefined){}", "\n", "运行结果及报错内容", "\n", "'queryMethod' refers to a value, but is being used as a type here. Did you mean 'typeof queryMethod'?", "\n", "我的解答思路和尝试过的方法", "\n", "改文件后缀为tsx", "\n", "我想要达到的结果", "\n", "没有报错"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;一是可读性好&amp;#xff0c;数字1你不知道代表什么意思&amp;#xff0c;但如果对应枚举值为 STOP&amp;#xff0c;你就知道1表示停止&lt;br /&gt;二是容易辨别&amp;#xff0c;程序里为1的数字很多&amp;#xff0c;你不知道每个1的作用是否相同&amp;#xff0c;定义为枚举后&amp;#xff0c;就很容易判断了&lt;br /&gt;三是方便改&amp;#xff0c;比如后期停止需要改为用0表示&amp;#xff0c;你只需要修改枚举STOP对应的整数值就可以了&amp;#xff0c;别的都不用改&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["C语言中将整数转化为枚举有什么用处", ["练习C语言的语法时，了解了枚举，对其中整数类型转为枚举不理解它的应用性。"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;错误图呢&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["无法将类中构造器应用到给定类型，请问是什么原因", ["报错", "需要:String", "找到:没有参数", "原因:实际参数列表和形式参数列表长度不同"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-java\"&gt;&lt;span class=\"hljs-comment\"&gt;// 商品&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Goods&lt;/span&gt; {\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; name;\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; GoodsTypeEnum goodsTypeEnum;\n}\n&lt;span class=\"hljs-comment\"&gt;// 类型枚举&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;enum&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;GoodsTypeEnum&lt;/span&gt; {\n    &lt;span class=\"hljs-built_in\"&gt;daily&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;日用&amp;#34;&lt;/span&gt;),\n    &lt;span class=\"hljs-built_in\"&gt;food&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;食物&amp;#34;&lt;/span&gt;);\n\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; code;\n    &lt;span class=\"hljs-keyword\"&gt;private&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; name;\n\n    &lt;span class=\"hljs-built_in\"&gt;GoodsTypeEnum&lt;/span&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; code, &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; name) {\n        &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;.code &amp;#61; code;\n        &lt;span class=\"hljs-keyword\"&gt;this&lt;/span&gt;.name &amp;#61; name;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "枚举类型", "Question": ["如何在普通的构造中加入枚举变量呢？", ["假设我想建一个构造有关超市商品，一个普通变量商品名字，一个枚举变量商品类型（日用，食物）这种要怎么写呢？没有接触过枚举，大多关于枚举的没有混合变量，求解答！"]], "Tag": "程序设计"}
{"Answer": "&lt;div class=\"post-text\" itemprop=\"text\"&gt;\r\n&lt;p&gt;Use the &lt;a href=\"http://golang.org/pkg/strconv/#Itoa\" rel=\"noreferrer\"&gt;&lt;code&gt;strconv&lt;/code&gt;&lt;/a&gt; package's &lt;code&gt;Itoa&lt;/code&gt; function.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    \"strconv\"\n    \"fmt\"\n)\n\nfunc main() {\n    t := strconv.Itoa(123)\n    fmt.Println(t)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can concat strings simply by &lt;code&gt;+&lt;/code&gt;'ing them, or by using the &lt;code&gt;Join&lt;/code&gt; function of the &lt;a href=\"http://golang.org/pkg/strings/#Join\" rel=\"noreferrer\"&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;\n    &lt;/div&gt;", "Konwledge_Point": "枚举类型", "Question": ["在 Go 中如何将一个 int 值转换为字符串？", ["\n\n", "i := 123\ns := string(i) \n", "\n\n", "s is 'E', but what I want is \"123\"", "\n\n", "Please tell me how can I get \"123\".", "\n\n", "And in Java, I can do in this way: ", "\n\n", "String s = \"ab\" + \"c\"  // s is \"abc\"\n", "\n\n", "how can I ", "concat", " two strings in Go?", "\n    ", "\n\n", "转载于:https://stackoverflow.com/questions/10105935/how-to-convert-an-int-value-to-string-in-go"]], "Tag": "程序设计"}
{"Answer": "这个想法很有意思..但我想还有另一种简单的方式可以实现它..\r\n\r\npublic List findBySth(String model, String sth, int parameter) {\r\n\treturn findBySth(model, sth, parameter, null);\r\n}\r\n\r\npublic List findBySth(String model, String sth, String parameter) {\r\n\treturn findBySth(model, sth, null, parameter);\r\n}\r\n\r\nprivate List findBySth(String model, String sth, Integer intParam, String strParam) {\r\n\t// do something;\r\n}", "Konwledge_Point": "枚举类型", "Question": ["怎么限制一个方法中传入的某个参数只能是int或者是String类型,我考虑的是枚举但是不知道这个枚举怎么写", ["我有一个方法如下:", "\n[code=\"java\"]public List findBySth(String model,String sth, IntOrStr parameter){", "\n    //do something;", "\n}[/code]", "\n这个方法里我要限制parameter参数要么是int要么是String,所以我声明了一个枚举IntOrStr,", "\n[code=\"java\"]public enum IntOrStr {", "\n}[/code]", "\n当这个parameter参数被声明为IntOrStr是,IntOrStr返回int或者String Type,", "\n但是这个枚举IntOrStr应该怎么写,希望有人能帮我下,先感谢大家了 "]], "Tag": "程序设计"}
{"Answer": "unsigned char对应byte类型，unsigned char*如果是返回字符数组那么对应byte[]。\r\n返回的数据，一般前面加个ref表示返回(int nChannel, ref int pnWidth, ref int pnHeight, ref int pnBitCount);这组参数后面两个就是返回的数据。\r\nchar*如果是字符串的话对应string类型，如果是读取加上ref。\r\n你可以试一下，有问题继续留言，这块我做过，可以协助解决。", "Konwledge_Point": "枚举类型", "Question": ["C#调用C++接口时参数传递", ["C#调用C++接口时参数传递问题，比如 c++接口：", "\n\n", "1：", "\n\n", "long __stdcall SD_GetInputPass(long ReaderHandle, unsigned char ctime, unsigned char* rlen, unsigned char* cpass) \n", "\n\n", "2：", "\n\n", "  long __stdcall SD_VerifyPin(long ReaderHandle, unsigned char *PIN, short *Sw1Sw2) \n", "\n\n", "3：", "\n\n", "int BankTrans(char*  InputData, char* OutPutData) \n", "\n\n", "等等类型，在C#中调用时应该如何传递参数？最好能整体说一下原理，拜谢各位大佬。我补充下我调用第一个接口的错误代码，这个代码调用没问题，硬件设备已经执行，只是返回结果时报错，", "\n\n", " [DllImport(@\"C:\\LD_APOSA8\\MisPos.dll\")]\npublic static extern long SD_GetInputPass(long ReaderHandle, string ctime,  byte[]  rlen, byte[] cpass);\n\nlong ReaderHandle = long.Parse(\"03\");\nstring ctime = \"01\";\nbyte[] rlen = new byte[10];\nbyte[] cpass = new byte[20];\nSD_GetInputPass(ReaderHandle, ctime, rlen, cpass);\n", "\n\n", "再补充一下，以下两种对照方式我都试过了：", "\n\n", " //c++:unsigned char *   <==>    c#:ref byte\n //c++:unsigned char *   <==>    c#:[MarshalAs(UnmanagedType.LPArray)] byte[]\n"]], "Tag": "程序设计"}
{"Answer": "可以赋值\r\n例如：\r\npublic enum Temp {\r\ndemojava1(-459), demojava2(32),demojava3(212), demojava4(451);\r\nprivate final int value;\r\n        public int getValue() {\r\n            return value;\r\n        }\r\n        //构造器默认也只能是private, 从而保证构造函数只能在内部使用\r\n        Temp(int value) {\r\n            this.value = value;\r\n        }\r\n}\r\n有一点需要知道的是：\r\n/*通过括号赋值,而且必须有带参构造器和一属性跟方法，否则编译出错\r\n         * 赋值必须是都赋值或都不赋值，不能一部分赋值一部分不赋值\r\n         * 如果不赋值则不能写构造器，赋值编译也出错*/", "Konwledge_Point": "枚举类型", "Question": ["在java中如何使用enum类型？", ["想知道的是能不能像C语言里面一样给枚举的成员赋值？", "\n\n", "例如：", "\n\n", "public  enum  Name", "\n{", "\n    NAME1 = 1,", "\n    NAME2 = 2", "\n}", "\n\n", "thanks in advance!"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;main方法中调用run (int gasoline)方法&amp;#xff0c;需要传递一个int类型的参数值才行。&lt;br /&gt;&lt;strong&gt;代码修改如下&amp;#xff1a;&lt;/strong&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title class_\"&gt;Car2&lt;/span&gt; {\n    &lt;span class=\"hljs-comment\"&gt;//参数&lt;/span&gt;\n    &lt;span class=\"hljs-comment\"&gt;/*类名首字母大写  驼峰原则*/&lt;/span&gt;\n   &lt;span class=\"hljs-comment\"&gt;//汽车品牌&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; type;\n    &lt;span class=\"hljs-comment\"&gt;//汽车长度&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;long&lt;/span&gt; height;\n    &lt;span class=\"hljs-comment\"&gt;//汽车颜色&lt;/span&gt;\n    &lt;span class=\"hljs-type\"&gt;String&lt;/span&gt; color;\n  &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt;  &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;run&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;int&lt;/span&gt; gasoline)&lt;/span&gt;&lt;/span&gt;{\n        System.out.&lt;span class=\"hljs-built_in\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;您加了%d号汽油&amp;#34;&lt;/span&gt;,gasoline);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(gasoline&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;92&lt;/span&gt;){\n            System.out.&lt;span class=\"hljs-built_in\"&gt;println&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;92号汽油跑得很快&amp;#34;&lt;/span&gt;);\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(gasoline&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;95&lt;/span&gt;){\n            System.out.&lt;span class=\"hljs-built_in\"&gt;println&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;95号汽油跑的更猛&amp;#34;&lt;/span&gt;);\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;{\n            System.out.&lt;span class=\"hljs-built_in\"&gt;println&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;您加了是柴油吧&amp;#xff01;&amp;#34;&lt;/span&gt;);\n        }\n    }\n   &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; &lt;span class=\"hljs-type\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;main&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-type\"&gt;String&lt;/span&gt;[] args)&lt;/span&gt; &lt;/span&gt;{\n        Car2 car&amp;#61;&lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;Car2&lt;/span&gt;();\n        car.&lt;span class=\"hljs-built_in\"&gt;run&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;92&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "枚举类型", "Question": ["程序报错  实际参数列表和形式参数列表长度不同", ["public", " ", "class", " ", "Car2", " {\n    ", "//参数", "\n    ", "/*类名首字母大写  驼峰原则*/", "\n   ", "//汽车品牌", "\n    ", "String", " type;\n    ", "//汽车长度", "\n    ", "long", " height;\n    ", "//汽车颜色", "\n    ", "String", " color;\n \n  ", "public", "  ", "void", " ", "run", " ", "(", "int", " gasoline)", "{\n        System.out.", "printf", "(", "\"您加了%d号汽油\"", ",gasoline);\n        ", "if", "(gasoline==", "92", "){\n            System.out.", "println", "(", "\"92号汽油跑得很快\"", ");\n        }", "else", " ", "if", "(gasoline==", "95", "){\n            System.out.", "println", "(", "\"95号汽油跑的更猛\"", ");\n        }", "else", "{\n            System.out.", "println", "(", "\"您加了是柴油吧！\"", ");\n        }\n    }\n\n   ", "public", " ", "static", " ", "void", " ", "main", "(", "String", "[] args)", " ", "{\n        Car2 car=", "new", " ", "Car2", "();\n        car.", "run", "();\n    }\n}\n\n", "\n", "结果出现：", "java: 无法将类 Car2中的构造器 Car2应用到给定类型;", "  需要: java.lang.String,java.lang.String,long", "  找到: 没有参数", "  原因: 实际参数列表和形式参数列表长度不同"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可能是怕你们看不懂吧&amp;#xff0c;毕竟如果用了枚举&amp;#xff0c;代码的直观性难免受到影响&amp;#xff0c;不方便观看&amp;#xff0c;而且并不是所有都适合做枚举&amp;#xff0c;要给那句具体情况说&amp;#xff0c;比如如果只是字符串&amp;#xff0c;定义一个静态常量就可以了。&lt;br /&gt;而且有的不是特别常用的数据&amp;#xff0c;定义枚举类没什么意义&amp;#xff0c;枚举类还是安全的&amp;#xff0c;在不修改代码的情况下扩展并不是那么方便。&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["今天学习的问题，希望帮我解答一下🙏", ["在看网课时学习到了网络编程这一章，在跟着teacher做小项目时发现了他在定义一些固定的类型时明明可以用枚举确没用，弹幕也发出了疑问，不是很懂"]], "Tag": "程序设计"}
{"Answer": "&lt;pre&gt;&lt;code class=\"language-c#\"&gt;        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; T &lt;span class=\"hljs-title\"&gt;EnumValueOf&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-title\"&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=\"hljs-params\"&gt;&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; index&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; (T)Enum.Parse(&lt;span class=\"hljs-keyword\"&gt;typeof&lt;/span&gt;(T), Enum.GetNames(&lt;span class=\"hljs-keyword\"&gt;typeof&lt;/span&gt;(T)).GetValue(index).ToString());\n        }\n\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;static&lt;/span&gt; Hashtable &lt;span class=\"hljs-title\"&gt;EnumToHashtable&lt;/span&gt;&amp;lt;&lt;span class=\"hljs-title\"&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=\"hljs-params\"&gt;&lt;/span&gt;)&lt;/span&gt;\n        {\n            Hashtable ht &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; Hashtable();\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; i &amp;lt; EnumLength&amp;lt;T&amp;gt;(); i&amp;#43;&amp;#43;)\n            {\n                T v &amp;#61; EnumValueOf&amp;lt;T&amp;gt;(i);\n                ht[Enum.GetName(&lt;span class=\"hljs-keyword\"&gt;typeof&lt;/span&gt;(T), v)] &amp;#61; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt;)Enum.GetValues(&lt;span class=\"hljs-keyword\"&gt;typeof&lt;/span&gt;(T)).GetValue(i);\n            }\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ht;\n        }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;我这里有个枚举泛型转 hashtable的&amp;#xff0c;你可以自己转成list&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["string转Enum名称进行访问", ["事情是这样的，我个人需要将枚举转成list集合，所以写了一个方法去转换但是我想动态去接收枚举", "\n", "\n  ", "#", "region", "  枚举List类型", "\n        ", "public", " ", "static", " System.Collections.Generic.", "List", "<", "object", "> ", "GetEnumList", "<", "T", ">(", ")", "\n        {\n            System.Collections.Generic.List<", "object", "> list = ", "new", " System.Collections.Generic.List<", "object", ">();\n            ", "foreach", " (", "var", " item ", "in", " RecipeEnum.GetValues(", "typeof", "(T)))\n            {\n                list.Add(", "new", " { id = item, text = RecipeEnum.GetName(", "typeof", "(T), item) });\n            }\n            ", "return", " list;\n        }\n        ", "#", "endregion", "\n", "\n", "想实现string动态去转换枚举名，然后通过string转换的枚举名去访问枚举", "\n", " string strValue ", "=", " Enume.ToString()", ";", "\n return  Common.GetEnumList<strValue>()", ";", "\n", "\n", "以下的的方法挺繁琐的，希望能在这寻找到帮助，非常感谢！", "\n", "if", " (", "!", "string.", "IsNullOrEmpty", "(enCode))\n            {\n                ", "switch", " (enCode)\n                {\n                    ", "case", " ", "\"DounloadFormat\"", ":\n                        ", "return", " ", "Content", "(", "Common", ".", "GetEnumList", "<", "DounloadFormat", ">().", "ToJson", "());\n                    ", "case", " ", "\"ConnectionType\"", ":\n                        ", "return", " ", "Content", "(", "Common", ".", "GetEnumList", "<", "ConnectionType", ">().", "ToJson", "());\n                    ", "case", " ", "\"RecipeType\"", ":\n                        ", "return", " ", "Content", "(", "Common", ".", "GetEnumList", "<", "RecipeEnum", ">().", "ToJson", "());\n                }\n            }\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;增删改查&lt;br /&gt;public class Genggai implements ActionListener{&lt;!-- --&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    Connection con;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    Statement stmt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    String sql;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    ResultSet rs;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"display:inline-block;text-indent:2em;\"&gt;    StringBuffer sb &amp;#61; new StringBuffer();&lt;/span&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;JTextField jtf2 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JTextField(&lt;span class=\"hljs-string\"&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;,10)&lt;/span&gt;;\n\nJTextField jtf3 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JTextField(10)&lt;/span&gt;;\n\nJTextField jtf4 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JTextField(10)&lt;/span&gt;;\n\nJTextField jtf7 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JTextField(10)&lt;/span&gt;;\n\nJTextField jtf5 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JTextField(10)&lt;/span&gt;;\n\nJTextField jtf6 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JTextField(10)&lt;/span&gt;;\n\nJTextField jtf8 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JTextField(10)&lt;/span&gt;;\n\nJTextField jtf9 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JTextField(10)&lt;/span&gt;;\n\nJTextArea jta10 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JTextArea(50, 40)&lt;/span&gt;;\n\npublic void action&lt;span class=\"hljs-constructor\"&gt;Performed(ActionEvent &lt;span class=\"hljs-params\"&gt;e&lt;/span&gt;)&lt;/span&gt; {\nString str &amp;#61; e.get&lt;span class=\"hljs-constructor\"&gt;ActionCommand()&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;查询&amp;#34;&lt;/span&gt;.equals(str)) {\nsearch&lt;span class=\"hljs-constructor\"&gt;Emp()&lt;/span&gt;;\n} &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;增加&amp;#34;&lt;/span&gt;.equals(str)) {\nadd&lt;span class=\"hljs-constructor\"&gt;Emp()&lt;/span&gt;;\n} &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;修改&amp;#34;&lt;/span&gt;.equals(str)) {\nalter&lt;span class=\"hljs-constructor\"&gt;Emp()&lt;/span&gt;;\n} &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (&lt;span class=\"hljs-string\"&gt;&amp;#34;撤除&amp;#34;&lt;/span&gt;.equals(str)) {\ndelete&lt;span class=\"hljs-constructor\"&gt;Emp()&lt;/span&gt;;\n}\n}\n\n&lt;span class=\"hljs-constructor\"&gt;Genggai()&lt;/span&gt; {\ncreate&lt;span class=\"hljs-constructor\"&gt;GUI()&lt;/span&gt;;\nconnect&lt;span class=\"hljs-constructor\"&gt;ToDataBase()&lt;/span&gt;;\nalter&lt;span class=\"hljs-constructor\"&gt;Emp()&lt;/span&gt;;\n}\n\npublic Connection connect&lt;span class=\"hljs-constructor\"&gt;ToDataBase()&lt;/span&gt; {\n&lt;span class=\"hljs-module-access\"&gt;&lt;span class=\"hljs-module\"&gt;&lt;span class=\"hljs-identifier\"&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(con);\nreturn con;\n}\n\n\npublic void search&lt;span class=\"hljs-constructor\"&gt;Emp()&lt;/span&gt; {\njta10.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-string\"&gt;&amp;#34;&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt; {\nstmt &amp;#61; con.create&lt;span class=\"hljs-constructor\"&gt;Statement()&lt;/span&gt;;\nsql &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;select * from Mstar where chineseName&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf2.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or id&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf3.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or engName&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf4.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or UNIT&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf5.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or TEAM&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf6.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or Phone&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf7.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or region&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf8.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or busStation&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf9.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\nstmt.execute&lt;span class=\"hljs-constructor\"&gt;Query(&lt;span class=\"hljs-params\"&gt;sql&lt;/span&gt;)&lt;/span&gt;;\nrs &amp;#61; stmt.get&lt;span class=\"hljs-constructor\"&gt;ResultSet()&lt;/span&gt;;\nResultSetMetaData meta &amp;#61; rs.get&lt;span class=\"hljs-constructor\"&gt;MetaData()&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; cols &amp;#61; meta.get&lt;span class=\"hljs-constructor\"&gt;ColumnCount()&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt; (rs.next&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;) {\n&lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt; (&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;; i &amp;lt;&amp;#61; cols; i&amp;#43;&amp;#43;) {\nsb.append(&lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;#43; meta.get&lt;span class=\"hljs-constructor\"&gt;ColumnName(&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;)&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34; &amp;#61;&amp;#34;&lt;/span&gt;);\nsb.append(rs.get&lt;span class=\"hljs-constructor\"&gt;String(&lt;span class=\"hljs-params\"&gt;i&lt;/span&gt;)&lt;/span&gt;);\n}\nsb.append(&lt;span class=\"hljs-string\"&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt;);\njta10.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-params\"&gt;sb&lt;/span&gt;.&lt;span class=\"hljs-params\"&gt;toString&lt;/span&gt;()&lt;/span&gt;);\n}\n} catch (SQLException e11) {\ne11.print&lt;span class=\"hljs-constructor\"&gt;StackTrace()&lt;/span&gt;;\n}\n}\n\npublic void add&lt;span class=\"hljs-constructor\"&gt;Emp()&lt;/span&gt; {\n&lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt; {\nstmt &amp;#61; con.create&lt;span class=\"hljs-constructor\"&gt;Statement()&lt;/span&gt;;\nsql &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;update Mstar values(&amp;#34;&lt;/span&gt; &amp;#43; jtf2.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt; \n&amp;#43; jtf4.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;  &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;)&amp;#34;&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; stmt.get&lt;span class=\"hljs-constructor\"&gt;UpdateCount()&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; ((jtf2.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt; !&amp;#61; null)&lt;span class=\"hljs-operator\"&gt; &amp;amp;&amp;amp; &lt;/span&gt;(jtf4.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt; !&amp;#61; null)) {\nstmt.execute&lt;span class=\"hljs-constructor\"&gt;Update(&lt;span class=\"hljs-params\"&gt;sql&lt;/span&gt;)&lt;/span&gt;;\njta10.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-string\"&gt;&amp;#34;添加记录成功&amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-params\"&gt;i&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;条&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n} &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; {\njta10.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-string\"&gt;&amp;#34;带*号项为添加记录时不能为空&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n}\n} catch (SQLException e1) {\ne1.print&lt;span class=\"hljs-constructor\"&gt;StackTrace()&lt;/span&gt;;\n}\n}\n\npublic void delete&lt;span class=\"hljs-constructor\"&gt;Emp()&lt;/span&gt; {\nsearch&lt;span class=\"hljs-constructor\"&gt;Emp()&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt; {\nstmt &amp;#61; con.create&lt;span class=\"hljs-constructor\"&gt;Statement()&lt;/span&gt;;\nsql &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;delete from Mstar where chineseName&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf2.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or id&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf3.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or engName&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf4.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or UNIT&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf5.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or TEAM&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf6.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or Phone&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf7.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or region&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf8.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;or busStation&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf9.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\nstmt.execute&lt;span class=\"hljs-constructor\"&gt;Update(&lt;span class=\"hljs-params\"&gt;sql&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; stmt.get&lt;span class=\"hljs-constructor\"&gt;UpdateCount()&lt;/span&gt;;\njta10.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-string\"&gt;&amp;#34;撤除操作成功&amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-params\"&gt;i&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;条&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n} catch (SQLException e) {\ne.print&lt;span class=\"hljs-constructor\"&gt;StackTrace()&lt;/span&gt;;\n}\n\n}\n\npublic void alter&lt;span class=\"hljs-constructor\"&gt;Emp()&lt;/span&gt; {\nsearch&lt;span class=\"hljs-constructor\"&gt;Emp()&lt;/span&gt;;\nsql &amp;#61; &lt;span class=\"hljs-string\"&gt;&amp;#34;update Mstar set chineseName&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf2.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;and id&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf3.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;and engName&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf4.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;and UNIT&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf5.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;and TEAM&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf6.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;and Phone&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf7.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;and region&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf8.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;and busStation&amp;#61;&amp;#34;&lt;/span&gt;\n&amp;#43; jtf9.get&lt;span class=\"hljs-constructor\"&gt;Text()&lt;/span&gt;.&lt;span class=\"hljs-keyword\"&gt;to&lt;/span&gt;&lt;span class=\"hljs-constructor\"&gt;LowerCase()&lt;/span&gt;.trim&lt;span class=\"hljs-literal\"&gt;()&lt;/span&gt;;\n\n&lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n&lt;span class=\"hljs-keyword\"&gt;try&lt;/span&gt; {\nstmt.execute&lt;span class=\"hljs-constructor\"&gt;Update(&lt;span class=\"hljs-params\"&gt;sql&lt;/span&gt;)&lt;/span&gt;;\ni &amp;#61; stmt.get&lt;span class=\"hljs-constructor\"&gt;UpdateCount()&lt;/span&gt;;\n} catch (SQLException e) {\ne.print&lt;span class=\"hljs-constructor\"&gt;StackTrace()&lt;/span&gt;;\n}\njta10.set&lt;span class=\"hljs-constructor\"&gt;Text(&lt;span class=\"hljs-string\"&gt;&amp;#34;修改操作成功&amp;#34;&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-params\"&gt;i&lt;/span&gt; &amp;#43; &lt;span class=\"hljs-string\"&gt;&amp;#34;条&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\n}\n\npublic void create&lt;span class=\"hljs-constructor\"&gt;GUI()&lt;/span&gt; {\nJFrame jf &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JFrame(&lt;span class=\"hljs-string\"&gt;&amp;#34;员工信息管理系统&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\njf.set&lt;span class=\"hljs-constructor\"&gt;Layout(&lt;span class=\"hljs-params\"&gt;new&lt;/span&gt; GridLayout(2, 1)&lt;/span&gt;);\n&lt;span class=\"hljs-comment\"&gt;// jf.setLayout(new GridLayout(10,2));&lt;/span&gt;\nJPanel jp00 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JPanel(&lt;span class=\"hljs-params\"&gt;new&lt;/span&gt; GridLayout(5, 4)&lt;/span&gt;);\n\nJPanel jp1 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JPanel()&lt;/span&gt;;\nJButton jb11 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;查询&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\njb11.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;this&lt;/span&gt;)&lt;/span&gt;;\nJButton jb12 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;增加&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\njb12.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;this&lt;/span&gt;)&lt;/span&gt;;\njp1.add(jb11);\njp1.add(jb12);\njp00.add(jp1);\nJPanel jp11 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JPanel()&lt;/span&gt;;\nJButton jb111 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;修改&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\njb111.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;this&lt;/span&gt;)&lt;/span&gt;;\nJButton jb112 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JButton(&lt;span class=\"hljs-string\"&gt;&amp;#34;撤除&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\njb112.add&lt;span class=\"hljs-constructor\"&gt;ActionListener(&lt;span class=\"hljs-params\"&gt;this&lt;/span&gt;)&lt;/span&gt;;\njp11.add(jb111);\njp11.add(jb112);\njp00.add(jp11);\nJPanel jp2 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JPanel()&lt;/span&gt;;\nJLabel jl2 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JLabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;姓名 * &amp;#34;&lt;/span&gt;)&lt;/span&gt;;\njp2.add(jl2);\njp2.add(jtf2);\njp00.add(jp2);\nJPanel jp3 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JPanel()&lt;/span&gt;;\nJLabel jl3 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JLabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;密码&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\njp3.add(jl3);\njp3.add(jtf3);\njp00.add(jp3);\nJPanel jp4 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JPanel()&lt;/span&gt;;\nJLabel jl4 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JLabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;密码 *&amp;#34;&lt;/span&gt;)&lt;/span&gt;;\njp4.add(jl4);\njp4.add(jtf4);\njp00.add(jp4);\nJPanel jp5 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JPanel()&lt;/span&gt;;\nJLabel jl5 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JLabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;UNIT &amp;#34;&lt;/span&gt;)&lt;/span&gt;;\njp5.add(jl5);\njp5.add(jtf5);\njp00.add(jp5);\nJPanel jp6 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JPanel()&lt;/span&gt;;\nJLabel jl6 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JLabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;确认密码* &amp;#34;&lt;/span&gt;)&lt;/span&gt;;\njp6.add(jl6);\njp6.add(jtf6);\njp00.add(jp6);\nJPanel jp7 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JPanel()&lt;/span&gt;;\nJLabel jl7 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JLabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;手机号 * &amp;#34;&lt;/span&gt;)&lt;/span&gt;;\njp7.add(jl7);\njp7.add(jtf7);\njp00.add(jp7);\nJPanel jp8 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JPanel()&lt;/span&gt;;\nJLabel jl8 &amp;#61; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; &lt;span class=\"hljs-constructor\"&gt;JLabel(&lt;span class=\"hljs-string\"&gt;&amp;#34;区域 &amp;#34;&lt;/span&gt;)&lt;/span&gt;;\njp8.add(jl8);\njp8.add(jtf8);\njp00.add(jp8);\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "枚举类型", "Question": ["eclipse做一个具有增删改查功能的小游戏", ["(一)使用图形化界面完成游戏设计。游戏主题不限，要有増删改查等功能。图形化方法说明:", "1、JOptionPane showMessageDialog(parentCompopent //父对话框", "message,//显示信息", "title, //标题", "messageType, //图标类型", "icon)/图片如: new ImageIcon(\"images/皇帝png\")", "2、Object result=//返回值类型为Object-", "JOptionPane. showInputDialog(parentComponent //父对话框", "message, //显示信息", "title, //标题", "messageType. //图标类型", "icon,//图片如: new ImageIcon(\"images/皇帝png\")", "selectionValues. //输入内容，如以数组形式放入后枚举", "initialSelectionValue)//默认输入值", "3、音乐", "AudioClip sound = Applet .newAudioClip(new File(\" sounds背景音乐wav\") toURL（）);"]], "Tag": "程序设计"}
{"Answer": "http://blog.csdn.net/xexiyong/article/details/16903471", "Konwledge_Point": "枚举类型", "Question": ["怎么利用变更日志USN查看文件系统变更信息，如新建文件、删除文件等。", ["若要创建 USN 更改日志类型的驱动器 C 上：", "\n\n", "fsutil usn createjournal m = 1000年 = 100 c:", "\n\n", "若要删除活动 USN 更改日志驱动器 c，C 类型：", "\n\n", "fsutil usn deletejournal /d c:", "\n\n", "枚举并列出驱动器 C 上的两个指定的边界之间的更改日志条目，请键入：", "\n\n", "fsutil usn enumdata 1 0 1 c:", "\n\n", "要查询驱动器 C 上的卷的 USN 数据，请键入：", "\n\n", "fsutil usn queryjournal c:", "\n\n", "要读取驱动器 C 上 \\Temp 文件夹中的文件的 USN 数据，请键入：", "\n\n", "fsutil usn readdata c:\\temp\\sample.txt", "\n\n", "这个是怎么用的？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;在 Windows 上&amp;#xff0c;使用 Windows Bluetooth LE API 来获取蓝牙低耗能设备&amp;#xff08;BLE&amp;#xff09;。&lt;/p&gt;\n&lt;p&gt;可以使用 Windows.Devices.Enumeration 命名空间中的 DeviceInformation.FindAllAsync() 函数来枚举所有已配对的蓝牙设备。&lt;/p&gt;\n&lt;p&gt;下面是一个示例代码&amp;#xff0c;可以枚举所有已配对的蓝牙低耗能设备并输出设备名称:&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;using namespace Windows::Devices::Enumeration;\n\n&lt;span class=\"hljs-comment\"&gt;//枚举蓝牙设备&lt;/span&gt;\nDeviceInformationCollection^ devices &amp;#61; &lt;span class=\"hljs-keyword\"&gt;await&lt;/span&gt; DeviceInformation::&lt;span class=\"hljs-title function_ invoke__\"&gt;FindAllAsync&lt;/span&gt;(RaspberryPi::&lt;span class=\"hljs-title function_ invoke__\"&gt;GetDeviceSelector&lt;/span&gt;());\n\n&lt;span class=\"hljs-title function_ invoke__\"&gt;for&lt;/span&gt; (DeviceInformation^ device : devices) {\n    &lt;span class=\"hljs-title function_ invoke__\"&gt;if&lt;/span&gt; (device&lt;span class=\"hljs-punctuation\"&gt;-&amp;gt;&lt;/span&gt;Kind &amp;#61;&amp;#61; DeviceInformationKind::AssociationEndpoint) {\n        &lt;span class=\"hljs-comment\"&gt;//这是一个BLE设备&lt;/span&gt;\n        &lt;span class=\"hljs-title function_ invoke__\"&gt;OutputDebugString&lt;/span&gt;(device&lt;span class=\"hljs-punctuation\"&gt;-&amp;gt;&lt;/span&gt;Name&lt;span class=\"hljs-punctuation\"&gt;-&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-title function_ invoke__\"&gt;Data&lt;/span&gt;());\n    }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这段代码中使用了DeviceInformationKind::AssociationEndpoint来确定设备是否是BLE设备。如果是&amp;#xff0c;则输出设备名称。&lt;/p&gt;\n&lt;p&gt;请注意&amp;#xff0c;这是一个基于 C&amp;#43;&amp;#43; / CX 的示例代码。如果您使用的是 C&amp;#43;&amp;#43;/WinRT 或其他 C&amp;#43;&amp;#43; 库&amp;#xff0c;那么代码可能会有所不同。&lt;/p&gt;\n&lt;p&gt;此外&amp;#xff0c;在 Windows 上还有其他第三方库可以帮助您枚举和操作 BLE 设备&amp;#xff0c;如 32feet.NET 和 Windows IoT Extension for the Windows Runtime。这些库提供了更高级的功能&amp;#xff0c;如连接到 BLE 设备并读取其属性和服务。&lt;/p&gt;\n&lt;p&gt;如果您的应用程序需要在其他平台&amp;#xff08;如 Android 或 iOS&amp;#xff09;上运行&amp;#xff0c;那么您需要使用相应平台的 API 来枚举和操作 BLE 设备。&lt;/p&gt;\n&lt;p&gt;获取蓝牙设备的信息和连接&amp;#xff0c;可能需要根据具体的使用场景和设备类型&amp;#xff0c;编写不同的代码。&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["c++如何获取蓝牙低耗能设备（BLE）？", ["c++如何获取蓝牙低耗能设备（BLE）？", "\n\n", "我需要枚举当前设备中已配对的蓝牙设备，然后根据其ClassOfDevice的值判断它是什么类型的设备。", "\n\n", "但是我发现，通过", "\n\n", "BluetoothFindFirstRadio...BluetoothFindFirstDevice...BluetoothFindNextDevice...BluetoothFindNextRadio", "\n\n", "这个几个蓝牙函数获取的蓝牙设备，并没有包含蓝牙低耗能设备（BLE设备）", "\n\n", "请问，谁有什么方法能获取到蓝牙低耗能设备（BLE设备）的相关属性么？"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;GPIOH本来就是一个地址&amp;#xff0c;InitStruct是GPIO_InitTypeDef结构体类的变量&amp;#xff0c;一个是地址&amp;#xff0c;一个是变量&amp;#xff0c;变量转换为地址需要&amp;amp;&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["GPIO_Init(GPIOH, &InitStruct);\t中的地址符的意义？为什么GPIOH前不用加地址符&", ["为什么第一段代码括号里的\"&InitStruct\"要加‘&’表示地址，GPIOH在第二段代码里不也是结构指针的意思吗？", "\n", "GPIO_Init(", "GPIOH", ", ", "&InitStruct", ")", ";    ", "\n\n", "\n", "\n", "void", " ", "GPIO_Init", "(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)", "\n", "\n", "typedef", " ", "struct", " \n{\n  ", "uint32_t", " GPIO_Pin;              ", "/*!< 选择要配置的GPIO引脚\n                                        可输入 GPIO_Pin_ 定义的宏 */", "\n\n  GPIOMode_TypeDef GPIO_Mode;     ", "/*!< 选择GPIO引脚的工作模式\n                                       可输入 GPIOMode_TypeDef 定义的枚举值*/", "\n\n  GPIOSpeed_TypeDef GPIO_Speed;   ", "/*!< 选择GPIO引脚的速率\n                                       可输入 GPIOSpeed_TypeDef 定义的枚举值 */", "\n\n  GPIOOType_TypeDef GPIO_OType;   ", "/*!< 选择GPIO引脚输出类型\n                                       可输入 GPIOOType_TypeDef 定义的枚举值*/", "\n\n  GPIOPuPd_TypeDef GPIO_PuPd;     ", "/*!<选择GPIO引脚的上/下拉模式\n                                       可输入 GPIOPuPd_TypeDef 定义的枚举值*/", "\n}GPIO_InitTypeDef;\n\n", "\n", "/*定义GPIOA-H 寄存器结构体指针*/", "\n", "#", "define", " GPIOA               ((GPIO_TypeDef *) GPIOA_BASE)", "\n", "#", "define", " GPIOB               ((GPIO_TypeDef *) GPIOB_BASE)", "\n", "#", "define", " GPIOC               ((GPIO_TypeDef *) GPIOC_BASE)", "\n", "#", "define", " GPIOD               ((GPIO_TypeDef *) GPIOD_BASE)", "\n", "#", "define", " GPIOE               ((GPIO_TypeDef *) GPIOE_BASE)", "\n", "#", "define", " GPIOF               ((GPIO_TypeDef *) GPIOF_BASE)", "\n", "#", "define", " GPIOG               ((GPIO_TypeDef *) GPIOG_BASE)", "\n", "#", "define", " GPIOH               ((GPIO_TypeDef *) GPIOH_BASE)", "\n\n"]], "Tag": "程序设计"}
{"Answer": "反正是text 文件 直接用流写进去啊", "Konwledge_Point": "枚举类型", "Question": ["怎么得到String数组？", ["今天遇见一个问题.不知道怎么解决. 如:", "\n自己建立了一个文件read.txt", "\n里面存放这样的 键值数据", "\n00001 = \"中文\",\"中文\",\"中文\",\"中文\",....\"中文\",;", "\n00002 = \"中文\",\"中文\",\"中文\",\"中文\",....\"中文\",;", "\n00003 = \"中文\",\"中文\",\"中文\",\"中文\",....\"中文\",;", "\n00004 = \"中文\",\"中文\",\"中文\",\"中文\",....\"中文\",;", "\n\n", "首先要读取到这个文件，然后放到map中，value是一个数组", "\n\n", "用Properties的propertyNames方法得到枚举，遍历这个后得到String类型的key", "\n\n", "通过Properties的getProperty(key)得到的是一个string，怎么才能保证得到的是一个String数组？", "\n\n", "通过Properties的getProperty(key)得到的是一个string，这个string是分号之前的所有，还是逗号之前的？", "\n\n", "当这个map里面的东西和原配置文件read.txt里面的东西不一样的时候，触发一个任务，把txt文件里面的东西清空，", "\n把map里面的东西写入到txt文件中", "\n\n", "等解答！"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;可能因为在文件读取部分代码有问题&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt;* tempFileStr &amp;#61; null;\n&lt;span class=\"hljs-built_in\"&gt;fscanf&lt;/span&gt;(file_opened_ptr, &lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, tempFileStr);\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;你使用了未初始化的指针tempFileStr&amp;#xff0c;从而导致程序崩溃。&lt;/p&gt;\n&lt;p&gt;为了解决这个问题&amp;#xff0c;你需要分配内存给tempFileStr&amp;#xff0c;才能正常使用它&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-type\"&gt;char&lt;/span&gt; tempFileStr[MAX_STRING_SIZE] &amp;#61; {};\n&lt;span class=\"hljs-built_in\"&gt;fscanf&lt;/span&gt;(file_opened_ptr, &lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, tempFileStr);\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;再次注意&amp;#xff0c;一定要对指针做出必要的初始化操作&amp;#xff0c;以免造成程序的错误。&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["Linux C++环境下反复报段错误", ["问题遇到的现象和发生背景", "\n", "尝试写一个在Linux(redhat)环境下写一个读取文件中指定一行的程序，但不论怎么改都报这个错误", "\n", "遇到的现象和发生背景，请写出第一个错误信息", "\n", "Program received signal SIGSEGV, Segmentation fault.", "\n", "用代码块功能插入代码，请勿粘贴截图。 不用代码块回答率下降 50%", "\n", "\n", "LinesEquals20.txt文件内容如下：", "1", "……", "20", "共20行，每行一个数字。", "\n", "\n", "#", "include", " ", "<cstdio>", "\n", "#", "include", " ", "<fstream>", "\n", "#", "include", " ", "<iostream>", "\n", "#", "include", " ", "<stdio.h>", "\n", "#", "include", " ", "<string>", "\n", "#", "include", " ", "<string.h>", "\n", "#", "include", " ", "<vector>", "\n\n", "#", "define", " null NULL", "\n", "#", "define", " Null NULL", "\n\n", "using", " ", "namespace", " std;\n\n", "//枚举是类，所以用大驼峰法/帕斯卡法", "\n", "//枚举内容为常量，所有常量名都应当大写", "\n", "//变量名用下划线法", "\n", "//函数名统一用小驼峰法。", "\n\n", "enum", " ", "EndOfLineCharEnum", "        ", "//行尾字符枚举。", "\n{\n    CR = ", "'\\r'", ",                ", "//回车", "\n    LF = ", "'\\n'", "\n}end_of_line;\n\n", "enum", " ", "TextFileCharTokenEnum", "        ", "//表示文本类型的字符", "\n{\n    TEXT_CHAR_TOKEN0 = ", "'t'", ",\n    TEXT_CHAR_TOKEN1 = ", "'T'", "\n}text_char_token;\n\n", "enum", " ", "BinaryFileCharTokenEnum", "        ", "//表示二进制类型的字符", "\n{\n    BINARY_CHAR_TOKEN0 = ", "'b'", ",\n    BINARY_CHAR_TOKEN1 = ", "'B'", "\n}binary_char_token;\n\n", "enum", " ", "QuitCharEnum", "        ", "//退出字符枚举，暂时用不到？", "\n{\n    QUIT_CHAR0 = ", "'q'", ",\n    QUIT_CHAR1 = ", "'Q'", "\n}quit_char;\n\n", "const", " ", "int", " MAX_LINE_SIZE = ", "1024", ";        ", "//单个文件最大行数", "\n", "const", " ", "int", " MAX_STRING_SIZE = ", "256", ";        ", "//单个字符串最大长度", "\n\n", "void", " ", "readLine", "(FILE* file_opened_ptr, ", "int", " num)", "            ", "//读取单行内容的函数", "\n", "{\n    ", "if", " (num > ", "0", " && num < MAX_LINE_SIZE)\n    {\n        ", "char", "* tempFileStr = null;\n        ", "char", "* tempStr[MAX_LINE_SIZE] = {};\n        ", "fscanf", "(file_opened_ptr, ", "\"%s\"", ", tempFileStr);\n        ", "char", "** saveChar = ", "nullptr", ";\n        ", "for", " (ushort i = ", "0", "; i < num; i++)\n        {\n            tempStr[i] = ", "strtok_r", "(tempFileStr, ", "\"\\n\"", ", saveChar);\n        }\n        ", "printf", "(", "\"Line %d:\\n%s\"", ", num, tempStr[num]);\n    }\n    ", "else", "\n    {\n        ", "printf", "(", "\"File overflow! Line code must between 1 to %d\"", ", MAX_LINE_SIZE);\n    }\n}\n\n", "void", " ", "fileReadInLines", "()", "            ", "//读取指定行", "\n", "{\n    FILE* file_ptr = null;\n    ", "char", " file_name[MAX_STRING_SIZE] = {}, temp;\n    ", "printf", "(", "\"Please input your file name here:\\n\"", ");\n    ", "scanf", "(", "\"%s\"", ", &file_name);\n    ", "getchar", "();                ", "//消去行尾回车换行符", "\n    ", "printf", "(", "\"Please enter your file type with *One Character Only*.\\nT[ext]|B[inary]\\nInput:\\n\"", ");\n    temp = ", "getchar", "();\n    ", "int", " num = ", "0", ";\n    ", "printf", "(", "\"Plese put your line code here:\\n\"", ");\n    ", "scanf", "(", "\"%d\"", ", &num);\n    ", "if", " ((temp == TEXT_CHAR_TOKEN0) || (temp == TEXT_CHAR_TOKEN1))\n    {\n        file_ptr = ", "fopen", "(file_name, ", "\"r\"", ");\n        ", "if", " (file_ptr == null)\n        {\n            ", "printf", "(", "\"File not exist.\"", ");\n        }\n        ", "else", "\n        {\n            ", "readLine", "(file_ptr, num);\n            ", "fclose", "(file_ptr);\n        }\n    }\n    ", "else", " ", "if", " ((temp == BINARY_CHAR_TOKEN0) || (temp == BINARY_CHAR_TOKEN1))\n    {\n        file_ptr = ", "fopen", "(file_name, ", "\"rb\"", ");\n        ", "if", " (file_ptr == null)\n        {\n            ", "printf", "(", "\"File not exist.\"", ");\n        }\n        ", "else", "\n        {\n            ", "readLine", "(file_ptr, num);\n            ", "fclose", "(file_ptr);\n        }\n    }\n}\n\n", "int", " ", "main", "()", "\n", "{\n    ", "//fileOperate();", "\n    ", "fileReadInLines", "();\n\n    ", "return", " ", "0", ";\n}\n\n\n", "\n", "运行结果及详细报错内容", "\n", "(gdb) ", "run", " a.", "out", "\nStarting ", "program", ": /home/fredhuang/a.", "out", " a.", "out", "\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library ", "\"/lib64/libthread_db.so.1\"", ".\nPlease ", "input", " your ", "file", " name here:\nLinesEquals20.txt\nPlease enter your ", "file", " ", "type", " with *", "One", " Character Only*.\nT[ext]|B[inary]\n", "Input", ":\nt\nPlese put your ", "line", " code here:\n3\n\n", "Program", " received signal SIGSEGV, Segmentation fault.\n0x00007ffff7b3fb40 ", "in", " strtok_r () from /lib64/libc.", "so", ".6\nMissing ", "separate", " debuginfos, ", "use", ": dnf debuginfo-install glibc-2.34-40.el9_1.1.x86_64 libgcc-11.3.1-2.1.el9.x86_64 libstdc++-11.3.1-2.1.el9.x86_64\n\n\n", "\n", "我的解答思路和尝试过的方法，不写自己思路的，回答率下降 60%", "\n", "我尝试过getline方法和ifstream方法，都是一样的报错", "\n", "我想要达到的结果，如果你需要快速回答，请尝试 “付费悬赏”"]], "Tag": "程序设计"}
{"Answer": "&lt;ul&gt;&lt;li&gt;可以查看手册&amp;#xff1a;&lt;a href=\"https://docs.python.org/zh-cn/3/library/poplib.html\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;&lt;font size=\"3\"&gt;python-poplib --- POP3 协议客户端&lt;/font&gt;&lt;/a&gt; 中的内容&lt;/li&gt;&lt;/ul&gt;", "Konwledge_Point": "枚举类型", "Question": ["Python pop3连接出现:poplib.error_proto: b'-ERR Unknown message'", ["用pop3读取邮箱时出现问题", "源码：", "\n", "import", " poplib\n", "from", " email.parser ", "import", " Parser\n", "from", " email.header ", "import", " decode_header\n", "from", " email.utils ", "import", " parseaddr\n\n\n", "def", " ", "get_origin_text", "():  ", "# 获取邮件原始文本", "\n    ", "# 连接到POP3服务器", "\n    pop_server = poplib.POP3(", "\"pop.126.com\"", ")\n    ", "# 邮箱号", "\n    pop_server.user(", "\"icespider1@126.com\"", ")\n    ", "# 授权码", "\n    ", "#pop_server.pass_(\"XILXGHDZCMWTTAUM\")  #", "\n    pop_server.pass_(", "\"DFAZCNAHPEKEXDRF\"", ")\n\n    ", "# stat()返回(邮件数，邮件尺寸)", "\n    ", "# print('邮件数: %s. 邮件尺寸: %s' % pop_server.stat())", "\n    ", "# list()返回所有邮件的编号列表,默认返回20个元素", "\n    resp, mails, octets = pop_server.", "list", "()  ", "# 编号最大的为最新的一封", "\n\n    ", "# 获取最新的一封邮件(索引号从1开始)", "\n    index = ", "len", "(mails)\n    ", "# print(index)", "\n    resp, lines, octets = pop_server.retr(index)  ", "# 返回(状态信息，邮件，邮件尺寸)", "\n\n    ", "# lines存储了邮件的原始文本的每一行,可以获得整个邮件的原始文本", "\n    msg_content = ", "b'\\r\\n'", ".join(lines).decode(", "'utf-8'", ")  ", "# b表示：后面字符串是bytes类型。", "\n    msg = Parser().parsestr(msg_content)\n    ", "# 退出连接", "\n    pop_server.quit()\n    ", "return", " msg\n\n\n", "def", " ", "decode_str", "(", "s", "):  ", "# 解码字符串", "\n    value, charset = decode_header(s)[", "0", "]\n    ", "if", " charset:\n        value = value.decode(charset)\n    ", "return", " value\n\n\n", "def", " ", "set_charset", "(", "msg", "):  ", "# 设置字符集", "\n    charset = msg.get_charset()  ", "# 获取字符集", "\n    ", "if", " charset ", "is", " ", "None", ":\n        content_type = msg.get(", "'Content-Type'", ", ", "''", ").lower()\n        pos = content_type.find(", "'charset='", ")\n        ", "if", " pos >= ", "0", ":\n            charset = content_type[pos + ", "8", ":].strip()\n    ", "return", " charset\n\n\n", "def", " ", "parse_msg", "(", "msg", "):\n    ", "# 解析邮件头", "\n    ", "for", " header ", "in", " [", "'From'", ", ", "'To'", ", ", "'Subject'", "]:  ", "# 遍历获取发件人，收件人，主题的相关信息", "\n        value = msg.get(header, ", "''", ")  ", "# 获取邮件头的内容", "\n        ", "if", " value:\n            ", "if", " header == ", "'Subject'", ":  ", "# 获取主题的信息，并解码", "\n                value = decode_str(value)  ", "# 解码字符串", "\n            ", "else", ":\n                hdr, addr = parseaddr(value)  ", "# 解析字符串中的邮件地址", "\n                name = decode_str(hdr)  ", "# 解码字符串", "\n                value = ", "'%s <%s>'", " % (name, addr)\n        ", "print", "(", "'%s: %s'", " % (header, value))\n\n    ", "# 解析邮件正文", "\n    ", "if", " (msg.is_multipart()):  ", "# 如果消息由多个部分组成，则返回True", "\n        parts = msg.get_payload()  ", "# 返回一个包含邮件所有的子对象的列表", "\n        ", "for", " n, part ", "in", " ", "enumerate", "(parts):  ", "# 枚举，遍历各个对象", "\n            ", "print", "(", "'part %s'", " % (n))\n            parse_msg(part)\n    ", "else", ":\n        content_type = msg.get_content_type()  ", "# 获取邮件信息的内容类型", "\n        ", "if", " content_type == ", "'text/plain'", " ", "or", " content_type == ", "'text/html'", ":  ", "# 如果是纯文本或者html类型", "\n            content = msg.get_payload(decode=", "True", ")  ", "# 返回一个包含邮件所有的子对象(已解码)的列表", "\n            charset = set_charset(msg)  ", "# 设置字符集", "\n            ", "if", " charset:  ", "# 字符集不为空", "\n                content = content.decode(charset)  ", "# 解码", "\n            ", "print", "(", "'Text: %s'", " % (content))\n        ", "else", ":\n            ", "print", "(", "'Attachment: %s'", " % (content_type))  ", "# 附件", "\n\n\n", "if", " __name__ == ", "\"__main__\"", ":\n    msg = get_origin_text()  ", "# 第一步：用 poplib 获取邮件的原始文本。", "\n    parse_msg(msg)  ", "# 第二步：用 email 解析原始文本，还原为邮件对象。", "\n\n\n", "\n", "错误信息：", "\n"]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;显示数据的时候做了一下优化&amp;#xff0c;入校/出校不是显示的0/1&amp;#xff0c;而是直接用中文显示的&amp;#xff0c;看着更直观。&lt;br /&gt;运行结果&amp;#xff1a;&lt;br /&gt;&amp;#xff08;1&amp;#xff09;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/512973006076140.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&amp;#xff08;2&amp;#xff09;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/42688300607613.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&amp;#xff08;3&amp;#xff09;&lt;br /&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/576493006076186.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&amp;#xff08;4&amp;#xff09;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/179824006076137.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&amp;#xff08;5&amp;#xff09;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/574044006076161.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&amp;#xff08;6&amp;#xff09;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/476564006076114.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&amp;#xff08;7&amp;#xff09;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;p class=\"md_img_container\"&gt;&lt;img class=\"md_img\" src=\"https://img-mid.csdnimg.cn/release/static/image/mid/ask/310374006076112.png\" alt=\"img\" align=\"left\" /&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;代码&amp;#xff1a;&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-javascript\"&gt;&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#define OUT_SCHOOL (int)0&lt;/span&gt;\n&lt;span class=\"hljs-comment\"&gt;#define IN_SCHOOL (int)1&lt;/span&gt;\n\n//身份类型\nenum eType\n{\n    e_student&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;,\n    e_teacher&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;,\n    e_other\n};\n\n&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;日期\ntypedef struct _date\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;,m,d;\n}Date;\n\ntypedef struct _person\n{\n    eType type;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;人员身份\n    char name[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;姓名\n    char id[&lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;];&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;编号 不能超过&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;位数\n    char phone[&lt;span class=\"hljs-number\"&gt;12&lt;/span&gt;];&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;联系方式\n    char sfz[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;身份证号\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; op; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;出/入校\n    Date &lt;span class=\"hljs-keyword\"&gt;time&lt;/span&gt;;\n}Person;\n\nvoid save(Person ps[],&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;先声明一下\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; menu()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; op;\n    &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;清屏\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;************欢迎使用校园出入管理系统**************\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;--------------------------------------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;---------1.录入出入校园人员信息-------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;---------2.保存出入校园人员信息-------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;---------3.浏览出入校园人员信息-------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;---------4.查询出入校园人员信息-------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;---------5.增加出入校园人员信息-------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;---------6.删除出入校园人员信息-------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;---------7.修改出入校园人员信息-------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;---------8.统计出入校园人员信息-------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;---------9.对出入校园人员信息进行排序-------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;---------10.退出----------------------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;--------------------------------------------------\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;*****************谢谢使用*************************\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请选择(1-10): &amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;op);\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; op;\n}\n\n//&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;.录入信息\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; input(Person ps[],&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n)\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; flag &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; t;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;清屏\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入人员身份(1.学生 2.教职工 3.其他)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;t);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n            {\n                ps[n].type &amp;#61; e_student;\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n                scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,ps[n].id);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n            {\n                ps[n].type &amp;#61; e_teacher;\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入教职工号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n                scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,ps[n].id);\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n            {\n                ps[n].type &amp;#61; e_other;\n                ps[n].id[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;] &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入错误&amp;#xff01;&amp;#34;&lt;/span&gt;);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入姓名&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,ps[n].name);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入联系方式&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,ps[n].phone);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入身份证号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,ps[n].sfz);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;0.出校 1.入校&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;ps[n].op);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps[n].op &amp;#61;&amp;#61; OUT_SCHOOL)\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入离校时间(YYYY/MM/DD):&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入入校时间(YYYY/MM/DD):&amp;#34;&lt;/span&gt;);\n        scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d/%d/%d&amp;#34;&lt;/span&gt;,&amp;amp;ps[n].time.y,&amp;amp;ps[n].time.m,&amp;amp;ps[n].time.d);\n\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;录入成功&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n        n&amp;#43;&amp;#43;;\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否继续录入(1.是 0.否)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;flag);\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; || flag &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n\n    }\n    save(ps,n); &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;保存信息\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; n;\n}\n\n//&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;.保存\nvoid save(Person ps[],&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n)\n{\n    FILE* fp &amp;#61; fopen(&lt;span class=\"hljs-string\"&gt;&amp;#34;data.txt&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-regexp\"&gt;//s&lt;/span&gt;ystem(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;清屏\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps[i].type &amp;#61;&amp;#61; e_student)\n            fprintf(fp,&lt;span class=\"hljs-string\"&gt;&amp;#34;1 %s %s %s %s %d %d %d %d\\n&amp;#34;&lt;/span&gt;,ps[i].name,ps[i].id,ps[i].phone,ps[i].sfz,ps[i].op,ps[i].time.y,ps[i].time.m,ps[i].time.d);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps[i].type &amp;#61;&amp;#61; e_teacher)\n            fprintf(fp,&lt;span class=\"hljs-string\"&gt;&amp;#34;2 %s %s %s %s %d %d %d %d\\n&amp;#34;&lt;/span&gt;,ps[i].name,ps[i].id,ps[i].phone,ps[i].sfz,ps[i].op,ps[i].time.y,ps[i].time.m,ps[i].time.d);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            fprintf(fp,&lt;span class=\"hljs-string\"&gt;&amp;#34;1 %s %s %s %s %d %d %d %d\\n&amp;#34;&lt;/span&gt;,ps[i].name,&lt;span class=\"hljs-string\"&gt;&amp;#34;无&amp;#34;&lt;/span&gt;,ps[i].phone,ps[i].sfz,ps[i].op,ps[i].time.y,ps[i].time.m,ps[i].time.d);\n    }\n    fclose(fp);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;数据已保存到data.txt中&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n}\n\n\n//显示单条信息\nvoid showSingle(Person ps)\n{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps.type &amp;#61;&amp;#61; e_student)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps.op &amp;#61;&amp;#61; OUT_SCHOOL)\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-6s %-10s %-9s %s %s %s %d/%d/%d\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;学生&amp;#34;&lt;/span&gt;,ps.name,ps.id,ps.phone,ps.sfz,&lt;span class=\"hljs-string\"&gt;&amp;#34;出校&amp;#34;&lt;/span&gt;,ps.time.y,ps.time.m,ps.time.d);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-6s %-10s %-9s %s %s %s %d/%d/%d\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;学生&amp;#34;&lt;/span&gt;,ps.name,ps.id,ps.phone,ps.sfz,&lt;span class=\"hljs-string\"&gt;&amp;#34;入校&amp;#34;&lt;/span&gt;,ps.time.y,ps.time.m,ps.time.d);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps.type &amp;#61;&amp;#61; e_teacher)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps.op &amp;#61;&amp;#61; OUT_SCHOOL)\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-6s %-10s %-9s %s %s %s %d/%d/%d\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;教职工&amp;#34;&lt;/span&gt;,ps.name,ps.id,ps.phone,ps.sfz,&lt;span class=\"hljs-string\"&gt;&amp;#34;出校&amp;#34;&lt;/span&gt;,ps.time.y,ps.time.m,ps.time.d);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-6s %-10s %-9s %s %s %s %d/%d/%d\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;教职工&amp;#34;&lt;/span&gt;,ps.name,ps.id,ps.phone,ps.sfz,&lt;span class=\"hljs-string\"&gt;&amp;#34;入校&amp;#34;&lt;/span&gt;,ps.time.y,ps.time.m,ps.time.d);\n\n    }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps.op &amp;#61;&amp;#61; OUT_SCHOOL)\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-6s %-10s %-9s %s %s %s %d/%d/%d\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;其他&amp;#34;&lt;/span&gt;,ps.name,&lt;span class=\"hljs-string\"&gt;&amp;#34;无&amp;#34;&lt;/span&gt;,ps.phone,ps.sfz,&lt;span class=\"hljs-string\"&gt;&amp;#34;出校&amp;#34;&lt;/span&gt;,ps.time.y,ps.time.m,ps.time.d);\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;%-6s %-10s %-9s %s %s %s %d/%d/%d\\n&amp;#34;&lt;/span&gt;,&lt;span class=\"hljs-string\"&gt;&amp;#34;其他&amp;#34;&lt;/span&gt;,ps.name,&lt;span class=\"hljs-string\"&gt;&amp;#34;无&amp;#34;&lt;/span&gt;,ps.phone,ps.sfz,&lt;span class=\"hljs-string\"&gt;&amp;#34;入校&amp;#34;&lt;/span&gt;,ps.time.y,ps.time.m,ps.time.d);\n    }\n}\n\n//&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;.浏览\nvoid show(Person ps[],&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n)\n{\n    &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;清屏\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        showSingle(ps[i]);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n}\n\n//&lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;.查询\nvoid search(Person ps[],&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n)\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i,t;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; op;\n    char sel;\n    char tmp[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; flag &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;) //多次操作\n    {\n        &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n        flag &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        rewind(stdin);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;A.按人员身份查询\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;B.按姓名查询\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;C.按出/入校查询\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;D.退出\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请选择(A-D):&amp;#34;&lt;/span&gt;);\n        sel &amp;#61; getchar();\n        getchar();\n        switch(sel)\n        {\n        case &lt;span class=\"hljs-string\"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入人员身份(1.学生 2.教职工 3.其他)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;t);\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps[i].type &amp;#61;&amp;#61; t)\n                {\n                    flag &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                    showSingle(ps[i]);\n                }\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;未找到符合条件的人员信息\\n&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-string\"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入人员姓名&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,tmp);\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(strcmp(ps[i].name,tmp) &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                {\n                    flag &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                    showSingle(ps[i]);\n                }\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;未找到符合条件的人员信息\\n&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-string\"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;1.出校  2.入校 \\n请选择:&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;op);\n            &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps[i].op &amp;#61;&amp;#61; op)\n                {\n                    flag &amp;#61; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n                    showSingle(ps[i]);\n                }\n            }\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(flag &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;未找到符合条件的人员信息\\n&amp;#34;&lt;/span&gt;);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        case &lt;span class=\"hljs-string\"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;:\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; ;\n\n        }\n        &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n    }\n}\n//&lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;.增加人员信息&amp;#xff0c;input函数中可以修改信息数量&amp;#xff0c;所以这个功能&amp;#xff0c;直接调用input函数即可\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; add(Person ps[],&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n)\n{\n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; input(ps,n);\n}\n//&lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;.删除\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; del(Person ps[],&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n)\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i,j;\n    char name[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;],sfz[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; op;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;,m,d;\n    char ch;\n    &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;清屏\n    rewind(stdin);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;清空输入缓存\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入姓名、身份证号、出/入校、出/入校时间: &amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s %s %d %d/%d/%d&amp;#34;&lt;/span&gt;,name,sfz,&amp;amp;op,&amp;amp;&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;,&amp;amp;m,&amp;amp;d);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(strcmp(ps[i].name,name)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; strcmp(ps[i].sfz,sfz)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ps[i].op&amp;#61;&amp;#61;op &amp;amp;&amp;amp; ps[i].time.y &amp;#61;&amp;#61;&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt; &amp;amp;&amp;amp; ps[i].time.m &amp;#61;&amp;#61;m &amp;amp;&amp;amp; ps[i].time.d &amp;#61;&amp;#61;d)\n        {\n            showSingle(ps[i]);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;#61;&amp;#61;n)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;没有该人员信息\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;确认删除(y/n)? &amp;#34;&lt;/span&gt;);\n            rewind(stdin);\n            ch &amp;#61; getchar();\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch &amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt; || ch&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;i;j&amp;lt;n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;j&amp;#43;&amp;#43;)\n                    ps[j] &amp;#61; ps[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;删除成功&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n                n--;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n        save(ps,n);\n    }\n    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; n;\n}\n\n//&lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;.修改\nvoid change(Person ps[],&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n)\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i,j,t;\n    char name[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;],sfz[&lt;span class=\"hljs-number\"&gt;20&lt;/span&gt;];\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; op;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;,m,d;\n    char ch;\n    &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;清屏\n    rewind(stdin);&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;清空输入缓存\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入姓名、身份证号、出/入校、出/入校时间: &amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s %s %d %d/%d/%d&amp;#34;&lt;/span&gt;,name,sfz,&amp;amp;op,&amp;amp;&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt;,&amp;amp;m,&amp;amp;d);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(strcmp(ps[i].name,name)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; strcmp(ps[i].sfz,sfz)&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ps[i].op&amp;#61;&amp;#61;op &amp;amp;&amp;amp; ps[i].time.y &amp;#61;&amp;#61;&lt;span class=\"hljs-keyword\"&gt;y&lt;/span&gt; &amp;amp;&amp;amp; ps[i].time.m &amp;#61;&amp;#61;m &amp;amp;&amp;amp; ps[i].time.d &amp;#61;&amp;#61;d)\n        {\n            showSingle(ps[i]);\n            &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(i&amp;#61;&amp;#61;n)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;没有该人员信息\\n&amp;#34;&lt;/span&gt;);\n        &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n    }\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        rewind(stdin);\n        &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否修改身份类型(y/n)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            ch &amp;#61; getchar(); getchar();\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch &amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt; || ch&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入人员身份(1.学生 2.教职工 3.其他)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n                scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;t);\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n                    ps[i].type &amp;#61; e_student;\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t&amp;#61;&amp;#61;&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;)\n                    ps[i].type &amp;#61; e_teacher;\n                &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(t &amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;)\n                    ps[i].type &amp;#61; e_other;\n                &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;\n            }\n        }\n        rewind(stdin);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否修改姓名(y/n)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        ch &amp;#61; getchar(); getchar();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch &amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt; || ch&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入姓名&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,ps[i].name);\n        }\n        rewind(stdin);\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps[i].type &amp;#61;&amp;#61; e_student)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否修改学号(y/n)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            ch &amp;#61; getchar(); getchar();\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch &amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt; || ch&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入学号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n                scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,ps[i].id);\n            }\n        }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps[i].type &amp;#61;&amp;#61; e_teacher)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否修改教职工编号(y/n)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            ch &amp;#61; getchar(); getchar();\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch &amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt; || ch&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入教职工编号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n                scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,ps[i].id);\n            }\n        }\n\n        rewind(stdin);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否修改联系方式(y/n)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        ch &amp;#61; getchar(); getchar();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch &amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt; || ch&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入联系方式&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,ps[i].phone);\n        }\n\n        rewind(stdin);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否修改身份证号(y/n)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        ch &amp;#61; getchar(); getchar();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch &amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt; || ch&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入身份证号&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;,ps[i].sfz);\n        }\n\n        rewind(stdin);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否修改出/入校(y/n)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        ch &amp;#61; getchar(); getchar();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch &amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt; || ch&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入0.出校 / 1.入校&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;ps[i].op);\n        }\n\n        rewind(stdin);\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;是否修改出/入校时间(y/n)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n        ch &amp;#61; getchar(); getchar();\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ch &amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;y&amp;#39;&lt;/span&gt; || ch&amp;#61;&amp;#61;&lt;span class=\"hljs-string\"&gt;&amp;#39;Y&amp;#39;&lt;/span&gt;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;请输入出入校时间(YYYY/MM/DD)&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n            scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d/%d/%d&amp;#34;&lt;/span&gt;,&amp;amp;ps[i].time.y,&amp;amp;ps[i].time.m,&amp;amp;ps[i].time.d);\n        }\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;修改成功&amp;#xff01;\\n&amp;#34;&lt;/span&gt;);\n        save(ps,n);\n    }\n}\n\n\n//统计\nvoid tongji(Person ps[],&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n)\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; a[&lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;]&amp;#61;&lt;span class=\"hljs-string\"&gt;{0}&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; op;\n    &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;cls&amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;输入0.出校  1.入校&amp;#xff1a;&amp;#34;&lt;/span&gt;);\n    scanf(&lt;span class=\"hljs-string\"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&amp;amp;op);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps[i].op &amp;#61;&amp;#61; op)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps[i].type &amp;#61;&amp;#61; e_student)\n                a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;]&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps[i].type &amp;#61;&amp;#61; e_teacher)\n                a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;]&amp;#43;&amp;#43;;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps[i].type &amp;#61;&amp;#61; e_other)\n                a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]&amp;#43;&amp;#43;;\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(op &amp;#61;&amp;#61; OUT_SCHOOL)\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;出校统计结果: &amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;入校统计结果: &amp;#34;&lt;/span&gt;);\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;学生%d人&amp;#xff0c;教职工%d人&amp;#xff0c;其他人%d人\\n&amp;#34;&lt;/span&gt;,a[&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;],a[&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;],a[&lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;]);\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps[i].op &amp;#61;&amp;#61; op)\n        {\n            showSingle(ps[i]);\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;system&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);\n}\n\n//比较时间\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; cmp(Date d1,Date d2)\n{\n    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(d1.y &amp;lt; d2.y)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(d1.y &amp;gt; d2.y)\n        &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n    &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n    {\n        &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(d1.m &amp;lt; d2.m)\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(d1.m &amp;gt; d2.m)\n            &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n        &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(d1.d &amp;lt; d2.d)\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; -&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(d1.d &amp;gt; d2.d)\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;\n            &lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt;\n                &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n        }\n    }\n}\n\n\n//&lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;.排序\nvoid sortByName(Person ps[],&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n)\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; i,j;\n    Person t;\n    &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(i&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;i&amp;lt;n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;;i&amp;#43;&amp;#43;)\n    {\n        &lt;span class=\"hljs-keyword\"&gt;for&lt;/span&gt;(j&amp;#61;&lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;j&amp;lt;n-&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;-i;j&amp;#43;&amp;#43;)\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(strcmp(ps[j].name,ps[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].name)&amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                t &amp;#61; ps[j];\n                ps[j] &amp;#61; ps[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                ps[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; t;\n            }&lt;span class=\"hljs-keyword\"&gt;else&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(strcmp(ps[j].name,ps[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].name)&amp;#61;&amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n            {\n                &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(ps[j].op &amp;#61;&amp;#61; IN_SCHOOL &amp;amp;&amp;amp; ps[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].op &amp;#61;&amp;#61; IN_SCHOOL)\n                {\n                    &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;按入校时间排序\n                    &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt;(cmp(ps[j].time,ps[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;].time) &amp;gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                    {\n                        t &amp;#61; ps[j];\n                        ps[j] &amp;#61; ps[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;];\n                        ps[j&amp;#43;&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;] &amp;#61; t;\n                    }\n                }\n                \n            }\n        }\n    }\n    &lt;span class=\"hljs-keyword\"&gt;printf&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;&amp;#34;排序后&amp;#xff1a;\\n&amp;#34;&lt;/span&gt;);\n    show(ps,n);\n}\n\n\n\n&lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; main()\n{\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; op;\n    Person ps[&lt;span class=\"hljs-number\"&gt;500&lt;/span&gt;]; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;保存所有信息\n    &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; n &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;; &lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;信息条数\n    &lt;span class=\"hljs-keyword\"&gt;while&lt;/span&gt;(&lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;)\n    {\n        op &amp;#61; menu();\n        switch(op)\n        {\n        case &lt;span class=\"hljs-number\"&gt;1&lt;/span&gt;: n &amp;#61; input(ps,n);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;录入\n        case &lt;span class=\"hljs-number\"&gt;2&lt;/span&gt;: save(ps,n); &lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;保存\n        case &lt;span class=\"hljs-number\"&gt;3&lt;/span&gt;: show(ps,n);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;浏览\n        case &lt;span class=\"hljs-number\"&gt;4&lt;/span&gt;: search(ps,n);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;查询\n        case &lt;span class=\"hljs-number\"&gt;5&lt;/span&gt;: n &amp;#61; add(ps,n);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;增加\n        case &lt;span class=\"hljs-number\"&gt;6&lt;/span&gt;: n &amp;#61; del(ps,n);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;删除\n        case &lt;span class=\"hljs-number\"&gt;7&lt;/span&gt;: change(ps,n);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;修改\n        case &lt;span class=\"hljs-number\"&gt;8&lt;/span&gt;: tongji(ps,n);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;统计\n        case &lt;span class=\"hljs-number\"&gt;9&lt;/span&gt;:sortByName(ps,n);&lt;span class=\"hljs-keyword\"&gt;break&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;排序\n        case &lt;span class=\"hljs-number\"&gt;10&lt;/span&gt;:&lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;&lt;span class=\"hljs-regexp\"&gt;//&lt;/span&gt;退出\n        }\n    }\n    \n    &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;\n}\n\n\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "枚举类型", "Question": ["用c语言编写校园出入管理系统", ["一、总体介绍", "\n", "项目名称:校园出入管理系统", "项目简介: 随着信息化时代的到来，人员信息管理都趋向智能化、系统化。为方便进出校园信", "息的管理，设计与开发一个校园出入管理系统。 该系统基本信息包括:人员身份、姓名、编号、联系方式、身份证号、出/入校，", "出/入校时间。人员身份分为学生、教职工和其他三种类型;人员身份为学生时编号为 学号，教职工的编号是职工号，其他身份编号填无;出/入校用 0/1 表示，0 代表出校， 1 代表入校;出/入校时间格式为年/月/日。", "二、具体要求", "系统功能要求", "以菜单的方式完成以下功能，菜单形式参考下图。", "\n", " (1)录入出入校园人员信息", "提示用户按一定格式以及需要输入的各项信息。", "(2)保存出入校园人员信息", "将人员信息存入文件，并提示保存是否成功。", "(3)浏览出入校园人员信息 在屏幕上显示所有出入校园人员信息，并注意将各项数据对齐，若无信息，则给出", "相关提示。", "(4)查询出入校园人员信息", "提示用户可分别按照人员身份、姓名、出/入校进行信息查询，并根据用户提供的 选择进行查询结果显示，下图仅供参考。", "(5)增加出入校园人员信息 提示用户按一定格式输入要增加的出入校园人员信息，并提示是否添加成功。 (6)删除出入校园人员信息 提示用户输入姓名、身份证号、出/入校、出/入校时间，根据输入确定要删除的人", " 员信息，若没有该人员信息，则提示系统没有该人员信息;如有，先输入该人员的全部", "\n", "信息，后提示用户是否确认删除该数据 y/n? 输入 y 后则删除人员信息，并提示相应信 息。下图仅供参考。", "(7)修改出入校园人员信息", "提示用户输入姓名、身份证号、出/入校、出/入校时间，根据输入确定要修改的人 员信息，若没有该人员信息，则提示系统没有该人员信息;若有，则先输出该人员的全 部信息，并询问用户修改哪项信息，选择后，输入新信息，并提示用户确实要修改吗 y/n?输入 y 后则修改人员信息。下图仅供参考。", "注意:对于增加、删除、修改的人员信息均需更新保存至文件中，并提示保存是否 成功。", "  (8)统计出入校园人员信息", "提示用户输入需要统计的出校信息或入校信息，输入 0 或 1，然后对出校或入校人 员信息进行统计，按人员身份进行统计人数，并输出统计结果以及统计的所有人员信 息。下图仅供参考。", " (9)按出入校园人员信息进行排序 按姓名对出入校园人员信息进行升序显示，同名人员按入校时间进行升序显示。 (10)退出", "\n", "提示用户是否退出该系统。", "2. 程序设计要求 (1)要合理使用枚举、结构体、结构体数组、结构体指针访问数组。 (2)逻辑独立的功能定义在函数中，并利用指针进行参数传递。 (3)要有合理提示，例如修改、删除需提示确认。 (4)考虑程序鲁棒性，对不合法数据要有错误处理机制。 (5)所有数据保存在文件中。", "\n", "\n", "\n"]], "Tag": "程序设计"}
{"Answer": "在你新建win32项目时，把安全开发生命周期检查，的，勾去掉![图片](https://img-ask.csdn.net/upload/201601/01/1451615268_588236.jpg)", "Konwledge_Point": "枚举类型", "Question": ["我的这个程序在VS2010上可以编译成功，但是在VS2015上就不行，求指导啊，。。", ["#include", "\n#include", "\nstruct student{             /* 学生结构体 ", "/", "\n        int num;", "\n        char name[20];", "\n        char optional[2];", "\n        union{", "\n            float mark;     /", " 百分制分数成员mark ", "/", "\n            char grade;     /", " 五级制等级成员grade ", "/", "\n        }score;             /", " 成绩共用体 ", "/", "\n};", "\nvoid main()", "\n{", "\n        struct student stu[50];", "\n        int i,n;            /", " n：学生人数 ", "/", "\n        //在两条星线间填入相应代码，定义相当的计数器变量并置初值", "\n        /", "*******************************************************************/", "\n        int c[5]={0,0,0,0,0},count=0;", "\n        float avg=0;", "\n        int bxrs=0;", "\n        /********************************************************************/", "\n\n", "    /* 输入n个学生成绩记录，统计必修学生人数和总成绩 */\n    printf(\"请输入学生人数：\");\n    scanf(\"%d\",&n);\n    printf(\"请依次输入%d个学生成绩记录：\\n\",n);\n    for(i=0;i<n;i++){\n        printf(\">>%d：学号  姓名  选课类型（T-选修，F-必修）：\",i+1);\n        scanf(\"%d%s%s\",&stu[i].num,stu[i].name,stu[i].optional);\n        getchar();      /* 读回车符 */\n        if(strcmp(stu[i].optional,\"T\")==0){\n            printf(\">>成绩等级：\");\n            scanf(\"%c\",&stu[i].score.grade);\n        }\n        else{\n            printf(\">>成绩分数：\");\n            scanf(\"%f\",&stu[i].score.mark);\n\n            //在两条星线间填入相应代码，统计必修学生人数和总成绩\n            /********************************************************************/\n            bxrs++;\n            avg+=stu[i].score.mark;\n\n            /********************************************************************/\n        }\n    }\n    avg=avg/bxrs;       /* 计算必修学生平均成绩 */\n\n    /* 分类统计选修学生各等级人数和必修学生超平均分人数 */\n    for(i=0;i<n;i++){\n        //在两条星线间填入代码, 分类统计选修学生各等级人数和必修学生超平均分人数\n        /**********************************************************************/\n        if(strcmp(stu[i].optional,\"T\")==0){\n            switch(stu[i].score.grade){\n                case 'A':c[0]++;break;\n                case 'B':c[1]++;break;\n                case 'C':c[2]++;break;\n                case 'D':c[3]++;break;\n                case 'E':c[4]++;break;\n            }\n        }\n\n        else{\n            if(stu[i].score.mark>avg)count++;\n        }\n\n\n        /**********************************************************************/\n    }\n\n    /* 输出统计结果 */\n    printf(\"选修学生：A=%d，B=%d，C=%d，D=%d，E=%d\\n\",c[0],c[1],c[2],c[3],c[4]); \n    printf(\"必修学生：平均成绩=%.2f，超过平均成绩学生人数=%d\\n\",avg,count); \n", "\n\n", "}", "\n\n", "他是这样报错的：", "\n1>------ 已启动生成: 项目: ConsoleApplication1, 配置: Debug Win32 ------", "\n1>  proj10_2.cpp", "\n1>e:\\c语言！！！\\实验10 共用体与枚举\\第2题\\proj10_2.cpp(25): error C4996: 'scanf': This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.", "\n1>  c:\\program files (x86)\\windows kits\\10\\include\\10.0.10240.0\\ucrt\\stdio.h(1270): note: 参见“scanf”的声明", "\n1>e:\\c语言！！！\\实验10 共用体与枚举\\第2题\\proj10_2.cpp(29): error C4996: 'scanf': This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.", "\n1>  c:\\program files (x86)\\windows kits\\10\\include\\10.0.10240.0\\ucrt\\stdio.h(1270): note: 参见“scanf”的声明", "\n1>e:\\c语言！！！\\实验10 共用体与枚举\\第2题\\proj10_2.cpp(33): error C4996: 'scanf': This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.", "\n1>  c:\\program files (x86)\\windows kits\\10\\include\\10.0.10240.0\\ucrt\\stdio.h(1270): note: 参见“scanf”的声明", "\n1>e:\\c语言！！！\\实验10 共用体与枚举\\第2题\\proj10_2.cpp(37): error C4996: 'scanf': This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.", "\n1>  c:\\program files (x86)\\windows kits\\10\\include\\10.0.10240.0\\ucrt\\stdio.h(1270): note: 参见“scanf”的声明", "\n========== 生成: 成功 0 个，失败 1 个，最新 0 个，跳过 0 个 =========="]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;OrderByDescending()会执行到自定义字典类的&lt;code class=\"language-javascript\"&gt;CopyTo(KeyValuePair&amp;lt;TKey, TValue&amp;gt;[] array, int arrayIndex)&lt;/code&gt;方法&lt;br /&gt;旧代码里,我是直接调用了Array.Copy()。&lt;br /&gt;利用Dnspy反编译了System.Core.dll内容&amp;#xff0c;在&lt;code class=\"language-javascript\"&gt;Buffer(IEnumerable&amp;lt;TElement&amp;gt; source)&lt;/code&gt;内有这么一段&lt;br /&gt;&lt;code class=\"language-javascript\"&gt;collection.CopyTo(array, 0);&lt;/code&gt;&lt;br /&gt;第二个参数为0&amp;#xff0c;自定义类的CopyTo第二个参数arrayIndex&amp;#61;&amp;gt;0。导致Array.Copy()既不报错,也没有复制数据。&lt;br /&gt;按照微软给出的源码,我把CopyTo更改了&lt;/p&gt;\n&lt;pre&gt;&lt;code class=\"language-c#\"&gt;        &lt;span class=\"hljs-comment\"&gt;&lt;span class=\"hljs-doctag\"&gt;///&lt;/span&gt; &lt;span class=\"hljs-doctag\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;&lt;span class=\"hljs-doctag\"&gt;///&lt;/span&gt;  从第一个元素开始复制&lt;span class=\"hljs-doctag\"&gt;&amp;lt;see cref&amp;#61;&amp;#34;Array&amp;#34;/&amp;gt;&lt;/span&gt;中的一系列元素&amp;#xff0c;将它们粘贴到另一&lt;span class=\"hljs-doctag\"&gt;&amp;lt;see cref&amp;#61;&amp;#34;Array&amp;#34;/&amp;gt;&lt;/span&gt;中&amp;#xff08;从第一个元素开始&amp;#xff09;&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;&lt;span class=\"hljs-doctag\"&gt;///&lt;/span&gt; &lt;span class=\"hljs-doctag\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;&lt;span class=\"hljs-doctag\"&gt;///&lt;/span&gt; &lt;span class=\"hljs-doctag\"&gt;&amp;lt;param name&amp;#61;&amp;#34;array&amp;#34;&amp;gt;&lt;/span&gt;接收数据的&lt;span class=\"hljs-doctag\"&gt;&amp;lt;see cref&amp;#61;&amp;#34;Array&amp;#34;/&amp;gt;&lt;/span&gt;&lt;span class=\"hljs-doctag\"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n        &lt;span class=\"hljs-comment\"&gt;&lt;span class=\"hljs-doctag\"&gt;///&lt;/span&gt; &lt;span class=\"hljs-doctag\"&gt;&amp;lt;param name&amp;#61;&amp;#34;arrayIndex&amp;#34;&amp;gt;&lt;/span&gt;一个 32 位整数,它表示要复制的元素数目&lt;span class=\"hljs-doctag\"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n        &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;void&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;CopyTo&lt;/span&gt;(&lt;span class=\"hljs-params\"&gt;KeyValuePair&amp;lt;TKey, TValue&amp;gt;[] array, &lt;span class=\"hljs-built_in\"&gt;int&lt;/span&gt; arrayIndex&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (array &amp;#61;&amp;#61; &lt;span class=\"hljs-literal\"&gt;null&lt;/span&gt;)\n                &lt;span class=\"hljs-keyword\"&gt;throw&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; ArgumentNullException(&lt;span class=\"hljs-string\"&gt;&amp;#34;array不能为空&amp;#34;&lt;/span&gt;);\n\n            &lt;span class=\"hljs-keyword\"&gt;if&lt;/span&gt; (arrayIndex ! &amp;#61; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;)\n                &lt;span class=\"hljs-keyword\"&gt;throw&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; ArgumentException(&lt;span class=\"hljs-string\"&gt;&amp;#34;arrayIndex需要等于0&amp;#34;&lt;/span&gt;);\n\n            &lt;span class=\"hljs-keyword\"&gt;foreach&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;var&lt;/span&gt; item &lt;span class=\"hljs-keyword\"&gt;in&lt;/span&gt; _items)\n            {\n                array[arrayIndex&amp;#43;&amp;#43;] &amp;#61; item;\n            }\n        }\n&lt;/code&gt;&lt;/pre&gt;", "Konwledge_Point": "枚举类型", "Question": ["自定义字典类排序时遇到未将对象引用到实例", ["问题遇到的现象", "\n", "我想以多线程的办法去处理表格里的数据，并在其方法内部进行业务操作，于是我自定义了一个字典类MyDictionary。", "但我想要给进行排序操作的时候,程序报错\"未将对象引用到实例\",总数量Count没有变化,但item都是对象的默认值。", "我是漏掉了什么步骤了吗？", "\n", "运行结果及报错内容", "\n", "\n", "问题相关代码", "\n", "public ", "class", " MyDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable\n    {\n        ", "/// <summary>", "\n        ", "/// 数据源", "\n        ", "/// </summary>", "\n        ", "private", " ConcurrentDictionary<TKey, TValue> _items;\n\n        public ", "MyDictionary()", "\n        {\n                _items = ", "new", " ConcurrentDictionary<TKey, TValue>", "()", ";\n        }\n\n        ", "/// <summary>", "\n        ", "/// 获取或设置具有指定键的元素", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"key\">要获取或设置的元素的键</param>", "\n        ", "/// <returns></returns>", "\n        public TValue this", "[TK", "ey", " ", "key", "]", "\n        {\n            get\n            {\n                return _items", "[", "key", "]", ";\n            }\n            set\n            {\n                ", "if", " (_items.", "ContainsKey(", "key", ")", ")\n                    _items", "[", "key", "]", " = value;\n                ", "else", "\n                    ", "Add(", "key", ", ", "value", ")", ";\n            }\n        }\n\n        ", "/// <summary>", "\n        ", "/// 获取或设置具有指定键的元素", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"key\">要获取或设置的元素的键</param>", "\n        ", "/// <returns></returns>", "\n        public ", "object", " this", "[", "object", " ", "key", "]", " { get { return ((IDictionary)_items)", "[", "key", "]", "; } set { ((IDictionary)_items)", "[", "key", "]", " = value; } }\n\n        ", "/// <summary>", "\n        ", "/// 获得一个包含字典中的键的集合", "\n        ", "/// </summary>", "\n        public ICollection<TKey> Keys { get { return _items.Keys; } }\n\n        ", "/// <summary>", "\n        ", "/// 获得一个包含字典中的键的集合", "\n        ", "/// </summary>", "\n        ICollection IDictionary.Keys { get { return ((IDictionary)_items).Keys; } }\n\n        ", "/// <summary>", "\n        ", "/// 获得一个包含字典中的值的集合", "\n        ", "/// </summary>", "\n        public ICollection<TValue> Values { get { return _items.Values; } }\n\n        ", "/// <summary>", "\n        ", "/// 获得一个包含字典中的值的集合", "\n        ", "/// </summary>", "\n        ICollection IDictionary.Values { get { return ((IDictionary)_items).Values; } }\n\n        ", "/// <summary>", "\n        ", "/// 获取包含在字典中的键/值对的数目", "\n        ", "/// </summary>", "\n        public ", "int", " Count { get { return _items.", "Count()", "; } }\n\n        ", "/// <summary>", "\n        ", "/// 获取一个值,该值指示<see cref=\"ICollection\"/>是否为只读", "\n        ", "/// </summary>", "\n        public ", "bool", " IsReadOnly { get { return ", "false", "; } }\n\n        ", "private", " ", "object", " _syncRoot;\n        ", "/// <summary>", "\n        ", "/// 获取可用于同步对<see cref=\"ArrayList\"/>的访问的对象", "\n        ", "/// </summary>", "\n        public ", "object", " SyncRoot\n        {\n            get\n            {\n                ", "if", " (_syncRoot", " == ", "null)\n                    Interlocked.", "CompareExchange(", "ref", " ", "this", ".", "_syncRoot", ", ", "new", " ", "object", "()", ", null);\n                return _syncRoot;\n            }\n        }\n\n        ", "/// <summary>", "\n        ", "/// 获取一个值,该值指示是否同步对<see cref=\"ArrayList\"/>的访问（线程安全）", "\n        ", "/// </summary>", "\n        public ", "bool", " IsSynchronized { get { return ", "true", "; } }\n\n        ", "/// <summary>", "\n        ", "/// 获取一个值,该值指示是否<see cref=\"ICollection\"/>对象具有固定的大小", "\n        ", "/// </summary>", "\n        public ", "bool", " IsFixedSize { get { return ", "false", "; } }        \n\n        ", "/// <summary>", "\n        ", "/// 将指定的键和值添加到字典中", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"key\">要添加的元素的键</param>", "\n        ", "/// <param name=\"value\">要添加的元素的值。对于引用类型,该值可以为 null</param>", "\n        public void ", "Add(TKey ", "key", ", TValue ", "value", ")", "\n        {\n            ", "if", " (!_items.", "TryAdd(", "key", ", ", "value", ")", ")\n                throw ", "new", " ", "ArgumentException(", "\"字典中已存在具有相同键的元素\"", ")", ";\n        }\n\n        ", "/// <summary>", "\n        ", "/// 将指定的键和值添加到字典中", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"item\">要添加键/值对</param>", "\n        public void ", "Add(KeyValuePair<TKey, TValue> ", "item", ")", "\n        {\n            ", "Add(", "item", ".Key, ", "item", ".Value)", ";\n        }\n\n        ", "/// <summary>", "\n        ", "/// 将指定的键和值添加到字典中", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"key\">要添加的元素的键</param>", "\n        ", "/// <param name=\"value\">要添加的元素的值。对于引用类型,该值可以为 null</param>", "\n        void IDictionary.", "Add(", "object", " ", "key", ", ", "object", " ", "value", ")", "\n        {\n            TKey _key = ", "ConvertKey(", "key", ")", ";\n            ((IDictionary)_items).", "Add(", "_key", ", (", "int", ")", "value);\n        }\n\n        ", "/// <summary>", "\n        ", "/// 将所有元素从字典中移除", "\n        ", "/// </summary>", "\n        public void ", "Clear()", "\n        {\n            _items.", "Clear()", ";\n        }\n\n        ", "/// <summary>", "\n        ", "/// 确定是否字典中包含指定键", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"key\">定位的键</param>", "\n        ", "/// <returns></returns>", "\n        public ", "bool", " ", "ContainsKey(TKey ", "key", ")", "\n        {\n            return _items.", "ContainsKey(", "key", ")", ";\n        }\n\n        ", "/// <summary>", "\n        ", "/// 确定是否字典中包含指定键", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"item\">定位的键/值对</param>", "\n        ", "/// <returns></returns>", "\n        public ", "bool", " ", "Contains(KeyValuePair<TKey, TValue> ", "item", ")", "\n        {\n            return _items.Contains<KeyValuePair<TKey, TValue>>(item);\n        }\n\n        ", "/// <summary>", "\n        ", "/// 确定是否字典中包含指定键", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"key\">定位的键</param>", "\n        ", "/// <returns></returns>", "\n        public ", "bool", " ", "Contains(", "object", " ", "key", ")", "\n        {\n            TKey _key = ", "ConvertKey(", "key", ")", ";\n            return _items.", "ContainsKey(", "_key", ")", ";\n        }\n\n        ", "/// <summary>", "\n        ", "///  从第一个元素开始复制<see cref=\"Array\"/>中的一系列元素，将它们粘贴到另一<see cref=\"Array\"/>中（从第一个元素开始）", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"array\">接收数据的<see cref=\"Array\"/></param>", "\n        ", "/// <param name=\"index\">一个 32 位整数,它表示要复制的元素数目</param>", "\n        public void ", "CopyTo(Array ", "array", ", ", "int", " ", "index", ")", "\n        {\n            ", "if", " (index < ", "0", ")\n                throw ", "new", " ", "ArgumentOutOfRangeException(", "\"index小于零\"", ")", ";\n\n            ", "if", " (index > ", "array", ".Length)\n                throw ", "new", " ", "ArgumentException(", "\"index大于字典中的元素数\"", ")", ";\n\n            ", "if", " (index > ", "array", ".Length", " || ", "array", " == ", "null)\n                throw ", "new", " ", "ArgumentNullException(", "\"未将对象引用到实例\"", ")", ";\n\n            Array.", "Copy(", "_items", ".ToArray()", ", ", "array", ", index);\n        }\n\n        ", "/// <summary>", "\n        ", "///  从第一个元素开始复制<see cref=\"Array\"/>中的一系列元素，将它们粘贴到另一<see cref=\"Array\"/>中（从第一个元素开始）", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"array\">接收数据的<see cref=\"Array\"/></param>", "\n        ", "/// <param name=\"arrayIndex\">一个 32 位整数,它表示要复制的元素数目</param>", "\n        public void ", "CopyTo(KeyValuePair<TKey, TValue>[] ", "array", ", ", "int", " ", "arrayIndex", ")", "\n        {\n            Array.", "Copy(", "_items", ".ToArray()", ", ", "array", ", arrayIndex);\n        }\n\n        ", "/// <summary>", "\n        ", "/// 将带有指定键的值从字典中移除", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"key\">要移除的元素的键</param>", "\n        ", "/// <returns></returns>", "\n        public ", "bool", " ", "Remove(TKey ", "key", ")", "\n        {\n            TValue outValue = default(TValue);\n            return _items.", "TryRemove(", "key", ", ", "out", " ", "outValue", ")", ";\n        }\n\n        ", "/// <summary>", "\n        ", "/// 将带有指定键/值对从字典中移除", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"key\">要移除的键/值对</param>", "\n        ", "/// <returns></returns>", "\n        public ", "bool", " ", "Remove(KeyValuePair<TKey, TValue> ", "item", ")", "\n        {\n            return ", "Remove(", "item", ".Key)", ";\n        }\n\n        ", "/// <summary>", "\n        ", "/// 将带有指定键的值从字典中移除", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"key\">要移除的元素的键</param>", "\n        ", "/// <returns></returns>", "\n        void IDictionary.", "Remove(", "object", " ", "key", ")", "\n        {\n            TKey _key = ", "ConvertKey(", "key", ")", ";\n            ((IDictionary)_items).", "Remove(", "_key", ")", ";\n        }\n\n        ", "/// <summary>", "\n        ", "/// 尝试从字典中获取与指定的键关联的值", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"key\">要获取的值的键</param>", "\n        ", "/// <param name=\"value\">当此方法返回时,将包含字典中具有指定键的对象;如果操作失败,则包含类型的默认值</param>", "\n        ", "/// <returns></returns>", "\n        public ", "bool", " ", "TryGetValue(TKey ", "key", ", ", "out", " TValue ", "value", ")", "\n        {\n            return _items.", "TryGetValue(", "key", ", ", "out", " ", "value", ")", ";\n        }\n\n        ", "/// <summary>", "\n        ", "/// 返回一个循环访问集合的枚举器", "\n        ", "/// </summary>", "\n        ", "/// <returns></returns>", "\n        IEnumerator IEnumerable.", "GetEnumerator()", "\n        {\n            return ", "new", " ", "Enumerator(", "this", ", Enumerator.KeyValuePair)", ";\n        }\n\n        ", "/// <summary>", "\n        ", "/// 返回一个循环访问集合的枚举器", "\n        ", "/// </summary>", "\n        ", "/// <returns></returns>", "\n        IDictionaryEnumerator IDictionary.", "GetEnumerator()", "\n        {\n            return ", "new", " ", "Enumerator(", "this", ", Enumerator.DictEntry)", ";\n        }\n\n        ", "/// <summary>", "\n        ", "/// 将<see cref=\"object\"/>转换为<see cref=\"TKey\"/>", "\n        ", "/// </summary>", "\n        ", "/// <param name=\"key\"></param>", "\n        ", "/// <returns></returns>", "\n        ", "private", " TKey ", "ConvertKey(", "object", " ", "key", ")", "\n        {\n            TKey _key = key ", "as", " TKey;\n            ", "if", " (key", " == ", "null)\n                throw ", "new", " ", "InvalidCastException(", "\"key不是有效类型\"", ")", ";\n            return _key;\n        }\n\n        Enumerator ", "GetEnumerator()", "\n        {\n            return ", "new", " ", "Enumerator(", "this", ", Enumerator.KeyValuePair)", ";\n        }\n\n        IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.", "GetEnumerator()", "\n        {\n            return ", "new", " ", "Enumerator(", "this", ", Enumerator.KeyValuePair)", ";\n        }\n\n        ", "private", " ", "struct", " Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IDictionaryEnumerator\n        {\n            ", "private", " Dictionary<TKey, TValue> dictionary;\n\n            ", "private", " KeyValuePair<TKey, TValue> current;\n\n            ", "private", " ", "int", " index;\n\n            ", "private", " ", "int", " getEnumeratorRetType;  ", "// What should Enumerator.Current return?", "\n\n            internal const ", "int", " DictEntry = ", "1", ";\n            internal const ", "int", " KeyValuePair = ", "2", ";\n\n            public ", "Enumerator(MyDictionary<TKey, TValue> ", "source", ", ", "int", " ", "_getEnumeratorRetType", ")", "\n            {\n                dictionary = ", "new", " Dictionary<TKey, TValue>((IDictionary<TKey, TValue>)source._items);\n                index = ", "0", ";\n                getEnumeratorRetType = _getEnumeratorRetType;\n                current = ", "new", " KeyValuePair<TKey, TValue>", "()", ";\n            }\n\n            public KeyValuePair<TKey, TValue> Current { get { return current; } }\n\n            ", "object", " IEnumerator.Current\n            {\n                get\n                {\n                    ", "if", " (getEnumeratorRetType", " == ", "DictEntry)\n                        return ", "new", " ", "DictionaryEntry(", "current", ".Key, ", "current", ".Value)", ";\n                    ", "else", "\n                        return ", "new", " KeyValuePair<TKey, TValue>(current.Key, current.Value);\n                }\n            }\n\n            ", "object", " IDictionaryEnumerator.Key { get { return current.Key; } }\n\n            ", "object", " IDictionaryEnumerator.Value { get { return current.Value; } }\n\n            DictionaryEntry IDictionaryEnumerator.Entry\n            {\n                get\n                {\n                    return ", "new", " ", "DictionaryEntry(", "current", ".Key, ", "current", ".Value)", ";\n                }\n            }\n\n            public void ", "Dispose()", "\n            {\n\n            }\n\n            public ", "bool", " ", "MoveNext()", "\n            {\n                ", "while", " (index < dictionary.Count)\n                {\n                    current = ", "new", " KeyValuePair<TKey, TValue>(dictionary.", "ElementAt(", "index", ")", ".Key, dictionary.", "ElementAt(", "index", ")", ".Value);\n                    index++;\n                    return ", "true", ";\n                }\n\n                index = dictionary.Count + ", "1", ";\n                current = ", "new", " KeyValuePair<TKey, TValue>", "()", ";\n                return ", "false", ";\n            }\n\n            void IEnumerator.", "Reset()", "\n            {\n                index = ", "0", ";\n                current = ", "new", " KeyValuePair<TKey, TValue>", "()", ";\n            }\n        }\n    }\n\n"]], "Tag": "程序设计"}
{"Answer": "疑问一：有空构造函数，当需要时，可用用class.newinstance反射方式创建对象\r\n\r\n疑问二： @param ico * 棋子类型 估计这个string的值是  black和white吧。。", "Konwledge_Point": "枚举类型", "Question": ["《疯狂java讲义》课后题五子棋程序的一些疑问！！！  ", ["以下是标准答案源程序： ", "\n\n", "Chessboard类", "\npackage org.crazyit.gobang;", "\n\n", "/**", "\n\n", "\n", "棋盘对象", "\n", "\n", "@author yangenxiong ", "yangenxiong2009@gmail.com", "\n", "\n", "@author Kelvin Mak ", "kelvin.mak125@gmail.com", "\n", "\n", "@version  1.0", "\n", "\n", "网站: ", "疯狂Java*", "\n", "\n", "\n", "Copyright (C), 2009-2010, yangenxiong", "\n", "\n", "This program is protected by copyright laws.\n*/\npublic class Chessboard {\n// 定义一个二维数组来充当棋盘\nprivate String[][] board;\n// 定义棋盘的大小\npublic static final int BOARD_SIZE = 22;", "\n", "/**", "\n\n", "\n", "初始化棋盘", "\n", "\n", "@return void\n*/\npublic void initBoard() {\n// 初始化棋盘数组\nboard = new String[BOARD_SIZE][BOARD_SIZE];\n// 把每个元素赋值为“十”，用于控制台输出棋盘\nfor (int i = 0; i < BOARD_SIZE; i++) {\nfor (int j = 0; j < BOARD_SIZE; j++) {\nboard[i][j] = \"十\";\n}\n}\n}\npublic void test() {\nObject[][] array = new Object[10][10];\nfor (int i = 0; i < array.length; i++) {\nfor (int j = 0; j < array[i].length; j++) {\narray[i][j] = new Object();\n}\n}\n}", "\n", "/**", "\n\n", "\n", "在控制台输出棋盘的方法\n*/\npublic void printBoard() {\n// 打印每个数组元素\nfor (int i = 0; i < BOARD_SIZE; i++) {\nfor (int j = 0; j < BOARD_SIZE; j++) {\n// 打印后不换行\nSystem.out.print(board[i][j]);\n}\n// 每打印完一行数组元素就换行一次\nSystem.out.print(\"\\n\");\n}\n}", "\n", "/**", "\n\n", "\n", "给棋盘位置赋值", "\n", "\n", "@param posX", "\n", "           X坐标", "\n", "@param posY", "\n", "           Y坐标", "\n", "@param chessman", "\n", "           棋子\n*/\npublic void setBoard(int posX, int posY, String chessman) {\nthis.board[posX][posY] = chessman;\n}", "\n", "/**", "\n\n", "\n", "返回棋盘", "\n", "\n", "@return 返回棋盘\n*/\npublic String[][] getBoard() {\nreturn this.board;\n}\n}", "\n", "回帖列表回帖(6) | 浏览(8)   Scott Smith 2012-04-06 13:14:38 删除 1楼    Chessman类：", "\npackage org.crazyit.gobang;", "\n\n", "/**", "\n\n", "\n", "棋子枚举类", "\n", "\n", "@author yangenxiong ", "yangenxiong2009@gmail.com", "\n", "\n", "@author Kelvin Mak ", "kelvin.mak125@gmail.com", "\n", "\n", "@version 1.0", "\n", "\n", "网站: ", "疯狂Java*", "\n", "\n", "\n", "Copyright (C), 2009-2010, yangenxiong", "\n", "\n", "This program is protected by copyright laws.\n*/\npublic enum Chessman {\nBLACK(\"●\"), WHITE(\"○\"); //public static final Chessman = new Chessman(\"\");\nprivate String chessman;", "\n", "/**", "\n\n", "\n", "私有构造器\n*/\nprivate Chessman(String chessman) {\nthis.chessman = chessman;\n}", "\n", "/**", "\n\n", "\n", "\n", "@return String 黑棋或者白棋", "\n*/", "\npublic String getChessman() {", "\nreturn this.chessman;", "\n}", "\n}", "\n\n", "Scott Smith 2012-04-06 13:16:20 删除 2楼    GobangGame类：", "\npackage org.crazyit.gobang;", "\n", "\n", "import java.io.BufferedReader;", "\nimport java.io.InputStreamReader;", "\n\n", "/**", "\n\n", "\n", "五子棋游戏类", "\n", "\n", "@author yangenxiong ", "yangenxiong2009@gmail.com", "\n", "\n", "@author Kelvin Mak ", "kelvin.mak125@gmail.com", "\n", "\n", "@version 1.0", "\n", "\n", "网站: ", "疯狂Java*", "\n", "\n", "\n", "Copyright (C), 2009-2010, yangenxiong", "\n", "\n", "This program is protected by copyright laws.\n*/\npublic class GobangGame {\n// 定义达到赢条件的棋子数目\nprivate final int WIN_COUNT = 5;\n// 定义用户输入的X坐标\nprivate int posX = 0;\n// 定义用户输入的X坐标\nprivate int posY = 0;\n// 定义棋盘\nprivate Chessboard chessboard;", "\n", "/**", "\n\n", "\n", "空构造器\n*/\npublic GobangGame() {\n}", "\n", "/**", "\n\n", "\n", "构造器，初始化棋盘和棋子属性", "\n", "\n", "@param chessboard", "\n", "棋盘类\n*/\npublic GobangGame(Chessboard chessboard) {\nthis.chessboard = chessboard;\n}", "\n", "/**", "\n\n", "\n", "检查输入是否合法。", "\n", "\n", "@param inputStr", "\n", "由控制台输入的字符串。", "\n", "@return 字符串合法返回true,反则返回false。\n*/\npublic boolean isValid(String inputStr) {\n// 将用户输入的字符串以逗号(,)作为分隔，分隔成两个字符串\nString[] posStrArr = inputStr.split(\",\");\ntry {\nposX = Integer.parseInt(posStrArr[0]) - 1;\nposY = Integer.parseInt(posStrArr[1]) - 1;\n} catch (NumberFormatException e) {\nchessboard.printBoard();\nSystem.out.println(\"请以(数字,数字)的格式输入：\");\nreturn false;\n}\n// 检查输入数值是否在范围之内\nif (posX < 0 || posX >= Chessboard.BOARD_SIZE || posY < 0\n|| posY >= Chessboard.BOARD_SIZE) {\nchessboard.printBoard();\nSystem.out.println(\"X与Y坐标只能大于等于1,与小于等于\" + Chessboard.BOARD_SIZE", "\n", "\",请重新输入：\");\nreturn false;\n}\n// 检查输入的位置是否已经有棋子 \nScott Smith 2012-04-06 13:16:47 删除 3楼    String[][] board = chessboard.getBoard();\nif (board[posX][posY] != \"十\") {\nchessboard.printBoard();\nSystem.out.println(\"此位置已经有棋子，请重新输入：\");\nreturn false;\n}\nreturn true;\n}", "\n", "/**", "\n\n", "\n", "开始下棋\n*/\npublic void start() throw*ception {\n// true为游戏结束\nboolean isOver = false;\nchessboard.initBoard();\nchessboard.printBoard();\n// 获取键盘的输入\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\nString inputStr = null;\n// br.readLine:每当键盘输入一行内容按回车键，则输入的内容被br读取到\nwhile ((inputStr = br.readLine()) != null) {\nisOver = false;\nif (!isValid(inputStr)) {\n// 如果不合法，要求重新输入，再继续\ncontinue;\n}\n// 把对应的数组元素赋为\"●\"\nString chessman = Chessman.BLACK.getChessman();\nchessboard.setBoard(posX, posY, chessman);\n// 判断用户是否赢了\nif (isWon(posX, posY, chessman)) {\nisOver = true;", "\n", "} else {", "\n// 计算机随机选择位置坐标", "\nint[] computerPosArr = computerDo();", "\nchessman = Chessman.WHITE.getChessman();", "\nchessboard.setBoard(computerPosArr[0], computerPosArr[1],", "\nchessman);", "\n// 判断计算机是否赢了", "\nif (isWon(computerPosArr[0], computerPosArr[1], chessman)) {", "\nisOver = true;", "\n}", "\n}", "\n// 如果产生胜者，询问用户是否继续游戏", "\nif (isOver) {", "\n// 如果继续，重新初始化棋盘，继续游戏", "\nif (isReplay(chessman)) {", "\nchessboard.initBoard();", "\nchessboard.printBoard();", "\ncontinue;", "\n}", "\n// 如果不继续，退出程序", "\nbreak;", "\n}", "\nchessboard.printBoard();", "\nSystem.out.println(\"请输入您下棋的坐标，应以x,y的格式输入：\");", "\n}", "\n}", "\n\n", "/**", "\n\n", "\n", "是否重新开始下棋。", "\n", "\n", "@param chessman", "\n", "\"●\"为用户，\"○\"为计算机。", "\n", "@return 开始返回true，反则返回false。\n*/\npublic boolean isReplay(String chessman) throw*ception {\nchessboard.printBoard();\nString message = chessman.equals(Chessman.BLACK.getChessman()) ? \"恭喜您，您赢了，\"\n: \"很遗憾，您输了，\";\nSystem.out.println(message + \"再下一局？(y/n)\");\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in)); \nScott Smith 2012-04-06 13:17:17 删除 4楼    if (br.readLine().equals(\"y\")) {\n// 开始新一局\nreturn true;\n}\nreturn false;", "\n", "}", "\n\n", "/**", "\n\n", "\n", "计算机随机下棋\n*/\npublic int[] computerDo() {\nint posX = (int) (Math.random() * (Chessboard.BOARD_SIZE - 1));\nint posY = (int) (Math.random() * (Chessboard.BOARD_SIZE - 1));\nString[][] board = chessboard.getBoard();\nwhile (board[posX][posY] != \"十\") {\nposX = (int) (Math.random() * (Chessboard.BOARD_SIZE - 1));\nposY = (int) (Math.random() * (Chessboard.BOARD_SIZE - 1));\n}\nint[] result = { posX, posY };\nreturn result;\n}", "\n", "/**", "\n\n", "\n", "判断输赢", "\n", "\n", "@param posX", "\n", "棋子的X坐标。", "\n", "@param posY", "\n", "棋子的Y坐标", "\n", "@param ico", "\n", "棋子类型", "\n", "@return 如果有五颗相邻棋子连成一条直接，返回真，否则相反。\n*/\npublic boolean isWon(int posX, int posY, String ico) {\n// 直线起点的X坐标\nint startX = 0;\n// 直线起点Y坐标\nint startY = 0;\n// 直线结束X坐标\nint endX = Chessboard.BOARD_SIZE - 1;\n// 直线结束Y坐标\nint endY = endX;\n// 同条直线上相邻棋子累积数\nint sameCount = 0;\nint temp = 0;", "\n", "// 计算起点的最小X坐标与Y坐标", "\ntemp = posX - WIN_COUNT + 1;", "\nstartX = temp < 0 ? 0 : temp;", "\ntemp = posY - WIN_COUNT + 1;", "\nstartY = temp < 0 ? 0 : temp;", "\n// 计算终点的最大X坐标与Y坐标", "\ntemp = posX + WIN_COUNT - 1;", "\nendX = temp > Chessboard.BOARD_SIZE - 1 ? Chessboard.BOARD_SIZE - 1", "\n: temp;", "\ntemp = posY + WIN_COUNT - 1;", "\nendY = temp > Chessboard.BOARD_SIZE - 1 ? Chessboard.BOARD_SIZE - 1", "\n: temp;", "\n// 从左到右方向计算相同相邻棋子的数目", "\nString[][] board = chessboard.getBoard();", "\nfor (int i = startY; i < endY; i++) {", "\nif (board[posX][i] == ico && board[posX][i + 1] == ico) {", "\nsameCount++;", "\n} else if (sameCount != WIN_COUNT - 1) {", "\nsameCount = 0;", "\n}", "\n}", "\nif (sameCount == 0) {", "\n// 从上到下计算相同相邻棋子的数目", "\nfor (int i = startX; i < endX; i++) {", "\nif (board[i][posY] == ico && board[i + 1][posY] == ico) {", "\nsameCount++;", "\n} else if (sameCount != WIN_COUNT - 1) {", "\nsameCount = 0;", "\n\n", "Scott Smith 2012-04-06 13:19:50 删除 5楼    }", "\nj++;", "\n}", "\n}", "\n}", "\nreturn sameCount == WIN_COUNT - 1 ? true : false;", "\n}", "\n\n", "public static void main(String[] args) throw*ception {", "\n\n", "GobangGame gb = new GobangGame(new Chessboard());", "\ngb.start();", "\n}", "\n}", "\n\n", "疑问1：上述第一处红色部分，为什么要保留那个空构造器，虽然书中139页也提示建议为java类保留无参数的默认构造器，可是还是不明白这样做有什么实际的意义！希望知道的朋友明示！！！", "\n\n", "疑问2：第二处红色部分，为什么是string值等于ico，难道黑子的某种值等于ico？？？", "\n\n", "Scott Smith 2012-04-06 13:21:10 删除 6楼    该死！红色部分字体不显示了！我直接说把！", "\n第一处红色部分：/**", "\n\n", "\n", "空构造器\n*/\npublic GobangGame() {\n}", "\n", "第二处红色部分：if (board[i][posY] == ico && board[i + 1][posY] == ico) "]], "Tag": "程序设计"}
{"Answer": "&lt;p&gt;开根号用sqrt函数&amp;#xff0c;不是^符号&lt;/p&gt;", "Konwledge_Point": "枚举类型", "Question": ["c++中浮点型问题怎么修改", ["表达式必须有具有整数或未区分范围的枚举类型，是因为我if语句里面的数都是浮点型吗double型，所以取根号的时候错误了吗，那应该怎么改进呢？如果一定要输入浮点型的话，谢谢佬", "\n"]], "Tag": "程序设计"}
