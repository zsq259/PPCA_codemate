{"Question": "What are the basic rules and idioms for operator overloading?\r\n                \r\nNote: The answers were given in a specific order, but since many users sort answers according to votes, rather than the time they were given, here's an index of the answers in the order in which they make the most sense:\n\nThe General Syntax of operator overloading in C++\nThe Three Basic Rules of Operator Overloading in C++\nThe Decision between Member and Non-member\nCommon operators to overload\n\nAssignment Operator\nInput and Output Operators\nFunction call operator\nComparison operators\nArithmetic Operators\nArray Subscripting\nOperators for Pointer-like Types\n\n\nConversion Operators\nOverloading new and delete\n\n(Note: This is meant to be an entry to Stack Overflow's C++ FAQ. If you want to critique the idea of providing an FAQ in this form, then the posting on meta that started all this would be the place to do that. Answers to that question are monitored in the C++ chatroom, where the FAQ idea started in the first place, so your answer is very likely to get read by those who came up with the idea.)\n\n    ", "Answer": "\r\nCommon operators to overload\n\nMost of the work in overloading operators is boiler-plate code. That is little wonder, since operators are merely syntactic sugar, their actual work could be done by (and often is forwarded to) plain functions. But it is important that you get this boiler-plate code right. If you fail, either your operator’s code won’t compile or your users’ code won’t compile or your users’ code will behave surprisingly.\n\nAssignment Operator\n\nThere's a lot to be said about assignment. However, most of it has already been said in GMan's famous Copy-And-Swap FAQ, so I'll skip most of it here, only listing the perfect assignment operator for reference:\n\n```\nX& X::operator=(X rhs)\n{\n  swap(rhs);\n  return *this;\n}\n```\n\n\nBitshift Operators (used for Stream I/O)\n\nThe bitshift operators ```\n<<```\n and ```\n>>```\n, although still used in hardware interfacing for the bit-manipulation functions they inherit from C, have become more prevalent as overloaded stream input and output operators in most applications.  For guidance overloading as bit-manipulation operators, see the section below on Binary Arithmetic Operators.  For implementing your own custom format and parsing logic when your object is used with iostreams, continue.\n\nThe stream operators, among the most commonly overloaded operators, are binary infix operators for which the syntax specifies no restriction on whether they should be members or non-members.\nSince they change their left argument (they alter the stream’s state), they should, according to the rules of thumb, be implemented as members of their left operand’s type. However, their left operands are streams from the standard library, and while most of the stream output and input operators defined by the standard library are indeed defined as members of the stream classes, when you implement output and input operations for your own types, you cannot change the standard library’s stream types. That’s why you need to implement these operators for your own types as non-member functions.\nThe canonical forms of the two are these:\n\n```\nstd::ostream& operator<<(std::ostream& os, const T& obj)\n{\n  // write obj to stream\n\n  return os;\n}\n\nstd::istream& operator>>(std::istream& is, T& obj)\n{\n  // read obj from stream\n\n  if( /* no valid object of T found in stream */ )\n    is.setstate(std::ios::failbit);\n\n  return is;\n}\n```\n\n\nWhen implementing ```\noperator>>```\n, manually setting the stream’s state is only necessary when the reading itself succeeded, but the result is not what would be expected.\n\nFunction call operator\n\nThe function call operator, used to create function objects, also known as functors, must be defined as a member function, so it always has the implicit ```\nthis```\n argument of member functions. Other than this, it can be overloaded to take any number of additional arguments, including zero.\n\nHere's an example of the syntax:\n\n```\nclass foo {\npublic:\n    // Overloaded call operator\n    int operator()(const std::string& y) {\n        // ...\n    }\n};\n```\n\n\nUsage:\n\n```\nfoo f;\nint a = f(\"hello\");\n```\n\n\nThroughout the C++ standard library, function objects are always copied. Your own function objects should therefore be cheap to copy. If a function object absolutely needs to use data which is expensive to copy, it is better to store that data elsewhere and have the function object refer to it.\n\nComparison operators\n\nThe binary infix comparison operators should, according to the rules of thumb, be implemented as non-member functions1. The unary prefix negation ```\n!```\n should (according to the same rules) be implemented as a member function. (but it is usually not a good idea to overload it.)\n\nThe standard library’s algorithms (e.g. ```\nstd::sort()```\n) and types (e.g. ```\nstd::map```\n) will always only expect ```\noperator<```\n to be present. However, the users of your type will expect all the other operators to be present, too, so if you define ```\noperator<```\n, be sure to follow the third fundamental rule of operator overloading and also define all the other boolean comparison operators. The canonical way to implement them is this:\n\n```\ninline bool operator==(const X& lhs, const X& rhs){ /* do actual comparison */ }\ninline bool operator!=(const X& lhs, const X& rhs){return !operator==(lhs,rhs);}\ninline bool operator< (const X& lhs, const X& rhs){ /* do actual comparison */ }\ninline bool operator> (const X& lhs, const X& rhs){return  operator< (rhs,lhs);}\ninline bool operator<=(const X& lhs, const X& rhs){return !operator> (lhs,rhs);}\ninline bool operator>=(const X& lhs, const X& rhs){return !operator< (lhs,rhs);}\n```\n\n\nThe important thing to note here is that only two of these operators actually do anything, the others are just forwarding their arguments to either of these two to do the actual work.\n\nThe syntax for overloading the remaining binary boolean operators (```\n||```\n, ```\n&&```\n) follows the rules of the comparison operators. However, it is very unlikely that you would find a reasonable use case for these2.\n\n1 As with all rules of thumb, sometimes there might be reasons to break this one, too. If so, do not forget that the left-hand operand of the binary comparison operators, which for member functions will be ```\n*this```\n, needs to be ```\nconst```\n, too. So a comparison operator implemented as a member function would have to have this signature:\n\n```\nbool operator<(const X& rhs) const { /* do actual comparison with *this */ }\n```\n\n\n(Note the ```\nconst```\n at the end.)\n\n2 It should be noted that the built-in version of ```\n||```\n and ```\n&&```\n use shortcut semantics. While the user defined ones (because they are syntactic sugar for method calls) do not use shortcut semantics. User will expect these operators to have shortcut semantics, and their code may depend on it, Therefore it is highly advised NEVER to define them.\n\nArithmetic Operators\n\nUnary arithmetic operators\n\nThe unary increment and decrement operators come in both prefix and postfix flavor. To tell one from the other, the postfix variants take an additional dummy int argument. If you overload increment or decrement, be sure to always implement both prefix and postfix versions.\nHere is the canonical implementation of increment, decrement follows the same rules:\n\n```\nclass X {\n  X& operator++()\n  {\n    // do actual increment\n    return *this;\n  }\n  X operator++(int)\n  {\n    X tmp(*this);\n    operator++();\n    return tmp;\n  }\n};\n```\n\n\nNote that the postfix variant is implemented in terms of prefix. Also note that postfix does an extra copy.2\n\nOverloading unary minus and plus is not very common and probably best avoided. If needed, they should probably be overloaded as member functions. \n\n2 Also note that the postfix variant does more work and is therefore less efficient to use than the prefix variant. This is a good reason to generally prefer prefix increment over postfix increment. While compilers can usually optimize away the additional work of postfix increment for built-in types, they might not be able to do the same for user-defined types (which could be something as innocently looking as a list iterator). Once you got used to do ```\ni++```\n, it becomes very hard to remember to do ```\n++i```\n instead when ```\ni```\n is not of a built-in type (plus you'd have to change code when changing a type), so it is better to make a habit of always using prefix increment, unless postfix is explicitly needed.\n\nBinary arithmetic operators\n\nFor the binary arithmetic operators, do not forget to obey the third basic rule operator overloading: If you provide ```\n+```\n, also provide ```\n+=```\n, if you provide ```\n-```\n, do not omit ```\n-=```\n, etc. Andrew Koenig is said to have been the first to observe that the compound assignment operators can be used as a base for their non-compound counterparts. That is, operator ```\n+```\n is implemented in terms of ```\n+=```\n, ```\n-```\n is implemented in terms of ```\n-=```\n etc.\n\nAccording to our rules of thumb, ```\n+```\n and its companions should be non-members, while their compound assignment counterparts (```\n+=```\n etc.), changing their left argument, should be a member. Here is the exemplary code for ```\n+=```\n and ```\n+```\n; the other binary arithmetic operators should be implemented in the same way:\n\n```\nclass X {\n  X& operator+=(const X& rhs)\n  {\n    // actual addition of rhs to *this\n    return *this;\n  }\n};\ninline X operator+(X lhs, const X& rhs)\n{\n  lhs += rhs;\n  return lhs;\n}\n```\n\n\n```\noperator+=```\n returns its result per reference, while ```\noperator+```\n returns a copy of its result. Of course, returning a reference is usually more efficient than returning a copy, but in the case of ```\noperator+```\n, there is no way around the copying. When you write ```\na + b```\n, you expect the result to be a new value, which is why ```\noperator+```\n has to return a new value.3\nAlso note that ```\noperator+```\n takes its left operand by copy rather than by const reference. The reason for this is the same as the reason giving for ```\noperator=```\n taking its argument per copy.\n\nThe bit manipulation operators ```\n~```\n ```\n&```\n ```\n|```\n ```\n^```\n ```\n<<```\n ```\n>>```\n should be implemented in the same way as the arithmetic operators. However, (except for overloading ```\n<<```\n and ```\n>>```\n for output and input) there are very few reasonable use cases for overloading these.\n\n3 Again, the lesson to be taken from this is that ```\na += b```\n is, in general, more efficient than ```\na + b```\n and should be preferred if possible.\n\nArray Subscripting\n\nThe array subscript operator is a binary operator which must be implemented as a class member. It is used for container-like types that allow access to their data elements by a key.\nThe canonical form of providing these is this:\n\n```\nclass X {\n        value_type& operator[](index_type idx);\n  const value_type& operator[](index_type idx) const;\n  // ...\n};\n```\n\n\nUnless you do not want users of your class to be able to change data elements returned by ```\noperator[]```\n (in which case you can omit the non-const variant), you should always provide both variants of the operator.\n\nIf value_type is known to refer to a built-in type, the const variant of the operator should better return a copy instead of a const reference:\n\n```\nclass X {\n  value_type& operator[](index_type idx);\n  value_type  operator[](index_type idx) const;\n  // ...\n};\n```\n\n\nOperators for Pointer-like Types\n\nFor defining your own iterators or smart pointers, you have to overload the unary prefix dereference operator ```\n*```\n and the binary infix pointer member access operator ```\n->```\n:\n\n```\nclass my_ptr {\n        value_type& operator*();\n  const value_type& operator*() const;\n        value_type* operator->();\n  const value_type* operator->() const;\n};\n```\n\n\nNote that these, too, will almost always need both a const and a non-const version.\nFor the ```\n->```\n operator, if ```\nvalue_type```\n is of ```\nclass```\n (or ```\nstruct```\n or ```\nunion```\n) type, another ```\noperator->()```\n is called recursively, until an ```\noperator->()```\n returns a value of non-class type.\n\nThe unary address-of operator should never be overloaded.\n\nFor ```\noperator->*()```\n see this question. It's rarely used and thus rarely ever overloaded. In fact, even iterators do not overload it.\n\n\n\nContinue to Conversion Operators\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic arithmetic operations on int - Java\r\n                \r\nI recently noticed an idiosyncrasy of Java regarding basic arithmetic operations in Java. With the following code\n\n```\nbyte a = 3;\nbyte b = 4;\nbyte c = a * b;\n```\n\n\nI get a \"type mismatch\" compilation error...\n\nAre basic arithmetic operations in Java (```\n+```\n, ```\n-```\n, ```\n*```\n, ```\n/```\n) only performed on primitive data types of ```\nint```\n and higher order (```\nlong```\n, ```\ndouble```\n, etc.), whereas arithmetic operations on ```\nbyte```\n and ```\nshort```\n are first cast to ```\nint```\n and then evaluated?\n    ", "Answer": "\r\nOperations on ```\nbyte```\n, ```\nchar```\n and ```\nshort```\n are widened to ```\nint```\n unless the compiler can determine the value is in range.\n\n```\nfinal byte a = 3, b = 4;\nbyte c = a * b; // compiles\n\nfinal byte a = 3, b = 40;\nbyte c = a * b; // compiles\n\nfinal int a = 3, b = 4;\nbyte c = a * b; // compiles !!\n```\n\n\nbut \n\n```\nbyte a = 3, b = 4;\nbyte c = a * b; // doesn't compile as the result of this will be `int` at runtime.\n\nfinal byte a = 30, b = 40;\nbyte c = a * b; // doesn't compile as the value is too large, will be an `int`\n```\n\n\nBTW This compiles even though it results in an overflow. :]\n\n```\nfinal int a = 300000, b = 400000;\nint c = a * b; // compiles but overflows, is not made a `long`\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Storing basic arithmetic operators in variables\r\n                \r\nHow can I store a basic arithmetic operator in a variable?\n\nI'd like to do something like this in c++:\n\n```\nint a = 1;\nint b = 2;\noperator op = +;\nint c = a op b;\nif (c == 3) // do something\n```\n\n\nSince I'm considering only ```\n+```\n, ```\n-```\n, ```\n*```\n and ```\n/```\n I could store the operator in a ```\nstring```\n and just use a switch statement. However I'm wondering if there's a better/easier way.\n    ", "Answer": "\r\n```\nint a = 1;\nint b = 2;\nstd::function<int(int, int)> op = std::plus<int>();\nint c = op(a, b);\nif (c == 3) // do something\n```\n\n\nReplace ```\nstd::plus<>```\n with ```\nstd::minus<>```\n, ```\nstd::multiplies<>```\n, ```\nstd::divides<>```\n, etc., as need be. All of these are located in the header ```\nfunctional```\n, so be sure to ```\n#include <functional>```\n beforehand.\n\nReplace ```\nstd::function<>```\n with ```\nboost::function<>```\n if you're not using a recent compiler.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Big O complexity of the basic arithmetic operations\r\n                \r\nWhat is the Big-O complexity for widespread algorithms of the basic arithmetic operations like multiplication, square root, logarithm, scalar and matrix product?\n\nAre there exotic algorithms which are more efficient, in terms of Big-O complexity, but are not very widespread in practical solutions (e.g. not implemented in popular software libraries)?\n    ", "Answer": "\r\nSee http://en.wikipedia.org/wiki/Computational_complexity_of_mathematical_operations\n\n\n\nMatrix product of square matrices:\n\n\nO(N3) (naïve method)\nO(N2.81) (Strassen's algorithm).\n\n\nThere is also a O(N2.38) Coppersmith–Winograd algorithm but I don't think it's wide-spread due to the huge hidden constant.\n\nBig-int multiplication:\n\n\nNaïve: O(n2)\nFast-Fourier transform based: O(n log n log log n) (Schönhage–Strassen algorithm).\n\n\nThere are also an n log n · 2O(log* n) algorithm published in 2008 but that was too new to be widespread.\n\n\n\nUsually the naïve method is good enough for normal-sized input.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "callback issue for a basic arithmetic funciton\r\n                \r\nIf you came across these two JavaScript functions for doing the basic arithmetic operations: \n\n```\nfunction add(a, b, callback) \n\nfunction multiply(a, b, callback) \n```\n\n\nWrite code using these two functions to compute the result and print out: \n\n```\n2 * (1 + 10) * 30 \n```\n\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Are basic arithmetic operations in C# atomic\r\n                \r\nAre the basic arithmetic operations Thread safe?\n\nFor example, if there is ```\n++```\n operation on a global variable, which will be modified from different threads, is it necessary to a lock around it?\n\nFor example\n\n```\nvoid MyThread() // can have many running instances\n{\n    aGlobal++;\n}\n```\n\n\nor should it be\n\n```\nvoid MyThread()\n{\n    lock( lockerObj)\n    {\n        aGlobal++;\n    }\n}\n```\n\n    ", "Answer": "\r\nThe spec sums it up very well. Section 5.5, \"Atomicity of variable references\":\n\n\n  Reads and writes of the following data types are atomic: bool, char,\n  byte, sbyte, short, ushort, uint, int, float, and reference types. In\n  addition, reads and writes of enum types with an underlying type in\n  the previous list are also atomic. Reads and writes of other types,\n  including long, ulong, double, and decimal, as well as user-defined\n  types, are not guaranteed to be atomic. Aside from the library\n  functions designed for that purpose, there is no guarantee of atomic\n  read-modify-write, such as in the case of increment or decrement.\n\n\nConclusions:\n\n\nIndependent reads/writes are atomic (but only for some data types)\nRead/modify/write (such as ```\ni++```\n) is never atomic\nYou can use the ```\nInterlocked```\n class methods to achieve atomicity when it's not already guaranteed\n\n\nIn cases where ```\nInterlocked```\n functionality is not enough there is no other option than to use a synchronization primitive, such as ```\nMonitor.Enter```\n (which the compiler also exposes through the ```\nlock```\n statement).\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Can regex do basic arithmetic?\r\n                \r\nThis is a relatively simple question. Can PCRE (without extended features such as being able to call the host's functions) do basic arithmetic? That is, can I add, subtract, divide and multiply unary non-negative integers using PCRE? If so, how? (note: I can control both the input, the regex and the replacement string)\n    ", "Answer": "\r\nYes, you can. By using unary numbers, that is, the number is just the length of the string. This is similar to how regexes can check for prime numbers (Samples in PowerShell for now because most of this is so basic that every engine should be able to do it.)\n\nAddition\n\nReplace ```\n$```\n or ```\n^```\n with a string of the length to add.\n\n```\n'XXXXX' -replace '^', 'XXX' = XXXXXXXX  # 5 + 3\n```\n\n\nSubtraction\n\nReplace ```\n.{n}$```\n with ```\nn```\n being the number to subtract by nothing.\n\n```\n'XXXXX' -replace '.{3}$', '' = XX       # 5 - 3\n```\n\n\nMultiplication\n\nReplace ```\n.```\n with a string of the length to multiply.\n\n```\n'XX' -replace '.', 'XXX' = XXXXXX       # 2 * 3\n```\n\n\nDivision\n\nReplace ```\n\\G.{n}(?=(.{n})*$)```\n with a string of length ```\n1```\n; with ```\nn```\n being the number of divide by. The string doesn't change if a replacement isn't possible.\n\n```\n'XXXXXX' -replace '\\G.{3}(?=(.{3})*$)', 'X' = XX      # 6 / 3\n'XXXXXX' -replace '\\G.{4}(?=(.{4})*$)', 'X' = XXXXXX  # 6 / 4 (!)\n```\n\n\nThat being said, the commenters on the question are correct: You really shouldn't do this if you can help it (curiosity is fine, though).\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "SSRS basic arithmetic failures\r\n                \r\nI am sitting with a little weird issue - my ```\nVBScript```\n in ```\nSSRS```\n is failing at basic arithmetic.\n\nHere is the scenario.\n\n```\n62 * 0.13 + 12 = 20.06\n```\n\n\n```\nSSRS```\n gets the answer\n\n```\n818\n```\n\n\nWhat I can see happening is that the ```\n0.13```\n turns into ```\n013```\n, which is ```\nthirteen```\n. Here are the pieces of script I tried.\n\nNote that the ```\nFirst(Fields!PremiumAmount.Value, \"PolicyDataset\")```\n resolves to 62 in my current test case.\n\nI have the following:\n\n```\nTry 1\n= First(Fields!PremiumAmount.Value, \"PolicyDataset\") * 0.13 + 12\n\nTry 2\n= cDec(First(Fields!PremiumAmount.Value, \"PolicyDataset\") *0.13 +12)\n\nTry 3\n= First(Fields!PremiumAmount.Value, \"PolicyDataset\") * cDec(0.13) + 12)\n\nTry 4\n= cDec(First(Fields!PremiumAmount.Value, \"PolicyDataset\") * cDec(0.13) + 12)\n\nTry 5\n= cDec(First(Fields!PremiumAmount.Value, \"PolicyDataset\") * cDec(\"0,13\") + 12)\n\nTry 6\n= cDec(First(Fields!PremiumAmount.Value, \"PolicyDataset\") * (13 / 100) + 12)\n\nTry 7\nCustom Code -> \n\n   Public Function MultiplyThirteenPercentPlusTwelve(input as Decimal) \n      return  input * 0.13 + 12\n   End Function\n\nIn Report\n\n= Code.MultiplyThirteenPercentPlusTwelve(First(Fields!PremiumAmount.Value, \"PolicyDataset\"))\n```\n\n\nAll of these Resolve to 818. I am confused and amused at the same time. Are there any other tries I can take?\n    ", "Answer": "\r\nMake sure ```\nFields!PremiumAmount.Value```\n is evaluating to the ```\n62```\n.\n Because I have tried above all approaches with ```\nSQL SERVER 2008 R2```\n and same ```\nSSRS```\n version it is working correctly. It's giving me ```\n20.06```\n. \nMake sure your ```\nFields!PremiumAmount.Value```\n is int or numeric datatype. \nIf your ```\nFields!PremiumAmount.Value```\n comes as ```\n6200```\n then also it can give same issue. Check your incoming data and its conversion.\n\nAppended answer (from OP): \n\nFor some reason, the ```\n62```\n that was referred to was pulling as ```\n62.00```\n, and turned into ```\n6200```\n in the calculation.\n\nSo the Following procedure was added. ```\n62.00```\n had it's full stop replaced with a comma, converted as a decimal, then proceeded with the multiplication, followed by some basic decimal place formatting.\n\n```\nFormat(cDec(Replace(First(Fields!PremiumAmount.Value, \"PolicyDataset\"), \".\",\",\")) * 0.13D + 12.0D, \"F2\")\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic Arithmetic Coding\r\n                \r\nI have to explain to my class how to do basic arithmetic coding on a small message. I've been investigating lots of documents and reading a lot and I can say I theoretically understand how this method works, but still have some questions.\n\nI'm stepping through these examples (first example, second page) - we have 'eaii!' message, and we want to code it using the arithmetic method.\n\nIn the example, it sets\n\n```\nSymbol      Probability      Range\na             .2            [0 , 0.2)\ne             .3            [0.2 , 0.5)\ni             .1            [0.5 , 0.6)\no             .2            [0.6 , 0.8)\nu             .1            [0.8 , 0.9)\n!             .1            [0.9 , 1.0)\n```\n\n\nMy first question is, how did it set probabilities?, my logic tells me that if i have two 'i' symbols then that symbol should have the highest probability, shouldn't it?\n\nAlso how did it determined which range to start from and other ranges afterwards??\n\nAnother example was coding the message 'abc', which was set like this:\n\n```\nSymbol      Probability      Range\na             .7            [0 , 0.7)\nb             .1            [0.7 , 0.8)\nc             .2            [0.8 , 1.0)\n```\n\n\nI also don't understand why the first symbol has substantially greater probability than the others and even if it was an order of appearance thing, I don't understand how it set it to 0.7, like why not 0.8 or 0.5.\n\nI hope I made myself clear and I'd appreciate any kind of help.\n    ", "Answer": "\r\nThey are imagining a fixed model for the data that was established long before that specific message is to be encoded.  The model was in principle constructed from a large ensemble of such messages, so there is no reason to believe that ```\neaii!```\n by itself should match the probabilities in the model.  Of course, the model is just for illustration purposes, and no more real than the ```\neaii!```\n message.  (Though I think I said exactly that the other day when I was pulling something out of the oven.)\n\nThe order of the symbols in the model is arbitrary.  It just needs to be the same model on both ends.  It is of course important that the probabilities add up to one.\n\nThe second model is simply another arbitrary model to illustrate how a symbol can be coded in less than a bit, when it has a probability greater than 1/2.  For that model, each ```\na```\n in a series of ```\na```\n's would take a little over half a bit.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Antlr4 grammar with basic arithmetic and signed expressions\r\n                \r\nI'm learning ```\nAntlr4```\n to write a language for basic arithmetics. Currently, I have written a grammar with ```\nAntlr4```\n for the basic arithmetic operators ```\n*```\n ```\n+```\n ```\n-```\n ```\n/```\n.\nHere is my grammar:\n\n```\ngrammar Expr; // rename to distinguish from Expr.g4\n\nprog:   stat (';' stat)* ;\n\nstat:   ID '=' expr (';'|',')?              # assign\n    |   expr (';')?                         # printExpr\n    ;\n\nexpr:   op=('-'|'+') expr                    # signed\n    |   expr op=('*'|'/') expr               # MulDiv\n    |   expr op=('+'|'-') expr               # AddSub\n    |   ID                                   # id                 \n    |   DOUBLE                               # Double\n    |   '(' expr ')'                         # parens\n    ;\n\n\n\nMUL :   '*' ; // assigns token name to '*' used above in grammar\nDIV :   '/' ;\nADD :   '+' ;\nSUB :   '-' ;\nID  :   [a-zA-Z]+ [0-9]* ;      // match identifiers\nDOUBLE :   [0-9]+ ('.' [0-9]+)? ;\nWS : [ \\t\\r\\n]+ -> skip ;\n```\n\n\nThe Problem is that my grammar accepts inputs like ```\n2++++3```\n due to rule: ```\nop=('-'|'+') expr```\n. However, I didn't find another way to implements signed expressions such as ```\n-2 + 3```\n, ```\nx = 6; y = -x```\n, ```\n+3 -2```\n.\n\nHow can I fix the bug?\n    ", "Answer": "\r\nTry breaking up your grammar, now it is a bit of a monster rule (```\nexpr```\n). You probably don't want to sign an entire expression, but rather a single value. How about something like this\n\n```\nexpr: add value\n    | expr mult expr\n    | expr add expr\n    | value\n    ;\nvalue: ID\n     | DOUBLE\n     | '(' expr ')'\n     ;\nadd: '+' | '-';\nmult: '*' | '/';\n```\n\n\nThis way, you can build signed expressions like ```\n-2```\n, ```\n+x```\n or ```\n-(2+3)```\n, but not ```\n2++3```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Boolean circuit using basic arithmetic?\r\n                \r\nAccording to How do I perform arithmetic in a makefile?, we can perform basic arithmetic through the Posix shell in a GNUmakefile (see Dominic's answer).\n\nI got really excited because I have suffered lack of logical operators in the past. So I coded up the following test on OS X:\n\n```\nGCC42_OR_LATER = $(shell $(CXX) -v 2>&1 | $(EGREP) -c \"^gcc version (4.[2-9]|[5-9])\")\nIS_DARWIN = $(shell uname -s | $(EGREP) -i -c \"darwin\")\nCLANG_COMPILER = $(shell $(CXX) --version 2>&1 | $(EGREP) -i -c \"clang\")\n\n# Below, we are building a boolean circuit that says \"Darwin && (GCC 4.2 or above || Clang)\"\nSUPPORTS_MULTIARCH = $$($(IS_DARWIN) * $$($(GCC42_OR_LATER) + $(CLANG_COMPILER)))\n\nifneq ($(SUPPORTS_MULTIARCH),0)\nCXXFLAGS += -arch x86_64 -arch i386\nelse\nCXXFLAGS += -march=native\nendif\n```\n\n\nA run on OS X showed ```\n-arch x86_64 -arch i386```\n, and that was expected.\n\nI then added a ```\nIS_DARWIN=0```\n before the math, which should have driven everything low. But it did not, and I got ```\n-arch x86_64 -arch i386```\n again.\n\nWhat am I doing wrong in the above code?\n    ", "Answer": "\r\nAs the comment says, to have ```\n$$(())```\n arithmetic work, you need to involve the shell and that shell needs to be bash. (EDIT: Apparently it doesn't, and any POSIX shell will work, even something as minimal as dash)\n\n\n\nSo first off, add this to the top of your `Makefile`:\n\n    SHELL=/bin/bash\n\n\n\nThen, the line you were playing with should read:\n\n```\n# Below, we are building a boolean circuit that says \"Darwin && (GCC 4.2 or above || Clang)\"\nSUPPORTS_MULTIARCH = $(shell echo $$(( $(IS_DARWIN) * ( $(GCC42_OR_LATER) + $(CLANG_COMPILER) ) )) )\n```\n\n\nI've added extra spaces in that line to show clearly what's matching with what. Feel free to delete them, though they do no harm.\n\nInside the double-paren-arithmetic group, you don't need ```\n$$((```\n to start an arithmetic subgroup; just use ordinary parentheses.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Python - basic arithmetic/variable names [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        String formatting: % vs. .format vs. f-string literal\r\n                            \r\n                                (16 answers)\r\n                            \r\n                    \r\n                Closed 5 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nThe assignment is to write a program that spits out an odd number, a number, and then does basic arithmetic on those numbers. I've gotten it to spit out outputs fine, but I cannot seem to find a way to have the generated numbers be part of the equation. Here is the code I have:\n\n```\nodd = int(input(\"Please enter an odd number from 1 to 99: \"))\nprint(int(odd))\nnum = int(input(\"Please enter a number from 1 to 200: \"))\nprint(int(num))\nprint('odd + num =',odd+num)\nprint('odd - num =',odd-num)\nprint('odd * num=',odd*num)\nprint('odd / num =',odd/num)\nprint('odd + num =',num+odd)\nprint('odd - num =',num-odd)\nprint('odd * num =',num*odd)\nprint('odd / num =',num/odd)\n```\n\n\nI need the 'odd / num =' section to be replaced with the numbers generated, but I'm unsure as to how to do that and my textbook says nothing about it.\n\nAny help would really be appreciated.\n    ", "Answer": "\r\nyou may want to do something like this:\n\n```\nprint('{} + {} = {}'.format(odd, num, odd+num))\nprint('{} / {} = {}'.format(odd, num, odd/num))\n```\n\n\nand so on for the other operations.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Using a generic class to perform basic arithmetic operations\r\n                \r\nI want to perform basic arithmetic operations like addition, subtraction, multiplication and division using only one generic method per operation for wrapper types like ```\nInteger```\n, ```\nFloat```\n, ```\nDouble```\n ... (excluding ```\nBigDecimal```\n and ```\nBigInteger```\n).\n\nI have tried to do something like the following (for addition) using a generic class.\n\n```\npublic final class GenericClass<E extends Number> {\n\n    public E add(E x, E y) {\n        return x + y; // Compile-time error\n    }\n}\n```\n\n\nIt issues a compile-time error,\n\n\n  operator + cannot be applied to E,E\n\n\nIs there a way to use such a generic version to achieve such operations?\n    ", "Answer": "\r\nNo, there isn't a way to do this, or else it would be built into Java.  The type system isn't strong enough to express this sort of thing.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Implementing the exponential function with basic arithmetic operations\r\n                \r\nFor the purpose of the exercise, I have to implement the exponential function with the most basic arithmetic operations. I came up with this, where x is the base and y the exponent:\n\n```\nfunction expAetB() {\n     product=1;\n     for (i=0; i<y; i++)\n     {\n          product=product*x;\n     }\n     return product;\n};\n```\n\n\nHowever, there are more basic operations than ```\nproduct=product*x;```\n. I should somehow be able to insert instead another ```\nfor```\n loop which multiply and pass the result, but I can't find a way to do it without falling into an infinite loop.\n    ", "Answer": "\r\nIn the same way that exponentiation is repeated multiplication, so multiplication is simply repeated addition.\n\nSimply create another function ```\nmulAetB```\n which does that for you, and watch out for things like negative inputs.\n\nYou could go even one more level and define adding in terms of increment and decrement, but that may be overkill.\n\n\n\nSee, for example, the following program which uses the overkill method of addition:\n\n```\n#include <stdio.h>\n\nstatic unsigned int add (unsigned int a, unsigned int b) {\n    unsigned int result = a;\n    while (b-- != 0) result++;\n    return result;\n}\n\nstatic unsigned int mul (unsigned int a, unsigned int b) {\n    unsigned int result = 0;\n    while (b-- != 0) result = add (result, a);\n    return result;\n}\n\nstatic unsigned int pwr (unsigned int a, unsigned int b) {\n    unsigned int result = 1;\n    while (b-- != 0) result = mul (result, a);\n    return result;\n}\n\nint main (void) {\n    int test[] = {0,5, 1,9, 2,4, 3,5, 7,2, -1}, *ip = test;\n    while (*ip != -1) {\n        printf (\"%d + %d = %3d\\n\"  , *ip, *(ip+1), add (*ip, *(ip+1)));\n        printf (\"%d x %d = %3d\\n\"  , *ip, *(ip+1), mul (*ip, *(ip+1)));\n        printf (\"%d ^ %d = %3d\\n\\n\", *ip, *(ip+1), pwr (*ip, *(ip+1)));\n        ip += 2;\n    }\n    return 0;\n}\n```\n\n\nThe output of this program shows that the calculations are correct:\n\n```\n0 + 5 =   5\n0 x 5 =   0\n0 ^ 5 =   0\n\n1 + 9 =  10\n1 x 9 =   9\n1 ^ 9 =   1\n\n2 + 4 =   6\n2 x 4 =   8\n2 ^ 4 =  16\n\n3 + 5 =   8\n3 x 5 =  15\n3 ^ 5 = 243\n\n7 + 2 =   9\n7 x 2 =  14\n7 ^ 2 =  49\n```\n\n\n\n\nIf you really must have it in a single function, it's a simple matter of refactoring the function call to be inline:\n\n```\nstatic unsigned int pwr (unsigned int a, unsigned int b) {\n    unsigned int xres, xa, result = 1;\n\n    // Catch common cases, simplifies rest of function (a>1, b>0)\n\n    if (b == 0) return 1;\n    if (a == 0) return 0;\n    if (a == 1) return 1;\n\n    // Do power as repeated multiplication.\n\n    result = a;\n    while (--b != 0) {\n        // Do multiplication as repeated addition.\n\n        xres = result;\n        xa = a;\n        while (--xa != 0)\n            result = result + xres;\n    }\n\n    return result;\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Prolog - some basic arithmetic operations implementation [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Prolog successor notation yields incomplete result and infinite loop\r\n                            \r\n                                (2 answers)\r\n                            \r\n                    \r\n                Closed 7 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI am new to Prolog, and need to implement some basic arithmetic operations on natural numbers, without using the built-in predicates.\n\nI represent natural number Term in unary notaion, meaning I have the constant 0, and the recursive successor functor s [i.e. 4 = s(s(s(s(0))))]. I implement the arithmetic operations, with respect to the above notation.\n\nThe set of rules is:\n\n```\n% nat(N)/1 ---> N is a natural number\nnat(0).\nnat(s(X)) :-\n    nat(X).\n\n% add(X,Y,Z)/3 ---> Z = X + Y\nadd(X,0,X) :-\n    nat(X).\nadd(X,s(Y),s(Z)) :-\n    add(X,Y,Z).\n\n% mult(X,Y,Z)/3 ---> Z = X * Y\nmult(0,X,0) :-\n    nat(X).\nmult(s(X),Y,Z) :-\n    mult(X,Y,XY),\n    add(XY,Y,Z).\n```\n\n\nnow, when I query:\n\n```\n?- mult(s(s(0)), s(s(s(0))), RES).\n```\n\n\nI get everything OK:\n\nRES = s(s(s(s(s(s(0)))))).\n\nwhen I query: (like to ask 6/3=?)\n\n```\n?- mult(X, s(s(s(0))), s(s(s(s(s(s(0))))))).\n```\n\n\nI stuck in an infinite loop and get S.O.\n\neven if I change the order of the recursive call in the mult predicate it doesn't help:\n\n```\nmult(s(X),Y,Z) :-\n    add(XY,Y,Z),\n    mult(X,Y,XY).\n```\n\n\nI run swi-prolog on linux machine. \n\nWill appreciate your advice!\n    ", "Answer": "\r\nOK, there is a quick fix (wrong recursion):\n\n```\n% add(X,Y,Z)/3 ---> Z = X + Y\nadd(0,X,X) :-\n    nat(X).\nadd(s(X),Y,s(Z)) :-\n    add(X,Y,Z).\n```\n\n\nand then the mult:\n\n```\nmult(s(X),Y,Z) :-\n   add(XY,Y,Z),\n   mult(X,Y,XY).\n```\n\n\nwill give the desired result. \n\nyet, for the query:\n\n```\n?- mult(X,Y,s(s(s(s(s(s(0))))))).\n```\n\n\nit will output all pairs of X,Y that correspond to: X * Y = s(s(s(s(s(s(0)))))), and after the last pair, will go into infinite loop, for unknown reason to me.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic Arithmetic with passed URL variables via PHP?\r\n                \r\nI'm trying to do some very basic arithmetic and am getting hung up.  I'm pulling variables from a URL like this:\n\nhttp://mysite.com/page.php?var1=100&var=5\n\nThis is the basic /page.php code I'm using:\n\n```\n<?php\n$var1 = \"var1\";\n$var2 = \"var2\";\n$divided_amount = $var1/$var1;\n?>\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n        <title>Derp</title>\n</head>\n<body style=\"background-color: #fff; text-align: center;\">\n\n        <div style=\"text-align: center; width: 1000px; background-color: #fff; margin: auto;\">\n\n<p>This should be the divided amount: <?php echo $divided_amount ?> </p>\n\n\n</body>\n</html>\n```\n\n\nHowever, I end up getting this error message:\n\n```\nWarning: Division by zero in /derp.php on line 4\n```\n\n\nIs this even possible to do with passed variables?  If so, where am I going wrong?  Any help is greatly appreciated!\n    ", "Answer": "\r\n\n  Q: is this (PHP arithmetic) even possible to do with passed variables?\n\n\nA: Sure.\n\n\n  Q: Where am I going wrong?\n\n\nA: You're assigning strings (\"var1\") to your variables, then trying to do arithmetic with them.\n\nTry this instead:\n\n```\n<?php\n$var1 = 4;\n$var2 = 2;\n$divided_amount = $var1/$var1;\n?>\n```\n\n\nAt a minimum, you might want to test with is_numeric() before performing arithmetic:\n\nhttp://php.net/manual/en/function.is-numeric.php\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How can I simplify a basic arithmetic expression?\r\n                \r\nHow can I simplify a basic arithmetic expression?\n\ne.g.\n\n```\nmodule ExprOps where \n\nsimplify :: Expr -> Expr\nsimplify (Plus(Var\"x\") (Const 0)) = Var \"x\"\n```\n\n\nWhat do I have to do?\n\n\n\n```\nmodule Expr where\n\n-- Variables are named by strings, assumed to be identifiers.\ntype Variable = String\n\n-- Representation of expressions.\ndata Expr = Const Integer\n          | Var Variable\n          | Plus Expr Expr\n          | Minus Expr Expr\n          | Mult Expr Expr\n          deriving (Eq, Show)\n```\n\n\nThe simplifications I have in mind are:\n\n```\n0*e = e*0 = 0\n1*e = e*1 = 0+e = e+0 = e-0 = e\n```\n\n\nand simplifying constant subexpressions, e.g. Plus (Const 1) (Const 2) would become Const 3. I would not expect variables (or variables and constants) to be concatenated: Var \"st\" is a distinct variable from Var \"s\". \n\nWhat I want to achieve is to create a module like the one above that uses a function called ```\nsimplify :: Expr->Expr```\n\n    ", "Answer": "\r\nWell, you have the right general model. You just need more rules and to recursively apply the simplification process.\n\n```\nsimplify :: Expr -> Expr \nsimplify (Mult (Const 0) x) = Const 0 \nsimplify (Mult x (Const 0)) = Const 0\nsimplify (Plus (Const 0) x) = simplify x\nsimplify (Plus x (Const 0)) = simplify x \nsimplify (Mult (Const 1) x) = simplify x \nsimplify (Mult x (Const 1)) = simplify x \nsimplify (Minus x (Const 0)) = simpify x\nsimplify (Plus (Const x) (Const y)) = Const (x + y)\nsimplify (Minus (Const x) (Const y)) = Const (x - y)\nsimplify (Mult (Const x) (Const y)) = Const (x * y)\nsimplify x = x\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "JavaScript basic Arithmetic\r\n                \r\nI am trying to do a simple JavaScript Arithmetic.\n   The user enters values, and the arithmetic is done and then plugged into \"h4\"    \n\n```\n<h4 id=\"sum1\"><h4>\n<h4 id=\"sum2\"></h4>\n<h4 id=\"sum3\"></h4>\n<h4 id=\"sum4\"></h4>\n\n\n<form name=\"arithmetic\" method=\"post\">\n    <fieldset><legend>Enter a Number Here!</legend>\n    <label>First Number Here</label>\n    <input type=\"text\" name=\"inPutN1\" />\n    <br/>\n    <label>Second Number Here</label>\n    <input type=\"text\" name=\"inPutN2\" />\n    <br/>\n    <input type=\"submit\" value=\"enter\" onClick=\"solve(inPutN1,inPutN2)\" />\n    <input type=\"reset\" value=\"clear\"/>\n    </fieldset>\n<script> \n    function solve(sum1,sum2,sum3,sum4) {\n        var operand1 = parseInt(arithmetic.inPutN1.value); \n        var operand2 = parseInt(arithmetic.inPutN2.value); \n        var sum1= operand1 + operand2; \n            document.getElementById(\"sum1\").innerHTML=sum1;\n        var sum2= operand1 - operand2;\n            document.getElementById(\"sum2\").innerHTML=sum2;\n        var sum3= operand1 * operand2;\n            document.getElementById(\"sum3\").innerHTML=sum3;\n        var sum4= operand1 / operand2;\n            document.getElementById(\"sum4\").innerHTML=sum4;\n        }\n\n\n\n\n\n   </script>\n```\n\n\nAny Help would be appreciated as to why this is not working\n    ", "Answer": "\r\nChange your enter button input type from \"submit\" to \"button\".\n\n```\n<input type=\"button\" value=\"enter\" onClick=\"solve(inPutN1,inPutN2)\" />\n```\n\n\nYou don't need to submit a form just to run javascript code.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Implementing equality function with basic arithmetic operations\r\n                \r\nGiven positive-integer inputs ```\nx```\n and ```\ny```\n, is there a mathematical formula that will return ```\n1```\n if ```\nx```\n==```\ny```\n and ```\n0```\n otherwise? I am in the unfortunate position of having to use a tool that only allows me to use the following symbols: numerals ```\n0```\n-```\n9```\n; decimal point ```\n.```\n; parentheses ```\n(```\n and ```\n)```\n; and the four basic arithmetic operations ```\n+```\n, ```\n-```\n, ```\n/```\n, and ```\n*```\n.\n\nCurrently I am relying on the fact that the tool that evaluates division by zero to be zero. (I can't tell if this is a bug or a feature.) Because of this, I have been able to use ```\n((x-y)/(y-x))+1```\n. Obviously, this is ugly and unideal, especially in the case that it is a bug and they fix it in a future version.\n    ", "Answer": "\r\nTaking advantage of integer division in C truncates toward 0, the follows works well.  No multiplication overflow.  Well defined for all \"positive-integer inputs ```\nx```\n and ```\ny```\n\".\n\n```\n(x/y) * (y/x)```\n\n\n```\n#include <stdio.h>\n#include <limits.h>\n\nvoid etest(unsigned x, unsigned y) {\n  unsigned ref = x == y;\n  unsigned z =  (x/y) * (y/x);\n  if (ref != z) {\n    printf(\"%u %u %u %u\\n\", x,y,z,ref);\n  }\n}\n\nvoid etests(void) {\n  unsigned list[] = { 1,2,3,4,5,6,7,8,9,10,100,1000, UINT_MAX/2 , UINT_MAX - 1, UINT_MAX };\n  for (unsigned x = 0; x < sizeof list/sizeof list[0]; x++) {\n    for (unsigned y = 0; y < sizeof list/sizeof list[0]; y++) {\n      etest(list[x], list[y]);\n    }\n  }\n}\n\nint main(void) {\n  etests();\n  printf(\"Done\\n\");\n  return 0;\n}\n```\n\n\nOutput (No difference from ```\nx == y```\n)\n\n```\nDone\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Implementing basic arithmetic in S4 class object\r\n                \r\nI'm creating a S4 object of the money class in the following manner:\n\n```\n# Create class ------------------------------------------------------------\n\n# Create S4 class object holding money and export to generator function\nsetClass(Class = \"money\",\n         slots = list(currency = \"character\",\n                      value = \"numeric\")) -> money\n```\n\n\nFor which I'm later defining the show method:\n\n```\n# Methods -----------------------------------------------------------------\n\n# Create show method\nsetMethod(\"show\",\n          \"money\",\n          function(object) {\n              cat(switch(object@currency,\n                         GBP = intToUtf8(163)),\n                  format(\n                      x = round(object@value, 2),\n                      trim = TRUE,\n                      big.mark = \",\",\n                      big.interval = 3\n                  ),\n                  sep = \"\")\n          })\n```\n\n\nPreview\n\nSo far it works as promised:\n\n```\n# Create test object\ntst_fig <- new(Class = \"money\",\n               value = 1e6,\n               currency = \"GBP\")\n\n# Show the object\ntst_fig\n# £1,000,000\n```\n\n\nProblem\n\nI would like to enable basic arithmetic on that object:\n\n```\n>> tst_fig + 1e6\nError in tst_fig + 1000000 : non-numeric argument to binary operator\n```\n\n\nDesired results\n\n```\n> tst_fig + 1e6\n# £2,000,000\n```\n\n\nAttempts\n\nNaturally this is won't work:\n\n```\n>> setMethod(\"+\",\n...           \"money\",\n...           function(object, x) {\n...               object@value + x\n...           })\nError in conformMethod(signature, mnames, fnames, f, fdef, definition) : \n  in method for ‘+’ with signature ‘e1=\"money\"’: formal arguments (e1 = \"money\", e2 = \"money\") omitted in the method definition cannot be in the signature\n```\n\n\n\n\nSide notes\n\nThere is a similar excellent answer provided by @Roland on implementing money class in S3; in the context of this question I'm interested in creating S4 class that would behave in a similar manner without any specific reason other than curiosity. The key requirements is that ```\nisS4()```\n on that object returns ```\nTRUE```\n.\n\nWhat I mean by similar manner:\n\nIt prints like nicely formatted money but permits all operations the one could do on a common numeric. \n    ", "Answer": "\r\nI came across how to do this in my own question here.  I have generally used the ```\nsetMethod('Arith')```\n approach as it is more concise when you intend to implement several operations.  If you search the documentation ```\n?Arith```\n you will see that it list the different operations as well as other S4 group generics.  \n\nAs the error suggests you need to have ```\ne1```\n and ```\ne2```\n defined for ```\nArith```\n methods.  In your specific case the following works.\n\nNote - to get your desired output (i.e. a ```\nmoney```\n class object) you will need to create a new ```\nmoney```\n object.\n\n```\nsetMethod(\"+\", \n    c(e1=\"money\", e2=\"numeric\"), \n    function(e1, e2){\n        new(Class = \"money\", value = e1@value + e2, currency = e1@currency)\n    }\n)\n\ntst_fig + 1e6\n[1] £2e+06\n```\n\n\nHowever, as I said, you probably want the more general, concise version which uses ```\n.Generic```\n to interpret the ```\nArith```\n method you are using.\n\n```\nsetMethod(\"Arith\", \n    c(e1=\"money\", e2=\"numeric\"),\n    function(e1, e2)\n    {\n        op = .Generic[[1]]\n        switch(op,\n            `+` = return(new(Class = \"money\", value = e1@value + e2, currency = e1@currency))\n        )\n    }\n)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic arithmetic grammar -- handling parentheses\r\n                \r\nI have written the following to handle basic binary operations in arithmetic:\n```\ngrammar Calc;\n\nexpression\n    : OPERAND (BIN_OP expression)*\n    ;\n\n// 12 or .12 or 2. or 2.38\nOPERAND\n    : [0-9]+ ('.' [0-9]*)?\n    | '.' [0-9]+\n    ;\n\nBIN_OP\n    : [-+/*]\n    ;\n```\n\nNow I can do things like:\n```\n0.9+2.4*3.6\n```\n\nHowever, how is order-of-operations and parentheses normally handled with antlr? For example:\n\nWhat if I wanted to write ```\n(0.9+2.4)*3.6```\n instead, how could I do that?\nOr, what if I wanted to write ```\n((0.9+2.4)*3.6)```\n ?\nAnd finally, to catch an invalid case of un-matched parens, ```\n(((((0.9+2.4)*3.6))```\n ?\n\nHow is that normally handled in antlr?\n    ", "Answer": "\r\nOne of the really nice things that ANTLR4 brought was the ability to easily represent precedence by the ordering of alternatives in a rule.\nTry something like:\n```\ngrammar Calc;\n\nexpression\n    : '(' expression ')' # parenExpr\n    : expression (MUL_OP | DIV_OP) expression # mulDivExpr\n    : expression (ADD_OP | SUB_OP) expressions # addSubExpr\n    : OPERAND # operandExpr\n    ;\n\n// 12 or .12 or 2. or 2.38\nOPERAND\n    : [0-9]+ ('.' [0-9]*)?\n    | '.' [0-9]+\n    ;\n\nSUB_OP: '-';\nADD_OP: '+';\nDIV_OP: '/';\nMUL_OP: '*';\n    ;\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Storing a number of 100 digits in C++ for basic arithmetic functions\r\n                \r\nI am trying to write code for computing prime numbers of up to 100 digits and then performing basic arithmetic operations on it like ```\n+```\n, ```\n-```\n, ```\n*```\n, and ```\n/```\n. I have done some research and found that this could be performed by using strings. But if I store the number in a string then how would I perform operations on it?\n    ", "Answer": "\r\nYou need to implement a big integer class (or use an existing one).\nFor example: https://mattmccutchen.net/bigint/\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to keep the dimensions when using the basic arithmetic operations with Numpy\r\n                \r\nRecently I encounter a dimension problem and has to reshape the array after each calculation. For example,\n\n```\na=np.random.rand(2,3,4)\nt=2\nb=a[:,1,:] + a[:,2,:]*t\n```\n\n\nThe second axis of ```\na```\n is reduced automatically and ```\nb```\n becomes a 2x4 array. How to keep the shape of ```\nb```\n to be [2,1,4]. In ```\nnumpy.sum()```\n, we can set ```\nkeepdims=True```\n, but for the basic arithmetic operations, how to do it? \n    ", "Answer": "\r\nConvert the integer indies into lists:\n\n```\n>>> b = a[:,[1],:] + a[:,[2],:]*t\n>>> b.shape\n(2, 1, 4)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Time - Specify X seconds / minutes, and basic arithmetic\r\n                \r\nI am wondering how one would go about specifing a certain amount time, say X seconds. I'm writing the behaviour for a class that represents a Till (as in, a supermarket till), and whish to specify how long it takes to check out 1 item. \n\nI'm doing this so once I receive the number of items a customer has, the time taken to serve the customer is simply:\n\n```\nITEM_CHECKOUT_TIME * NumberOfItems;\n```\n\n\nITEM_CHECKOUT_TIME would be a constant, and what I wish to specify. Some basic arithmetic would be done on this constant, like above.\n\nSure, I could use a double to represent the time, but I was wondering if it's actually possible with the Time classes, or anything else specifically for this task.\n\nThanks!\n    ", "Answer": "\r\nI would not use a ```\ndouble```\n to represent time. I would probably represent it as a whole number of milliseconds (or nanoseconds). If you're looking for something fancier, you might want to look at the ```\nDuration```\n class in the Joda-Time library:\n\nhttp://joda-time.sourceforge.net/key_duration.html\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to do basic arithmetic in Truffle testing using web3.js\r\n                \r\nI'm currently using Truffle to test smart contracts, but having difficulty with basic arithmetic.\nIf I try to add two numbers:\n```\nconst firstNumber = web3.utils.toWei('1', 'ether'); // 1000000000000000000\nconst sum = firstNumber + 100\n```\n\nThe result is like when two strings are attached ```\n1000000000000000000100```\n.\nI tried converting ```\nfirstNumber.toString()```\n or using ```\nconst { toBN } = web3.utils;```\n but all have the same result.\nI tried using ```\nadd```\n or ```\nmul```\n like some examples here, but my Truffle simply says those methods don't exist.\nI'm using Truffle v5.3.14 (core: 5.3.14) and Web3.js v1.4.0.\n    ", "Answer": "\r\n'1' is a string so you will receive string from .toWei. You can convert String to BN and use .add. For example:\n```\nconst firstNumber = web3.utils.toWei('1', 'ether'); // 1000000000000000000\nconst sum = web3.utils.toBN(firstNumber).add(web3.utils.toBN('100')).toString();\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "emit IL for basic arithmetic ops\r\n                \r\nI'm fairly new to C#, and have recently learned that it's possible to emit IL to implement a simple evaluation stack:\n\n```\nstack [ B C * A + ] ==> push B, push C, DO MULT, push A, DO ADD, POP return value\n\nthis example arises from the string \"A + ( B  * C )\"\n```\n\n\nCan someone provide some advice and/or a sample IL snippet of the basic operation - i.e. push 1,2 or 3 doubles and invoke an unary, binary or ternary function or arithmetic operator on them.\n\nYour advice may include whether or not emitting IL is a good idea.  The expressions are assumptions fed to a monte-carlo simulation - so there is a good reason to think about speeding them up, but I don't want to do this if it's regarded as doable but unsafe.\n    ", "Answer": "\r\nSee http://msdn.microsoft.com/en-us/library/exczf7b9.aspx for an excellent description of how to do this.  Extremely well commented & well written.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to use a csv file as input for basic arithmetic operations in bash\r\n                \r\nI've stored my data in ```\nneckrev_dim.csv```\n file, structured like the following\n```\nsubjectID,dim3,pixdim3 \nMR44825,405,0.625\n```\n\nI also have a seperate ```\nsubjects.csv```\n, just containing all the subjectIDs\n```\nMR44825\nMR55843\n```\n\nNow I want to use this data in basic arithmetic operations using bash.\n```\nsubjlist=subjects.csv\nfor subj in ` cat $subjlist `\ndo\n    dim3=$(grep -w '$subj' neckrev_dim.csv | cut -d ',' -f 2)\n    pixdim3=$(grep -w '$subj' neckrev_dim.csv | cut -d ',' -f 3)\n    total_length=$(($dim3*$pixdim3))\n    echo $total_length\ndone\n```\n\nThis leads to the following error:\n```\nsyntax error: operand expected (error token is \"*\")\n```\n\nI think the problem lies within the ```\ngrep```\n, but I can't figure it out.\nThanks in advance!\n    ", "Answer": "\r\nThe main issue is that POSIX arithmetic does not support decimals, only integers.\nYou will have to use something else, like ```\nbc```\n for non-integer arithmetic.\nThe other issue is that you are single-quoting ```\n$subj```\n -- you should use double quotes so the variable gets expanded.\nTry the following:\n```\nsubjlist=subjects.csv\n\nwhile read -r subj\ndo\n    dim3=$(grep -w \"$subj\" neckrev_dim.csv | cut -d ',' -f 2)\n    pixdim3=$(grep -w \"$subj\" neckrev_dim.csv | cut -d ',' -f 3)\n    echo \"$dim3 * $pixdim3\" | bc\ndone < \"$subjlist\"\n```\n\nNote, here ```\nbc```\n is reading from standard input, so we just need to ```\necho```\n the arithmetic expression to ```\nbc```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to design a DFA that accepts basic arithmetic expressions\r\n                \r\nFor my university task I must design a Deterministic Finite Automata which recognises basic arithmetic. We're basically building a very basic lexical analyzer.\nThe DFA uses the operators \"+,-,*,/\".\nThe DFA has only positive numbers so expressions like \"-1+1\",\"+1+1\" aren't accepted.\nIt can accept decimals but only when they start with 0. so \"0.3415\" is accepted while \"1.3415\" is not.\nFinally it can accept just a \"0\" by itself.\nI'm confused about the best way to approach this. I have a basic foundation of DFAs and NFAs so can someone please just give me some hints as to how I should start?\nMy current approach is to draw some small DFAs. One for decimal numbers, one for whole numbers, one for operators, and one that's just a 0. Then I want to concatenate them and do the union of the smaller DFAs to create one big NFA and end it by converting back to a DFA.\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "how to get the integer part of a real number that is positive using only basic arithmetic\r\n                \r\nThis is a question for school, reinventing the wheel as usual.\n\nI'm allowed to use basic arithmetic ```\n+```\n, ```\n-```\n, ```\n*```\n, ```\n/```\n and comparison, but I'm obviously not allowed to use cast.\n\nThe method has to be efficient, so I thought about multiplying a variable by 2 until it's bigger then do a dichomitic search between the powers of 2 that contains the real number I want to extract the integer part.\n\nHowever, in the next section, I'm not allowed to use these basic arithmetic and comparison between integer and float, only between 2 integers, or 2 floats.\n\nI can't find any solution to this...\n    ", "Answer": "\r\nYou can follow your idea of multiplication by two to surpass the value then dichomitic search (aka binary search) to get the desired integer. However, since you are not allowed to compare a float with an integer, start with two values, the float ```\n1.0```\n and the integer ```\n1```\n. Do all your multiplications and comparisons with the float value, then at each step whatever you do to the float value you also do to the integer value. So at any point, your float value and your integer value are equal, and you are using the float value for all comparisons with your given value.\n\nSo if your given value is ```\n3.1416```\n, you start with your initial guess values of ```\n1.0```\n and ```\n1```\n. ```\n1.0```\n is less than ```\n3.1416```\n, so you double both guesses and get ```\n2.0```\n and ```\n2```\n. The float ```\n2.0```\n is still less than ```\n3.1416```\n so you double both guesses again and get ```\n4.0```\n and ```\n4```\n. Your float guess ```\n4.0```\n is finally too high, so you use binary search and try ```\n3.0```\n and ```\n3```\n. The float guess is low. However, your integer guess ```\n3```\n is just one away from your previous integer guess of ```\n4```\n, so you are done. The final integer result is thus ```\n3```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic arithmetic with prepared statements\r\n                \r\nI have a fairly simple query that I want to use a prepared statement for:\n\n```\nSQLiteStatement stmt = \n    db.compileStatement(\"UPDATE items SET totalcount=totalcount-? WHERE id=?\");\nstmt.bindLong(0, count);\nstmt.binString(1, \"someID\");\n```\n\n\nbut it gives me a SQLiteBindOrColumnIndexOutOfRangeException.\n\nHow can I bind the value in a simple arithmetic statement? I googled a little on this exception and did find solutions for ```\nLIKE```\n, but not for this.\n    ", "Answer": "\r\nTo quote the documentation:\n\n\n  Parameters\n   index  The 1-based index to the parameter to bind\n\n\nThe parameter numbers must be 1 and 2.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Calculating a month in julian counting (year starts with march) with basic arithmetic only\r\n                \r\nI am trying to convert an integer representing a month (1=january, 2=february.. 12=december) to an integer representing that month but in julian counting (1=march, 2=april.. 12=february). However I can only use integers and basic arithmetic (-,+,/,* and modulo).\n\nfor example:  \n\n```\nmonth->julianMonth  \n1->11  \n2->12   \n3->1   \n4->2   \n5->3  \n...\n```\n\n\nThe closest I get is with \n\n```\njulianMonth=(month+10)%12\n```\n\n\nwhich returns every value right but february.\n    ", "Answer": "\r\nOkay, got it:\n\n```\njulianMonth=(month+9)%12+1 \n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Unable to perform basic arithmetic\r\n                \r\nIn F#, I receive an error when I write the following code:\n\n```\nlet records = {1..100}\nlet middleElement= records |> Seq.length / 2\n```\n\n\n\n  The type 'int' does not match the type ''a -> int'\n\n\nI know this error is basic.\nBut I'm new to F# and really don't know what I need to do to resolve this error.\n    ", "Answer": "\r\nYou need to add parentheses:\n\n```\nlet middleElement = (records |> Seq.length) / 2\n```\n\n\nIn your version, the compiler reads your code as\n\n```\nlet middleElement = records |> (Seq.length / 2)\n```\n\n\n... and it gets confused, because it thinks you are trying to divide the ```\nlength```\n function by 2!\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Show basic arithmetic functions as string\r\n                \r\nfor a homework assignment, a subtask is to make the arithmetic functions ```\n(+)```\n, ```\n(-)```\n, ```\n(*)```\n and ```\ndiv```\n showable.\n\nWe're solved the rest of the assignment, but we're stuck here. Right now we're using the solution to this question here to distinguish between the operations:\n\n```\nshowOp op = case op 3 3 of\n          6 -> \"plus\"\n          0 -> \"minus\"\n          9 -> \"times\"\n          1 -> \"divide\"\n          _ -> \"undefined\"\n```\n\n\nHowever, this strikes me as kind of ugly as things like ```\nshowOp (\\a b -> a * 3 - y)```\n yield ```\n\"plus\"```\n.\n\nIs there any way to better distinguish between the operators?\n\nWe are using winhugs atm with the appropriate switches ```\n-98 +o```\n in order to be able to use the needed extensions.\n\nEdit:\nAs requested, the actual assignment has to do with Arrays (specifically ```\nArray Int (Int -> Int -> Int)```\n). It has to do with generating arrays of operators that fulfill certain conditions.\n\nThe assignment states:\n\n\n  Make the data type ```\nArray Int (Int->Int-Int)```\n an Instance of ```\nShow```\n. The arithmetic operations from the previous exercises should be represented as \"plus\", \"minus\", \"times\" and \"div\".\n\n\nthx for any help in advance\n    ", "Answer": "\r\nUse induction :)\n\n```\n{-# LANGUAGE FlexibleInstances #-}\n\ninstance Eq (Int-> Int -> Int) where \n  f == g = induce f g where\n    base = 1\n    n = 2\n    induce f g = and [f 1 n' == g 1 n' | n' <- [base, n, n+1]]\n\ninstance Show (Int-> Int -> Int) where \n  show a = showOp a where\n    showOp op = case lookup op ops of\n                  Just a -> a\n                  otherwise  -> \"undefined\"\n    ops = [((+),\"plus\")\n          ,((-),\"minus\")\n          ,((*),\"times\")\n          ,(div,\"divide\")]\n```\n\n\nOutput:\n\n```\n*Main> (\\a b -> a * 3 - b) :: (Int->Int->Int)\nundefined\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic arithmetic on variables\r\n                \r\nSo I have a doubt as to what the following piece of code does to the variable.\n\n```\nint t=0;\n\n\nt +50;\n\n\ncout<<t;\n```\n\n\nDoes the 2nd line work the same as as t+=50? I came across this is in a question and quite didn't know what it did. \n    ", "Answer": "\r\n\n  Does the 2nd line work the same as as t+=50?\n\n\nNo. the statement ```\nt + 50;```\n is not an assignment statement, it is an expression whose result is ignored because it is not assigned to any variable.\n\n```\nt+=50;```\n is simply equivalent to ```\nt = t + 50;```\n\n\nso the output here will still be ```\n0```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Should be basic arithmetic\r\n                \r\nFor some reason this isn't storing the variable correctly giving me a value of \"0\" after the equation.\n\n```\nif ($power_weight  == '') {\n    $power_weight = NULL;\n}\nelse {\n    $power_weight = $power_weight / 1.01387 * 2.20462262;\n}\necho $power_weight;\n```\n\n\nWhen a similar equation works fine\n\n```\nif ($zero_sixty == '') {\n    $zero_sixty = NULL;\n}\nelse {\n    $zero_sixty = $zero_sixty * 60 / 62;\n}\necho $zero_sixty;\n```\n\n    ", "Answer": "\r\nWhat's the value of power_weight before this snippet? Is it a string or a float? I'd encourage you to parse it by doing floatval() on it. \n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic arithmetic in GWT CssResource\r\n                \r\nI'm looking for a way to do something like this:\n\n```\n// style.css\n@def borderSize '2px';\n\n.style {\n  width: borderSize + 2;\n  height: borderSize + 2;\n}\n```\n\n\nwhere the width and height attributes would end up having values of 4px.\n    ", "Answer": "\r\nSometimes I use the following:\n\n```\n@eval BORDER_SIZE_PLUS_2 2+2+\"px\"; /* GWT evaluates this at compile time! */\n```\n\n\nOddly, this only works, if you don't put any spaces between the ```\n+```\n operator and the operands. Also, in @eval you can't use constants that were previously defined by @def. You can however use constants that are defined as static fields in one of your Java classes:\n\n```\n@eval BORDER_SIZE_PLUS_2 com.example.MyCssConstants.BORDER_SIZE+2+\"px\";\n```\n\n\nOr you could let the calculation be performed completely by Java:\n\n```\n@eval WIDTH com.example.MyCssCalculations.width(); /* static function, \n                                                      no parameters! */\n@eval HEIGHT com.example.MyCssCalculations.height();\n.style {\n    width: WIDTH;\n    height: HEIGHT;\n}\n```\n\n\nBut what I would actually like to do is very similar to your suggestion:\n\n```\n@def BORDER_SIZE 2;\n.style {\n    width: value(BORDER_SIZE + 2, 'px'); /* not possible */\n    height: value(BORDER_SIZE + 3, 'px');\n}\n```\n\n\nI don't think that's possible in GWT 2.0. Maybe you find a better solution - here's the Dev Guide page on this topic.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Python 3: Basic arithmetic operations\r\n                \r\nI am trying to write a program to perform simple arithmetic operations.\nI want the program to prompt the user for two numbers, and then calculate five\nresults:\n\n\nthe sum\nthe difference\nthe product\nthe quotient according to both integer\nthe floating point division.\n\n\nNow, I remember that in Python 2, that there was raw_input for strings and input for numbers in general.\nHowever, I am just learning Python 3, and input is by default a string, and for numbers I have to specify the type of number I wish to have: i.e. int(input()) or float(input()).\n\nSo, for example, let's assume that I want to have exactly this output (using inputs 4 and 2.5):\n\n```\nWhat is the first number? 4\nWhat is the second number? 2.5\nThe sum is 6.5\nThe difference is 1.5\nThe product is 8.0\nThe integer quotient is 2\nThe floating-point quotient is 1.6\n```\n\n\nI would type this code in Python 2:\n\n```\nx=input (\"What is the first number? \")\ny=input (\"What is the second number? \")\n\nprint \"The sum is\", x+y\nprint \"The difference is\", x-y\nprint \"The product is\", x*y\nprint \"The integer quotient is\", int(x)/int(y)\nprint \"The floating-point quotient is\", float(x)/float(y)\n```\n\n\nHowever, I can't get it done in Python 3. This is the (wrong) code I am using:\n\n```\nx = int(input(\"What is the first number? \"))\ny = int(input(\"What is the second number? \"))\n\nprint(\"The sum is: \", x+y)\nprint(\"The difference is: \", x-y)\nprint(\"The product is: \", x*y)\nprint(\"The integer quotient is: \", x/y)\nprint(\"The floating-point quotient is: \", x/y)\n```\n\n\nObviously, I get an error message because my second input (y) equals 4.5, which is a float and not an int as defined by my input. I didn't bother putting float(x)/float(y) for the floating-point quotient because that would also be contradictory (thus an error).\n\nI could of course put float instead of int like this:\n\n```\nx = float(input(\"What is the first number? \"))\ny = float(input(\"What is the second number? \"))\n```\n\n\nBut in this case, I will get 10.0 for my product (not 10), and my integer quotient is a float (1.6 instead of 2)\n\nI find it really frustrating that in Python 3 I can't ask for a general type number for input (without having to specify if it will be float or int). Therefore, I'm stuck on such simple program, and would greatly appreciate any solution/ explanation.\n    ", "Answer": "\r\nYou can try to parse the input as an ```\nint```\n, and if that doesn't work, treat it as a ```\nfloat```\n:\n\n```\ndef float_or_int(x):\n    try:\n        return int(x)\n    except ValueError:\n        return float(x)\n\nx = float_or_int(input(\"What's x?\"))\ny = float_or_int(input(\"What's y?\"))\n```\n\n\nTo get flooring division in Python 3, you have to explicitly ask for it with the ```\n//```\n operator:\n\n```\nprint(\"The integer quotient is:\", x//y)\n```\n\n\nNote that this \"integer quotient\" operation doesn't really make sense for floating-point input.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "What does \"really big int\" mean in terms of time complexity and basic arithmetic operations\r\n                \r\nI learnt that basic arithmetic operations are executed in constant time ```\nO(1)```\n unless operands are \"really big\". So I tried this expecting ```\nvia_str_method```\n will execute faster when some boundary is reached:\n```\nimport time\nimport math\n\nstart_time = time.time()\n\n\nclass OddNumbers:\n\n    ODD_ONES = [\"1\", \"3\", \"5\", \"7\", \"9\"]\n\n    def __init__(self, n):\n        assert type(n) == int\n        self.n = n\n        self.str_n = str(n)\n\n    def via_str_method(self):\n        return True if self.str_n[-1] in self.ODD_ONES else False\n\n    def via_mod_method(self):\n        return True if self.n % 2 != 0 else False\n\n\nn = int(math.pow(2, 1023))\nodd_one = OddNumbers(n)\n\nif odd_one.via_str_method():\n    print(\"Number is ODD\")\nelse:\n    print(\"Number is EVEN\")\n\nstr_end_time = time.time()\nprint(f\"STR method time: {str_end_time - start_time}\")\n\nif odd_one.via_mod_method():\n    print(\"Number is ODD\")\nelse:\n    print(\"Number is EVEN\")\n\nprint(f\"MOD method time: {time.time() - str_end_time}\")\n```\n\nBut even with ```\n2**1023```\n (which I thought is \"big enough\"), both methods still executes in constant time.\nI am wondering if someone could explain to me what is considered \"really big int\" and how to generate one and use it in code.\n    ", "Answer": "\r\nIn the first method you take a char from ```\nself.str_n```\n using index. Index accessing is constant time. Next you check if it's in the list ```\nODD_ONES```\n. Searching a list is linear time, however the ```\nODD_ONES```\n is of fixed length irrespective of ```\nn```\n. Hence that's also constant time.\nIn the second method you check for divisibility by 2. No matter how big the number is, the digit in units place is what determines the divisibility. Hence again this is constant time.\nThe people behind Python (and any other mainstream language) are really smart people ;)\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Proving basic arithmetic properties\r\n                \r\nIm trying the theorem proving tool of TLA+ to prove safety properties of an algorithm. But i found that TLAPS cant figure very \"simple\" mathematical facts.\n\nMy first problem was with:\n\n```\nEXTENDS Naturals\nCONSTANTS x,y\nASSUME x \\in Nat /\\ y \\in Nat\nLEMMA x=y+1 => y<x\n  OBVIOUS\n```\n\n\nTLAPS cant do it alone with any backend prover. I also tried using specific backend provers with other tactics:\n\n```\nLEMMA x=y+1 => y<x\n  BY IsaM(\"blast\")\n```\n\n\nBut also failed. In similar way, other kind of simple facts cant be checked, for example:\n\n```\nLEMMA x<y => x<y+0\n```\n\n\nI have used some of those backend theorem provers in the past, like the Z Solver or Isabelle, and from what i remember they are very powerful.  I think im missing something here... or i don't understand the TLAPS proof organizer or i still need to load some other module with axioms?.\n    ", "Answer": "\r\nIt seems you hit a bug in TLAPM -- at least in the development version on my machine. The reason is that the SMT translation does not pick up the second assumption. Without the domain restriction, none of the assertions should be provable. As a hot fix, I added the domain restrictions to the local lemma. I can now prove:\n\n```\nLEMMA ASSUME x \\in Nat, y \\in Nat\n      PROVE x=y+1 => y < x BY SMT\n```\n\n\nAnother way to get around it for the moment is to have named assumptions which are invoked whenever needed:\n\n```\nASSUME DOM == x \\in Nat /\\ y \\in Nat\nLEMMA x=y+1 => y < x BY SMT, DOM\n```\n\n\nshould go through. In both cases you have to add ```\nEXTENDS TLAPS```\n at the beginning of your spec to enable the ```\nSMT```\n keyword.\n\nI will also report the bug to the maintainers.\n\nUpdate: it seems that global assumptions are generally disregarded by TLAPM (afaik for performance reasons). The version with named assumptions is the preferred way to go.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Using basic arithmetics for calculating Pi with arbitary precision\r\n                \r\nI am looking for a formula/algorithm to calculate PI~3.14 in a given precision.\n\nThe formula/algorithm must have only very basic arithmetic as\n\n\n+: Addition\n-: Subtraction\n*: Multiplication\n/: Divison\n\n\nbecause I want to implement these operations in C++ and want to keep the implementation as simple as possible (no bignum library is allowed).\n\nI have found that this formula for calculating Pi is pretty simple:\n\n```\nPi/4 = 1 - 1/3 + 1/5 - 1/7 + ...  = sum( (-1)^(k+1)/(2*k-1) , k=1..inf )\n```\n\n\n(note that (-1)^(k+1) can be implemented easily by above operators).\n\nBut the problem about this formula is the inability to specify the number of digits to calculate. In other words, there is no direct way to determine when to stop the calculation.\n\nMaybe a workaround to this problem is calculating the difference between ```\nn-1```\nth and ```\nn```\nth calculated term and considering it as the current error.\n\nAnyway, I am looking for a formula/algorithm that have these properties and also converges faster to Pi\n    ", "Answer": "\r\nCodepad link:\n\n```\n#include <iostream>\n#include <cmath>\nint main()\n{\n    double p16 = 1, pi = 0, precision = 10;\n\n    for(int k=0; k<=precision; k++)\n    {\n        pi += 1.0/p16 * (4.0/(8*k + 1) - 2.0/(8*k + 4) - 1.0/(8*k + 5) - 1.0/(8*k+6));\n        p16 *= 16;\n    }\n    std::cout<<std::setprecision(80)<<pi<<'\\n'<<M_PI;\n}\n```\n\n\nOutput:\n\n```\n3.141592653589793115997963468544185161590576171875\n3.141592653589793115997963468544185161590576171875\n```\n\n\nThis is actually the Bailey-Borwein-Plouffe formula, also taken from the link from wikipedia.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Perform Basic Arithmetic in single text box\r\n                \r\nIn visual c#, \n\nI have a textbox and a button. When you enter a arithmetical operation in the textbox (eg \"1+1\") and click the button, \n\nI want to 1+1 value in the textbox to change and be replaced with the answers of the arithmetic( that is 2)\n\nSo if you input 10 - 4 in the text box and press the button, the same textbox should change the value to 6.\n\nI don't know if this is possible.\n    ", "Answer": "\r\nyour textbox has a .Text property pertaining the current string value. You will want to map a conversion and calculation to an event such as pressing enter or clicking a button.\n\nOne of the simplest ways to do this is use the Compute method of the DataTable class.\n\nI have concatenated a statement which can do this on 1 line\n\n```\nmyTextBox.Text = $\"{new DataTable().Compute($\"{myTextBox.Text.Trim()}\", \"\")}\";\n```\n\n\nThis can be implemented in a number of ways, here's how I would do it:\n\n```\npublic partial class Form1 : Form\n{\n    public Form1() {\n        InitializeComponent();\n    }\n\n    private void Calculate_btn_Click(object sender, EventArgs e) {\n        InputTextbox.Text = Evaluate(InputTextbox.Text);\n    }\n\n    private string Evaluate(string equation) {\n        try {\n            return $\"{new DataTable().Compute($\"{equation.Trim()}\", \"\")}\";\n        } catch (Exception Ex) {\n            MessageBox.Show($\"{Ex.Message}\\n\\n{equation.Trim()}\", Ex.Source, MessageBoxButtons.OK, MessageBoxIcon.Information);\n        }\n        return null;\n    }\n\n    private void InputTextbox_KeyPress(object sender, KeyPressEventArgs e) {\n        if (e.KeyChar == (char)13) {\n            InputTextbox.Text = Evaluate(InputTextbox.Text);\n        }\n    }\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Program for basic arithmetic operations\r\n                \r\n\n\nThis is how i have coded, but i am not able to get the result as i want\n\n```\ndef arith():\n    import random\n    operators = (\"+\",\"*\")\n\n    for i in range(4):\n        x = random.randint(1,10)\n        y = random.randint(1,10)\n\n        choose_operators = random.choice(operators)\n        print (x,choose_operators,y)\n        t1 = int(input(\"what is the answer:\"))\n        counter = 0\n        if t1 == (x,operators,y):\n            counter = counter + 1\n\n            if counter > 3:\n                print(\"Congratulations!\")\n\n            else:\n                print(\"Please ask your teacher for help\")\n```\n\n\nI get the result as \n\narith()\n\n7 * 3\n\nwhat is the answer:21\n\n3 + 2\n\nwhat is the answer:5\n\n8 * 9\n\nwhat is the answer:72\n\n3 * 9\n\nwhat is the answer:2\n\nThat's it!\n\nHow do i make it count the number of correct answers and print the command i have written ?\n\nThanks in advance\n    ", "Answer": "\r\nThe line ```\nif t1 == x,operators,y```\n is not operating on ```\nx```\n and ```\ny```\n. The operator is the form of a string so it is checking if ```\nt1```\n is equal to, for example: ```\n(7, '*', 3)```\n. To actually do the operation you can use ```\neval()```\n Also, you need to fix some stuff in your code so it only checks ```\ncounter```\n after the ```\nfor```\n loop is finished.\n\n```\ndef arith():\n    import random\n    operators = (\"+\",\"*\")\n    counter = 0\n\n\n    for i in range(4):\n        x = random.randint(1,10)\n        y = random.randint(1,10)\n\n        choose_operators = random.choice(operators)\n        print (x,choose_operators,y)\n        t1 = int(input(\"what is the answer:\"))\n        if t1 == eval(str(x) + choose_operators + str(y)):\n            counter = counter + 1\n\n    if counter > 3:\n        print(\"Congratulations!\")\n\n    else:\n        print(\"Please ask your teacher for help\")\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic arithmetic within a function not working\r\n                \r\nI have a PHP function I'm using to count files within a directory.\n\n```\nfunction getFileCount($path) {\n$size = 0;\n$ignore = array('.','..','cgi-bin','.DS_Store');\n$files = scandir($path);\nforeach($files as $t) {\n    if(in_array($t, $ignore)) continue;\n    if (is_dir(rtrim($path, '/') . '/' . $t)) {\n        $size += getFileCount(rtrim($path, '/') . '/' . $t);\n    } else {\n        $size++;\n    }   \n}\nreturn $size;\n}\n```\n\n\nThat works correctly, but I need to divide $size by 2 before returning.\n\nIf I do 'return $size / 2;' then 60 becomes 22.5. 72 becomes 19.125. It doesn't make sense to me. I've also tried intdiv(), tried multiplying by 0.5, etc., and I've gotten varying results but none of them correct.\n\nI know this is probably something extremely basic.\n\nIf I do the division outside of the function it works correctly, but I want to handle that before returning an integer.\n    ", "Answer": "\r\nCan you create a wrapper function?\n\n```\nfunction getFileCountDivided($path) {\n    return getFileCount($path) / 2;\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Calculator won't perform basic arithmetic calculations\r\n                \r\nI am relatively new to VBA and have been trying to learn it. I started by trying to code a calculator and programming it to perform basic calculations such as add, divide, subtract, and multiply. However, when I try to execute those function, using the code seen below, the calculator does not compile and perform the said calculations.\n```\nPrivate Sub cmdBtnEql_Click()\n\nOn Error GoTo ErrOcccered\n     \n     If txtDisplay = \"Cannot divide by Zero\" Then txtDisplay = Empty\n     \n     \n     If txtRes <> \"\" And calVal Then\n        FNum = Val(txtDisplay): SNum = Val(txtRes)\n        Select Case calVal\n            Case \"Add\"\n                txtRes = FNum + SNum\n            Case \"Minus\"\n                txtRes = FNum - SNum\n            Case \"Multiplication\"\n                txtRes = FNum * SNum\n            Case \"Divide\"\n                If SNum = 0 Then\n                    txtRes = \"Cannot divide by zero\"\n                Else\n                    txtRes = FNum / SNum\n                End If\n            Case Else\n        End Select\n    End If\nErrOcccered:\n\nEnd Sub\n```\n\nHowever, this procedure does not actually perform the aforementioned calculations. I am able to click on the buttons and the corresponding numbers do display in the text-box on the user-form, with no calculations done. This code is not mine personally, I am using another code I found online and trying to understand how all the syntax and semantics work within VBA. I appreciate your help! Thanks\n    ", "Answer": "\r\nPut a break point on this line of your code.\n```\nIf txtRes <> \"\" And calVal Then```\n\nThe step through your code with F8 and find out what it does exactly.\nYou will find that it never gets past this line because there is a test whether ```\ncalVal```\n has a value other than zero. Of course, calVal is supposed to hold a word, like \"Add\", and therefore can never have a numeric value other than zero.\nChange this test to\n```\nIf txtRes <> \"\" And len(calVal) > 0 Then\n```\n\nbut still use the method with F8 to check on your code.\nBTW, ```\ntxtRes = FNum + SNum```\n is technically correct but actually confusing. One of the commentators above mistook txtRes to be a variable. The better syntax is to include the default property in the code.\n```\ntxtRes.Value = FNum + SNum\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "problems with basic arithmetic in a function (Matlab)\r\n                \r\nI have defined a really basic function in matlab.  It takes no input and returns an array of 10 floating point numbers.\nThe problem I have is that when I run the function to return the array I want I get incorrect values, however when I substitute in a value and simply print out the value from within the function I get the correct answer?!\nI've posted samples from the code below:\n\n```\n% Calculate the terms in our expression\nFirstTerm  = sin(Alpha)*(atan(x+d)-atan(x-d));\nSecondTerm = cos(Alpha)*0.5*log(((x+d).^2+h.^2)/((x-d).^2+h.^2));\n\n% Combine and return result\nResult = 2 * (FirstTerm - SecondTerm)\n\nFirstTermTemp  = sin(Alpha)*(atan(-8+d)-atan(-8-d));\nSecondTermTemp = cos(Alpha)*0.5*log(((-8+d).^2+h.^2)/((-8-d).^2+h.^2));\nResultTemp = 2 * (FirstTermTemp - SecondTermTemp)\n```\n\n\nThe array I want to calculate for starts at -8 so the results should match.  Does anyone have any idea why they wouldn't?\nCheers\nJack\n    ", "Answer": "\r\nYou have left off a ```\n.```\n before your ```\n/```\n\n\n```\n% //Calculate the terms in our expression\nFirstTerm  = sin(Alpha)*(atan(x+d)-atan(x-d));\nSecondTerm = cos(Alpha)*0.5*log(((x+d).^2+h.^2)./((x-d).^2+h.^2));\n% //Combine and return result\nResult = 2 * (FirstTerm - SecondTerm)\n\nResult =\n\n Columns 1 through 7:\n\n   0.097944   0.133866   0.208270   0.425797   0.692904  -0.140347  -0.124798\n\n Columns 8 and 9:\n\n  -0.095581  -0.076166\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic arithmetic giving strange value\r\n                \r\nI am trying to compute a value which takes the functional form x+10(y+10(z+10(w+10(u+1000v))))). Let's say x = y = z = w = 1, u = 3 and v = 2. Then this should come out to 20031111. I'd like this as a floating point number, not an integer. When I use the code\n\n```\noutput = x+10(y+10(z+10(w+10(u+1000v)))))\n```\n\n\nI get 20031111 as expected. However, when I use\n\n```\noutput = 1.0(x+10(y+10(z+10(w+10(u+1000v))))))\n```\n\n\nI get 20031112.000, which is wrong. What is going on here?\n\nBy the way, if I pre-multiply by 1.D0 instead of 1.0, I get the right answer again. But I don't understand why.\n    ", "Answer": "\r\nFloating point numbers are approximations of real numbers. A default real type in Fortran cannot represent a number with 8 significant algarisms preciselly. The best approximation of the value will be then stored in the variable, and in your case, it is ```\n2.0031112E+07```\n.\n\nYou can do the following test:\n\n```\nreal :: output\ninteger :: x = 1, y = 1, z = 1, w = 1, u = 3, v = 2\n! (...)\noutput = 1.0 *(x + 10 *(y + 10 * (z + 10 * (w + 10 * (u + 1000 * v)))))\nprint*, output + 2   ! prints: 2.0031114+07\nprint*, output + 1   ! prints: 2.0031112+07\nprint*, output       ! prints: 2.0031112+07\nprint*, output - 1   ! prints: 2.0031112+07\nprint*, output - 2   ! prints: 2.0031110+07\n```\n\n\nAs a solution, you have to use a real type with a kind parameter that can represent the data with the precision you want. Fortran provides an intrinsic function to help you choose the minimum kind that fits a precision, ```\nselected_real_kind```\n.\n\nExample:\n\n```\ninteger, parameter :: wp = selected_real_kind(8) ! 8 precision digits\nreal(wp) :: output    ! <- here you use wp as the kind parameter\ninteger :: x = 1, y = 1, z = 1, w = 1, u = 3, v = 2\n! (...)\n! you can also apply the kind parameter to litreals as below, like 1.0_wp\noutput = 1.0_wp *(x + 10 *(y + 10 * (z + 10 * (w + 10 * (u + 1000 * v)))))\nprint*, output + 2   ! prints: 20031113.0000000\nprint*, output + 1   ! prints: 20031112.0000000\nprint*, output       ! prints: 20031111.0000000\nprint*, output - 1   ! prints: 20031110.0000000\nprint*, output - 2   ! prints: 20031109.0000000\n```\n\n\n\n  By the way, if I pre-multiply by 1.D0 instead of 1.0, I get the right answer again. But I don't understand why.\n\n\nThe suffix ```\nD0```\n is a convenient shorthand for declaring a real literal with the kind parameter corresponding to ```\ndouble precision```\n type specification, that (in your system) has enough precision to accurately represent the value. (Note that, for it to work, you would need do declare ```\noutput```\nas a ```\ndouble precision```\n variable.)\n\nIs is recommended, though, to use the approach I proposed before, that is portable and gives you more control over the data type.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Elisp: What is the time complexity for basic arithmetic operations using calc functions\r\n                \r\nThis includes addition, subtraction, multiplication, and division.\n\nI'm asked to analyze some algorithms that rely heavily on calling ```\ncalc-eval```\n to work. My teacher does want us to account for the complexity of basic operations when working with large numbers.\n\nHow do these arithmetic operations scale as the size of the numbers increase?\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "PHP floating point error with basic arithmetic operation [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Compare floats in php\r\n                            \r\n                                (17 answers)\r\n                            \r\n                    \r\n                Closed 9 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI am new to PHP and trying to perform a simple arithmetic addition and comparison. I have an array with some decimal values and after adding all the values, I am trying to compare it to 1. My array is:\n\n```\n$myArray=[0.2,0.7,0.1] \n```\n\n\nand my code is:\n\n```\n$sum=0;\nforeach($myArray as $val){\n    $sum+=$val;             \n}\n```\n\n\nHere, the sum comes out to be 1. But when I compare it using the following code: \n\n```\nif($sum!=1)\n{\n    echo \"Good\";\n}\nelse\n{\n    echo \"Bad\";\n}\n```\n\n\nit echoes ```\n\"Good\"```\n.\n\nHowever, when my array contains values 0.8 and 0.2, it echoes ```\n\"Bad\"```\n. Can anyone help me on this?\n    ", "Answer": "\r\nIf you check the PHP docs on floating-point numbers: php.net/manual/en/language.types.float.php, there is a huge warning on the page.\n\n\n\"Floating point numbers have limited precision. Although it depends on the system, PHP typically uses the IEEE 754 double precision format, which will give a maximum relative error due to rounding in the order of 1.11e-16. Non elementary arithmetic operations may give larger errors, and, of course, error propagation must be considered when several operations are compounded.\"\n\n\nThus, you could get unexpected results such as 0.2 + 0.7 = 0.900000000001. It's simply because computers have a hard time representing decimals. Binary was really built for integers.\n\nCareful in your logic; I think you meant ```\nif($sum == 1) echo \"Good\"```\n, etc. In that case, 0.2+0.7+0.1 would echo ```\n\"Bad\"```\n, because it's totally possible that 0.2+0.7+0.1 = 1.00000001 or 0.99999999. On the other hand, adding a smaller number of floats together decreases the error, so 0.8+0.2 is more precise than 0.2+0.7+0.1.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "What are the relative cycle times for the 6 basic arithmetic operations?\r\n                \r\nWhen I try to optimize my code, for a very long time I've just been using a rule of thumb that addition and subtraction are worth 1, multiplication and division are worth 3, squaring is worth 3 (I rarely use the more general ```\npow```\n function so I have no rule of thumb for it), and square roots are worth 10. (And I assume squaring a number is just a multiplication, so worth 3.)\n\nHere's an example from a 2D orbital simulation. To calculate and apply acceleration from gravity, first I get distance from the ship to the center of earth, then calculate the acceleration.\n\n```\nD = sqrt( sqr(Ship.x - Earth.x) + sqr(Ship.y - Earth.y) ); // this is worth 19\nA = G*Earth.mass/sqr(D);                                   // this is worth 9, total is 28\n```\n\n\nHowever, notice that in calculating D, you take a square root, but when using it in the next calculation, you square it. Therefore you can just do this:\n\n```\nA = G*Earth.mass/( sqr(Ship.x - Earth.x) + sqr(Ship.y - Earth.y) ); // this is worth 15\n```\n\n\nSo if my rule of thumb is true, I almost cut in half the cycle time.\n\nHowever, I cannot even remember where I heard that rule before. I'd like to ask what is the actual cycle times for those basic arithmetic operations?\n\nAssumptions:\n\n\neverything is a 64-bit floating number in x64 architecture.\neverything is already loaded into registers, so no worrying about hits and misses from caches or memory.\nno interrupts to the CPU\nno if/branching logic such as look ahead prediction\n\n\nEdit: I suppose what I'm really trying to do is look inside the ALU and only count the cycle time of its logic for the 6 operations. If there is still variance within that, please explain what and why.\n\nNote: I did not see any tags for machine code, so I chose the next closest thing, assembly. To be clear, I am talking about actual machine code operations in x64 architecture. Thus it doesn't matter whether those lines of code I wrote are in C#, C, Javascript, whatever. I'm sure each high-level language will have its own varying times so I don't wanna get into an argument over that. I think it's a shame that there's no machine code tag because when talking about performance and/or operation, you really need to get down into it.\n    ", "Answer": "\r\nAt a minimum, one must understand that an operation has at least two interesting timings: the latency and the throughput.\n\nLatency\n\nThe latency is how long any particular operation takes, from its inputs to its output. If you had a long series of operations where the output of one operation is fed into the input of the next, the latency would determine the total time. For example, an integer multiplication on most recent x86 hardware has a latency of 3 cycles: it takes 3 cycles to complete a single multiplication operation. Integer addition has a latency of 1 cycle: the result is available the cycle after the addition executes. Latencies are generally positive integers. \n\nThroughput\n\nThe throughput is the number of independent operations that can be performed per unit time. Since CPUs are pipelined and superscalar, this is often more than the inverse of the latency. For example, on most recent x86 chips, 4 integer addition operations can execute per cycle, even though the latency is 1 cycle. Similarly, 1 integer multiplication can execute, on average per cycle, even though any particular multiplication takes 3 cycles to complete (meaning that you must have multiple independent multiplications in progress at once to achieve this).\n\nInverse Throughput\n\nWhen discussing instruction performance, it is common to give throughput numbers as \"inverse throughput\", which is simply ```\n1 / throughput```\n. This makes it easy to directly compare with latency figures without doing a division in your head. For example, the inverse throughput of addition is 0.25 cycles, versus a latency of 1 cycle, so you can immediately see that you if you have sufficient independent additions, they use only something like 0.25 cycles each.\n\nBelow I'll use inverse throughput.\n\nVariable Timings\n\nMost simple instructions have fixed timings, at least in their reg-reg form. Some more complex mathematical operations, however, may have input-dependent timings. For example, addition, subtraction and multiplication usually have fixed timings in their integer and floating point forms, but on many platforms division has variable timings in integer, floating point or both. Agner's numbers often show a range to indicate this, but you shouldn't assume the operand space has been tested extensively, especially for floating point. \n\nThe Skylake numbers below, for example, show a small range, but it isn't clear if that's due to operand dependency (which would likely be larger) or something else.\n\nPassing denormal inputs, or results that themselves are denormal may incur significant additional cost depending on the denormal mode. The numbers you'll see in the guides generally assume no denormals, but you might be able to find a discussion of denormal costs per operation elsewhere.\n\nMore Details\n\nThe above is necessary but often not sufficient information to fully qualify performance, since you have other factors to consider such as execution port contention, front-end bottlenecks, and so on. It's enough to start though and you are only asking for \"rule of thumb\" numbers if I understand it correctly.\n\nAgner Fog\n\nMy recommended source for measured latency and inverse throughput numbers are Agner's Fogs guides. You want the files under 4. Instruction tables: Lists of instruction latencies, throughputs and micro-operation breakdowns for Intel, AMD and VIA CPUs, which lists fairly exhaustive timings on a huge variety of AMD and Intel CPUs. You can also get the numbers for some CPUs directly from Intel's guides, but I find them less complete and more difficult to use than Agner's.\n\nBelow I'll pull out the numbers for a couple of modern CPUs, for the basic operations you are interested in.\n\nIntel Skylake\n\n```\n                         Lat  Inv Tpt\nadd/sub (addsd, subsd)     4      0.5\nmultiply (mulsd)           4      0.5\ndivide (divsd)         13-14        4\nsqrt (sqrtpd)          15-16      4-6\n```\n\n\nSo a \"rule of thumb\" for latency would be add/sub/mul all cost 1, and division and sqrt are about 3 and 4, respectively. For throughput, the rule would be 1, 8, 8-12 respectively. Note also that the latency is much larger than the inverse throughput, especially for add, sub and mul: you'd need 8 parallel chains of operations if you wanted to hit the max throughput.\n\nAMD Ryzen\n\n```\n                         Lat  Inv Tpt\nadd/sub (addsd, subsd)     3      0.5\nmultiply (mulsd)           4      0.5\ndivide (divsd)          8-13      4-5\nsqrt (sqrtpd)          14-15      4-8\n```\n\n\nThe Ryzen numbers are broadly similar to recent Intel. Addition and subtraction are slightly lower latency, multiplication is the same. Latency-wise, the rule of thumb could still generally be summarized as 1/3/4 for add,sub,mul/div/sqrt, with some loss of precision.\n\nHere, the latency range for divide is fairly large, so I expect it is data dependent.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic arithmetic from user input in bash\r\n                \r\nNew to bash on my course, generally enjoying it but as soon as we've been given some coursework it's thrown a spanner in the works. \nThe assignment is essentially to take an arbitrary amount of numbers from the user (using the read command), add them up, and return the result.\n\nThe previous task included a fixed amount of 10 numbers, for which i wrote:\n\n```\n#!/bin/sh\n\n\necho \"Please enter 10 numbers\"\n\nread num1 \nread num2 \nread num3 \nread num4 \nread num5 \nread num6 \nread num7 \nread num8 \nread num9 \nread num10\n\n\nresult=$((num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10))\n\n\necho The result is $result \n```\n\n\nNow this works fine, but I just know I'm making it harder for myself/too long, and seen as the task I'm struggling with is supposed to come from editing that script that takes 10 numbers, clearly im missing something pretty basic to take in numbers from the user & add them together without writing it 10  different times \n\nA little guidance on user input with arbitrary numbers would be great\n    ", "Answer": "\r\nYou can loop over a prompt and sum one number at a time to the total.\n\n```\ntotal=0\nfor((i=1; i<=10; i++)); do\n    read -p \"Please enter a number: \" -r num\n    ((total+=num))\ndone\necho \"The total is $total\"\n```\n\n\nThe \"C-style\" ```\nfor```\n loop syntax is a Bash extension; if you need your script to be portable to POSIX ```\nsh```\n you can do something like\n\n```\nfor i in $(seq 10); do\n    :\n```\n\n\nor if you can't rely on ```\nseq```\n being installed, the age-old fugly\n\n```\ni=1\nwhile [ \"$i\" -le 10 ]; do\n    :\n    i=$(expr \"$i\" + 1)\ndone\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Java basic arithmetic and data type\r\n                \r\nSilly question but can't find the answer.\n\n```\n    double divider = 1000;\n\n    List<Long> listLong = new ArrayList<>();\n    listLong.add(1500L);\n    listLong.add(8000L);\n\n    for (Long val : listLong)\n    {\n        System.out.println((val/ divider));\n    }\n```\n\n\nGives me \n\n```\n1.5\n8.0\n```\n\n\nand I want\n\n```\n1.5\n8\n```\n\n\n```\ndistance```\n and ```\ndistance2```\n are Long and can't be changed. \n```\ndivider```\n has to be the same thing for both cases.\n\nANWSER:\n\nThanks to  KevinO\n\n```\n    DecimalFormat df = new DecimalFormat(\"#.##\");\n\n    for (Long val : listLong)\n    {\n        System.out.println(df.format(val/ divider));\n    }\n```\n\n    ", "Answer": "\r\nTry to use ```\nDecimalFormat```\n  like this:\n\n```\n  DecimalFormat df = new DecimalFormat(\"###.#\");\n  System.out.println(df.format(distance2 / divider));\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Enum with Hex value basic arithmetic\r\n                \r\nSay we have an enum as:\n\n```\npublic enum SomeEnum\n{\n     None = 0x0000,\n     Value1 = 0x0001,        \n     Value2 = 0x0002,\n     Value3 = 0x0200\n     Defautl = Value1 | Value2\n     SomeOtherDefault = Value1 | Value3\n}\n```\n\n\nSo in such a case, for a given SomeEnum type value, how can we check if Value2 is present and then toggle it (set if not-set or viceversa)?\nGiven value could be as: \n\n```\ntempValue = Value1 | Value3 | Value2\n```\n\n\nIt must be a simple thing, but I am not used to hex values in enums.\n    ", "Answer": "\r\nTo toggle it:\n\n```\nmyValue ^= Value2;\n```\n\n\nTo check if it has it:\n\n```\nif (myValue & Value2 != 0)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why is ONE basic arithmetic operation in for loop body executed SLOWER THAN TWO arithmetic operations?\r\n                \r\nWhile I experimented with measuring time of execution of arithmetic operations, I came across very strange behavior. A code block containing a ```\nfor```\n loop with one arithmetic operation in the loop body was always executed slower than an identical code block, but with two arithmetic operations in the ```\nfor```\n loop body. Here is the code I ended up testing:\n\n```\n#include <iostream>\n#include <chrono>\n\n#define NUM_ITERATIONS 100000000\n\nint main()\n{\n    // Block 1: one operation in loop body\n    {\n        int64_t x = 0, y = 0;\n        auto start = std::chrono::high_resolution_clock::now();\n\n        for (long i = 0; i < NUM_ITERATIONS; i++) {x+=31;}\n\n        auto end = std::chrono::high_resolution_clock::now();\n        std::chrono::duration<double> diff = end-start;\n        std::cout << diff.count() << \" seconds. x,y = \" << x << \",\" << y << std::endl;\n    }\n\n    // Block 2: two operations in loop body\n    {\n        int64_t x = 0, y = 0;\n        auto start = std::chrono::high_resolution_clock::now();\n\n        for (long i = 0; i < NUM_ITERATIONS; i++) {x+=17; y-=37;}\n\n        auto end = std::chrono::high_resolution_clock::now();\n        std::chrono::duration<double> diff = end-start;\n        std::cout << diff.count() << \" seconds. x,y = \" << x << \",\" << y << std::endl;\n    }\n\n    return 0;\n}\n```\n\n\nI tested this with different levels of code optimization (```\n-O0```\n,```\n-O1```\n,```\n-O2```\n,```\n-O3```\n), with different online compilers (for example onlinegdb.com), on my work machine, on my hame PC and laptop, on RaspberryPi and on my colleague's computer. I rearranged these two code blocks, repeated them, changed constants, changed operations (```\n+```\n, ```\n-```\n, ```\n<<```\n, ```\n=```\n, etc.), changed integer types. But I always got similar result: the block with one line in loop is SLOWER than block with two lines:\n\n\n  1.05681 seconds. x,y = 3100000000,0\n  0.90414 seconds. x,y = 1700000000,-3700000000\n\n\nI checked the assembly output on https://godbolt.org/ but everything looked like I expected: second block just had one more operation in assembly output.\n\nThree operations always behaved as expected: they are slower than one and faster than four. So why two operations produce such an anomaly?\n\nEdit:\n\nLet me repeat: I have such behaviour on all of my Windows and Unix machines with code not optimized. I looked at assembly I execute (Visual Studio, Windows) and I see the instructions I want to test there. Anyway if the loop is optimized away, there is nothing I ask about in the code which left. I added that optimizations notice in the question to avoid \"do not measure not optimized code\" answers because optimizations is not what I ask about. The question is actually why my computers execute two operations faster than one, first of all in code where these operations are not optimized away. The difference in time of execution is 5-25% on my tests (quite noticeable).\n    ", "Answer": "\r\nThis effect only happens at ```\n-O0```\n (or with ```\nvolatile```\n), and is a result of the compiler keeping your variables in memory (not registers).  You'd expect that to just introduce a fixed amount of extra latency into a loop-carried dependency chains through ```\ni```\n, ```\nx```\n, and ```\ny```\n, but modern CPUs are not that simple.\nOn Intel Sandybridge-family CPUs, store-forwarding latency is lower when the load uop runs some time after the store whose data it's reloading, not right away.   So an empty loop with the loop counter in memory is the worst case.  I don't understand what CPU design choices could lead to that micro-architectural quirk, but it's a real thing.\nThis is basically a duplicate of Adding a redundant assignment speeds up code when compiled without optimization, at least for Intel Sandybridge-family CPUs.\nThis is is one of the major reasons why you shouldn't benchmark at ```\n-O0```\n: the bottlenecks are different than in realistically optimized code.  See Why does clang produce inefficient asm with -O0 (for this simple floating point sum)? for more about why compilers make such terrible asm on purpose.\nMicro-benchmarking is hard; you can only measure something properly if you can get compilers to emit realistically optimized asm loops for the thing you're trying to measure.  (And even then you're only measuring throughput or latency, not both; those are separate things for single operations on out-of-order pipelined CPUs: What considerations go into predicting latency for operations on modern superscalar processors and how can I calculate them by hand?)\nSee @rcgldr's answer for measurement + explanation of what would happen with loops that keep variables in registers.\nWith clang, ```\nbenchmark::DoNotOptimize(x1 += 31)```\n also de-optimizes into keeping ```\nx```\n in memory, but with GCC it does just stay in a register.  Unfortunately @SashaKnorre's answer used clang on QuickBench, not gcc, to get results similar to your ```\n-O0```\n asm.  It does show the cost of lots of short-NOPs being hidden by the bottleneck through memory, and a slight speedup when those NOPs delay the reload next iteration just long enough for store-forwarding to hit the lower latency good case.  (QuickBench I think runs on Intel Xeon server CPUs, with the same microarchitecture inside each CPU core as desktop version of the same generation.)\n\nPresumably all the x86 machines you tested on had Intel CPUs from the last 10 years, or else there's a similar effect on AMD.  It's plausible there's a similar effect on whichever ARM CPU your RPi uses, if your measurements really were meaningful there.  Otherwise, maybe another case of seeing what you expected (confirmation bias), especially if you tested with optimization enabled there.\n\n\nI tested this with different levels of code optimization (```\n-O0```\n,```\n-O1```\n,```\n-O2```\n,```\n-O3```\n) [...] But I always got similar result\nI added that optimizations notice in the question to avoid \"do not measure not optimized code\" answers because optimizations is not what I ask about.\n\n\n\n(later from comments) About optimizations: yes, I reproduced that with different optimization levels, but as the loops were optimized away, the execution time was too fast to say for sure.\n\nSo actually you didn't reproduce this effect for ```\n-O1```\n or higher, you just saw what you wanted to see (confirmation bias) and mostly made up the claim that the effect was the same.  If you'd accurately reported your data (measurable effect at ```\n-O0```\n, empty timed region at ```\n-O1```\n and higher), I could have answered right away.\nSee Idiomatic way of performance evaluation? - if your times don't increase linearly with increasing repeat count, you aren't measuring what you think you're measuring.  Also, startup effects (like cold caches, soft page faults, lazy dynamic linking, and dynamic CPU frequency) can easily lead to the first empty timed region being slower than the second.\nI assume you only swapped the loops around when testing at ```\n-O0```\n, otherwise you would have ruled out there being any effect at ```\n-O1```\n or higher with that test code.\n\nThe loop with optimization enabled:\nAs you can see on Godbolt, gcc fully removes the loop with optimization enabled.  Sometimes GCC leaves empty loops alone, like maybe it thinks the delay was intentional, but here it doesn't even loop at all.  Time doesn't scale with anything, and both timed regions look the same like this:\n```\norig_main:\n   ...\n        call    std::chrono::_V2::system_clock::now()       # demangled C++ symbol name\n        mov     rbp, rax                                    # save the return value = start\n        call    std::chrono::_V2::system_clock::now()\n        # end in RAX\n```\n\nSo the only instruction in the timed region is saving ```\nstart```\n to a call-preserved register.  You're measuring literally nothing about your source code.\nWith Google Benchmark, we can get asm that doesn't optimize the work away, but which doesn't store/reload to introduce new bottlenecks:\n```\n#include <benchmark/benchmark.h>\n\nstatic void TargetFunc(benchmark::State& state) {\n   uint64_t x2 = 0, y2 = 0;\n  // Code inside this loop is measured repeatedly\n  for (auto _ : state) {\n    benchmark::DoNotOptimize(x2 += 31);\n    benchmark::DoNotOptimize(y2 += 31);\n  }\n}\n// Register the function as a benchmark\nBENCHMARK(TargetFunc);\n```\n\n```\n# just the main loop, from gcc10.1 -O3 \n.L7:                         # do{\n        add     rax, 31        # x2 += 31\n        add     rdx, 31        # y2 += 31\n        sub     rbx, 1\n        jne     .L7          # }while(--count != 0)\n```\n\nI assume ```\nbenchmark::DoNotOptimize```\n is something like ```\nasm volatile(\"\" : \"+rm\"(x) )```\n (GNU C inline asm) to make the compiler materialize ```\nx```\n in a register or memory, and to assume the lvalue has been modified by that empty asm statement.  (i.e. forget anything it knew about the value, blocking constant-propagation, CSE, and whatever.)  That would explain why clang stores/reloads to memory while GCC picks a register: this is a longstanding missed-optimization bug with clang's inline asm support.  It likes to pick memory when given the choice, which you can sometimes work around with multi-alternative constraints like ```\n\"+r,m\"```\n.  But not here; I had to just drop the memory alternative; we don't want the compiler to spill/reload to memory anyway.\nFor GNU C compatible compilers, we can use ```\nasm volatile```\n manually with only ```\n\"+r\"```\n register constraints to get clang to make good scalar asm (Godbolt), like GCC.  We get an essentially identical inner loop, with 3 add instructions, the last one being an ```\nadd  rbx, -1```\n / ```\njnz```\n that can macro-fuse.\n```\nstatic void TargetFunc(benchmark::State& state) {\n   uint64_t x2 = 0, y2 = 0;\n  // Code inside this loop is measured repeatedly\n  for (auto _ : state) {\n      x2 += 16;\n      y2 += 17;\n    asm volatile(\"\" : \"+r\"(x2), \"+r\"(y2));\n  }\n}\n```\n\nAll of these should run at 1 clock cycle per iteration on modern Intel and AMD CPUs, again see @rcgldr's answer.\nOf course this also disables auto-vectorization with SIMD, which compilers would do in many real use cases.  Or if you used the result at all outside the loop, it might optimize the repeated increment into a single multiply.\nYou can't measure the cost of the ```\n+```\n operator in C++ - it can compile very differently depending on context / surrounding code.  Even without considering loop-invariant stuff that hoists work. e.g. ```\nx + (y<<2) + 4```\n can compile to a single LEA instruction for x86.\n\n\nThe question is actually why my computers execute two operations faster than one, first of all in code where these operations are not optimized away\n\nTL:DR: it's not the operations, it's the loop-carried dependency chain through memory that stops the CPU from running the loop at 1 clock cycle per iteration, doing all 3 adds in parallel on separate execution ports.\nNote that the loop counter increment is just as much of an operation as what you're doing with ```\nx```\n (and sometimes ```\ny```\n).\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Performing basic arithmetic in php array\r\n                \r\nI have a php script which is used to generate information for a jeasyUI Grid.\n\n```\n$sql = $db->query(sprintf(\"SELECT ID, rec_purID, rec_qty, rec_date, p.pur_ID, p.pur_productID, p.pur_supplierID, p.pur_unitPrice, pr.prod_productName, c.cont_fullName FROM receipts inner join purchases p on rec_purID = p.pur_ID inner join products pr on p.pur_productID = pr.prod_productID inner join contacts c on p.pur_supplierID = c.cont_ID\")) or SQLError();\n\nwhile($rec = $sql->fetch_assoc()) {\n    $group[] = $rec;\n}\nforeach ($group as $key => $val) {\n    $group[$key]['rec_val'] = $val['rec_qty'] * $val['pur_unitPrice'];\n}\n$smarty->assign('group', $group);\n```\n\n\nIf I print_r this array, it appears to be correct:\n\n```\nArray ( \n[0] => Array ( [ID] => 78 [rec_purID] => 32 [rec_qty] => 1000 [rec_date] => 2016-03-30 [pur_ID] => 32     [pur_productID] => 5 [pur_supplierID] => 41 [pur_unitPrice] => 100.00 [prod_productName] => Acetate Tow   [cont_fullName] => DELPACK TRADING (PTY) LTD [rec_val] => 100000 ) \n[1] => Array ( [ID] => 79 [rec_purID] => 31 [rec_qty] => 2207 [rec_date] => 2016-03-30 [pur_ID] => 31 [pur_productID] => 5 [pur_supplierID] => 41 [pur_unitPrice] => 95.50 [prod_productName] => Acetate Tow [cont_fullName] => DELPACK TRADING (PTY) LTD [rec_val] => 210768.5 ) \n[2] => Array ( [ID] => 80 [rec_purID] => 31 [rec_qty] => 3000 [rec_date] => 2016-03-31 [pur_ID] => 31 [pur_productID] => 5 [pur_supplierID] => 41 [pur_unitPrice] => 95.50 [prod_productName] => Acetate Tow [cont_fullName] => DELPACK TRADING (PTY) LTD [rec_val] => 286500 )\n)\n```\n\n\nMy grid, however will never see the value of \"rec_val\". Please can someone explain where I have gone wrong.\n\n```\n<table id=\"dg\" class=\"easyui-datagrid\" style=\"width:100%;height:400px\"\n                url=\"receipts.php?do=list\" \n                title=\"Received Goods\"\n                toolbar=\"#toolbar\" pagination=\"true\"\n                iconCls=\"icon-edit\" showFooter=\"true\"\n                sortName=\"ID\" sortOrder=\"asc\"\n                rownumbers=\"true\" fitColumns=\"true\" singleSelect=\"true\">\n                <thead>\n                    <tr>\n                        <th field=\"ID\" width=\"10\" sortable=\"true\">Internal ID</th>\n                       <th field=\"prod_productName\" width=\"80\" sortable=\"true\">Product</th>\n                       <th field=\"cont_fullName\" width=\"80\" sortable=\"true\">Supplier</th>\n                       <th field=\"rec_qty\" width=\"80\" sortable=\"true\">Quantity</th>\n                       <th field=\"pur_unitPrice\" width=\"80\">Unit Price</th>\n                       <th field=\"rec_val\" width=\"80\">Value</th>\n                       <th field=\"rec_date\" width=\"80\" sortable=\"true\">Date Received</th>\n\n                    </tr>\n\n                </thead>\n\n        </table>\n```\n\n\nThank you.\n    ", "Answer": "\r\nThere seem to be brackets in one of the names which i guess aren't correctly escaped.\n\n```\nDELPACK TRADING (PTY) LTD\n```\n\n\nthis closes the array exactly before \"rec_val\".\n\nI'm not familiar with easyui but i expect this to be the problem especially if the other values do show up correctly.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Ambiguity in basic arithmetic operations Python [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        ValueError: negative number cannot be raised to a fractional power\r\n                            \r\n                                (2 answers)\r\n                            \r\n                    \r\n                Closed 6 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nHere is the scenario:\n\n```\nIn [5]: (2.0 - 5.0**(0.5)) ** (1.0/3.0)\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-5-d064023f1ac5> in <module>()\n----> 1 (2.0 - 5.0**(0.5)) ** (1.0/3.0)\n\nValueError: negative number cannot be raised to a fractional power\n\nIn [7]: -1.0 ** (1.0/3.0)\nOut[7]: -1.0\n```\n\n\nThe above operation is being done on a python interpreter. For the first expression, it is giving value error and says that ```\nnegative number can't have fractional power```\n !! So, firstly, why is this error as obviously, -ve numbers can have cube root or fifth root etc. Also, if that is the case, it should be consistent while in second case, it gives no error when -1 is raised to fractional power (1/3).\n\nCan someone explain why is this the case?\n    ", "Answer": "\r\nThe ```\n**```\n operator has specific binding behaviour; from the power operator documentation:\n\n\n  The power operator binds more tightly than unary operators on its left; it binds less tightly than unary operators on its right.\n  \n  [...]\n  \n  Thus, in an unparenthesized sequence of power and unary operators, the operators are evaluated from right to left (this does not constrain the evaluation order for the operands): ```\n-1**2```\n results in ```\n-1```\n.\n\n\nSo your second example is executed as:\n\n```\n-(1.0 ** (1.0/3.0))\n```\n\n\nThat is to say, the ```\n-```\n unary operator applies to the result of ```\n**```\n as that operator binds more tightly. As a result you have positive number is raised to the power 1/3rd, and only then made negative.\n\nIn your first example, the expression is parsed as\n\n```\n(2.0 - (5.0**(0.5))) ** (1.0/3.0)\n```\n\n\nThere is no unary operator here, but the ```\n**```\n power operator does have a higher precedence than the binary ```\n-```\n subtraction operator.\n\nThis then resolves as\n\n```\n(2.0 - 2.23606797749979) ** (1.0/3.0)\n```\n\n\nwhich is\n\n```\n(-0.2360679774997898) ** (1.0/3.0)\n```\n\n\nso is trying to raise a negative number to a fraction.\n\nPython 2 ```\n**```\n (and the ```\npow()```\n function) don't support producing a complex number support when the inputs are at most ```\nfloat```\n objects. Convert your negative float value to a ```\ncomplex()```\n number first:\n\n```\n>>> (-1.0) ** 0.5\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: negative number cannot be raised to a fractional power\n>>> (-1+0j) ** 0.5\n(6.123233995736766e-17+1j)\n>>> (2+0j - 5.0**(0.5)) ** (1.0/3.0)\n(0.30901699437494756+0.535233134659635j)\n```\n\n\nThis changed in Python 3, where a complex result is returned for a negative number raised to a fractional power.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic arithmetic operations with user input\r\n                \r\nI want to make a four-functioning calculator. I tried to make methods that would store operations.\n\n```\ndef mul\n  puts num1*num2\nend\n\ndef div\n  puts num1/num2\nend\n\ndef sub\n  puts num1-num2\nend\n\ndef add\n  puts num1+num2\nend\n\nnum1=gets.chomp.to_f\nop=gets.chomp\nnum2=gets.chomp.to_f\n\nputs \"Multiplication=mul\\n Addition=add\\n Subtract=sub\\n Division=div\"\nputs (\"This is your answer\"+num1+op+num2)\n```\n\n\nBut I couldn't make the calculator.\n\nI tried running the code, but it won't work. Can someone help?\n    ", "Answer": "\r\nBest Way to do so, is\n\n```\ndef perform_operation(op, a, b)\n  op = { 'add' => '+', 'sub' => '-', 'mul' => '*', 'div' => '/' }[op]\n  a.send(op, b)\nend\n\nnum1=gets.chomp.to_f\nop=gets.chomp\nnum2=gets.chomp.to_f\n\nputs \"This is your answer\", perform_operation(op, num1, num2)\n```\n\n\nIf your ```\nop```\n is +, -, * or / passed by input you can directly do it without method like below,\n\n```\nputs \"This is your answer\", num1.send(op, num2)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Are the basic arithmetic operations not available in relational algebra?\r\n                \r\nCan we use the basic '+', '-', '*', '/' operations in relational algebra? For example, if I want to know the difference of John's and Smith's salaries from an EMPLOYEE relation, I could write \n\n```\nselect e1.salary - e2.salary\nfrom employee as e1, employee as e2\nwhere e1.name = 'John' and e2.name = 'Smith';\n```\n\n\nHow to represent this statement in relational algebra?\n    ", "Answer": "\r\nNo, I don't think so, because, as it is said, relational algebra gives only a way to express things thanks to relation, not calculation.\n\nI was wondering if it were working for relational calculus, but I'm not even sure your query should have a translation...:\n\n```\n{t.salary|Employee(t)^(∃ e1 Employee(e1))\n                     ^(∃ e2 Employee(e2))\n                     ^(e1=John)\n                     ^(e2=Smith)\n                     ^???}\n```\n\n\nNonetheless, relational algebra and relational calculus are the basis of the SQL language, so, if you can do such a calculation in SQL, I'm wondering why isn't there at least one way to do it in one of these two basis...\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "how to simplify basic arithmetic in more complex goals\r\n                \r\nHere's a minimal example of my problem\n```\nLemma arith: forall T (G: seq T), (size G + 1 + 1).+1 = (size G + 3).```\n\nI would like to be able to reduce this to\n```\nforall T (G: seq T), (size G + 2).+1 = (size G + 3).```\n\nby the simplest possible means. Trying simpl or auto immediately does nothing.\nIf I rewrite with associativity first, that is,\n```\n  intros. rewrite - addnA. simpl. auto.```\n,\nsimpl and auto still do nothing. I am left with a goal of\n```\n  (size G + (1 + 1)).+1 = size G + 3```\n\nI guess the .+1 is \"in the way\" of simpl and auto working on the (1+1) somehow. It seems like I must first remove the .+1 before I can simplify the 1+1.\nHowever, in my actual proof, there is a lot more stuff than the .+1 \"in the way\" and I would really like to simplify my copious amount of +1s first. As a hack, I'm using 'replace' on individual occurrences but this feels very clumsy (and there are a lot of different arithmetic expressions to replace). Is there any better way to do this?\nI am using the ssrnat library.\nThanks.\n    ", "Answer": "\r\nCoq has a ```\nring```\n and ```\nring_simplify```\n tactic for this kind of work. Sorry for my ssreflect ignorant ```\nintros```\n, but this works:\n```\nFrom mathcomp Require Import all_ssreflect.\n\nLemma arith: forall T (G: seq T), (size G + 1 + 1).+1 = (size G + 3).\nProof.\n  intros.\n  ring.\nQed.\n```\n\nThere is also a ```\nfield```\n and ```\nfield_simplify```\n. For inequalities there are ```\nlia```\n and ```\nlra```\n, but I am not sure if these work in mathcomp - for ```\nlia```\n you might need this (https://github.com/math-comp/mczify) but it might be integrated meanwhile.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "ufunc Vs basic arithmetic operators in Numpy\r\n                \r\nI see that Universal Function(ufunc) is used for performing element wise array operations. \n\n```\n arr = np.arange(5)\n arr2 = np.arange(5,10)\n np.add(arr,arr2)\n```\n\n\nThis piece of code is similar to ```\narr + arr2```\n. In that case why should we use ufunc?\n    ", "Answer": "\r\nBecause it's a function which comes with a lot of features that a simple add expression won't provide you with. You can override the ufunc objects based on your expected behavior in certain situations and yet benefit from all its functionalities. \n\nYou can see that by just looking at the function's header:\n\n\n  numpy.add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])\n\n\nRead more in doc:\n\nhttps://docs.scipy.org/doc/numpy/reference/generated/numpy.add.html\n\nAnd:\n\nhttps://docs.scipy.org/doc/numpy/reference/ufuncs.html#ufuncs-kwargs\\\n\nAlso note that whenever you do ```\na + b```\n if ```\na```\n or ```\nb```\n is an ndarray, ```\nadd(a, b)```\n is called internally by numpy. So There's no difference when both arguments are ndarray.\n\nAnother good functionality that ```\nufunc```\ns provide is that you can perform numpy functionalities directly on python objects.\n\n```\nIn [20]: np.add([2, 3, 4], 4)\nOut[20]: array([6, 7, 8])\n```\n\n\nThis is while if you do the sum in Python you'll get a TypeError:\n\n```\nIn [21]: [2, 3, 4] + 4\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-21-0a8f512c0d3a> in <module>()\n----> 1 [2, 3, 4] + 4\n\nTypeError: can only concatenate list (not \"int\") to list\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "ufunc Vs basic arithmetic operators in Numpy\r\n                \r\nI see that Universal Function(ufunc) is used for performing element wise array operations. \n\n```\n arr = np.arange(5)\n arr2 = np.arange(5,10)\n np.add(arr,arr2)\n```\n\n\nThis piece of code is similar to ```\narr + arr2```\n. In that case why should we use ufunc?\n    ", "Answer": "\r\nBecause it's a function which comes with a lot of features that a simple add expression won't provide you with. You can override the ufunc objects based on your expected behavior in certain situations and yet benefit from all its functionalities. \n\nYou can see that by just looking at the function's header:\n\n\n  numpy.add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])\n\n\nRead more in doc:\n\nhttps://docs.scipy.org/doc/numpy/reference/generated/numpy.add.html\n\nAnd:\n\nhttps://docs.scipy.org/doc/numpy/reference/ufuncs.html#ufuncs-kwargs\\\n\nAlso note that whenever you do ```\na + b```\n if ```\na```\n or ```\nb```\n is an ndarray, ```\nadd(a, b)```\n is called internally by numpy. So There's no difference when both arguments are ndarray.\n\nAnother good functionality that ```\nufunc```\ns provide is that you can perform numpy functionalities directly on python objects.\n\n```\nIn [20]: np.add([2, 3, 4], 4)\nOut[20]: array([6, 7, 8])\n```\n\n\nThis is while if you do the sum in Python you'll get a TypeError:\n\n```\nIn [21]: [2, 3, 4] + 4\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-21-0a8f512c0d3a> in <module>()\n----> 1 [2, 3, 4] + 4\n\nTypeError: can only concatenate list (not \"int\") to list\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "basic arithmetic in iOS GLSL fragment shader\r\n                \r\nHere is my fragment shader program which runs on iOS 5.1.1 on iPhone 3g.\n\n```\n#ifdef GL_ES\nprecision lowp float;\n#endif\n\nvarying vec2 v_texCoord;\n\nvoid main()\n{\n    float offset = sin(v_texCoord.x * 10.0);\n    // offset = offset * 1.0; // (!!!)\n    gl_FragColor = vec4(offset, 0.0, 0.0, 1.0);\n}\n```\n\n\nWhich produces nice sin:\n\n\n\nNote the line marked by (!!!). I suppose, multiplying float value by 1.0 must change nothing. (The same shader being run under Windows OS works exactly as expected.) So, I uncomment the line and receive this:\n\n\n\nWTF?!\n\n\n\nHow to reproduce:\n\n\nCreate iOS Game project from standard template in xcode. If you run the project then you will see two floating cubes. One red and one blue.\nChange contents of Shader.vsh to the following. (I've just added one varying parameter v_pos).\n\n```\nattribute vec4 position;\nattribute vec3 normal;\n\nvarying lowp vec4 colorVarying;\nvarying lowp vec4 v_pos;\n\nuniform mat4 modelViewProjectionMatrix;\nuniform mat3 normalMatrix;\n\nvoid main()\n{\n    vec3 eyeNormal = normalize(normalMatrix * normal);\n    vec3 lightPosition = vec3(0.0, 0.0, 1.0);\n    vec4 diffuseColor = vec4(0.4, 0.4, 1.0, 1.0);\n\n    float nDotVP = max(0.0, dot(eyeNormal, normalize(lightPosition)));\n\n    colorVarying = diffuseColor * nDotVP;\n\n    gl_Position = modelViewProjectionMatrix * position;\n    v_pos = gl_Position;\n}\n```\n\nChnge Shader.fsh to the following.\n\n```\nvarying lowp vec4 colorVarying;\nvarying lowp vec4 v_pos;\n\nvoid main()\n{\n    gl_FragColor = colorVarying;\n    lowp float a = sin(v_pos.x * 10.0);\n    // a = a * 1.0; // (!!!)\n    gl_FragColor = vec4(a, 0.0, 0.0, 1.0);\n}\n```\n\nRun program on a device and see cool bars on blue cube:\n\nUncomment the line (```\na = a * 1.0;```\n) marked by (!!!) and run again:\n\n\n    ", "Answer": "\r\nWell, let me answer my own question.\nThe problem is in lowp precision qualifier used in shader.\nAfter changing it to mediump shader started to work as expected.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Modular arithmetic Basic cofusion\r\n                \r\nI am just learning number theory .When I was reading modular arithmetic I came across this statement :\n\n29 is congruent to 15 (mod 7).\n\nSo actually this statement actually shows just\n\n29 is congruent to 15 \n\nand we are working under mod 7..mod 7 in brackets is just to show the modulus. It is not 29 is congruent to 15%7.It is 29 is congruent to 15 and we are working under modulus 7. \n    ", "Answer": "\r\nYour observation is correct. The word mod is actually used in two different senses: one of them is to clarify a relation as you describe\n\n\n  ```\nA = B  (mod C)```\n\n\n\nmeans, e.g., that ```\nB-A```\n is divisible by ```\nC```\n. Or sometimes (but equivalently in the end), it means that you should be reading ```\nA```\n and ```\nB```\n as being notation, e.g., for elements of the algebraic structure integers modulo ```\nC```\n rather than as notation for integers. \n\nThe other usage is as a binary operator: ```\nB mod C```\n means the remainder when ```\nB```\n is divided by ```\nC```\n.\n\nUsually it's straightforward to tell the difference from context... assuming you are actually aware of both possible usages. Also, in the first kind of usage, mod is usually set off from the others; e.g.\n\n\n  ```\nA = B    mod C```\n\n\n\nis the first usage as a relation, but\n\n\n  ```\nA = B mod C```\n\n\n\ncould go either way.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic arithmetic on two byte arrays in Java without BigInteger\r\n                \r\nI have two byte arrays that represent unsigned 256-bit values and I want to perform simple arithmetic operations on them like ADD, SUB, DIV, MUL and EXP - Is there a way to perform these directly on the byte arrays? Currently I convert these byte array values to a BigInteger and then perform the calculations, but I have an idea this is costing me in performance. How would you do this to get the fastest results?\n\nFor example, this is my current add-function:\n\n```\n// Both byte arrays are length 32 and represent unsigned 256-bit values\npublic void add(byte[] data1, byte[] data2) {\n\n    BigInteger value1 = new BigInteger(1, data1);\n    BigInteger value2 = new BigInteger(1, data2);\n    BigInteger result = value1.add(value2);\n\n    byte[] bytes = result.toByteArray();\n    ByteBuffer buffer = ByteBuffer.allocate(32);\n\n    System.arraycopy(bytes, 0, buffer.array(), 32 - bytes.length, bytes.length);\n    this.buffer = buffer.array();\n}\n```\n\n    ", "Answer": "\r\nI don’t think that there is much benefit from working on ```\nbyte[]```\n directly rather than using ```\nBigInteger```\n but for satisfying your curiosity here is an example of how to add two byte arrays of size ```\n32```\n:\n\n```\npublic static byte[] add(byte[] data1, byte[] data2) {\n  if(data1.length!=32 || data2.length!=32)\n    throw new IllegalArgumentException();\n  byte[] result=new byte[32];\n  for(int i=31, overflow=0; i>=0; i--) {\n    int v = (data1[i]&0xff)+(data2[i]&0xff)+overflow;\n    result[i]=(byte)v;\n    overflow=v>>>8;\n  }\n  return result;\n}\n```\n\n\nNote that it is possible to use one of the input arrays as target for the result. However, don’t be surprised if such a reusing has even a negative impact on performance. On today’s systems there are no simple answers to “how to speedup” anymore…\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Hints on getting basic arithmetic expressions to be parsed in Swift\r\n                \r\nConsider the following expression:\n\n```\n let N = 2048\n var c = (0..<N).map{ f ->  Float in sin( 2 * .pi * f / (N/2)) }\n```\n\n\n```\nSwift```\n can not really parse it:\n\n\n\nThis is already a very small expression: it's absurd to break it into even smaller pieces.  So I am trying to use type-casts. But I am getting weary of adding many explicit type casts :\n\n```\n    let N = 2048\n    var c: [Float] = (0..<N).map{ f ->  Float in\n        Float(sin( 2.0 * .pi * f / (Float(N/2)))) }\n```\n\n\nEven with the above the error continues\n\n\n\nWhy is ```\nswift```\n so weak in parsing these simple arithmetic expressions? What can I do short of breaking it into pieces of the form\n\n```\n let c = a * b\n let f = c * d\n```\n\n\nThat is just too simplistic to be practical for signal processing. I am guessing that there were tricks to get the compiler to be a bit more intelligent: please do share.\n    ", "Answer": "\r\nThe issue is that the arithmetic operators (```\n+```\n,```\n-```\n,```\n*```\n and ```\n/```\n) have a lot of overloads. Hence, when you write expressions containing a lot of those operators, the compiler cannot resolve them in time.\n\nThis is especially true when you have type errors. The compiler tries to find the correct overload, but cannot do so, since your types are mismatching and there's no matching overload. However, by the time the compiler could infer this, it's already past the timeout for resolving expressions and hence you get that error instead of the actual type error.\n\nAs soon as you resolve the type errors by casting all ```\nInt```\ns to ```\nFloat```\n, the single line expression compiles just fine.\n\n```\nlet c = (0..<N).map{ f ->  Float in sin( 2 * .pi * Float(f) / Float(N/2)) }\n```\n\n\nOnce you do that, you don't even need the named closure argument and type annotation of the return value anymore.\n\n```\nlet c = (0..<N).map{ sin(2 * .pi * Float($0) / Float(N/2)) }\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Check if a number is an integer with basic arithmetic\r\n                \r\nI am trying to create a function that checks whether a number is an integer or not. I've looked at all these other threads with the same question, and the only problem is:\nI'm using Hopscotch.\n\nBecause of this I only have access to the following operators:\n\n```\nAddition\nSubtraction\nMultiplication\nDivision\nExponents\nSquare roots\nSin\nCos\nBasic Loops, Conditionals, and relational operators.\n```\n\n\nIs there any way to check if a number is an integer using only these?\n    ", "Answer": "\r\nThe repeat block will round your number to an integer. So if you repeat times the original number and increment a test number, you can check if they come out equal at the end. \n\n\n\nAs others have mentioned, for this to work the original number needs to be positive. To solve for this just multiply by -1 if the original number is less than 0. \n\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How does the result of this basic arithmetic calculation turns out like this?\r\n                \r\nPardon my newbie level question, but i've been wondering and also recounting to see why the result turns out to be like that?\nI understand why the first row results in like that but the rest remain a mystery to me. I've been using calculator to help and also review some basics on hexadecimal arithmetic but i'm still lost. If anyone could please explain why the result became like that it'll be appreciated.\nThanks.\nQuestion\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "regexp to match basic arithmetic with letters and put them in groups [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Regular expression for arithmetic expression\r\n                            \r\n                                (2 answers)\r\n                            \r\n                    \r\n                Closed 3 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\ngood day.\n\nI have to parse some arithmetic operations like:\n\n```\nA + b * 0.75 + 3\n```\n\n\nand ```\n(c-Ff)-1/2```\n\n\nI need to put separate elements in groups.\n\nSo I need to have parsed\n\n```\nlet var1 = 'A';\nlet operator1 = '+';\nlet var2 = 'b';\nlet operator2 = '*';\nlet var3 = 0.75;\nlet operator3 = '+';\nlet var4 = 3;\n```\n\n\nSo I can match my A variable with mine pre-defined variable and made some calculations. \n\nI have ended with ```\n[^+/*()-]+```\n but it\n\n\ncaptures spaces\ndoesn't put +-/* in separate groups\ni dunno how to handle brackets\n\n\nAny advices, please? \n    ", "Answer": "\r\nOk, here are two attempts at parsing your sample expressions:\n\n\r\n\r\n```\nfunction parseStringA(str) {\r\n  var vars = []; // numerical constants, symbolic names\r\n  var ops = [];  // mathematical operators\r\n  str\r\n  .replace(/([\\+\\-\\*\\/\\(\\)])/g, ' $1 ') // force spaces arount ops\r\n  .split(/ +/)      // split on spaces\r\n  .filter(Boolean)  // remove empty items\r\n  .forEach(function(item) {\r\n    if(item.match(/[\\+\\-\\*\\/\\(\\)]/)) {\r\n      ops.push(item);\r\n    } else {\r\n      vars.push(item);\r\n    }\r\n  });\r\n  return {\r\n    vars: vars,\r\n    ops: ops\r\n  }\r\n}\r\n\r\nfunction parseStringB(str) {\r\n  var expr = []; // { val, op }\r\n  str\r\n  .replace(/([\\+\\-\\*\\/\\(\\)])/g, ' $1 ') // force spaces arount ops\r\n  .split(/ +/)      // split on spaces\r\n  .filter(Boolean)  // remove empty items\r\n  .forEach(function(item) {\r\n    if(item.match(/[\\+\\-\\*\\/\\(\\)]/)) {\r\n      expr.push({ val: '', op: item});\r\n    } else {\r\n      expr.push({ val: item, op: ''});\r\n    }\r\n  });\r\n  return expr;\r\n}\r\n\r\n\r\nvar str1 = 'A + b * 0.75 + 3';\r\nvar str2 = '(c-Ff)-1/2';\r\n\r\nvar result1a = parseStringA(str1);\r\nconsole.log('result1a: ' + JSON.stringify(result1a, null, ' '))\r\n\r\nvar result2a = parseStringA(str2);\r\nconsole.log('result2a: ' + JSON.stringify(result2a, null, ' '))\r\n\r\nvar result1b = parseStringB(str1);\r\nconsole.log('result1b: ' + JSON.stringify(result1b, null, ' '))\r\n\r\nvar result1b = parseStringB(str2);\r\nconsole.log('result1b: ' + JSON.stringify(result1b, null, ' '))```\n\r\n\r\n\r\n\n\nFunction ```\nparseStringA()```\n splits the expression into (numerical constants / symbolic names) and mathematical operators, as per your original example. The result is not useful because you lose the sequence of items in the expression, as you can see from the output:\n\n```\nresult1a: {\n \"vars\": [\n  \"A\",\n  \"b\",\n  \"0.75\",\n  \"3\"\n ],\n \"ops\": [\n  \"+\",\n  \"*\",\n  \"+\"\n ]\n}\nresult2a: {\n \"vars\": [\n  \"c\",\n  \"Ff\",\n  \"1\",\n  \"2\"\n ],\n \"ops\": [\n  \"(\",\n  \"-\",\n  \")\",\n  \"-\",\n  \"/\"\n ]\n}\n```\n\n\nA better approach is function ```\nparseStringB()```\n, which returns an array of objects with ```\nval```\n (numerical constants / symbolic names) and ```\nop```\n (mathematical operators). Here is the output:\n\n```\nresult1b: [\n { \"val\": \"A\",    \"op\": \"\"  },\n { \"val\": \"\",     \"op\": \"+\" },\n { \"val\": \"b\",    \"op\": \"\"  },\n { \"val\": \"\",     \"op\": \"*\" },\n { \"val\": \"0.75\", \"op\": \"\"  },\n { \"val\": \"\",     \"op\": \"+\" },\n { \"val\": \"3\",    \"op\": \"\"  }\n]\nresult1b: [\n { \"val\": \"\",   \"op\": \"(\" },\n { \"val\": \"c\",  \"op\": \"\"  },\n { \"val\": \"\",   \"op\": \"-\" },\n { \"val\": \"Ff\", \"op\": \"\"  },\n { \"val\": \"\",   \"op\": \")\" },\n { \"val\": \"\",   \"op\": \"-\" },\n { \"val\": \"1\",  \"op\": \"\"  },\n { \"val\": \"\",   \"op\": \"/\" },\n { \"val\": \"2\",  \"op\": \"\"  }\n]\n```\n\n\nThis format is more useful. Now you can iterate over the array to resolve the expression, which appears to be out of scope of your question.\n\nThis is the first step of evaluating an expression, called tokenizing - the array contains the tokens. The next step is to create a parse tree so that you can properly evaluate parenthesis inside-out, multiplication before addition, etc.\n\nThis blog has a good overview: https://blog.bitsrc.io/parsing-expressions-in-javascript-4c156f0cbaec\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic group arithmetic in libsodium\r\n                \r\nI am trying to implement a simple cryptographic primitive. \n\nUnder the following code: given sa, sk, hn, I want to compute sb: such that sg*G = (sb + sk . hn)*G. \n\nHowever, after finding sb, the following equality does not hold: sb*G + (sk.hn)G = saG. \n\nMy understand stand is that in the exponent is arithmetic modulo the order of group instead of L.\n\nHowever, I have a few questions relating to their implementation: \n\n\nwhy the scalar has to be chosen from  [0,L] where L is the order of the subgroup? \nis there a \"helper\" function that multiplies two large scalar without performing modulo L?\n\n\n```\nint main(void)\n{\n    if (sodium_init() < 0) {\n        /* panic! the library couldn't be initialized, it is not safe to use */\n        return -1;\n    }\n    uint8_t sb[crypto_core_ed25519_SCALARBYTES];\n    uint8_t sa[crypto_core_ed25519_SCALARBYTES];\n    uint8_t hn[crypto_core_ed25519_SCALARBYTES];\n    uint8_t sk[crypto_core_ed25519_SCALARBYTES];\n    crypto_core_ed25519_scalar_random(sa); // s_a <- [0,l]\n    crypto_core_ed25519_scalar_random(sk);  // sk  <- [0,l]\n    crypto_core_ed25519_scalar_random(hn);  // hn  <- [0,l]\n\n    uint8_t product[crypto_core_ed25519_SCALARBYTES];\n    crypto_core_ed25519_scalar_mul(product, sk,hn);  // sk*hn\n    crypto_core_ed25519_scalar_sub(sb, sa, product); // sb = sa-hn*sk\n\n    uint8_t point1[crypto_core_ed25519_BYTES];\n    crypto_scalarmult_ed25519_base(point1, sa);\n\n    uint8_t point2[crypto_core_ed25519_BYTES];\n    uint8_t sum[crypto_core_ed25519_BYTES];\n\n    // equal\n    // crypto_core_ed25519_scalar_add(sum, sb, product);\n    // crypto_scalarmult_ed25519_base(point2, sum);\n\n    // is not equal\n    uint8_t temp1[crypto_core_ed25519_BYTES];\n    uint8_t temp2[crypto_core_ed25519_BYTES];\n    crypto_scalarmult_ed25519_base(temp1, sb);      // sb*G\n    crypto_scalarmult_ed25519_base(temp2, product); //\n    crypto_core_ed25519_add(point2, temp1, temp2);\n    if(memcmp(point1, point2, 32) != 0)\n    {\n        printf(\"[-] Not equal \");\n        return -1;\n    }\n    printf(\"[+] equal\");\n\n    return 0;\n}\n```\n\n    ", "Answer": "\r\nI got the answer from jedisct1 , the author of libsodium and I will post it here:\n\ncrypto_scalarmult_ed25519_base() clamps the scalar (clears the 3 lower bits, set the high bit) before performing the multiplication.\nUse crypto_scalarmult_ed25519_base_noclamp() to prevent this.\nOr, even better, use the Ristretto group instead.\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why does arithmetic does not work in CMD\r\n                \r\nI just started to code in CMD and came with this problem! How can you print the answers with variables plus variables? Or is this a silly mistake?\n\nfile_1.bat\n\nTitle will be the called the Basic Arithmetic\n\n```\ntitle Basic Arithmetic\n```\n\n\nThe main part of my code:\n\n```\nset /p first= First Number:\nset /p sec= Second Number:\n\nset /a ans=first+sec\n```\n\n\nTo prevent the CMD closing after the answer has printed out!\n\n```\nset /p z= Finish!\n```\n\n    ", "Answer": "\r\nWhile it is not the usual OS configuration, one thing that could make your code fail is to have command extensions disabled, something that will make ```\nset /p```\n and ```\nset /a```\n being handled as the plain ```\nset```\n command. \n\nYou can try including a ```\nsetlocal enableextensions```\n at the start of your batch file to ensure your working environment is configured as you need.\n\n```\n@echo off\n    setlocal enableextensions disabledelayedexpansion\n\n    title Basic Arithmetic\n\n    set /p first=First Number:\n    set /p sec=Second Number:\n\n    set /a ans=first+sec\n\n    echo The answer is %ans%\n\n    pause\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Best performance for basic arbitrary-precision arithmetic with arbitrary base [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 9 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nWhat is the best way to perform basic arbitrary-precision arithmetic on an arbitrary base, with best performance ?\n\nI was thinking about switching to binary, and then work with some inline assembly, but actually, I need the best-performance way to do it and I am not sure that this is the best way to do it.\n\nEDIT : I do not want to use any library except the standart C++ one.\n    ", "Answer": "\r\nThe problem is, \"best\" performance attainable with multiprecision numeric algorithms very strongly depends on the data you're working with (such as average order of numbers you may need to calculate). Consider the discussion of algorithm selection used by gnu gmp as an example: \n\nhttps://gmplib.org/manual/Algorithms.html\n\nGnu GMP code is also used inside glibc (in particular, in precise floating point conversion code), so in a sense it is part of a \"standard c\" library.\n\nSpeaking of personal experience, it is extremely difficult to beat GMP's performance figures (in fact, it is rather difficult to even get within factor of 2 to GMP's performance in a general case, so if performance is an absolute priority you may want to reconsider your design goals). Performance in multiprecision calculations is not strongly dependent on implementation technique (so you're not going to win anything by using assembly instead of something like Java for this matter, if your numbers are reasonably long) - the algorithmic complexities will necessarily dominate. In fact, it makes sense to start with highest level language available and optimize from there.\n\nAnd just in case, you should definitely go through chapter 4, volume 2 of Knuth's TAoCP if you haven't done so already.\n\nI know this is probably not the answer you're looking for, but it's longer than a comment.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to control size of basic arithmetic types in Frama-C?\r\n                \r\nIn Frama-C, is it possible to freely specify the sizes of the basic types? \n\nMy target, the TMS320F2808 DSP, has 16-bit bytes. The char, short and int types are all one byte, and the long type is two.\n\nAs yet, I cannot see how, if possible, I can specify to Frama-C these sizes. \n    ", "Answer": "\r\nYou may already have discovered the option ```\n-machdep```\n. The command ```\nframa-c -machdep```\n shows a list:\n\n```\n$ frama-c -machdep help\n[kernel] supported machines are x86_64 x86_32 ppc_32 x86_16.\n```\n\n\nUnfortunately, the value of ```\nCHAR_BIT```\n is not one of the machdep parameters. Instead, the value 8 is hard-coded in many places in Frama-C for ```\nCHAR_BIT```\n.\nAdding support for larger values than 8 of ```\nCHAR_BIT```\n is a trivial but repetitive programming task: one must simply identify all these places and modify them to use ```\nBit_utils.sizeofchar()```\n instead. In fact, someone has already done this, so it is definitely doable, but that change was never contributed back to the Frama-C development (welcome to the world of open-source software).\n\nOnce you have done the above, creating a new architecture with ```\nCHAR_BIT == 16```\n, ```\nsizeof(int) == 1```\n and ```\nsizeof(long) == 2```\n will be a comparatively simple operation.\n\nHow to do the changes\n\nI get a first list of potential change sites with the command below. This finds all occurrences of the number ```\n8```\n:\n\n\n$ grep -rI \\\\W8\\\\W src/*/*.ml\nsrc/ai/base.ml: 8 (* FIXME: CHAR_BIT *), (String.length s)\nsrc/aorai/aorai_register.ml:      (* Step 8 : clearing tables whose information has been\nsrc/aorai/ltllexer.ml:  | 8 ->\nsrc/aorai/promelalexer.ml:  | 8 ->\nsrc/aorai/promelalexer_withexps.ml:  | 8 ->\nsrc/aorai/yalexer.ml:  | 8 ->\nsrc/gui/design.ml:    height * 8 / 5 (* 16/10 ratio *)\nsrc/gui/gtk_form.ml:  val table = GPack.table ~rows:2 ~col_spacings:8 ~packing ()\nsrc/gui/gtk_helper.ml:        ~fallback:\"#neither UTF-8 nor locale nor ISO-8859-15#\"\nsrc/gui/gtk_helper.ml:        ~to_codeset:\"UTF-8\"\nsrc/gui/source_manager.ml:(* Try to convert a source file either as UTF-8 or as locale. *)\nsrc/kernel/stmts_graph.ml:    | Block _ -> [`Shape `Box; `Fontsize 8]\nsrc/lib/binary_cache.ml:let cache_size () = 1 lsl (8 + MemoryFootprint.get ())\nsrc/lib/bitvector.ml:  if b-a  [I 8]\nsrc/logic/description.ml:  | IPPredicate(kind,kf,ki,_) -> [I 8;F kf;K ki] @ kind_order kind\nsrc/logic/property.ml:    Hashtbl.hash (8, Kf.hash f, Kinstr.hash ki, hash_bhv_loop b)\nsrc/logic/property_status.ml:                  | Never_tried -> [`Style `Bold; `Width 0.8 ]\nsrc/memory_state/offsetmap.ml:    let char_width = 8 in\nsrc/misc/bit_utils.ml:    Int_Base.inject (Int.of_int (warn_if_zero ty (bitsSizeOf ty) / 8))\nsrc/pdg/ctrlDpds.ml:              (2) if (c) (3) y = 3; (4) goto L; else (5) z = 8;\nsrc/pdg/ctrlDpds.ml:              (8) L : return x;\nsrc/pdg/ctrlDpds.ml:    (1) -> (2) -> (6) -> (8)\nsrc/printer/cil_printer.ml:    Integer.pred (Integer.of_int (8 * (Cil.bytesSizeOfInt k))) \nsrc/printer/cil_printer.ml:       CompoundInit (_, il) when List.length il >= 8 -> true\nsrc/project/state_builder.ml:      debug ~level:8 \"updating\" p;\nsrc/value/builtins_nonfree.ml:                Value_parameters.debug \"find_ival(8) on %a returns %a\" \nsrc/value/builtins_nonfree.ml:let int_hrange = Int.two_power_of_int (8 * Cil.theMachine.Cil.theMachine.sizeof_int -1)\nsrc/value/builtins_nonfree_print_c.ml:        let step = if iso then 1 else (Integer.to_int modu) / 8 in\nsrc/value/builtins_nonfree_print_c.ml:        let start = ref ((Integer.to_int bk) / 8) in\nsrc/value/builtins_nonfree_print_c.ml:        let ek = ek / 8 in\nsrc/value/eval_exprs.ml:                  let offs_bytes = fst (Cil.bitsOffset typ_exp offs) / 8 in\nsrc/value/eval_terms.ml:                     [i * 8 * sizeof( *tlv)] *)\nsrc/value/value_parameters.ml:            (defaults to 8; experimental)\"\nsrc/wp/Cint.ml:    in let hsb p = let n = p lsr 8 in if n = 0 then hsb.(p) else 8 + hsb.(n)\nsrc/wp/GuiPanel.ml:  let options = GPack.hbox ~spacing:8 ~packing () in\nsrc/wp/GuiPanel.ml:  let control = GPack.table ~columns:4 ~col_spacings:8 ~rows:2 ~packing () in\nsrc/wp/Matrix.ml:  let buffer = Buffer.create 8 in\nsrc/wp/cil2cfg.ml:    | VblkIn (Bloop s,_) -> (8, s.sid)\nsrc/wp/ctypes.ml:  | 8 -> if signed then SInt64 else UInt64\nsrc/wp/ctypes.ml:  | 8 -> Float64\nsrc/wp/ctypes.ml:  | size -> WpLog.not_yet_implemented \"%d-bits floats\" (8*size)\nsrc/wp/ctypes.ml:  let m = Array.create 8 None in\nsrc/wp/ctypes.ml:     (Cil.bitsSizeOf ctype / 8)\nsrc/wp/ctypes.ml:      (Cil.bitsSizeOf ctype / 8)\nsrc/wp/driver.ml:  | 8 ->\nsrc/wp/rformat.ml:  | 8 ->\nsrc/wp/script.ml:  | 8 ->\n\n\nThe first one is obviously a true positive, and the second one obviously a false positive.\nIn the first case, the context expects a value of type ```\nint```\n. The simplest change is:\n\n\n\nIndex: src/ai/base.ml\n===================================================================\n--- src/ai/base.ml  (revision 24517)\n+++ src/ai/base.ml  (working copy)\n@@ -116,7 +116,7 @@\n   let u, l = \n     match s with\n     | CSString s ->\n-   8 (* FIXME: CHAR_BIT *), (String.length s)\n+   bitsSizeOf charType, (String.length s)\n     | CSWstring s ->\n    bitsSizeOf theMachine.wcharType, (List.length s)\n   in\n\n\nIn the above list, the pattern ```\nCil.bitsSizeOf … / 8```\n is a sure sign that the ```\n8```\n represents ```\nCHAR_BIT```\n, but in other instances, it requires looking at the source code and understanding the intent.\n\nThe difficulty comes from the different forms the constant 8 may take. You may also encounter ```\n8L```\n, the same constant but of type ```\nint64```\n. When that constant represents the width of a char, it can be replaced with ```\nInt64.of_int (bitsSizeOf charType)```\n. There is one in src/ai/base.ml:\n\n\nIndex: src/ai/base.ml\n===================================================================\n--- src/ai/base.ml  (revision 24517)\n+++ src/ai/base.ml  (working copy)\n@@ -156,12 +156,12 @@\n     (fun _ x ->\n        try Scanf.sscanf x \"%Li-%Li\"\n          (fun min max ->\n-            let mul8 = Int64.mul 8L in\n+            let mul_CHAR_BIT = Int64.mul (Int64.of_int (bitsSizeOf charType)) in\n             MinValidAbsoluteAddress.set\n-              (Abstract_interp.Int.of_int64 (mul8 min));\n+              (Abstract_interp.Int.of_int64 (mul_CHAR_BIT min));\n             MaxValidAbsoluteAddress.set\n               (Abstract_interp.Int.of_int64\n-                 (Int64.pred (mul8 (Int64.succ max)))))\n+                 (Int64.pred (mul_CHAR_BIT (Int64.succ max)))))\n        with End_of_file | Scanf.Scan_failure _ | Failure _ as e ->\n          Kernel.abort \"Invalid -absolute-valid-range integer-integer: each integer may be in decimal, hexadecimal (0x, 0X), octal (0o) or binary (0b) notation and has to hold in 64 bits. A correct example is -absolute-valid-range 1-0xFFFFFF0.@\\nError was %S@.\"\n            (Printexc.to_string e))\n\n\nHowever, effecting this last change causes Frama-C to crash when the commandline option ```\n-absolute-valid-range```\n is used, because of the order things are currently initialized (the front-end is not ready to answer questions about the size of ```\nchar```\n at the time the commandline arguments are interpreted). So this particular change has to be postponed, and a note has to be made that the option will continue to assume 8-bit chars until Frama-C is re-architectured a bit.\n\nApart from ```\nint```\n and ```\nint64```\n, Frama-C also uses multi-precision (allocated) integers. The constant 8 of that type is usually found as ```\nInt.eight```\n. This one can be replaced with a call to ```\nBit_utils.sizeofchar```\n, because this function returns a multi-precision integer. The code should also be inspected for shifts by 3.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "C# Basic stack arithmetic operations\r\n                \r\nI have two classes one Calculator and another Test class. Test class contains multiple expected output test and calculator contains method to perform arithmetic operation my question is: Why does TestOne output 105 instead of 9 and TestTwo output 6 instead of 2.\n\nHere are the tests.\n\n```\npublic void TestOne()\n{\n    var c= new Calc();\n    c.Add(5);\n    c.Add(7);\n    c.Undo();\n    c.Subtract(2);\n    c.Multiply(7);\n    c.Undo();\n    c.Multiply(3);\n}\n\npublic void TestTwo()\n{\n    var c= new Calc();\n    c.Add(2);\n    c.Add(3);\n    c.Add(4);\n    ex.Undo();\n    c.RepeatLastCommand();\n}\n```\n\n\nHere are the functionalities of the application\n\n```\npublic class Calc\n{\n    int total= 0;\n    Stack<int> stack = new Stack<int>();\n\n    public int Value\n    {\n        get { return total; }\n        set { total= value; }\n    }\n\n    public void Add(int value)\n    { \n        total = total + value;\n        stack.Push(value); \n    }\n\n    public void Subtract(int value)\n    {\n        total = total - value;\n        stack.Push(total);\n    }\n\n    public void Multiply(int value)\n    {\n        total= total * value;\n        stack.Push(total);\n    }\n\n    public void RepeatLastCommand()\n    {\n        int topOfStack =stack.Peek();\n        total += topOfStack;\n     }\n\n     public void Undo()\n     {\n         total = stack.Pop();\n         if (stack.Count > 0)\n         {\n             int safe = stack.Pop();\n          }\n     }\n}\n```\n\n    ", "Answer": "\r\nAt first glance you need to change your Undo method to\n\n```\npublic void Undo()\n{\n    if(stack.Count > 0 ) stack.Pop();\n    total = stack.Peek();\n}\n```\n\n\nalso the Add method should Push on the stack the Total variable not the value passed \n\n```\npublic void Add(int value)\n{\n    total = total + value;\n    stack.Push(total);\n}\n```\n\n\nHowever resolving the RepeatLastCommand operation is a bit more complext and cannot be achieved with this structure, you need to store in your stack variable also the operation executed and the value used in that operation.\n\nI think that the solution presented in another answer by ```\ncsdp000```\n could drive you on the right track. \n\nRegarding instead your request to clarify the change in the Undo, it is simple. The Pop operation extracts from the top of the stack the value that you have last Push(ed), this value is the current total, you are interested to restore the previous value so discard the actual top and assign to total the new top of the stack\n\nEDIT\nAfter some thinking about the RepeatLastAction I have rewritten your class to store, instead of an integer an instance of a class that contains all the information about the operation executed by your Calc class\n\n```\npublic class Calc\n{\n    bool undoAction = false;\n    int total = 0;\n    Stack<CalcAction> stack = new Stack<CalcAction>();\n\n    public int Value\n    {\n        get\n        {\n            return total;\n        }\n        set\n        {\n            total = value;\n        }\n    }\n\n    public void Add(int value)\n    {\n        CalcAction act = new CalcAction() \n        { \n            operation = Add, \n            actionTotal = total + value, \n            actionValue = value \n        };\n        total = act.actionTotal;\n        stack.Push(act);\n        undoAction = false;\n    }\n\n    public void Subtract(int value)\n    {\n        CalcAction act = new CalcAction()\n        {\n            operation = Subtract,\n            actionTotal = total - value,\n            actionValue = value\n        };\n        total = act.actionTotal;\n        stack.Push(act);\n        undoAction = false;\n    }\n\n    public void Multiply(int value)\n    {\n        CalcAction act = new CalcAction()\n        {\n            operation = Multiply,\n            actionTotal = total * value,\n            actionValue = value\n        };\n        total = act.actionTotal;\n        stack.Push(act);\n        undoAction = false;\n    }\n\n    public void RepeatLastCommand()\n    {\n        if (stack.Count > 0)\n        {\n            if(undoAction)\n                Undo();\n            else\n            {\n                CalcAction act = stack.Peek();\n                act.operation(act.actionValue);\n            }\n        }\n    }\n\n    public void Undo()\n    {\n        if (stack.Count > 0) stack.Pop();\n        total = ((CalcAction)stack.Peek()).actionTotal;\n        undoAction = true;\n    }\n\n    internal class CalcAction\n    {\n        public Action<int> operation;\n        public int actionValue;\n        public int actionTotal;\n    }\n}\n```\n\n\nHere the main change is the internal class CalcAction that is stored in the stack with the info on the current operation. This allows the RepeatLastAction method to know which operation to re-execute. The only exception is the Undo operation that is kept out from the stack because its signature is different from the Add/Subtract/Multiply\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "basic matrix/data.frame arithmetic in R\r\n                \r\nI am finding it puzzling that I am not able to do simple matrix arithmetic in R.  Is this really not possible?  I want to take the values in 1 dataframe and subtrack them row all of the columns in another dataframe.  Seems like this should be easy but I am not finding anything, although there is a \"psych\" package which as a function but doesn't give the expected results.  Also seems  like it should not be necessary.  Any tips.  Much appreciated.\n\n```\n> NROW(arData1[c(gsub(\" \", \".\",portfolio1), \"benchmark\")])\n[1] 51\n> NCOL(arData1[c(gsub(\" \", \".\",portfolio1), \"benchmark\")])\n[1] 4\n> NROW(arData1[gsub(\" \", \".\", treasuries)])\n[1] 51\n> NCOL(arData1[gsub(\" \", \".\", treasuries)])\n[1] 1\n\nExRet1 <- arData1[c(gsub(\" \", \".\",portfolio1), \"benchmark\")] - arData1[gsub(\" \", \".\", treasuries)]\nError in Ops.data.frame(arData1[c(gsub(\" \", \".\", portfolio1), \"benchmark\")],  : \n  - only defined for equally-sized data frames\n```\n\n    ", "Answer": "\r\nThe problem has to do with the way you are indexing.\n\n```\ndf[\"colname\"]\n```\n\n\nextracts the column ```\ncolname```\n as a data frame. If you subtract two data frames, R does this column-wise and row-wise, so both data frames must have the same number of columns.\n\nHowever, you can extract ```\ncolname```\n as a vector using ```\n[[```\n, as in \n\n```\ndf[[\"colname\"]]\n```\n\n\nIf you subtract a vector from a data frame, that vector is subtracted from each column in ```\ndf```\n.\n\n```\ndf <- data.frame(x=1:5,y=11:15,z=21:25,A=31:35)\ndf[c(\"x\",\"y\",\"z\")] - df[\"A\"]\n# Error in Ops.data.frame(df[c(\"x\", \"y\", \"z\")], df[\"A\"]) : \n#   - only defined for equally-sized data frames\n\ndf[c(\"x\",\"y\",\"z\")] - df[[\"A\"]]\n#     x   y   z\n# 1 -30 -20 -10\n# 2 -30 -20 -10\n# 3 -30 -20 -10\n# 4 -30 -20 -10\n# 5 -30 -20 -10\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is floating point math broken?\r\n                \r\nConsider the following code:\n```\n0.1 + 0.2 == 0.3  ->  false\n```\n\n```\n0.1 + 0.2         ->  0.30000000000000004\n```\n\nWhy do these inaccuracies happen?\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic (arithmetic) operations and their dependence on JVM and CPU\r\n                \r\nIn Java I want to measure time for\n\n\n1000 integer comparisons (\"<\" operator),\n1000 integer additions (a+b\neach case for different a and b),\nanother simple operations.\n\n\nI know I can do it in the following way:\n\n```\nRandom rand = new Random();\nlong elapsedTime = 0;\nfor (int i = 0; i < 1000; i++) {\n    int a = Integer.MIN_VALUE + rand.nextInt(Integer.MAX_VALUE);\n    int b = Integer.MIN_VALUE + rand.nextInt(Integer.MAX_VALUE);\n\n    long start = System.currentTimeMillis();\n    if (a < b) {}\n    long stop = System.currentTimeMillis();\n    elapsedTime += (start - stop);\n}\nSystem.out.println(elapsedTime);\n```\n\n\nI know that this question may seem somehow not clear. \n\nHow those values depend on my processor (i.e. relation between time for those operations and my processor) and JVM? Any suggestions?\n\nI'm looking for understandable readings...\n    ", "Answer": "\r\n\n  How those values depend on my processor (i.e. relation between time for those operations and my processor) and JVM? Any suggestions?\n\n\nIt is not dependant on your processor, at least not directly.\n\nNormally, when you run code enough, it will compile it to native code.  When it does this, it removes code which doesn't do anything, so what you will be doing here is measuring the time it takes to perform a ```\nSystem.currentMillis()```\n, which is typically about 0.00003 ms.  This means you will get ```\n0```\n 99.997% of the time and see a 1 very rarely.\n\nI say normally, but in this case your code won't be compiled to native code, as the default threshold is 10,000 iterations.  I.e. you would be testing how long it takes the interpretor to execute the byte code.  This is much slower, but would still be a fraction of a milli-second. i.e. you have higher chance seeing a ```\n1```\n but still unlikely.\n\nIf you want to learn more about low level benchmarking in Java, I suggest you read JMH and the Author's blog http://shipilev.net/ \n\nIf you want to see what machine code is generated from Java code I suggest you try JITWatch \n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to do basic arithmetic operations for rows in Pandas Dataframe?\r\n                \r\nI am trying to figure out what I need to learn to do the following row operations. I've simplified everything in order to best convey exactly what I am trying to achieve. \n\nMy end goal is to for every row in my dataframe, subtract a value from a previous row in a different column.\n\nLet's assume I have the following data frame:\n\n```\n    Date        Open    High    Low     Close   Difference\n0   2014-07-14  197.61  197.86  197.44  197.60          \n1   2014-07-15  197.72  198.10  196.36  197.23          \n2   2014-07-16  198.11  198.26  197.42  197.96  \n```\n\n\nI want to calculate the difference column, which is calculated as: \n\n```\nOpen(n) - Close(n-1)  : where n is the current day. \n```\n\n\nSo I am subtracting yesterdays closing price from today's opening price. \n\nIt should output to:\n\n```\nDifference\nNaN\n0.12\n0.88\n```\n\n\nI am not sure exactly what kind of operations I should familiarise myself with to understand how to do this. I kind of got the hang of multiplying columns and doing basic operations with them. \n    ", "Answer": "\r\nYou just need to subtract a shifted version of ```\nClose```\n from ```\nOpen```\n, you have ```\nDataFrame.shift```\n for that:\n\n```\ndf.Open.sub(df.Close.shift()).rename('Difference')\n\n0     NaN\n1    0.12\n2    0.88\nName: Difference, dtype: float64\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "A python script to perform a basic arithmetic on a datetime\r\n                \r\nI have a csv like so:\n```\nCategory,Position,Name,Time\nA,1,Tom Smith,00:45:01.23\n```\n\nthere are multiple rows in the same format.\nI am getting the time of the first place rider in category 'A', and calculating the time which is 15% above, i.e. if they take 1 minute 40 seconds then time to calculate is 1 minute 55 seconds. It will then give anybody in cat A above this time 0 points in a new csv.\nI have this code:\n```\ndef convert(seconds):  # function to convert amount of seconds to a time format\n    seconds = seconds % (24 * 3600)\n    hour = seconds // 3600\n    seconds %= 3600\n    minutes = seconds // 60\n    seconds %= 60\n    return \"%d:%02d:%02d\" % (hour, minutes, seconds)\n\n\nwith open(\"results.csv\", 'rt', encoding='UTF-8', errors='ignore') as file:  # opening the full results file\n    reader = csv.reader(file, skipinitialspace=True, escapechar='\\\\')  # skipping headers\n    MaleCategoryList = []  # setting category as blank so a change is recognised\n    for row in reader:\n             if row[0] not in MaleCategoryList:\n                    if row[0] == \"A\":\n                        firstPlaceTime = datetime.strptime(row[3], \"%H:%M:%S.%f\")\n                        timeInSecs = firstPlaceTime.second + firstPlaceTime.minute * 60 + firstPlaceTime.hour * 3600\n                        timeDifference = timeInSecs * 1.15\n                        MaxTime = datetime.strptime(convert(timeDifference), \"%H:%M:%S\")\n# some code here which is not relevant i.e calculate points\n             if cat == \"A\" and datetime.strptime(row[3], \"%H:%M:%S.%f\") > MaxTime:\n                    points = int(0)\n                    position_for_file = \"DQ Time-Cut\"\n                    cat = \"Time Cut\"\n             data = {'Position': position_for_file, 'Category': cat, 'Name': name, 'Club': club,\n                        'Points': points, 'Time': time}  # dictionary of data to write to CSV\n```\n\nI feel it is very messy and inefficient as there are lots of if loops and it relies on lots of calculations which do seem unnecessary. Do you have any ideas of how I could re-write this/improve it?\n    ", "Answer": "\r\nWhat you could do to simplify your time arithmetic is add ```\ntimedelta```\n to the game. The time you parse from the string can be converted to a timedelta object if you subtract the date part from it (a default that is added upon creation of the datetime object by strptime). Multiply that by 0.15 to get the 15% to add to the original datetime object. Ex:\n```\nfrom datetime import datetime, timedelta\n\ndt = datetime.strptime('00:01:40.00', \"%H:%M:%S.%f\")\nadd = (dt - datetime(*dt.timetuple()[:3]))*0.15\ndt_new = dt + add\n\nprint(dt_new.time())\n# 00:01:55\n```\n\nBy the way, I'd also suggest using ```\npandas```\n for what you want to do (whenever you have data that nicely fits in a table...). But I'd use the same concept there (timedelta) - so it won't hurt the experience doing this in pure Python.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic arithmetic operation on DateTime datatype in Hyperledger Composer\r\n                \r\nI have defined an DateTime datatype which stores the date of birthday of an Participant. Now i want to find the age of Participant,i.e., difference between the present date and his date of birthday.\n\nIs there any way by which I can calculate the difference between DateTime in hyperledger composer playground?\n    ", "Answer": "\r\nyes, its straightforward javascript.\n\nExample:\n\nmodel file:\n\n```\nasset Bank identified by id {\n  o String id\n  o DateTime date1\n  o DateTime date2\n}\n\ntransaction trxn {\n  --> Bank bank\n}\n```\n\n\nscript file:\n\n```\n // \"date1\": \"2018-08-22T10:58:42.228Z\",\n // \"date2\": \"2018-08-23T10:58:42.228Z\"\n\n  var d1 = new Date(trxn.bank.date1.getTime());\n  var d2 = new Date(trxn.bank.date2.getTime());\n  var d3 = d2 - d1;   // in milliseconds\n\n  var one_day=1000*60*60*24; // in ms\n  var in_days_result = Math.round(d3/one_day);   // in days\n```\n\n\ngiven this - you should be able to work out how to do it in days, months, years using this example - and using the reference info here -> https://www.w3schools.com/jsref/jsref_obj_date.asp\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to use jsonpath-ng arithmetic?\r\n                \r\n```\njsonpath-ng```\n package claims to support basic arithmetic (https://pypi.org/project/jsonpath-ng/), but the parser won't accept arithmetic statements. Here is one of them:\n```\nfrom jsonpath_ng import parse\n\njsonpath_expr = parse('$.objects[*].cow + $.objects[*].cat')\nobj = {'objects': [\n  {'cow': 2, 'cat': 3},\n  {'cow': 4, 'cat': 6}\n]}\nvalues = [match.value for match in jsonpath_expr.find(obj)]  \nprint(values)\n```\n\nwhich throws an error:\n```\nTraceback (most recent call last):\n  File \"test.py\", line 8, in <module>\n    jsonpath_expr = parse('$.objects[*].cow + $.objects[*].cat')\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\jsonpath_ng\\parser.py\", line 14, in parse\n    return JsonPathParser().parse(string)\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\jsonpath_ng\\parser.py\", line 32, in parse\n    return self.parse_token_stream(lexer.tokenize(string))\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\jsonpath_ng\\parser.py\", line 55, in parse_token_stream\n    return new_parser.parse(lexer = IteratorToTokenStream(token_iterator))\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\ply\\yacc.py\", line 333, in parse\n    return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\ply\\yacc.py\", line 1063, in parseopt_notrack\n    lookahead = get_token()     # Get the next token\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\jsonpath_ng\\parser.py\", line 179, in token\n    return next(self.iterator)\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\jsonpath_ng\\lexer.py\", line 35, in tokenize\n    t = new_lexer.token()\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\ply\\lex.py\", line 386, in token\n    newtok = self.lexerrorf(tok)\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\jsonpath_ng\\lexer.py\", line 167, in t_error\n    raise JsonPathLexerError('Error on line %s, col %s: Unexpected character: %s ' % (t.lexer.lineno, t.lexpos - t.lexer.latest_newline, t.value[0]))\njsonpath_ng.lexer.JsonPathLexerError: Error on line 1, col 17: Unexpected character: +\n```\n\nAm I missing something? (I'm using the newest version: 1.5.2)\n    ", "Answer": "\r\nYou need to use the extended parser to make it work:\n```\n#from jsonpath_ng import jsonpath\nfrom jsonpath_ng.ext import parser\n\njsonpath_expr = parser.parse('$.objects[*].cow + $.objects[*].cat')\nobj = {'objects': [\n    {'cow': 2, 'cat': 3},\n    {'cow': 4, 'cat': 6}\n]}\nprint([match.value for match in jsonpath_expr.find(obj)])\n```\n\nThis prints: ```\n[5, 10]```\n. So it's actually adding each cow and cat value on each 'row'.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why basic arithmetic operators don't need math.h library\r\n                \r\nI got a question from my fellow student friend about why +-/* don't need math.h library to work in C language.\n    ", "Answer": "\r\n```\n<math.h>```\n contains macro and function definitions for mathematical operations. Some of the functionality in ```\n<math.h>```\n is required to be present according to the C Standard, but they still aren't intrinsically part of the grammar of the language, unlike the operators ```\n+```\n, ```\n-```\n, ```\n*```\n, ```\n/```\n and ```\n%```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "My program closes immediately? Basic arithmetic. Beginner programmer\r\n                \r\nI'm inputting a program that I'm to assess into visual studio to see where things are taking place, but it's closing immediately.\n\nHere's the code:\n\n```\n#include <iostream>\n\nint dowork(int a, int b);\n\nint main()\n{\nusing namespace std;\n\nint x = 4, y = 6;\ncout << \"Welcome to SIT153...\" << endl;\nx = dowork(x, y);\nfor (int i = 0; i < x; i++)\n{\n    int y = i + 3;\n    if (y > 6)\n        cout << i << \" + 3 = \" << y << endl;\n    else\n        cout << \"Not yet\" << endl;\n}\ncout << \"y = \" << y << endl;\nreturn 0;\n}\n\nint dowork(int a, int b)\n{\nreturn a + b;\n}\n```\n\n\nAnd here's the debug output\n\n\n  'ConsoleApplication4.exe' (Win32): Loaded\n  'C:\\Users\\barne_000\\Documents\\Visual Studio\n  2013\\Projects\\ConsoleApplication4\\Debug\\ConsoleApplication4.exe'.\n  Symbols loaded.\n  \n  'ConsoleApplication4.exe' (Win32): Loaded\n  'C:\\Windows\\SysWOW64\\ntdll.dll'. Cannot find or open the PDB file.\n  \n  'ConsoleApplication4.exe' (Win32): Loaded\n  'C:\\Windows\\SysWOW64\\kernel32.dll'. Cannot find or open the PDB file.\n  \n  'ConsoleApplication4.exe' (Win32): Loaded\n  'C:\\Windows\\SysWOW64\\KernelBase.dll'. Cannot find or open the PDB\n  file.\n  \n  'ConsoleApplication4.exe' (Win32): Loaded\n  'C:\\Windows\\SysWOW64\\msvcp120d.dll'. Cannot find or open the PDB file.\n  \n  'ConsoleApplication4.exe' (Win32): Loaded\n  'C:\\Windows\\SysWOW64\\msvcr120d.dll'. Cannot find or open the PDB file.\n  \n  The thread 0x18dc has exited with code 0 (0x0).\n  \n  The thread 0x2194 has exited with code 0 (0x0).\n  \n  The thread 0x1608 has exited with code 0 (0x0).\n  \n  The program '[9788] ConsoleApplication4.exe' has exited with code 0\n  (0x0).\n\n\nHelp?\n    ", "Answer": "\r\nConsole Windows created by debugging a program will be closed when program exits. Put in a read input at the end (wait for any character ).\n\nAlternatively, run in console window you open, (no debug )\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why does python make mistake in basic arithmetic calculations? [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Is floating point math broken?\r\n                            \r\n                                (33 answers)\r\n                            \r\n                    \r\n                Closed 8 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nTry to calculate the following on python shell:\n\n```\n>>> 5.3-2.7\n2.5999999999999996\n>>> 2.8-2.7\n0.09999999999999964\n>>> 4.7-2.8\n1.9000000000000004\n>>> 4.3-2.5\n1.7999999999999998\n>>> \n```\n\n\nWhy does it happen?\nHow can I prevent this problem from making bugs in my code?\n    ", "Answer": "\r\nIt's not a bug, but you can do this.\n\n```\n>>> round(5.3 - 2.7, 1)\n>>> 2.6\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic python arithmetic - division\r\n                \r\nI have two variables : count, which is a number of my filtered objects, and constant value per_page. I want to divide count by per_page and get integer value but I no matter what I try - I'm getting 0 or 0.0 :\n\n```\n>>> count = friends.count()\n>>> print count\n1\n>>> per_page = 2\n>>> print per_page\n2\n>>> pages = math.ceil(count/per_pages)\n>>> print pages\n0.0\n>>> pages = float(count/per_pages)\n>>> print pages\n0.0\n```\n\n\nWhat am I doing wrong, and why math.ceil gives float number instead of int ?\n    ", "Answer": "\r\nPython does integer division when both operands are integers, meaning that ```\n1 / 2```\n is basically \"how many times does 2 go into 1\", which is of course 0 times. To do what you want, convert one operand to a float: ```\n1 / float(2) == 0.5```\n, as you're expecting. And, of course, ```\nmath.ceil(1 / float(2))```\n will yield ```\n1```\n, as you expect.\n\n(I think this division behavior changes in Python 3.)\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Fixed Point Arithmetic in Chisel HDL\r\n                \r\nAre there any fixed point libraries in Chisel HDL which could be used to perform basic arithmetic operations such as add, subtract, multiply and divide?\n    ", "Answer": "\r\nI believe a Fixed class is under active development.  Take a look at Fixed.scala in the Chisel repo.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Arithmetic overflow error converting expression to data type int for basic statistics\r\n                \r\nI am trying to do a basic query that calculates average, min, max, and count.\n\n```\nSELECT\n MIN(column) as min,\n MAX(column) as max,\n AVG(column) as avg,\n count(*) as count\nFROM database.dbo.table;\n```\n\n\nWhere column is of type ```\nint```\n, and the database is azure sql standard. \n\nand in return, i get an error: \"Arithmetic overflow error converting expression to data type int\"\n\nWhy is int getting a casting-to-int problem in the first place? and is there something I can add that will make this work on all numerical types?\n    ", "Answer": "\r\nTry to use count_big like this:\n\n```\nSELECT\n MIN(column) as min,\n MAX(column) as max,\n AVG(column) as avg,\n count_big(*) as count\nFROM database.dbo.table;\n```\n\n\nAlso you try to CAST your column as BIGINT like this:\n\n```\n SELECT\n MIN(CAST(column as BIGINT)) as min,\n MAX(CAST(column as BIGINT)) as max,\n AVG(CAST(column as BIGINT)) as avg,\n count_big(*) as count\nFROM database.dbo.table;\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic Pointer Arithmetic that has me stumped\r\n                \r\nI'm working on a problem that uses pointer arithmetic and I have found this small snippet of code that works. I don't understand exactly what it's doing though. To me it looks like it is assigning the address of buffer + the value of ix3 to the array element a[i]. I don't know why that would be relevant to my program though. Can someone please tell me exactly what is happening in this loop?\n\n```\nint *buffer=new int[5*3];\n\nfor (i=0;i<5;i++)\n    a[i] = buffer+i*3;\n```\n\n    ", "Answer": "\r\nThe expression\n\n```\nbuffer+i*3\n```\n\n\nis identical to\n\n```\n&buffer[i*3]\n```\n\n\nso your assumption is correct, and I hope that ```\na[]```\n is an array of pointers.\n\nNote that pointer arithmetic like ```\nbuffer+k```\n does not take the address value contained in ```\nbuffer```\n and add k to it: instead, it's equal to the value of ```\n&buffer[k]```\n, which should equal the address value contained in buffer + k * sizeof(the type being pointed to by buffer ).\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Define upper bound type to allow arithmetic operations\r\n                \r\nIs it possible to define a upper bound type that would allow the basic arithmetic operations in the function? Simply to make this work:\n\n```\ndef a[T](t:T):T = {t*t}\n```\n\n    ", "Answer": "\r\nThere is no common super-type for all possible numeric types in Scala, so I would use the Numeric trait. It isn't a type bound, but rather a type class where you can require an implicit ```\nNumeric[A]```\n be available in scope. Implicits already exist in scope for all of Scala's numeric types.\n\n```\ndef a[T](t: T)(implicit num: Numeric[T]): T = num.times(t, t)\n```\n\n\nOr\n\n```\ndef a[T: Numeric](t: T): T = implicitly[Numeric[T]].times(t, t)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Calculating pi without arbitrary precision and only basic arithmetic\r\n                \r\nI want to calculate pi. But, I have quite a few limits. Variables can only hold up to 5 decimal places, and I only have the following operators:\n\n```\nAddition\nSubtraction\nMultiplication\nDivision\nExponents\nSquare roots\nSin\nCos\nBasic Loops, Conditionals, and relational operators.\n```\n\n\nThe BBP algorithm seems useless here, because even though it would not need arbitrary precision, I cannot convert between bases. I'm not aware of any other formulas that can find the nth digit of pi in base 10. \nWould it even be possible to calculate pi using these constraints?  \n    ", "Answer": "\r\nBBP can be modified to give π in Base 10. There's a Java implementation on Github. (I believe that the screenshot of the algorithm description is taken from Pi - Unleashed by Arndt/Haenel.)\n\nYou'll need the modulo operation and a means to calculate the closest integer to the logarithm of a number, but you can perform them using the operations you have and loops.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Determine the fastest unsigned integer type for basic arithmetic calculations\r\n                \r\nI'm writing some code for calculating with arbitrarily large unsigned integers. This is just for fun and training, otherwise I'd use libgmp. My representation uses an array of unsigned integers and for chosing the \"base type\", I use a typedef:\n\n```\n#include <limits.h>\n#include <stdint.h>\n\ntypedef unsigned int hugeint_Uint;\n\ntypedef struct hugeint hugeint;\n\n#define HUGEINT_ELEMENT_BITS (CHAR_BIT * sizeof(hugeint_Uint))\n#define HUGEINT_INITIAL_ELEMENTS (256 / HUGEINT_ELEMENT_BITS)\n\nstruct hugeint\n{\n    size_t s;         // <- maximum number of elements\n    size_t n;         // <- number of significant elements\n    hugeint_Uint e[]; // <- elements of the number starting with least significant\n};\n```\n\n\nThe code is working fine, so I only show the part relevant to my question here.\n\nI would like to pick a better \"base type\" than ```\nunsigned int```\n, so the calculations are the fastest possible on the target system (e.g. a 64bit type when targeting x86_64, a 32bit type when targeting i686, an 8bit type when targeting avr_attiny, ...)\n\nI thought that ```\nuint_fast8_t```\n should do what I want. But I found out it doesn't, see e.g. here the relevant part of ```\nstdint.h```\n from MinGW:\n\n```\n/*  7.18.1.3  Fastest minimum-width integer types\n *  Not actually guaranteed to be fastest for all purposes\n *  Here we use the exact-width types for 8 and 16-bit ints.\n */\ntypedef signed char int_fast8_t;\ntypedef unsigned char uint_fast8_t;\n```\n\n\nThe comment is interesting: for which purpose would an ```\nunsigned char```\n be faster than an ```\nunsigned int```\n on win32? Well, the important thing is: ```\nuint_fast8_t```\n will not do what I want.\n\nSo is there some good and portable way to find the fastest unsigned integer type?\n    ", "Answer": "\r\nIt's not quite that black and white; processors may have different/specialized registers for certain operations, like AVX registers on x86_64, may operate most efficiently on half-sized registers or not have registers at all. The choice of the \"fastest integer type\" thus depends heavily on the actual calculation you need to perform.\n\nHaving said that, C99 defines ```\nuintmax_t```\n which is meant to represent the maximum width unsigned integer type, but beware, it could be 64 bit simply because the compiler is able to emulate 64-bit math.\n\nIf you target commodity processors, ```\nsize_t```\n usually provides a good approximation for the \"bitness\" of the underlying hardware because it is directly tied to the memory addressing capability of the machine, and as such is most likely to be the most optimal size for integer math.\n\nIn any case you're going to have to test your solution on all hardware that you're planning to support.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Implementing arithmetic in generics?\r\n                \r\nIs it possible to implement basic arithmetic (at least addition) in C# generics, like you can with C++ templates? I've been trying for a while to get them up and working, but C# doesn't let you declare the same generic type multiple times, like you can with templates.\n\nExtensive googling did not provide an answer.\n\nEDIT: Thanks, but what I'm looking for is a way to do the arithmetic at compile time, embedding something like Church numerals in generics types. That's why I linked the article that I did. Arithmetic in generic types, not arithmetic on instances of generic types.\n    ", "Answer": "\r\nUnfortunately you cannot use arithmetic operations on generic types\n\n```\nT Add(T a, T b)\n{\n    return a + b; // compiler error here\n}\n```\n\n\nwill not work in c#!\n\nBut you can create your own numeric types and overload the operators (arithmetic, equality and ```\nimplicit```\n, ```\nexplicit```\n). This lets you work with them in a quite natural way. However you cannot create an inheritance hierarchy with generics. You will have to use a non generic base class or interface.\n\nI just did it with a vector type. A shortened version here:\n\n```\npublic class Vector\n{\n    private const double Eps = 1e-7;\n\n    public Vector(double x, double y)\n    {\n        _x = x;\n        _y = y;\n    }\n\n    private double _x;\n    public double X\n    {\n        get { return _x; }\n    }\n\n    private double _y;\n    public double Y\n    {\n        get { return _y; }\n    }\n\n    public static Vector operator +(Vector a, Vector b)\n    {\n        return new Vector(a._x + b._x, a._y + b._y);\n    }\n\n    public static Vector operator *(double d, Vector v)\n    {\n        return new Vector(d * v._x, d * v._y);\n    }\n\n    public static bool operator ==(Vector a, Vector b)\n    {\n        if (ReferenceEquals(a, null)) {\n            return ReferenceEquals(b, null);\n        }\n        if (ReferenceEquals(b, null)) {\n            return false;\n        }\n        return Math.Abs(a._x - b._x) < Eps && Math.Abs(a._y - b._y) < Eps;\n    }\n\n    public static bool operator !=(Vector a, Vector b)\n    {\n        return !(a == b);\n    }\n\n    public static implicit operator Vector(double[] point)\n    {\n        return new Vector(point[0], point[1]);\n    }\n\n    public static implicit operator Vector(PointF point)\n    {\n        return new Vector(point.X, point.Y);\n    }\n\n    public override int GetHashCode()\n    {\n        return _x.GetHashCode() ^ _y.GetHashCode();\n    }\n\n    public override bool Equals(object obj)\n    {\n        var other = obj as Vector;\n        return other != null && Math.Abs(other._x - _x) < Eps && Math.Abs(other._y - _y) < Eps;\n    }\n\n    public override string ToString()\n    {\n        return String.Format(\"Vector({0:0.0000}, {1:0.0000})\", _x, _y);\n    }\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic Arithmetic Regex Not Matching Stand Alone Positive/Negative Number\r\n                \r\nI am using the following RegEx to basically filter out any text, and accept numeric + operators. \n\n```\n([-+]?[0-9]*\\.?[0-9]+[\\/\\+\\-\\*])+([-+]?[0-9]*\\.?[0-9]+)\n```\n\n\nSo it grabs 1+1, 1-1, 2*2, 10/2, etc.. Since the solution I am writing doesn't just evaluate the expression on the row, but it totals all calculated rows in a total, I need to allow for users to put stand alone positive/negative numbers that will affect the total (500, -500, +500 (fool proofing)).  \n\nHere is the test I've been running. I need to be able to match on the +500, -500, and 500 in the test cases while still excluding any text. I am absolutely terrible with RegEx, so any help is greatly appreciated!\n    ", "Answer": "\r\nYour regex requires both groups to be present at least once. You can make the first group optional by changing the ```\n+```\n to ```\n*```\n to only require a match of the second group and make it a bit shorter like this.\n\n```\n(?:[-+]?\\d*\\.?\\d+[\\/*+-])*(?:[+-]?\\d*\\.?\\d+)\n```\n\n\nSee demo at regex101\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic pointer arithmetic for arrays\r\n                \r\nWhat would be the value of array and p after executing\n\n```\nint array[] = {1,2,3}, *p = array;\n\na. *p++;\nb. (*p)++;\nc. *p++; (*p)++\n```\n\n\nI know the answer is \n\n```\na) array = {1,2,3} and *p = 2 \nb) array = {2,2,3} and *p = 2\nc) array = {1,3,3} and *p = 3\n```\n\n\nbut I just don't understand how. And explanation would be great!\n    ", "Answer": "\r\np initially points to the first element of the array, so \n\n\na. Move the pointer to point to the next element, which is 2.\nb. Dereference p, which is 1, then increase it by 1, which becomes 2.\nc. The first part is same as a. so the pointer points to the second element, then you dereference it, you get 2, and increase it by 1, you get 3. \n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Typescript: getting right-hand side arithmetic error\r\n                \r\nI am getting an error stating the following when I attempt to do simple arithmetic in TS:\n```\nThe right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n```\n\nI am not sure what I am doing incorrect here as it seems to be basic arithmetic.\nI'd assume it's the correct type since I set it to CSSStyleDecleration:\n```\n  const computedNode = window.getComputedStyle(coversContainer) as CSSStyleDeclaration;\n  const coversContainerHeight = (computedNode.height - (computedNode.paddingTop + computedNode.paddingBottom));\n```\n\n    ", "Answer": "\r\nBecause, Typescript try to warn you: Do not do some math with strings?\n```\n  // computedNode's properties are strings\n  const computedNode = {\n    height: '20px',\n    paddingTop: '8px', \n    paddingBottom: '8px'\n  }\n  \n  const coversContainerHeight = (computedNode.height - (computedNode.paddingTop + computedNode.paddingBottom));\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Java generic arithmetic\r\n                \r\nI'm trying to create some Java classes, that should work with either float or double numbers (for simulation purposes I am required to support both). The classes need to do some basic arithmetic and also require use of trigonometric functions (sin, cos, atan2).\n\nI tried to do a generic approach. As Java does not allow primitive types in generics and ```\nMyClass<T extends Number>```\n does indeed allow Double and Float, but makes basic arithmetic impossible, I build a wrapper class around Double and Float. But this approach fails, as soon as I need to instantiate a value in one of the generic classes.\n\nIs there any clean way to support both float and double, without duplicating all the code for each type?\n    ", "Answer": "\r\nMaybe this is what you are looking for? \n\n```\nclass MyClass<T extends Number> {\n    T add(T t1, T t2) {\n        if (t1 instanceof Double) {\n            return (T) Double.valueOf((t1.doubleValue() + t2.doubleValue()));\n        } else if (t1 instanceof Float) {\n            return (T) Float.valueOf(((t1.floatValue() + t2.floatValue())));\n        } else if (t1 instanceof Integer) {\n            return (T) Integer.valueOf(((t1.intValue() + t2.intValue())));\n        }\n        // you can add all types or throw an exception\n        throw new IllegalArgumentException();\n    }\n\n    public static void main(String[] args) {\n        MyClass<Double> mc = new MyClass<Double>();\n        mc.add(1.0, 1.1);\n    }\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to use basic arithmetic operations in WHERE clause of CQL?\r\n                \r\nI am trying to write a CQL query which looks like:\n\n```\nselect * from mytable\nWHERE timestamp >= unixTimestampOf(maxTimeuuid('2016-03-01 00:00:00')) /1000 \nand timestamp <= unixTimestampOf(minTimeuuid('2016-03-31 23:59:59')) / 1000\n```\n\n\nand am getting this error:\n\n\n  Invalid syntax at line 1, char XXX\n\n\nIf I change the query to\n\n```\nselect * from mytable\nWHERE timestamp >= unixTimestampOf(maxTimeuuid('2016-03-01 00:00:00'))\nand timestamp <= unixTimestampOf(minTimeuuid('2016-03-31 23:59:59')) \n```\n\n\nit does not give any error but obviously I don't get the desired result since ```\nunixTimestampOf```\n returns milliseconds whereas my ```\ntimestamp```\n column is storing seconds. How can I fix this?\n    ", "Answer": "\r\nThis JIRA ticket is what you're probably looking for: Operator functionality in CQL. It's still unresolved, but it's moving on. One of its subtasks Add support for arithmetic operators has been marked as resolved recently, and is being merged in Cassandra 3.12, but it works for numeric data types only. I don't think it will work out of the box with your schema, you'll probably need to change timestamps to numeric data types. \n\nHTH.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Java: arithmetic mechanics on a basic level or evaluation strategies\r\n                \r\nExcuse me for the vagueness of the question, but I'm a relatively new programmer. \n\nHow exactly does the computer know how to do arithmetic? \nDoes every language - specifically Java, have an add, subtract, addition, subtraction, modular division class? \n\nIf so, how does the class scan for the operator signs?\n    ", "Answer": "\r\nComputers actually only have addition and can't subtract, multiply, or divide. It performs the addition at the bit level. Binary arithmetic is the only means by which any electronic digital computing machine can perform arithmetic.\n\nBecause the computer can only add, it cannot do the subtraction you ask. However, it can take the negative of a number and represent (at the bit level) the negative value, i.e. ```\n42+(-6)+(-6)```\n\n\nFor multiplication and dividing, it can only simulate it, i.e. To divide 42 by 7, the computer subtracts 7 from 42 (well, it adds the negative of 7 to 42) until it reaches zero and counts the number of times (6) it took to reach zero.\n\nThis is just a small summary of this, so feel free to read more :)\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to use arithmetic operations for visual basic\r\n                \r\nHow do you use money in visual basic I know that I have to set nickels and divide by 5 and I am suppose to have another expression to the number. Then i am suppose to determine what change i would have left so that way i can determine how many pennies I have. Thanks to all who looks.\n\n```\nDim change As Integer\nDim amountused As Integer\nDim quarters As Integer\nDim dimes As Integer\nDim nickels As Integer\nDim pennies As Integer\nConsole.WriteLine(\"Please enter your amount here\")\namountused = Console.ReadLine()\nConsole.WriteLine(\"change= 100-amount used\")\nConsole.WriteLine(quarters = change \\ 25)\nConsole.WriteLine(dimes = (change - quarters * 25) / 10)\nConsole.WriteLine(nickels = change \\ 5)\nConsole.WriteLine(pennies =\n```\n\n\nedit:Can someone hint to me what I am doing wrong I don't get nothing for output Thanks... The hint could be example check this line. Thanks    \n\n```\n    Dim change As Integer\n    Dim amountused As Integer\n    Dim quarters As Integer\n    Dim dimes As Integer\n    Dim nickels As Integer\n    Dim pennies As Integer\n    Console.WriteLine(\"Please enter your amount here\")\n    amountused = Console.ReadLine()\n    change = (\"100 - amountused\")\n    quarters = change \\ 25\n    Console.WriteLine(\"Quarters:{0}\", quarters)\n    change = change - (quarters * 25)\n    dimes = change \\ 10\n    Console.WriteLine(\"Dimes: {0}\", quarters)\n    change = change - (dimes * 10)\n    nickels = change \\ 5\n    change = change - (nickels * 5)\n    Console.WriteLine(\"nickels: {0}\", quarters)\n    change = pennies \\ 1\n    change = change - (pennies * 1)\n    Console.WriteLine(\"pennies:{0}\", pennies)\n```\n\n    ", "Answer": "\r\nFor finding change, I would suggest you actually use ```\nMath.DivRem```\n which will answer both the relevant questions at once:\n\n\nHow many of this coin can I use?\nHow much will I still left to deal with afterwards?\n\n\nEDIT: If you really want to stick to arithmetic, I'd keep a count of how much you still need to use up. For example:\n\n```\nquarters = change \\ 25\nConsole.WriteLine(\"Quarters: {0}\", quarters)\nchange = change - (quarters * 25)\n\ndimes = change \\ 10\nConsole.WriteLine(\"Dimes: {0}\", quarters)\nchange = change - (dimes * 10)\n... etc\n```\n\n\nThat way you don't need to keep worrying about your previous results.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Count number of basic instruction and their type\r\n                \r\nI have some code (few hundreds of lines) and i would like to reproduce the code on some \"real\" controller.\nI would like to predict how long the code would take to run by counting how many instructions (basic arithmetic, type of operation (floating point, binary, etc..)\n\nAnd i wonder if it is possible to do on python (if yes how so ? haven't found anything yet)\n\n\n\nI know there is a time feature to measure how long it takes to run the code but the calculation power of my PC and the controller i plan to use are not the same.\n\nAlso i tried counting it myself but it is quite a pain and subject to errors\n\n\n\nIdeal result would be like:\n\n\nX number of basic arithmetic operation using INT\nY number of basic arithmetic operation using FLOAT\nZ binary operation\n\n\netc ...\n\nThank you\n    ", "Answer": "\r\nYour question got me thinking. I wrote a little framework for how you might implement something like this. Basically you create your own number class and a collection to hold them all. Then you over-ride the default operators and increment a variable every time you enter those functions. Note that this is NOT robust.. There's no error checking and it assumes that all operations are done with the custom class objects.\n\n```\nfrom collections import defaultdict # Acts like a dictionary,  but every time you add a key, the value defaults to a specified value\n\nclass Collection(object): # Use this to hold your custom types\n    def __init__(self):\n        self.items = []\n        return\n\n    def add_item(self, item):\n        self.items.append(item)\n\n\nclass myFloat(object): # Your custom float class\n    def __init__(self, val, collection):\n        \"\"\" val is the value, collection is the Collections object where we will place your object \"\"\"\n        self.val = float(val)\n        self.op_counts = defaultdict(int) # a dictionary where values default to an integer, 0.\n        collection.add_item(self) # Add this object to the collection\n\n    def __add__(self, other): # Called when you use + on two myFloat\n        self.op_counts[\"+\"] += 1 # Adds 1 to the number of \"+\" used\n        return self.val + other.val # returns the result. \n\n    def __sub__(self, other): # Called when you use - on two myFloat\n        self.op_counts[\"-\"] += 1\n        return self.val - other.val\n\n    def __mul__(self, other): # Called when you use * on two myFloat\n        self.op_counts[\"*\"] += 1\n        return self.val * other.val\n\n    def __truediv__(self, other): # Called when you use / on two myFloat\n        self.op_counts[\"/\"] += 1\n        return self.val / other.val\n\n### EXAMPLE     \nimport random\nops = [\"+\", \"-\", \"*\", \"/\"] \n# We should create a separate Collection object for each custom type we have.\n# Since we only have myFloat, we make one Collection object to hold the myFloats.\n\nfloat_collection = Collection()\n\n# This instantiates a myFloat object with val=7.12 and uses your float_collection\ny = myFloat(7.12, float_collection) \n\nfor x in range(1, 1000):\n    op = random.choice(ops) # Pick a random operation\n    xx = myFloat(x, float_collection) # Instantiate another myFloat\n    # Now perform the operation on xx and y. eval evaluates the string but\n    # opens the door for security holes if you are worried about hackers. CAREFUL.\n    eval(f\"y{op}xx\") # Remove this line and use the one below if your python < 3.6\n    # eval(\"y{}xx\".format(op)) \n\nprint(\"### RESULTS ###\")\nresult_op_counts = defaultdict(int) # We use this to count up our results\n\n# Sorry for the confusing syntax. The items parameter of the Collection object\n# is NOT the same as the items() method for dictionaries.\n\n# float_collection.items is a list of your myFloats.\n# the items() method for dictionary returns a dict_items object that you can iterate through.\n# This loop tallies up all the results\nfor myFloatObj in float_collection.items: \n    for op, ct in myFloatObj.op_counts.items():\n        result_op_counts[op] += ct\n\n# And this loop prints them.\nfor k,v in result_op_counts.items():\n    print(f\"{k}: {v} operations\") # Remove this line and use the one below if your python < 3.6\n    # print(\"{}: {} operations\".format(k, v))\n\n```\n\n\nThis outputs\n\n```\n### RESULTS ###\n*: 227 operations\n/: 247 operations\n+: 275 operations\n-: 250 operations\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Java: Help with basic outputting basic value arithmetic. Getting 0 for output, don't know why?\r\n                \r\nI am having some issues doing basic math with Java. I don't know why I am getting 0 as a result of multiplying n*n*n only in one case. (see below) I need this not to be zero because I have to divide timing/n*n*n to get that big O performance. Also if I can get that working the output may look like 0.00000 but I want to multiply that by like 100,000 just so I can see numbers and find any trends in performance.\n\nYou can see the values of n and timing in the first two number columns.\n\n\nn is Integer\ntiming is Long\n\n\nThis is my output statement,\n\n```\nSystem.out.println(fmt.format(\"%20s %20d %20d %20d %20d %20d%n\", \"Alg. 1\", n, timing, n*n*n, timing/(n*n), timing /*((double)timing/((double)n*Math.log((double)n)))*/));\n```\n\n\nMy results,\n\n```\n Alg. 1                  256                    4             16777216                    0                    4\n Alg. 1                  512                   22            134217728                    0                   22\n Alg. 1                 1024                  173           1073741824                    0                  173\n Alg. 1                 2048                 1362                    0                    0                 1362\n```\n\n\nPlease keep in mind I need to perform this log math also. Any tips or fixes for that would also be appreciated!\n\nNote: I am not dividing at all in the statement n*n*n and I am getting 0 in column four row four.\n\nCan someone also please tell me how to get this to output decimal places that are accurate not just 0.000000. My new arithmetic is ((float)(timing/((long)n)*n*n)*100000. I am multiplying by 100000 as said above because I want to see something in the decimal places. I should be seeing 0.0159139 with this equation when n is 2048 and timing is 1362. I just see 0.000000 though. Any suggestions?\n    ", "Answer": "\r\n20483 is 233 which overflows using 32-bit arithmetic. Use a ```\nlong```\n or a ```\ndouble```\n to handle numbers this big.\n\n```\n((long) n) * n * n\n```\n\n\n(Demo at ideone.com)\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Algebraic types in haskell [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                    \r\n                        \r\n                    \r\n                \r\n                    \r\n                            \r\n                                It's difficult to tell what is being asked here. This question is ambiguous, vague, incomplete, overly broad, or rhetorical and  cannot be reasonably answered in its current form. For help clarifying this question so that it can be reopened,  visit the help center.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                Closed 10 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nHow can I simplify an expression using basic arithmetic?\n    ", "Answer": "\r\nI'm not sure what you mean, but if you have an expression datatype you can define a recursive eval-function. In this case eval means simplify.\n\nFor example,\n\n```\ndata Exp = Lit Int\n         | Plus Exp Exp\n         | Times Exp Exp\n\neval :: Exp -> Int\neval (Lit x)     = x\neval (Plus x y)  = eval x + eval y\neval (Times x y) = eval x * eval y\n```\n\n\nIt gets really interesting once you add variables to the language, but this is the most basic form of an expression-evaluator.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why is Java giving me unusual results to basic arithmetic with doubles?\r\n                \r\nI'm writing some intelligence for a virtual rover driving around on Mars picking up resources. I have the following code: \n\n```\npublic Point getPointFromRoverOffset(double offsetX, double offsetY) {\n    double x = offsetX + currentLocation.x;\n    double y = offsetY + currentLocation.y;\n\n    if(x > getWorldWidth()) {\n        x = x - getWorldWidth();\n    }\n    else if (x < 0) {\n        x = getWorldWidth() + x;\n    }\n\n    if(y > getWorldHeight()) {\n        y = y - getWorldHeight();\n    }\n    else if(y < 0) {\n        y = getWorldHeight() + y;\n    }\n\n    getLog().info(\"Based on location \" + currentLocation.toString());\n    getLog().info(\"Decided that offset (\" + offsetX + \",\" + offsetY + \") = (\" + x + \",\" + y + \")\");\n    return new Point(x, y);\n}\n```\n\n\nAll the numbers involved are doubles, representing a 2d vector in a 2d plane.\n\ngetWorldWidth() and getWorldHeight() both return 20.0\n\nIm getting the following strange results: \n\n```\n[INFO] 16:41 Versatile - Based on location (0.0,6.0)\n[INFO] 16:41 Versatile - Decided that offset (0.0,-5.999999999999999) = (0.0,8.881784197001252E-16)\n```\n\n\nSeemingly the input Y value -5.9 (recurring, a double rounding fault), and the current Y position 0.6 so the value should have been 0.1. Yet it comes out as 8.88 (et al). \n\nWhy? Is this some odd behaviour of doubles that I'm not aware of? Or am I missing something more obvious?\n    ", "Answer": "\r\n```\n8.881784197001252E-16```\n is a very small number. it is approx 0.000000000000000888 or 8.88*10^-16. It is the difference between the value with a slight rounding error and the expect value.\n\nIf you need values to be exact, I suggest either\n\n\nround the doubles\nuse a small allowed error in your calculations e.g. ERR = 1e-6\nuse integers (by scaling everything by 1000 for example)\nuse BigDecimal.\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Prolog `is` arithmetic failing strangely\r\n                \r\nThe following code \n\n```\nitD(Start, End, Distance, Max) :-\n   Distance < Max,\n   newDistance is Distance+1,\n   itD(Start, End, newDistance, Max).\n```\n\n\nGives me a very strange fail.\n\n```\n  2    2  Call: 0<15 ? \n  2    2  Exit: 0<15 ? \n  3    2  Call: newDistance is 0+1 ? \n  3    2  Fail: newDistance is 0+1 ? \n```\n\n\nWhich I really don't understand. Since I'm using really basic arithmetics. \n\n```\n| ?- Distance is 1, NewDistance is Distance+1.\n  Distance = 1\n  NewDistance = 2\n  yes\n```\n\n\nAs you can see I have no issues what so ever writing the same operation in the console.\n\nI would be really glad if someone could help me figure this strange arithmetic issue.\n    ", "Answer": "\r\nJust the second after I posted this i realized that variables in prolog need to start with a capital letter, I guess that's a quite common mistake for someone new in Prolog.\n\nHope this will help someone out in the future.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "how to perform a basic arithmetics from unix csh/tcsh shell\r\n                \r\nUnder windows, when I need to perform  a basic calculations, I use a built-in calculator. Now I would like to find out what is the common way if you only have a shell.\n\nThanks\n    ", "Answer": "\r\nFrom this web page (for ```\ncsh```\n and derivatives, since you asked):\n\n```\n% @ x = (354 - 128 + 52 * 5 / 3)\n% echo Result is $x\nResult is 174\n```\n\n\nand \n\n```\n% set y = (354 - 128 + 52 / 3)\n% echo Result is $y\nResult is 354 - 128 + 52 / 3\n```\n\n\nnotice the different results. \n\nPersonally, I stick to ```\n/bin/sh```\n and call ```\nawk```\n or something (for maximal portability), or others have exhibited the ```\nbash```\n approach.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "hex string arithmetic in c++\r\n                \r\nI want to do basic arithmetic (addition, subtraction and comparison) with 64 digit hex numbers represented as strings. for example\n\n```\n\"ffffa\"+\"2\" == \"ffffc\"```\n\n\nSince binary representation of such a number requires 256 bits, I cannot convert the string to basic integer types. one solution is to use ```\ngmp```\n or ```\nboost/xint```\n but they are too big for this simple functionality.\n\nIs there a lightweight solution that can help me?\n    ", "Answer": "\r\nJust write a library which will handle the strings with conversion between hex to int and will add one char at a time, taking care of overflow. It took minutes to implement such an algorithm:\n\n```\n#include <cstdio>\n#include <sstream>\n#include <iostream>\n\nusing namespace std;\n\nnamespace hexstr {\n    char int_to_hexchar(int v) {\n        if (0 <= v && v <= 9) {\n            return v + '0';\n        } else {\n            return v - 10 + 'a';\n        }\n    }\n    int hexchar_to_int(char c) {\n        if ('0' <= c && c <= '9') {\n            return c - '0';\n        } else {\n            return c - 'a' + 10;\n        }\n    }\n    int add_digit(char a, char b) {\n        return hexchar_to_int(a) + hexchar_to_int(b);\n    }\n    void reverseStr(string& str) { \n        int n = str.length(); \n        for (int i = 0; i < n / 2; i++) \n            swap(str[i], str[n - i - 1]); \n    }\n    void _add_val_to_string(string& s, int& val) {\n        s.push_back(int_to_hexchar(val % 16));\n        val /= 16;\n    }\n    string add(string a, string b)\n    {\n        auto ita = a.end();\n        auto itb = b.end();\n        int tmp = 0;\n        string ret;\n\n        while (ita != a.begin() && itb != b.begin()) {\n            tmp += add_digit(*--ita, *--itb);\n            _add_val_to_string(ret, tmp);\n        }\n        while (ita != a.begin()) {\n            tmp += hexchar_to_int(*--ita);\n            _add_val_to_string(ret, tmp);\n        }\n        while (itb != b.begin()) {\n            tmp += hexchar_to_int(*--itb);\n            _add_val_to_string(ret, tmp);\n        }\n        while (tmp) {\n            _add_val_to_string(ret, tmp);\n        }\n\n        reverseStr(ret);\n\n        return ret;\n    }\n}\n\nint main()\n{\n    std::cout \n        << \"1bd5adead01230ffffc\" << endl\n        << hexstr::add(\n                std::string() + \"dead0000\" + \"00000\" + \"ffffa\", \n                std::string() + \"deaddead\" + \"01230\" + \"00002\"\n        ) << endl;\n    return 0;\n}\n```\n\n\nThis can be optimized, the reversing string maybe can be omitted and some cpu cycles and memory allocations spared. Also error handling is lacking. It will work only on implementations that use ASCII table as the character set and so on... But it's as simple as that. I guess this small lib can handle any hex strings way over 64 digits, depending only on the host memory.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How do I explicitly use unchecked arithmetic operators in F#\r\n                \r\nIf I use the --checked+ option when compiling F# code, how do I use unchecked arithmetic for a specific operation.\n\nGoing the other way is easy, just use the FSharp.Core.Operators.Checked module; but I can't find the appropriate module to get the Unchecked versions of the operators.\n\nThe FSharp.Core.Operators.Unchecked module exists, but does not contain any of the basic arithmetic operations such as ```\n+```\n, ```\n*```\n, etc.\n\nFor example:\n\n```\nlet a = FSharp.Core.uint32.MaxValue\nlet b = a+1u //Alter this to get it to work?\n//b should be 0,\n//rather than OverflowException being thrown in the previous line\nb\n```\n\n    ", "Answer": "\r\nThe default unchecked operators are defined in ```\nMicrosoft.FSharp.Core.Operators```\n. If you need this in just a few places, you can refer to the operator explicitly via the full module name:\n\n```\nlet a = FSharp.Core.uint32.MaxValue\nlet b = Microsoft.FSharp.Core.Operators.(+) a 1u\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Tricks compiler uses to compile basic arithmetic operations of 128-bit integer\r\n                \r\nI played on GodBolt to see x86-64 gcc(6.3) compiles the following codes:\n\n```\ntypedef __int128_t int128_t;\ntypedef __uint128_t uint128_t;\n\nuint128_t mul_to_128(uint64_t x, uint64_t y) {\n  return uint128_t(x)*uint128_t(y);\n}\nuint128_t mul(uint128_t x, uint128_t y) {\n  return x*y;\n}\nuint128_t div(uint128_t x, uint128_t y) {\n  return x/y;\n}\n```\n\n\nand I got:\n\n```\nmul_to_128(unsigned long, unsigned long):\n        mov     rax, rdi\n        mul     rsi\n        ret\nmul(unsigned __int128, unsigned __int128):\n        imul    rsi, rdx\n        mov     rax, rdi\n        imul    rcx, rdi\n        mul     rdx\n        add     rcx, rsi\n        add     rdx, rcx\n        ret\ndiv(unsigned __int128, unsigned __int128):\n        sub     rsp, 8\n        call    __udivti3 //what is this???\n        add     rsp, 8\n        ret\n```\n\n\n3 questions:\n\n\nThe 1st function(cast ```\n64-bit```\n uint to ```\n128-bit```\n then multiply them) are\nmuch simpler than multiplication of 2 128-bit uints(2nd function). Basically, just\n1 multiplication. If you multiply 2 maximums of 64-bit uint, it\ndefinitely overflows out of a 64-bit register...How does it produce\n128-bit result by just 1 64-bit-64-bit multiplication??? \nI cannot read the second result really well...my guess is to break 64-bit number to 2 32-bit numbers(says, ```\nhi```\n as higher 4 bytes\nand ```\nlo```\n as lower 4 bytes), and assemble the result like\n```\n(hi1*hi2)<<64 + (hi1*lo2)<<32 + (hi2*lo1)<<32+(lo1*lo2)```\n. Apparently\nI was wrong...because it uses only 3 multiplications (2 of them\nare even ```\nimul```\n...signed multiplication???why???). Can anyone tell me\nwhat gcc is thinking? And it is optimal?\nCannot even understand the assembly of the division...push stack -> call something called ```\n__udivti3```\n then pop stack...is ```\n__udivti3```\n something\nbig?(like table look-up?) and what stuff does gcc try to push before the call?\n\n\nthe godbolt link: https://godbolt.org/g/sIIaM3\n    ", "Answer": "\r\nYou're right that multiplying two unsigned 64-bit values can produce a 128-bit result. Funny thing, hardware designers know that, too. <g> So multiplying two 64-bit values produces a 128-bit result by storing the lower half of the result in one 64-bit register and the upper half of the result in another 64-bit register. The compiler-writer knows which registers are used, and when you call ```\nmul_to_128```\n it will look for the results in the appropriate registers.\n\nIn the second example, think of the values as ```\na1*2^64 + a0```\n and ```\nb1*2^64 + b0```\n (that is, split each 128-bit value into two parts, the upper 64 bits and the lower 64 bits). When you multiply those you get ```\na1*b1*2^64*2^64 + a1*b0*2^64 + a0*b1*2^64 + a0*b0```\n. That's essentially what the assembly code is doing. The parts of the result that overflow 128 bits are ignored.\n\nIn the third example,```\n__udivti3```\n is a function that does the division. It's not simple, so it doesn't get expanded inline.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Do some basic arithmetic between a string and number in html with angular\r\n                \r\nI know there must be a simple solution to this that I can't figure out.\nI have an array of objects that contain these two values:\n```\nteam.seed: number,\nteam.placement: string\n```\n\n```\nteam.placement```\n will either be a simple string like 7, indicating a team made 7th place. It can also be something like ```\n10T```\n, meaning they tied for ```\n10th```\n place.\nI'm creating a table that should print out all the differences between the initial seed and the final placement:\n```\n<tr *ngFor='let team of team_array'>\n    <td>{{team.placement - team.seed}}</td>\n</tr>\n```\n\nThis works fine if placement does not have the trailing T, but prints a ```\nNaN```\n value if it does. How can I handle placement so that I can get a numerical value in each case?\n    ", "Answer": "\r\nYou can parse team.placement to number first,\ntry\n```\nparesInt(team.placement)```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why doesn't arithmetic work on variables\r\n                \r\nI'm stuck getting a basic if statement to work on a custom pagination for a jekyll site. Here's my code:\n\n```\n{% if paginator.total_pages > 1 %}\n  {% for page in (1..paginator.total_pages) %}\n    {% if page == paginator.page %}\n      ({{ page }})\n    {% elsif page >= 6 and page <= 10 %}\n      {{ page }}\n    {% else %}\n      {{ paginator.page }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n```\n\n\nAssuming the current page is number 8, I get the following output:\n\n```\n8 8 8 8 8 6 7 (8) 9 10 8 8 8 8 8 8 8\n```\n\n\nNow if I replace ```\n{% elsif page >= 6 and page <= 10 %}```\n with ```\n{% elsif page >= (paginator.page - 2) and page <= (paginator.page + 2) %}```\n I get the following output:\n\n```\n8 8 8 8 8 8 8 (8) 8 8 8 8 8 8 8 8 8\n```\n\n\nCan someone explain why basic arithmetic doesn't work on the variable (```\npaginator.page```\n) and how I can get around this?\n    ", "Answer": "\r\nOK, total rewrite of my answer, I'll leave the old stuff below for historical reference to the troubleshooting steps.  \n\nAccording to this: Liquid and Arithmetic Liquid has it's own way of capturing variables and doing arithmetic. Thanks to the OP for the find. Just surprised that I couldn't find this in their own documentation. \n\n\n\nOK, since Liquid apparently needs ```\nand```\n, not ```\n&&```\n I would try getting the arithmetic out of the if statement.\n\n```\n{% for page in (1..paginator.total_pages) %}\n{% assign two_less = (paginator.page - 2) %}\n{% assign two_more = (paginator.page + 2) %}\n{% if page == paginator.page %}\n  ({{ page }})\n{% elsif page >= two_less and page <= two_more %}\n      {{ page }}\n...\n```\n\n\n\n\nI think you might be seeing a problem with the Liquid template language. There have been problems before with ```\nand```\n in Liquid, even in strings. See this closed issue: https://github.com/Shopify/liquid/issues/13\n\nI would try this:\n\n```\n{% elsif (page >= (paginator.page - 2)) && (page <= (paginator.page + 2)) %}\n```\n\n\n```\nand```\n and ```\n&&```\n are slightly different in ruby, and possibly Liquid has some special significance for ```\nand```\n.\n\n\n\nold answer\n\nIt is basically doing exactly what you tell it to do. You say in the comments \"I know the value is 8 because it prints 16 times\". That is not valid debugging. All you know is that\n\n```\npage = 8 #at the time of execution\n```\n\n\nand that your ```\nif```\n statement determined that it needed to print that value every time. So you are assuming that \"8\" is coming from the various branches of your ```\nif```\n statement, but it is far more likely that your ```\nif```\n statement keeps evaluating to the branch that prints \"8\". The simplest debugging you can do here is add:\n\n```\n{% if paginator.total_pages > 1 %}\n  {% for page in (1..paginator.total_pages) %}\n    {% if page == paginator.page %}\n      ({{ page }})\n      {{ puts \"if\" }}\n    {% elsif page >= (paginator.page - 2) and page <= (paginator.page + 2) %}\n      {{ page }}\n      {{ puts \"else if\" }}\n    {% else %}\n      {{ paginator.page }}\n      {{ puts \"else\" }}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n```\n\n\nI don't use Jekyll so I am not 100% sure of my syntax, but you see what I'm trying to achieve? This will tell you where in the ```\nif```\n statement your output value is coming from. If it is coming from the arithmetic as you suspect, it will tell you that. What I suspect though, is that you will see it never gets into that part of the ```\nif```\n as you assume. Also, I'm not sure why you are getting \n\n```\n8 8 8 8 8 6 7 (8) 9 10 8 8 8 8 8 8 8\n```\n\n\nDo you want the first five and the last seven elements to evaluate to ```\n8```\n and not:\n\n```\n1 2 3 4 5 6 7 (8) 9 10 11 12 13 14 15 16 17\n```\n\n\nAlso just to be sure you're getting the type of variable return you expect change \n\n```\n(paginator.page - 2) and page <= (paginator.page + 2)\n```\n\n\nto:\n\n```\n(paginator.page.to_i - 2) and page <= (paginator.page.to_i + 2)\n```\n\n\nSo my answer is pretty much what mcfinnigan said, arithmetic with variables does work. So you are either not getting an integer from the method ```\npaginator.page```\n, or there is some other flaw in the ```\nif```\n statement's logic. \n\nedit-----\n(removed part about \"paginator.number\" as it doesn't seem to apply to user's case)\n\nI can expand and improve this answer if you can do the debugging I suggested and post the output.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Are arithmetic operations on literals in C++ evaluated at compile time?\r\n                \r\nHerein, similar questions were asked for ```\nC#```\n: \n\nAre arithmetic operations on literals in C# evaluated at compile time?, \n\nand ```\njava```\n: \n\nAre arithmetic operations on literals calculated at compile time or run time?.\n\nConsidering C++, will the following calculations be evaluated during run- or compile-time? The first is to define a built-in type, the second is to be a function argument.\n\nYet please consider them for all 4 basic arithmetic operations as well as with other built-in types, e.g. an ```\nint```\n instead of the ```\ndouble```\n below.\n\n\n```\ndouble testDouble = 2.0 + 2.0;```\n\n```\naUserDefinedType testUserDefinedTypeObject\n(\n    aMemberVariable*std::pow(someOtherVariable, 1.0/8.0)\n);\n```\n\n\n    ", "Answer": "\r\nIt depends on your compiler and its optimization level when building the code.\n\nThere is no intrinsic guarantee of compile time evaluation, but most compilers will evaluate constant expressions at compile time when optimizations are turned on.\n\nThere is also constexpr which can also help the compiler know what can be evaluated at compile time.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Arithmetic in python, can't figure out simple basic operations\r\n                \r\nI am doing some very basic excersizes in python. I'm using the hard way to learn python book, which in excersize 3 have a expression I should understand.\n\n3 + 2 + 1 - 5 + 4 % 2 - 1 / 4 + 6, is coming out as 7.\n\nFor me, the answer is 6.\n\n6 - 5 + 0 - 1 / 4 + 6\n\n1 - 1 / 4 + 6\n\n6.\n\nThis is clearly wrong, but can anyone help me with priorty in mathematics etcetera? I seem to have forgotten everything if it's not inside a parenthesis! \n\nEDIT: Thank you very much for the response. I've clearly learned something about the very basic stuff, which I think is important before moving on! My order of operations was definately way off!\n    ", "Answer": "\r\n4 % 2 = 0 because the remainder of 4 / 2 is 0\n\n1 / 4 is also 0 because it is doing integer division and .25 is floored to 0.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How do I parse basic arithmetic (eg \"5+5\") using a simple recursive descent parser in C++?\r\n                \r\nThis has been on my mind for a while. I'm intrigued by recursive descent parsers, and would like to know how to implement one. What I want is a simple parser that will understand simple arithmetic such as \"5+5\", or \"(5+5)*3\".\n\nI figure the first step is to write a 'tokenizer', which takes the entire input string and breaks it into many substrings. This part I have done (I've even had to ask about it here. You don't have to follow the link if you don't want to, since I'm posting the relavent code here as well.) With this tokenizer of mine, I end up with a ```\nvector```\n of ```\nstring```\ns, or tokens. Now, the hard part: I'd like to parse those tokens.\n\nI've read the Wikipedia article on recursive descent parsers. I do understand the overall concept, but as always, the implementation is a bit confusing. In that article, there is a C implementation of a recursive descent parser for a very simple programming language, also discussed in the article. I studied that code as best I could, and tried to basically write the same thing, but for my program. Below is that code.\n\nWhat I am really confused about is what this parser does. It seems to go through the program and 'expect' certain parts of the grammar. But once it gets there, what does it do? For example, here is one function from the Wikipedia code that is supposed to parse a 'term':\n\n```\nvoid term(void) {\n    factor();\n    while (sym == times || sym == slash) {\n        getsym();\n        factor();\n    }\n}\n```\n\n\nThis is meant to parse this grammar:\n\n```\nterm = factor {(\"*\"|\"/\") factor} .\n```\n\n\nwhich makes sense. But what does it do with the actual term? Let's say that term is simply \"6\", or was \"3*2\" and came out to be of value 6. How would it incorporate that into the rest of the input? Shouldn't ```\nterm()```\n return a ```\ndouble```\n instead of ```\nvoid```\n (to return the 6)? Or is it done some other way?\n\nAlso, what would be the difference between getting a parser like this to output code, and to immediately act upon the input (ie compiler vs. interpreter)? Are those two (in this example at least) theoretically implemented the same way, or are they fundamentally different?\n\nAny input is welcome. Here is my code thus far:\n\n```\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctype.h>\n#include <sstream>\n\nusing namespace std;\n\nvector<string> symbolize(string);\nbool accept(string);\nvoid getSymbol();\nvoid error(string s);\nbool expect(string);\nvoid expression();\nvoid term();\nvoid factor();\n\nint currentPosition = -1;\nstring symbol;\nvector<string> symbols;\n\nint main(int argc, const char * argv[])\n{\n\n    string input;\n    getline(cin,input);\n\n    symbols = symbolize(input);\n    getSymbol();\n    expression();\n\n\n    return 0;\n}\n\nvoid factor(){\n    if(isdigit(symbol.c_str()[0])){}\n    else if(accept(\"(\")){\n        expression();\n        expect(\")\");\n    }\n    else {\n        error(\"Syntax error\");\n    }\n\n}\n\nvoid term(){\n    factor();\n    while(symbol==\"*\"||symbol==\"/\"){\n        getSymbol();\n        factor();\n    }\n}\n\nvoid expression(){\n    if(symbol == \"+\" || symbol == \"-\") getSymbol();\n    term();\n    while(symbol == \"+\" || symbol == \"-\"){\n        getSymbol();\n        term();\n    }\n}\n\nvoid error(string s){\n    cout << endl << \"ERROR: \" << s << endl;\n}\n\nvoid getSymbol(){\n    currentPosition++;\n    if(currentPosition>=symbols.size())error(\"Unexpectedly reached end of input\");\n\n}\n\nbool expect(string s){\n    if(accept(s))return true;\n    else error(\"Expected '\" + s + \"'\");\n    return false;\n}\n\nbool accept(string s){\n    if(s==symbol){getSymbol();return true;}\n    return false;\n}\n\n// Takes a string and breaks it into substrings\nvector<string> symbolize(string input){\n    int position = 0;\n    char c;\n    //stringstream s;\n    vector<string> symbols;\n    enum symbolType {TEXT,OPERATOR}symbolType,charType;\n\n    while(position < input.size()){\n        stringstream s;\n        c = input.at(position);\n        if(isalnum(c))symbolType = TEXT;\n        else symbolType = OPERATOR;\n        charType = symbolType;\n\n        while(symbolType == charType){\n            s << c;\n            position++;\n            if(position>=input.length())break;\n            c = input.at(position);\n            if(isspace(c)||c=='\\n'){position++; break;}\n            if(isalnum(c)) charType = TEXT;\n            else charType = OPERATOR;\n        }\n\n        symbols.push_back(s.str());\n    }\n\n    return symbols;\n}\n```\n\n\nEdit: I should mention that my code always prints: ```\nERROR: syntax error```\n, from the ```\nfactor()```\n function.\n    ", "Answer": "\r\nThe wikipedia article contains a very complete looking parser (but no lexer!) that does nothing else.\n\nFor actually interpreting the result, the general idea is, each parsing function passes back the partly-interpreted result to its parent/caller.  The result could be of a different type for each rule in the tree.  If you are writing a parser for a complete language, a partially interpreted result could be a simple constant (which could be of any type) or it could be an entire function (which you may need to later compile).  In the case of an equation parser, each rule would simply perform the required operation on the elements it gets from calling other functions, and pass the result back up to the function that called it.\n\nThere are two approaches that come to mind:\n\n\nHave each function accept a ```\nsomething* result```\n parameter.  In the case of a simple equation parser this would probably be ```\nfloat* result```\n for all of the elements.\nSimply return the result, by changing all the functions from ```\nvoid rule_x()...```\n to ```\nfloat rule_x()...```\n.\n\n\nIn either case you will need some way to deal with errors.  If you are in C you have no exceptions so you would probably be best using option 1 and using the return value to indicate success.  Then there would be lots of\n\n```\nif(!expression(&result)) return 0;\n```\n\n\nBut in C++ you could wrap the parse in an exception handler, and throw an exception on error that aborted the rest of the parse.\n\nThings get much more interesting when you want to, say compile an entire language with optimisation or JIT, and attempt to recover gracefully from syntax errors and keep parsing.\n\nThe book to get on the subject is the dragon book.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "how can split integers into bytes without using arithmetic in c?\r\n                \r\nI am implementing four basic arithmetic functions(add, sub, division, multiplication) in C.\n\nthe basic structure of these functions I imagined is\n\nthe program gets two operands by user using scanf,\n\nand the program split these values into bytes and compute!\n\nI've completed addition and subtraction,\n\nbut I forgot that I shouldn't use arithmetic functions,\n\nso when splitting integer into single bytes,\n\nI wrote codes like \n\n```\n    while(quotient!=0){\n    bin[i]=quotient%2;\n    quotient=quotient/2;\n    i++;\n}\n```\n\n\nbut since there is arithmetic functions that i shouldn't use.. \n\nso i have to rewrite that splitting parts,\n\nbut i really have no idea how can i split integer into single byte without using\n% or /.\n    ", "Answer": "\r\nTo access the bytes of a variable type punning can be used.\nAccording to the Standard C (C99 and C11), only ```\nunsigned char```\n brings certainty to perform this operation in a safe way.  \n\nThis could be done in the following way:  \n\n```\ntypedef unsigned int myint_t;\nmyint_t x = 1234;\nunion {\n  myint_t val;\n  unsigned char byte[sizeof(myint_t)];\n} u;\n```\n\n\nNow, you can of course access to the bytes of x in this way:\n\n```\nu.val = x;\nfor (int j = 0; j < sizeof(myint_t); j++)\n   printf(\"%d \",u.byte[j]);\n```\n\n\nHowever, as WhozCrag has pointed out, there are issues with endianness.\nIt cannot be assumed that the bytes are in determined order.\nSo, before doing any computation with bytes, your program needs to check how the endianness works.  \n\n```\n#include <limits.h> /* To use UCHAR_MAX */\n\nunsigned long int ByteFactor = 1u + UCHAR_MAX; /* 256 almost everywhere */\nu.val = 0;\n\nfor (int j = sizeof(myint_t) - 1; j >= 0 ; j--)\n  u.val = u.val * ByteFactor + j;\n```\n\n\nNow, when you print the values of u.byte[], you will see the order in that bytes are arranged for the type ```\nmyint_t```\n.\nThe less significant byte will have value 0.  \n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic parsing structure for nested structures?\r\n                \r\nI've come across the following bnf quite frequently for parsing a basic arithmetic expression:\n```\nS :== EXPRESSION\nEXPRESSION :== TERM | TERM { [+,-] TERM] }\nTERM :== FACTOR | FACTOR { [*,/] FACTOR] }\nFACTOR :== number | '(' EXPRESSION ')'\n\n-- or --\n\nexpression :    term | term + term | term − term\nterm :      factor | factor * factor | factor / factor\nfactor :    number | ( expression ) | + factor | − factor\n```\n\nThis would parse something like ```\n2+3-4*(1+2)```\n. However, what is required to parse something like ```\n1+1+1+1```\n, as the above factor cannot also refer to the expression production itself?\n    ", "Answer": "\r\nYour first version is correct, but not BNF. It uses \"extended\" syntax, which includes the repetition operator ```\n{ ... }```\n, which means \"zero or more instances of the pattern inside the braces\". So ```\nTERM { [+,-] TERM] }```\n means ```\nTERM```\n or ```\nTERM + TERM```\n or ```\nTERM - TERM + TERM```\n or ```\nTERM + TERM + TERM - TERM```\n, etc.\nYour second version is not correct (and does not correspond to the first version). You don't provide any citation for it, so I can't tell if you copied it incorrectly or your source was simply wrong. Here's a correct version:\n```\nexpression: term | expression + term | expression − term\nterm:       factor | term * factor | term / factor\nfactor:     number | ( expression ) | + factor | − factor\n```\n\nI hope it becomes clear how that analyses ```\n1 + 1 + 1 + 1```\n into a left-associated sequence of additions.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Special simple random number generator\r\n                \r\nHow to create a function, which on every call generates a random integer number? This number must be most random as possible (according to uniform distribution). It is only allowed to use one static variable and at most 3 elementary steps, where each step consists of only one basic arithmetic operation of arity 1 or 2.\n\nExample:\n\n```\nint myrandom(void){\n  static int x;\n  x = some_step1;\n  x = some_step2;\n  x = some_step3;\n  return x;\n}\n```\n\n\nBasic arithmetic operations are +,-,%,and, not, xor, or, left shift, right shift, multiplication and division. Of course, no rand(), random() or similar stuff is allowed.\n    ", "Answer": "\r\nLinear congruential generators are one of the oldest and simplest methods:\n\n```\nint seed = 123456789;\n\nint rand()\n{\n  seed = (a * seed + c) % m;\n  return seed;\n}\n```\n\n\nOnly a few instruction with basic arithmetic operations, that's all you need.\n\nMind that this algorithm works fine only if a, c and m are chosen in a particular way!\n\nTo guarantee the longest possible period of this sequence, c and m should be coprime, a − 1 should be divisible by all prime factors of m, and also for 4 if m is divisible by 4.\n\nSome examples of parameters are shown on Wikipedia: for example ANSI C for some compilers proposes m = 2 ³¹, a = 1103515245 and c = 12345.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Do different arithmetic operations have different processing times?\r\n                \r\nAre the basic arithmetic operations same with respect to processor usage. For e.g if I do an addition vs division in a loop, will the calculation time for addition be less than that for division?\n\nI am not sure if this question belongs here or computer science SE\n    ", "Answer": "\r\nYes. Here is a quick example:\n\nhttp://my.safaribooksonline.com/book/hardware/9788131732465/instruction-set-and-instruction-timing-of-8086/app_c\n\nthose are the microcode and the timing of the operation of a massively old architecture, the 8086. it is a fairly simple point to start.\n\nof relevant note, they are measured in cycles, or clocks, and everything move at the speed of the cpu (they are synchronized on the main clock or frequency of the microprocessor)\n\nif you scroll down on that table you'll see a division taking anywhere from 80 to 150 cycles.\n\nalso note operation speed is affected by which area of memory the operand reside.\n\nnote that on modern processor you can have parallel instruction executed concurrently (even if the cpu is single threaded) and some of them are executed out of order, then vector instruction murky the question even more.\n\ni.e. a SSE multiplication can multiply multiple number in a single operation (taking multiple time) \n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Where is implementation of basic methods like '+', '*', '/' (Arithmetic operators) in Scala?\r\n                \r\nthis may be the very beginning question and not only for Scala (I also want to know the same for Java), but where is implementation of basic methods in basic class?? For example, multiply operation has some overloaded methods and there is only written about interface. (https://github.com/scala/scala/blob/2.12.x/src/library/scala/Int.scala#L392-L405)\n\nBut, when I look around there, nothing can be found. How can I know about their implementation??\n    ", "Answer": "\r\nThere is no actual implementation of those methods. To the JVM those methods don't even really exist. They are translated by the compiler to a bytecode instruction. For instance the method ```\n+```\n on ```\nInt```\n is translated to the ```\niadd```\n bytecode instruction.\n\nYou can see the bytecode that scalac generates in the REPL:\n```\niload```\n means \"push a local variable on the stack\". ```\niadd```\n pops two values from the stack, adds them as though they are integers and pushes the result back on the stack.\n\n```\nscala> class Foo { def foo(a: Int, b: Int) = a.+(b) }\ndefined class Foo\n\nscala> :javap -c -p -filter Foo\nCompiled from \"<console>\"\npublic class Foo {\n  public int foo(int, int);\n    Code:\n       0: iload_1\n       1: iload_2\n       2: iadd\n       3: ireturn\n\n  public Foo();\n    Code:\n       0: aload_0\n       1: invokespecial #24                 // Method java/lang/Object.\"<init>\":()V\n       4: return\n}\n```\n\n\nIn case of scala.js something similar happens, but instead of JVM bytecode, javascript code gets generated.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "C Problem with the arrays( I think) || Programm for basic arithmetic operations N\r\n                \r\nI have a problem with my code...\nI want to input N numbers, for example if my N is 4 I want to calculate 1 2 3 4 with 10 20 30 40.\n(1 and 10, 2 and 20 etc. )\nBut my program calculates 1 and 2, 3 and 4, etc.\nSo what can I do that my array can calculate the input piece by piece.\n(I want to keep the on Value and on reference Pointer for the calculate sub-programm)\nCode:\n```\n#define N 4\n#include<stdio.h>\n\nvoid KeyInput(double Input1[N]);\nvoid KeyOutput(double Add[N], double Sub[N], double Mult[N], double Div[N]);\nvoid calculate(double Input1[N], double Input2[N], double (*Add)[N],\n        double (*Sub)[N], double (*Mult)[N], double (*Div)[N]);\n\nint main() {\n    int i;\n    double Input1[N], Input2[N], Add[N], Sub[N], Mult[N],\n            Div[N];\n\n    for (i = 0; i < N; i++) {\n        KeyInput(Input1);\n        KeyInput(Input2);\n\n        calculate(Input1, Input2, &Add, &Sub, &Mult, &Div);\n        KeyOutput(Add, Sub, Mult, Div);\n    }\n    return 0;\n}\n\nvoid KeyInput(double Input1[N]) {\n    fflush(stdout);\n    scanf(\"%lf\", &Input1[N]);\n}\n\nvoid calculate(double Input1[N], double Input2[N], double (*Add)[N],\n        double (*Sub)[N], double (*Mult)[N], double (*Div)[N]) {\n\n    (*Add)[N] = Input1[N] + Input2[N];\n    (*Sub)[N] = Input1[N] - Input2[N];\n    (*Mult)[N] = Input1[N] * Input2[N];\n    (*Div)[N] = Input1[N] / Input2[N];\n}\n\nvoid KeyOutput(double Add[N], double Sub[N], double Mult[N], double Div[N]) {\n    printf(\"Summe: %lf \\t\", Add[N]);\n    printf(\"Differenz: %lf \\t\", Sub[N]);\n    printf(\"Produkt: %lf \\t\", Mult[N]);\n    printf(\"Quotient: %lf \\n\", Div[N]);\n}\n```\n\n    ", "Answer": "\r\nI've simplified and wrangled your code into a more conventional C form, where what you end up with is:\n```\n#include<stdio.h>\n\ndouble key_input() {\n    double input;\n\n    fflush(stdout);\n    scanf(\"%lf\", &input);\n\n    return input;\n}\n\nvoid calculate(double input1, double input2, double *add,\n    double *sub, double *mult, double *div) {\n\n    *add = input1 + input2;\n    *sub = input1 - input2;\n    *mult = input1 * input2;\n    *div = input1 / input2;\n}\n\nvoid key_output(double add, double sub, double mult, double div) {\n    printf(\"Summe: %lf \\t\", add);\n    printf(\"Differenz: %lf \\t\", sub);\n    printf(\"Produkt: %lf \\t\", mult);\n    printf(\"Quotient: %lf \\n\", div);\n}\n\nint main() {\n    int i;\n\n    for (i = 0; i < 4; i++) {\n        // Where practical just return values\n        double input1 = key_input();\n        double input2 = key_input();\n\n        double add, sub, mult, div;\n        calculate(input1, input2, &add, &sub, &mult, &div);\n        key_output(add, sub, mult, div);\n    }\n\n    return 0;\n}\n```\n\nOnce all the extraneous stuff, like the perplexing ```\n[N]```\n stuff, is removed it's actually pretty straight-forward.\nIf you need to calculate multiple values in parallel you're going to need to explain in more detail what your intent is here. The original code is not set up to support that.\nNotes here:\n\nUse simple variable names like ```\ninput```\n instead of ```\nInput```\n.\nDon't use arrays unless your data is necessarily in array form.\nAvoid extra syntax whenever possible. ```\n(*x) = y```\n can be reduced to ```\n*x = y```\n.\nDefine your functions before you use them to avoid having to declare and define separately.\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Java more precision in arithmetic\r\n                \r\nI am building a web app in Java that does math and shows steps to the user. When doing basic arithmetic with decimals I often get the messy in accurate outputs.\n\nHere is my problem:\n\n```\ndouble a = 0.15;\ndouble b = 0.01;\nSystem.out.println(a - b);\n// outputs 0.13999999999999999\n\nfloat a = 0.15;\nfloat b = 0.01;\nSystem.out.println(a - b);\n// outputs 0.14\n\nfloat a = 0.16f;\nfloat b = 0.01f;\nSystem.out.println(a - b);\n// outputs 0.14999999\n\ndouble a = 0.16;\ndouble b = 0.01;\nSystem.out.println(a - b);\n// outputs 0.15\n```\n\n\nNeither is reliable for ```\ncomplete```\n accuracy. Is there a numeric class that is more precise or should I just round the values off?\n    ", "Answer": "\r\nYou can use BigDecimal for this. It's ugly, but it works:\n\n```\nBigDecimal a = new BigDecimal(\"0.15\");\nBigDecimal b = new BigDecimal(\"0.01\");\nSystem.out.println(a.subtract(b));\n```\n\n\nBe sure to construct them either with a String parameter, or with the ```\nvalueOf```\n method, like this:\n\n```\nBigDecimal x = new BigDecimal(\"0.15\");   // This is ok\nBigDecimal x = BigDecimal.valueOf(0.15); // This is also ok\n```\n\n\nAnd not with a double parameter, like this:\n\n```\nBigDecimal x = new BigDecimal(0.15); // DON'T DO THIS\n```\n\n\nBecause if you pass in a double, you will also pass in double's inaccuracy into the new BigDecimal instance. If you pass in a String, BigDecimal will know™ and do the right thing™.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Bash script for basic mathematic operations\r\n                \r\nI am new to Linux, and I just want a Bash Script to do basic arithmetic operation  to a text file \n\n```\n1\n2\n3  \n4\n```\n\n\nand the results should be addition and multiplication in separate text files\n\nsay add + 5 for 1st text file and mult * 5 in 2nd text file  \n\n```\nadd:                             mult: \n6                                5\n7                                10\n8                                15\n9                                20\n```\n\n    ", "Answer": "\r\nThis reads each number from the input file, and outputs the correctly modified output to each output file.\n\n```\nwhile IFS='' read -r number; do\n    printf \"%d\\n\" $((number + 5)) >&3\n    printf \"%d\\n\" $((number * 5)) >&4\ndone < input.txt 3> first.txt 4> second.txt\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "What are some basic modulo arithmetic rules?\r\n                \r\nLet a = 10^18 and b = 10 ^ 18. c = 1 to 100000\n\nI want to find ( a + b ) % c or ( a * b ) % c\n\nI need to prevent integer overflow. How can I do so?\n    ", "Answer": "\r\n```\n (x * y) % k = ((x % k) * (y % k)) % k\n\n (x + y) % k = ((x % k) + (y % k)) % k\n\n (x - y) % k = ((((x % k + k) % k) - ((y % k + k) % k)) % k + k) % k\n```\n\n\nI need compute (9173501*9173502*9173504)%9173503 in C#;\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Exception: Invalid_argument \"String.sub / Bytes.sub\"\r\n                \r\nI wrote a tail recursive scanner for basic arithmetic expressions in OCaml\nSyntax\n```\nExp ::= n | Exp Op Exp | (Exp)\n\nOp ::= + | - | * | /\n```\n\n```\ntype token =\n| Tkn_NUM of int\n| Tkn_OP of string\n| Tkn_LPAR\n| Tkn_RPAR\n| Tkn_END\n\nexception ParseError of string * string\n\nlet tail_tokenize s =\n  let rec tokenize_rec s pos lt =\n    if pos < 0 then lt\n    else\n      let c = String.sub s pos 1 in\n      match c with\n      | \" \" -> tokenize_rec s (pos-1) lt\n      | \"(\" -> tokenize_rec s (pos-1) (Tkn_LPAR::lt)\n      | \")\" -> tokenize_rec s (pos-1) (Tkn_RPAR::lt)\n      | \"+\" | \"-\" | \"*\" | \"/\" -> tokenize_rec s (pos-1) ((Tkn_OP c)::lt)\n      | \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ->\n        (match lt with\n         | (Tkn_NUM n)::lt' -> \n           (let lta = Tkn_NUM(int_of_string (c^(string_of_int n)))::lt' in\n            tokenize_rec s (pos-1) lta)\n         | _ -> tokenize_rec s (pos-1) (Tkn_NUM (int_of_string c)::lt) \n         )\n      |_ -> raise (ParseError (\"Tokenizer\",\"unknown symbol: \"^c))\n  in\n  tokenize_rec s (String.length s) [Tkn_END]\n```\n\nDuring execution I get\n```\ntail_tokenize \"3+4\";;\nException: Invalid_argument \"String.sub / Bytes.sub\".\n```\n\n    ", "Answer": "\r\nYour example case is this:\n```\ntail_tokenize \"3+4\"\n```\n\nThe first call will look like this:\n```\ntokenize_rec \"3+4\" 3 Tkn_END\n```\n\nSince 3 is not less than 0, the first call inside ```\ntokenize_rec```\n will look like this:\n```\nString.sub \"3+4\" 3 1\n```\n\nIf you try this yourself you'll see that it's invalid:\n```\n# String.sub \"3+4\" 3 1;;\nException: Invalid_argument \"String.sub / Bytes.sub\".\n```\n\nIt seems a little strange to work through the string backwards, but to do this you need to start at ```\nString.length s - 1```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "JavaScript anonymous function simulating arithmetic in lambda calculus, result returns `undefined`\r\n                \r\nI was intended to use javascript closure to simulate basic arithmetic in lambda calculus, to define ```\n3 = 1 + 2```\n\nlike this:\n\n```\n0 := λf.λx.x\n1 := λf.λx.f x\n2 := λf.λx.f (f x)\n3 := λf.λx.f (f (f x))\n```\n\n\nIt should print three times ```\nhello world```\n, now it prints once ```\nhello world```\n and twice ```\nundefined```\n. Could someone help to explain why this happened and what's wrong about my code? Thanks in advance.\n\n```\nvar zero = function(f) {\n  return function(x) {\n    return x;\n  };\n};\n\nvar one = function(f) {\n  return function(x) {\n    return f(x);\n  };\n};\n\nfunction add(n, m) {\n  return function(f) {\n    return function(x) {\n      return n(f)(m(f)(x));\n    };\n  };\n}\n\n// test, define number two and number three in lambda calculus\nvar two = add(one, one);\nvar three = add(one, two);\n\n// function f is to console.log\nvar print3times = three(value => console.log(value));\nprint3times(\"hello world\")\n// return:\n// hello world\n// undefined\n// undefined\n```\n\n    ", "Answer": "\r\nHere you go.\n\n\r\n\r\n```\nvar log = function(x) {\r\n  console.log(x)\r\n  return x\r\n}\r\n\r\nvar zero = function(f) {\r\n  return function(x) {\r\n    return x;\r\n  };\r\n};\r\n\r\nvar one = function(f) {\r\n  return function(x) {\r\n    return f(x);\r\n  };\r\n};\r\n\r\nfunction add(n, m) {\r\n  return function(f) {\r\n    return function(x) {\r\n      return n(f)(m(f)(x));\r\n    };\r\n  };\r\n}\r\n\r\n// test, define number two and number three in lambda calculus\r\nvar two = add(one, one);\r\nvar three = add(one, two);\r\n\r\n// function f is to console.log\r\nvar print3times = three(log);\r\nprint3times(\"hello world\")```\n\r\n\r\n\r\n\n\nHere's an ES6 translation with a few bonus features for fun:\n\n\r\n\r\n```\nconst log = x => (console.log(x), x)\r\n\r\nconst identity = x => x\r\nconst compose = f => g => x => f(g(x))\r\n\r\nconst zero = f => identity\r\n\r\nconst one = f => x => f(x)\r\n\r\n// I took the liberty of currying add\r\nconst add = n => m => f => x => n(f)(m(f)(x))\r\n\r\n// test, define number two and number three in lambda calculus\r\nconst addOne = add(one)\r\nconst two = addOne(one)\r\nconst three = addOne(two)\r\nconst four = compose(addOne)(addOne)(two)\r\n\r\n// function f is to console.log\r\nconst print3times = three(log)\r\nprint3times(\"hello world\")\r\n\r\nfour(log)('hi X 4')```\n\r\n\r\n\r\n\n\nAlso, you may find these two youtube videos entitled \"A Flock of Functions: Combinators, Lambda Calculus, & Church Encodings in JS\" informative: Part 1, Part 2.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Implementing operator precedence in my calculator interpreter\r\n                \r\nAs part of learning Ruby am trying to implement a basic interpreter which reads input and do basic arithmetic calculations. So far basic arithmetic operations are working but having problem in operator precedence. Which is not handled yet. This is the code. Am at a beginner level. Any mistakes in this code are due to my lack of knowledge. How this code can be modified to handle operator precedence.\nSample output\n\n```\n2+2+2 = 6 #correct\n10+10/2 = 10 # incorrect as in irb answer must be 15\n```\n\n\nGithub Repo of this interpreter\n\n```\n=begin\nBasic calculator Interpreter\ncan add, substract, multiply , divide with any number of operands at a time\nDrawback : Lacks operator precedence\n=end\nclass Interpreter   \n    attr_accessor :input\n    def initialize\n        @input = gets.chomp             \n    end \n    def intepret        \n        first_operand  = []     \n        f              = []     \n        operator       = '+'        \n        array          = Array.new      \n        lc             = 0\n\n        @input.split.join.split(\"\").each_with_index.map do |i, index|\n\n            if i.is_number?\n                first_operand.push(i)   \n                if index == @input.length-1                     \n                    array.push(first_operand.join(\"\").to_i)                 \n                end\n            elsif i.is_plus?                \n                f = first_operand\n                first_operand = nil\n                first_operand = []              \n                array.push(f.join(\"\").to_i)\n                array.push(\"+\")\n            elsif i.is_minus?           \n                f = first_operand\n                first_operand = nil\n                first_operand = []              \n                operator = '-'              \n                array.push(f.join(\"\").to_i)\n                array.push(\"-\")\n            elsif i.is_multi?               \n                f = first_operand\n                first_operand = nil\n                first_operand = []              \n                operator = '*'              \n                array.push(f.join(\"\").to_i)\n                array.push(\"*\")\n            elsif i.is_divide?              \n                f = first_operand\n                first_operand = nil\n                first_operand = []              \n                operator = '/'              \n                array.push(f.join(\"\").to_i)\n                array.push(\"/\")\n            else\n                puts \"Illegal input exiting..\"\n                exit            \n            end             \n\n            lc = lc+1\n\n        end     \n        #apply the appropriate operation on the inputs based on the operand         \n        #puts \"=======TOKENS======\"     \n        #puts array.inspect \n        result = 0\n        array.each_with_index.map do |x, key|\n            result = x if key == 0          \n            if x == '+'\n                if key == 0 \n                    result = add(result, array[key+1])\n                else\n                    result = add(result, array [key+1])\n                end\n            elsif x == '-'\n                if key == 0 \n                    result = minus(result, array[key+1])\n                else\n                    result = minus(result, array [key+1])\n                end\n            elsif x == '*'\n                if key == 0 \n                    result = multi(result, array[key+1])\n                else\n                    result = multi(result, array [key+1])\n                end \n            elsif x == '/'\n                begin\n                    if key == 0 \n                        result = divide(result, array[key+1])\n                    else\n                        result = divide(result, array [key+1])\n                    end \n                rescue\n                    puts \"Zero Divsion error\"\n                    exit\n                end  \n            end \n        end\n        puts \"Result is: \"+result.to_s\n    end \n    def print_token(type, value)\n        puts type + ' '+ value\n    end\n    def add(f,s)\n        return f.to_i + s.to_i\n    end\n    def minus(f,s)\n        return f.to_i - s.to_i\n    end\n    def multi(f,s)\n        return f.to_i * s.to_i\n    end\n    def divide(f,s)\n        return f.to_i / s.to_i\n    end\nend\n# Override the string class, to directly use methods like obj.is_number? rather than is_number?(obj)\nclass String\n  def is_number?\n    true if Float(self) rescue false\n  end\n  def is_plus?\n    true if self == '+' rescue false\n  end\n  def is_minus?\n    true if self == '-' rescue false\n  end\n  def is_multi?\n    true if self == '*' rescue false\n  end\n  def is_divide?\n    true if self == '/' rescue false\n  end\nend\n#continue accepting inputs until exit CTRL + D\nwhile true\n    print 'pck>:'\n    i_obj = Interpreter.new\n    i_obj.intepret\nend\n```\n\n    ", "Answer": "\r\nFirst, process the input using the Shunting-yard algorithm. This should give a list of tokens in Reverse Polish notation (RPN). Then you can evaluate the RPN expression.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Perform basic arithmetic operations on AudioKit FM oscillator parameters: Interpolation & time Transition\r\n                \r\nDoes AudioKit provide a method to calculate interpolated values of discrete array members?\nDoes AudioKit provide a method to smooth transition operation between parameters of an oscillator like baseFrequency, AKOperation.periodicTrigger or hold?\n\nBelow the code I use for FM generation:\n\n```\nlet oscillator = AKOperation.fmOscillator(baseFrequency: Synth.frequency,\n                                                      carrierMultiplier: 2,\n                                                      modulatingMultiplier: 0.8,\n                                                      modulationIndex: 1,\n                                                      amplitude: Synth.amplitude.triggeredWithEnvelope(\n                                                        trigger: AKOperation.periodicTrigger(period: Synth.cyclic),\n                                                        attack: 0.01,\n                                                        hold: Synth.hold,\n                                                        release: 0.01))\n```\n\n\nFor input parameter interpolated values of Frequency Cycle and Duty shall be calculated by interpolation based on the table (array) below:\n\n```\nP1      Freq.   Cycle   Duty %\n\n-10     200     100     100\n\n-3.04   405     100     100 \n\n-0.51   300     500     100 \n\n-0.50   200     800     5 \n\n0.09        400     600     10 \n\n0.10        400     600     50 \n\n1.16        550     552     52 \n\n2.67        763     483     55 \n\n4.24        985     412     58 \n\n6.00        1234    322     62 \n\n8.00        1517    241     66 \n\n10.00   1800    150     70\n```\n\n\nThe transition of values (for Freq., Cycle ans Duty) shall be smoothen based on input parameter P1. Is this what AKComputedParameter e.g. smoothDelay is made for?\n\nHow do I tell AudioKit to apply AKComputedParameter?\n\nDo you have a sample code (code snippet) for achievement of interpolation/transition operation with application to oscillator based on the code above? Either based on AK or vDSP methods.\n\nI’m not quiet sure on how to apply https://audiokit.io/docs/Protocols/AKComputedParameter.html\n    ", "Answer": "\r\nI think this question was downvoted somewhat because it seems like you're asking for too much of an actual implementation with that table of values.  I'm going to ignore that and say that however you decide to change the parameters of the oscillator in your app logic, you can make the transitions smooth by portamento'ing the values.\n\nSo, in your case for frequency you would replace ```\nSynth.frequency```\n with a parameter you set that you would then portamento like ```\nAKOperation.parameters[0].portamento(halfTime: 0.5)```\n\n\nSee an example for using parameters here: https://audiokit.io/playgrounds/Synthesis/Plucked%20String%20Operation/\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "A curious output after an arithmetic operation in GNU Octave\r\n                \r\nI was trying out basic arithmetic operations in GNU Octave to try and see the kind of error it would bring.This is the error that I was expecting\n\n```\nerror: operator +: nonconformant arguments (op1 is 1x3, op2 is 3x1)\n```\n\n\nAnd so I tried adding the row vector ```\nb = [1,2,3]```\n to the column vector ```\nc = [1;2;3]```\n and to my SUPRISE! an output came forth.\n\nHow can this be?\n\n```\noctave:59> b\nb =\n\n   1   2   3\n\noctave:60> c\nc =\n\n   1\n   2\n   3\n\noctave:61> b + c\nans =\n\n   2   3   4\n   3   4   5\n   4   5   6\n```\n\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "High precision arithmetic and PARI/GP\r\n                \r\nCurrently I have some code in PARI/GP which implements computing values of a sequence based on a recurrence. All the numbers in this sequence are between 0 and 1 and high precision is important (at least 50 digits). Are there any languages which support parallel programming, high precision, and are able to do basic arithmetic operations such as +,-,*,/ quickly (like PARI)?\n    ", "Answer": "\r\n\n  Are there any languages which support parallel programming, high precision, and are able to do basic arithmetic operations such as +,-,*,/ quickly (like PARI)?\n\n\nSlightly the wrong question - what you want to ask is are there any libraries that could bind to your language of choice that allow you to do arbitrary precision arithmetic.\n\nThe answer is yes. Take a look at GMP or the fork with a focus on also supporting Windows MPIR. Both of these will handle these basic arithmetic operations about as optimally as you can.\n\nYou may also find that additional libraries suited to your needs become useful, like MPRF or MPC.\n\nThese libraries have bindings to C and some C++ and also Python.\n\nGMP specifically is part of the code powering PARI/GP, although PARI have added numerous extensions.\n\n```\n$ ldd gp\n    linux-vdso.so.1 =>  (0x00007fffe46d9000)\n    libreadline.so.6 => /lib64/libreadline.so.6 (0x0000003b01e00000)\n    libtinfo.so.5 => /lib64/libtinfo.so.5 (0x0000003b0d600000)\n    libpari-gmp.so.2 => /usr/lib64/libpari-gmp.so.2 (0x0000003afbe00000)\n    libdl.so.2 => /lib64/libdl.so.2 (0x0000003afb600000)\n    libm.so.6 => /lib64/libm.so.6 (0x0000003afba00000)\n    libgmp.so.3 => /usr/lib64/libgmp.so.3 (0x0000003afce00000)\n    libc.so.6 => /lib64/libc.so.6 (0x0000003afae00000)\n    /lib64/ld-linux-x86-64.so.2 (0x0000003afaa00000)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to perform basic Excel arithmetic in Powershell?\r\n                \r\n```\n$excel_test = New-Object -ComObject Excel.Application\n\n$excel_test.visible =$true\n$excel_test.DisplayAlerts =$true\n\n$excel_test.Workbooks.Add(\"C:\\Users\\Lab-User\\Documents\\Test1.xlsx\")\n\n$strFormula =  \"=((A1:O29/10000)-1)\"\n\n$excel_test.Worksheets.Item(2).Cells.Item(2,2).Formula() = $strFormula\n```\n\n\nBasically, I have a dummy Excel file. This file contains bunch of numbers. From each cell, I want to divide the number by 10000 and then subtract it by 1. I want the answer to be placed in Sheet2, column 2 and row 2 (B2 in Excel). I want the result of each cell to be placed in the second sheet offset by 1 row and 1 column.\n    ", "Answer": "\r\nSo you need a For loop so you can process each cell, and I would suggest setting a variable as the range A1:O29, and then another variable as the range B2:P30. Then ($RangeA.Cells.Item(1)/10000)-1 = $Range2.Cells.Item(1), so the For loop is easy. I'll use your code to start, then make a blank spreadsheet and generate some random data for testing (you can use your existing one), setup the ranges, and then loop through setting the values in Sheet2.\n\n```\n$excel_test = New-Object -ComObject Excel.Application\n\n$excel_test.visible =$true\n$excel_test.DisplayAlerts =$true\n\n$workbook = $excel_test.Workbooks.Add()\n\n$Range1 = $workbook.Worksheets.Item(1).range(\"A1:O29\")\n$Range2 = $workbook.Worksheets.Item(2).range(\"B2:P30\")\n\n#Generate random data in sheet 1\n$range1.cells | %{$_.value2 = get-random -Minimum 10000 -Maximum 100000}\n\n#Set associated item in Range2 to the calculated value from the source in Range1\nFor($i = 1;$i -le $Range1.Cells.count;$i++){\n    $Range2.Cells.Item($i).value2 = ($Range1.Cells.Item($i).Value2/10000)-1\n}\n```\n\n\nRounding could be done if needed by enclosing the ```\n($Range1.Cells.Item($i).Value2/10000)-1```\n in something like ```\n[Math]::Round(<formula>)```\n or use ```\n[Math]::Floor()```\n to always round down, or ```\n[Math]::Ceiling()```\n to always round up.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why is the Pharo definition of arithmetic + and - basically duplicated code?\r\n                \r\nI was looking through the internals of Pharo and noticed that the definition of arithmetic + and - look very much alike:\n\n```\n+ aNumber\n\"Refer to the comment in Number + \"\naNumber isInteger ifTrue:\n    [self negative == aNumber negative\n        ifTrue: [^ (self digitAdd: aNumber) normalize]\n        ifFalse: [^ self digitSubtract: aNumber]].\naNumber isFraction ifTrue:\n    [^Fraction numerator: self * aNumber denominator + aNumber numerator denominator: aNumber denominator].\n^ aNumber adaptToInteger: self andSend: #+\n```\n\n\nand\n\n```\n- aNumber\n\"Refer to the comment in Number - \"\naNumber isInteger ifTrue:\n    [self negative == aNumber negative\n        ifTrue: [^ self digitSubtract: aNumber]\n        ifFalse: [^ (self digitAdd: aNumber) normalize]].\naNumber isFraction ifTrue:\n    [^Fraction numerator: self * aNumber denominator - aNumber numerator denominator: aNumber denominator].\n^ aNumber adaptToInteger: self andSend: #-\n```\n\n\nAs I see it, this is completely against the OO way of designing things and is generally bad. Why doesn't anybody find a better solution?\n    ", "Answer": "\r\nThe simplest thing I can think of is:\n\n```\n- aNumber\n    ^self + aNumber negated\n```\n\n\nHowever, this will have a cost:\n\n\ncreation of another intermediate LargeInteger, or Fraction\ntwo more message sends to perform the - operation\n\n\nWhat we see here is a tribute to optimization. Not premature optimization, this is a low level operation used extensively.\n\nThere are other things in this code which are not perfect:\n\n\nusage of isInteger and isFraction might as well be replaced with some kind of double-dispatching\nthe methods digitAdd: and digitSubtract: work for integers stored as sign - magnitude rather than 2-complement which is a not completely obvious implementation detail and would deserve a comment - or maybe should better be renamed digitAddMagnitude: digitSubtractMagnitude:\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "MySQL integer unsigned arithmetic problems?\r\n                \r\nDoes MySQL (5.0.45) like to do strange internal typecasts with unsigned maths?  I am storing integers unsigned but when selecting basic arithmetic I get outrageous numbers:\n\n```\nmysql> create table tt ( a integer unsigned , b integer unsigned , c float );\nQuery OK, 0 rows affected (0.41 sec)\n\nmysql> insert into tt values (215731,216774,1.58085);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select a,b,c from tt;\n+--------+--------+---------+\n| a      | b      | c       |\n+--------+--------+---------+\n| 215731 | 216774 | 1.58085 |\n+--------+--------+---------+\n1 row in set (0.02 sec)\n\nmysql> select (a-b)/c from tt;\n+---------------------+\n| (a-b)/c             |\n+---------------------+\n| 1.1668876878652e+19 |\n+---------------------+\n1 row in set (0.00 sec)\n\nmysql> -- WHAT?\nmysql> select a-b from tt;\n+----------------------+\n| a-b                  |\n+----------------------+\n| 18446744073709550573 |\n+----------------------+\n1 row in set (0.02 sec)\n```\n\n\nI assume this has to do with the fact that the subtraction is negative and thus it is trying to map the results into an unsigned and overflowing?  I can solve this apparently by changing everything to signed, but I'd prefer to have a little more positive space with my 32-bit integers.\n\nI have not run into this before on MySQL and I'm pretty certain I've done lots with unsigned MySQL arithmetic; is this a common problem?\n    ", "Answer": "\r\nIf either the left-hand side or the right-hand side of the subtraction operator is unsigned, the result is unsigned as well.  You can change this by setting the ```\nNO_UNSIGNED_SUBTRACTION```\n SQL mode.  \n\nAlternatively, you can also explicitly cast your unsigned values to be signed bigint values and then do the subtraction.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Test Suite for Arithmetic Expression Parser\r\n                \r\nI am writing a simple parser (in JavaScript, and, later, in Swift) to evaluate basic arithmetic expressions such as ```\n1+2*3```\n and ```\n3*(4+5)```\n.\n\nI have a working version, but I would like to test whether it is reliable.\n\nIs there a test suite of arithmetic expressions to run through my parser?\n\nBy way of context, I am writing my own parser rather than looking for a library or using built-in functionality such as ```\neval```\n. This is for the following reasons:\n\n\nExperience\nIt allows me to parse expressions not normally acceptable in parsers such as ```\n3(4+5)```\n, ```\n2×3```\n, ```\n√16```\n and ```\n6²```\n, as well as the use of special variables\nExperience\n\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to modify arithmetic operators (+,-,x)\r\n                \r\nI am currently writing a Linear Algebra module for Python 3.x wherein I deal with self-defined matrix objects.\n\nIs there any way I can make the basic arithmetic operators like +, -, * adhere to my matrix objects? For example -\n\n```\n>>> A = matrix(\"1 2;3 4\")\n>>> B = matrix(\"1 0; 0 1\")\n>>> A + B\n[2 2]\n[3 5]\n>>> A * A\n[7 10]\n[15 22]\n```\n\n\nRight now I have written separate functions for addition, multiplication, etc. but typing ```\nA.multiply(A)```\n is much more cumbersome than simply ```\nA*A```\n.\n    ", "Answer": "\r\nYou are looking for special methods. Particularly at emulating numerical types section.\n\nAlso, as you're trying to implement matrices and matrices are containers, you may find useful to define custom container methods for your type.\n\nUPDATE: Here is an example of custom objects using special methods to implement arithmetical operators:\n\n```\nclass Value(object):\n    def __init__(self, x):\n        self.x = x\n\n    def __add__(self, other):\n        if not isinstance(other, Value):\n            raise TypeError\n        return Value(self.x + other.x)\n\n    def __mul__(self, other):\n        if not isinstance(other, Value):\n            raise TypeError\n        return Value(self.x * other.x)\n\nassert (Value(2) + Value(3)).x == 5\nassert (Value(2) * Value(3)).x == 6\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why does NaN - NaN == 0.0 with the Intel C++ Compiler?\r\n                \r\nIt is well-known that NaNs propagate in arithmetic, but I couldn't find any demonstrations, so I wrote a small test:\n\n```\n#include <limits>\n#include <cstdio>\n\nint main(int argc, char* argv[]) {\n    float qNaN = std::numeric_limits<float>::quiet_NaN();\n\n    float neg = -qNaN;\n\n    float sub1 = 6.0f - qNaN;\n    float sub2 = qNaN - 6.0f;\n    float sub3 = qNaN - qNaN;\n\n    float add1 = 6.0f + qNaN;\n    float add2 = qNaN + qNaN;\n\n    float div1 = 6.0f / qNaN;\n    float div2 = qNaN / 6.0f;\n    float div3 = qNaN / qNaN;\n\n    float mul1 = 6.0f * qNaN;\n    float mul2 = qNaN * qNaN;\n\n    printf(\n        \"neg: %f\\nsub: %f %f %f\\nadd: %f %f\\ndiv: %f %f %f\\nmul: %f %f\\n\",\n        neg, sub1,sub2,sub3, add1,add2, div1,div2,div3, mul1,mul2\n    );\n\n    return 0;\n}\n```\n\n\nThe example (running live here) produces basically what I would expect (the negative is a little weird, but it kind of makes sense):\n\n```\nneg: -nan\nsub: nan nan nan\nadd: nan nan\ndiv: nan nan nan\nmul: nan nan\n```\n\n\nMSVC 2015 produces something similar. However, Intel C++ 15 produces:\n\n```\nneg: -nan(ind)\nsub: nan nan 0.000000\nadd: nan nan\ndiv: nan nan nan\nmul: nan nan\n```\n\n\nSpecifically, ```\nqNaN - qNaN == 0.0```\n.\n\nThis... can't be right, right? What do the relevant standards (ISO C, ISO C++, IEEE 754) say about this, and why is there a difference in behavior between the compilers?\n    ", "Answer": "\r\nThe default floating point handling in Intel C++ compiler is ```\n/fp:fast```\n, which handles ```\nNaN```\n's unsafely (which also results in ```\nNaN == NaN```\n being ```\ntrue```\n for example). Try specifying ```\n/fp:strict```\n or ```\n/fp:precise```\n and see if that helps.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to manipulate Euler's number in MATLAB?\r\n                \r\nHow should I do basic arithmetic including Euler's number in MATLAB? For example, what is Mat-ab expression to calculate E2?\n    ", "Answer": "\r\nYou can use ```\nexp(1)```\n to get Euler's number in MATLAB. The ```\nexp(x)```\n function calculates ex.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "x86 arithmetic (add/sub/mul/div) more than one digit\r\n                \r\nSo I have this code (x86 assembly language) for solving basic arithmetic equations but my problem is that I can only input 1-digit numbers. Also, the answers can only be within 1-9. I want a code that would be able to accept two or more digits. Here is working sample code for addition.\n\n```\njmp start\nmsg1 db 0ah,0dh, \"Enter first number: $\"\nmsg2 db 0ah,0dh, \"Enter second number: $\"\nmsg3 db 0ah,0dh, \"Sum: $\"\nans db ?, \" $\"\nnum1 db ?\nnum2 db ?\n\nstart:\nmov ah, 0\nmov al, 3\nint 10h\nmov ah, 06\nmov al,0\nint 10h\n\nmov ah, 09h\nlea dx, msg1\nint 21h\n\nmov ah, 01h\nint 21h\nsub al, 30h\nmov num1, al\n\nmov ah, 09h\nlea dx, msg2\nint 21h\n\nmov ah, 01h\nint 21h\nsub al, 30h\nmov num2, al\n\nmov al, num1\nadd al,num2\nadd al, 30h\nmov ans, al\n\nmov ah, 09h\nlea dx, msg3\nint 21h\n\nmov ah, 09h\nlea dx, ans\nint 21h\n\nint 20h\n```\n\n    ", "Answer": "\r\nConvert strings to integers, do your arithmetic, then convert integers back to strings (either on-the-fly printing one digit at a time, or into a buffer which you then print.)\n\nNone of this is specific to x86 asm or the API you're using for string / character input/output (in this case, DOS ```\nint 21h```\n system calls).  It's exactly how you'd do it in C.  I'd actually recommend using the C standard library for conversions, unless you want to write strtol and sprintf yourself.\n\n\n\nOr you could keep your data in string form from start to finish, and do BCD add-carry and sub-borrow.  Each decimal digit is stored in a separate byte.  This is easier in ASM than in C, because C doesn't expose the carry flag.  It's not a good programming technique, and will lead to slow code.\n\nIf you want to do arbitrary-precision arithmetic, work in chunks of 32b or 64b binary integers, instead of single decimal digits.  Or just use gmp unless you want to re-invent the wheel as an exercise.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Automatically implement traits of enclosed type for Rust newtypes (tuple structs with one field)\r\n                \r\nIn Rust, tuple structs with only one field can be created like the following:\n\n```\nstruct Centimeters(i32);\n```\n\n\nI want to do basic arithmetic with ```\nCentimeters```\n without extracting their \"inner\" values every time with pattern matching, and without implementing the ```\nAdd```\n, ```\nSub```\n, ... traits and overloading operators.\n\nWhat I want to do is:\n\n```\nlet a = Centimeters(100);\nlet b = Centimeters(200);\nassert_eq!(a + a, b);\n```\n\n    ", "Answer": "\r\n\n  is there a way to do it without extracting their \"inner\" values every time with pattern matching, and without implementing the Add, Sub, ... traits and overloading operators?\n\n\nNo, the only way is to implement the traits manually. Rust doesn't have an equivalent to the Haskell's GHC extension ```\nGeneralizedNewtypeDeriving```\n which allows ```\nderiving```\n on wrapper types to automatically implement any type class/trait that the wrapped type implements (and with the current set-up of Rust's ```\n#[derive]```\n as a simple AST transformation, implementing it like Haskell is essentially impossible.)\n\nTo abbreviate the process, you could use a macro:\n\n```\nuse std::ops::{Add, Sub};\n\nmacro_rules! obvious_impl {\n    (impl $trait_: ident for $type_: ident { fn $method: ident }) => {\n        impl $trait_<$type_> for $type_ {\n            type Output = $type_;\n\n            fn $method(self, $type_(b): $type_) -> $type_ {\n                let $type_(a) = self;\n                $type_(a.$method(&b))\n            }\n        }\n    }\n}\n\n#[derive(Eq, PartialEq, Ord, PartialOrd, Clone, Debug)]\npub struct Centimeters(i32);\n\nobvious_impl! { impl Add for Centimeters { fn add } }\nobvious_impl! { impl Sub for Centimeters { fn sub } }\n\n#[derive(Eq, PartialEq, Ord, PartialOrd, Clone, Debug)]\npub struct Inches(i32);\n\nobvious_impl! { impl Add for Inches { fn add } }\nobvious_impl! { impl Sub for Inches { fn sub } }\n\nfn main() {\n    let a = Centimeters(100);\n    let b = Centimeters(200);\n    let c = Inches(10);\n    let d = Inches(20);\n    println!(\"{:?} {:?}\", a + b, c + d); // Centimeters(300) Inches(30)\n    // error:\n    // a + c;\n}\n```\n\n\nplaypen\n\nI emulated the normal ```\nimpl```\n syntax in the macro to make it obvious what is happening just by looking at the macro invocation (i.e. reducing the need to look at the macro definition), and also to maintain Rust's natural searchability: if you're looking for traits on ```\nCentimeters```\n just grep for ```\nfor Centimeters```\n and you'll find these macro invocations along with the normal ```\nimpl```\ns.\n\nIf you are accessing the contents of the ```\nCentimeters```\n type a lot, you could consider using a proper struct with a field to define the wrapper:\n\n```\nstruct Centimeters { amt: i32 }\n```\n\n\nThis allows you to write ```\nself.amt```\n instead of having to do the pattern matching. You can also define a function like ```\nfn cm(x: i32) -> Centimeters { Centimeters { amt: x } }```\n, called like ```\ncm(100)```\n, to avoid the verbosity of constructing a full struct.\n\nYou can also access the inner values of a tuple struct using the ```\n.0```\n, ```\n.1```\n syntax.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "ifelse arithmetic in R\r\n                \r\nHow does basic arithmetic work inside an ifelse statement in R? I'm trying to create a new column simply by adding a number to another column of values, if the condition is met.\n```\nlibrary(zoo)\nlibrary(dplyr)\n\nstart_date <- as.Date(\"2021-11-1\")\nend_date <- as.Date(\"2022-10-31\")\n\nym <- seq(as.yearmon(start_date), as.yearmon(end_date), 1/12)\n\ndf <- data.frame(start = pmax(start_date, as.Date(ym)),\n           end = pmin(end_date, as.Date(ym, frac = 1)),\n           month = month.name[cycle(ym)],\n           year = as.integer(ym),\n           stringsAsFactors = FALSE)\n\ndf$month_num <- match(df$month, month.name)\n```\n\nMy goal: If month is between May to December (5->12) add \"+1\" to variable year (making new column \"water_year\"). If month is between Jan. to April, leave year \"number\" as is in the new column.\n```\ndf$water_year <- df %>% ifelse(month_num >=5, (year+1), year)\n```\n\nResult:\n```\n> print(df)\n        start        end     month year month_num  water_year\n1  2021-11-01 2021-11-30  November 2021        11  2022\n2  2021-12-01 2021-12-31  December 2021        12  2022\n3  2022-01-01 2022-01-31   January 2022         1  2022\n4  2022-02-01 2022-02-28  February 2022         2  2022\n5  2022-03-01 2022-03-31     March 2022         3  2022\n6  2022-04-01 2022-04-30     April 2022         4  2022\n7  2022-05-01 2022-05-31       May 2022         5  2023\n8  2022-06-01 2022-06-30      June 2022         6  2023\n9  2022-07-01 2022-07-31      July 2022         7  2023\n10 2022-08-01 2022-08-31    August 2022         8  2023\n11 2022-09-01 2022-09-30 September 2022         9  2023\n12 2022-10-01 2022-10-31   October 2022        10  2023\n```\n\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How does an AVR perform floating point Arithmetic\r\n                \r\nI'm trying to implement a support for ```\ndouble```\n and ```\nfloat```\n and corresponding basic arithmetic on a CPU without an FPU.\n\nI know that it is possible on all ```\nAVR ATmega controllers```\n. An ATmega also has no FPU. So here comes the question: How does it work? If there any suggestions for literature or links with explanations and examples?\n\nAt the best case I will provide a support for code like this:\n\n```\ndouble twice ( double x )\n{\n  return x*x;\n}\n```\n\n\nMany thanks in advance,\nAlex\n    ", "Answer": "\r\nHere are AVR related links with explanations and examples for implementing soft double:\n\n\nYou will find one double floating point lib here.\nAnother one can be found it in the last message here.\nDouble is very slow, so if speed is in concern, you might opt for fixed point math. Just read my messages in this thread:\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Doubt about strictfp and StrictMath\r\n                \r\nI have a little technical question, is it the same to call:\n\n```\n   public static strictfp double myMethod(double phi){\n       return Math.exp(phi);\n   }\n```\n\n\nor: \n\n```\n   public static double myMethod(double phi){\n       return StrictMath.exp(phi);\n   }\n```\n\n\nOr does the ```\nstrictfp```\n keyword just applies to the basic arithmetic operations ```\n+ - * /```\n used inside the method?\n    ", "Answer": "\r\n\n  Or does the strictfp keyword just applies to the basic arithmetic operations + - * / used inside the method?\n\n\nThe ```\nstrictfp```\n keyword only applies to operations in the method or class it modifies.  It doesn't reroute calls to ```\nMath```\n functions to ```\nStrictMath```\n, so you need to explicitly use ```\nStrictMath```\n instead of ```\nMath```\n.\n\nFrom http://www.esus.com/javaindex/j2se/jdk1.2/javamath/strictfp.html\n\n\n  If a floating point expression is within a ```\nstrictfp```\n \"scope\", the results will be as predictable as described in IEEE 754 ...\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Simple arithmetic via registers in c using custom ISR\r\n                \r\nI am writing a program in which i have to make my own ISR and do basic arithmetic like when i set AH to 1 it should add BX and CX registers. When AH is set 2 it should do subtraction on BX and CX registers.\n\nMy problem is that the result produced is not accurate.\nMy code is below:\n\n```\n#include<stdio.h>\n#include<conio.h>\n#include<fcntl.h>\n#include<io.h>\n#include<bios.h>\n#include<dos.h>\n\nvoid interrupt (*oldint65) ();\nvoid interrupt newint65();\n\nint result;\nvoid main()\n{\n     clrscr();\n\n\n    oldint65 = getvect(0x65);\n    setvect(0x65, newint65);\n\n    _AH = 1; _BX = 4; _CX = 4;\n    geninterrupt (0x65);\n\n    printf(\"\\nResult of addition is: %d\\n\", result);\n\n    setvect(0x65, oldint65);\n\n     getch();\n}\nvoid interrupt newint65()\n{\n    switch (_AH){\n    case 1:\n        {\n            result = _BX + _CX;\n            break;\n        }\n\n    }\n\n}\n```\n\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Allow eval() to evaluate only arithmetic expressions and certain functions\r\n                \r\nI have a calculator that uses the ```\neval()```\n function to evaluate expressions, but I am aware of the fact that using ```\neval()```\n is dangerous as it can be used to run arbitrary code on the machine.\nSo, I want it to only be able to evaluate arithmetic expressions and certain defined functions (imported from another file).\nconsolecalc.py:\n```\nfrom mymathmodule import *\nimport time\nwhile True:\n    try:   \n       Choose = '''Choose your function:\n       1: Percentage calculator\n       2: Factorial calculator\n       3: Basic arithmetics (+-*/)\n       '''\n       for character in Choose:\n        print(character, end=\"\", flush=True)\n        time.sleep(0.006)\n       a = int(input(':'))\n       if a == 1:\n           percentagecalc()\n       elif a == 2:\n           factorialcalc()\n       elif a == 3:\n           calc = input(\"Enter Expression:\")\n           print(\"Expression equals:\",eval(calc))\n       else:\n           print(\"\\nOops! Error.  Try again...\") \n       time.sleep(0.6)\n    except:\n       print(\"\\nOops! Error.  Try again...\")    \n       time.sleep(0.6)\n```\n\nThe defined functions are present in mymathmodule.py and I only want ```\neval()```\n to be able to evaluate those along with basic arithmetic expressions\nI would also like to know if there are any alternatives to ```\neval()```\n that could do this for me...\n    ", "Answer": "\r\nYou can pass the global and local namespace to ```\neval()```\n as a dict. If the globals contain ```\n__builtins__```\n none of the normal builtin functions can be called from the passed string. You can also use this to provide your own functions, e.g.\n```\nglobs = {\n    \"__builtins__\": {},\n    \"sqrt\": my_sqrt_fun\n}\n```\n\nIf you pass that to eval then ```\nsqrt```\n in the input will call ```\nmy_sqrt_fun```\n\n```\neval(\"3 + sqrt(3)\", globs, {})\n```\n\nWhen an assignment occurs within the expression using the walrus operator, it will be set in the local dictionary, hence the empty dictionary. You could use this allow variables to be set, but to prevent users from overwriting anything, use that dictionary only for that purpose.\nPassing e.g. ```\nexec```\n will raise a ```\nNameError```\n, so no arbitrary code can be executed this way.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Which Swift datatype do I use for currency\r\n                \r\nI have an iOS application that will be performing a lot of basic arithmetic on numbers representing USD currency (eg 25.00 representing $25.00).\n\nI have gotten into a lot of trouble using the datatype Double in other languages like Java and Javascript so I would like to know the best datatype to use for currency in Swift. \n    ", "Answer": "\r\nUse ```\nDecimal```\n, and make sure you initialize it properly!\n\nCORRECT\n\n```\n\n// Initialising a Decimal from a Double:\nlet monetaryAmountAsDouble = 32.111\nlet decimal: Decimal = NSNumber(floatLiteral: 32.111).decimalValue\nprint(decimal) // 32.111  😀\nlet result = decimal / 2\nprint(result) // 16.0555 😀\n\n\n// Initialising a Decimal from a String:\nlet monetaryAmountAsString = \"32,111.01\"\n\nlet formatter = NumberFormatter()\nformatter.locale = Locale(identifier: \"en_US\")\nformatter.numberStyle = .decimal\n\nif let number = formatter.number(from: monetaryAmountAsString) {\n    let decimal = number.decimalValue\n    print(decimal) // 32111.01 😀\n    let result = decimal / 2.1\n    print(result) // 15290.9571428571428571428571428571428571 😀\n}\n```\n\n\nINCORRECT\n\n```\nlet monetaryAmountAsDouble = 32.111\nlet decimal = Decimal(monetaryAmountAsDouble) \nprint(decimal) // 32.11099999999999488  😟\n\nlet monetaryAmountAsString = \"32,111.01\"\nif let decimal = Decimal(string: monetaryAmountAsString, locale: Locale(identifier: \"en_US\")) {\n    print(decimal) // 32  😟\n}\n```\n\n\nPerforming arithmetic operations on ```\nDouble```\ns or ```\nFloat```\ns representing currency amounts will produce inaccurate results. This is because the ```\nDouble```\n and ```\nFloat```\n types cannot accurately represent most decimal numbers. More information here. \n\nBottom line: \nPerform arithmetic operations on currency amounts using ```\nDecimal```\ns or ```\nInt```\n \n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "NaN error on ParseInt()\r\n                \r\nI am trying to create a dice game that has two dice rolled and the sum found. The running total is also meant to be shown beside the dice. The problem, however, is that NaN is showing. Here is the code:\n\nHTML (part related to the running total)\n\n```\n<div id=\"die1\" class=\"dice\">0</div>\n<div id=\"die2\" class=\"dice\">0</div>\n<div id=\"runningTotal\" class=\"total\">0</div>\n```\n\n\nJavascript (part related to the running total)\n\n```\nconst runningTotal = document.getElementById( 'runningTotal' );\nconst parsedTotal = parseInt(runningTotal);\nrunningTotal.innerHTML = parsedTotal + diceTotal;\n```\n\n\nAny ideas how to fix it?\n    ", "Answer": "\r\nYou need to get the content of the ```\nrunningTotal```\n element, and then convert that to an integer. ```\ngetElementById```\n returns an element object, rather than its contents. This means that your code is trying to convert the element itself (the entire ```\ndiv```\n) to an integer, rather than convert the contents of the element (0) to an integer.\n\nYou can use ```\ninnerText```\n to retrieve the contents of the element:\n\n```\nconst runningTotal = document.getElementById( 'runningTotal' );\nconst parsedTotal = parseInt(runningTotal.innerText);\nrunningTotal.innerHTML = parsedTotal + diceTotal;\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to enable arithmetic between Lua basic types?\r\n                \r\nPopular scripting languages allow for expressions like this\n\n```\ntrue*5>10.3*false\n```\n\n\nwhere true is 1 and false is 0, any number besides 0 is also true \n\nCan you do the same in lua ?\n\nCurrently im wrapping all operands into a table and use the metamethods like __sub to enable said functionality but it generates verbose code and overhead\n    ", "Answer": "\r\nYes. See the code below. You can add similar metamethods for the other arithmetic operations.\n\n```\nlocal function b2n(x)\n    if x==false then return 0 end\n    if x==true  then return 1 end\n    return x\nend\n\ndebug.setmetatable(false,{\n    __mul=function(x,y) return b2n(x)*b2n(y) end\n})\n\nprint(true*5 > 10.3*false)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Extending Grammar for LR Parser\r\n                \r\nI have the following grammar for basic arithmetic expressions\n\n```\nE -> E + T\nE -> T\nT -> T * F\nT -> F\nF -> (E)\nF -> id\n```\n\n\nWhere E is expression, T is term, F is factor. I'm wondering how I can extend this grammar to support further arithmetic operations such exponents possibly represented with ^ or logarithm.\n\nThanks\n    ", "Answer": "\r\nSince exponentation has higher precedence you could use the following grammar:\n\n```\nE -> E + T\nE -> T\nT -> T * F\nT -> F\nF -> G ^ F\nF -> G\nG -> log(E)\nG -> (E)\nG -> id\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why does Visual Basic allow Strings to be added to Integers in arithmetic statements?\r\n                \r\nRecently, I've been covering data types in my programming course (teaching VB) and I've run into an interesting situation. While attempting to demonstrate a random number generator, I ran into the fact that my code was allowing for Strings to be used legibly in arithmetic statements. While I'm fine with it doing it, I'm wracking my brain as to the justification or the what is actually causing this to happen.\n\nBelow are some examples of some code I built to test this:\n\n```\nPublic Class Form1\nPrivate Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click\n    'Produces '56'\n    MsgBox(\"5\" + \"6\")\nEnd Sub\n\nPrivate Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button2.Click\n    'Produces 11\n    MsgBox(5 + 6)\nEnd Sub\n\nPrivate Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button3.Click\n    'Produces 11\n    MsgBox(\"5\" + 6)\nEnd Sub\n\nPrivate Sub RandomNumber(ByVal low As Integer, ByVal high As Integer)\n    Randomize()\n    MsgBox((high - low) * Rnd() + low)\nEnd Sub\n\nPrivate Sub Button4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button4.Click\n    'Produces Random Number between 5 - 6\n    RandomNumber(5, \"6\")\nEnd Sub\n\nPrivate Sub Button6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button6.Click\n    'Produces Random Number between 5 - 6\n    RandomNumber(\"5\", \"6\")\nEnd Sub\n\nPrivate Sub Button5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button5.Click\n    'Produces Random Number between 5 - 6\n    RandomNumber(5, 6)\nEnd Sub\nEnd Class\n```\n\n\nIn case it is an IDE thing, I'm using Visual Studio 2010 Ultimate on Windows 7.\n    ", "Answer": "\r\nI'm guessing you have Option Strict set to Off.\n\nCheck out the documentation from MSDN (http://msdn.microsoft.com/en-us/library/9c5t70w2.aspx) for the + operator:\n\n\"One expression is a numeric data type and the other is a string\n\nIf Option Strict is On, then generate a compiler error.\nIf Option Strict is Off, then implicitly convert the String to Double and add.\nIf the String cannot be converted to Double, then throw an InvalidCastException exception.\"\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to calculate pagination in magritte YAML configs?\r\n                \r\nI'm looking to pull data from a REST API that uses a record offset system.  I need to perform basic arithmetic on the returned (```\ncurrent_offset + item_count```\n) data to calculate the next offset.\nUnfortunately, this API uses a variable page size, so simple offsets won't work.  Nor does it return the next offset to use in the response, just the component values.\nHowever, it appears that there's no way to do even basic arithmetic that I can see.  Am I just missing it?\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Doing exact real number arithmetic with PHP\r\n                \r\nWhat is fastest and most easy way of making basic arithmetic operations on strings representing real numbers in PHP? I have a string representing MySQL's DECIMAL value on which I want to operate and return the result to a database after that. I would like to avoid errors introduced by floating-point real number representation.\n\nIs there some standard library like Python's decimal? Are there any FOSS libraries you can recommend?\n\nRegards\n    ", "Answer": "\r\nYou could use the BC math functions:\n\nhttp://www.php.net/manual/en/ref.bc.php\n\nOr the GMP functions, although they seem to be integer only.\n\nhttp://www.php.net/manual/en/ref.gmp.php\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Numpy np.multiply vs *-Operator [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has an answer here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Differences between Numpy divide and Python divide?\r\n                            \r\n                                (1 answer)\r\n                            \r\n                    \r\n                Closed 5 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nIs there any difference in using\n\n```\nimport numpy as np\n\na, b = np.random([1024, 1024]), np.random([1024, 1024])\nc = np.multiply(a, b)\n```\n\n\nover\n\n```\nc = a * b\n```\n\n\nor is the ```\n*```\n-Operator on numpy-arrays simply overridden with ```\nnp.multiply```\n?\n\n\n\nEdit: This question is marked as duplicate because a question asks the same thing about the division operator (```\nnp.divide()```\n vs ```\n/```\n) and similar answers followed, but unless it is changed to \"numpy arithmetic vs. python arithmetic\" or something of the kind, it won't help people wondering the same thing as I did (about multiplication) and not being \"clever\" enough to assume a question about a related arithmetic operation (division) generalizes to all the basic arithmetic operations. To make it easier finding answers, I'd advocate for keeping this question as is.\n    ", "Answer": "\r\nThere is no difference. However, the ```\nnp.multiply```\n function can take in additional, optional arguments, making it more versatile. See the docs.\n\nSaying that ```\n*```\n is overwritten with ```\nnp.multiply```\n would not be very precise. Generally, ```\n*```\n maps to calls to the ```\n__mul__```\n and ```\n__rmul__```\n methods on the objects on which it acts. Thus, ```\n*```\n is rather \"overwritten\" with ```\nnp.ndarray.__mul__```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Jekyll arithmetic in conditional statement\r\n                \r\nI am trying to do some basic arithmetic in Jekyll's liquid templating engine. I have assigned one variable ```\nnumColumns```\n and I am trying to use it in a conditional statement. \n\n```\n{% assign numColumns = 3 %}\n```\n\n\nNote I omitted the outer for loop in the below expression where ```\nloopindex```\n comes from. Regardless, this works with the ```\n-```\n operator and correctly evaluates to 2.\n\n```\n{% if loopindex == 3 - 1 %}\n```\n\n\nHowever, these alternatives I tried do not work:\n\n```\n{% if loopindex == numColumns - 1 %}\n{% if loopindex == numColumns | minus: 1 %}\n{% if loopindex == {{ numColumns }} - 1 %}\n{% if loopindex == {{ numColumns | minus: 1 }} %}\n```\n\n\nHow can I subtract one from ```\nnumColumns```\n in a conditional statement with the liquid templating engine?\n    ", "Answer": "\r\nYou cannot use filter in liquid ```\nif```\n expression.\n\nYou have to ```\nassign```\n your calculation to a variable, then use it in your ```\nif```\n tag.\n\n```\n{% assign calc = numColumns | minus: 1 %}\n{% if loopindex == calc %}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "RPN PostFix Calculator output not as expected for simple arithmetic\r\n                \r\nI have written a class to do post fix calculations on the basic arithmetic operators - the code is below.\n\n```\npublic class PostFixCalculatorRPN\n{\n    public static void main()\n    {\n        String input = JOptionPane.showInputDialog(\"PostFix expression: \");\n        Stack s = new Stack();\n\n        for (int i = 0; i < input.length(); i++)\n        {\n            char ch = input.charAt(i);\n            if (ch == '+' || ch == '-' || ch == '*' || ch == '/')\n            {\n                // pop 2 numbers off and operate\n                switch (ch)\n                {\n                case '+':// push the sum of the 2 numbers back on stack\n                case '-': // push the difference of the 2 numbers back on stack\n                case '*': // push the product of the 2 numbers back on stack    \n                case '/':// push the quotient of the 2 numbers back on stack\n                }\n            } else\n                s.push(ch + \"\");\n        }\n        int answer = Integer.parseInt((String) s.pop());\n\n        System.out.println(printInput(input) + \": Evaluates to -> \" + answer);\n        System.exit(0);\n    }\n\n    public static String printInput(String s)\n    {\n        String str = \"\";\n\n        for (int i = 0; i < s.length(); i++)\n            str += s.charAt(i);\n\n        return str;\n    }\n}\n```\n\n\nI believe that the ```\nStack```\n class I have with this works correctly, but I can post that as well if necessary.\n\nThe output of my calculator is not as expected, for example an input of ```\n53+```\n evaluates to ```\n3```\n and ```\n92*```\n evaluates to ```\n2```\n, whereas I was expecting ```\n8```\n and ```\n18```\n respectively.\n    ", "Answer": "\r\nEverything you have is really close but without code in your case statements it will simply return the last non-operator in your input string (last item pushed onto stack). Do you understand completely the code you have and what a stack is? You are stepping left to right through the input and pushing numbers onto the stack until you hit an operator (+-*/) and then applying the operator to those numbers you conveniently pushed on the stack. These numbers pop off in reverse order that you pushed them on. You should just need to pop two numbers off the stack and then perform the desired operation and push the result. Something like (reusing pieces already in your code):\n\n```\ns.push(Integer.parseInt((String)s.pop()) + Integer.parseInt((String)s.pop()) + \"\");\n```\n\n\nOne of the operators will be slightly trickier due to ordering of the pops. Just think about it.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "using arithmetic functions in custom GraphDB ruleset\r\n                \r\nI want to add a custom rule to the OWL-2-RL ruleset (builtin_owl2-rl.pie) that establishes a ```\nisOppositeDirectionOf```\n object property between vectors that are in opposite direction to each other. I would think it should look something like this:\n\n```\nId: oppositeDirectionVector_rule\n     v1 <rdf:type> <cad:Vector>\n     v1 <cad:x> v1x            // example data property for v1x: \"1.0\"^^xsd:double\n     v1 <cad:y> v1y\n     v1 <cad:z> v1z\n     v2 <rdf:type> <cad:Vector>\n     v2 <cad:x> -v1x\n     v2 <cad:y> -v1y\n     v2 <cad:z> -v1z\n    -------------------------------\n    v1 <cad:isOppositeDirectionOf> v2\n```\n\n\nWithout the minuses, this rule does work to create ```\nisSameVectorAs```\n object properties. \nIs there a way I can use basic arithmetic functions on data properties in rules?\n    ", "Answer": "\r\nYou cannot use basic arithmetic functions in the rules. Due performance reasons the GraphDB rule engine works with the internal database identifiers, but not the actual RDF values i.e. internal id ```\n10001```\n instead of ```\n\"1\"^^xsd:double```\n. Thus, the only supported variable comparison operations are if the two internal identifiers are equal or not equal.\n\nEdit following the comment below: GraphDB's Plugin API is the only mechanism to integrate your code with the database. A plugin can materialize for every statement with ```\n?s <cad:x> ?o```\n predicate a new statement ```\n?s <cad:oppositeX> -?o```\n. Unfortunately, it should handle also the deletes.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Simple arithmetic in Haskell\r\n                \r\nI'm new to Haskell and in order to get familiar with it I'm doing some basic code katas. Currently, I'm doing the Kata Potter and I have the following snippet of code that I don't know what's wrong in it.\n\n```\nimport Test.Hspec\n\npriceOf :: [Int] -> Int\npriceOf xs = 8 * (length xs) \n\nmain :: IO ()\nmain = hspec $ do\n  describe \"Harry Potter book prices\" $ do\n    context \"Simple discounts\" $ do\n      it \"should apply a discount to two different books\" $ do\n        priceOf [0, 1] `shouldBe` 0.95 * 8 * 2\n```\n\n\nAnd when trying to run it with cabal, it ends up throwing the following error\n\n```\nNo instance for (Fractional Int) arising from the literal '0.95'\nIn the first argument of '(*)', namely '0.95'\nIn the first argument of '(*)', namely '0.95 * 8'\nIn the second argument of 'shouldBe', namely '0.95 * 8 * 2'\n```\n\n\nReading further on similar topics here and the chapter about ```\nConverting numbers```\n on the Haskell wiki, I've found the ```\nfromIntegral```\n function but still don't get it and I don't know how should be the correct way to apply basic arithmetic between different types in Haskell.\n\nCan someone help?\n\nThanks!\n    ", "Answer": "\r\nThe problem here is that (deducing from the error message) ```\npriceOf```\n returns an ```\nInt```\n while ```\n0.95 * 8 * 2```\n has the polymorphic type ```\nFractional a => a```\n, and ```\nshouldBe```\n is forcing these types to be the same. But ```\nInt```\n isn't a ```\nFractional```\n type, so you get \"No instance for ```\nFractional Int```\n\".\n\nWays to solve this:\n\n\nMake ```\npriceOf```\n return a ```\nFractional```\n type, e.g. ```\nDouble```\n, or\nConvert ```\n0.95 * 8 * 2```\n to ```\nInt```\n using one of ```\nround```\n, ```\nfloor```\n or ```\nceiling```\n depending on your requirements.\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why is an explicit type NOT required for basic Prelude arithmetic?\r\n                \r\nI was answering a question and wrote some code to get the job done. \n\n```\nisPrime :: Int -> Bool\nisPrime n = primeCheck n $ floor $ sqrt $ (fromIntegral n :: Double)\n```\n\n\nI assumed that the explicit type signature would be required, as explained in my answer. Then I checked it in both GHC and GHCi and discovered that I did not need the explicit type for the conversion despite ```\nfloor```\n and ```\nsqrt```\n being polymorphic. I know GHCi does does some type defaulting, but I'm not aware of any in GHC. Obviously both ```\nFloat```\n and ```\nDouble```\n would be valid choices here, why does GHC choose one over the other? What type is defaulted to, and why does (presumably) GHC default in this case? \n    ", "Answer": "\r\nGHC does type type-defaulting as well, at least whenever you export a module it will monomorphize any ambiguous numeric types to the types in ```\ndefault```\n types for the module, which is by defaulted to:\n\n```\ndefault (Integer, Double)\n```\n\n\nSee the section \"4.3.4 Ambiguous Types, and Defaults for Overloaded Numeric Operations\" in the Haskell specification. \n\nYou can disable this with the pragma ```\n{-# LANGUAGE NoMonomorphismRestriction #-}```\n in the  module you want to export with toplevel numeric polymorphic types left intact.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Hibernate and Arithmetic Involving Specific Rows\r\n                \r\nI'm using Hibernate and need to perform a basic arithmetic function on the results. Here's my situation:\n\nI'm storing ```\nodometer```\n and ```\nfuel```\n and would like to calculate ```\nfuelEconomy```\n. But to do that I need to know the previous ```\nodometer```\n reading, which would come from the previous result. Here's an illustration.\n\nTable:\n\n```\nODOMETER | FUEL\n65000.0  | 5.000\n65500.0  | 15.000\n```\n\n\nPOJO:\n\n```\npublic class FuelLog {\n  private double odometer;\n  private double fuel;\n  private double fuelEconomy;\n\n  /* Getters and Setters */\n}\n```\n\n\nCan I accomplish this with Criteria or would I have to resort to an HQL Query? Or would this be better left to a different layer all together?\n    ", "Answer": "\r\nI would do it differently. I would store in the database the start odometer value and I would store how many KMs (or miles) the trip took:\n\n```\nSTART |  TRIP | FUEL\n60000 |  5000 | 5.0\n65000 | 15000 | 15.0\n```\n\n\nThen, you'd have this as your Java class:\n\n```\npublic class FuelLog {\n  private double start;\n  private double trip;\n  private double fuel;\n}\n```\n\n\nThis is the same technique usually done for recording monetary transactions for bank accounts, for instance. The only gotcha is that you must ensure that \"start\" is always equals to the previous start + previous trip, to avoid gaps and/or inconsistencies.\n\nThe idea is that an instance of this class should not depend on other instances to be a valid instance. \n\nAnother possible solution, which I don't think is valid in this case, would be to store the \"sequence number\" in the log, as an index. For instance:\n\n```\nSTART |  TRIP | FUEL | INDEX\n60000 |  5000 | 5.0  | 1\n65000 | 15000 | 15.0 | 2\n```\n\n\nThen, you'd have a Java class which contains a collection of ```\nFuelLog```\n, mapped as an indexed list in Hibernate:\n\n```\npublic class Car {\n  private List<FuelLog> fuelLog;\n  public double getFuelEconomy(FuelLog log){/* your implementation goes here */}\n}\n```\n\n\n```\nCar```\n would, then, be the one responsible for calculating the fuel economy for a particular log entry, as it have access to the previous log entries. But then, you wouldn't have the ```\nfuelEconomy```\n in your ```\nFuelLog```\n. \n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Julia: implement standard math operations for types\r\n                \r\nIs there a way to implement basic arithmetic for user created types in julia\n\nFor example:\n\n```\ntype Foo\n    bar::Float32\n    foo::Int32\nend\na = Foo(3.23,23)\nb = Foo(4.56,54)\nc = a+b\n```\n\n\nHow, if at all possible can I do this?\nThanks in advance\n    ", "Answer": "\r\nYou need to explicitly import the Base functions for adding methods for your own types on them. I'm not sure if this the best way to do it, but the following would enable you to add two Foos together.\n\n```\ntype Foo\nbar::Float32\nfoo::Int32\nend\n\nimport Base: +\n+(a::T, b::T) where {T<:Foo} = Foo(a.bar+b.bar, a.foo+b.foo)\n\na = Foo(3.23,23)\nb = Foo(4.56,54)\nc = a+b\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Haskell : List of anonymous functions using lambda expressions\r\n                \r\ni am quite new to Haskell and i want to define a list of anonymous functions using lambda expressions,\nwhich represent the four basic arithmetic operations.\n```\nthis is what i have done bao = (\\ x y -> x+y)\n but i want to apply 3 more expressions(\\x y ->x-y)\n                                       (\\x y ->x*y)\n                                       (\\x y ->x/y) \nas well by putting bao before them just like what i have done to operation (+) ,and it shows error : multi declaration of 'bao' ,what  can i do ?\n\nThank you in advance!\n                          \n```\n\n    ", "Answer": "\r\nYou have to define a list.\n```\nbao = [\\x y -> x + y, \\x y -> x - y , \\x y -> x * y, \\x y -> x / y]\n```\n\nwhich would be more simply defined as\n```\nbao = [(+), (-), (*), (/)]\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic JavaScript function returns concatenation and not arithmetic sum [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Adding two numbers concatenates them instead of calculating the sum\r\n                            \r\n                                (24 answers)\r\n                            \r\n                    \r\n                Closed 6 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI am new so thank you for your patience.\nI did search a lot for the answer but couldn't find, maybe because it's too obvious.\n\nIn this case the inputs x and y are taken from ```\n<input type=\"number\"..```\n\n\nThis function executes upon button click.\n\nCan you tell me why it returns a concatenation, e.g. 33 instead of 6, 45 instead of 9.\n\n```\n  function sum(x,y) {\n       x = document.getElementById(\"x\").value;\n       y = document.getElementById(\"y\").value;\n       var answer = x+y;\n\n       document.getElementById(\"sum\").innerHTML = answer;\n\n  }\n```\n\n\nMany thanks in advance.\n    ", "Answer": "\r\nYou need to convert it into number.\n\n```\nfunction sum(x,y) {\n   x = document.getElementById(\"x\").value;\n   y = document.getElementById(\"y\").value;\n   var answer = Number(x)+Number(y);\n\n   document.getElementById(\"sum\").innerHTML = answer;\n\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "let vs expr vs double parenthesis arithmetic in shell\r\n                \r\nWhen I was first learning shell scripting, a lot of examples I saw used ```\nlet```\n for basic arithmetic, but later I found out that some environments don't present ```\nlet```\n as a built-in, but support use of ```\nexpr```\n instead (though it's significantly slower).\n\nHowever, it is also possible in many shells to use double parentheses to perform arithmetic, for example ```\n$((54 + 102))```\n.\n\nSince I'm writing a script for portability, this presents a minefield of possibilities; currently I'm using two different wrapper functions (one for ```\nlet```\n and one for ```\nexpr```\n) and using a quick test to decide which one to use in the rest of my script.\n\nAnyway, what I'd like to know is if anyone can clarify the compatibility of each of these three arithmetic commands (and any others I've missed). I'm hoping that the double parentheses form may be common enough that I can just ditch compatibility checks, but it's a hard thing to search for so I decided to just come here and ask to find out for sure.\n\nJust to note I'm only interested in regular arithmetic, I think I've already covered the few big-integers I (may) need to work with.\n    ", "Answer": "\r\n```\n$(( ... ))```\n is defined in the POSIX standard, which is probably as portable as you need to be.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Simple arithmetic on values retreived using OIDs\r\n                \r\nI am new to SNMP and Nagios, and would like to do some basic arithmetic on values retrieved using OIDs. \n\nI need to monitor the used memory (RAM) on the servers on the University's network. They seem to be using UCD-SNMP-MIB. So far I have encountered ```\nmemTotalReal.0```\n and ```\nmemAvailReal.0```\n, and no direct way to retrieve the used memory. Is there any specific reason for this?\n\nExpected command for basic subtraction:\n\n```\n$USER1$/check_snmp -H $HOSTADDRESS$ -o memTotalReal.0-memAvailReal.0\n```\n\n\nWhat is the easiest way to retrieve the used memory? Do I need to resort to subtraction by possibly writing another script?\n    ", "Answer": "\r\nThere is no simple way to do it. So you need to calculate it like this:\n\n```\n(Used – buffers – cached) / Total * 100 = % memory used\n\nUsed = total - available\n```\n\n\nIn terms of OIDs you'll need to use the following:\n\n\nmemTotalOID = '.1.3.6.1.4.1.2021.4.5.0' \nmemRealAvailOID = '.1.3.6.1.4.1.2021.4.6.0' \nmemRealBuffersOID = '.1.3.6.1.4.1.2021.4.14.0'\nmemRealCachedOID = '.1.3.6.1.4.1.2021.4.15.0'\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Objective C Arithmetic failing\r\n                \r\nI have a ```\nNSNumber```\n and when I try to do basic arithmetic it fails.\n\n```\nNSNumber *contentExpirationInDays = [NSNumber numberWithInt: 1];\n```\n\n\nWhen I try to do a basic multiplication to convert to seconds it gives me crazy numbers:\n\n```\nNSTimeInterval contentExpirationInSecs =  [contentExpirationInDays intValue] * 24 * 60 * 60;\n```\n\n\n\n\nNote: The next bit is now irrelevant as explained in some answers:\n\nWhen I run the following commands in the console I get the following results:\n\n```\n(lldb) po [contentExpirationInDays intValue]\n1\n\n(lldb) po [contentExpirationInDays intValue] * 2\n-148319360\n```\n\n\n\n\nUPDATE\n\nThanks for the information regarding po vs p. I didn't know that detail... \n\nSo here is the real problem that I am experiencing:\n\n```\nNSNumber *contentExpirationInDays = [[NSNumber numberWithInt:1];\nNSTimeInterval contentExpiration = ([contentExpirationInDays intValue] * 24 * 60 * 60);\nmyObj.expirationDate = [[NSDate date] dateByAddingTimeInterval:contentExpiration];\n```\n\n\n```\nobj.expirationDate```\n usually ends up with many years in the future or many years in the past instead of one day ahead of today.\n    ", "Answer": "\r\npo is asking the debugger to print the description of the object at the address specified by the given pointer. As Martin R said, use p instead for just printing out scalar values:\n\n```\np [contentExpirationInDays intValue] * 2\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "I need to write a program that performs arithmetic operations using basic function with C\r\n                \r\nThe program would take a total of three integers: two numbers for the operation and an additional number that indicates the type of the operation\nThe third number would be one of the following four:\n\naddition,\nsubtraction,\nmultiplication,\ndivision.\n\nHere it would be assumed that division by zero would not happen.\nHow should I use the following function ```\n'operation(int a, int b, int c)'```\n for the arithmetic operation? I'm a beginner in coding overall and I'm having a hard time figuring this question out.\n    ", "Answer": "\r\nPerforming one operation and returning the result\nHere is how to perform an addition:\n```\nint addition(int a, int b)\n{\n    return (a+b);\n}\n```\n\nDoing something different depending on a condition\nHere is how to greet someone depending on a variable indicating their language:\n```\n/*\n** language:\n**  0 - English;\n**  1 - French;\n**  2 - Spanish.\n*/\nvoid greetings(char const *name, int language)\n{\n    if (language == 0)\n    {\n        printf(\"Good morning, %s!\\n\", name);\n    }\n    else if (language == 1)\n    {\n        printf(\"Bonjour, %s !\\n\", name);\n    }\n    else if (language == 2)\n    {\n        printf(\"Buenos dias, %s !\\n\", name);\n    }\n    else\n    {\n        printf(\"Sorry, %s. I have not learned Chinese yet.\\n\", name);\n    }\n}\n```\n\nCombining the two things we've learned today\nGood luck!\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Timestamp Arithmetic in Substrate\r\n                \r\nI can get the current timestamp as ```\n<timestamp::Module<T>>::get()```\n in substrate runtime module. \n\nHow can I perform basic arithmetic (addition, substraction) with it?\n\n```\ndecl_module! {\n  pub struct Module<T: Trait> for enum Call where origin: T::Origin {\n    fn deposit_event<T>() = default;\n\n    pub fn func1(origin) -> Result {\n      let now = <timestamp::Module<T>>::get();\n      const DURATION = 60 * 5;\n      // what is the proper way of performing the following operation?\n      // let future = now + DURATION; \n\n      // At some point in future, can I perform the following comparison?\n      if now > future { \n        // ... some code \n      }\n    }\n  }\n}\n```\n\n\nFurther Question:\n\nThis brings out a question I am not sure about Rust / Rust doc. Type ```\nT::Moment```\n has to have trait ```\nSimpleArithmetic```\n, which in turns require the type has trait ```\nTryInto<u32>```\n.\n\nSo this should work,\n\n```\nlet tmp: u32 = DURATION + now.try_into()?;\n```\n\n\nbut actually returning:\n\n```\nerror[E0277]: cannot add `()` to `u32`\n| no implementation for `u32 + ()`\n|\n= help: the trait `core::ops::Add<()>` is not implemented for `u32`\n\nerror[E0271]: type mismatch resolving `<() as core::convert::TryFrom<<T as srml_timestamp::Trait>::Moment>>::Error == &str`\n| note: expected type `core::convert::Infallible`\n=               found type `&str`\n```\n\n\nFurther Question - 2\n\nBasically, I went through this thread. Could you post an example how to convert from ```\nTimestamp```\n to ```\nu32```\n/```\nu64```\n, and from ```\nu32```\n/```\nu64```\n to ```\nTimestamp```\n, and what additional modules need to be brought in?\n\nThanks.\n    ", "Answer": "\r\nI wasn't able to figure out how to use ```\ninto()```\n, ```\ntry_into()```\n, ```\nfrom()```\n, ```\ntry_from()```\n.\n\nBut from Shawn example and what Bryan said to avoid, I can convert timestamp to u64 easily by: ```\nnow.as_()```\n.\n\nIf anyone can show me the answer using ```\ninto()```\n, ```\nfrom()```\n or its variant, I will be happy to update this thread and mark it as the correct answer.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Convert Ansible variable to integer for arithmetic\r\n                \r\nI would like to execute a command to obtain the current AWS EC2 launch template version in an integer format so I can do basic arithmetic on it to use in subsequent queries / deletes.\nFor example:\n```\n    tasks:\n  - name: Lookup current default version of EC2 launch template\n    command: aws ec2 describe-launch-template-versions --launch-template-id lt-xxx --filters Name=is-default-version,Value=true --query 'LaunchTemplateVersions[*].[VersionNumber]'\n    delegate_to: localhost\n    register: result\n\n  - name: Show results\n    debug:\n      msg: '{{ result.stdout }}'\n    delegate_to: localhost\n```\n\nIf this output is '5' I would like to subtract 1 from it so I can execute an additional command to do the following:\n```\naws ec2 delete-launch-template-versions --launch-template-id lt-xxx --versions {{result - 1}}\n```\n\nI realize this will not work as written, but this is the premise I'm going for.\n    ", "Answer": "\r\nConvert the string to an integer. For example\n```\n    - command: echo 5\n      register: result\n    - command: \"echo {{ result.stdout|int - 1 }}\"\n      register: result\n    - debug:\n        var: result.stdout\n```\n\ngives\n```\n  result.stdout: '4'\n```\n\nThe type of the command return values' attribute stdout is string. See the results below\n```\n    - command: echo 5\n      register: result\n    - debug:\n        msg: |-\n          result.stdout: {{ result.stdout }}\n          result.stdout|type_debug: {{ result.stdout|type_debug }}\n          result.stdout|int|type_debug: {{ result.stdout|int|type_debug }}\n```\n\n```\n  msg: |-\n    result.stdout: 5\n    result.stdout|type_debug: AnsibleUnsafeText\n    result.stdout|int|type_debug: int\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to evaluate String as expression to perform arithmetic operations on String in Rust, so that when user type 3 + 1 on console it gives 4\r\n                \r\nI was trying to make a calculator in the Rust programming language. The calculator performs basic arithmetic operations like add, sutract, exponent etc. The challenging part for me is that the user input is a ```\nString```\n and I want the calculator to be intelligent enough so that when the user types 3 + 1 on console it will return 4 or 2^3 = 8. I can parse the ```\nString```\n into an integer or any other data type, but how can I convert \"+\" into the arithmetic operator?\n    ", "Answer": "\r\nyou can use a crate named meval and just pass the string to the ```\neval_str```\n function \n\n```\nuse meval::eval_str;\n\nfn main() {\n    let r = meval::eval_str(\"1 + 2\").unwrap();\n    println!(\"1 + 2 = {}\", r);\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Trouble implementing Natural Number Arithmetic from scratch\r\n                \r\nI've been through LYAH, but I felt it was not a very good introduction to Haskell. I came across \"A gentle introduction to Haskell\", which recommended Richard Bird's \"Introduction to Functional Programming using Haskell\". That's the book I'm reading right now. Chapter 3 makes a datatype Nat and implements basic arithmetic with it. \n\nThis is the code I have written until now:\n\n```\nmodule Main where\nimport Prelude hiding ((^^))\n\ndata Nat = Zero | Succ Nat\n        deriving (Eq, Ord, Show)\nxx :: Nat -> Nat -> Nat\nm `xx` Zero   = Zero\nm `xx` Succ n = (m `xx` n) `add` m\n\n(^^) :: Nat -> Nat -> Nat\nm ^^ Zero   = Succ Zero\nm ^^ Succ n = (m ^^ n) `xx` m\n\nadd :: Nat -> Nat -> Nat\nm `add` Zero   = m\nm `add` Succ n = Succ(m `add` n)\n\nfactsu :: Nat -> Nat\nfactsu Zero     = Succ Zero\nfactsu (Succ n) = Succ n `xx` factsu n\n\n--Zero = 0\n\nshowNat :: Nat -> String\nshowNat Zero = \"Zero\"\nshowNat (Succ Zero) = \"Succ Zero\"\nshowNat (Succ (Succ n)) = \"Succ (\" ++ showNat (Succ n) ++ \")\"\n\nmain :: IO ()\nmain = return ()\n```\n\n\nThis is what happens:\n\n```\nfactsu Zero\nSucc Zero\nit :: Nat\n```\n\n\nHow do I define Succ and Zero?\n    ", "Answer": "\r\n\n  But I want Zero to equal 0\n\n\nThe underlying issue is what you mean by \"I want ```\nZero```\n to equal ```\n0```\n\". One literal reading of that might be \"I want ```\nZero == (0 :: Integer)```\n\", but that's impossible, as ```\nZero```\n and ```\n0 :: Integer```\n have different types -- your ```\nZero```\n is really its own thing. Nothing stops you, of course, from defining functions that interconvert between them:\n\n```\nnatToInteger :: Nat -> Integer\nintegerToNat :: Integer -> Maybe Nat\n```\n\n\nOn the other hand, if you just want GHCi to print ```\nZero```\n as \"0\"...\n\n```\nGHCi> Zero\n0\n```\n\n\n... all you need is a custom ```\nShow```\n instance, as karakfa and leftaroundabout suggest in the comments. That, however, won't change what ```\nZero```\n actually is; you are just changing the way it is displayed.\n\nFinally, a third possibility is that you want to use numeric literal syntax for your ```\nNat```\ns:\n\n```\nGHCi> 0 + 2 :: Nat\n2\nit :: Nat\n```\n\n\nThat is actually possible if you give ```\nNat```\n a ```\nNum```\n instance. That would probably be a bad idea, though, because ```\n(-)```\n would be partial and there would be no sensible implementation for ```\nnegate```\n (incidentally, that is also why I put a ```\nMaybe```\n in the signature of ```\nintegerToNat```\n above). Also, just like in the case of ```\nShow```\n, adding a ```\nNum```\n instance wouldn't essentially change what your ```\nNat```\ns are -- in particular, at the end of the day numeric literal syntax is just syntax.\n\n(You might question what I mean by \"essentially\" if you take the point of view that things are characterised by what you can do with them; but I will stop here before we get too sidetracked.)\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Arithmetic and Bitwise manipulation of sized ints in C\r\n                \r\nI'm a little confused about how the C language treats different sized ints when you do basic arithmetic and bitwise operation. what would happen if in this case:\n\n```\nint8_t even = 0xBB;\nint16_t twice = even << 8;\ntwice = twice + even; \n```\n\n\nWhat If i went the other way and attempted to add a 16 bit int to an 8 bit? is the normal int declaration dynamic? Why would i want to designate a size? What happens when I add to 8 bit ints that are both 0xFF? \n    ", "Answer": "\r\nAs I mentioned in my comment, everything gets promoted to at least an int during arithmetic.\n\nHere's an example program to demonstrate that:\n\n```\nmain(){\n    struct {\n        char x : 1;\n    }t;\n    t.x = 1;\n    int i = t.x << (sizeof i * 8 - 1);\n    printf(\"i = %x\\n\",i);\n}\n```\n\n\n```\nt.x```\n is only one bit, but in this operation it is promoted all the way to an integer to give the output:\n\n```\ni = 80000000\n```\n\n\nOn the other hand, if we add the line \n\n```\nlong long j = t.x << (sizeof j * 8 - 1)\n```\n\n\ngcc gave me the warning:\n\n```\nwarning: left shift count >= width of type [enabled by default]\n```\n\n\nWhat If i went the other way and attempted to add a 16 bit int to an 8 bit? \n\nAll the arithmetic would be done at integer precision (probably 32 bits) and then the bottom 8 bits of the result would be stored in the 8 bit number.\n\nIs the normal int declaration dynamic?\n\nNo. Its a fixed width on an implementation (probably 32 bits on yours).\n\nWhy would i want to designate a size?\n\nMaybe you have space constraints. Maybe your algorithm was made to work with a specific size integer. Maybe you really want to work on some modulo field provided by uint16_t (Z_65536).\n\nWhat happens when I add to 8 bit ints that are both 0xFF?\n\nThe promotion doesn't matter here, the 8 bit result will be 0xFE. If you were to store the result in a 16 bit number, then the result will be 0x1FE (Unless int's in your implementation are only 8 bits. This is highly unlikely except for some esoteric embedded applications). \n\nEdit\n\nI wrote about the unsigned convention here, because you representing the number as 0xFF seemed to refer to unsigned numbers (in K&R C ```\n0xFF```\n is actually an unsigned literal). If you were actually referring to the signed 8-bit value 0xFF that is equivalent to -1, and your problem becomes sort of trivial. No matter how big the integer, it should always be able to represent -1, as well as ```\n-1 + (-1) = -2```\n (you only actually need two bits to represent these numbers).\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "undefined error at calling method in controller from jquery ajax\r\n                \r\nI want to call a method from a controller to calculate a basic arithmetic operation. However, I get only undefined error. My code is\n\n```\n$(\"#equals3\").click(\n    function () {\n        let display = $(\"#calculatorDisplay\");\n        let currentValue = display.val();\n        $.ajax({\n            url:'Calculator/EvaluateExpressionAJAX',\n            type: 'POST',\n            data: { expression: currentValue },\n            contentType: 'application/json; charset=utf-8',\n            success: function (response) {\n\n                if (response.success) {\n                    alert(response);\n                } else {\n\n                    alert(response.responseText);\n                }\n            },\n            error: function (response) {\n                alert(\"error!\");\n            }\n        });\n    });\n```\n\n\nMy controller contains\n\n```\npublic static Dictionary<string, ArithmeticOperation> EvaulationDictionary = new Dictionary<string, ArithmeticOperation> {\n        { \"+\", (a, b) => a + b},\n        { \"-\", (a, b) => a - b},\n        { \"*\", (a, b) => a * b},\n        { \"/\", (a, b) => a / b},\n        { \"%\", (a, b) => a % b} };\n    [HttpPost]\n\n    public double EvaluateExpressionAJAX(string expression)\n    {\n        expression = expression.Trim();\n        string[] splitExpression = Regex.Split(expression, @\"\\s+\");\n        double a = Convert.ToDouble(splitExpression[0]);\n        double b = Convert.ToDouble(splitExpression[2]);\n        string op = splitExpression[1];\n        return EvaulationDictionary[op](a, b);\n    }\n```\n\n\nThanks in advance\n    ", "Answer": "\r\nIf you would put a breakpoint in the javascript you'll probably find that MVC/WebApi returns an error page with a message like:\n\n```\nInvalid JSON primitive: expression```\n\n\nThe JSON that you post is not valid, it isn't even JSON.\n\nIf you would replace that with:\n\n```\ndata: \"{ \\\"expression\\\": \\\"\" + currentValue +\"\\\" }\",\n```\n\n\nThat would post valid json to the ActionMethod.\n\nA better option would be to create a JavaScript Object and stringify that, like this:\n\n```\n// create a js object before the Ajax call\nlet dataObj = { \"expression\": currentValue };\n// change the data you send to this\ndata: JSON.stringify(dataObj),\n```\n\n\nAnd secondly: Take a good look at the url, I can't be sure, but if the page you rendered this from is the same controller and the index method, this probably won't work as you would expect. Change the URL to:\n\n```\nurl:'/Calculator/EvaluateExpressionAJAX',\n```\n\n\nto make it absolute. \n\nAnd finally, there are lot of possible bugs in the Action method. You can't expect users to supply 3 parts where part 1 and 3 are doubles. So there is a lot of checking missing. \n\nAnd last but not least, if this is MVC, it is probably best to return ```\nActionResult```\n or some subtype, in this case ```\nJsonResult```\n would suit best, from an actionmethod. \n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic query about python loop\r\n                \r\nSo , I have this code snippet : \n\n```\nimport sys\n\nwhile True:\n  print(\"Make sure the number of digits are exactly 12 : \")\n  x = input()\n  if str(x) == 12:\n      break\n\n  code = []\n\n  for i in range(12):\n      code[i] = int(x[i])\n```\n\n\nI want the program to repeat the lines , \"Make sure .... 12 :\" if 12 digits are not inputed. After that , I am copying them to an array to access each individual element of it to do very basic arithmetic calculations . Am I going in the right direction ? I am totally new to python , how can I fix this ? The above code is showing the following error . \n\n```\nTraceback (most recent call last):\n  File \"C:\\Users\\Arjo\\Desktop\\hw2a.py\", line 14, in <module>\n    code[i] = int(x[i])\nIndexError: list assignment index out of range\n```\n\n    ", "Answer": "\r\nYou're not creating an array of inputs with ```\nx```\n, but rather overwriting it each time.  Your comparison is also wrong; you don't want to see that the string of ```\nx```\n is, 12, but that it has a length of 12:\n\n```\nx = []\nwhile True:\n  print(\"Make sure the number of digits are exactly 12 : \")\n  x.append(input())\n  if len(x) == 12:\n      break\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to catch exceptions in WCF service?\r\n                \r\nI have a calculator that does basic arithmetic using user input from 2 ```\nTextBox```\nand works out averages(mode, mean, median, range) from a ```\nlistBox```\n thats populates using a ```\nNumericUpDown```\n. \n\nThe calculations are done in WCf Service and returned.\n\nFor the basic arithmetic a ```\ntry catch```\nis enough to handle an empty textBox or anything thats not a ```\ndouble```\n.\n\ntry catch isn't working for the averages. If the Array is empty, I get \"System.InvalidOperationException:\n  Sequence contains no elements\"\n\nService.svc.cs\n\n```\n//Define the methods declared in ICalculator.cs by returning with the relevant maths for +, -, *, /, %\n    public double Add2Numbers(double num1, double num2)\n    {\n        return num1 + num2;\n    }\n\n\n//Define the methods declared in ICalculator.cs by returning the mode from an array of decimals\n    public decimal Mode(decimal[] ArrayofNumbers)\n    {\n\n         /*This is using LINQ to calculate mode.\n         * taken from StackOverflow https://stackoverflow.com/questions/19407361/find-most-common-element-in-array/19407938\n         * Groups identical values in the array\n         * finds group with largest count*/\n            decimal mode = ArrayofNumbers.GroupBy(v => v)\n            .OrderByDescending(g => g.Count())\n            .Select(g => g.Key)\n            .First();\n\n        return mode;\n    }\n```\n\n\nForm\n\n```\n //When this button is clicked num1 and num2 are added together\n    private void btnAdd_Click(object sender, EventArgs e)\n    {\n        try\n        {\n            //parse user input as double num1 and num2\n            double num1 = double.Parse(txtNum1.Text);\n            double num2 = double.Parse(txtNum2.Text);\n\n            //Make a call to the service Add method, pass in num1 and num2\n            txtBoxTotal.Text = ws.Add2Numbers(num1, num2).ToString();\n\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex)\n            MessageBox.Show(\"Enter a numeric value only please, thank you.\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            txtBoxTotal.Text = String.Empty;\n        }\n    }\n\n   //this button returns most common number in list\n    private void BtnMode_Click(object sender, EventArgs e)\n    {\n        try\n        {\n\n            ws.Open();\n            //Create new instance of listNumbers\n            List<Decimal> listNumbers = new List<Decimal>();\n\n\n\n            //for each decimal in listbox...\n            foreach (Decimal listItems in listBoxNumbers.Items)\n            {\n                //Add to listNumbers\n                listNumbers.Add(listItems);\n\n            }\n\n            //Convert list to array to find most common item\n            decimal[] ArrayofNumbers = listNumbers.ToArray();\n\n            //Print mode to label and console\n            Console.WriteLine(ws.Mode(ArrayofNumbers).ToString());\n            txtBoxResult.Text = ws.Mode(ArrayofNumbers).ToString();\n\n            ws.Close();\n\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex)\n            MessageBox.Show(\"Enter some values to calculate averages, thank you.\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n        }\n\n    }\n```\n\n\nit seems I can't use try catch in the service code so how does one go about exception handling? \n\nTIA!\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to link Submit Button to Random Math Equation?\r\n                \r\nI am trying to generate 3 random math equations. The math is basic arithmetic. I do not knwo how to link the Submit button to my function. Please help!\n\nCode:\n\n```\n        var questionCorrect = 0;\n        var questionAsked = 0;\n\n        function basic()\n        {\n            function ask() \n                {\n                    var a = Math.floor(Math.random() * 10) + 1;\n                    var b = Math.floor(Math.random() * 10) + 1;\n                    var op = [\"*\", \"+\", \"-\"][Math.floor(Math.random()*3)];\n                    $(\"#basic\").text(\"How much is \" + a + \" \" + op + \" \" + b + \"?\") == eval( a + op + b);\n                }     \n\n                for(questionAsked=0; questionAsked<=2; questionAsked++)\n                {\n                    if(ask())\n                    {\n                        questionCorrect++;\n                    }\n                }\n\n                //alert( \"You got \"+questionCorrect+\"/\"+questionAsked+\" correctly\");    \n\n        }\n```\n\n\nHTML:\n\n```\n    <span id=\"basic\"></span>\n\n     <form id=\"basicAsk\" name=form1>\n\n               Answer:<input type=\"text\" name=\"txtRadius\" size=10>\n               <input type=\"button\" value=\"Submit Answer\" onclick=\"\"> \n\n    </form>\n```\n\n    ", "Answer": "\r\nTo link the function ```\nbasic()```\n to your button use:\n\n```\nonclick=\"basic()\"\n```\n\n\nBut I don't understand what are you trying to do.\n\nThe ```\nif(ask())```\n never will be ```\ntrue```\n because the function returns no value.\n\nCan you explain what you want? Because without this we can´t help you.\n\n\n\nTry changing your function ```\nask```\n to\n\n```\nfunction ask() {\n            var a = Math.floor(Math.random() * 10) + 1;\n            var b = Math.floor(Math.random() * 10) + 1;\n            var op = [ \"*\", \"+\", \"-\" ][Math.floor(Math.random() * 3)];\n\n            return eval(a + op + b) ==  prompt(\"How much is \" + a + \" \" + op + \" \" + b + \"?\",\"\");\n\n        }\n```\n\n\nI think this is what you want.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Primitive recursion\r\n                    \r\n            \r\n        \r\n            \r\n                    \r\n                        \r\n                    \r\n                \r\n                    \r\n                            \r\n                                Merged with How can I simplify a basic arithmetic expression?.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n\r\n\r\n    \r\n\r\nhow  will i define the function 'simplify' using primitive recursion?\n\nsimplify :: Expr -> Expr\n    ...  \n\nsimplify \nSimplify an expression using basic arithmetic, e.g. \n    simplify (Plus (Var \"x\") (Const 0)) = Var \"x\" \n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic Assembly arithmetics and order\r\n                \r\n:) I am struggling with a piece of assembly language, mostly the order in which my strings are printed. Here's what I have!!\n\n```\n.model small\n.stack 100h\n.DATA\n\n\n;DISPLAYS\n\nmsgquestion db 13,10, \"Addition or Subtraction?: $ \"  \nmsgfirst db 13,10, \"Enter first number : $\"     ;MESSAGE first   \nmsgsecond db  \"Enter second Number : $\"         ;MESSAGE second\nmsgSum db 13,10, \"The result is : $\"\nmsgDif db 13,10, \"The result is : $\"\nmsgterminator db 13,10, \"X to END: $\"\n.code \n\n;START OF CODE\n\nstart:\n    mov ax,@data \n    mov ds, ax\n\n    lea dx, msgfirst  ;Displays first\n    mov ah, 09h\n    int 21h\n    mov bx, 0\n\nstart1:\n        mov ah, 01h\n        int 21h     \n        cmp al,0dh      \n        je next1\n        mov ah,0        \n        sub al,30h      \n        push ax         \n        mov ax,10d      \n        mul bx          \n        pop bx          \n        add bx,ax \n        jmp start1 \n\nnext1:\n        push bx\n        lea dx,msgsecond  ;DISPLAYS MESSAGE 'second'\n        mov ah,09h\n        int 21h\n\n        mov bx,0\n\nstart2:\n        mov ah,01h\n        int 21h\n        cmp al,0dh\n        je QUESTION\n        mov ah,0\n        sub al,30h\n        push ax\n        mov ax,10d\n        mul bx\n        pop bx\n        add bx,ax \n        jmp start2\n\n\n    QUESTION:\n\n        lea dx, msgquestion\n        mov ah, 09h\n        int 21h\n\n        mov ah, 01h\n        int 21h\n\n        cmp al,'+'  \n        je adding\n\n        cmp al,'-'\n        je subtracting\n\n        cmp al,'x'\n        mov ah, 4ch\n        int 21h\n        jmp break\n\n\nTERMINATOR:\n\n        lea dx, msgterminator\n        mov ah, 09h\n        int 21h\n\n        mov ah, 01h\n        int 21h\n\n        cmp al,'+'  \n        je adding\n\n        cmp al,'-'\n        je subtracting\n\n        cmp al,'x'\n        mov ah, 4ch\n        int 21h\n        jmp break\n\nadding:     \n        pop ax\n        add ax,bx   \n        push ax\n        lea dx,msgSum   \n        mov ah,09h\n        int 21h \n        pop ax\n        mov cx,0\n        mov dx,0\n        mov bx,10d\n        jmp break\n\nsubtracting: \n        pop ax\n        sub ax,bx \n        push ax\n        lea dx,msgDif\n        mov ah,09h\n        int 21h \n        pop ax\n        mov cx,0\n        mov dx,0\n        mov bx,10d\n\nbreak:\n        div bx\n        push dx\n        mov dx,0\n        inc cx\n        or ax,ax \n        jne break \n\nans:        \n        pop dx\n        add dl,30h\n        mov ah,02h\n        int 21h\n        loop ans\n\n\n    jmp TERMINATOR\n    end start\n\n;END OF THE PROGRAM\n```\n\n\nI would like to get the addition and subtraction QUESTION to display first. \nAlso please suggest any other errors I made! I am really grateful guys, thanks a mil!! <3\n    ", "Answer": "\r\nWhat I understand from your question is that you wish to display the ```\nAddition or subtraction:```\n first and then input your numbers & perform the calculation. Well the solution is simple. As soon as your code begins, you can ask the user the question to add or subtract and then store the saved value (from ```\nal```\n) into a variable. Later on you can simply use that saved value for comparison purpose.\n\nHere is the new code\n\n```\n    .model small\n.stack 100h\n.DATA\n\n\n;DISPLAYS\n\nmsgquestion db 13,10, \"Addition or Subtraction?: $ \"  \nmsgfirst db 13,10, \"Enter first number : $\"     ;MESSAGE first   \nmsgsecond db  \"Enter second Number : $\"         ;MESSAGE second\nmsgSum db 13,10, \"The result is : $\"\nmsgDif db 13,10, \"The result is : $\"\nmsgterminator db 13,10, \"X to END: $\"\nv1 db ?\n.code \n\n;START OF CODE\n\nmain proc\n    mov ax,@data \n    mov ds, ax\n\n    ;//CHANGES MADE HERE\n    ;//add or sub\n    lea dx, msgquestion\n    mov ah, 09h\n    int 21h\n\n    mov ah, 01h\n    int 21h\n\n    mov v1,al\n    ;//END CHANGES\n\n    lea dx, msgfirst  ;Displays first\n    mov ah, 09h\n    int 21h\n    mov bx, 0\n\nstart1:\n        mov ah, 01h\n        int 21h     \n        cmp al,0dh      \n        je next1\n        mov ah,0        \n        sub al,30h      \n        push ax         \n        mov ax,10d      \n        mul bx          \n        pop bx          \n        add bx,ax \n        jmp start1 \n\nnext1:\n        push bx\n        lea dx,msgsecond  ;DISPLAYS MESSAGE 'second'\n        mov ah,09h\n        int 21h\n\n        mov bx,0\n\nstart2:\n        mov ah,01h\n        int 21h\n        cmp al,0dh\n        je QUESTION\n        mov ah,0\n        sub al,30h\n        push ax\n        mov ax,10d\n        mul bx\n        pop bx\n        add bx,ax \n        jmp start2\n\n\n    QUESTION:\n\n        mov al,v1     ;will now move the value stored in v1 earlier into al for comparision\n\n        cmp al,'+'  \n        je adding\n\n        cmp al,'-'\n        je subtracting\n\n        cmp al,'x'\n        mov ah, 4ch\n        int 21h\n        jmp break\n\n\nTERMINATOR:\n\n        lea dx, msgterminator\n        mov ah, 09h\n        int 21h\n\n        mov ah, 01h\n        int 21h\n\n        cmp al,'+'  \n        je adding\n\n        cmp al,'-'\n        je subtracting\n\n        cmp al,'x'\n        mov ah, 4ch\n        int 21h\n        jmp break\n\nadding:     \n        pop ax\n        add ax,bx   \n        push ax\n        lea dx,msgSum   \n        mov ah,09h\n        int 21h \n        pop ax\n        mov cx,0\n        mov dx,0\n        mov bx,10d\n        jmp break\n\nsubtracting: \n        pop ax\n        sub ax,bx \n        push ax\n        lea dx,msgDif\n        mov ah,09h\n        int 21h \n        pop ax\n        mov cx,0\n        mov dx,0\n        mov bx,10d\n\nbreak:\n        div bx\n        push dx\n        mov dx,0\n        inc cx\n        or ax,ax \n        jne break \n\nans:        \n        pop dx\n        add dl,30h\n        mov ah,02h\n        int 21h\n        loop ans\n\n\n    jmp TERMINATOR\nmain endp\nend main\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "arithmetic expression reader in python\r\n                \r\nI am trying to make an expression reader in python to compute basic arithmetic.\n\ngiven the expression ```\nsubtract(4,add(4,times(3,4)))```\n --> -12\n\nWhat would be the most pythonic way to build this? My method would be to convert the expression to a string, then create many if statements or switch cases to find keywords such as ```\nadd```\n,```\nsubtract```\n, or ```\ntimes```\n. Then read the ```\n(```\n, read an integer and comma, and then run the if statement/switch case again. If a ```\n)```\n is ever encountered, that is when compute the required arithmetic of the latest key work. Pretty much storing key works and integers in a queue and computing the latest ```\nsubtract```\n,```\ntimes```\n, or ```\nadd```\n in the queue when ```\n)```\n is found. This to me seems a bit too much. I was wondering if there are any useful built in functions in python that would make the code pythonic or easier to read\n    ", "Answer": "\r\nHere's some working code to get you started using ```\nast```\n:\n\n```\nimport ast\n\ns = 'subtract(4,add(4,times(3,4)))'\n\n# Probably better to use functions from the operator module here :-)\nfunctions = {'subtract': lambda a,b: a-b,\n             'add': lambda a, b: a+b,\n             'times': lambda a,b: a*b}\n\n\ndef _evaluate(node):\n    if isinstance(node, ast.Num):\n        return node.n\n    elif isinstance(node, ast.Name):\n        return functions[node.id]\n    elif isinstance(node, ast.Call):\n        function = _evaluate(node.func)\n        return function(*[_evaluate(n) for n in node.args])\n    else:\n        raise ValueError('Unknown node type: %s', type(node))\n\n\ndef evaluate(s):\n    tree = ast.parse(s)\n    node = tree.body[0].value\n    return _evaluate(node)\n\nprint evaluate(s)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Floating Point Arithmetic in AT&T syntax\r\n                \r\nBasically, all I have to do is multiply a matrix by a vector, using floating point operations in assembly.\n\nMy first draft looks like this:\n\n```\n  .data\n  mat: .float 1.0, 2.0, 3.0, 4.0, 5.0, 6.0\n  vek: .float 1.0, 2.0, 3.0\n  res: .float 0.0, 0.0\n  .text\n  .globl main\n  main:\n  ; here goes the magic\n  call exit\n```\n\n\nUnfortunately, all I've tried doesn't work. I know how to do the basic arithmetic operations (like faddp, fmulp and so on), but I'm still not able to store it efficiently. ```\nfstpl```\n doesn't seem to work at all.\n\nCan anybody give me a rough sketch (not on how to make this matrix - vector multiplication) how to use the FPU commands and how to store a computed result in a register?\n\nThanks in advance,\n    ", "Answer": "\r\nImplement it in C first, test it, then use ```\ngcc -S```\n to generate assembler source, then either use that as is or use it as a template for your own code.\n\nE.g. here is a C code implementation, ```\nmat_vec.c```\n:\n\n```\n#include <stdio.h>\n\nint main(void)\n{\n    // note: use \"volatile\" qualifier for input data otherwise gcc will\n    //       just optimise all the arithmetic away...\n    volatile float mat[2][3] = { { 1.0f, 2.0f, 3.0f }, { 4.0f, 5.0f, 6.0f } };\n    volatile float vek[3] = { 1.0f, 2.0f, 3.0f };\n    float res[2] = { 0.0f, 0.0f };\n\n    res[0] = mat[0][0] * vek[0] + mat[0][1] * vek[1] + mat[0][2] * vek[2]; \n    res[1] = mat[1][0] * vek[0] + mat[1][1] * vek[1] + mat[1][2] * vek[2]; \n\n    printf(\"res = { %g, %g }\\n\", res[0], res[1]);\n\n    return 0;\n}\n```\n\n\nLet's make sure it works:\n\n```\n$ gcc -Wall -Os -m32 -march=i686 mat_vec.c -o mat_vec\n$ ./mat_vec\nres = { 14, 32 }\n$\n```\n\n\nLooks good, so let's generate assembler source:\n\n```\n$ gcc -Wall -Os -m32 -march=i686 -S mat_vec.c -o mat_vec.S\n$ cat mat_vec.S\n    .cstring\nLC6:\n    .ascii \"res = { %g, %g }\\12\\0\"\n    .text\n.globl _main\n_main:\n    pushl   %ebp\n    movl    $0x40000000, %ecx\n    movl    %esp, %ebp\n    movl    $0x40400000, %edx\n    pushl   %esi\n    movl    $0x40800000, %eax\n    pushl   %ebx\n    movl    $0x3f800000, %esi\n    subl    $96, %esp\n    movl    %esi, -44(%ebp)\n    movl    %ecx, -40(%ebp)\n    movl    %edx, -36(%ebp)\n    movl    %eax, -32(%ebp)\n    movl    $0x40a00000, %eax\n    movl    %eax, -28(%ebp)\n    movl    $0x40c00000, %eax\n    movl    %eax, -24(%ebp)\n    movl    %esi, -20(%ebp)\n    movl    %ecx, -16(%ebp)\n    movl    %edx, -12(%ebp)\n    flds    -44(%ebp)\n    flds    -20(%ebp)\n    fstps   -72(%ebp)\n    flds    -40(%ebp)\n    flds    -16(%ebp)\n    fstps   -68(%ebp)\n    flds    -36(%ebp)\n    fstps   -64(%ebp)\n    flds    -12(%ebp)\n    fstps   -60(%ebp)\n    flds    -32(%ebp)\n    flds    -20(%ebp)\n    flds    -28(%ebp)\n    flds    -16(%ebp)\n    fxch    %st(3)\n    fmulp   %st, %st(2)\n    flds    -24(%ebp)\n    flds    -12(%ebp)\n    fxch    %st(2)\n    fmulp   %st, %st(4)\n    call    L3\n\"L00000000001$pb\":\nL3:\n    popl    %ebx\n    fmulp   %st, %st(1)\n    fxch    %st(3)\n    fmuls   -68(%ebp)\n    fxch    %st(1)\n    faddp   %st, %st(2)\n    fxch    %st(3)\n    fmuls   -72(%ebp)\n    fxch    %st(1)\n    faddp   %st, %st(2)\n    fxch    %st(1)\n    leal    LC6-\"L00000000001$pb\"(%ebx), %eax\n    fstpl   12(%esp)\n    flds    -64(%ebp)\n    fmuls   -60(%ebp)\n    fxch    %st(1)\n    faddp   %st, %st(2)\n    faddp   %st, %st(1)\n    fstpl   4(%esp)\n    movl    %eax, (%esp)\n    call    L_printf$stub\n    addl    $96, %esp\n    xorl    %eax, %eax\n    popl    %ebx\n    popl    %esi\n    leave\n    ret\n    .section __IMPORT,__jump_table,symbol_stubs,self_modifying_code+pure_instructions,5\nL_printf$stub:\n    .indirect_symbol _printf\n    hlt ; hlt ; hlt ; hlt ; hlt\n    .subsections_via_symbols\n```\n\n\nThe part you're interested in starts just before label ```\nL3```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Arithmetic Coding Implementation Performance Boost\r\n                \r\nI'm working on optimizing my Arithmetic Compression Implementation. I've included a basic arithmetic encoding algorithm below:\n\n```\nlower bound = 0\nupper bound = 1\n\nwhile there are still symbols to encode\n  current range = upper bound - lower bound\n  upper bound = lower bound + (current range × upper bound of new symbol)\n  lower bound = lower bound + (current range × lower bound of new symbol)\nend while\n```\n\n\nI have an idea to round my values, but to do so, the calculation of the upper bound CANNOT use the lower bound value. I can't figure out how to do that.\n\nMore information: I plan on rounding the lower bound up, narrowing the range, thus retaining precision, all the while making my number have less digits. Then rounding my upper bound lower in the same way.\nHowever, the calculation of the upper bound makes it so it increases if we increase the value of the lower bound, thus making the algorithm incorrect.\n\nMy question is: How can I calculate the upper bound, without using the value of the lower bound?\n    ", "Answer": "\r\nIn regard to shifting your string to left , use: string.substring(1)\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Reproduce behavior MAX_VALUE and MIN_VALUE\r\n                \r\nThe following also applied to other ```\nMIN_VALUE```\n and ```\nMAX_VALUE```\n, but let's only focus on ```\nInteger```\n for now. I know that in Java integers are 32-bit, with ```\nInteger.MAX_VALUE = 2147483647```\n (231-1) and ```\nInteger.MIN_VALUE = -2147483648```\n (-231). When calculating with these values when you go beyond their bounds, the number wraps around / overflows. So when you do something like ```\nInteger.MAX_VALUE + 1```\n, the result is the same as ```\nInteger.MIN_VALUE```\n.\n\nHere are some basic arithmetic calculations with ```\nMIN_VALUE```\n and ```\nMAX_VALUE```\n:\n\n```\nInteger.MAX_VALUE:                      2147483647\nInteger.MAX_VALUE + 1:                  -2147483648\nInteger.MAX_VALUE - 1:                  2147483646\nInteger.MAX_VALUE * 2:                  -2\nInteger.MAX_VALUE * 3:                  2147483645\nInteger.MAX_VALUE * 4:                  -4\nInteger.MAX_VALUE * 5:                  2147483643\nInteger.MAX_VALUE / Integer.MAX_VALUE:  1\nInteger.MAX_VALUE * Integer.MAX_VALUE:  1\nInteger.MAX_VALUE / Integer.MIN_VALUE:  0\nInteger.MAX_VALUE * Integer.MIN_VALUE:  -2147483648\nInteger.MAX_VALUE - Integer.MIN_VALUE:  -1\nInteger.MAX_VALUE + Integer.MIN_VALUE:  -1\n-Integer.MAX_VALUE:                     -2147483647\n-Integer.MAX_VALUE - 1:                 -2147483648\n-Integer.MAX_VALUE + 1:                 -2147483646\nInteger.MIN_VALUE:                      -2147483648\nInteger.MIN_VALUE + 1:                  -2147483647\nInteger.MIN_VALUE - 1:                  2147483647\nInteger.MIN_VALUE * 2:                  0\nInteger.MIN_VALUE * 3:                  -2147483648\nInteger.MIN_VALUE * 4:                  0\nInteger.MIN_VALUE * 5:                  -2147483648\nInteger.MIN_VALUE / Integer.MAX_VALUE:  -1\nInteger.MIN_VALUE / Integer.MIN_VALUE:  1\nInteger.MIN_VALUE * Integer.MIN_VALUE:  0\nInteger.MIN_VALUE - Integer.MAX_VALUE:  1\n-Integer.MIN_VALUE:                     -2147483648\n-Integer.MIN_VALUE - 1:                 2147483647\n-Integer.MIN_VALUE + 1:                 -2147483647\n```\n\n\nOr more in general (iff ```\nMIN == -MAX-1```\n):\n\n```\nMAX:                      MAX\nMAX + 1:                  MIN\nMAX - 1:                  MAX - 1\nMAX * 2:                  -2\nMAX * 3:                  MAX - 2\nMAX * 4:                  -4\nMAX * 5:                  MAX - 4\nMAX / MAX:                1\nMAX * MAX:                1\nMAX / MIN:                0\nMAX * MIN:                MIN\nMAX - MIN:                -1\nMAX + MIN:                -1\n-MAX:                     MIN + 1\n-MAX - 1:                 MIN\n-MAX + 1                  MIN + 2\nMIN:                      MIN\nMIN + 1:                  MIN + 1\nMIN - 1:                  MAX\nMIN * 2:                  0\nMIN * 3:                  MIN\nMIN * 4:                  0\nMIN * 5:                  MIN\nMIN / MAX:                -1\nMIN / MIN:                1\nMIN * MIN:                0\nMIN - MAX:                1\n-MIN:                     MIN\n-MIN - 1:                 MAX\n-MIN + 1:                 MIN + 1\n```\n\n\nMy question is: how can I reproduce all basic arithmetic operations (```\n+-*/```\n) above manually?\n\nThe first thing that came to mind was the modulo operator. So I tried a simple method like this:\n\n```\nlong reproduceMinMaxFromLongToInt(long n){\n  if(n > 2147483647L){\n    return n % 2147483648L;\n  }\n  if(n < -2147483648L){\n    return n % -2147483648L;\n  }\n  return n;\n}\n```\n\n\nWhich is correct for most of them, but not all. (To reduce the question size, here is a TIO link with test code, instead of a copy-paste here.) The ones that are incorrect:\n\n```\nCalculation:                Should be       But is instead\n\nMAX_VALUE + 1:              -2147483648     0\nMAX_VALUE * 2:              -2              2147483646\nMAX_VALUE * 4:              -4              2147483644\nMAX_VALUE * MIN_VALUE:      -2147483648     0\nMAX_VALUE - MIN_VALUE:      -1              2147483647\nMIN_VALUE - 1:              2147483647      -1\nMIN_VALUE * 3:              -2147483648     0\nMIN_VALUE * 5:              -2147483648     0\n-MIN_VALUE - 1:             2147483647      2147483647\n```\n\n\nThe others are correct.\n\nHow can I modify the ```\nreproduceMinMaxFromLongToInt```\n method so it gives the correct result for all basic arithmetic calculations (ignoring calculations like Power, Modulo, Root, and such for now)?\nI know I should probably look at bit-wise operands for the most part, but is it possible to reproduce this behavior without bit-wise operands, using basic arithmetic operands (including modulo) only?\n\nEDIT: Note: The ```\nInteger```\n is just used as an example. Of course I could just cast to ```\nint```\n in this case. But I'm trying to figure out the more general algorithm which also applied to other ```\nmin```\n/```\nmax```\n, like ```\nmin=-100; max=99```\n for example.\n    ", "Answer": "\r\nHere's one without bitwise operations (I'm not counting the constant-generation, they could be written out but it would obscure their meaning) or casts, as you can see it's more complicated than it should be, and it would be worse without Java 8:\n\n```\nlong reproduceMinMaxFromLongToInt(long n){\n    // reduce range\n    n = Long.remainderUnsigned(n, 1L << 32);\n    // sign-extend\n    if (n < (1L << 31))\n        return n;\n    else\n        return n - (1L << 32);\n}\n```\n\n\n\n\nImplementing other pairs of min/max this way is probably a strange thing to do. A more reasonable approach, probably, is to work only with positive numbers (in Java) modulo the length of the range, and interpret the upper range of them as being negative.\n\nFor example if the range was -2 through 2, you could bring them all into 0..4 by mapping them modulo (actual modulo, not Java-style remainder) 5. Then the usual mod-5 arithmetic will act reasonably. In the end just map them back to the original range, by interpreting 4 as -1 (which is, in mod-5 arithmetic, a reasonable thing to say) and 3 as -2.\n\nYou could interpret the code above as doing that, but there is the weird issue that (due to the range involved) it had to work with signed numbers as if they were unsigned, so ```\nLong.remainderUnsigned```\n made an appearance. For small ranges that wouldn't be a problem.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Using static methods and fields how do I print math equations with answers?\r\n                \r\nI'm trying to write a static class called Arithmetic with four static methods for basic arithmetic operation, namely: Add, Subtract, Multiply and Divide\nShould produce the following result. Below is my syntax. Where am I going wrong? \n\n```\n1+1=2\n2+2=4\n3+3=6\n4+4=8\n\n4-2=2\n8-4=4\n16-8=8\n\n4*2=8\n8*4=32\n\n4%2=2\n\nNo. Add=4\nNo. Subtract=3\nNo. Multiply=2\nNo. Divide=1\nPress any key to continue . . .\n```\n\n\nHere is my syntax. Let me know what you think.\n\n```\nnamespace ConsoleApplication1\n{\n    public static class Arithmetic\n    {\n        public static int Add(int opreand1, int opreand2);\n        public static int Subtract(int opreand1, int opreand2);\n        public static int Multiply(int opreand1, int opreand2 );\n        public static int Divide(int opreand1, int opreand2);\n    }\n\n        {\n         return opreand1 + opreand2;\n         return opreand1 - opreand2;\n         return opreand1 * opreand2;\n         return opreand1 / opreand2;\n\n        }\n    {\n\nConsole.WriteLine (\"1+1={0}\\r\\n2+2={1}\\r\\n3+3={2}\\r\\n4+4={3}\\r\\n\",  \n                Arithmetic.Add (1, 1), Arithmetic.Add (2,2), Arithmetic.Add(3,3), \n                Arithmetic.Add(4,4));\nConsole.WriteLine(\"4-2={0}\\r\\n8-4={1}\\r\\n16-8={2}\\r\\n\",\n                Arithmetic.Subtract(4, 2), Arithmetic.Subtract(8, 4), \n                Arithmetic.Subtract(16, 8));\nConsole.WriteLine(\"4*2={0}\\r\\n8*4={1}\\r\\n\",\n                Arithmetic.Multiply(4, 2), Arithmetic.Multiply(8, 4));\nConsole.WriteLine(\"4%2={0}\\r\\n\",\n                Arithmetic.Divide(4, 2));\nConsole.WriteLine(\"No. Add={0}\\r\\nNo. Subtract={1}\\r\\nNo. Multiply={2}\\r\\nNo. Divide={3}\",\n                Arithmetic.numAdd, Arithmetic.numSubtract, Arithmetic.numMutiply                           \n                Arithmetic.numDivide);\n }\n```\n\n\nAny input would be helpful.\n    ", "Answer": "\r\nThe above answer has the working code, here is an attempt at explaining what you did wrong:\n\n\nYou used a semicolon after your function declaration in the Arithmetic class. This basically indicates an empty function definition. The ONLY time this is an acceptable way to declare a function is if it is marked as ```\nabstract```\n or is in an interface.\nYou then closed the Arithmetic class before your \"function\" definitions. This means that the subsequent code isn't part of the Arithmetic class.\nRelated to the above, you have two \"functions\" with no names, declaration, etc. They are just scopes put directly into the namespace. This won't compile since the only structures allowed at the namespace level are classes, enums, and structs.\nYour arithmetic \"function\" is not contained in the Arithmetic class (noted above). It then has four return statements right in a row. Returning exits the function and returns program flow to the caller, meaning that the bottom three never run. Each function needs to be an actual separate function with declaration, body, etc.\nThe last Console.WriteLine references some properties or methods that don't exist in the arithmetic class. If they were supposed to be methods, there is no () after them so you are actually passing the delegate (type indeterminate since they are never declared) instead of the return value of the method.\n\n\nI'm not trying to beat you up here, but this code is really, really bad. Please make sure you understand everything I wrote above, as well as why the code answer above works. Ask more questions here on SO or in the comments if you don't, because without understanding these fundamentals, you will have a very difficult time succeeding in writing C#.\n\nHere is your code with comments next to the problems listed above.\n\n```\nnamespace ConsoleApplication1\n{\n    public static class Arithmetic\n    {\n        public static int Add(int opreand1, int opreand2);      //Closing semicolon means an empty function def\n        public static int Subtract(int opreand1, int opreand2); //Same\n        public static int Multiply(int opreand1, int opreand2 ); //Same\n        public static int Divide(int opreand1, int opreand2); // Same\n    } //This closing curly brace closed the class definition\n\n        { //This opening curly brace doesn't make any sense, you are starting a new scope in the namespace, which isn't allowed.\n         return opreand1 + opreand2; //Fine if this was the add function\n         return opreand1 - opreand2; //Couldn't hit this line since you returned above\n         return opreand1 * opreand2; //Same\n         return opreand1 / opreand2; //Same\n\n        } //Closed the undefined namespace-level scope\n    { //Same as before, you are opening a scope in the namespace.\n\nConsole.WriteLine (\"1+1={0}\\r\\n2+2={1}\\r\\n3+3={2}\\r\\n4+4={3}\\r\\n\",  \n                Arithmetic.Add (1, 1), Arithmetic.Add (2,2), Arithmetic.Add(3,3), \n                Arithmetic.Add(4,4));\nConsole.WriteLine(\"4-2={0}\\r\\n8-4={1}\\r\\n16-8={2}\\r\\n\",\n                Arithmetic.Subtract(4, 2), Arithmetic.Subtract(8, 4), \n                Arithmetic.Subtract(16, 8));\nConsole.WriteLine(\"4*2={0}\\r\\n8*4={1}\\r\\n\",\n                Arithmetic.Multiply(4, 2), Arithmetic.Multiply(8, 4));\nConsole.WriteLine(\"4%2={0}\\r\\n\",\n                Arithmetic.Divide(4, 2));\nConsole.WriteLine(\"No. Add={0}\\r\\nNo. Subtract={1}\\r\\nNo. Multiply={2}\\r\\nNo. Divide={3}\",\n                Arithmetic.numAdd, Arithmetic.numSubtract, Arithmetic.numMutiply                           \n                Arithmetic.numDivide); //All these don't exist. If they are methods, you are passing the delegate, not the return of the method call.\n }\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Dynamic Operator Overloading on dict classes in Python\r\n                \r\nI have a class that dynamically overloads basic arithmetic operators like so...\n\n```\nimport operator\n\nclass IshyNum:\n    def __init__(self, n):\n        self.num=n\n        self.buildArith()\n\n    def arithmetic(self, other, o):\n        return o(self.num, other)\n\n    def buildArith(self):\n        map(lambda o: setattr(self, \"__%s__\"%o,lambda f: self.arithmetic(f, getattr(operator, o))), [\"add\", \"sub\", \"mul\", \"div\"])\n\nif __name__==\"__main__\":\n    number=IshyNum(5)\n    print number+5\n    print number/2\n    print number*3\n    print number-3\n```\n\n\nBut if I change the class to inherit from the dictionary (```\nclass IshyNum(dict):```\n) it doesn't work.  I need to explicitly ```\ndef __add__(self, other)```\n or whatever in order for this to work.  Why?\n    ", "Answer": "\r\nThe answer is found in the two types of class that Python has.\n\nThe first code-snippet you provided uses a legacy \"old-style\" class (you can tell because it doesn't subclass anything - there's nothing before the colon). Its semantics are peculiar. In particular, you can add a special method to an instance:\n\n```\nclass Foo:\n   def __init__(self, num):\n      self.num = num\n      def _fn(other):\n         return self.num + other.num\n      self.__add__ = _fn\n```\n\n\nand get a valid response:\n\n```\n>>> f = Foo(2)\n>>> g = Foo(1)\n>>> f + g\n3\n```\n\n\nBut, subclassing ```\ndict```\n means you are generating a new-style class. And the semantics of operator overloading are different:\n\n```\nclass Foo (object):\n   def __init__(self, num):\n      self.num = num\n      def _fn(other):\n         return self.num + other.num\n      self.__add__ = _fn\n>>> f = Foo(2)\n>>> g = Foo(1)\n>>> f + g\nTraceback ...\nTypeError: unsupported operand type(s) for +: 'Foo' and 'Foo'\n```\n\n\nTo make this work with new-style classes (which includes subclasses of ```\ndict```\n or just about any other type you will find), you have to make sure the special method is defined on the class. You can do this through a metaclass:\n\n```\nclass _MetaFoo(type):\n    def __init__(cls, name, bases, args):\n        def _fn(self, other):\n            return self.num + other.num\n        cls.__add__ = _fn\n\nclass Foo(object):\n    __metaclass__ = _MetaFoo\n    def __init__(self, num):\n        self.num = num\n\n>>> f = Foo(2)\n>>> g = Foo(1)\n>>> f+g\n3\n```\n\n\nAlso, the semantic difference means that in the very first case I could define my local add method with one argument (the ```\nself```\n it uses is captured from the surrounding scope in which it is defined), but with new-style classes, Python expects to pass in both values explicitly, so the inner function has two arguments.\n\nAs a previous commenter mentioned, best to avoid old-style classes if possible and stick with new-style classes (old-style classes are removed in Python 3+). Its unfortunate that the old-style classes happened to work for you in this case, where new-style classes will require more code.\n\n\n\nEdit: \n\nYou can also do this more in the way you originally tried by setting the method on the class rather than the instance:\n\n```\nclass Foo(object):\n    def __init__(self, num):\n        self.num = num\nsetattr(Foo, '__add__', (lambda self, other: self.num + other.num))\n>>> f = Foo(2)\n>>> g = Foo(1)\n>>> f+g\n3\n```\n\n\nI'm afraid I sometimes think in Metaclasses, where simpler solutions would be better :)\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic Java issue: equivalent integer arithmetic producing different results\r\n                \r\nCan anybody explain the difference between the following two programs? They look equivalent to me but they generate different outputs. What's the reason?\n\nProgram 1: Outputs incorrect value; ```\ni=1```\n\n\n```\npublic class Test1{\n    public static void main(String[] args) {\n        int[] values = new int[] { 2, 3, 5, 1 };\n\n        int i = 0;\n        for (Integer integer : values) {\n            i =+ integer.intValue();\n        } // for loop ends\n        System.out.println(\"i=\" + i);\n    }\n} \n```\n\n\nProgram 2: Outputs expected value; ```\ni=11\"```\n\n\n```\npublic class Test2{\n    public static void main(String[] args) {\n        int[] values = new int[] { 2, 3, 5, 1 };\n\n        int i = 0;\n        for (Integer integer : values) {\n            i = i + integer.intValue();\n        } // for loop ends\n        System.out.println(\"i=\" + i);\n    }\n} \n```\n\n    ", "Answer": "\r\nObviously, the major difference is within this line:\n\n```\ni =+ integer.intValue();\n```\n\n\nPerhaps it was intended to use ```\ni +=```\n instead of ```\ni =+```\n in the first program. \nIn your version the first program just assigns a value every iteration so it's final result it the last value in array (which is ```\n1```\n). Your second program does what it's supposed to do - it adds all the elements in the array and it's result is ```\n11```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to implement @dataclass to define arithmetic operations in Python?\r\n                \r\nI'm learning Python on my own and I found a task that requires using a decorator @dataclass to create a class with basic arithmetic operations.\n```\nfrom dataclasses import dataclass\nfrom numbers import Number\n\n@dataclass\nclass MyClass:\n    x: float\n    y: float\n    def __add__(self, other):\n         match other:\n            case Number():\n                return MyClass(float(other) + self.x, self.y)    \n            case MyClass(ot_x, ot_y):\n                return MyClass(self.x + ot_x, self.y + ot_y)\n              \n    __radd__ = __add__        \n```\n\nI have implemented the addition operation. But I also need to do the operations of subtraction ```\n__sub__```\n, multiplication ```\n__mul__```\n, division ```\n__truediv__```\n, negation ```\n__neg__```\n, also ```\n__mod__```\n and ```\n__pow__```\n. But I couldn't realize these operations. The main thing for me is to use the construction match/case. Maybe there are simpler ways to create it.\nI will be glad of your help.\n    ", "Answer": "\r\nIf you're trying to make a complete numeric type, I strongly suggest checking out the implementation of the ```\nfractions.Fraction```\n type in the ```\nfractions```\n source code. The class was intentionally designed as a model for how you'd overload all the pairs of operators needed to implement a numeric type at the Python layer (it's explicitly pointed out in the ```\nnumbers```\n module's guide to type implementers).\nThe critical parts for minimizing boilerplate begin with the definition of the ```\n_operator_fallbacks```\n utility function within the class (which is used to take a single implementation of the operation and the paired ```\noperator```\n module function representing it, and generate the associated ```\n__op__```\n and ```\n__rop__```\n operators, being type strict for the former and relaxed for the latter, matching the intended behavior of each operator based on whether it's the first chance or last chance to implement the method).\nIt's far too much code to include here, but to show how you'd implement addition using it, I'll adapt your code to call it (you'd likely use a slightly different implementation of ```\n_operator_fallbacks```\n, but the idea is the same):\n```\nimport operator\n\n# Optional, but if you want to act like built-in numeric types, you\n# should be immutable, and using slots (if you can rely on Python 3.10+)\n# dramatically reduce per-instance memory overhead\n# Pre-3.10, since x and y don't have defaults, you could define __slots__ manually\n@dataclass(frozen=True, slots=True)\nclass MyClass:\n    x: float\n    y: float\n\n    # _operator_fallbacks defined here\n    # When it received a non-MyClass, it would construct a MyClass from it, e.g.\n    # to match your original code it would construct it as MyClass(float(val), 0)\n    # and then invoke the monomorphic_operator, e.g. the _add passed to it below\n    # or, if the type did not make sense to convert to MyClass, but it made sense\n    # to convert the MyClass instance to the other type, it would do so, then use the\n    # provided fallback operator to perform the computation\n    # For completely incompatible types, it just returns NotImplemented\n\n    def _add(a, b):\n        \"\"\"a + b\"\"\"\n        return MyClass(a.x + b.x, a.y + b.y)  # _operator_fallback has already coerced the types appropriately\n\n    __add__, __radd__ = _operator_fallbacks(_add, operator.add)\n```\n\nBy putting the ugliness of type-checking and coercion in common code found in ```\n_operator_fallbacks```\n, and putting only the real work of addition in ```\n_add```\n, it avoids a lot of every-operator-overload boilerplate (as you can see here; ```\n_operator_fallbacks```\n will be a page of code to make the forward and reverse functions and return them, but each new operator is only a few lines, defining the monomorphic operator and calling ```\n_operator_fallbacks```\n to generate the ```\n__op__```\n/```\n__rop__```\n pair.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is there any way to represent very long numbers? [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                Closed 11 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\n\n  Possible Duplicate:\n  working with incredibly large numbers in .NET  \n\n\n\n\nI'm working on a simple project which has to use basic arithmetic functions such as +,-,*,/.\nThe numbers that used by are too large to be stored in a 64 bit Integer.\n\nI wondered if there is any way to store these numbers so i can use them to perform arithmetic functions.\n\nThank you!\n    ", "Answer": "\r\nThe ```\nBigInteger```\n (.NET 4.0+) structure to the rescue!\n\n\n  Represents an arbitrarily large signed integer.\n\n\nIf you are on a version pre-dating 4.0, check out the BigNumbers library.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Defining arithmetic operations in a class\r\n                \r\nI'm creating a library dll in c# with my own classes. But, for arithmetic operations (+, -, *, /, ...) I've created methods like .Add (c1, c2) where c1 and c2 are objects of my class.\n\nThis method is great, but I'd prefer to be able to say: c3 = c1 + c2; and since I've already written my Add function, Multiply function, Divide function etc etc for my classes I'd like to define that:\n\nc1 = c2 + c3   is the same that: c1 = MyClass.Add (c2, c3);\n\nSo I would reuse my code, if it's possible. I'm sure there is documentation and information about all of this in the web, but I can't find it, anything I search, Google looks to misunderstand my question.\n\nHow can I define basic arithmetic operations for objects of my classes?\n    ", "Answer": "\r\nYou are looking for operator overloading.You need to overload + operator to tell the compiler how to perform an addition between two objects.Then you will be able to add two objects like you add two integer.\n\nHere is an example of ```\n+```\n operator overloading from msdn\n\n```\npublic static Complex operator +(Complex c1, Complex c2) \n{\n   return new Complex(c1.real + c2.real, c1.imaginary + c2.imaginary);\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to perform arithmetic in UNIX?\r\n                \r\nI am trying to build a very basic 4 function arithmetic script in UNIX and it doesn't like my arithmetic statement. I was trying to use 'bash arithmetic' syntax\n\nfrom this source\n\nhttp://faculty.salina.k-state.edu/tim/unix_sg/bash/math.html\n\nalso as a side note when you reference a variable in UNIX when do you need to use the \"$\" symbol, and when do you not need to?\n\n```\n#!/bin/bash\n\nstr1=\"add\"\nstr2=\"sub\"\nstr3=\"div\"\nstr4=\"mult\"\n\n((int3=0))\n((int2=0))\n((int1=0))\n\n\nclear\nread -p \"please enter the first integer\" $int1\nclear\nread -p \"Please enter mathmatical operator'\" input\nclear\nread -p \"Please enter the second integer\" $int2\n\n\nif [ \"$input\" = \"$str1\" ];\nthen\n\n((int3 = int1+int2))\n   echo \"$int3\"\n\n\nelse\n\n   echo \"sadly, it does not work\"\n\nfi;\n```\n\n    ", "Answer": "\r\nI think this is what you want:\n\n```\n#!/bin/bash\n\nstr1=\"add\"\nstr2=\"sub\"\nstr3=\"div\"\nstr4=\"mult\"\n\n((int3=0)) # maybe you can explain me in comments why you need a arithmetic expression here to perform an simple assignment?\n((int2=0))\n((int1=0))\n\necho -n \"please enter the first integer > \"\nread int1\necho -n \"Please enter mathmatical operator > \"\nread input\necho -n \"Please enter the second integer > \"\nread int2\n\n\nif [ $input = $str1 ]\nthen\n((int3=int1 + int2))\n   echo \"$int3\"\nelse\n   echo \"sadly, it does not work\"\nfi\n\nexec $SHELL\n```\n\n\nYou should definitly checkout ```\nman bash```\n. It is documented there in which command you need to specify ```\n$```\n or not to reference a variable. But aside from that:\n\n```\nvar=123 # variable assignment. no spaces in between\necho $var # fetches/references the value of var. Or in other words $var gets substituted by it's value.\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Packages for arithmetic with algebraic numbers in C++?\r\n                \r\nI am looking for a C++-compatible package that can do arithmetic with algebraic numbers. (Note: an algebraic number means a number that is a root of a polynomial with integer coefficients, so it is not given as a decimal or rational expression).\n\nMathematica handles algebraic numbers as \"root objects\", which are represented by polynomials with a choice of root. Then two such root objects can be added, multiplied, etc, and then reduced, to get a new root object.\n\nIs there some software that does the same thing in C++? I have seen some fancy number theory packages that do various things with number field extensions, but I would prefer something simple than can just do basic arithmetic with algebraic numbers, i.e. addition, subtraction, multipication, division, reducing, testing for equality. .\n    ", "Answer": "\r\nGivaro: C++ library for arithmetic and algebraic computations \n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is there a method to do arithmetic with SciPy's random variables?\r\n                \r\nSciPy's ```\nstats```\n module have objects of the type \"random variable\" (they call it ```\nrv_frozen```\n). It makes it easy to plot, say, cdf's of random variables of a given distribution. Here's a very simple example:\n\n```\nimport scipy.stats as stats\nn = stats.norm()\nx = linspace(-3, 3)\ny = n.cdf(x)\nplot(x, y)\n```\n\n\nI wondered whether there's a way of doing basic arithmetic manipulations on such random variables. The following example is a wishful thinking (it doesn't work).\n\n```\ndu_list = [stats.randint(2, 5) for _ in xrange(100)]\ndu_avg = sum(du_list) / len(du_list)\nx = linspace(0, 10)\ny = du_avg.cdf(x)\nplot(x, y)\n```\n\n\nThis wishful-thinking example should produce the graph of the cumulative distribution function of the random variable which is the average of 100 i.i.d. random variables, each is distributed uniformly on the set ```\n{2,3,4}```\n.\n    ", "Answer": "\r\nI realize this is a bit late, but I figured I'd answer in case anyone else needs this in the future. I needed the same functionality recently and even thought about extending scipy's ```\nrv_discrete```\n to implement this, but then I found PaCAL.\n\nPaCAL is a Python software package for doing arithmetic on random variables and it supports quite a few distributions, including continuous distributions. There is even some support for bivariate joint distributions. Available as a package on PyPI. Only for Python 2.x though.\n\nEDIT: The PaCAL repo on Github now supports Python 3.x as well.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is there predefined 2D point in C/C++ with predefined arithmetic operations?\r\n                \r\nI am currently writing a simulation, which works a lot with 2D points/vectors. Thus I find my self writing code, which looks like this:\n```\ndouble force_1[2] = {0.0, 0.0};\ndouble force_2[2] = result_of_calculation();\nforce_1[0] = force_1[0] + force_2[0];\nforce_1[1] = force_1[1] + force_2[1];\n```\n\nIs there a class in C/C++, which can represent a 2D vector and (most important) has all basic arithmetic operations predefined ? I would like to do:\n```\ndouble force_1[2] = {0.0, 0.0};\ndouble force_2[2] = result_of_calculation();\nforce_1 += force_2;\nforce_1 *= force_2;\n```\n\nMore:\nThe simulation is not written in C but in Python.\nI am working with Cython and I would like to drop my Numpy dependency.\n```\nforce_1 = np.array((0.0, 0.0))\n# type force_2 is np.ndarray\nforce_2 = result_of_calculation()\nforce_1 += force_2\nforce_1[1] = force_1[1] + force_2[1]\n```\n\n    ", "Answer": "\r\nAs already mentioned, C++ only, GLM would be the best choice.\nAlternatively, if possible, AVX - Advanced Vector Extensions\nFor GCC have a look at this Using Vector Instructions through Built-in Functions\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Check variable equality against a list of values\r\n                \r\nI'm checking a variable, say ```\nfoo```\n, for equality to a number of values. For example,\n\n```\nif( foo == 1 || foo == 3 || foo == 12 ) {\n    // ...\n}\n```\n\n\nThe point is that it is rather much code for such a trivial task. I came up with the following:\n\n```\nif( foo in {1: 1, 3: 1, 12: 1} ) {\n    // ...\n}\n```\n\n\nbut also this does not completely appeal to me, because I have to give redundant values to the items in the object.\n\nDoes anyone know a decent way of doing an equality check against multiple values?\n    ", "Answer": "\r\nIn ECMA2016 you can use the includes method. It's the cleanest way I've seen. (Supported by all major browsers)\n```\nif([1,3,12].includes(foo)) {\n    // ...\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why does a simple Swift arithmetic operation compile so slow?\r\n                \r\nIn an attempt to optimize the build time of my app I've added the following to my ```\nOTHER_SWIFT_FLAGS```\n:\n```\nOTHER_SWIFT_FLAGS = \n-Xfrontend -warn-long-expression-type-checking=75\n-Xfrontend -warn-long-function-bodies=75\n```\n\nI got a warnings for this specific type checking being slow, and I cannot figure out if I can help the compiler in some way here.\n```\nvar delay: TimeInterval = TimeInterval(index) * 0.05```\n\nAny suggestions what can be done to speed up the compile time for such basic arithmetic operations up?\nI'm running Xcode 11.5 with Swift 5\n\nAlso tried explicitly casting the number to ```\nTimeInterval```\n, which shouldn't be needed as all numbers are Doubles by default.\n\n    ", "Answer": "\r\nThe compiler performs type checks. If you have a long expression, it takes time. Sometimes when the expression is too long, you even get an error as:\n\nThe compiler is unable to type-check this expression in reasonable\ntime; try breaking up the expression into distinct sub-expressions\n\ntry something like\n```\nvar delay: TimeInterval = TimeInterval(index) * TimeInterval(0.05)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Bit Manipulation Arithmetic and Order of Operations\r\n                \r\nI am new to bit manipulation and just came across a situation where I was asked to find the inverse of XOR. It turned out to be XOR itself. This got me to thinking.\nGiven ```\nx = a ^ b | ~c & d```\n if I gave you ```\nx```\n, ```\na```\n, ```\nb```\n, and ```\nd```\n how would you solve for ```\nc```\n?\nIf we go back to basic arithmetic, if I have something like ```\nx = a - b + c * d```\n I know the order of operations and how to move each variable to the other side of the equation.  But I don't know how to do this with logical operations.\nAppreciate any help!\n    ", "Answer": "\r\nOne way is to convert everything to using & ^ as operations only, along with a bit-vector of all ones (~0 in code). Write 1 as a bit-vector of all ones, and 0 as a bit-vector of all zeros. (Or think about single bits.)\nHere's a quick translation method. Interpret bits 1 and 0 NOT as true and false, but as odd and even respectively, as in odd and even numbers. Then ```\nexclusive or```\n is what happens to odd/even when you add integers: for example odd + odd = even corresponds to 1^1=0. Similarly ```\nand```\n is what happens to odd/even when you multiply integers. So these operations inherit all the usual algebraic laws from the integers!\nSo write x+y for x^y and write xy for x&y to remind yourself of this. What happens when odd/even numbers are negated, i.e. x goes to -x? Odd remains odd and even remains even. So addition and subtraction are the same operation, as you discovered.\nNow here's a translation table. (The last two can be checked using truth tables.)\n```\nx^y```\n becomes ```\nx+y```\n\n```\nx&y```\n becomes ```\nxy```\n\n```\nx|y```\n becomes ```\nx+y+xy```\n\n```\n~x```\n  becomes ```\n1+x```\n\nLet's apply it to your equation.\n```\nx = a ^ b | ~c & d\n  = (a ^ b) | ( (~c)& d )\n  = (a + b) | ( (1+c)d )\n  = (a + b) + (1+c)d + (a + b)(1 + c)d\n```\n\nNow suppose I say ```\n(x,a,b,d) = (1,1,1,1)```\n, what is c ?\n```\n1 = (1 + 1) + (1 + c)1 + (1 + 1)(1 + c)1\n  = 1 - 1 + 1 + c + (1 - 1)(1 + c)\n  = 1 + c\nSo subtracting 1, which is the same as adding 1, gives,\n0 = c.\n```\n\nNow lets do what algebra we can in general to find c.\n```\nx = (a + b) + (1+c)d + (a + b)(1 + c)d\n  = (a + b) + d + cd + (a + b)d + (a + b)cd\n  = (a + b)(1 + d) + d + d(1 + a + b)c\nSo, adding the parts without c to both sides\n(d(1 + a + b))c = x + d + (a + b)(1 + d)\n```\n\nIf the multiplier of c on the left evaluates to 0 with some assignment, then c can be anything, provided the right hand side is zero. If the right hand side is not zero under that assignment, then there is no solution.\nIf the multiplier of c on the left evaluates to 1, then the right hand side is a formula for the value of c, so there is exactly one solution.\nWhen are there two or zero solutions for c? When the left hand multiplier is zero.\n```\nd(1 + a + b) = 0\n```\n\nand this occurs when ```\nd=0```\n or ```\n(1 + a + b)=0```\n. This last equation is equivalent to ```\na = 1+b```\n and since ```\n1+b = ~b```\n the solutions are where a≠b. When does this lead to two solutions? When the right hand side is zero.\n```\nx + d + (a + b)(1 + d) = 0 when d=0 or a = 1 + b\nIn the first case this evaluates to\nx + a + b = 0 which is satisfied when two of x,a,b are 1.\nIn the second case this is\nx + 1 = 0 which means x = 1\n```\n\nSo there are two solutions when\n```\n1. d=0 and ( two of x,a,b are 1 )\nor\n2. a≠b and x=1\n```\n\nIn a similar way when there is one solution and when there are no solutions can characterized. It's the ideas that matter here, not the exact details.\nJust as elsewhere in algebra, some situations will prove more tractable than others. Resorting to the brute force of truth tables makes every situation exponentially intractable and frequently unintelligible, and when there are potentially simple things they can be made hard to discover.\nDoing algebra with & | ~ (boolean algebra) is much harder because canceling things out is difficult. Apart from cancelations when constants appear in expressions, cancellation only occurs using the absorption laws, ```\na&(a|b)=a```\n and ```\na|(a&b)=a```\n, which are quite complex patterns to steer expressions towards using the other rules of boolean algebra.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Arithmetic Operations inside XAML Resource Dictionary\r\n                \r\nWhat I want to do\nI've been exploring XAML Resource Dictionaries recently. They are very powerful, but in order to cut down (even further) on the changes that would need to be made to accommodate any modifications, I'd like to use some basic arithmetic operations to change the ```\nHeightRequest```\n property of an ```\nEntry```\n.\nI'm already making good use of ```\nOnPlatform```\n and ```\nOnIdiom```\n for different aspects, like ```\nFontSize```\n.\nFor the iOS Platform, I'd like to make the ```\nHeightRequest```\n of an entry ```\n20+(FontSize)```\n. The ```\nFontSize```\n is already set using ```\nOnIdiom```\n (it's slightly increased for tablets).\nIn a perfect world, the core thing which I'm trying to do might look something like \n```\n<Setter Property=\"HeightRequest\" Value=\"{DynamicResource StandardFontSize}+10\">```\n\nWhat \"works\"\nI have a working solution if I use a combination of ```\nOnIdiom```\n and ```\nOnPlatform```\n.\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Application xmlns=\"http://xamarin.com/schemas/2014/forms\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"XamarinDesigner.App\"\n             xmlns:local=\"clr-namespace:XamarinDesigner\"\n             >\n    <Application.Resources>\n        <ResourceDictionary>\n            <OnIdiom x:Key=\"StandardFontSize\" x:TypeArguments=\"x:Double\"  Tablet=\"22\" Phone=\"18\"/>\n            <Style x:Key=\"MyEntry\" TargetType=\"Entry\">\n                <Setter Property=\"FontSize\" Value=\"{DynamicResource StandardFontSize}\"/>\n                <Setter Property=\"HeightRequest\">\n                    <Setter.Value>\n                        <OnIdiom x:TypeArguments=\"x:Double\">\n                            <OnIdiom.Phone>\n                                <OnPlatform x:TypeArguments=\"x:Double\" iOS=\"30\"/>\n                            </OnIdiom.Phone>\n                            <OnIdiom.Tablet>\n                                <OnPlatform x:TypeArguments=\"x:Double\" iOS=\"40\"/>\n                            </OnIdiom.Tablet>\n                        </OnIdiom>\n                    </Setter.Value>\n                </Setter>\n                <Setter Property=\"VerticalOptions\" Value=\"Center\"/>\n            </Style>\n        </ResourceDictionary>\n    </Application.Resources>\n</Application>\n```\n\nWith this 'solution' - I need to set the value explicitly and do the calculations myself. While this works, I'd like to be able to perform a basic arithmetic operation to find the value of ```\nFontSize```\n, and add some number to it.\nWhat I've tried\nIn another attempt I've made, I've found a converter and tried to adapt it to my use case. While there is no intellisense or build/compile errors, the app crashes immediately after opening. The .cs file for ArithmeticConverter can be found in the link above.\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Application xmlns=\"http://xamarin.com/schemas/2014/forms\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"XamarinDesigner.App\"\n             xmlns:local=\"clr-namespace:XamarinDesigner\"\n             >\n    <Application.Resources>\n        <local:ArithmeticConverter x:Key=\"AScript\"/>\n\n        <ResourceDictionary>\n            <OnIdiom x:Key=\"StandardFontSize\" x:TypeArguments=\"x:Double\"  Tablet=\"22\" Phone=\"18\"/>\n\n            <Style x:Key=\"MyEntry\" TargetType=\"Entry\">\n                <Setter Property=\"FontSize\" Value=\"{DynamicResource StandardFontSize}\"/>\n                <Setter Property=\"HeightRequest\" Value=\"{Binding Converter={StaticResource AScript},ConverterParameter=Int32.Parse(20+{DynamicResource StandardFontSize}}\"/>\n                <Setter Property=\"VerticalOptions\" Value=\"Center\"/>\n            </Style>\n\n        </ResourceDictionary>\n    </Application.Resources>\n</Application>\n```\n\nI don't fully understand the use of converters, and ```\n{Binding}```\n inside of a value in App.xaml is also something that is new to me. Looking at the example provided with the converter, I think I'm close to being correct, and may just need a push in the right direction?\n\nIs it possible to do this basic sort of arithmetic function in the ```\nApp.xaml```\n alone(or with the use of a converter)? I'm hoping to contain as much as I can to this file.\nOther solutions I've found in my search have mentioned the use of a viewmodel, but this is a 'global' change I want to apply to every entry per platform/idiom, so I can't see how that adaption might work.\nThanks for your time!\n    ", "Answer": "\r\nOne of the reason your app is crashing is because Converter is outside the ResourceDictionary.\n\nSolution 1\n\nBinding should be used only when there is a BindingContext assigned, hence you need to assign it in cs file. \n\nApp.cs:\n\n```\npublic App()\n{\n    InitializeComponent();\n    BindingContext = new { EntryHeightRequest = 10 };\n    MainPage = ...\n}\n```\n\n\nApp.xaml:\n\n```\n<ResourceDictionary>\n    <local:ArithmeticConverter x:Key=\"AScript\"/>\n    <OnIdiom x:Key=\"StandardFontSize\" x:TypeArguments=\"x:Double\"  Tablet=\"22\" Phone=\"18\"/>\n    <Style x:Key=\"MyEntry\" TargetType=\"Entry\">\n        <Setter Property=\"FontSize\" Value=\"{DynamicResource StandardFontSize}\" /> \n        <Setter Property=\"HeightRequest\" Value=\"{Binding EntryHeightRequest, Converter={StaticResource AScript},ConverterParameter=\"{StaticResource StandardFontSize}\"/>\n        <Setter Property=\"VerticalOptions\" Value=\"Center\"/>\n    </Style>\n</ResourceDictionary>\n```\n\n\nArithmeticConverter.cs:\n\n```\npublic object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n{\n    if(value is int constant && parameter is OnIdiom<double> dynamicSize)\n        return constant + dynamicSize.GetValue();\n    return -1;\n}\n```\n\n\nOnIdiomExtension:\n\n```\n    public static T GetValue<T>(this OnIdiom<T> idiom)\n    {\n        switch(Device.Idiom)\n        {\n            case TargetIdiom.Phone:\n                return idiom.Phone;\n\n            case TargetIdiom.Desktop:\n                return idiom.Desktop;\n\n            case TargetIdiom.Tablet:\n                return idiom.Tablet;\n\n            case TargetIdiom.TV:\n                return idiom.TV;\n\n            case TargetIdiom.Watch:\n                return idiom.Watch;\n\n            default:\n                throw new NotSupportedException();\n        }\n    }\n```\n\n\nBeware: When I tried, BindingContext is passed to  ResourceDictionary(but this post contradicts it, may be they changed?)\n\nSolution 2\n\nSimilar to Solution 1 but instead of setting BindingContext you can use OnIdiom on HeightRequest with default value.\n\n```\n<Setter Property=\"HeightRequest\" Value=\"{OnIdiom Default=10, Converter={StaticResource AScript}, ConverterParameter={StaticResource StandardFontSize}}\" />\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Strange behaviour on dividing -ve int/-ve int ,in java\r\n                \r\nAlthough I am not new to java, I observed this peculiar behavior the other day. I was refreshing my basics by running code consisting of basic arithmetic operations. Now according to java (and basic rules of arithmetic's ofcourse) , ```\n-ve * -ve```\n OR ```\n-ve / -ve```\n is a ```\n+ve```\n number. \n\nBut compiling this source:-\n\n```\nint b = Integer.MIN_VALUE / -1;\nSystem.out.println(\"b:  \" + b);\n```\n\n\nGives me output:-\n\n\n  b:  -2147483648\n\n\nWhich is ```\n-ve```\n, Can anyone point me whats wrong? I know it must be small thing that I cant notice.\n    ", "Answer": "\r\nTo divide by ```\n-1```\n is the same as negating the number.\n\nSince the range of integers (-2147483648 to 2147483647) is 1 larger in magnitude on the negative side ```\n-Integer.MIN_VALUE```\n equals ```\nInteger.MAX_VALUE+1```\n which overflows back to ```\nInteger.MIN_VALUE```\n.\n\n```\nSystem.out.println(Integer.MIN_VALUE == -Integer.MIN_VALUE); // prints 'true'\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "R create a unique key from a set of string data\r\n                \r\nIs there a quick algorithm/function to convert a string into an integer in R\n\nI have a dataframe looks like\n\n```\nid_1 id_2 id_3 date        value\n1     2    3   2012-11-18   50\n1     1    4   2012-05-07   100\n```\n\n\nand \n\n```\nstrtoi(paste(df[,1],df[,3],df[,4],sep='_')```\n gives me a ```\nNA```\n\n\nTrying to set up a unique primary key I can use to do some basic arithmetic\n\nThanks\n    ", "Answer": "\r\nuse ```\ndigest```\n package\n\n```\nlibrary(digest)\ntemp <- data.frame(x1=c(1:5,1),x2=c(2:6,2),stringsAsFactors=FALSE)\ntemp <- data.frame(temp, uid = apply(temp, 1, digest),stringsAsFactors=FALSE))\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "React TypeScript: Convert text from input to number\r\n                \r\nI want to perform some basic arithmetic on the two input fields, but typescript and my linter are fighting against me...\n\n```\nconst Tokens: React.FC = () => {\n  const buy = useRef<HTMLInputElement>(null);\n  const price = useRef<HTMLInputElement>(null);\n\n  const calcQuantity = (event: React.ChangeEvent) => {\n    event.preventDefault();\n    if (buy.current && price.current) {\n      const perchasingQty = buy.current.value * price.current.value\n      console.log(perchasingQty);\n    }\n  };\n\n  return (\n    <div>\n        <input type='number' name='buy' defaultValue='10000' ref={buy} onChange={calcQuantity}/>\n        <input type='number' name='price' ref={price} readOnly defaultValue='4.6'/>\n    </div>\n\n  )\n\n```\n\n\nThe error I get is \n\n```\nThe left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.ts(2362)\n```\n\n\nAnd if I convert them to a number with parseInt I get the linter firing off\n\n```\nCalls to 'parseInt' are not allowed. tsstyle#type-coercion (ban)tslint(1)\n```\n\n    ", "Answer": "\r\nTo convert in typescript, you can use the Explicit casting using ```\nNumber(buy.current.value)```\n\nOr you can use an implicit conversion :\n```\n const buyCurrentValue = +buy.current.value\n const priceCurrentValue = +price.current.value\n const perchasingQty =  buyCurrentValue * priceCurrentValue\n console.log(perchasingQty);\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to return the result for arithmetic operations with lists using functions in Python [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        error :list indices must be integers, not float for median\r\n                            \r\n                                (2 answers)\r\n                            \r\n                    \r\n                Closed 4 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI'm trying to compute the mean, median and mode of a list of integers.  However, the error I'm getting (from what I've understood) states that I cannot return a floating point answer.  I don't understand why this is the case for lists.  All I'm doing is a basic arithmetic operation for both mean and median (using the statistics framework for mode).  The output should be just 1 single answer.\n\nThis is the code I have:\n\n```\nfrom statistics import mode\n\nlistOfNumbers = [1, 2, 6, 7, 8, 9, 3, 4, 5, 10, 10]\nlistOfNumbers.sort()\nlength = len(listOfNumbers)\n\ndef median(numbers):\n  if((len(list)) % 2 == 0):\n    median = (listOfNumbers[(length)/2] + listOfNumbers[(length)/2-1]) / 2\n  else:\n    median = listOfNumbers[(length-1)/2]\n  return\n\ndef meanMedianMode(numbers):\n    # TODO your code here!\n    meanOfNumbers = (sum(numbers))/(len(numbers))\n    medianOfNumbers = median(numbers)\n    modeOfNumbers = mode(numbers)\n    print(\"The mean of the numbers is: \" + str(meanOfNumbers))\n    print(\"The median of the numbers is: \" + str(medianOfNumbers))\n    print(\"The mode of the numbers is: \" + str(modeOfNumbers))\n\nmeanMedianMode(listOfNumbers)\n```\n\n\nAnd this is my output:\n\n```\nTypeError                                 Traceback (most recent call last)\n<ipython-input-27-03d94981e27d> in <module>()\n     21     print(\"The mode of the numbers is: \" + str(modeOfNumbers))\n     22 \n---> 23 meanMedianMode(listOfNumbers)\n     24 \n\n<ipython-input-27-03d94981e27d> in meanMedianMode(numbers)\n     15     # TODO your code here!\n     16     meanOfNumbers = (sum(numbers))/(len(numbers))\n---> 17     medianOfNumbers = median(numbers)\n     18     modeOfNumbers = mode(numbers)\n     19     print(\"The mean of the numbers is: \" + str(meanOfNumbers))\n\n<ipython-input-27-03d94981e27d> in median(numbers)\n      9     median = (listOfNumbers[(length)/2] + listOfNumbers[(length)/2-1]) / 2\n     10   else:\n---> 11     median = listOfNumbers[(length-1)/2]\n     12   return\n     13 \n\nTypeError: list indices must be integers or slices, not float\n```\n\n    ", "Answer": "\r\nThe problem lies in this line: \n\n```\nmedian = listOfNumbers[(length-1)/2]\n```\n\n\nIn python 3, ```\n(length-1)/2```\n is a ```\nfloat```\n, not an ```\nint```\n, hence the error ```\nlist indices must be integers or slices, not float```\n\n\nEasiest fix is to cast the result back into an ```\nint```\n:\n\n```\n...\nmedian = listOfNumbers[int((length - 1) / 2)]\n...\n```\n\n\nIn fact I would refactor your entire ```\nmedian()```\n function like this, as you're mixing local and global variables, and not returning anything:\n\n```\ndef median(numbers):\n    length = len(numbers)\n    if length % 2 == 0:\n        return (listOfNumbers[int(length / 2)] + listOfNumbers[int(length / 2) - 1]) / 2\n    else:\n        return listOfNumbers[int((length - 1) / 2)]\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "LISP arithmetics implementation\r\n                \r\nI'm making a toy lisp interpreter with D and I don't know the theory of Lisp very well.\n\nI was wondering if Lisp can implement basic arithmetic functions (+, -, ×, ÷) by itself.\nMost Lisp/Scheme dialects implemented it with the builtins of C, Java-like language and overload it as lisp code(duplicated implements?).\n\nI want to write arithmetic functions to Lisp code purely.\nIs it possible?\n    ", "Answer": "\r\nUnless you want to use Church numerals or the like, at some point you're going to have to get into the hardware arithmetic instructions (```\nadd```\n, ```\nsub```\n, ```\nmul```\n, ```\ndiv```\n) one way or another.\n\nIf going down the hardware instructions route, then depending on your Lisp implementation, it may be implemented using C code (especially for an interpreter-based implementation), or those instructions may be emitted directly (for a JIT compiler-based implementation).\n\nIf you're trying to be as first-principles as possible, you can implement multiplication and division using addition and subtraction instructions (in a pinch, you can implement them the same way you were taught to in school, though you're using word-sized digits—that is, for a 32-bit machine, each digit is base-4294967296 instead of base-10).\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Creating a Calc Function that performs arithmetic in Python\r\n                \r\nOk, so I'm trying to create a function in Python named calc that can perform the 4 basic arithmetic operations.\n\n```\ndef calc(n, num1, num2):\n\n    if n == '+':\n        return num1 + num2\n\n    elif n == '-':\n        return num1 - num2\n\n    elif n == 'x':\n        return num1 * num2\n\n    elif n == '/':\n        return num1 / num2\n```\n\n\nThis is my code so far. So when I execute it like so, I get a syntax error pointing to the number 6, the 3rd argument to be passed.\n\n```\ncalc(+ 4 6)\n\nSyntaxError: invalid syntax\n```\n\n\nCan someone tell me what's wrong? I'm just now learning python and I'm expected to create an Interpreter with loops, conditions, functions and variable assignments so getting stuck on this makes me somewhat frustrated, any help is appreciated.\n    ", "Answer": "\r\nYou can't make a function which would handle this:\n\n```\ncalc(+ 4 6)\n```\n\n\nThat is invalid syntax.\n\nBut you could do this:\n\n```\ncalc('+', 4, 6)\n```\n\n\nYou function would already work with it.\n\nOr you could have this:\n\n```\ncalc('+ 4 6')\n```\n\n\nand then a function which has to parse the contents.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Haskell library like SymPy? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question is seeking recommendations for books, tools, software libraries, and more. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     We don’t allow questions seeking recommendations for books, tools, software libraries, and more. You can edit the question so it can be answered with facts and citations.\r\n                \r\n                    \r\n                        Closed 8 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI need to manipulate expressions like 1 + sqrt(3) and do basic arithmetic like addition, subtraction, and division. I'd like the result to be in some sort of canonical form so that it can be used as a key in a map. Turning 1 + sqrt(3) into a float is not feasible due to roundoff problems.\n\nI used SymPy for this task in Python. Is there an equivalent native library for Haskell?\n    ", "Answer": "\r\nPlease check out the ```\nnumbers```\n package. If all you need is to store exact numbers like \"1 + √3\", you may want to use Data.Number.CReal instead of symbolic arithmetics. It stores the expressions and can be computed to arbitrary number of digits when needed.\n\n```\nPrelude Data.Number.CReal> let cx = 1 + sqrt (3 :: CReal)\nPrelude Data.Number.CReal> showCReal 400 cx \n\"2.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485756756261414154067030299699450949989524788116555120943736485280932319023055820679748201010846749232650153123432669033228866506722546689218379712270471316603678615880190499865373798593894676503475065760507566183481296061009476021871903250831458295239598329977898245082887144638329173472241639845878553977\"\n```\n\n\nThere is also a Data.Number.Symbolic module in the package but the description says \"It's mainly useful for debugging\".\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Overloading * operator for complex numbers (C++)\r\n                \r\nSo I'm being asked to overload operators to implement basic arithmetic for complex numbers. I've gotten +,-, and = working but I can't seem to get * working even though I think I have the right logic. \n\nWhat is wrong with my code?\n\n```\n#ifndef COMPLEX_HPP\n#define COMPLEX_HPP\n#include <string>\n\nclass Complex\n{\n    public:\n        Complex(double = 0.0, double = 0.0); // default constructor\n        Complex add(const Complex&) const;            // function add\n        Complex subtract(const Complex&) const; // function subtract\n        Complex multiply(const Complex&) const; // function multiply\n        std::string toString() const;  // return string representation\n        void setComplexNumber(double, double); // set complex number\n\n        void operator=(const Complex& obj)\n        {\n            (*this).realPart = obj.realPart;\n            (*this).imaginaryPart = obj.imaginaryPart;\n        }\n\n        Complex operator+(const Complex& obj)\n        {\n            Complex tmp_obj = *this;\n            tmp_obj.realPart = tmp_obj.realPart + obj.realPart;\n            tmp_obj.imaginaryPart = tmp_obj.imaginaryPart + obj.imaginaryPart;\n            return tmp_obj;\n        }\n\n        Complex operator-(const Complex& obj)\n        {\n            Complex tmp_obj = *this;\n            tmp_obj.realPart = tmp_obj.realPart - obj.realPart;\n            tmp_obj.imaginaryPart = tmp_obj.imaginaryPart - obj.imaginaryPart;\n            return tmp_obj;\n        }\n\n        Complex operator*(const Complex&obj)\n        {\n            Complex tmpObj = *this;\n            tmpObj.realPart = (tmpObj.realPart * obj.realPart) - (tmpObj.imaginaryPart * obj.imaginaryPart);\n            tmpObj.imaginaryPart = (tmpObj.realPart * obj.imaginaryPart) + (tmpObj.imaginaryPart * obj.realPart);\n            return tmpObj;\n\n        }\n\n\n    private:\n        double realPart;\n        double imaginaryPart;\n};\n```\n\n    ", "Answer": "\r\nOnce you start overwriting ```\ntmpObj```\n (specifically, ```\ntmpObj.realPart```\n), you've lost the original values. So don't read from ```\ntmpObj```\n, but from ```\n*this```\n:\n\n```\ntmpObj.realPart = realPart * obj.realPart - imaginaryPart * obj.imaginaryPart;\n//                ^^^^^^^^                  ^^^^^^^^^^^^^\ntmpObj.imaginaryPart = realPart * obj.imaginaryPart + imaginaryPart * obj.realPart;\n//                     ^^^^^^^^                       ^^^^^^^^^^^^^\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "idiv overflow exception asm\r\n                \r\nI'm very new to assembly, before only C C++\nI was trying to create a simple application that print all the prime number from 2 to given input\nWhen I run, it crashes, and that's normal. Looking at OllyDbg, the guilty piece is this:\n\n```\nmove eax, ebx\nidiv ecx ; !!! here\n```\n\n\nIt is strange because ecx is not 0  Values are EAX = 0000 0004, ECX = 0000 0002, and it says me that's an Integer_Overflow (exception C000 0095)\nHow it's possible to have an overflow during a division? Both operands are 32bit\nFloowing the code and a screenshot of ollydbg\n\n```\n%include \"asm_io.inc\"\n\nsegment .data\ninput_msg   db  \"Insert a number: \", 0\noutput_msg  db  \"This is prime: \", 0\n\nsegment .bss\ninput       resd    1\n\nsegment .text\nglobal _asm_main\n\n; input => input number\n; ebx => current number to execute [2 .. input]\n; ecx => counter from 2 to current [2 .. current]\n\n_asm_main:\n    mov eax, input_msg\n    call print_string\n\n    call read_int\n    inc eax\n    mov [input], eax\n    call print_nl\n\n    mov ebx, 2h\n\n    _start_main_loop:\n        mov eax, [input] ; if current > input\n        cmp eax, ebx\n        jz _end_main_loop       \n\n        mov ecx, 2h\n\n        _iteration:\n            cmp ebx, ecx\n            je _print_number\n\n            mov eax, ebx\n            idiv ecx ; unsigned division?\n\n            cmp edx, 0 ; if rem != 0 jmp\n            jne _end_iteration\n            inc ecx ; else inc ecx and re-divide\n            jmp _iteration\n\n        _print_number:\n            mov eax, output_msg\n            call print_string\n            mov eax, ebx\n            call print_int\n            call print_nl\n\n        _end_iteration:\n            inc ebx\n\n            jmp _start_main_loop\n\n    _end_main_loop:\n\n    popa\n    mov     eax, 0\n    leave\n    ret\n```\n\n\n\n    ", "Answer": "\r\nInteger overflow exception on ```\nidiv```\n instruction occurs when result of n-bit division can not fit into n-bit register. That is possible because ```\nidiv```\n and ```\ndiv```\n divide the whole register pair ```\nEDX:EAX```\n. Your ```\nEDX```\n value is 1 and you divide ```\nEDX:EAX```\n by 2, which results into a bit shift to right. This shift moves ```\n1```\n on ```\nEAX```\n´s MSB, and you have a positive result ```\n0x80000000```\n greather than ```\n0x7FFFFFFF```\n, what is illegal according to the documentation. \n\nYou may be asking yourself \"why is there such restriction?\". It's there, because a negative value (MSB set) in ```\nEAX```\n wouldn't be a valid result of division of two positive integers.\n\nA general solution for this problem is either to zero contents of ```\nEDX```\n before unsigned division\n\n```\nmov eax, ebx\nxor edx, edx\ndiv ecx ;unsigned division\n```\n\n\n...or to sign-extend EAX (if you expect negative input, which you shouldn't beacuse no negative integer can be a prime number).\n\n```\nmov eax, ebx\ncdq \nidiv ecx ;signed division\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Use Sub query result in arithmetic calculation\r\n                \r\nI have a query that contains a sub-query. The sub-query returns a ```\nCOUNT()```\n value. I want to display this count and then use it in a basic arithmetic calculation (subtract it from another column returned by the query).\n\nHere's the query:\n\n```\nSELECT DISTINCT\n    scw.SUBCOUNCIL_ID AS 'Sub Council',\n    eiw.WARD_ID AS 'Ward',\n    ess.DESCRIPTION AS 'Sector',\n    essg.NO_OF_SEATS AS 'Sector Seats',\n    (SELECT\n        COUNT(in_en.NOMINATION_ID)\n     FROM\n        ELEC_NOMINATIONS in_en\n        INNER JOIN ELEC_INTEREST_WARD in_eiw ON in_en.INTEREST_WARD_ID = in_eiw.INTEREST_WARD_ID\n        INNER JOIN ELEC_SPEAKER_SECTOR in_ess ON in_eiw.SPEAKER_SECTOR_ID = in_ess.SPEAKER_SECTOR_ID\n        INNER JOIN WARD in_w ON in_eiw.WARD_ID = in_w.WARD_ID\n        INNER JOIN SUBCOUNCILWARD in_scw ON in_w.WARD_ID = in_scw.WARD_ID\n     WHERE\n        in_en.ELECTED = 1\n        AND in_scw.SUBCOUNCIL_ID = scw.SUBCOUNCIL_ID\n        AND in_eiw.WARD_ID = eiw.WARD_ID\n        AND in_ess.SPEAKER_SECTOR_ID = ess.SPEAKER_SECTOR_ID) AS 'Elected',\n    (essg.NO_OF_SEATS - \"USE SUB-QUERY VALUE HERE\") AS 'Vacant'\nFROM\n    ELEC_NOMINATIONS en\n    JOIN PERSON p ON p.PERSON_ID = en.PERSON_ID\n    INNER JOIN ELEC_VACANCY ev ON en.VACANCY_ID = ev.VACANCY_ID\n    INNER JOIN ELEC_INTEREST_WARD eiw ON en.INTEREST_WARD_ID = eiw.INTEREST_WARD_ID\n    INNER JOIN WARD w ON eiw.WARD_ID = w.WARD_ID\n    INNER JOIN SUBCOUNCILWARD scw ON w.WARD_ID = scw.WARD_ID\n    INNER JOIN ELEC_SPEAKER_SECTOR_GROUP essg ON ev.VACANCY_ID = essg.VACANCY_ID\n    INNER JOIN ELEC_SECTOR_GROUP_SECTORS esgs ON essg.SPEAKER_GROUP_SECTOR_ID = esgs.SPEAKER_GROUP_SECTOR_ID\n    INNER JOIN ELEC_SPEAKER_SECTOR ess ON esgs.SPEAKER_SECTOR_ID = ess.SPEAKER_SECTOR_ID\nWHERE\n    scw.SUBCOUNCIL_ID = 15\nGROUP BY\n    scw.SUBCOUNCIL_ID,\n    eiw.WARD_ID,\n    ess.SPEAKER_SECTOR_ID,\n    en.PERSON_ID,\n    p.FULLNAMES,\n    p.SURNAME,\n    en.REJECTED,\n    ev.SEAT_TYPE,\n    ev.TOTAL_SEATS,\n    essg.NO_OF_SEATS,\n    eiw.INTEREST_WARD_ID,\n    eiw.WARD_ID,\n    ess.DESCRIPTION\n```\n\n\nI want to subtract the count (named 'Elected') from the 'Sector Seats' column and display it as 'Vacant'. It works perfectly if I put the whole sub-query into the place where I want to do the subtraction, but I don't want to do that.\n\n\n\nEDIT: The solution I used by combining the 2 provided answers:\n\n```\nSELECT DISTINCT\n    scw.SUBCOUNCIL_ID AS [Sub Council],\n    eiw.WARD_ID AS [Ward],\n    ess.DESCRIPTION AS [Sector],\n    essg.NO_OF_SEATS AS [Sector Seats],\n    ISNULL(elec.Elected, 0) AS [Elected],\n    essg.NO_OF_SEATS - ISNULL(elec.Elected, 0) AS [Vacant]\nFROM\n    ELEC_NOMINATIONS en\n    JOIN PERSON p ON p.PERSON_ID = en.PERSON_ID\n    INNER JOIN ELEC_VACANCY ev ON en.VACANCY_ID = ev.VACANCY_ID\n    INNER JOIN ELEC_INTEREST_WARD eiw ON en.INTEREST_WARD_ID = eiw.INTEREST_WARD_ID\n    INNER JOIN WARD w ON eiw.WARD_ID = w.WARD_ID\n    INNER JOIN SUBCOUNCILWARD scw ON w.WARD_ID = scw.WARD_ID\n    INNER JOIN ELEC_SPEAKER_SECTOR_GROUP essg ON ev.VACANCY_ID = essg.VACANCY_ID\n    INNER JOIN ELEC_SECTOR_GROUP_SECTORS esgs ON essg.SPEAKER_GROUP_SECTOR_ID = esgs.SPEAKER_GROUP_SECTOR_ID\n    INNER JOIN ELEC_SPEAKER_SECTOR ess ON esgs.SPEAKER_SECTOR_ID = ess.SPEAKER_SECTOR_ID\n    LEFT JOIN\n    (SELECT\n        in_scw.SUBCOUNCIL_ID, \n        in_eiw.WARD_ID, \n        in_ess.SPEAKER_SECTOR_ID ,\n        COUNT(in_en.NOMINATION_ID) AS [Elected]\n    FROM\n        ELEC_NOMINATIONS in_en\n        INNER JOIN ELEC_INTEREST_WARD in_eiw ON in_en.INTEREST_WARD_ID = in_eiw.INTEREST_WARD_ID\n        INNER JOIN ELEC_SPEAKER_SECTOR in_ess ON in_eiw.SPEAKER_SECTOR_ID = in_ess.SPEAKER_SECTOR_ID\n        INNER JOIN WARD in_w ON in_eiw.WARD_ID = in_w.WARD_ID\n        INNER JOIN SUBCOUNCILWARD in_scw ON in_w.WARD_ID = in_scw.WARD_ID\n    WHERE   in_en.ELECTED = 1\n    GROUP BY\n        in_scw.SUBCOUNCIL_ID,\n        in_eiw.WARD_ID,\n        in_ess.SPEAKER_SECTOR_ID) elec ON elec.SUBCOUNCIL_ID = scw.SUBCOUNCIL_ID\n                                       AND elec.WARD_ID = eiw.WARD_ID\n                                       AND elec.SPEAKER_SECTOR_ID = ess.SPEAKER_SECTOR_ID\n    WHERE\n        essg.NO_OF_SEATS > 0\n        AND scw.SUBCOUNCIL_ID = 15\nGROUP BY\n    scw.SUBCOUNCIL_ID,\n    eiw.WARD_ID,\n    ess.SPEAKER_SECTOR_ID,\n    essg.NO_OF_SEATS,\n    ess.DESCRIPTION,\n    elec.Elected\n```\n\n    ", "Answer": "\r\nYou can move the correlated subquery to an APPLY then you can reference the result multiple times:\n```\nSELECT DISTINCT\n    scw.SUBCOUNCIL_ID AS 'Sub Council',\n    eiw.WARD_ID AS 'Ward',\n    ess.DESCRIPTION AS 'Sector',\n    essg.NO_OF_SEATS AS 'Sector Seats',\n    e.Elected,\n    (essg.NO_OF_SEATS - e.Elected) AS 'Vacant'\nFROM\n    ELEC_NOMINATIONS en\n    JOIN PERSON p ON p.PERSON_ID = en.PERSON_ID\n    INNER JOIN ELEC_VACANCY ev ON en.VACANCY_ID = ev.VACANCY_ID\n    INNER JOIN ELEC_INTEREST_WARD eiw ON en.INTEREST_WARD_ID = eiw.INTEREST_WARD_ID\n    INNER JOIN WARD w ON eiw.WARD_ID = w.WARD_ID\n    INNER JOIN SUBCOUNCILWARD scw ON w.WARD_ID = scw.WARD_ID\n    INNER JOIN ELEC_SPEAKER_SECTOR_GROUP essg ON ev.VACANCY_ID = essg.VACANCY_ID\n    INNER JOIN ELEC_SECTOR_GROUP_SECTORS esgs ON essg.SPEAKER_GROUP_SECTOR_ID = esgs.SPEAKER_GROUP_SECTOR_ID\n    INNER JOIN ELEC_SPEAKER_SECTOR ess ON esgs.SPEAKER_SECTOR_ID = ess.SPEAKER_SECTOR_ID\n    OUTER APPLY\n    (   SELECT COUNT(in_en.NOMINATION_ID) AS Elected\n         FROM\n            ELEC_NOMINATIONS in_en\n            INNER JOIN ELEC_INTEREST_WARD in_eiw ON in_en.INTEREST_WARD_ID = in_eiw.INTEREST_WARD_ID\n            INNER JOIN ELEC_SPEAKER_SECTOR in_ess ON in_eiw.SPEAKER_SECTOR_ID = in_ess.SPEAKER_SECTOR_ID\n            INNER JOIN WARD in_w ON in_eiw.WARD_ID = in_w.WARD_ID\n            INNER JOIN SUBCOUNCILWARD in_scw ON in_w.WARD_ID = in_scw.WARD_ID\n         WHERE\n            in_en.ELECTED = 1\n            AND in_scw.SUBCOUNCIL_ID = scw.SUBCOUNCIL_ID\n            AND in_eiw.WARD_ID = eiw.WARD_ID\n            AND in_ess.SPEAKER_SECTOR_ID = ess.SPEAKER_SECTOR_ID\n    )  AS e\nWHERE\n    scw.SUBCOUNCIL_ID = 15\nGROUP BY\n    scw.SUBCOUNCIL_ID,\n    eiw.WARD_ID,\n    ess.SPEAKER_SECTOR_ID,\n    en.PERSON_ID,\n    p.FULLNAMES,\n    p.SURNAME,\n    en.REJECTED,\n    ev.SEAT_TYPE,\n    ev.TOTAL_SEATS,\n    essg.NO_OF_SEATS,\n    eiw.INTEREST_WARD_ID,\n    eiw.WARD_ID,\n    ess.DESCRIPTION\n```\n\nIt is also worth noting that using literals for column aliases is on the deprecation list. So instead of\n```\ness.DESCRIPTION AS 'Sector',\n```\n\nYou should probably be using:\n```\ness.DESCRIPTION AS Sector,\n```\n\nOr\n```\ness.DESCRIPTION AS [Sector]\n```\n\nAlthough My personal preference for reasons explained here is:\n```\nSector = ess.DESCRIPTION,\n```\n\nEDIT\nI am not sure you need a correlated subquery, or an APPLY at all, I think you can do this using a normal subquery and a JOIN:\n```\nLEFT JOIN\n(   SELECT  in_scw.SUBCOUNCIL_ID, \n            in_eiw.WARD_ID, \n            in_ess.SPEAKER_SECTOR_ID ,\n            COUNT(in_en.NOMINATION_ID) AS Elected\n        FROM\n        ELEC_NOMINATIONS in_en\n        INNER JOIN ELEC_INTEREST_WARD in_eiw ON in_en.INTEREST_WARD_ID = in_eiw.INTEREST_WARD_ID\n        INNER JOIN ELEC_SPEAKER_SECTOR in_ess ON in_eiw.SPEAKER_SECTOR_ID = in_ess.SPEAKER_SECTOR_ID\n        INNER JOIN WARD in_w ON in_eiw.WARD_ID = in_w.WARD_ID\n        INNER JOIN SUBCOUNCILWARD in_scw ON in_w.WARD_ID = in_scw.WARD_ID\n        WHERE   in_en.ELECTED = 1\n        GROUP BY in_scw.SUBCOUNCIL_ID, in_eiw.WARD_ID, in_ess.SPEAKER_SECTOR_ID \n) e\n    ON  e.SUBCOUNCIL_ID = scw.SUBCOUNCIL_ID\n    AND e.WARD_ID = eiw.WARD_ID\n    AND e.SPEAKER_SECTOR_ID = ess.SPEAKER_SECTOR_ID\n```\n\nThen just reference ```\ne.Elected```\n as in the above code with the ```\nAPPLY```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to perform a calculation inside a list with an arithmetic operator inside the list in Python?\r\n                \r\nI'm trying to get create a program, which does basic arithmetic operations addition,\nsubtraction, multiplication and division on a string expression, such as:\n```\n\"12 + 24\"\n\"23 - 21\"\n\"12 // 12\"\n\"12 * 21\"\n```\n\nFor instance, if we have the string expression: \"1 + 2\", we have:\n```\n1 followed by a space\n...then followed by an operator\n...then followed by another space\n...then followed by a 2\n```\n\nThe challenge of this exercise is to extract the values and the operator from the string expression!\nI am stuck on how to extract the operator from the list and use it to perform the operation.\nMy code is:\n```\nnumber = input(\"Enter: \")\nmyList = list(number)\n\nprint(myList)\n\nfor eachValue in myList:\n\n       value = eachValue \n\nprint(value) \n```\n\nAny help would be much appreciated!\n    ", "Answer": "\r\nHere is one way to handle such expressions:\n```\nimport re\nfrom operator import add, sub, floordiv, mul\noperators = {\"+\":add, \"-\":sub, \"//\":floordiv, \"*\":mul}\nexpr = input(\"Enter arithmetic expression: \")\nm = re.search(r'^\\s*(\\d+)\\s*(\\+|-|//|\\*)\\s*(\\d+)\\s*$', expr)\nvalid = False\nif m:\n    elements = m.groups()\n    if len(elements) == 3 and elements[0].isdigit() and elements[1] in operators and elements[2].isdigit():\n        valid = True\nif not valid:\n    print('not a valid expression')\nelse:\n    result = operators[elements[1]](int(elements[0]), int(elements[2]))\n    print(result)\n```\n\nExplanation:\n\nCreate a dictionary to map from string versions of the integer operators ```\n+, -, //, *```\n to function equivalents of these operators\nUse the regex function ```\nre.search()```\n to parse the input expression string capturing ```\noperand```\n, ```\noperator```\n, ```\noperand```\n as ```\nre```\n groups; the sample code above accepts formatting like \"1+1\", \"1 + 1\", \"  1 + 1  \", among others\nValidate the input expression: operands must look like integers (checked using ```\nstr.isdigit()```\n)and the operator string must be in our dictionary\nEvaluate the expression by looking up the appropriate operator in our dictionary and calling it with the two operands (converted to integers) as arguments.\n\nExamples:\n```\nEnter arithmetic expression: 6 // 2\n3\n\nEnter arithmetic expression: 1 + 1\n2\n\nEnter arithmetic expression: 5 * 3\n15\n\nEnter arithmetic expression:      1 - 99\n-98\n\nEnter arithmetic expression: 17/3\nnot a valid expression\n\n```\n\nNOTE: An alternative, as indicated in the comments to your question, is to use ```\neval()```\n on the input expression, but I have assumed above that you are trying to understand how to code a subset of the logic within ```\neval()```\n for basic arithmetic operations.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to scan a string in R\r\n                \r\nThis is just basic arithmetic and conditional work in R, no file included\nHere's the code\n```\nval <- scan()\nrepeat{\ntype <- scan()\nif (type==\"luxe\"|\"normal\")\nbreak\n}\nif (type==\"LUXE\"){\nprice <- val + (val * 0.2)\n} else {\nprice <- val + (val * 0.1)\n}\nprint(price)\n```\n\nI want to scan an article's price and type in order to give the taxed price, but the console keeps returning \"scan expected a real, got 'luxe'\"\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to use pow() in fxpmath library\r\n                \r\nI'm using the ```\nfxpmath```\n library but basic arithmetic doesn't seem to work. Are values getting corrupted or am I using powers that should not be computed?\n```\nfrom fxpmath import Fxp\n\ndef test_pure_q96():\n    x = Fxp(1.0001, dtype=\"Q64.96\") ** (Fxp(4055, dtype=\"Q64.96\") / 2)\n\n    print(x)\n    print(x/2)\n```\n\nThe output is:\n```\n1.2247538232335937\n2.036149027162537e-13\n```\n\nThe first value seems right, the second should only be half as much as the first?\n    ", "Answer": "\r\nThe detailed answer is at issue #38. The following is a summary:\nWhen a fractional (```\nn_frac != 0```\n) is used as exponent in ```\npower```\n function and ```\nop_sizing='optimal'```\n, fxpmath can not resolve the amount of fractional bits for result, so it performs power calculation using ```\nfloat```\n and store the result in a ```\nFxp```\n with optimal size. As the result value is 1.2247538232335937(...) a size of ```\nfxp-s54/52 (Q2.52)```\n is considered optimal.\nWhen ```\nx/2```\n is calculated, the constant 2 is taken as an ```\nFxp```\n with same size (see @Suneesh Jacob comment), and 2 can't be represented with only one bit for integer part (```\nQ2.52```\n). That's the reason of value error after ```\nx/2```\n.\nIf a power calculation is required to be performed in ```\nQ64.96```\n, configure fxpmath to work with op_sizing='same', in that way the fractional part for result is known.\n```\nFxp(1.0001, dtype=\"Q64.96\", op_sizing='same')**(Fxp(4055/2))\n```\n\n\nexponent doesn't need to be ```\nQ64.96```\n necessarily.\n\n\nYou can also use a template to work with same precision:\n```\nFxp.template = Fxp(dtype='Q64.96', op_sizing='same')\n\n# since here all Fxp created without explicit size will be `Q64.96` with op_sizing='same'\n\nz = Fxp(1.0001) # same that z = Fxp(1.0001, dtype=\"Q64.96\", op_sizing='same')\n# ...\nz = Fxp(1.0001)**(Fxp(4055/2, dtype='Q16.2')) \nz.info(3)\n\nFxp.template = None # disable template\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "modulo of a number - python vs c#\r\n                \r\nLets take the basic arithmetic operation - modulo \n\nI get different outputs depending on different languages.\n\nPython\n\n```\n>>> -1 % 12\n11\n```\n\n\nC#\n\n```\nvar res = -1 % 12;\noutput: res = -1\n```\n\n\nWhy am I seeing such behaviour? Ideally I'd like the output to be 11 in both cases.\n\nAlso does anyone know if I can achieve this in C#?\n    ", "Answer": "\r\nThe premise of the question is incorrect.  The ```\n%```\n operator in C# is not the modulus operator, it is the remainder operator, while in Python it is a modulus operator.\n\nAs Eric Lippert Describes, modulus and remainder are the same for all positive numbers, but they handle negative numbers differently.\n\nDespite both C# and Python having a ```\n%```\n operator, doesn't mean they both represent a modulus.\n\nIt's worth noting that other languages, such as C++ and Java use remainder for the ```\n%```\n operator, not modulus, which likely contributed to why C# choose to use remainder as well.  Since there isn't a lot of consistency in what is meant by the ```\n%```\n operator, I would suggest looking it up in the language docs whenever working with a new language.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Postfix and prefix operators in C and Java producing different results [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Why are these constructs using pre and post-increment undefined behavior?\r\n                            \r\n                                (15 answers)\r\n                            \r\n                    \r\n                Closed 7 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI thought basic arithmetic operators had same precedence in most languages. But for the following code snippet-\n\n```\nint a = 5;\na = --a + a++;\n//print a\n```\n\n\nC copiler (GNU GCC) gives me result as ```\n9```\n where as in java I get ```\n8```\n. What's going on?\nAccording to me it should be 8 ( 4 + 4 )\n    ", "Answer": "\r\n```\na = --a + a++;\n```\n\n\nThis in invokes undefined behaviour in C.\n\n\n  C99 §6.5: “2. Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression. Furthermore, the prior value shall be read only to determine the value to be stored.”\n\n\nIn this you change value of ```\na```\n twice between pervious and next ```\nsequence point```\n ,thus result could be anything.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Filtering dates to within 7 days\r\n                \r\nI have a working date filter that accepts a date string like ```\n2018-02-09T19:35:54+00:00```\n and orders events by date.  I would like my filter to only push items in the next 7 days. I feel like I have a basic arithmetic error in my code.\n\n```\nfunction dashCalDateFilter() {\n  return function(collection, key) {\n      let output    = [];\n      let keys      = [];\n      let sevenDays = Date.now() + 604800000;\n\n      angular.forEach(collection, function(item) {\n        var ikey = item[key];\n        if (keys.indexOf(ikey) === -1) {\n          keys.push(ikey);\n          item['isFirst'] = true;\n        }\n        console.log(item.start_time);\n        if (Date.now() - Date.parse(item.start_time) < sevenDays){\n          output.push(item);\n        };\n      });\n      return output;\n    };\n}\nexport default dashCalDateFilter;\n```\n\n    ", "Answer": "\r\nMy math was a bit off.  Here is the working version\n\n```\nfunction dashCalDateFilter() {\n  return function(collection, key) {\n      let output    = [];\n      let keys      = [];\n      let sevenDays = 604800000;\n\n      angular.forEach(collection, function(item) {\n        var ikey = item[key];\n        if (keys.indexOf(ikey) === -1) {\n          keys.push(ikey);\n          item['isFirst'] = true;\n        }\n        if ((Date.parse(item.start_time) - Date.now()) < 604800000){\n          output.push(item);\n        } else {\n          console.log('in >7 days');\n          console.log(Date.parse(item.start_time) - Date.now());\n        };\n      });\n      return output;\n    };\n}\nexport default dashCalDateFilter;\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Haskell: arithmetic operations on data types\r\n                \r\nI'm trying to understand data types and to do that, I want to try to emulate integer values. I defined it in the following way:\n\n```\ndata Number = Zero | One | Two | Three deriving (Eq,Ord,Show)\n```\n\n\nSo basically, I want to do be able to do basic arithmetic operations with elements of this type. Something akin to\n\n```\naddNumber :: Number -> Number -> Number\n```\n\n\ncalled like addNumber One Two would give Three as a result. However, I'm really not sure how to do this properly. I'd assume it would be in a way possible to do this by comparing Number's to each other, but to get anything from that, I would need to be able to access the next number in a this particular ordering, but I don't know how you'd do that with the given data type. So far, I'm doing something like this:\n\n```\ngetIntDex :: Number -> Int\ngetIntDex n = intDex n 0 nList\n\nnList :: [Number]\nnList = [Zero, One, Two, Three]\n\nintDex :: Number -> Int -> [Number] -> Int\nintDex e i (x:xs) = if((compare e x) == EQ)\n            then i\n            else intDex e (i+1) xs\n```\n\n\nWhich at least \"converts\" it into an integer so I can actually do something arithmetic with it. However, this feels kinda static and overall wrong (and I could probably do this faster with a switch or guards or something similar. Is there a better way?\n    ", "Answer": "\r\nI will assume you wish to avoid using the built-in arithmetic -- if not, as you observe one could convert to built-in numbers, do arithmetic, and convert back out, but that's not very satisfying from a \"learning Haskell\" perspective.\n\nThe standard way to define new functions on new data types is with pattern matching. For example, one naive approach to your problem would be to list all pairs of input ```\nNumber```\ns together with their sum:\n\n```\nadd :: Number -> Number -> Number\nadd Zero  Zero  = Zero\nadd Zero  One   = One\nadd Zero  Two   = Two\nadd Zero  Three = Three\nadd One   Zero  = One\nadd One   One   = Two\n-- ...\n```\n\n\nOf course, from a programmer's perspective that looks a bit daunting and boiler-plate-y. On the other hand, splitting out a few functions could make it less so; for example, you might write a function to add one and iterate it:\n\n```\naddOne :: Number -> Number\naddOne Zero  = One\naddOne One   = Two\naddOne Two   = Three\naddOne Three = Zero\n\nadd :: Number -> Number -> Number\nadd Zero  = id\nadd One   = addOne\nadd Two   = addOne . addOne\nadd Three = addOne . addOne . addOne\n```\n\n\nOf course, this will be slightly less efficient; and you wouldn't want to do this for larger number types. But it requires a lot less finger typing. (Anyway for larger number types you would probably want a different implementation than a big enumeration -- e.g. a stream of bits -- but that's beside the point here I think.)\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to perform arithmetic operations on generic lists\r\n                \r\nI have a c# program that reads in arbitrary CSV files. Columns can be of type int, float or double.\n\nI am currently loading this data into a List is there any way to perform basic arithmetic operations between columns. I.e. add two columns. If the columns are of different types I would like to follow standard type promotion.\n\nIs there an easy way to achieve this, should columns be encapsulated within an object?\n\nHere is a code sample that shows the behaviour I am after. I do need to keep the separate types, due to memory and res\n\n```\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Example\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            List<IList> data = new List<IList>();\n\n            data.Add(Enumerable.Range(0, 1000).ToList()); // Add a list of ints\n            data.Add(Enumerable.Range(0, 1000).Select(v=>(float)v).ToList()); // Add a list of floats\n            data.Add(Enumerable.Range(0, 1000).Select(v => (double)v).ToList()); // Add a list of doubles\n\n            data.Add(GenerateColumn(data[0], data[1], Operation.Add));\n            data.Add(GenerateColumn(data[1], data[2], Operation.Divide));\n        }\n\n        // This is what I would do if the lists were all the same type\n        static IList GenerateColumn(IList colA, IList colB,Operation operation)\n        {\n            List<double> result = null;\n\n            switch (operation)\n            {\n                case Operation.Add:\n                    result = colA.Zip(colB, (a, b) => a + b).ToList();\n                    break;\n                case Operation.Subtract:\n                    result = colA.Zip(colB, (a, b) => a - b).ToList();\n                    break;\n                case Operation.Multiply:\n                    result = colA.Zip(colB, (a, b) => a * b).ToList();\n                    break;\n                case Operation.Divide:\n                    result = colA.Zip(colB, (a, b) => a / b).ToList();\n                    break;\n            }\n            return result;\n        }\n\n        public enum Operation\n        {\n            Add,\n            Subtract,\n            Multiply,\n            Divide\n        }\n    }\n}\n```\n\n    ", "Answer": "\r\nThere is no support for generic arithmetic operations so you have to pick something else that fits your goal. \n\nJust making all values ```\ndouble```\n is one option and ignore non-numeric fields. This will simplify conversion rules (to none).\n\nAnother way out is to use ```\ndynamic```\n for all values (C# Adding two Generic Values). It will give you following exact promotion rules and ability to do math operations on any values (as long as values are actually of correct type and not just strings). That's probably what you really looking for if you are looking at making rules compiled (when  ```\ncol[0] = col[1] + col[2] * col[3]```\n is part of program's code).\n\nIf you planning to parse expressions for columns you may as well add support for promoting values to broader numeric types as part of the parser.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "computation cost comparison between Boolean and arithmetic\r\n                \r\nI have a general question regarding the computation cost of operations. Is the most basic Boolean operation cheaper or more expensive in time than the most basic arithmetic operation. In case there are edge cases then consider the stochastic case where you try out different inputs.\n\nUPDATE\nJust to refine the question slightly, I want to compare the time complexity of addition with the Boolean equals operations. Here is a resource for time complexity:\ntime complexity wiki\n\nNow from what I understand Boolean equals is just multiplication of bit-wise and operations, so that would make it less efficient in general.\n\nI have run this python code locally that confirms it:\n\n```\nfrom time import time\na = time()\n\nfor i in range(1000000):\n    26 == 25\nprint(time() - a)\n## 0.040122032165527344\na = time()\n\nfor i in range(1000000):\n    26 + 25\nprint(time() - a)\n## 0.031081438064575195\n```\n\n\nUPDATE slightly changed code above to make the Boolean equals more efficient\n    ", "Answer": "\r\nPractically speaking, comparisons are typically implemented in hardware so the cost would be the same as an arithmetic operation.\n\nhttps://en.wikipedia.org/wiki/Digital_comparator\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Getting invalid double, but the error shows a proper one\r\n                \r\nMy application does some basic arithmetic processes and then adds them to a ```\nTextView```\n. Because I want them the result be shown up to XX,XX I format my string with ```\n%.2f```\n. Now, when I try to retrieve this result and use it in another arithmetic process, it gives me an error of:\n\n```\njava.lang.NumberFormatException: Invalid double: \"8,86\" (or any number for that matter)\n```\n\n\nHow can I make the second process convert the string from the ```\nTextView```\nwithout getting an error?\n\nprocess 1\n\n```\nint newProductQuantity = Integer.valueOf(productQuantity.getText().toString());\ndouble newProductPrice = Double.valueOf(productPrice.getText().toString());\ndouble newProductVAT = Double.valueOf(productVat.getText().toString());\ndouble newProductPriceSum = ((newProductPrice + (newProductPrice * (newProductVAT / 100))) * newProductQuantity);\nString newProductPriceSumTexta = String.format(\"%.2f\", newProductPriceSum);\nproductPriceSum.setText(newProductPriceSumTexta);\n```\n\n\nprocess 2\n\n```\ndouble newOrderFinalLastSum = Double.parseDouble(newOrderFinalSum.getText().toString());\ndouble newOrderFinalNewSum = Double.parseDouble(productPriceSum.getText().toString());\ndouble newOrderFinalOmegaSum = newOrderFinalLastSum + newOrderFinalNewSum; //error is here\nString newOrderFinalOmegaSumText = String.format(\"%.2f\", newOrderFinalOmegaSum);\nnewOrderFinalSum.setText(newOrderFinalOmegaSumText);\n```\n\n    ", "Answer": "\r\nyour issue is ```\nLocale```\n  related. If you want always a dot ```\n.```\n as separator, you should specify a ```\nLocale```\n that use it. You can use ```\nformat```\n method that takes as first parameter a ```\nLocale```\n object. For instance\n\n```\nString.format(Locale.UK,...\n```\n\n\nFrom the documentation of ```\npublic static String format(Locale l, String format, Object... args)```\n\n\n\n  Returns a formatted string using the specified locale, format string,\n  and arguments.\n\n\nwhere\n\n\n  l - The locale to apply during formatting. If l is null then no\n  localization is applied.\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Assign a value to a variable\r\n                \r\nI am fairly new to COBOL and am trying to implement a program involving basic arithmetic operations. The one statement that is generating errors for me is : \n\n```\nMove (MULTIPLY UPrice BY OrdAmt) TO OrdCost\n```\n\n\nwhich gives me the following errors : \n\n```\nMove (MULTIPLY UPrice BY OrdAmt) TO OrdCost.\n........^\n%COBOL-W-BLKPREEND, Unreachable statement\nat line number 36 in file USR$ROOT3B:[GPY]CLASS5A.COB;13\n\nMove (MULTIPLY UPrice BY OrdAmt) TO OrdCost.\n.............^\n%COBOL-F-SYN7, Missing literal or data-name\nat line number 36 in file USR$ROOT3B:[GPY]CLASS5A.COB;13\n\nMove (MULTIPLY UPrice BY OrdAmt) TO OrdCost.\n.......................................^\n%COBOL-F-MISSING, \".\" required at this point\n```\n\n\nThis statement lies within an a structure of if statements. What does ```\nMissing literal or data-name```\n mean?\n    ", "Answer": "\r\nYou may be new to COBOL, but that doesn't absolve you from following its syntax. \n\nThe errors are generated by a sorely confused compiler. \n\nThere are a number of ways to do what you seem to want:\n\n```\nDo calculation storing result\nCopy result to where you want it to go\n\nDo calculating, storing result where you want it to go\n```\n\n\nThe second is more normal for COBOL programmers:\n\n```\nMULTIPLY UPrice              BY OrdAmt\n  GIVING                     OrdCost.\n```\n\n\nI've left the full-stop/period on the statement, because I think you have an old '74 Standard compiler.\n\nHowever, if, as you say, this code is within \"a structure of if statements\" then the full-stop/period is going to break your structure, so take it off.\n\nYou need to get hold of a COBOL manual/your course-notes/a good COBOL book and get a firm grip on the basics of the language.\n\nBe aware that MULTIPLY A BY B produces a result and stores it somewhere, there is no concept of it producing \"a result\" in the way that an assignment statement of some type may.\n\nBe also aware that ADD A TO B, SUBTRACT A FROM B and DIVIDE A BY B do so as well, and all allow the use of GIVING which puts the result somewhere else.\n\nThere is also the COMPUTE verb, which is an assignment-type. Between these five verbs, you can achieve a great deal of nuance. Indeed, search here for \"COBOL nuance\" for a recent answer for some more detail.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Compare Performance of df.apply and Column Operations in python pandas\r\n                \r\nI would like to know whether performing basic arithmetic operations with columns of a dataframe is faster being done columnwise or via apply. Ad hoc, I would assume that columnwise is faster. But both ways are being considered 'vectorized' operations. So, is ```\ndf.apply```\n comparable fast?\n    ", "Answer": "\r\nWe can just try this out. The example below is demonstrating, that the columnwise operation is (much) faster:\n\n```\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef applywise_duration(df):\n    start_time = datetime.now()\n    df['C'] = df.apply(lambda row: row['A'] + row['B'], axis=1)\n    end_time = datetime.now()\n    duration = end_time - start_time\n    return(duration)\n\ndef columnwise_duration(df):\n    start_time = datetime.now()\n    df['C'] = df['A'] + df['B']\n    end_time = datetime.now()\n    duration = end_time - start_time\n    return(duration)\n\ndf_apply = pd.DataFrame(\n        np.random.randint(0,10000,size=(1000000, 2)),\n        columns=list('AB')\n)\ndf_vector = df_apply.copy()\n\napplywise_duration = applywise_duration(df_apply)\ncolumnwise_duration = columnwise_duration(df_vector)\n\nprint('Duration of apply: ', applywise_duration)\nprint('Duration of columnwise addition: ', columnwise_duration)\nprint('Ratio: ', columnwise_duration / applywise_duration)\nprint('That means, in this case, columnwise addition is %s times faster '\n        'than addition via apply!'\n        % str(applywise_duration / columnwise_duration)\n      )\n```\n\n\nThsis gives the following on my machine:\n\n```\nDuration of apply:  0:00:23.631236\nDuration of columnwise addition:  0:00:00.004234\nRatio:  0.00017916963801639492\nThat means, columnwise addition is 5581.302786962683 times faster than addition via apply!\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is there safer DSL implement in ruby\r\n                \r\nI want to implement a DSL  for external use which should contain basic arithmetic, conditional and loop. But I can not eval ruby directly, it is not safe.\n\nIs there any safer way to eval ruby code or is there scaffold to create a pure plain text DSL. \n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "PHP - Operations with date/time\r\n                \r\nI'm trying with to date/time php functions. I would like to do the basic arithmetic operations(addition, subtraction...). I have read that there are various function to do it.\n\nI'm beginning with DateTime and date_diff.\n\n```\n<?php\n\n$time1 = new DateTime ('08:10:20');\n\n$time2 = new DateTime ('10:02:30');\n\n$result = date_diff($time1, $time2)->format('H:i:s');\n\necho $result;\n\n?>\n```\n\n\nAfter run it, it show:\n\n\n\nPlease Could you help me?\n    ", "Answer": "\r\nBest way will be object oriented:\n\n```\n$time1 = DateTime::createFromFormat('H:i:s', '08:10:20');\n$time2 = DateTime::createFromFormat('H:i:s', '10:02:30');\n\n$interval = $time1->diff($time2);\necho $interval->format('%H:%i:%s'); // print 01:52:10\n```\n\n\nI highly discourage using procedural process :\n\n```\ndate_diff($time1, $time2);\n```\n\n\nUse object oriented as much as possible:\n\n```\n$interval = $time1->diff($time2);\n```\n\n\nI hope it helps\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How can I simplify my repetitive arithmetic functions?\r\n                \r\nI have a class encompassing the calculation for some complicated vector formula. The detailed structure is probably unimportant; it basically calculates the supplied vector formula on a mesh, and stores/manages the result.\nI want to be able to do basic arithmetics with these classes if they have the same spatio-temporal coordinates. My problem is that every arithmetics would need a considrable amount of type check. This results in 5 copies (one for ```\n+,-,*,/,**```\n each) having exactly the same code bar an arithmetic sign in 3 places.\nSo much repeating code in an object oriented language looks suspicious to me. At the same time, I couldn't come up with an elegant solution to simplify it, and I get the feeling there's some method I'm unaware of.\nHow could I extract the repeating code in a best-practice way?\nThe code is below, I marked the 3 differences in ```\n__sub__```\n compared to ```\n__add__```\n:\n```\nclass FieldVector(object):\n    def __init__(self, formula, fieldparams, meshparams, zero_comps=[]):\n        [...]\n\n\n    def is_comparable_to(self, other):\n        \"has the same spatio-temporal dimensions as the other one\"\n        if not other.isinstance(FieldVector):\n            return False\n        return (\n            self.meshparams == other.meshparams and\n            self.framenum == other.framenum and\n            self.fieldparams.tnull == other.fieldparams.tnull and\n            self.fieldparams.tmax == other.fieldparams.tmax\n        )\n\n\n    def _check_comparable(self, other):\n        if not self.is_comparable_to:\n            raise ValueError(\"The two fields have different spatio-temporal coordinates\")\n\n\n\n    def __add__(self, other):\n        new_compvals = {}\n        if isinstance(other, Number):\n            for comp in self.nonzero_comps:\n                new_compvals[comp] = self.get_component(comp) + other\n        elif isinstance(other,FieldVector):\n            self._check_comparable(other)\n            nonzeros = list(set(self.nonzero_comps).union(other.nonzero_comps))\n            for comp in nonzeros:\n                new_compvals[comp] = self.get_component(comp) + other.get_component(comp)\n        else:\n            raise TypeError(f'unsupported operand type(s) for +: {self.__class__} and {other.__class__}')\n\n        return ModifiedFieldVector(self, new_compvals)\n\n\n    def __sub__(self, other):\n        new_compvals = {}\n        if isinstance(other, Number):\n            for comp in self.nonzero_comps:\n                # --- difference 1: - instead of +\n                new_compvals[comp] = self.get_component(comp) - other\n        elif isinstance(other,FieldVector):\n            self._check_comparable(other)\n            nonzeros = list(set(self.nonzero_comps).union(other.nonzero_comps))\n            for comp in nonzeros:\n                # --- difference 2: - instead of +\n                new_compvals[comp] = self.get_component(comp) - other.get_component(comp) \n        else:\n            # --- difference 3: - instead of +\n            raise TypeError(f'unsupported operand type(s) for -: {self.__class__} and {other.__class__}')\n\n        return ModifiedFieldVector(self, new_compvals)\n\n    [... __mul__, __truediv__, __pow__ defined the same way]\n```\n\n    ", "Answer": "\r\nYou could extract the calculation into a private method, and pass it the operator needed.\nMaybe something like this:\n```\nimport operator\n\n...\n        \n        \n    def _xeq(self, other, op):\n        new_compvals = {}\n        if isinstance(other, Number):\n            for comp in self.nonzero_comps:\n                new_compvals[comp] = op(self.get_component(comp), other)\n        elif isinstance(other,FieldVector):\n            self._check_comparable(other)\n            nonzeros = list(set(self.nonzero_comps).union(other.nonzero_comps))\n            for comp in nonzeros:\n                new_compvals[comp] = op(self.get_component(comp), other.get_component(comp))\n        else:\n            raise TypeError(f'unsupported operand type(s) for {op}: {self.__class__} and {other.__class__}')\n        return ModifiedFieldVector(self, new_compvals)        \n\n    def __add__(self, other):\n        return self._xeq(other, operator.add)\n\n    def __sub__(self, other):\n        return self._xeq(other, operator.sub)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Python ioapiTools module can't do basic math operations\r\n                \r\nI've installed ioapiTools, a python module to manage ioapi format files. The module is supposed to handle file and perform operations on them, including basic arithmetic operations. But something is wrong and when I try to, say, multiply an array by a float or an integer, the result is a zero-valued array (both the array and the float/integer are different from zero).\nThe module in question creates a temporary variable using cdms2 according to the following syntax:\n\n```\nimport cdms2 as cdms, cdtime, MV2 as MV, cdutil\nimport numpy as N\n```\n\n\n..........\n\n```\ndef __mul__(self, other):\n    \"\"\"\n    Wrapper around cdms tvariable multiply\n    \"\"\"\n\n    tmpVar = cdms.tvariable.TransientVariable.__mul__(self,other)\n\n    iotmpVar = createVariable(tmpVar, self.ioM, id = self.id,\\\n                              attributes=self.attributes, copyFlag = False)\n\n\n    return iotmpVar\n```\n\n\nBut the variable returns nothing but zeros.\nAny ideas?\n    ", "Answer": "\r\nI tried to use ioapiTools, and latest version i found was 0.3.2 from http://www2-pcmdi.llnl.gov/Members/azubrow/ioapiTools/download-source-file . \nunfortunately, the code doesn't seem to catchup with evolution of cdat, which now recommend using numpy instead of Numeric.  automated translation tool may be resolving some problems, but not all.  For example, the class ```\niovar```\n (defined in ioapiTools.py:2103) now needs to have ```\n_____new_____```\n method, as it is a subclass of numpy masked array (i dont know how things are in Numeric).  With that, i seems to have ```\n_____mul_____```\n working.  i couldn't reproduce your problem though, because i couldn't even get an instance of ```\niovar```\n without having ```\n_____new_____```\n method defined.\n\ni can pass what i got to you if you still need one, but i am sure there are more problems hiding... let me know if you need it though.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Accessing functions which have been placed in a list\r\n                \r\nI'm trying to have the user answer a few basic arithmetic questions.\nI have defined a function (def) for each of Addition, Subtraction, Division but how can i get my program to randomly select on of them each time?\n\nI've tried this but it doesn't work:\n\n```\nimport random\nfrom random import shuffle\n\nnumbers = [1,2,3,4,5,6,7,8,9]\nrand1=random.randint(0,len(numbers)-1)\nrand2=random.randint(0,len(numbers)-1)\nrand3=random.randint(0,len(numbers)-1)\nrand4=random.randint(0,len(numbers)-1)\nrand5=random.randint(0,len(numbers)-1)\nrand6=random.randint(0,len(numbers)-1)\n\ndef Add():\n    print(\"What is\", rand1,\"+\",rand2,\"?\")\n    user=int(input(\"Answer here: \"))\n    if user == rand1+rand2:\n        print(\"Well done\")\n    else:\n        print(\"No\")\n\n\ndef Sub():\n    print(\"What is\", rand3,\"-\",rand4,\"?\")\n    user=int(input(\"Answer here: \"))\n    if user == rand3-rand4:\n        print(\"Well done\")\n    else:\n        print(\"No\")\n\n\ndef Div():\n    print(\"What is\", rand5,\"/\",rand6,\"?\")\n    user=float(input(\"Answer here: \"))\n    if user == float(\"{0:.1f}\".format(rand5/rand6)):\n        print(\"Well done\")\n    else:\n        print(\"No\")       \n\n\nname = input(\"Hi. What is your name?\\n\")\nprint(\"Hello\",name)\n\n\n\nADD=Add()\nSUB=Sub()\nDIV=Div()\n\n\nArith=[ADD,SUB,DIV]\n\nx=1\nwhile x<=10:\n    print(random.choice(Arith))\n    x+=1\n```\n\n    ", "Answer": "\r\n```\nADD=Add()```\n calls ```\nAdd()```\n and sets ```\nADD```\n to the returned value, which is ```\nNone```\n.  Ditto for the next two lines. ```\nArith=[ADD,SUB,DIV]```\n sets ```\nArith```\n to ```\n[None, None, None]```\n.  The direct answer to your question is to get rid of these four lines and change the loop to\n\n```\nfor i in range(10):\n    random.choice((Add, Sub, Div))()\n```\n\n\nThis still has the problem that Div requires people to enter numbers like ```\n0.2857142857142857```\n (on my machine) to be 'correct'.  Here is my version of your program.\n\n```\nfrom operator import add, sub, mul, floordiv\nfrom random import choice\n\ntries = 10\nmaxn = 9\nnumbers = list(range(1, maxn+1))\nops = (('+', add), ('-', sub), ('*', mul), ('//', floordiv))\n\nfor i in range(tries):\n    left = choice(numbers)\n    right = choice(numbers)\n    op = choice(ops)\n    print(\"What is\", left, op[0], right,\"?\")\n    try:\n        user = int(input(\"Answer here: \"))\n    except ValueError:\n        user = None\n    if user == op[1](left, right):\n        print(\"Well done\")\n    else:\n        print(\"No\")\n```\n\n\n(Added in response to question about 'op') op is a tuple (pair) and op[n] selects one of the members of the tuple. The 3 lines containing 'op' could be replaced by the following, which might be clearer.\n\n```\nsymbol, function = choise(ops)\n...\n    print(\"What is\", left, symbol, right,\"?\")\n    ...\n    if user == function(left, right):\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic integer division in PHP is failing - Am clueless\r\n                \r\n(Looks like something's wrong with my environment / system. Am analyzing it currently. Every logical answer was tried and it failed. So, will report back once I have more to share. Thanks for the answers!)\n\nI have written some simple PHP code to calculate the duration between two dates, and do some basic arithmetic, to calculate some percentage value. \n\nI am at a loss of clues on why this is not working! Seems to me that a variable is treated as an integer on one line and a string on another. \n\n```\n$start_DT = new DateTime($startdate); // e.g. 2011-06-07\n$end_DT   = new DateTime($enddate);   // e.g. 2011-06-14\n$today_DT = new DateTime(\"now\");      // 2011-06-09\n\n$duration       = date_diff($end_DT, $start_DT)->d;\n$days_remaining = date_diff($end_DT, $today_DT)->d;\n\necho $days_remaining; // This outputs a value of \"4\" in my specific case\necho $duration;       // This outputs a value of \"7\" for my specific case. \n\n$percentage_dur_complete = $days_remaining / $duration;\n\necho $percentage_dur_complete; // This gives a value of NAN\n\n// This line says that I am dividing my zero, to imply that \n// $duration might be a string. \n$percentage_dur_complete = $days_remaining / (float) $duration; \n```\n\n\nAm I missing something basic? I am a relative newbie (2 months) to PHP. I really hope (with the risk of appearing stupid) that there's something I've missed out. \n\nThanks!\n    ", "Answer": "\r\ntry \n\n```\n$percentage_dur_complete = (int)$days_remaining / (int)$duration;\n```\n\n\nEDIT:\nThis works for me... \n\n```\n<?php \n$startdate = '2011-06-05';\n$enddate = '2011-06-12';\n$today_DT = new DateTime(\"now\");\n$start_DT = new DateTime($startdate); // e.g. 2011-06-07\n$end_DT   = new DateTime($enddate);  \n$duration       = date_diff($end_DT, $start_DT)->d;\n$days_remaining = date_diff($end_DT, $today_DT)->d;\nvar_dump ($duration);\nvar_dump ($days_remaining);\n$percentage_dur_complete = $days_remaining / $duration *100;\necho ($percentage_dur_complete);\n?>\n```\n\n\nIf it doesnt for you, it is most definitely an issue with your PHP installation/version!\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Prolog dynamic arithmetic expression\r\n                \r\nI'm new to Prolog and would like to define a simple predicate which calculates the result depending on which function I choose to use in the arithmetic expression.\n\nSo, this was my idea:\n\n```\noperation(X,Y, Op, Result):-\n  Result is X Op Y.\n```\n\n\nNow, I was expecting this from Prolog: \n\n```\noperation(3,4,'+', X).\nX = 7.\n```\n\n\nBut as you can probably guess, Prolog cannot identify ```\nOp```\n as an arithmetic operation. \nDoes anyone have an idea how this is possible?\n\nI could not find anything on the internet yet, even though it is rather basic, I think.\n\nThanks in advance!\n    ", "Answer": "\r\nAlthough the answers by Tudor and gokhans deliver the wanted result, I think there is a more elegant solution.\n\nPortable solution\n\nThe following will work in most Prolog implementations:\n\n```\noperation(X, Y, Operator, Result):-\n  Goal =.. [Operator, X, Y],\n  Result is Goal.\n```\n\n\nExtended but SWI-Prolog specific solution\n\nSWI-Prolog allows the definition of custom arithmetic functions. The following code extends the above for use with such user-defined functions coming from other modules:\n\n```\n:- meta_predicate(operation(+,+,2,-)).\n\noperation(X, Y, Module:Operator, Result):-\n  Goal =.. [Operator, X, Y],\n  Module:(Result is Goal).\n```\n\n\nNotice that support for user-defined functions is deprecated in SWI-Prolog and does not work in other Prologs that do not have this feature.\n\nUsage examples\n\nSome examples of using these implementations of ```\noperation/4```\n:\n\n```\n?- operation(1, 2, mod, X).\nX = 1.\n\n?- operation(1, 2, //, X).\nX = 0.\n\n?- operation(1, 2, /, X).\nX = 0.5.\n\n?- operation(1, 2, -, X).\nX = -1.\n\n?- operation(1, 2, +, X).\nX = 3.\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Print int128 value from struct\r\n                \r\nI have this int128 that is a tuple of 2 64-bit integers:\n```\nstruct int128 {\n\n    uint64_t    left;\n    int64_t     right;\n};\n```\n\nI know how to make basic arithmetic like multiply, addition and subtraction, but I don't know how to print the current signed value in C.\nCan someone show me please how to do that?\n    ", "Answer": "\r\nAssuming you have the following function:\n```\nint64_t divideRem(struct int128 *number, int64_t divisor);\n```\n\nThat divides number / divisor, setting the division result on number, and returns the remainder of the division.\nYou could use a recursive implementation:\n```\nprintInt128rec(struct int128 *number) {\n  int64_t rem;\n  rem = divideRem(number, 10);\n  if( cmpInt128(number, 0) != 0 ) { /* compares number with 0 */\n    printInt128rec(number);\n  }\n  printf(\"%d\", rem);\n}\n```\n\nYour main print function should copy the number to avoid modifications, and check for negatives:\n```\nprintInt128(struct int128 *number) {\n  struct int128 copy = *number;\n  if( cmpInt128(&copy, 0) < 0 ) {  /* number is negative */\n    printf(\"-\");\n    becomePositive(&copy); /* copy = abs (number ) */\n  }\n  printInt128rec(&copy);\n}\n```\n\nNow you may call printInt128 to print your numbers. Notice that I used several other functions that operates between an int128 integer and an int64. If you know how to make 128 bits arithmetics these should be easier to implement.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic syntax checking algorithm for strings in arithmetic/ propositional logic/ Boolean algebra?\r\n                \r\nI would like to write a simple syntax-checking algorithm for strings in Boolean algebra, that will return true if & only if the string you pass it is well-formed. \n\nIn English, you could define the set of well-formed Boolean algebra formulae as follows: A letter, the integer 0, and the integer 1 are all well-formed formulae; the set of well-formed formulae is closed under negation (', unary, postfix) disjunction (+, binary, infix) and conjunction(*, binary, infix); and anything not well-formed by the two foregoing clauses is not well-formed.\n\nSo, binary connectives need to have a well-formed formula as an argument on either side, unary connectives must have a single well-formed argument, parentheses should be nested correctly... and so on. \n\nI get the general idea of what needs to happen, but I'm unsure of how to convert it into an algorithm. Can anyone help?\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Annualised timeseries over multiple years\r\n                \r\nI have a data set that  looks like this\n\n```\n2012-01-01     0.1\n2012-01-02     0.2\n2012-01-03     1.2\n....\n2016-01-01     0.9\n```\n\n\nInstead of calculating a basic arithmetic mean I would like to calculate an annualised mean over the whole time period. Is there an elegant way of doing this in R?\n\nCurrently my data is stored as a R zoo object.  \n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "prolog treats function call as structure definition\r\n                \r\nI have an assignment to define basic arithmetic as incrementations of zero (i.e, ```\nadd(inc(inc(inc(zero))),inc(inc(zero)),Z)```\n gives ```\nZ = inc(inc(inc(inc(inc(zero)))))```\n).  \n\nadd is implemented as  \n\n```\nadd(zero, Y, Z) :- Z = Y.```\n\n```\nadd(inc(X), Y, Z) :- add(X, Y, V), Z = inc(V).```\n\n\nand i'm trying to implement mul as  \n\n```\nmul(zero, Y, Z) :- Z = zero.```\n\n```\nmul(inc(zero), Y, Z) :- Z = Y.```\n\n```\nmul(inc(X), Y, Z) :- mul(X,Y,V), Z = add(Y,Y,Z).```\n  \n\nbut this treats ```\nadd(Y,Y,Z)```\n as a structure definition instead of the predicate add and just returns something like ```\nadd(add(inc(inc(zero)), inc(zero)), add(inc(zero),(inc(zero)))```\n\ndoes anyone know how to make it treat add as a predicate?\n    ", "Answer": "\r\nYes. Without looking into the specifics of you code, in general, just use it:\n\n```\nmul(inc(X), Y, Z) :- mul(X,Y,V), add(Y,Y,Z).\n```\n\n\nIf this expresses ```\n(x+1)*y=z```\n as ```\nx*y+y=z```\n, it should have been\n\n```\nmul(inc(X), Y, Z) :- mul(X,Y,V), add(V,Y,Z).\n```\n\n\ninstead. Without backtracking, Prolog is a lot like a single-assignment functional language with code in A-normal form, where all interim values are explicitly named.\n\nThe unification ```\nZ = add(Y,Y,Z)```\n indeed treats both its arguments as Prolog terms. One is a logical variable, the other a compound term.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Implementing Go interfaces using cobra commands\r\n                \r\nI have written a program to calculate basic arithmetic functions using interfaces in Go language.\n\nI want to do the same using COBRA commands. Here is some Go code using interfaces.\n\nI have also implemented the arithmetic functions using ```\ncobra```\n commands \nwithout the interfaces.\n\nthis is addition using cobra commands without using the concept of interfaces, I want to implement the same using cobra commands.\n\n```\npackage cmd\n\n    import (\n        \"fmt\"\n\n        \"github.com/spf13/cobra\"\n\n        \"os\"\n\n        \"strconv\"\n    )\n\n    func addCmd() *cobra.Command {\n        var input int\n        c := &cobra.Command{\n            Use:   \"add\",\n            Short: \"Addition value of given Numbers\",\n\n            Run: func(cmd *cobra.Command, args []string) {\n                if len(args) != input {\n                    fmt.Println(fmt.Sprintf(\"You need to provide %v number to sum up\", input))\n                    os.Exit(1)\n                }\n                numbers := make([]int, input)\n                for i := 0; i < input; i++ {\n                    num, _ := strconv.Atoi(args[i])\n                    numbers[i] = num\n                }\n                sum := 0\n                for _, numbers := range numbers {\n                    sum += numbers\n                }\n                fmt.Println(\"The Sum :\", sum)\n            },\n        }\n        c.Flags().IntVar(&input, \"input\", 0, \"Number of input\")\n        return c\n    }\n\n    func init() {\n\n        cmd := addCmd()\n        RootCmd.AddCommand(cmd)\n\n    }\n```\n\n\nCan someone help me out with the interfaces and the cobra commands.\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is there a command line calculator for byte calculations?\r\n                \r\nIs there a command line calculator for linux where I can do the following;\n```\n calc 560kB/12233kB\n```\n\nfor example. Basic arithmetic desired and answers given as a decimal (in the case above) or with the appropriate SI prefix (kB, B, MB, GB, etc.).\nCould ```\nbc```\n do the trick somehow?\n\nSolution\nGNU Units does what I wanted to.\n    ", "Answer": "\r\nYou can abuse ```\nbc```\n for this if you remember that ```\nnumber unit```\n actually is a shorthand for ```\nnumber * unit```\n. One limitation of ```\nbc```\n is that it only allows lower-case variables:\n```\nb=1\nkb=1024\nmb=1024*kb\n...\n\nscale=20\n(560*kb)/(12233*kb)\n.04577781410937627728\n```\n\nThe next thing that I could think of is Python together with the units package.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to perform arithmetic on two class instances (with float as a subclass) which return a class instance of the same type? e.g. Speed(2) + Speed(2)\r\n                \r\nHow to perform arithmetic on classes with a basic type as a subclass, where the result is of the same class?\n\nFor example, running:\n\n```\nclass Speed(float):\n\n    def __add__(self, speed):\n        if isinstance(speed, Speed):\n            return Speed(self + speed)\n        else:\n            raise NotImplementedError()\n\n    def __repr__(self):\n        return f'Speed({self} mph)'\n\nSpeed(2) + Speed(2)\n```\n\n\nResults in the below instead of the expected ```\nSpeed(4)```\n:\n\n```\nRecursionError                            Traceback (most recent call last)\n<ipython-input-13-ce1336693f4a> in <module>\n----> 1 Speed(2) + Speed(2)\n\n<ipython-input-11-f161664be9bc> in __add__(self, speed)\n      3     def __add__(self, speed):\n      4         if isinstance(speed, Speed):\n----> 5             return Speed(self + speed)\n      6         else:\n      7             raise NotImplementedError()\n\n... last 1 frames repeated, from the frame below ...\n\n<ipython-input-11-f161664be9bc> in __add__(self, speed)\n      3     def __add__(self, speed):\n      4         if isinstance(speed, Speed):\n----> 5             return Speed(self + speed)\n      6         else:\n      7             raise NotImplementedError()\n\nRecursionError: maximum recursion depth exceeded while calling a Python object\n```\n\n\nHow to correctly perform arithmetic on such a class?\n    ", "Answer": "\r\nYou need to convert both ```\nself```\n and ```\nspeed```\n to float before handing it to the ```\n+```\n operator, because otherwise it will try to call the method again on one of the ```\nSpeed```\n instances. This will happen recursively without bail condition and eventually err out as it did in your case.\n\n```\nreturn Speed(float(self) + float(speed))\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Yacc and Lex error in parsing expressions which use binary operators\r\n                \r\nI am new to Lex and Yacc and I am trying to create a parser for a simple language which allows for basic arithmetic and equality expressions. Though I have some of it working, I am encountering errors when trying to parse expressions involving binary operations. Here is my ```\n.y```\n file:\n\n```\n%{\n   #include <stdlib.h>\n   #include <stdio.h>\n%}\n\n%token  NUMBER\n%token  HOME\n%token  PU\n%token  PD\n%token  FD\n%token  BK\n%token  RT\n%token  LT\n\n%left '+' '-'\n%left '=' '<' '>'\n%nonassoc UMINUS\n\n\n%%\n\nS       :       statement S                 { printf(\"S -> stmt S\\n\"); }\n        |                                   { printf(\"S -> \\n\"); }\n;\n\nstatement :     HOME                        { printf(\"stmt -> HOME\\n\"); }\n        |       PD                          { printf(\"stmt -> PD\\n\"); }\n        |       PU                          { printf(\"stmt -> PU\\n\"); }\n        |       FD expression               { printf(\"stmt -> FD expr\\n\"); }\n        |       BK expression               { printf(\"stmt -> BK expr\\n\"); }\n        |       RT expression               { printf(\"stmt -> RT expr\\n\"); }\n        |       LT expression               { printf(\"stmt -> LT expr\\n\"); }\n;\n\nexpression :    expression '+' expression   { printf(\"expr -> expr + expr\\n\"); }\n         |      expression '-' expression   { printf(\"expr -> expr - expr\\n\"); }\n         |      expression '>' expression   { printf(\"expr -> expr > expr\\n\"); }\n         |      expression '<' expression   { printf(\"expr -> expr < expr\\n\"); }\n         |      expression '=' expression   { printf(\"expr -> expr = expr\\n\"); }\n         |      '(' expression ')'          { printf(\"expr -> (expr)\\n\"); }\n         |      '-' expression %prec UMINUS { printf(\"expr -> -expr\\n\"); }\n         |      NUMBER                      { printf(\"expr -> number\\n\"); }\n;\n\n%%\n\nint yyerror(char *s)\n{\n   fprintf (stderr, \"%s\\n\", s);\n   return 0;\n}\n\nint main()\n{\n   yyparse();\n}\n```\n\n\nAnd here is my ```\n.l```\n file for Lex:\n\n```\n%{\n   #include \"testYacc.h\"\n%}\n\nnumber [0-9]+\n\n%%\n[ ]             { /* skip blanks */ }\n{number}        { sscanf(yytext, \"%d\", &yylval); return NUMBER; }\nhome            { return HOME; }\npu              { return PU; }\npd              { return PD; }\nfd              { return FD; }\nbk              { return BK; }\nrt              { return RT; }\nlt              { return LT; }\n\n%%\n```\n\n\nWhen I try to enter an arithmetic expression on the command-line for evaluation, it results in the following error:\n\n```\nhome\nstmt -> HOME\n\npu\nstmt -> PU\n\nfd 10\nexpr -> number\n\nfd 10\nstmt -> FD expr\nexpr -> number\n\nfd (10 + 10)\nstmt -> FD expr\n(expr -> number\n+stmt -> FD expr\nS ->\nS -> stmt S\nS -> stmt S\nS -> stmt S\nS -> stmt S\nS -> stmt S\nsyntax error\n```\n\n    ", "Answer": "\r\nYour lexer lacks rules to match and return tokens such as ```\n'+'```\n and ```\n'*'```\n, so if there are any in your input, it will just echo them and discard them.  This is what happens when you enter ```\nfd (10 + 10)```\n -- the lexer returns the tokens ```\nFD```\n ```\nNUMBER```\n ```\nNUMBER```\n while ```\n+```\n and ```\n(```\n get echoed to stdout.  The parser then gives a syntax error.\n\nYou want to add a rule to return these single character tokens.  The easiest is to just add a single rule to your .l file at the end:\n\n```\n.               { return *yytext; }\n```\n\n\nwhich matches any single character.\n\nNote that this does NOT match a ```\n\\n```\n (newline), so newlines in your input will still be echoed and ignored.  You might want to add them (and tabs and carriage returns) to your skip blanks rule:\n\n```\n[ \\t\\r\\n]       { /* skip blanks */ }\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Strange Ocaml type error\r\n                \r\nI'm writing an ocaml program to process basic arithmetic commands and symbolic math commands.  However, the code is currently giving me a strange type error.  I feel like this might arise because there are two different variants that use the binop type, but I'm not sure.\n\n```\nopen Core.Std\n\ntype binop =\n    |Add\n    |Subtract\n    |Multiply\n    |Divide\n\nlet apply_binop_int a b = function\n    |Add -> a + b\n    |Subtract -> a - b\n    |Multiply -> a * b\n    |Divide -> a / b\n\nlet rec apply_binop a b op  =\n    match (a,b) with\n    |ExprTerm (Const a), ExprTerm (Const b) -> apply_binop_int a b op\n    |BinopExpr (op1,a1,b1),_ -> apply_binop (apply_binop a1 b1 op1) b op\n    |_,BinopExpr (op1,a1,b1) -> apply_binop a (apply_binop a1 b1 op1) op\n\nlet precedence = function\n    |Add |Subtract -> 0\n    |Multiply |Divide -> 1\n\ntype term  =\n    |Const of int\n    |Var of string\n\ntype token =\n    |Term of term\n    |Operator of binop\n\ntype expr =\n    |ExprTerm of term\n    |BinopExpr of binop * expr * expr\n\nlet operator_of_string = function\n    |\"+\" -> Add\n    |\"-\" -> Subtract\n    |\"*\" -> Multiply\n    |\"/\" -> Divide\n    |_   -> failwith \"Unidentified operator\"\n\nlet token_of_string s =\n    try Term (Const (int_of_string s))with\n    |_ -> Operator (operator_of_string s)\n\nlet tokens s =\n    String.split ~on:' ' s\n    |> List.map ~f:token_of_string\n\nlet process_operator ops exprs =\n    match (ops,exprs) with\n    |op::op_tl,b::a::expr_tl -> op_tl,(BinopExpr (op,a,b))::expr_tl\n    |_,_ -> failwith \"Malformed expression\"\n\nlet rec pop_stack (ops,exprs) =\n    match (ops,exprs) with\n    |_::_, _::_::_ -> pop_stack (process_operator ops exprs)\n    |_,[x] -> x\n    |_,_ -> failwith \"Malformed expression\"\n\nlet build_expr ts =\n    let rec aux ops exprs toks =\n        match (toks,ops) with\n        |Term t::tl,_ -> aux ops ((ExprTerm t)::exprs) tl\n        |Operator op2::tl,op::_ when precedence op >= precedence op2 ->\n                            let ops,exprs = process_operator ops exprs in\n                            aux ops exprs toks\n        |Operator op::tl,_ -> aux (op::ops) exprs tl\n        |[],_ -> pop_stack (ops,exprs) in\n    aux [] [] ts\n\nlet expr s = build_expr (tokens s)\n\nlet rec eval = function\n    |BinopExpr (op,a,b) ->\n                        apply_binop (eval a) (eval b) op\n    |ExprTerm t -> t\n```\n\n\nThe error that I'm getting:\n\n```\nutop # #use \"calc.ml\";;\ntype binop = Add | Subtract | Multiply | Divide                                         \nval apply_binop_int : int -> int -> binop -> int = <fun>                               \nFile \"calc.ml\", line 18, characters 63-66:\nError: This expression has type binop/1405061 but an expression was expected of type             \nbinop/1740597\n```\n\n    ", "Answer": "\r\nOCaml convention is to always define the types, then define the functions that operate on those types. Also, I like to define my types as mutually recursive by default, as it makes the code a bit easier to read:\n\n```\ntype binop =\n    Add of term * term\n  | Subtract of term * term\n  | Multiply of term * term\n  | Divide of term * term\nand  term  =\n    Const of int\n  | Var of string;;\n```\n\n\nivg is correct, OCaml only allows you to use functions and types after they've been defined in the program, but as the example above shows, using ```\nand```\n in your definitions can override this.\n\nAs for this error:\n\n```\nError: This expression has type binop/1405061 but an expression was expected of type             \n```\n\n\nbinop/1740597\n\nThis is actually a side effect of OCaml's immutability: when you reload a file on the TopLevel, you aren't actually changing any of the bindings established the first time you loaded the file, you're just creating new ones. The following example demonstrates this property of OCaml:\n\n```\nutop # let x = 7;;\nval x : int = 7\nutop # let arg_times_7 arg = arg * x;;\nval arg_times_7 : int -> int = <fun>\nutop # arg_times_7 6;;\n- : int = 42\nutop # let x = 6912;;\nval x : int = 6912\nutop # arg_times_7 6;;\n- : int = 42\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Prolog simple addition\r\n                \r\nI am teaching myself Prolog (using SWI on linux), and I am trying to learn basic arithmetic. Take a look at the example program below.\n\nWhen I attempt to ask any of the following thee questions Prolog tells me the procedure total1/2 is undefined.\n\nQuestion Statements:\n\n```\ntotal1('prawn crackers', COST).\ntotal2('prawn crackers', 'fried rice',COST).\ntotal3('spring roll', 'chow mien','boiled rice',COST).\n```\n\n\nProlog Program:\n\n```\ndish('prawn crackers', 1).\ndish('boiled rice',1).\ndish('fried rice', 2).\ndish('chow mein',3).\ndish('chop suey',4).\ndish('spring roll',2).\n\n\ntotal1(X,T) :- dish(X,A) T is A.\ntotal2(X,Y,T) :-  dish(X,A), dish(Y,B) T is A + B.\ntotal3(X,Y,Z,T) :- dish(X,A), dish(Y,B), dish(Z,C) T is A + B + c.\n```\n\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why dividing a float by a power of 10 is less accurate than typing the number directly?\r\n                \r\nWhen I run\n\n```\nprintf(\"%.8f\\n\", 971090899.9008999);\nprintf(\"%.8f\\n\", 9710908999008999.0 / 10000000.0);\n```\n\n\nI get\n\n```\n971090899.90089989\n971090899.90089977\n```\n\n\nI know why neither is exact, but what I don't understand is why doesn't the second match the first?\nI thought basic arithmetic operations (+ - * /) were always as accurate as possible...\nIsn't the first number a more accurate result of the division than the second?\n    ", "Answer": "\r\nJudging from the numbers you're using and based on the standard IEEE 754 floating point standard, it seems the left hand side of the division is too large to be completely encompassed in the mantissa (significand) of a 64-bit double.\n\nYou've got 52 bits worth of pure integer representation before you start bleeding precision. ```\n9710908999008999```\n has ~54 bits in its representation, so it does not fit properly -- thus, the truncation and approximation begins and your end numbers get all finagled.\n\nEDIT: As was pointed out, the first number that has no mathematical operations done on it doesn't fit either. But, since you're doing extra math on the second one, you're introducing extra rounding errors not present with the first number. So you'll have to take that into consideration too!\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Python rounding to nearest integer without asking [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        What is the difference between '/' and '//' when used for division?\r\n                            \r\n                                (16 answers)\r\n                            \r\n                    \r\n                Closed 4 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI am just trying to compute some basic arithmetic, but python won't stop rounding to the nearest integer. \n\nFor example, when I input \n\n\r\n\r\n```\nprint float(3 * 1/(1*2) + 1)```\n\r\n\r\n\r\n\n\nit outputs 2.0 rather than 2.5; I can't figure out how to keep it from rounding like this. I would appreciate any help you can provide.\n    ", "Answer": "\r\nAdd a ```\ndot (.)```\n to indicate floating point numbers, or indicate number as float (```\nfloat(1)```\n) \n\n```\n>>> print (3 * 1/(1*2) + 1)\n2.0\n>>> print (3 * 1./(1*2) + 1)\n2.5\n>>> print (3 * float(1)/(1*2) + 1)\n2.5\n```\n\n\n\n  In Python 3, ```\n/```\n is float division\n  \n  In Python 2, ```\n/```\n is integer division (assuming int inputs)\n  \n  In both Python 2 and 3, ```\n//```\n is integer division\n  \n  (To get float division in Python 2 requires either of the operands to be\n  a float, either as ```\n20.```\n or ```\nfloat(20)```\n)\n\n\nNOTE:\n\n\n  in Python 2.2 - 2.7 you can do ```\nfrom __future__ import division```\n to\n  get Python 3's behavior\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why dividing a float by a power of 10 is less accurate than typing the number directly?\r\n                \r\nWhen I run\n\n```\nprintf(\"%.8f\\n\", 971090899.9008999);\nprintf(\"%.8f\\n\", 9710908999008999.0 / 10000000.0);\n```\n\n\nI get\n\n```\n971090899.90089989\n971090899.90089977\n```\n\n\nI know why neither is exact, but what I don't understand is why doesn't the second match the first?\nI thought basic arithmetic operations (+ - * /) were always as accurate as possible...\nIsn't the first number a more accurate result of the division than the second?\n    ", "Answer": "\r\nJudging from the numbers you're using and based on the standard IEEE 754 floating point standard, it seems the left hand side of the division is too large to be completely encompassed in the mantissa (significand) of a 64-bit double.\n\nYou've got 52 bits worth of pure integer representation before you start bleeding precision. ```\n9710908999008999```\n has ~54 bits in its representation, so it does not fit properly -- thus, the truncation and approximation begins and your end numbers get all finagled.\n\nEDIT: As was pointed out, the first number that has no mathematical operations done on it doesn't fit either. But, since you're doing extra math on the second one, you're introducing extra rounding errors not present with the first number. So you'll have to take that into consideration too!\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Generate a Random Number That Evenly Divides into Another in C#\r\n                \r\nI am making a quiz that quizzes a user on basic arithmetic skills. The problem I have is that I don't want to be able to generate a division question that allows real numbers. I want all answers to have integer answers.\n\nHow can I randomly generate a number between p and q that evenly divides into n?\n    ", "Answer": "\r\nThe idea is to generate two integers ```\na and n```\n, and then return ```\na```\n and ```\nc = a * n```\n. The answerer should guess what is ```\nn```\n and beware of division by zero!\n\nSomething like this will do:\n\n```\npublic KeyValuePair<int, int> GenerateIntDivisibleNoPair(int p, int q) {\n    if (p <= 0 || q <= 0 || q <= p)\n        throw Exception(); //for simplification of idea\n    Random rand = new Random();\n    int a = rand.Next(p, q + 1); //cannot be zero! note: maxValue put as q + 1 to include q\n    int n = rand.Next(p, q + 1); //cannot be zero! note: maxValue put as q + 1 to include q\n    return new KeyValuePair<int, int>(a, a * n);\n}\n```\n\n\nYou use it like this:\n\n```\nKeyValuePair<int, int> val = GenerateIntDivisibleNoPair(1, 101);\nConsole.WriteLine(\"What is \" + val.Value.ToString() + \" divide by \" + val.Key.ToString() + \"?\");\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Prolog recursive arithmetic\r\n                \r\nI am very new to prolog and am having some issues understanding some basic arithmetic. I want to create a functor that will recursively multiply. IE: 3*4 = 3+3+3+3 = 12.\n\nI put it through SWIPL's trace command and it fails when decrementing Count.\n\nHere is the code I have so far but it does not work. \n\n```\nmultn(_,0,0).\nmultn(_, Count ,Return) :- Count is Count-1,\n                           Return is 0, \n                           multn(_,Count,Return), \n                           Return is Return + _.\n```\n\n\nEDIT: made some new changes based on what you said about the functionality of \"is\". \n\n```\nmultn(_, Count ,Return) :- Count1 is (Count-1), \n                           multn(_,Count1,Return1), \n                           Return is (Return1 + _).\n```\n\n\nNow it is making it all the way down the recursion chain to the base case and when it starts it way back up it fails out trying to todo Return is (Return1+ _). It seems to be changing the _ variable. here it my trace:\n\n```\n[trace]  ?- multn(3,2,X).\n   Call:  (6) multn(3, 2, _G388) ? creep\n^  Call:  (7) _L142 is 2+ -1 ? creep\n^  Exit:  (7) 1 is 2+ -1 ? creep\n   Call:  (7) multn(_L160, 1, _L143) ? creep\n^  Call:  (8) _L163 is 1+ -1 ? creep\n^  Exit:  (8) 0 is 1+ -1 ? creep\n   Call:  (8) multn(_L181, 0, _L164) ? creep\n   Exit:  (8) multn(_L181, 0, 0) ? creep\n^  Call:  (8) _L143 is 0+_G461 ? creep\nERROR: is/2: Arguments are not sufficiently instantiated\n^  Exception: (8) _L143 is 0+_G461 ? creep\n   Exception: (7) multn(_L160, 1, _L143) ? creep\n   Exception: (6) multn(3, 2, _G388) ? creep\n```\n\n\nLast EDIT: Finally figured it out, using _ was causing the weird change in value. Thanks for your help.\n    ", "Answer": "\r\nIt looks like your don't understand how Prolog works.\n\nThe key thing to understand is that both ```\nCount```\n in ```\nCount is Count-1```\n are the same, they must have the same value. It's like variables in algebra - all Xs in an equation means the same value. So ```\nCount is Count-1```\n will always fail.\n\nSimilar problems with ```\nReturn```\n variable.\n\nIn Prolog you have to introduce new variables to do what you intended, like ```\nNewCount is Count-1```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why is non-linear real arithmetic decidable while non-linear integer arithmetic is not?\r\n                \r\nI understand that nonlinear integer arithmetic is basically Hilbert's tenth problem and is proven to be undecidable. However the Z3 solver is able to provide a complete solution for nonlinear real arithmetic. I was just curious what is the fundamental difference between the two problems so that there is a definitive algorithm for nonlinear real arithmetic?\n\nSeems like there is a paper on Z3's implementation of nonlinear polynomial real arithmetic. I do not have a strong formal methods/math background. Any intuition behind this issue is appreciated!\n    ", "Answer": "\r\nConsidering that you know that nonlinear real arithmetic is decidable while nonlinear integer arithmetic is not, the best you can hope for is better intuition and some examples to help you understand how different QF_NRA is from QF_NIA.\n\nI give a few example in this answer.  I'll give one more: consider the equation y = x2.  If x and y are real numbers, then y is plus or minus the square-root of x (assuming x is non-negative).  If however you say x and y have to be integers, then y = x2 may or may not have a solution, depending on the value of x.\n\nThe fundamental fact is that there are a lot of math problems that are very easy to solve if your variables are real numbers, but much more difficult if your variables have to be integers, and in may cases they may not even have a solution.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Accessing entry of Array of function pointers, within a class C++\r\n                \r\nI wrote a simple class that performs basic arithmetic operations using a method that receives an index and two values to compute.\nThe index indicates which operation to perform in a table that contains pointers to functions.\nHere is my code:\n```\n#include <iostream>\n\nusing namespace std;\n\nclass TArith\n{\npublic:\n\n    static const int  DIV_FACTOR = 1000;\n\n    typedef int (TArith::*TArithActionFunc)(int,int);\n\n    struct TAction\n    {\n        enum Values\n        {\n            Add,\n            Sub,\n            count,\n        };\n    };\n\n    int action(TAction::Values a_actionIdx, int a_A, int  a_B)\n    {\n        return ( this->*m_actionFcns[a_actionIdx] )(a_A,a_B);\n    }\n\nprivate:\n    int add(int a_A, int a_B)\n    {\n        return a_A + a_B ; \n    }\n\n    int sub(int a_A, int a_B)\n    {\n        return a_A - a_B ; \n    }\n\n    static TArithActionFunc m_actionFcns[TAction::count];\n    int m_a;\n    int m_b;\n};\n\nTArith:: TArithActionFunc  TArith:: m_actionFcns[TAction::count] = {\n    TArith::add,\n    TArith::sub\n};\n\nvoid main(void)\n{\n    TArith arithObj;\n    int a=100;\n    int b=50;\n\n    for(int i = 0 ; i <TArith::TAction::count ; ++i)\n    {    \n        cout<<arithObj.action( (TArith::TAction::Values)i,a,b )<<endl;\n    }\n    cout<<endl;\n}\n```\n\nCompiler says:\n```\n'TArith::add': function call missing argument list; use '&TArith::add' to create a pointer to member\n'TArith::sub': function call missing argument list; use '&TArith::sub' to create a pointer to member\n```\n\nwhy do I need to use the & symbol?\n    ", "Answer": "\r\n```\nTArith:: TArithActionFunc  TArith:: m_actionFcns[TAction::count] = {\n    TArith::add,\n    TArith::sub,\n    TArith::mul,\n    TArith::div\n};\n```\n\n\nCorrect syntax for a pointer to a member function ```\nf```\n of a class ```\nC```\n is ```\n&C::f```\n. You're missing the leading ```\n&```\n.\n\nTry:\n\n```\nTArith:: TArithActionFunc  TArith:: m_actionFcns[TAction::count] = {\n    &TArith::add,\n    &TArith::sub,\n    &TArith::mul,\n    &TArith::div\n};\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "python numpy vectorize an array of object instances\r\n                \r\nI'd like to encapsulate my calc function and all its parameters inside an object, but vectorize the execution for millions of objects much like how numpy would do it. Any suggestions?\n\nthe calculation is still basic arithmetic which numpy should be able to vectorize. \n\nExample code:\n\n```\nimport numpy as np\nmyarray = np.random.rand(3, 10000000)\n\n############################# This works fine: FAST ###################################\n\ndef calc(a,b,c):\n    return (a+b/c)**b/a\n\n\nres1 = calc(*myarray)  #0.7 seconds\n\n############################# What I'd like to do (unsuccessfully): SLOW ###################################\n\nclass MyClass():\n    __slots__ = ['a','b','c']\n\n    def __init__(self, a,b,c):\n        self.a, self.b, self.c = a,b,c\n\n    def calc(self):\n        return (self.a + self.b / self.c) ** self.b / self.a \n\ndef classCalc(myClass:MyClass):\n    return myClass.calc()\n\nvectorizedClassCalc = np.vectorize(classCalc)\nmyobjects = np.array([MyClass(*args) for args in myarray.transpose()])\n\n\nres2 = vectorizedClassCalc(myobjects) #8 seconds no different from a list comprehension\nres3 = [obj.calc() for obj in myobjects] #7.5 seconds \n```\n\n\nperhaps pandas has additional features?\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Linux shell script Date arithmetic\r\n                \r\nI have a shell script \n\n```\n #!/bin/bash\nSTART=$(date +%s)\necho \"  Start| $START \"\n# do something\n# start your script work here\n#  \n# your logic ends here\nEND=$(date +%s)\necho \"  End|  $END \"\nDIFF=$(( $END-$START ))\necho \"  Diff in seconds|\"  $DIFF\n```\n\n\nStill getting this error\n  Start| 1349769151\n  End|  1349769151\n \")49769151rror: invalid arithmetic operator (error token is \"\n\nI know it is basic, so I have been searched and debug for two days already.\nBut still gets nothing works on this.\nPlz help!\n    ", "Answer": "\r\nThe START and END are not in date format which can't be subtracted. If you just want to measure the execution time then use only %s which will give you difference in seconds.\n\n```\nSTART=$(date +%s)\necho \"  Start| $START \"\n# do something\n# start your script work here\n#  \n# your logic ends here\nEND=$(date +%s)\necho \"  End|  $END \"\nDIFF=$(( $END-$START ))\necho \"Diff in seconds:\" $DIFF\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "What's the absolute minimum a programmer should know about binary numbers and arithmetic? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question is opinion-based. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it can be answered with facts and citations by editing this post.\r\n                \r\n                    \r\n                        Closed 2 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nAlthough I know the basic concepts of binary representation, I have never really written any code that uses binary arithmetic and operations.\n\nI want to know\n\n\nWhat are the basic concepts any\nprogrammer should know about binary\nnumbers and arithmetic ? , and\nIn what \"practical\" ways can binary\noperations be used in programming. I\nhave seen some \"cool\" uses of shift\noperators and XOR etc. but are there\nsome typical problems where using binary\noperations is an obvious choice.\n\n\nPlease give pointers to some good reference material. \n    ", "Answer": "\r\nIf you are developing lower-level code, it is critical that you understand the binary representation of various types. You will find this particularly useful if you are developing embedded applications or if you are dealing with low-level transmission or storage of data. \n\nThat being said, I also believe that understanding how things work at a low level is useful even if you are working at much higher levels of abstraction. I have found, for example, that my ability to develop efficient code is improved by understanding how things are represented and manipulated at a low level. I have also found such understanding useful in working with debuggers.\n\nHere is a short-list of binary representation topics for study:\n\n\nnumbering systems (binary, hex, octal, decimal, ...)\nbinary data organization (bits, nibbles, bytes, words, ...)\nbinary arithmetic\nother binary operations (AND,OR,XOR,NOT,SHL,SHR,ROL,ROR,...)\ntype representation (boolean,integer,float,struct,...)\nbit fields and packed data\n\n\nFinally...here is a nice set of Bit Twiddling Hacks you might find useful.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is Swift the only (mainstream) language with overflow checking arithmetic?\r\n                \r\nI started studying Swift language today. I've leaned up to basic and advanced operators.\n\nTo me, the fact that all the default arithmetic operations in Swift are checked against overflow/underflow is a little surprising.\n\nIs there any other mainstream language with this feature?\n\nIs Swift runtime's arithmetic could be sub-optimal (performance wise) because of this?\n\nWhy did they include this feature in the language, and if it's good, why others don't already use it?\n    ", "Answer": "\r\nPerformance\n\nThere's necessarily a cost to that kind of verification. At the lowest level, the operation which causes the overflow takes a single CPU operation. Checking that there was or not and overflow during this operation requires at least one more operation (e.g. using jump operations (branching) which consider the overflow flag).\n\nNote that, depending on the actual code, there are probably a good number of optimizations which can be done during compilation to avoid making the time consuming check on every operation (simple example: 32-bit 0 + any short cannot overflow).\n\nSo, yes, it's sub-optimal to include the check.\n\nWhy\n\nSome languages include this kind of check to remove the burden from the programmer. If the programmer doesn't have to check himself, he can't make the mistake of not checking. If programmers in a given language can't make a certain class of mistakes, the language's reputation goes up a little bit regarding it's reliability.\n\nAs to why some other languages don't include the checks... Different language designers have different philosophies. For some it's important to allow programmers to create programs which are as fast as they theoretically can be. For some others, it's more important to help programmers code correct and robust programs. For example, C/C++ have the reputation of rendering super fast programs, while Ada has the reputation of not even compiling until your program is most probably correct.\n\nSometimes it's a matter of philosophy, sometimes it's a matter of needs. On small micro-controllers (little memory, slow clock), you don't want to have too many automatic checks because it may significantly slow down the program's execution.\n\nOther languages\n\nHere's a small table about the different ways languages deal (or not) with integer overflow. Some languages leave it to the programmer. Some raise an exception. Some will change the data type to accept the result without error (e.g.: int to long, long to BigInteger).\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to not repeat code in calculation functions?\r\n                \r\nI have made a simple program that performs basic arithmetic operations on all the elements of a given array. But the problem is that the code is very repetitive and it's not a good practice to write repeated code and I can't come up with a solution to this problem.\nHow can we minimize code repetition in this program?\n```\nint add(int numcount, int numarr[]){\n    int total = numarr[0];\n\n    // add all the numbers in a array\n    for (int i = 1; i < numcount; i++){\n        total += numarr[i];\n    }\n\n    return total;\n}\n\nint sub(int numcount, int numarr[]) {\n    int total = numarr[0];\n\n    // subtract all the numbers in array\n    for (int i = 1; i < numcount; i++){\n        total -= numarr[i];\n    }\n\n    return total;\n}\n\nint mul(int numcount, int numarr[]) {\n    int total = numarr[0];\n\n    // multiply all the numbers in array\n    for (int i = 1; i < numcount; i++){\n        total *= numarr[i];\n    }\n\n    return total;\n}\n\nint main(int argc, char* argv[]){\n    const int n = 5;\n    int arr[n] = {1, 2, 3, 4, 5};\n    \n    cout << \"Addition: \" << add(n, arr) << endl;\n    cout << \"Subtraction: \" << sub(n, arr) << endl;\n    cout << \"Multiplication: \" << mul(n, arr) << endl;\n}\n```\n\n    ", "Answer": "\r\n\nHow can we minimize code repetition in this program?\n\nGenerically, by identifying the repeated structure and seeing whether we can either abstract it out, or find an existing name for it.\n\nThe repeated structure is just setting the running result to the first element of a container, and using a binary function to combine it with each subsequent element in turn.\nTake a look at the Standard Algorithms library and see if any existing function looks similar\n```\nstd::accumulate```\n can do what we need, without any extra arguments for the ```\nadd```\n, and with just the appropriate operator function object for the others\n\nSo, you can trivially write\n```\nint add(int numcount, int numarr[]){\n    return std::accumulate(numarr, numarr+numcount, 0);\n}\n\n// OK, your sub isn't actually trivial\nint sub(int numcount, int numarr[]){\n    return std::accumulate(numarr+1, numarr+numcount, numarr[0],\n                           std::minus<int>{});\n}\n\n// could also be this - honestly it's a little hairy\n// and making it behave well with an empty array\n// requires an extra check. Yuck.\nint sub2(int numcount, int numarr[]){\n    return numarr[0] - add(numcount-1, numarr+1);\n}\n```\n\netc.\nIt would be slightly nicer to switch to using ```\nstd::array```\n, or to use ranges if you're allowed C++20 (to abstract iterator pairs over all containers).\nIf you must use C arrays (and they're not decaying to a pointer on their way through another function), you could write\n```\ntemplate <std::size_t N>\nint add(int (&numarr)[N]){\n    return std::accumulate(numarr, numarr+N, 0);\n}\n```\n\nto save a bit of boilerplate (passing ```\nnumcount```\n everywhere is just an opportunity to get it wrong).\n\nNB. as mentioned in the linked docs, ```\nstd::accumulate```\n is an implementation of a left fold. So, if the standard library didn't provide accumulate, there's still an existing description of the \"thing\" (the particular \"higher-order function\") we're abstracting out of the original code, and you could write your own ```\nfoldl```\n template function taking the same ```\nstd::plus```\n, ```\nstd::minus```\n etc. operator functors.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Making a method generic over Array1<T>\r\n                \r\nI have the following Trait implementation and would like to make ```\nunit```\n generic over ```\nArray1<T>```\n, but fail to find the right Trait bounds (especially that this somehow seems trivial to me, all T needs to support is basically basic arithmetic that output T for the function to work).\n```\ntrait Unit {\n    fn unit(&self) -> Array1<f32>;\n}\n\nimpl Unit for Array1<f32> \n{\n    fn unit(&self) -> Array1<f32> {\n        self / (self * self).sum().sqrt()\n    }\n}\n```\n\nThe compiler suggests adding ```\nstd::ops::Mul<Output = &ArrayBase<OwnedRepr<T>, Dim<[usize; 1]>>>```\n, but doing so keeps giving the same error over and over.\nPlayGround\n    ", "Answer": "\r\nI followed the compiler error messages and produced this generic code that compiles. I'm not familiar with ```\nndarray```\n so I don't know if this is actually correct.\n```\nuse std::ops::Mul;\nuse num_traits::{Zero, real::Real};\nuse ndarray::prelude::*;\n\ntrait Unit {\n    type Output;\n    fn unit(&self) -> Array1<Self::Output>;\n}\n\nimpl<T> Unit for Array1<T>\nwhere\n    for<'a> &'a Array1<T>: Mul<Output = Array1<T>>,\n    T: Real + Clone + Zero + ndarray::ScalarOperand,\n{\n    type Output = T;\n    fn unit(&self) -> Array1<T> {\n        self / (self * self).sum().sqrt()\n    }\n}\n```\n\nNote that ```\nUnit```\n now returns an associated type. If you want it to always return ```\nf32```\n then you'll need to require that ```\nT```\n can be converted to ```\nf32```\n too.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Formatted output arithmetic inserters\r\n                \r\nI have a basic question about the arithmetic inserters; § 27.7.3.6.2/1  [ostream.inserters.arithmetic]:\n\n\n  When val is of type bool, long, unsigned long, long long, unsigned long long, double, long double, or const void*, the formatting conversion occurs as if it performed the following code fragment:\n\n```\nbool failed = use_facet<\n  num_put<charT,ostreambuf_iterator<charT,traits> >\n    > (getloc()).put(*this, *this, fill(), val).failed()\n```\n\n\n\nThe question is what exact function performs the conversion from a pointer to type to, as Matt McNabb corrected, ```\nconst void*```\n? For instance:\n\n```\nint *ip = new int(1);\nstd::cout << ip; //0xaa33fa67\n```\n\n\nI'm not concerned in an implementation details, I just would like to know what function produces arithmetic result from the pointer. Is it ```\nput```\n in the example above?\n    ", "Answer": "\r\nThere's an implicit coversion from any non-pointer to member/member function to ```\nvoid*```\n. After this is passed to the stream, it passes it off to ```\nstd::num_put::put()```\n which prints it out as a generic pointer as if by using the ```\n\"%p\"```\n format flag.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Understanding modular arithmetic in encryption example\r\n                \r\nI understand modular arithmetic in its basic mathematical form for example:\n\n```\n38 = 2 mod 12\n```\n\n\nHowever in the following encryption and decryption code example it is used along with other math and I don't understand what it is used for.\n\n```\ndef encrypt(key, msg):\n    encryped = []\n    for i, c in enumerate(msg):\n        key_c = ord(key[i % len(key)])\n        msg_c = ord(c)\n        encryped.append(chr((msg_c + key_c) % 127))\n    return ''.join(encryped)\n\ndef decrypt(key, encryped):\n    msg = []\n    for i, c in enumerate(encryped):\n        key_c = ord(key[i % len(key)])\n        enc_c = ord(c)\n        msg.append(chr((enc_c - key_c) % 127))\n    return ''.join(msg)\n\nif __name__ == '__main__':\n    key = 'This_is_my_awsome_secret_key'\n    msg = 'Hello world'\n    encrypted = encrypt(key, msg)\n    decrypted = decrypt(key, encrypted)\n\n    print 'Message:', repr(msg)\n    print 'Key:', repr(key)\n    print 'Encrypted:', repr(encrypted)\n    print 'Decrypted:', repr(decrypted)\n```\n\n\nCan someone explain it to me please?\n    ", "Answer": "\r\nin the parts \n```\n\n        key_c = ord(key[i % len(key)])```\n\n\nThe ```\n%```\n is used to avoid an ```\nIndexError```\n - it just wraps the key around the message when the key is shorter than the message.\n\nIn \n```\n\n        encryped.append(chr((msg_c + key_c) % 127))```\n\n\nThe ```\n%```\n is used to keep the resulting ```\nchr```\n in the 7-bit ```\nascii```\n range.\n\nThink about ```\n%```\n here like the clock:\nwhen it's ```\nx```\n hours later than ```\ny```\n 'o clock, it's ```\n(x+y) % 12```\n 'o clock.\n\nOn a side note: I think it must be obvious, I want to mention it nonetheless: this \"cipher\" is of course far away from being secure.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How is tensorflow tf.add implemented?\r\n                \r\nI was hoping someone more familiar with the TensorFlow library could help with a simple question. I would like to know how the tensorflow add operation is implemented.\n\nOther tensorflow ops are registered and defined kernels, but where/how are basic arithmetic operations handled?\n\nhttps://github.com/tensorflow/tensorflow/tree/master/tensorflow/core/kernels\n    ", "Answer": "\r\nThe ```\ntf.add()```\n Python function is an automatically generated wrapper function (currently in the module ```\ntensorflow.python.ops.gen_math_ops```\n) that adds a node to the current default TensorFlow graph.\n\nWhen you run a graph containing that node (via ```\ntf.Session.run()```\n), the TensorFlow runtime will invoke an instance of ```\nBinaryOp<Device, tensorflow::functor::add>```\n, which is contains some code that is common across all componentwise binary operations (e.g. for broadcasting and argument validation), and an invocation of ```\ntensorflow::functor::add()```\n, which uses Eigen's ```\nscalar_sum_op```\n to perform the addition.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Python 3.5 Bracket and Speech Mark Removal from Lists [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs debugging details. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     Edit the question to include desired behavior, a specific problem or error, and the shortest code necessary to reproduce the problem. This will help others answer the question.\r\n                \r\n                    \r\n                        Closed 7 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nBasically,I have fully created code for my work, which is to create an efficient program that manages to ask 10 basic arithmetic questions at complete random and is mark-able. But when I run it the questions are displayed so the brackets and speech marks are seen, I don't want that. Here's the code and what it does\n\nCode Link\n    ", "Answer": "\r\nYour problem here is that question is a list. You want it to be a concatenated string. Instead of\n\n```\nquestion = [a, b, c]\n```\n\n\nyou want something like\n\n```\nquestion = str(a) + b + str(c)\n```\n\n\nNote that you need to convert both numbers to strings before you can concatenate them with your operator, which is represented by a string. Have fun coding!\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "In Squeak Smalltalk, what can I do to display a number in any base I want?\r\n                \r\nI have done a basic arithmetic calculation and got the answer aa\n\nHere is the Smalltalk code in Squeak:\n\n```\nTranscript show: 'aa='.\nTranscript show: 23124234 * 431213; cr.\n```\n\n\n\n  The output is aa=9971470315842\n\n\n9971470315842  is a decimal number.\n\nWhat can I do to make a 10-based number displayed based on any integer I want ?? \n\nSay, 55-based, 33-based, 2999-base. Any positive integer.\n    ", "Answer": "\r\nIn Squeak, you can use\n\n```\n12345 printStringBase: 17.\n '28C3'\n```\n\n\nYou can also prepend the radix (base) and re-interpret the number\n\n```\n17r28C3.\n 12345\n```\n\n\nThe behavior is well defined up to base 36 (10 digits and 26 latin letters). Then you might get some output with more character codes, but you will not be able to re-interpret the numbers.\n\nThis also work with floating point numbers:\n\n```\nFloat pi printStringBase: 5.\n '3.0323221430334324112412'\n\n5r3.0323221430334324112412.\n  3.141592653589793\n```\n\n\nUnfortunately, we can't reinterpret them above base 14 because there is an ambiguity with exponent letter e (once upon a time, only uppercase letters were used as digits, and there were no ambiguity).\n\nNote that you can find methods with the MethodFinder tool.\nOpen a method finder and enter the receiver, arguments and expected results, for example with:\n\n```\n34. 17. '20'\n```\n\n\nthe method finder will display 2 matching methods, ```\n34 printStringBase: 17 --> '20'```\n and ```\n34 radix: 17 --> '20'```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to set field value as the result of a calculation\r\n                \r\nI have a form that has a field whose value is from a php calculation. The Calculation is just basic arithmetic involving purely whole numbers. But there is a scenario where the value will be zero. So the form assumes that that filed has been left empty.\n\nHow can i go round that ? \nHere is a sample of code.\n\n```\nif ( \n    isset($_POST['input1']) &&\n    isset($_POST['input2']) &&\n    isset($_POST['ans'])\n    )\n{   \n    // CHECKING IF ANY OF THE FIELDS WERE LEFT EMPTY\n    $input1 = $_POST['input1'];\n    $input2 = $_POST['input2'];\n    $ans = ($input1)-($input2);\n    $ans_set = 0;\n\n    if ($ans === $ans_set ) {\n        # code...\n        //echo \"Same\";\n        $ans = '0';\n    } else {\n        # code...\n        //echo \"Different\";\n        echo \"Check data types\";\n    }\n\n\n    if ( \n        !empty($input1) &&\n        !empty($input2) &&\n        !empty($ans) \n         )\n    {   \n        $query = \"INSERT INTO formaths VALUES ( 'NUll', NOW(),\n                        '\".mysql_real_escape_string($input1).\"',\n                        '\".mysql_real_escape_string($input2).\"',\n                        '\".mysql_real_escape_string($ans).\"' )\";\n\n        $query_run = mysql_query($query);\n                    if ( $query_run )\n                    {\n                        //header(\"Location:\". __DIR__.\"../registration_success.php\");\n                        echo \"<p class='echo'>Data entry was successful.</p>\";\n                    }\n                    else\n                    {\n                        echo \"<p class='echo'>It seems that we couldn't save that at this time.</p>\";\n                    }\n\n    }\n    else\n    {\n        echo \"<p class='echo'>Please make sure all fields are filled and are correct.<br/>You must fill in the area field last!</p>\";\n    }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n    <form action=\"formaths.php\" method=\"POST\">\n        <input name=\"input1\" type=\"text\" autofocus/>\n        <input name=\"input2\" type=\"text\"/>\n        <input name=\"ans\" type=\"text\" value=\"<?php if (isset($ans)) { echo $ans; }?>\" readonly />\n\n        <input type=\"submit\" value=\"DO IT\" />\n    </form>\n    enter code here\n\n</body>\n</html>\n```\n\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "BigInteger or not BigInteger?\r\n                \r\nIn Java, most of the primitive types are signed (one bit is used to represent the +/-), and therefore when I exceed the limits of the type, I can get unexpected results, like negative numbers.\n\nIs there any better solution than using BigInteger for this, since BigInteger has performance issues and you need to use the class methods for basic arithmetic instead of the language operators (ruins readability)?\n    ", "Answer": "\r\nNo, there is not a better solution.  If you are working with values that cannot fit into a long or a double then you will need to use a reference type like ```\nBigInteger```\n, and Java does not support operator overloading.\n\nTechnically, I suppose you could have some mapping between signed and unsigned values, but if your goal is clean and simple code then this is not at all the way to go.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Combine sequence of positive integers into one unique integer [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs details or clarity. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Add details and clarify the problem by editing this post.\r\n                \r\n                    \r\n                        Closed 11 months ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nSo I've got a list of positive integers and I want to combine all elements into one unique integer. But I am only able to use basic arithmetic (+, -, *, /).\nThe result should have the semantics of a hash for the input sequence. So no other sequence should be able to produce it.\nAny suggestions how I could tackle this problem?\n    ", "Answer": "\r\nInterpreting \"hash\" to mean that the output domain is bounded, it's not possible to \"hash\" an unbounded input sequence to a unique output. Those numbers can only be compressed so much without losing information.\nIf this were possible, compression ratios for any digital information could approach infinity.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Bash script. Accept integer only if is from range\r\n                \r\nI have bash script with basic arithmetic operations -  Addition, Subtraction, Division and  Multiplication. \n\n```\n    #! bin/bash\n\ninput=\"yes\"\nwhile [[ $input = \"yes\" ]]\ndo\n\n    PS3=\"Press 1 for Addition, 2 for subtraction, 3 for multiplication and 4 for division: \"\n    select math in Addition Subtraction Multiplication Division\n    do\n        case \"$math\" in\n        Addition)\n            echo \"Enter first no:\"\n            read num1\n            echo \"Enter second no:\"\n            read num2\n            result=`expr $num1 + $num2`\n            echo Answer: $result\n            break\n        ;;\n        Subtraction)\n            echo \"Enter first no:\"\n            read num1\n            echo \"Enter second no:\"\n            read num2\n            result=`expr $num1 - $num2`\n            echo Answer: $result\n            break\n        ;;\n        Multiplication)\n            echo \"Enter first no:\"\n            read num1\n            echo \"Enter second no:\"\n            read num2\n            result=`expr $num1 * $num2`\n            echo Answer: $result\n            break\n        ;;\n        Division)\n            echo \"Enter first no:\"\n            read num1\n            echo \"Enter second no:\"\n            read num2\n            result=$(expr \"scale=2; $num1/$num2\" | bc)\n            echo Answer = $result\n            break\n        ;;\n        *)\n            echo Choose 1 to 4 only!!!!\n            break\n        ;;\n    esac\n    done\n\ndone\n```\n\n\nHow to make that values for @num1 and @num2 are accepted only if they are numbers in certain range. For example 0 to 10. So if I enter for $num1 or $num2 lets say 500 there will be message to enter valid value?\n    ", "Answer": "\r\nYou can create a simple function to get a number in range:\n\n```\nget_number() {\n    local lo=$1 up=$2 text=${3:-Enter a number: } num      \n    shopt -s extglob\n\n    until   \n        read -p \"$text\" num\n        [[ $num = ?(-)+([0-9]) ]] && (( $lo <= 10#$num && 10#$num <= $up ))\n    do\n        echo \"Invalid input!\" >&2\n    done\n    echo \"$((10#$num))\"\n}\n\nnum1=$(get_number 10 15 \"Enter first number: \")\nnum2=$(get_number -10 20) # use default prompt\n```\n\n\nWorks for integers only. You might also consider inputting the numbers before the ```\ncase```\n command to avoid redundant code.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Can I ask the user to input any basic arithmetic equation without having to ask for every individual number to be computed?\r\n                \r\nI am a complete beginner in coding.\nI want to make a simple math calculator using Python.\nInstead of the traditional method of asking the user to input 2 separate integers\n(in this example addition)\n```\nnum1 = int(input(\"Enter a number: \"))\nnum2 = int(input(\"Enter a number: \"))\ntotal = num1 + num2\nprint(total)\n```\n\nI would like the user to immediately input\n```\n1+1\n```\n\nor any other simple math that may involve one or a combination of the following: addition, subtraction, multiplication, division.\nIs it possible to do so?\n    ", "Answer": "\r\nyou could also separate the input into a list. For example, when you input \"1 + 1\" there are functions in Python to separate all the characters in the list. It can make it [\"1\", \"+\", \"1\"]. With this, you can read each individual character and use them like input[2] to find the operation.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Extending A Floating Point Number to Extra Decimal Places\r\n                \r\nSo, in my beginner python class, we were asked to perform some basic arithmetic on numbers typed by the user, basic stuff. It was supposed to return a number with 2 decimal places, but I can only get it to extend to one. If the decimal terminates at the first decimal, is there a way to add another place? If the decimal terminates later, or is infinite, is there a way to display the second number as well?\n\n```\n    print \"Please enter the month of your birthday as a number.\";\n    print \"\\t Jan = 1\";\n    print \"\\t Feb = 2\";\n    print \"\\t Apr = 3\"\n    print \"etc, etc, etc.\"\n    num = input(\"\\n\");\n    day = input(\"What date were you born on?\\n\");\n    new = (((((((((((num * 7.0) - 1.0) * 13.0) + day) + 3.0) * 11.0) - num) - day) / 10.0) + 11.00) / 100.0);\n    print \"You were born in the\", new, \"month.\";\n```\n\n    ", "Answer": "\r\nJust had to experiment for a little bit, and my solution is kind of cheating. \n\n```\n    new = str(new) + \"0\";\n```\n\n\nThis changes the \"new\" into a string, and adds an extra 0 to the float.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Does BASH's ability to handle numbers scale with processor bitwidth?\r\n                \r\nI recently had to write a library for BASH to handle large numbers because I had to glue some software outputs together that needed basic arithmetic.  If I was writing a shell, I would not assume that most people would need 4096-bit arithmetic.  However, I have two machines that both can handle up to 64-bit arithmetic in BASH, but my question is how this is related to CPUs.  \n\nOn a 32-bit processor, is BASH's maximum arithmetic capability 32-bits, and on a 16-bit processor or 8-bit processor with a some OS and BASH would the maximum numerical capability be 16-bits and 8-bits respectively?\n\nThe BASH manual did not shed any light onto what the limits would be.\n    ", "Answer": "\r\nBash's internal arithmetic is the bitwidth of the target for which bash was compiled, which may be less than the bitwidth of the processor on which it's running.  Specifically, bash's internal arithmetic is ```\nintmax_t```\n per this bug-report comment.  The ```\nintmax_t```\n type is \n\n\n  a signed integer type capable of representing any value of any signed integer type\n\n\nper the docs, and is defined by the compiler.  Therefore, bash arithmetic is limited by the compilation environment.  Even on a 64-bit processor, a bash version compiled for a 32-bit target will be limited to 32 bits.\n\nDetails: in expr.c, the source says\n\n\n  All arithmetic is done as intmax_t integers with no checking for overflow (though division by 0 is caught and flagged as an error).\n\n\nEdit Here's a runtime test for bit width that (I think) only relies on bash being signed two's complement.  Works on my system - YMMV.\n\n```\n#!/bin/bash\nfor((i=1; $i>0; i*=2)); do : ; done    \n    # Set the highest-order bit, which is a negative number in signed math.\necho \"$(echo \"l(-($i))/l(2)\"|bc -l)/1+1\" | bc\n    # Output the position of that bit\n```\n\n\nThe inner ```\nbc -l```\n computes ```\nlog2(|$i|)```\n, the index of the highest-order bit plus just a little bit since the two's complement range is asymmetric around zero.  The outer ```\nbc```\n computes the ceiling of that value.  (```\nbc```\n when run without ```\n-l```\n truncates divisions - thanks to this answer).  On my system, this outputs ```\n64```\n.\n\nEmpirical test:\n\n```\n~$ uname -a                      ---  NOTE: 64-bit Cygwin vvvvvv\nCYGWIN_NT-6.3 localhost 2.5.2(0.297/5/3) 2016-06-23 14:29 x86_64 Cygwin\n~$ bash --version\nGNU bash, version 4.3.46(6)-release (x86_64-unknown-cygwin)\n   <cut>       --- NOTE: 64-bit bash ^^^^^^\n~$ echo $(( 2 ** 32 ))\n4294967296                    <--- so >32 bit\n~$ echo $(( 2 ** 64 ))\n0                             <--- oops - bigger than 64 bit doesn't work\n~$ echo $(( 2 ** 63 ))\n-9223372036854775808          <--- but 64 bit does (and is signed)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "The terminal in IntelljIDEA is not outputting the result as expected\r\n                \r\nI tried to use BigInteger learn its properties and methods. I write an experiment class to do some basic arithmetic operations. However when I tried to output the result, the terminal seems not working as if there's no output at all. Is there any way I can fix the problem?\nHere's my code:\n```\nimport java.math.BigInteger;\n\npublic class exp{\n    public static void main(String[] args){\n        BigInteger num1 = new BigInteger(\"234234234242342342344545546567\");\n        BigInteger num2 = new BigInteger(\"344654645635234324435465656332\");\n        BigInteger num3=num1.multiply(num2);\n        BigInteger num4=num1.add(num2);\n\n        System.out.println(num3);\n        System.out.println(num4);\n    }\n}\n```\n\nHere's response from Terminal in IDEA:\n\n    ", "Answer": "\r\nIf you start the program in IJ (with the green triangle) the output will appear in the \"Run\" window, not in the terminal.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Mathematical Parser in Swift [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question is seeking recommendations for books, tools, software libraries, and more. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     We don’t allow questions seeking recommendations for books, tools, software libraries, and more. You can edit the question so it can be answered with facts and citations.\r\n                \r\n                    \r\n                        Closed 8 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI am wondering if there are any nice Mathematical Parsers in Swift. That is, it can take a string and solve it. I need it to have factorials, exponents, square roots, and all the basic arithmetic operators. I want it to be built into Swift, not 3rd party(like DDMathParser and GCMathParser)It would be nice if you could a couple of them.\n    ", "Answer": "\r\nThere is no mathematical expression parser “built into Swift” in the way you mean. If you want to take strings provided by the user and parse them as mathematical expressions, you must either write your own parser, or use a third-party parser like ```\nDDMathParser```\n or ```\nswift-math-parser```\n.\nNote that there is an expression evaluator included with the Foundation framework, which is part of iOS and Mac OS X and is accessible from both Objective-C and Swift. It's called ```\nNSExpression```\n.\nExample:\n```\nlet expression = NSExpression(format: \"2+3*4\")\nprint(expression.expressionValueWithObject(nil, context: nil))\n// prints \"14\"\n```\n\nIt doesn't include a factorial function, but this article describes how to add your own functions, and uses factorial as an example. You'll have to translate the example from Objective-C to Swift yourself.\nThe main problem with using ```\nNSExpression```\n is that, if the expression string has any errors, it simply crashes.\n```\n:; xcrun swift\nWelcome to Apple Swift version 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2). Type :help for assistance.\n  1> import Foundation\n  2> let ex = NSExpression(format: \"1+\", argumentArray: [])\nProcess 78868 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = internal ObjC exception breakpoint(-5).\n    frame #0: 0x0000000100000e90 repl_swift`repl_swift.repl_main() -> Swift.Int\nrepl_swift`repl_swift.repl_main() -> Swift.Int:\n->  0x100000e90 <+0>: pushq  %rbp\n    0x100000e91 <+1>: movq   %rsp, %rbp\n    0x100000e94 <+4>: xorl   %eax, %eax\n    0x100000e96 <+6>: popq   %rbp\nTarget 0: (repl_swift) stopped.\nex: NSExpression = <extracting data from value failed>\n\nExecution stopped at breakpoint.  Enter LLDB commands to investigate (type help for assistance.)\n(lldb) \n```\n\nFor this reason, it's not a good idea to call ```\nNSExpression```\n with strings provided by the user or any other external source.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Iterator arithmetic\r\n                \r\nI'm working right now with ```\niterators```\n arithmetic operations and stack on small problem .\nI need to make a Sum of first and last element of ```\nvector<int>```\n followed by second and last element of ```\nvector<int>```\n , third and last element of ```\nvector<int>```\n\nExample:\nInput numbers by user\n```\n1 2 3 4 5 6 7 8 9```\n\nOutput should be\n```\n10 11 12 13 14 15 16 17```\n\nIn general the code should do addition like that\n```\n1+9 2+9 3+9 4+9 5+9 6+9 7+9 ......```\n\n\nSo basically i need the actual code  for this arithmetic operation using ```\niterator```\n with member functions ```\n*.begin() , *.end()```\n only  ! I've try many ways but nothing coming in my head how to do this operation only with ```\n.begin()```\n and ```\n.end()```\n . I found other member functions but this functions is explained in STD library, not in basic knowledge level. So i need help to make code  with only ```\nbegin()```\n and ```\nend()```\n member functions if possible. \n\nCode i got so far    \n\n```\nint main()\n{  \n\nvector<int> numset;\nint num_input;\nauto beg=numset.begin(), end=numset.end();\nwhile (cin>>num_input)\n{\n    numset.push_back(num_input);\n}\nfor (auto it = numset.begin()+1; it !=numset.end(); ++it)\n{\n    // *it=*it+1+nuset.end(); -- Wrong  X\n            // *it+=(end-beg)/2;      -- Totally wrong(and totally stupid) X\n            // *it + numset.back()   -- can't use other member functions X \n    //////// I've stack here dont know what code need //////\n\n              cout<<*it<<endl;    \n}\n```\n\n\nThank you for your time.\n    ", "Answer": "\r\nThe operation you perform is ```\n*it+*(it-1)```\n. (It might help to add more parentheses and spaces in your code.) That adds two adjacent elements from the sequence.\n\nThe last element in the sequence is ```\nnumset.back()```\n. So try ```\n*it + numset.back()```\n instead. And there's no need to start with the second element, since you do want to print the sum of the first and last elements. If you don't want to print the sum of the last element with itself, you should stop at ```\nend() - 1```\n, though.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Check for arithmetic overflow and get overflow count?\r\n                \r\nWhat would be the most appropriate way to detect an arithmetic overflow (or underflow for that matter) and get the overflow count?\n\nFor easier understanding I'll will be using ```\nbyte```\n, but this is the same for ```\nint```\n or any other basic integer type. Now imagine I have the value 240 and want to add 24 to it. Clearly an arithmetic overflow. Using the ```\nchecked```\n keyword this is easy to detect at least ...\n\n```\nbyte value = 240;\ntry\n{\n    checked\n    {\n        value += 24;\n    }\n}\ncatch (OverflowException e)\n{\n    // handle overflow, get overflow count via % etc.\n}\n```\n\n\n... by throwing an exception.\n\nThis is what I am using at the moment.\n\nHowever, I don't quite like the exception handling in this one. Exceptions are usually pretty expensive, and I want to avoid them right from the start. To me this seems like a Boneheaded-Exception anyways. Is there some arithmetic wizardry I could do to detect this upfront?\n    ", "Answer": "\r\nI guess you could check if the difference between the current value and the maximum if large enough to do the addition:\n\n```\nvar difference = byte.MaxValue - value;\n\nif(difference >= 24)//OK to add 24\nelse//will cause overflow\n```\n\n\nTo detect underflows you can use the ```\nbyte.MinValue```\n value instead:\n\n```\nvar difference = value - byte.MinValue;\nif(difference >= 24)//OK to subtract 24\nelse//will cause underflow\n```\n\n\n\n\nWith these in mind you could go as far as making some extension methods for them:\n\n```\npublic static class OverflowExtensions\n{\n    public static bool WillAdditionOverflow(this byte b, int val)\n    {\n        return byte.MaxValue - b < val;\n    }\n\n    public static bool WillSubtractionUnderflow(this byte b, int val)\n    {\n        return b - byte.MinValue < val;\n    }\n}\n```\n\n\nWhich you can use like so:\n\n```\nusing MyApp.OverflowExtensions;\n//...\n\nif(value.WillAdditionOverflow(24))\n    //value + 24 will cause overflow\n\nif(value.WillSubtractionUnderflow(24))\n    //value - 24 will cause underflow\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to use operations like +-*/ on java-objects\r\n                \r\nI need to program a java-class \"Fraction\".\n\nThis class should be able to understand the basic arithmetic operations like +, -, *, /. I found lots of \"Fraction\" classes and understand them, but all use methods like \"f1.add(f2);\" (f1, f2 are objects of Fraction, for Example:\n\n```\nf1 = new Fraction(1,5);\nf2 = new Fraction(2,5);\n```\n\n\nWhat I need is a direct manipulation like the manipulation of integers, for example:\n\n```\n**f1 = f1 + f2;**\n```\n\n\ninstead of\n\n```\nf1.add(f2);\n```\n\n    ", "Answer": "\r\nYou can't: java doesn't allow overloading operators.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "C++ is saying that -1 < 15 (in programming) is false [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Why does this if conditional with string.length() evaluate inconsistently?\r\n                            \r\n                                (2 answers)\r\n                            \r\n                    \r\n                    \r\n                        Signed/unsigned comparisons\r\n                            \r\n                                (6 answers)\r\n                            \r\n                    \r\n                    \r\n                        Weird std::string::size() in a for loop\r\n                            \r\n                                (2 answers)\r\n                            \r\n                    \r\n                Closed 10 months ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI have a string called ```\nin```\n, a string that has the value of \"Hello, World!\". I also have an integer called ```\ni```\n that has the value ```\n-1```\n. When I ask C++ to print out if ```\ni```\n is less than the length of ```\nin```\n (```\nin.length()```\n), it says ```\nfalse```\n, but when I try ```\n-1 < 15```\n, it says true. Why does it say false?\nI feel like this is extremely basic arithmetic.\n    ", "Answer": "\r\n```\nstring::length()```\n returns an unsigned integer.  You can't compare that to a negative signed value, so the ```\n-1```\n gets converted to an unsigned value, which wraps it to a very large number, which is not less than the string's length, hence the result is false.\n```\n-1 < 15```\n, on the other hand, is comparing two signed integers, so no conversion is needed, and the result is true, as expected.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Can a section of the code be interfering with the loop? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                    \r\n                        \r\n                    \r\n                \r\n                    \r\n                            \r\n                                This question is unlikely to help any future visitors; it is only relevant to a small geographic area, a specific moment in time,  or an extraordinarily narrow situation that is not generally applicable to the worldwide audience of the internet. For help making  this question more broadly applicable, visit the help center.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                Closed 10 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI'm coding a calculator in C that does basic arithmetic and can loop until the user imput a command otherwise. I thought I was getting the hang of loops, but I only put one loop (to start a new operation) and it isn't working. Can a section of the code be interfering with the loop? Is the syntax wrong? The program works fine otherwise.\n\n```\nint main(int argc, char *argv[])\n{\n    char reponse;\n\n    int oper;\n    float nb1, nb2, resultat;\n\n    do\n    {\n        printf(\"Entrez les deux valeurs que vous voulez calculer: \\n\");\n        scanf(\"%f %f\", &nb1, &nb2);\n\n        printf(\"\\nValidez votre op\\x82rateur pour effectuer votre cacul\\n\");\n        printf(\"choisissez \\\"1\\\" pour une addition, \\\"2\\\" pour une soustraction,\\n\");\n        printf(\"\\\"3\\\" pour une multiplication ou \\\"4\\\" pour une division\\n\");\n        scanf(\" %d\", &oper);\n\n        switch(oper )\n        {\n            case 1:\n                resultat = nb1 + nb2;\n                printf(\"\\n%.2f + %.2f = %.2f\\n\", nb1, nb2, resultat);\n                break;\n            case 2:\n                resultat = nb1 - nb2;\n                printf(\"\\n%.2f - %.2f = %.2f\\n\", nb1, nb2, resultat);\n                break;\n            case 3: resultat = nb1 * nb2;\n                printf(\"\\n%.2f * %.2f = %.2f\\n\", nb1, nb2, resultat);\n                break;\n            case 4: resultat = nb1 / nb2;\n                printf(\"\\n%.2f / %.2f = %.2f\\n\", nb1, nb2, resultat);\n                break;\n            default:\n                printf(\"\\nErreur\\n\");\n        }\n\n        printf(\"\\nVoulez-vous continuer \\x85 faire des op\\x82rations? [o/n]\\n\");\n        scanf(\" c%\", &reponse);\n    } while (reponse == 'o' || reponse == 'O');\n\n\n    printf(\"\\nMerci au revoir ! Appuyez sur une touche quelconque pour terminer\");\n    getch();\n}\n```\n\n    ", "Answer": "\r\nUse \n\n```\nchar reponse[4];\n\n....\n\nscanf(\"%3s\", reponse);\n} while (reponse[0] == 'o' || reponse[0] == 'O');\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Micro dsl for arithmetic in Ruby\r\n                \r\nI want to write a tiny DSL in ruby for simple arithmetic.  It would look something like this:\n\n```\nwhats 1 + 1\n=> 2\n\nwhats 2 * 2\n=> 4\n```\n\n\nThe use case is teaching my child to program. I was showing her basic programming with ```\nirb```\n, and when I gave her the keyboard she typed \"whats 2 + 2\" - possible in ruby?\n    ", "Answer": "\r\nActually, it's quite simple:\n\n```\ndef whats expr; expr end\n\nwhats 1 + 1\n# => 2\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Wrapping arithmetic types in C++\r\n                \r\nC++ is awesome, but you cannot inherit from arithmetic types, which, sometimes, would be useful. I wrote the following:\n\n```\ntemplate <typename type> class arithmetic\n{\n    static_assert(std :: is_arithmetic <type> :: value, \"Please provide an arithmetic type.\");\n\n    // Members\n\n    type _value;\n\npublic:\n\n    // Constructors\n\n    inline arithmetic() = default;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline arithmetic(const rtype &);\n\n    // Arithmetic operators\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator + (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator - (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator * (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator / (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator % (const rtype &) const;\n\n    inline auto operator + () const;\n    inline auto operator - () const;\n\n    inline auto operator ++ ();\n    inline auto operator ++ (int);\n\n    inline auto operator -- ();\n    inline auto operator -- (int);\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator = (const rtype &);\n\n    // Comparison operators\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator == (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator != (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator > (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator < (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator >= (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator <= (const rtype &) const;\n\n    // Logical operators\n\n    inline auto operator ! () const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator && (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator || (const rtype &) const;\n\n    // Bitwise operators\n\n    inline auto operator ~ () const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator & (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator | (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator ^ (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator << (const rtype &) const;\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator >> (const rtype &) const;\n\n    // Compound assignment operators\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator += (const rtype &);\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator -= (const rtype &);\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator *= (const rtype &);\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator /= (const rtype &);\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator %= (const rtype &);\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator &= (const rtype &);\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator |= (const rtype &);\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator ^= (const rtype &);\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator <<= (const rtype &);\n\n    template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type * = nullptr> inline auto operator >>= (const rtype &);\n\n    // Member and pointer operators\n\n    inline type * operator & ();\n    inline const type * operator & () const;\n\n    // Casting\n\n    inline operator type & ();\n    inline operator const type & () const;\n};\n\n// Constructors\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline arithmetic <type> :: arithmetic(const rtype & value) : _value(value)\n{\n}\n\n// Arithmetic operators\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator + (const rtype & rvalue) const\n{\n    return this->_value + rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator - (const rtype & rvalue) const\n{\n    return this->_value - rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator * (const rtype & rvalue) const\n{\n    return this->_value * rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator / (const rtype & rvalue) const\n{\n    return this->_value / rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator % (const rtype & rvalue) const\n{\n    return this->_value % rvalue;\n}\n\ntemplate <typename type> inline auto arithmetic <type> ::  operator + () const\n{\n    return +(this->_value);\n}\n\ntemplate <typename type> inline auto arithmetic <type> ::  operator - () const\n{\n    return -(this->_value);\n}\n\ntemplate <typename type> inline auto arithmetic <type> ::  operator ++ ()\n{\n    return ++(this->_value);\n}\n\ntemplate <typename type> inline auto arithmetic <type> ::  operator ++ (int)\n{\n    return (this->_value)++;\n}\n\ntemplate <typename type> inline auto arithmetic <type> ::  operator -- ()\n{\n    return --(this->_value);\n}\n\ntemplate <typename type> inline auto arithmetic <type> ::  operator -- (int)\n{\n    return (this->_value)++;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator = (const rtype & rvalue)\n{\n    return this->_value = rvalue;\n}\n\n// Comparison operators\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator == (const rtype & rvalue) const\n{\n    return this->_value == rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator != (const rtype & rvalue) const\n{\n    return this->_value != rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator > (const rtype & rvalue) const\n{\n    return this->_value > rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator < (const rtype & rvalue) const\n{\n    return this->_value < rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator >= (const rtype & rvalue) const\n{\n    return this->_value >= rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator <= (const rtype & rvalue) const\n{\n    return this->_value <= rvalue;\n}\n\n// Logical operators\n\ntemplate <typename type> inline auto arithmetic <type> ::  operator ! () const\n{\n    return !(this->_value);\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator && (const rtype & rvalue) const\n{\n    return this->_value && rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator || (const rtype & rvalue) const\n{\n    return this->_value || rvalue;\n}\n\n// Bitwise operators\n\ntemplate <typename type> inline auto arithmetic <type> ::  operator ~ () const\n{\n    return ~(this->_value);\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator & (const rtype & rvalue) const\n{\n    return this->_value & rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator | (const rtype & rvalue) const\n{\n    return this->_value | rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator ^ (const rtype & rvalue) const\n{\n    return this->_value ^ rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator << (const rtype & rvalue) const\n{\n    return this->_value << rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator >> (const rtype & rvalue) const\n{\n    return this->_value >> rvalue;\n}\n\n// Compound assignment operators\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator += (const rtype & rvalue)\n{\n    return this->_value += rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator -= (const rtype & rvalue)\n{\n    return this->_value -= rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator *= (const rtype & rvalue)\n{\n    return this->_value *= rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator /= (const rtype & rvalue)\n{\n    return this->_value /= rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator %= (const rtype & rvalue)\n{\n    return this->_value %= rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator &= (const rtype & rvalue)\n{\n    return this->_value &= rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator |= (const rtype & rvalue)\n{\n    return this->_value |= rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator ^= (const rtype & rvalue)\n{\n    return this->_value ^= rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator <<= (const rtype & rvalue)\n{\n    return this->_value <<= rvalue;\n}\n\ntemplate <typename type> template <typename rtype, typename std :: enable_if <__arithmetic :: __is_arithmetic_convertible <rtype> :: value> :: type *> inline auto arithmetic <type> ::  operator >>= (const rtype & rvalue)\n{\n    return this->_value >>= rvalue;\n}\n\n// Member and pointer operators\n\ntemplate <typename type> inline type * arithmetic <type> :: operator & ()\n{\n    return &(this->_value);\n}\n\ntemplate <typename type> inline const type * arithmetic <type> :: operator & () const\n{\n    return &(this->_value);\n}\n\n// Casting\n\ntemplate <typename type> inline arithmetic <type> :: operator type & ()\n{\n    return this->_value;\n}\n\ntemplate <typename type> inline arithmetic <type> :: operator const type & () const\n{\n    return this->_value;\n}\n```\n\n\nWhich is basically just a very pedantic wrapper for arithmetic types. The wrapper has an arithmetic member called ```\n_value```\n, then all the calls to any operator are forwarded down to ```\n_value```\n, and there is a cast operator to the original arithmetic type.\n\nNow, I wonder, is there any circumstance in which, say, an ```\narithmetic <int>```\n will behave differently than an ```\nint```\n? I can't seem to figure out any, but I thought I'd ask a more informed opinion.\n\nOn the other hand, if this works as expected and ```\narithmetic <int>```\n behaves as an ```\nint```\n, then why isn't this part of the standard? It looks quite trivial to implement and would allow us to extend arithmetic types as we please.\n    ", "Answer": "\r\nOne issue off the top - no more than one user-defined conversion in an implicit conversion sequence. Consider:\n\n```\nclass C { C(int); };\nvoid f(C);\n\nf(42);  // works, calls f(C(42));\nf(arithmetic<int>(42));  // wouldn't work.\n```\n\n\nAnother issue - template specializations:\n\n```\ntemplate <typename T> void f(T) { std::cout << \"Generic\"; }\ntemplate <> void f<int>(int) { std::cout << \"Specialized\"; }\n\nf(42);  // calls specialized\nf(arithmetic<int>(42));  // calls generic\n```\n\n\nCloser to home - you can use ```\narithmetic<int>```\n but not ```\narithmetic<arithmetic<int>>```\n. More generally, various template metaprogramming techniques would be able to tell the difference.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Map-like array function in Excel?\r\n                \r\nIs there something like a ```\nmap```\n function in Excel?\nFor example, let's say I want to apply the formula ```\nABS```\n to a list of items. Something like:\n```\n=ABS,{-1,2,3,4,5}\n```\n\nAs an example of python-like notation:\n```\n# list comprehension\n>>> [abs(i) for i in [-1,2,3,4,5]]\n[1, 2, 3, 4, 5]\n\n# map\n>>> map(abs,[-1,2,3,4,5])\n[1, 2, 3, 4, 5]\n\n# passing arbitrary function\n>>> map(lambda x:abs(x)+1, [-1,2,4,5,6])\n[2, 3, 5, 6, 7]\n```\n\nIs there something similar in Excel?\n\nNote, the closest I've gotten is using native operators against lists, such as ```\n=2*{1,2,3,4,5}```\n, but this just gives things like the basic arithmetic operations.\n    ", "Answer": "\r\nIn Excel-365 you can directly use ```\nABS()```\n function with array of data. Try-\n```\n=ABS({-1,2,3,4,5})\n```\n\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to perform polynomial subtraction and division in galois field\r\n                \r\nFor my Crypto course, I'm given with two polynomials, in compact form and an irreducible polynomial and am asked to perform the 4 basic arithmetic operations in GF(2^8). Accomplished addition and multiplication, I'm now wondering how to approach subtraction and division. For convenience, let's assume the inputs be, in bit sequence, always of 8 bits\n\n```\n1st bit sequence: 11001100\n2nd bit sequence: 11110000\nirreducible polynomial(fixed): x^8 + x^4 + x^3 + x^1\n```\n\n\nHow do I perform subtraction/division?\n    ", "Answer": "\r\nThe polynomial ```\nx^8 + x^4 + x^3 + x^1```\n is not irreducible: ```\nx```\n is obviously a factor!. My bets are on a confusion with ```\nx^8 + x^4 + x^3 + x + 1```\n, which is the lexicographically first irreducible polynomial of degree 8.\n\nAfter we correct the polynomial, GF(28) is a field in which every element is its own opposite. This implies subtraction is the same as addition.\n\nMultiplication * in that field less zero forms a group of 255 elements. Hence for any non-zero B, it holds B255 = 1. Hence the multiplicative inverse of such B is B254.\n\nHence one can compute A / B as B254 * A when B is not zero. If it is taken that division by zero yields zero, the formula works without special case.\n\nB254 can be computed using 13 multiplications by the standard binary exponentiation method (square and multiply), successively raising B to the 2, 3, 6, 7, 14, 15, 30, 31, 62, 63, 126, 127, 254th powers. C code in this answer on crypto.SE. It is possible to get down to 11 multiplications, and build a whole inverse table with 255 multiplications; Try It Online!.\n\nOther slightly faster to obtain (one) modular inverse include the Extended Euclidean GCD algorithm and log/antilog tables, see this this other answer on crypto.SE. However:\n\n\nWhen speed is an issue, we can pre-tabulate the modular inverses.\nThat's more complex.\nComputation of the modular inverse as B254 is constant-time (as desirable in cryptography to prevent side-channel timing attacks) under the main condition that multiplication is, when that's next to impossible to insure with other methods, including table on modern hardware and most computer languages, save perhaps assembly.\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Parsing Arithmetic String Operations in Kotlin\r\n                \r\nIf I have a string that has an arithmetic expression with paranthesis like:\n```\n((4 * 7) / 2) - 7```\n\nHow do I evaluate it automatically? In particular with Kotlin. I heard that you need to make a parser, so how can I do so in Kotlin and have all the necessary basic operations in the example as such?\n    ", "Answer": "\r\n```\nfun evaluate(str: String): Double {\n\n  data class Data(val rest: List<Char>, val value: Double)\n\n  return object : Any() {\n\n    fun parse(chars: List<Char>): Double {\n      return getExpression(chars.filter { it != ' ' })\n        .also { if (it.rest.isNotEmpty()) throw RuntimeException(\"Unexpected character: ${it.rest.first()}\") }\n        .value\n    }\n\n    private fun getExpression(chars: List<Char>): Data {\n      var (rest, carry) = getTerm(chars)\n      while (true) {\n        when {\n          rest.firstOrNull() == '+' -> rest = getTerm(rest.drop(1)).also { carry += it.value }.rest\n          rest.firstOrNull() == '-' -> rest = getTerm(rest.drop(1)).also { carry -= it.value }.rest\n          else                      -> return Data(rest, carry)\n        }\n      }\n    }\n\n    fun getTerm(chars: List<Char>): Data {\n      var (rest, carry) = getFactor(chars)\n      while (true) {\n        when {\n          rest.firstOrNull() == '*' -> rest = getTerm(rest.drop(1)).also { carry *= it.value }.rest\n          rest.firstOrNull() == '/' -> rest = getTerm(rest.drop(1)).also { carry = it.value / carry }.rest\n          else                      -> return Data(rest, carry)\n        }\n      }\n    }\n\n    fun getFactor(chars: List<Char>): Data {\n      return when (val char = chars.firstOrNull()) {\n        '+'              -> getFactor(chars.drop(1)).let { Data(it.rest, +it.value) }\n        '-'              -> getFactor(chars.drop(1)).let { Data(it.rest, -it.value) }\n        '('              -> getParenthesizedExpression(chars.drop(1))\n        in '0'..'9', ',' -> getNumber(chars)\n        else             -> throw RuntimeException(\"Unexpected character: $char\")\n      }\n    }\n\n    fun getParenthesizedExpression(chars: List<Char>): Data {\n      return getExpression(chars)\n        .also { if (it.rest.firstOrNull() != ')') throw RuntimeException(\"Missing closing parenthesis\") }\n        .let { Data(it.rest.drop(1), it.value) }\n    }\n\n    fun getNumber(chars: List<Char>): Data {\n      val s = chars.takeWhile { it.isDigit() || it == '.' }.joinToString(\"\")\n      return Data(chars.drop(s.length), s.toDouble())\n    }\n\n  }.parse(str.toList())\n\n}\n\nval expresssion = \"((4 * 7) / 2) - 7\"\n\nval result = evaluate(expresssion)\n\nprintln(result)   // Output: 7.0\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Implementing Arithmetic in Assembly\r\n                \r\nI am a new programmer for Assembly on Winx64. I'm attempting to set up code that divides the values of one array in the values of another using the basic arithmetic from Assembly programming. The lab I couldn't finish is this:\n\n\n\nHere is the code I tried to implement (which was placed in the Hyper-V Virtual Machine, sorry for any poor indentation I end up having):\n\n```\nTITLE DISPLAY\n      .MODEL SMALL\n      .386\n      .STACK\n      .DATA\nS     EQU 12 ;size of arrays\nX     BYTE 4, 16, 100, -116, -68, -104, 125, 60, 99, 33, 55, 77\nY     BYTE 2, 3, 4, -5, -6, -7, -8, -9, -10, 11, 12, 13\nQ     BYTE 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0     ;quotient = X/Y\nR     BYTE 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0     ;remainder = X/Y\n\n;Address of X is _______:_______\n;Address of Y is _______:_______\n;Address of Q is _______:_______\n;Address of R is _______:_______\n\n      .CODE\nMAIN  PROC FAR\n      .STARTUP\n      ;Program\n      MOV ESI, 0       ;use ESI and index to arrays\n      MOV CX, S       ;counter for loop\n\nL1:   MOV AX, 0 ;clear the AX register\n      MOV AL, [X+ESI] ;load dividend\n      MOV BL, [Y+ESI]\n      MOV DX, 0 ;clear the DX register\n      IDIV AX ;divide X by Y\n      MOV [Q+ESI], EAX    ;store quotient in Q\n      INC ESI  ;increment index by 1\n      LOOP L1\n      .EXIT \nMAIN  ENDP\n      END\n```\n\n\nThe first issue I'm having is that Line 29 has Error A2070: Invalid Instruction Operands. The second issue is that I'm not sure whether the entirety of the code is correct along with the error. I believe I am able to find the values of X and Y (not Q and R particularly) in the memory of the debugger, but I'm having trouble assembling this code first.\n\nHere is also an Excel except with the expected values for Q and R.\n\n\n    ", "Answer": "\r\nAlrighty. The issue, found out by fuz, is that I stored the quotient incorrectly.\n\n```\nTITLE DISPLAY\n      .MODEL SMALL\n      .386\n      .STACK\n      .DATA\nS     EQU 12 ;size of arrays\nX     BYTE 4, 16, 100, -116, -68, -104, 125, 60, 99, 33, 55, 77\nY     BYTE 2, 3, 4, -5, -6, -7, -8, -9, -10, 11, 12, 13\nQ     BYTE 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0     ;quotient = X/Y\nR     BYTE 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0     ;remainder = X/Y\n\n;Address of X is _______:_______\n;Address of Y is _______:_______\n;Address of Q is _______:_______\n;Address of R is _______:_______\n\n      .CODE\nMAIN  PROC FAR\n      .STARTUP\n      ;Program\n      MOV ESI, 0       ;use ESI and index to arrays\n      MOV CX, S       ;counter for loop\n\nL1:   MOV AX, 0 ;clear the AX register\n      MOV AL, [X+ESI] ;load dividend\n      MOV BL, [Y+ESI]\n      MOV DX, 0 ;clear the DX register\n      IDIV AX ;divide X by Y\n      MOV [Q+ESI], AL   ;store quotient in Q\n      INC ESI  ;increment index by 1\n      LOOP L1\n      .EXIT \nMAIN  ENDP\n      END\n\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "KeyError to existing Colums in my panda dataframe after transposing, with dtype='object'\r\n                \r\nSo i have some trouble with trying to make basic arithmetic with columns in pandas. the datatype of my columns after transposing are 'object'. Because of this i get a ```\nKeyError```\n when trying to add a column to another column.\nAfter transposing I have added the code:\n```\ndg.columns = dg.columns.astype(str)\n```\n\nThe dont seem to react to it, anyone knows how to solve this?\nmy full code:\n```\ndg = pd.read_csv(\"file.csv\", encoding=\"latin-1\", header = None)\n\ndg = dg.T\ndg.columns= dg.iloc[0]\ndg = dg.reindex(dg.index.drop(0))\ndg.index.name = 'Date'\ndg = dg.fillna(0)\ndg.drop(dg.columns.difference(['Category','revenue','Result']), 1, inplace=True)\ndg.columns = dg.columns.astype(str)\n\nprint (dg.columns)\n\ndg['revenue','Result'] = pd.to_numeric(dg['revenue','Result'], errors='coerce')\n\ndg['cost'] = dg['revenue']* - dg['Result']\ndg = dg.groupby('Category','revenue','Result','cost').agg(sum).reset_index()\nprint (dg[:5])\n```\n\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Python module matrix class that implements Modulo 2 arithmetic?\r\n                \r\nI'm looking for a pure Python module that implements a matrix class where the underlying matrix operations are computed in modulo 2 arithmetic as in\n\n```\n(x+y)%2\n```\n\n\nI need to do a lot of basic matrix manipulations ( transpose, multiplication, etc. ).\n\nAny help appreciated.\n\nThanks in advance\n    ", "Answer": "\r\nThis might help you. Look for the Matrix module on that page. Here is the source.\ncheers\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Not getting desired output from Jframe\r\n                \r\nI'm new to programming GUI in Java. My code is simple and only needs to do some basic arithmetic but for some reason it's not working. I don't know that I'm using the ```\nString.valueOf()```\ncorrectly.\n\nMy code:\n\n```\n    String restaurantName;\n    double subTotal = 0;\n    int tipPercentage = 0;\n    double totalBill = 0; \n    double tipInDollars = 0;\n\n    restaurantName = txtRestaurantName.getText();\n    subTotal = Double.parseDouble(txtSubtotal.getText());\n    tipPercentage = Integer.parseInt(txtTipAmt.getText());  \n    tipInDollars = ((tipPercentage / 100) * subTotal);\n    totalBill = (tipInDollars + subTotal);\n\n    lblDisplayTip.setText(String.valueOf(tipPercentage) + \"%\");\n    lblDisplayTotalBill.setText(String.valueOf(totalBill));\n```\n\n\nIf the user enters 50 for subtotal and 10 for the tip percentage, I would expect ```\ntipInDollars```\n to equal 5 and for ```\ntotalBill```\n to equal 55. \nYet the output is:\n\n    ", "Answer": "\r\nYour issue is not with your display, it's with your calculation, or rather, the variables you use for your calculation. You can either make ```\ntipPercentage```\n a ```\ndouble```\n, or you can make the 100 in this line: ```\ntipInDollars = ((tipPercentage / 100) * subTotal);```\n into 100.0. Either solution should fix your problem.\n\nThe problem arises from dividing an integer (```\ntipPercentage```\n) by another integer (100). When you do this, Java will round down and always make your result 0.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Arithmetic Template Swap faster than std::swap?\r\n                \r\nI looked around and combined a basic temporary variable swap with a type template restricted to arithmetic types. Why is this faster than ```\nstd::swap```\n?\n```\ntemplate <typename T, typename std::enable_if<std::is_arithmetic<T>::value>::type* = nullptr>\nvoid swp(T& x, T& y) {\n    T t = x; x = y; y = t;\n}\n```\n\nHere is the specific implementation I am using for testing: (try clearing the cache for testing consistency, see this post for info)\n```\nint main() {\n    const size_t bigger_than_cachesize = 10 * 1024 * 1024;\n    long* p = new long[bigger_than_cachesize];\n    for (int i = 0; i < bigger_than_cachesize; i++) p[i] = rand();\n    std::cout << \"Cache is flushed...\" << std::endl;\n    /// IGNORE ABOVE (ATTEMPTING TO CLEAR CACHE FOR CONSISTENCY)\n\n    double duration;\n    int x = 2560, y = 435;\n    std::clock_t start;\n    start = std::clock();\n\n    for(int i = 0; i < 100000000; i++) std::swap(x,y);\n\n    duration = (std::clock() - start);\n    std::cout << \"std::swap: \" << duration << '\\n';\n    duration = 0;\n    start = std::clock();\n\n    for (int i = 0; i < 100000000; i++) swp(x,y);\n\n    duration = (std::clock() - start);\n    std::cout << \"swapTMP: \" << duration << '\\n';\n}\n```\n\nResults: (5:1 ratio)\n```\nstd::swap -> 5086\n<T> swp   -> 1397\n```\n\n    ", "Answer": "\r\nTake a look on assembly of this simple code, when optimizations are enabled (```\n-O2```\n).\n```\n#include <algorithm>\n\nint foo(int a, int b) {\n    for(int i = 0; i < 100000000; i++) std::swap(a, b);\n    return a;\n}\n\ntemplate <typename T, typename std::enable_if<std::is_arithmetic<T>::value>::type* = nullptr>\nvoid swp(T& x, T& y) {\n    T t = x; x = y; y = t;\n}\n\nint bar(int a, int b) {\n    for(int i = 0; i < 100000000; i++) swp(a, b);\n    return a;\n}\n```\n\nHere is godbolt.\nMachine code for ```\nfoo```\n and ```\nbar```\n are exact the same when compared for each compiler.\nWhat is more important ```\nmsvc```\n was able to optimize away ```\nfor```\n loops detecting that they do not introduce any visible outcome (\"as if\" rule).\nSo since you have different results this means you are testing that incorrectly.\nRemember that testing performance such small and fast functions like ```\nswap```\n is extremely hard from technical point of view and it is easy to do mistake which will lead to wrong conclusions.\nBasically it looks like you have reach limit of time resolution of ```\nstd::clock()```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to extend my class to accept 64-bit numbers in c++?\r\n                \r\nI've implemented a class and I overloaded basic arithmetic operations (+,-,*,/). I'm working on a 32-bit machine so my int is 32-bit(4-byte). I want now to extend this class to accept numbers that are larger then 32-bit, but I am confused how to do that?\nMy header file looks like below:\n\n```\n    using namespace std;\n\n    #ifndef _bignumbers_H\n    #define _bignumbers_H\n\n    class bignumbers\n    {\n        public:\n            bignumbers(int _nr){ nr = _nr; }\n\n            //overloaded operators\n            friend bignumbers operator+(const bignumbers& _nr1, const bignumbers& _nr2);\n            friend bignumbers operator-(const bignumbers& _nr1, const bignumbers& _nr2);\n            friend bignumbers operator*(const bignumbers& _nr1, const bignumbers& _nr2);\n            friend bignumbers operator/(const bignumbers& _nr1, const bignumbers& _nr2);\n\n            int getNumber() { return nr; }; \n        private:\n            int nr;\n        protected:\n    };\n\n    bignumbers operator+(const bignumbers& nr_1, const bignumbers& nr_2){ \n        return bignumbers(nr_1.nr + nr_2.nr);\n    } \n    bignumbers operator-(const bignumbers& nr_1, const bignumbers& nr_2){ \n        return bignumbers(nr_1.nr - nr_2.nr);\n    } \n    bignumbers operator*(const bignumbers& nr_1, const bignumbers& nr_2){ \n        return bignumbers(nr_1.nr * nr_2.nr);\n    } \n    bignumbers operator/(const bignumbers& nr_1, const bignumbers& nr_2){ \n        return bignumbers(nr_1.nr / nr_2.nr);\n    } \n\n    #endif \n```\n\n\nThen in main.cpp I wrote:\n\n```\nint main ()\n {\n    // HERE I WANT TO SPECIFY TYPE BIGNUMBER, AND THEN I CAN TYPE\n    // NUMBERS WHICH ARE 64 BITS and not 32(int) like here\n    // HOW CAN I DO THAT ??????\n    int var1 = 0;\n    cout<< \"Put in first int number: \";\n    cin >> var1;\n\n    int var2 = 0;\n    cout<< \"Put in second int number: \";\n    cin >> var2;\n\n    bignumbers NR_1(var1), NR_2(var2);\n\n    bignumbers SUM = NR_1 + NR_2;\n    bignumbers DIFFERENCE = NR_1 - NR_2;\n    bignumbers PRODUCT = NR_1 * NR_2;\n    bignumbers DIVISION = NR_1 / NR_2;\n\n    cout << NR_1.getNumber() << \" + \" << NR_2.getNumber() << \" = \" << SUM.getNumber() << endl;\n    cout << NR_1.getNumber() << \" - \" << NR_2.getNumber() << \" = \" << DIFFERENCE.getNumber() << endl;\n    cout << NR_1.getNumber() << \" * \" << NR_2.getNumber() << \" = \" << PRODUCT.getNumber() << endl;\n    cout << NR_1.getNumber() << \" / \" << NR_2.getNumber() << \" = \" << DIVISION.getNumber() << endl;\n\n    return 0;\n }\n```\n\n    ", "Answer": "\r\nAs Paramagnetic Croissant said, use ```\nint64_t```\n (or ```\n__int64```\n, if your compiler does not have ```\nint64_t```\n). Even though you are on a 32-bit OS, it will work.\n\nIf you want to implement it yourself, you can't just store the number as one 32-bit number. What you are doing there is essentially creating a new class to implement a standard 32-bit integer.\n\nYou would need to track each number with 2 separate 32-bit integers and implement all of your operators to use both of the 32-bit ints making up 1 64-bit int properly to produce an output set of 2 32-bit ints that represent 1 64-bit int. Then when you consider signed vs unsigned it gets even hairier.\n\nThe short of it is, use a provided 64-bit int, like ```\nint64_t```\n.\n\nIf this is homework or something, I'd look at Microsoft's ```\nLARGE_INTEGER```\n to get a good idea of an interface to use and a way to internally represent the 64-bit integer.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Expression must be a pointer to a complete object type using simple pointer arithmetic [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Pointer arithmetic for void pointer in C\r\n                            \r\n                                (10 answers)\r\n                            \r\n                    \r\n                    \r\n                        Error: expression must be a pointer to a complete object type (?)\r\n                            \r\n                                (1 answer)\r\n                            \r\n                    \r\n                Closed 9 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI'm trying to do some basic pointer arithmetic with a void *.  My actual code computes an offset by using sizeof and then multiplying.  Here is sample code to show an instance of the issue by itself.\n\n```\nvoid * p;\np = 0;\np = p + 1;\n```\n\n\nI'm using the MSVC compiler in C (not C++).\n\nThe error is:\n\n```\nexpression must be a pointer to a complete object type  \n```\n\n\nI'm not understanding what this error is trying to say.  There is no object or struct here.  \n    ", "Answer": "\r\nPointer arithmetic is always in terms of the size of the pointed-to object(s).  Incrementing a ```\nchar*```\n will advance the address by one, whereas for ```\nint*```\n it would usually be four (bytes).  But ```\nvoid```\n has unknown size, so pointer arithmetic on ```\nvoid*```\n is not allowed by the standard.  Cast to the appropriate type first; if you just want to manipulate the address as if it were a number then cast to ```\nchar*```\n or use ```\nintptr_t```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How can I check if string input is a number?\r\n                \r\nHow do I check if a user's string input is a number (e.g., ```\n-1```\n, ```\n0```\n, ```\n1```\n, etc.)?\n```\nuser_input = input(\"Enter something:\")\n\nif type(user_input) == int:\n    print(\"Is a number\")\nelse:\n    print(\"Not a number\")\n```\n\nThe above won't work since ```\ninput```\n always returns a string.\n    ", "Answer": "\r\nSimply try converting it to an int and then bailing out if it doesn't work.\n```\ntry:\n    val = int(userInput)\nexcept ValueError:\n    print(\"That's not an int!\")\n```\n\nSee Handling Exceptions in the official tutorial.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "floating point on altera: arithmetic or dsp cores?\r\n                \r\ni want to perform some floating point operations on altera fpga, but as far i understand there are two options from IP catalog: DSP core and arithmetic fp core\n\nwhat should i choose for some basic operations like add sub sqrt mult?\n\nThanks\n    ", "Answer": "\r\nGo for the arithmetic cores. I think a lot of IP's are reused but given different names based on implementation.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "floating point on altera: arithmetic or dsp cores?\r\n                \r\ni want to perform some floating point operations on altera fpga, but as far i understand there are two options from IP catalog: DSP core and arithmetic fp core\n\nwhat should i choose for some basic operations like add sub sqrt mult?\n\nThanks\n    ", "Answer": "\r\nGo for the arithmetic cores. I think a lot of IP's are reused but given different names based on implementation.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Best way to pass a mathematical operator through method parameters\r\n                \r\nAs the question suggests I have a method as follows:\n\n```\ntemplate<typename LN, typename RN, typename LV, typename RV>\nVariableValue dataArithmetic(LN leftNode, RN rightNode, LV leftV, RV rightV) {\n\n    if (leftNode.type() == typeid(ChartData*) && rightNode.type() == typeid(ChartData*)) {\n        ChartData* temp1 = boost::get<ChartData*>(leftNode);\n        ChartData* temp2 = boost::get<ChartData*>(rightNode);\n        temp1->data *= temp2->data; // <----------------\n        return temp1;\n    }\n    else if (leftNode.type() == typeid(ChartData*) || rightNode.type() == typeid(ChartData*)) {\n        if (leftNode.type() == typeid(ChartData*)) {\n            ChartData* temp = boost::get<ChartData*>(leftNode);\n            float value = boost::lexical_cast<float>(rightV);\n            temp->data *= value; // <----------------\n            return (VariableValue)temp;\n        }\n        else if (rightNode.type() == typeid(ChartData*)) {\n            ChartData* temp = boost::get<ChartData*>(rightNode);\n            float value = boost::lexical_cast<float>(leftV);\n            temp->data *= value; // <----------------\n            return (VariableValue)temp;\n        }\n    }\n    return 0;\n}\n\n```\n\n\nCurrently this method is coded to apply multiplication, as depicted by ```\n// <----------------```\n\nHowever I need this method to support all basic arithmetic values + - * /\n\nConsidering that this function is called by:\n\n```\nVariableValue dataArith = dataArithmetic(leftNode, rightNode, leftV, rightV);\n```\n\n\nI would like the method to take a parameter that specifies which mathematical operator should be applied such as:\n\n```\nVariableValue dataArith = dataArithmetic(leftNode, rightNode, leftV, rightV, **MULTIPLICATION**);\n\n```\n\n\nWhat is the best way to do this?\n    ", "Answer": "\r\nTemplate the function on the operation:\n\n```\ntemplate<typename LN, typename RN, typename LV, typename RV, typename OP>\nVariableValue dataArithmetic(LN leftNode, RN rightNode, LV leftV, RV rightV, OP op) {\n```\n\n\nAnd then pass an appropriate operation:\n\n```\ndataArithmetic(..., std::multiplies<>{})\ndataArithmetic(..., std::plus<>{})\ndataArithmetic(..., std::minus<>{})\ndataArithmetic(..., std::divides<>{})\n```\n\n\nBefore C++14, those function objects in the standard library need template parameters (```\nstd::multiplies<double>{}```\n). C++14 or after, they do not.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to sum and subtract char* numbers?\r\n                \r\nMy problem is that I don't know how to sum huge numbers (like \"172839023498234792834798237494\" or \"-172839023498234792834798237494\"). So I made ```\nchar* m_value```\n where I will store this kind of objects. Now what I want to do is making some basic arithmetic operations. Should I first convert it or use some like ```\nitoa```\n ? In my case there is no other options then char* to store numbers.\n\nMain.cpp\n\n```\nint main(int argc, char *argv[])\n{\n    LargeNumber l1;\n    LargeNumber l3(\"172839023498234792834798237494\"); \n    LargeNumber l7(\"-172839023498234792834798237494\"); \n\n    l1 = l3 + l7;  //How to do it ?\n\n    return 0;\n}\n```\n\n\nLargeNumber.h\n\n```\nclass LargeNumber{\n\n      public:\n      LargeNumber(char* value):m_value(value)\n      {}\n\n      LargeNumber operator+(const LargeNumber&);\n      private:\n      char* m_value;\n}\n```\n\n\nLargeNumber.cpp\n\n```\nLargeNumber LargeNumber ::operator+(const LargeNumber &b)\n{\n        return LargeNumber ( ... );  //Sum both LargeNumber ???\n}\n```\n\n    ", "Answer": "\r\nYou will need to use a large numbers arithmetic library. GMP is a good option. Your processor cannot natively perform operations on numbers of this size, so these libraries take care of all the old-school math for you in software.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Cordova/PhoneGap Photo File Size\r\n                \r\nAll,\n\nI'm trying to get the file size (i.e. not the dimensions, but the actual file size in disk) of a photo using PhoneGap/Cordova 2. So far, the only way I can figure it out is through base64 conversion, then basic arithmetic on the bytes of the b64 string. However, I was wondering if there is a more elegant way to get file size. TIA.\n\nclarification: it must work on iOS 5 and Android 2.3.\n    ", "Answer": "\r\nYeah, if you have the URL to the image from the Camera.getPicture command you pass it to the window.resolveLocalFileSystemURL command who's success callback is called with a FileEntry object. Then you call the \"file\" method of FileEntry which calls the success callback with a File object then you can look at the size property of the File object.\n\nSomething like....\n\n```\nfunction takePhoto() {\n    navigator.camera.getPicture(gotPhoto, onError, { quality: 50,\n        destinationType: navigator.camera.DestinationType.FILE_URI,\n        sourceType: navigator.camera.PictureSourceType.CAMERA });\n}\n\nfunction gotPhoto(imageUri) {\n    window.resolveLocalFileSystemURI(imageUri, function(fileEntry) {\n        fileEntry.file(function(fileObj) {\n            console.log(\"Size = \" + fileObj.size);\n        });\n    });\n}\n```\n\n\nthat should work but I just wrote the code off the top of my head.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "No instance for (Fractional ((Numerator, Denominator) -> Fraction a0 b0))\r\n                \r\nI'm fairly new to Haskell and I seem to be stuck at one error in my code. I keep running into this error when I'm trying to override recip from fractional. My code is as follows:\n\n```\ntype Numerator = Int\ntype Denominator = Int\ndata Fraction a b = Fraction (Numerator,Denominator)  deriving (Show, Eq)\ninstance (Fractional a, Fractional b) => Fractional (Fraction a b) where\n    recip (Fraction(a,b)) =\n        Fraction(b,a) \n```\n\n\nIs the problem due to the Numerator and Denominator are of type Int? I don't know what I'm doing wrong, but I have basic arithmetic operations that are in working order.\n    ", "Answer": "\r\nThe problem is that you aren't using the ```\na```\n or ```\nb```\n in your ```\nFraction```\n data type, maybe you should just go with\n\n```\ndata Fraction = Fraction (Numerator, Denominator)\n\ninstance Fractional Fraction where\n    recip (Fraction (a, b)) = Fraction (b, a)\n```\n\n\nBut this also requires a ```\nNum```\n instance:\n\n```\ninstance Num Fraction where\n    ...\n```\n\n\n\n\nBasically, the reason for this error is because you specify that ```\na```\n and ```\nb```\n must be fractional, but since that ```\na```\n and ```\nb```\n aren't used in the constructor for ```\nFraction```\n the compiler has an arbitrary choice of which one to use.  It could do ```\nFractional (Fraction Float Double)```\n, or ```\nFractional (Fraction Double Float)```\n, or ```\nFractional (Fraction (Fraction Double Double) Float)```\n, so you see an error.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "BASH Arithmetic Issues\r\n                \r\nI'm working in BASH and I'm having an idiot moment right now. I've got a project I'm working on that I'm going to need to use some very basic arithmetic expressions and I just realized that a lot of my problems with it are because my variables are not updating. So I threw together a basic algorithm that increments a variable by another variable with a while loop until a certain number is reached.\n\n```\ncounter=1\ncounter2=0\n\nwhile [[ counter2 < 10 ]]; do\n   counter2=$(($counter2+$counter))\n   echo $counter\n   echo $counter2\ndone \n```\n\n\nI run the script. Does nothing. I set the ```\n<```\n to ```\n>```\n just for kicks and an infinite loop occurs with a repeated output of:\n\n```\n1\n0\n1\n0\n```\n\n\nForever and ever until I stop it. So it's obvious the variables are not changing. Why? I feel like such an idiot because it must be something stupid I'm overlooking. And why, when I have ```\n<```\n, it also isn't an infinite loop? Why doesn't it print anything at all for that matter? If ```\ncounter2```\n is always less than 10, why doesn't it just keep going on forever?\n\nThanks folks in advance.\n\nEDIT: Well, I realize why it wasn't outputting anything for when the check is ```\n<```\n... I should have been using ```\n$counter2```\n instead of just ```\ncounter2```\n to get the actual value of ```\ncounter2```\n. But now it just outputs:\n\n```\n1\n2\n```\n\n\nAnd that's it... I feel like such a derp.\n    ", "Answer": "\r\nIf this is all bash (100% sure) then you could use ```\ndeclare -i```\n in order to explicitly set type of your variables and then your code will be as simple as :\n\n```\ndeclare -i counter=1\ndeclare -i counter2=0\n\nwhile [[ $counter2 -lt 10 ]]; do\n   counter2=$counter2+$counter\n   echo $counter\n   echo $counter2\ndone\n```\n\n\nEDIT:\nIn bash, you can do arithmatic comparison with double paranethesis. So, your while can be written as:\n\n```\nwhile (($counter2 <  10)) ; do\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Loading packages Netezza R\r\n                \r\nI am using R on IBM's Netezza to process large amounts of data. We have been able to launch R and perform basic arithmetic using the core language. However, we are unable to use even the most basic packages including nza. \n\n```\nlibrary(nza)\nError in library(nza) : there is no package called ‘nza’\n```\n\n\nSpecifically, my question is how can I download basic packages in R using the Netezza and then point the R environment to wherever they have been downloaded to. Also if I could get directions for doing this from the terminal as opposed to the gui that would be best.\n\nThanks!\n    ", "Answer": "\r\nI believe it is an old thread. But I installed nza recently. So sharing it. \nPlease download the packages from this link and use \"Install packages from Local Zip Files\" to install them. \n\ninstall.packages(\"C:.../Netezza_R_Installation_and_Client_R-3_v2/packageZips/nzr_3.0.2.zip\", repos = NULL, type = \"win.binary\")\n\nI believe you have options to set the library path.\n\nhttps://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/W4c715f465f89_464f_9fd9_b1d36a3c54f8/page/Installing%20Open%20R%20on%20PureData%20for%20Analytics%20(Netezza)\n\nI tried this in R version 3.2.0.\n\nIt requires other packages. Please download the archived versions of the other packages from CRAN.\n\nI reread your question. I am a developer and I don't have access to the Netezza box. So I am trying to connect to the box using Rstudio.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to build a comparison operator (comparitor) in an arithmetic circuit\r\n                \r\nI am trying to convert a basic program into an arithmetic circuit. I am stuck on the step of converting the greater than operator into an arithmetic circuit. To be specific, I do not know how to convert the following into an arithmetic circuit (where x,y is input):\n\n```\nif x >= y:\n    return 1\nelse:\n    return 0```\n\n\nTo be clear, I need to be able to express this in terms of an ARITHMETIC circuit. Meaning that I need to be able to compute this using only addition and multiplication of numbers (in Z_p).\n\nI've been searching all of the web for solutions, but everything I find tells me how to do this with boolean circuits. I am aware that I can convert the numbers into their bit string and do this boolean way. I would like to know of any alternative way to do this. This show be possible to do with just addition and multiplication, but I cannot figure out how to.\n    ", "Answer": "\r\nYou do not need any circuit if you use the proper coding for your data. The best and most widely used to code signed integers is two's complement.\nPositive numbers are coded by their binary code and a negative number A&lt0; is rendered positive by considerig 2^n-|A|=2^n+A where n is the number of bits n the code.\n\nTwo's complement has (at least) two main advantages.\nThe first one is that it largely simplifies arithmetic operations. For instance, as a negative number A is coded arithmetically by 2^n+A, one does not have to care about the sign of operands, provided bit over 2^n are ignored, and adding signed    numbers is identical to adding unsigned.\n\nA second advantage is that  positive numbers are in the range 0..2^(n-1)-1 and always has their most significant bit unset. Negative numbers are in the range -1..-2^(n-1). Once added to 2^n the range of their code is 2^(n-1)..2^n-1 and corresponds to number with the most significant bit set. So, to know if a number is >=0, it is just required to test its most significant bit. \n\nSo there is no real \"circuit\" or arithmetic operator to do that. In a program, this can be done by computing an \"and\" with the MSB.\n\n```\nint is_positive(int x) { return (x & (1<<31)) == 0 ); }\n```\n\n\nThere is no way to express it only with arithmetic operations without either an and, an or or a comparison. And you must have a way to detect if a number is entirely at 0, which requires logic gates.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Align numerical precision Excel 2013 and R\r\n                \r\nIt is a rather broad question, but I replicated an Excel model in R. R produces almost the same results as excel, but there is always a slight % deviation in the range of 10^-8. I assume this is due to numerical precision. The model uses only basic arithmetic operations. \nMy question would be: is there a simple way to force R to use the same numerical precision as Excel? \n    ", "Answer": "\r\nProbably not.  R always uses double-precision (i.e., 8-byte) floating point, and and it seems that's also what Excel uses.\n\nIt is indeed mildly surprising that the results are not identical if you're only doing simple arithmetic, but note that even changing the sequence of arithmetic operations can change the results (i.e., floating-point arithmetic is not associative: ```\n(a+b)+c != a+(b+c)```\n, so if arithmetic is done left-to-right, ```\na+b+c != c+b+a```\n). It's probably impossible to even know what Excel is doing under the hood, although this (which may? only apply to Excel 2003) states points at which Excel deviates from the IEEE 754 standard used by R and most other numerical programs.\n\nYou might be able to get exact equality by working up from simple to more complex examples, seeing where the divergence occurs, and rearranging your computations to avoid the problem, but unless this equality is extremely important to you/worth investing a lot of effort, you may be better off testing for approximate equality.\n\nIt's conceivable that export to CSV is losing precision (e.g. see here).\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How can I add advance functionality in my Tkinter calculator?\r\n                \r\nI am just a beginner, learning Tkinter, for Python. I tried creating a calculator that can do basic arithmetic operations by means of StringVar() and concatenation of string. Now, I want to add functionality like for e.g calculation of factorial. Can anyone tell me what's the way of integrating my factorial function with the output so that I can integrate more functions into it?\n```\nfrom tkinter import *\nwindow = Tk()\nwindow.title('Calculator')\nwindow.config(bg='black')\n# Gets the requested values of the height and widht.\nwindowWidth = window.winfo_reqwidth()\nwindowHeight = window.winfo_reqheight()\nprint(\"Width\", windowWidth, \"Height\", windowHeight)\n\n# Gets both half the screen width/height and window width/height\npositionRight = int(window.winfo_screenwidth() / 4 - windowWidth / 2)\npositionDown = int(window.winfo_screenheight() / 4 - windowHeight / 2)\n\n# Positions the window in the center of the page.\nwindow.geometry(\"+{}+{}\".format(positionRight, positionDown))\n\n\nwindow.focus()\nfrom tkinter import *\n\neq = StringVar()\neq.set('hello guys, i am a cute lil calculator')\ninitialzing = \"\"\n\ndef click_it(num):\n    global initialzing\n\n    initialzing = initialzing + str(num)\n    eq.set(initialzing)\n\ndef pressequal():\n    try:\n        global initialzing\n        total = str(eval(initialzing))\n        eq.set(total)\n        initialzing = \"\"\n    except:\n        eq.set(\"Syntax error \")\n        initialzing = \"\"\n\n\ndef clear():\n    global initialzing\n    initialzing = \"\"\n    eq.set(\"\")\n\ne = Entry(width=55, borderwidth=65, font=\"Helvetica 10 bold\", bg='blue', textvariable=eq)\ne.grid(ipady=15)\ne.grid(columnspan=4, column=0, row=0, padx=10,pady=40)\n# define_button\nbutton_1 = Button(text='1', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it(1))\nbutton_2 = Button(text='2', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it(2))\nbutton_3 = Button(text='3', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it(3))\nbutton_4 = Button(text='4', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it(4))\nbutton_5 = Button(text='5', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it(5))\nbutton_6 = Button(text='6', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it(6))\nbutton_7 = Button(text='7', padx=70, pady=20, fg='white',bg='gray',command=lambda: click_it(7))\nbutton_8 = Button(text='8', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it(8))\nbutton_9 = Button(text='9', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it(9))\nbutton_0 = Button(text='0', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it(0))\nbutton_clear = Button(text='CLR', padx=70, pady=20, bg='orange', command=clear)\nbutton_add = Button(text='+', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it('+'))\nbutton_equal = Button(text='=', padx=70, pady=20,fg='white',bg='gray', command=pressequal)\nbutton_subtract = Button(text='-', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it('-'))\nbutton_multiply = Button(text='x', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it('*'))\nbutton_decimal = Button(text='.', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it('.'))\nbutton_divide = Button(text='÷', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it('/'))\nbutton_bracket_left=Button(text='(',  padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it('('))\nbutton_bracket_right=Button(text=')', padx=70, pady=20,fg='white',bg='gray', command=lambda: click_it(')'))\n# postion them\nbutton_0.grid(row=4, column=0)\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)\nbutton_6.grid(row=2, column=2)\nbutton_7.grid(row=1, column=0)\nbutton_8.grid(row=1, column=1)\nbutton_9.grid(row=1, column=2)\nbutton_decimal.grid(row=5, column=2)\nbutton_equal.grid(row=5, column=1)\nbutton_clear.grid(row=5, column=0)\nbutton_subtract.grid(row=3, column=3)\nbutton_multiply.grid(row=2, column=3)\nbutton_add.grid(row=1, column=3)\nbutton_divide.grid(row=4, column=3)\nbutton_bracket_left.grid(row=4, column=1)\nbutton_bracket_right.grid(row=4, column=2)\n\nwindow.mainloop()\n```\n\n    ", "Answer": "\r\nYou can create a separate function for calculating the factorial the algorithm is really simple\n```\ndef Fact(n):\n    Factorial=1\n    for i in range(2,n+1)\n        Factorial = Factorial*i\n\n    return Factorial\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How should I use the `mean` function when there are outliers in the distribution? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     This question does not appear to be about programming within the scope defined in the help center.\r\n                \r\n                    \r\n                        Closed 2 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nfor a project I need to get a mean each time, this mean I then use it to compare it to a distribution under the ```\nnull hypothesis H0.```\n However sometimes some values (few) are much larger than all the other values, so if I use a basic arithmetic mean these values will ```\ngreatly impact```\n the final mean.\nHere is an example\n\nHere if I do an arithmetic mean I get about 90, while in reality we can see that the vast majority of values on the axis are around 50.\nDo you have an idea of an average that would be used in this kind of case?\n    ", "Answer": "\r\n1. Use median\n```\nmedian(x)```\n\nThe median is a summary statistic which isn't 'thrown' by outliers.\n2. Use a trimmed mean\n```\nmean(x, trim = .05)```\n\nA trimmed mean is the mean of all values except those in the highest and lowest ```\nn```\n%, where ```\nn```\n is a value you choose. The code above would return the mean of every value in ```\nx```\n except the highest 5% and the lowest 5%.\nWhatever you do, make sure you report transparently.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "gcc - frontend - submit assembly\r\n                \r\nI am creating a front-end for a custom language in ```\ngcc```\n.\nIf it is simple to manage basic arithmetic and addressing, it is not clear to me how to submit assembly commands.\n\nHow to submit assembly code to ```\ngcc```\n for my language, that are architecture dependent?\n\nExample:\n\n```\n#if ARCH=x86 || ARCH = x86_64\n    pmuludq(myxmm1,myxmm2);\n    paddusw(myxmm1,myxmm2);\n    out(myaddress,myvalue);\n#end\n```\n\n\nThe submitted assembly will always only see instructions or I/O.\n\nSo the output should be:\n\n```\n//For out, in gas syntax:\nout %register_containing_myvalue, %the_port_address\n```\n\n\nIt is just inline assembly that I need.\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Perform arithmetic on each element of a vector (column) based on the previous vector element over multiple vectors (columns) in a data frame\r\n                \r\nI have a data frame with 12 columns, and I need to perform some basic arithmetic on 7 of them: columns 5:12. The data frame, named test is pasted below.\n\nThe arithmetic I am looking to perform would change each element based on the previous element except for the first in each column as the arithmetic for the first element of each column is different than the subsequent elements. Also, the element vector would be changed by the equation as its original value is involved. I did the arithmetic for the first element in a previous line of code, so that's already the correct value. \n\nHere is the math: \n\n```\nB = (1-.08)Bt + .08(z)\n```\n\n\nwhere Bt is the previous element's value and z is the current element's value. Each element will then become B. \n\nEDIT: I probably wasn't clear, but Bt will be the newly calculated value of B from the previous element. So this has a step by step progression. \n\nI've been attempting this with apply, but I'm confused because I've only done something similar on single vectors in the past with a for loop, but in that case, I created brand new vector elements based on previous elements, and like this example, the first element was pre-defined. \n\nI can conceptualize this, but can't code it with my current skill set in R. \n\nAny help is much appreciated. Thanks. \n\nData:\n\n\n\n```\n test <- \n\n structure(list(Forecast_day = c(8, 8, 8, 8, 8, 8), Forecast_date = structure(c(17555, \n    17556, 17557, 17558, 17559, 17560), class = \"Date\"), DeliveryDate = structure(c(17563, \n    17564, 17565, 17566, 17567, 17568), class = \"Date\"), HourEnding = c(1L, \n    1L, 1L, 1L, 1L, 1L), Coast = c(-0.0459999999999999, -11.6, -3.8, \n    -7.09999999999999, -9.6, -11.2), East = c(0.01, -8.5, -1.5, -3.5, \n    -0.5, -9.5), FarWest = c(-0.07, -6.5, -9, -11.5, 6, -10.5), North = c(0.01, \n    -2.5, -1.5, -1.5, 14, 0), NorthCentral = c(-0.07, -7.25, -5.75, \n    -10.75, 6.75, 1.5), SouthCentral = c(-0.01, -10, -8.5, -3.5, \n    -8.5, -11), Southern = c(-0.04, -10.8, -4.6, -7.8, -9.6, -12), \n        West = c(-0.16, -7.4, -6.6, -13.2, 7.8, -9)), .Names = c(\"Forecast_day\", \n    \"Forecast_date\", \"DeliveryDate\", \"HourEnding\", \"Coast\", \"East\", \n    \"FarWest\", \"North\", \"NorthCentral\", \"SouthCentral\", \"Southern\", \n    \"West\"), row.names = c(NA, -6L), class = \"data.frame\")\n```\n\n    ", "Answer": "\r\nYou can use the ```\nReduce```\n meta-function to sequentially apply the arithmetic along a vector, using the previous result as one of the inputs.\n\nFirst, wrap the arithmetic in a function.\n\n```\nupdate_with_previous <- function(previous, current) {\n  (1 - 0.08) * previous + 0.08 * current\n}\n```\n\n\nTo do it for one column, use the function in ```\nReduce```\n and set ```\naccumulate = TRUE```\n to keep each result.\n\n```\nReduce(update_with_previous, test$Coast, accumulate = TRUE)\n# [1] -0.046000 -0.970320 -1.196694 -1.668959 -2.303442 -3.015167\n```\n\n\nUse ```\nlapply```\n to replace multiple columns at the same time.\n\n```\ntest[5:12] <- lapply(\n  X          = test[5:12],\n  FUN        = Reduce,\n  f          = update_with_previous,\n  accumulate = TRUE\n)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Are there more complex functions to call from within Solidity (Smart Contracts/Ethereum)?\r\n                \r\nI am wondering besides these below mathematical expressions are there any other functions available to call inside a smart contract?  Like math functions, like pi, sin, cosine, random() etc?\nI am wondering if one can write smart contracts that require a little more than just basic arithmetic.\nBelow Image is taken from this page:\nhttps://docs.soliditylang.org/en/develop/cheatsheet.html#function-visibility-specifiers\n\n    ", "Answer": "\r\nSolidity doesn't natively support storing floating point numbers both in storage and memory, probably because the EVM (Ethereum Virtual Machine; underlying layer) doesn't support it.\nIt allows working with them to some extent such as ```\nuint two = 3 / 1.5;```\n.\nSo most floating point operations are usually done by defining a ```\nuint256```\n (256bit unsigned integer) number and another number defining the decimal length.\nFor example token contracts generally use 18 decimal places:\n```\nuint8 decimals = 18;\n\nuint256 one  = 1000000000000000000;\nuint256 half =  500000000000000000;\n```\n\n\nThere are some third-party libraries for calculating trigonometric functions (link), working with date time (link) and other use cases, but the native language currently doesn't support many of these features.\n\nAs for generating random numbers: No native function, but you can calculate a modulo of some pseudo-random variables such as ```\nblock.hash```\n and ```\nblock.timestamp```\n. Mind that these values can be (to some extent) manipulated by a miner publishing the currently mined block.\nIt's not recommended to use them in apps that work with money (pretty much most of smart contracts), because if the incentive is big enough, there can be a dishonest miner who can use the advantage of knowing the values before rest of the network and being able to modify them to some extent to their own benefit.\nExample:\n```\n// a dishonest miner can publish a block with such params,\n// that will result in the condition being true\n// and their own tx to be the first one in the block that executes this function\nfunction win10ETH() external {\n    if (uint256(blockhash(block.number)) % 12345 == 0) {\n        payable(msg.sender).transfer(10 ether);\n    }\n}\n```\n\nIf you need a random number that is not determinable by a miner, you can use the oracle approach, where an external app (called oracle) listens to transactions in a predefined format (generally also from&to specific addresses), performs an off-chain action (such as generating a random number, retrieving a google search result, or basically anything) and afterwards sends another transaction to your contract, containing the result of the off-chain action.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "MS Access SQL: Adding two COUNT statements returns multiple copies of the sum instead of one\r\n                \r\nSo I'm attempting to perform basic Arithmetic functions (+, -, *, /) between two different COUNTS.  In test runs, I have been about to get the query to return the sum of my two counts (\"724\") with the following statement:\n\n```\nSELECT (SELECT COUNT(qryAttainment.[Attainment Samples Received]) \n          FROM qryAttainment \n          WHERE qryAttainment.[Attainment Samples Received]=\"On Time\") +\n       (SELECT COUNT(qryAttainment.[Attainment CofA Issued]) \n          FROM qryAttainment \n         WHERE qryAttainment.[Attainment CofA Issued]=\"On Time\") AS [Test] \n  FROM qryAttainment\n```\n\n\nUnfortunately, it is returning 1240 rows all filled with the same number (\"724\").  How can I get it to just return a single row with the desired answer?\n    ", "Answer": "\r\n```\nSELECT \n    SUM(IIF(qryAttainment.[Attainment Samples Received]=\"On Time\", 1, 0)) \n    +\n    SUM(IIF(qryAttainment.[Attainment CofA Issued]=\"On Time\", 1,  0))\n FROM qryAttainment\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Overload all arithmetic operators in Python\r\n                \r\nSuppose I build a class that basically represents a number plus some fancy stuff. Instances of that class should behave like numbers in any arithmetic/mathematical operation.\n\nI could overload all numeric operators in that class, but is there no shorter solution?\n\nThe class basically looks like:\n\n```\nclass MyFancyNumber:\n    def __init__(self, num, info):\n        self.num = num # the actual number\n        self.info = info # some more info, or other data\n    def doFancyStuff(self):\n        # does something fancy\n    def __add__(self, other):\n        return self.num + other # same pattern for all numeric functions\n```\n\n    ", "Answer": "\r\nWhat about this?\n\n```\nclass MyFancyNumber(int):\n    def __new__(cls, num, info=None):\n        return super(MyFancyNumber, cls).__new__(cls, num)\n    def __init__(self, num, info=None):\n        self.num = num\n        self.info = info\n>>> MyFancyNumber(5)\n5\n>>> MyFancyNumber(5) + 2\n7\n>>> MyFancyNumber(5) / 4\n1\n>>> MyFancyNumber(5) * 0.5\n2.5\n>>> MyFancyNumber(5) - 7\n-2\n>>> MyFancyNumber(5, 'info').info\n'info'\n```\n\n\nI guess based on the above, you can figure out what you need.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to hide an angular expression if null when there is math inside the expression\r\n                \r\nI have several brief Angularjs expressions on a page which perform some basic arithmetic with a value.  Because of the arithmetic, they always evaluate to null, until a value has been passed.  I realise this may not be the best way to approach this problem, and am open to suggestions, but I think for this scenario I would simply like to know how to hide the NaN's from the view.\n\n```\n{{myItem.value / 4}}\n```\n\n\nI have tried the solution mentioned here but I think my case is different because the math is being evaluated each time, thus returning NaN, not a number, (null).\n    ", "Answer": "\r\nTry like this\n\n```\n<div ng-hide=\"!(myItem.value / 4)\">\n  {{myItem.value / 4}}\n</div>\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Checksum without logic/bitwise operations\r\n                \r\nI need to calculate a 1 byte checksum over 15 bytes. My first idea was to use something like crc8, but the problem is that I have to use a really limited BASIC interpreter which only supports basic arithmetic operations (+-*/) but no bitwise \"xor\", \"and\" or \"or\" and no \"shift\" operations.\n\nSo my question is: is it possible to calculate a somewhat reasonable checksum with these limitations? I think calculating the sum would be a poor solution, but I can't think of something else at the moment.\n    ", "Answer": "\r\n```\nLET a = 1\nLET b = 0\nFOR n = 1 to 15\n   LET a = a + c(n)\n   LET b = b + a\nNEXT n\nLET b = mod(b, 251)\n```\n\n\nThen use ```\nb```\n as the check value.  The advantage of this over a simple sum is that it is not commutative.  The order of the bytes matter.  Also a string of zeroes does not give you zero, and the check value depends on how many zeros.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "SQL How to convert a date into hours per minute? Then subtract two of the colums (end-start) and set it as a new column?\r\n                \r\nI am wondering, how can I convert datetime into hours per minute? I want the following. To minus the end_trip with the start_trip that is in hours and minutes. Moreover, I want to create a new column for the result. However, I am getting nowhere. I want to use basic arithmetic for this not some built in functions like DATEDIFF. Please help.\nBelow is my code\n```\nINSERT INTO TRIP VALUES( \nTO_DATE('26-01-2022 14:00:00', 'DD/MM/YYYY HH24:MI:SS'), - start_time \nTO_DATE('26-01-2022 14:50:00', 'DD/MM/YYYY HH24:MI:SS')  - end_time\n; \n\nSELECT \ntrip_start_actual as start_time, trip_end_actual as end_time, (trip_end_actual - trip_start_actual)\nfrom trip;\ncommit;\n```\n\n    ", "Answer": "\r\nSubtracting two dates in Oracle will yield a difference in fractional days.  To get minutes from that, simply multiply that difference by 1440:\n```\nSELECT trip_start_actual AS start_time,\n       trip_end_actual AS end_time,\n       1440 * (trip_end_actual - trip_start_actual) AS num_minutes\nFROM trip;\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Help with Pointer Arithmetic\r\n                \r\nI've been studying C++ for a test and I am currently stuck with pointer arithmetic.\n\nThe basic problem is the following:\n\n```\nint numColumns = 3;\nint numRows    = 4;\n\nint a[numRows][numColumns];\n\na[0][0] = 1;\na[0][1] = 2;\na[0][2] = 3;\na[1][0] = 4;\na[1][1] = 5;\na[1][2] = 6;\na[2][0] = 7;\na[2][1] = 8;\na[2][2] = 9;\na[3][0] = 10;\na[3][1] = 11;\na[3][2] = 12;\n\nfor (int i=numColumns-1; i>-1;i--)\n{\n  cout << a[numRows-1][i] << endl;\n}\n```\n\n\nA very simple program which prints the lower \"row of the matrix\".  i.e. 12,11,10.\n\nNow I am trying to do the equivalent with a int*.\n\nWhat I have been told by my classmates is to think it like this:\n\n```\narray[i][j] == p[numColumns*i+j]\n```\n\n\nIf that is correct, shouldn't the following be equivalent to what I'm looking for:\n\n```\nint* p = reinterpret_cast<int*> a;\nfor (int i=numColumns-1; i>-1;i--)\n{\n  cout << p[numColumns*(numRows-1)+i] << endl;\n}\n```\n\n\nThanks.\n    ", "Answer": "\r\nint ```\narray[3][5]```\n is NOT an abstraction (in the C++ language) for ```\nint array[3*5]```\n.  The standard says that a 2 dimensional array (and N-dimensional arrays in general) are arrays of arrays.  That ```\narray[3][5]```\n is an array of three elements, where each element is an array containing 5 elements (integers in this case).  C++'s type system does make that distinction.\n\nAccording to the C++ standard, and array ```\nT array[N]```\n is a contiguous block of memory containing the N elements of type T.  So that means that a multidimensional array, let's say int array[3][5] will be a continuous block of memory containing 3 ```\nint[5]```\n arrays, and each ```\nint[5]```\n array is a contiguous block of 5 ```\nints```\n.\n\nOn my machine, the memory ends up laid out exactly as you would expect - identical to ```\nint array[3*5]```\n.  The way the memory is treated is different however, due to the type system (which distinguishes between ```\nint[]```\n and ```\nint[][]```\n).  This is why you need to use a ```\nreinterpret_cast```\n which essentially tells your compiler \"take this memory and without doing any conversion, treat it like this new type\".\n\nI'm not completely sure if this memory layout is guaranteed however.  I couldn't find anything in the standard stating that arrays can't be padded.  If they can be padded (again, I'm not sure) then it's possible that the ```\nint[5]```\n array is not actually 5 elements long (a better example would be ```\nchar[5]```\n, which I could see being padded to 8 bytes).\n\nAlso there is an appreciable difference between ```\nint*```\n and ```\nint**```\n since the latter doesn't guarantee contiguous memory.\n\nEDIT: The reason that C++ distinguishes between ```\nint[3*5]```\n and ```\nint[3][5]```\n is because it wants to guarantee the order of the elements in memory.  In C++ ```\nint[0][1]```\n and ```\nint[0][2]```\n are ```\nsizeof(int)```\n apart in memory.  However in Fortran, for example, ```\nint[0][0]```\n and ```\nint[1][0]```\n are ```\nsizeof(int)```\n apart in memory because Fortran uses column major representation.\n\nHere's a diagram to help explain:\n\n```\n0 1 2\n3 4 5\n6 7 8\n```\n\n\nCan be made into an array that looks like {0,1,2,3,4,5,6,7,8} or an array that looks like: {0,3,6,1,4,7,2,5,8}.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Using ANTLR with Left-Recursive Rules\r\n                \r\nBasically, I've written a parser for a language with just basic arithmetic operators ( +, -, * / ) etc, but for the minus and plus cases, the Abstract Syntax Tree which is generated has parsed them as right associative when they need to be left associative. Having googled for a solution, I found a tutorial that suggests rewriting the rule from: \n\n```\nExpression ::= Expression <operator> Term | Term`\n```\n\n\nto\n\n```\nExpression ::= Term <operator> Expression*```\n\n\nHowever, in my head this seems to generate the tree the wrong way round. Any pointers on a way to resolve this issue?\n    ", "Answer": "\r\nFirst, I think you meant\n\n```\nExpression ::= Term (<operator> Expression)*\n```\n\n\nBack to your question: You do not need to \"resolve the issue\", because ANTLR has no problem dealing with tail recursion. I'm nearly certain that it replaces tail recursion with a loop in the code that it generates. This tutorial (search for the chapter called \"Expressions\" on the page) explains how to arrive at the e1 = e2 (op e2)* structure. In general, though, you define expressions in terms of higher-priority expressions, so the actual recursive call happens only when you process parentheses and function parameters:\n\n```\nexpression : relationalExpression (('and'|'or') relationalExpression)*;\nrelationalExpression : addingExpression ((EQUALS|NOT_EQUALS|GT|GTE|LT|LTE) addingExpression)*;\naddingExpression : multiplyingExpression ((PLUS|MINUS) multiplyingExpression)*;\nmultiplyingExpression : signExpression ((TIMES|DIV|'mod') signExpression)*;\nsignExpression : (PLUS|MINUS)* primeExpression;\nprimeExpression : literal | variable | LPAREN expression /* recursion!!! */ RPAREN;\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "arduino uno with 8-bit MCU (ATmega328) but program with 32-bit C/C++ program\r\n                \r\nI would appreciate it a lot for your patience to explain on a seemingly naive question?\n\nAn Arduino Uno with 8-bit MCU (ATmega328), yet we program it with 32 bit C program customs? why?\n\n\nArduino Uno(for example), uses the 8-bit AVR MCU (ATmega328), which I understand the addressing mode and basic arithmetic operations are on 8-bit operations, \nwhile when I program in the Arduino IDE, by default I am programming like it is a 32-bit C/C++ program (for example, I can define uint32_t,....or, ) \n\n\nso is this all done by the compiler in Arduino IDE ? (who's that ? avr-gcc? )\n\nand... the compile does more work to translate 32-bit arithmetic operations to 8-bit arithmetic operations ? \n    ", "Answer": "\r\nEach processor / micro controller operates on a specific instruction set. Essentially it is the compilers job to compile your source code into machine code, thus the compiler has to know the (8-bit) instruction set of the processor. So if you take a uint32_t addition for example, it has to \"compile\" it into several add instructions, because the 8-bit AVR is only able to add two 8 bit values. This is a simplified example but I hope you get the idea.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is there a constraint that restricts my generic method to numeric types?\r\n                \r\nCan anyone tell me if there is a way with generics to limit a generic type argument ```\nT```\n to only:\n\n\n```\nInt16```\n\n```\nInt32```\n\n```\nInt64```\n\n```\nUInt16```\n\n```\nUInt32```\n\n```\nUInt64```\n\n\n\nI'm aware of the ```\nwhere```\n keyword, but can't find an interface for only these types,\n\nSomething like:\n\n```\nstatic bool IntegerFunction<T>(T value) where T : INumeric \n```\n\n    ", "Answer": "\r\nMore than a decade later, this feature finally exists in .NET 7. The most generic interface is ```\nINumber<TSelf>```\n rather than ```\nINumeric```\n (in the ```\nSystem.Numerics```\n namespace), and it encompasses not just integer types. To accept just integer types, consider using ```\nIBinaryInteger<TSelf>```\n instead. To use the example of your prototypical, mystical ```\nIntegerFunction```\n:\n```\nstatic bool IntegerFunction<T>(T value) where T : IBinaryInteger<T> {\n    return value > T.Zero;\n}\n```\n\n```\nConsole.WriteLine(IntegerFunction(5));         // True\nConsole.WriteLine(IntegerFunction((sbyte)-5)); // False\nConsole.WriteLine(IntegerFunction((ulong)5));  // True\n```\n\n\nThe (now obsolete) answer below is left as a historical perspective.\nC# does not support this. Hejlsberg has described the reasons for not implementing the feature in an interview with Bruce Eckel:\n\nAnd it's not clear that the added complexity is worth the small yield that you get. If something you want to do is not directly supported in the constraint system, you can do it with a factory pattern. You could have a ```\nMatrix<T>```\n, for example, and in that ```\nMatrix```\n you would like to define a dot product method. That of course that means you ultimately need to understand how to multiply two ```\nT```\ns, but you can't say that as a constraint, at least not if ```\nT```\n is ```\nint```\n, ```\ndouble```\n, or ```\nfloat```\n. But what you could do is have your ```\nMatrix```\n take as an argument a ```\nCalculator<T>```\n, and in ```\nCalculator<T>```\n, have a method called ```\nmultiply```\n. You go implement that and you pass it to the ```\nMatrix```\n.\n\nHowever, this leads to fairly convoluted code, where the user has to supply their own ```\nCalculator<T>```\n implementation, for each ```\nT```\n that they want to use. As long as it doesn’t have to be extensible, i.e. if you just want to support a fixed number of types, such as ```\nint```\n and ```\ndouble```\n, you can get away with a relatively simple interface:\n```\nvar mat = new Matrix<int>(w, h);\n```\n\n(Minimal implementation in a GitHub Gist.)\nHowever, as soon as you want the user to be able to supply their own, custom types, you need to open up this implementation so that the user can supply their own ```\nCalculator```\n instances. For instance, to instantiate a matrix that uses a custom decimal floating point implementation, ```\nDFP```\n, you’d have to write this code:\n```\nvar mat = new Matrix<DFP>(DfpCalculator.Instance, w, h);\n```\n\n… and implement all the members for ```\nDfpCalculator : ICalculator<DFP>```\n.\nAn alternative, which unfortunately shares the same limitations, is to work with policy classes, as discussed in Sergey Shandar’s answer.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Linear Equation rearrange\r\n                \r\nI have a formula shows below,\n\n```\n((((c1+c2)/c3)*c4)-c5+c6)\n```\n\n\nThis formula format can be vary which means this formula generating from the end user. It can be any format. we are using only basic arithmetic operatiors ie, ```\n+```\n, ```\n-```\n , ```\n*```\n , ```\n/```\n and ```\n(```\n,```\n)```\n.\n\nI can choose any one value to find out. If i choose ```\nC3```\n to find out the value, the formula needs to be modified like below,\n\n```\nC3 = (c1+c2)*(c4/(c5-c6))\n```\n\n\nSuggestion and ideas welcome please. Any API available?\n    ", "Answer": "\r\nI think I would consider starting with 2 Collections, one to indicate the left hand side of the equation and one for the right hand side. The RHS would start with just one element, the entire formula. Then, start stripping off parentheses from the outside working in. And as each element becomes exposed, add it to the 2nd collection, making sure to inverse the operation. Then, as soon as you move the element you're searching for, start moving from the 2nd collection back to the first.\n\nSince I really think this is homework, I don't want to give a code answer, but my above gibberish translates to \"step through the arithmetic transformations\". So, to expose C3:\n\n```\n((((c1+c2)/c3)*c4)-c5+c6)\n(((c1+c2)/c3)*c4)-c5+c6\n(c5 - c6) = (((c1+c2)/c3)*c4)\n(c5 - c6) = ((c1+c2)/c3)*c4\n((c5 - c6) / c4) = ((c1+c2)/c3)\n((c5 - c6) / c4) = (c1+c2)/c3\n(c3* ((c5- c6) / c4) = (c1 + c2)\nc3* (c5- c6) = (c1 + c2) * c4\nc3 = (((c1 + c2) * c4) / (c5 - c6))\n```\n\n\nI'm not entirely certain where I went wrong that my final equation differs from yours, but I believe that is the approach I would take - step through each transformation until the variable you need is exposed.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "PHP right shifting and negative result?\r\n                \r\nI've run into a problem whilst converting some C code to PHP, specifically in the use of the right-shift operator.\n\nedit: in the following examples, bit = 0;\n\nOriginal C code:\n\n```\np->param->outBits[bytePtr++] |= codeword >> (9 + bit);\n```\n\n\nPHP code:\n\n```\n$outBits[$bytePtr++] |= $codeword >> (9 + $bit);\n```\n\n\nIf I start with ```\ncodeword```\n being 130728, in C I get the expected result of -1.  In PHP I get 255.  I understand this is something to do with arithmetic/logical shift differences, and the negative sign not being introduced as a result of the MSBs staying at zero.\n\nIs there a \"quick\" way of doing the above in PHP that doesn't involve the shifting? eg via basic arithmetic or similar, that will give me the expected answer?\n    ", "Answer": "\r\nYour problem is that PHP doesn't have a type ```\nbyte```\n, it only has ```\ninteger```\n which usually is 32 bits (not 8), so if you really need negative value there (the bits are correct anyway, because unsigned 255 is the same as signed -1), then you should probably add the missing 24 ones or use arithmetics to restore the negative value (255 is -1, 254 is -2 and so on i.e. 256 - x = -x).\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Need to return an integer whose binary representation is the same as that of i in reverse.\r\n                \r\nWorking on an assignment that asks to rewrite all basic arithmetic operations(add/subtract/multiply) only using the bit-wise operators.\n  One of the incomplete methods has the following description \" returns the integer whose binary representation is the same as that of i in reverse. \"\n  I've successfully rewritten the add(),subtract() and multiply functions, but need suggestions as to how approach this one. \nAs of right now this is all I have.. \n\n```\n unsigned int reverse(unsigned int i)\n{\n    {\n        int reverse;\n        while (i != 0)\n        {\n            reverse = reverse * 10;\n            reverse = reverse + i%10;\n            i = i/10;\n        }\n        return i;\n     }\n}\n```\n\n    ", "Answer": "\r\nIf you are looking to build a new binary representation, you should use binary operations:\n\n\nUse ```\n<<```\n to multiply by 2\nUse ```\n& 1```\n to determine the value of the least significant bit\nUse bitwise OR ```\n|```\n instead of addition to set the least significant bit\nUse ```\n>>```\n to divide by 2\n\n\nOnce you rewrite your code with these changes, you would get the expected results.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How does Java supports architectural neutrality by specifying the behavior of its arithmetic operators?\r\n                \r\nI was reading the Java Language Environment document at(https://www.oracle.com/java/technologies/introduction-to-java.html). In this paper, it is mentioned that\n\n\"Java technology puts a stake in the ground and specifies the sizes of its basic data types and the behavior of its arithmetic operators.\"\n\nI know that in C/C++ the fundamental types are not strictly defined as in Java. But I do not understand the \"behavior of arithmetic operators\" part. Does the author mean that in C/C++ the behavior of arithmetic operators(on fundamental data types) is compiler/platform-dependent? If so, can anyone provide an example of how this above-mentioned behavior is different in Java when compared to C/C++ (or any other language)?\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to introduce the infinity in the Tropical Arithmetic using Z3\r\n                \r\nThe following code introduces the basic properties of the Tropical Arithmetic using Z3 with SMT-LIB:\n\n```\n; This example illustrates basic tropical arithmetic \n\n(define-fun tropadd  ((a Real)(b Real)) Real (if (> a b)\n                                        b\n                                        a))\n(define-fun tropmul ((a Real)(b Real)) Real (+ a b))\n(declare-fun x () Real)\n(declare-fun y () Real)\n(declare-fun z () Real)\n(push)\n(assert(not(= (tropadd x y) (tropadd y x))))\n(check-sat)\n(pop)\n(push)\n(assert(not(= (tropmul x y) (tropmul y x))))\n(check-sat)\n(pop)\n(push)\n(assert(not(= (tropmul x (tropmul y z)) (tropmul (tropmul x y) z))))\n(check-sat)\n(pop)\n(push)\n(assert(not(= (tropadd x (tropadd y z)) (tropadd (tropadd x y) z))))\n(check-sat)\n(pop)\n(push)\n(assert(not(= (tropmul x (tropadd y z)) (tropadd (tropmul x y) (tropmul x z)))))\n(check-sat)\n(pop)\n\n(push)\n(assert(not(= (tropmul x 0) x)))\n(check-sat)\n(pop)\n(push)\n(assert (= (tropmul x 2) 3))\n(check-sat)\n(get-model)\n(pop)\n(push)\n(assert (= (tropadd x 2) 1))\n(check-sat)\n(get-model)\n```\n\n\nThe output is:\n\n```\nunsat \nunsat \nunsat \nunsat \nunsat \nunsat \n\nsat \n(model (define-fun x () Real 1.0) \n\nsat \n(model (define-fun x () Real 1.0) )\n```\n\n\nPlease run this code online here\n\nThis code introduces the tropical addition and the tropical multiplication.   Then is proved that these operations satisfy:  commutative, associate, distributive; and modulative for the tropical multiplication.\n\nWith the aim to satisfy the modulative for the tropical addition is necessary to introduce \nthe infinity, it is to say a new symbol such: infinity + a = a for all a.\n\nPlease, can you teach me how to introduce such infinity in the tropical code.  Many thanks.\n    ", "Answer": "\r\nYou'd have to define a new type, some sort of a discriminating union to include the infinity; and extend your operations to cover this new type. The standard way to do this in SMT-Lib is to introduce an uninterpreted sort, and then assert the definitions of mul/add etc., as appropriate axioms over it. How well the underlying solver will handle such axioms really will depend on how well it handles quantifiers and what sort of problems you throw at it, since those axioms will no doubt involve quantifiers.\n\nAn alternative is to use a higher-level approach, such as advocated by Z3Py or SBV (Haskell bindings to Z3 and other SMT solvers), where you can hide most of the machinery in the high-level structure as afforded by those languages. That's what I would try first, as SMT-Lib can get quite verbose and error-prone when you deal with a lot of uninterpreted sorts, axioms, etc.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Program a triangle number (sum of an arithmetic progression) without using iterations\r\n                \r\nThe basic idea of the question is:\n\nA triangle number is the sum of an arithmetic progression,\ni.e ```\n1,3,6,10,15..etc.```\n \n(arrived at this as: ```\n1+0,1+2,1+2+3, 1+2+3+4, 1+2+3+4+5... etc```\n)\n\nI've coded the following question using iterations, how do I do it without it?\n\n```\npublic class Test {\n    static int triangle(int n) {\n    int total = 0;\n    for (int index = 0; index < n + 1; index++) {\n        total = total + index;\n    }\n    return total;\n}\npublic static void main(String args[]) {\n    for (int x = 1; x < 6; x++)\n        System.out.println(triangle(x));\n    }\n}\n```\n\n\nThe output is correct, but I want a better solution then what I have written.\n\nThe O/P:\n\n```\n1\n3\n6\n10\n15\n```\n\n    ", "Answer": "\r\nA solution using recursion:\n\n```\npublic static void triangular(int start, int n){\n    if(start > n)\n        return;\n    int triangular = (start*(start+1))/2;\n    System.out.println(triangular);\n    triangular(start+1,n);\n}\n```\n\n\nUsage:\n\n```\npublic static void main(String[] args) throws IOException {\n    int n = 5;\n    triangular(1,n);\n}\n```\n\n\n\n  OUTPUT: 1 3 6 10 15\n\n\nTriangular number of any number n is = ```\n(n*(n+1))/2```\n. so for n=5, its triangular number is 15. Using this formula i applied recursion.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is there a constraint that restricts my generic method to numeric types?\r\n                \r\nCan anyone tell me if there is a way with generics to limit a generic type argument ```\nT```\n to only:\n\n\n```\nInt16```\n\n```\nInt32```\n\n```\nInt64```\n\n```\nUInt16```\n\n```\nUInt32```\n\n```\nUInt64```\n\n\n\nI'm aware of the ```\nwhere```\n keyword, but can't find an interface for only these types,\n\nSomething like:\n\n```\nstatic bool IntegerFunction<T>(T value) where T : INumeric \n```\n\n    ", "Answer": "\r\nMore than a decade later, this feature finally exists in .NET 7. The most generic interface is ```\nINumber<TSelf>```\n rather than ```\nINumeric```\n (in the ```\nSystem.Numerics```\n namespace), and it encompasses not just integer types. To accept just integer types, consider using ```\nIBinaryInteger<TSelf>```\n instead. To use the example of your prototypical, mystical ```\nIntegerFunction```\n:\n```\nstatic bool IntegerFunction<T>(T value) where T : IBinaryInteger<T> {\n    return value > T.Zero;\n}\n```\n\n```\nConsole.WriteLine(IntegerFunction(5));         // True\nConsole.WriteLine(IntegerFunction((sbyte)-5)); // False\nConsole.WriteLine(IntegerFunction((ulong)5));  // True\n```\n\n\nThe (now obsolete) answer below is left as a historical perspective.\nC# does not support this. Hejlsberg has described the reasons for not implementing the feature in an interview with Bruce Eckel:\n\nAnd it's not clear that the added complexity is worth the small yield that you get. If something you want to do is not directly supported in the constraint system, you can do it with a factory pattern. You could have a ```\nMatrix<T>```\n, for example, and in that ```\nMatrix```\n you would like to define a dot product method. That of course that means you ultimately need to understand how to multiply two ```\nT```\ns, but you can't say that as a constraint, at least not if ```\nT```\n is ```\nint```\n, ```\ndouble```\n, or ```\nfloat```\n. But what you could do is have your ```\nMatrix```\n take as an argument a ```\nCalculator<T>```\n, and in ```\nCalculator<T>```\n, have a method called ```\nmultiply```\n. You go implement that and you pass it to the ```\nMatrix```\n.\n\nHowever, this leads to fairly convoluted code, where the user has to supply their own ```\nCalculator<T>```\n implementation, for each ```\nT```\n that they want to use. As long as it doesn’t have to be extensible, i.e. if you just want to support a fixed number of types, such as ```\nint```\n and ```\ndouble```\n, you can get away with a relatively simple interface:\n```\nvar mat = new Matrix<int>(w, h);\n```\n\n(Minimal implementation in a GitHub Gist.)\nHowever, as soon as you want the user to be able to supply their own, custom types, you need to open up this implementation so that the user can supply their own ```\nCalculator```\n instances. For instance, to instantiate a matrix that uses a custom decimal floating point implementation, ```\nDFP```\n, you’d have to write this code:\n```\nvar mat = new Matrix<DFP>(DfpCalculator.Instance, w, h);\n```\n\n… and implement all the members for ```\nDfpCalculator : ICalculator<DFP>```\n.\nAn alternative, which unfortunately shares the same limitations, is to work with policy classes, as discussed in Sergey Shandar’s answer.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Continued logarithm arithmetic: floor operator on run-length encoded terms\r\n                \r\nI'm trying to implement basic arithmetic on Bill Gosper's continued logarithms, which are a 'mutation' of continued fractions allowing the term co-routines to emit and consume very small messages even on very large or very small numbers.\n\nReversible arithmetic, such as {+,-,*,/} are fairly straightforwardly described by Gosper at least in a unary representation, but I'm having difficulty implementing the modulo operator which effectively truncates information from the division operation.\n\nI've realized the modulo operator can be mostly defined with operations I already have:\n\n\n  a mod b == a - b * floor(a / b)\n\n\nleaving my only problem with floor.\n\nI've also read that the run-length encoded format for continued logarithms effectively describes\n\n\n  '... the integer part of the log base 2 of the number remaining to be\n  described.'\n\n\nSo yielding the first term right away (pass through) produces the correct output so far, but leaves a significant portion to be determined which I assume requires some sort of carry mechanism.\n\nI've written the following code to test input terms and the expected output terms, but I'm mainly looking for high level algorithm ideas behind implementing floor.\n\nAn example input (1234 / 5) to output pair is\n\nInput:  [7, 0, 3, 0, 0, 0, 0, 1, 3, 3, 1]\n\nOutput: [7, 0, 3, 1, 4, 2, 1, 1]\n\n```\nfrom fractions import Fraction\n\ndef const(frac):\n        \"\"\" CL bistream from a fraction >= 1 or 0. \"\"\"\n        while frac:\n                if frac >= 2:\n                        yield 1\n                        frac = Fraction(frac, 2)\n                else:\n                        yield 0\n                        frac -= 1\n                        frac = Fraction(1, frac) if frac else 0\n\ndef rle(bit_seq):\n        \"\"\" Run-length encoded CL bitstream. \"\"\"\n        s = 0\n        for bit in bit_seq:\n                s += bit\n                if not bit:\n                        yield s\n                        s = 0\n\ndef floor(rle_seq):\n        \"\"\" RLE CL terms of the greatest integer less than rle_seq. \"\"\"\n        #pass\n        yield from output\n\n\"\"\" Sample input/output pairs for floor(). \"\"\"\nnum = Fraction(1234)\nfor den in range(1, int(num)+1):\n        input  = list(rle(const(num  / den)))\n        output = list(rle(const(num // den))) # Integer division!\n        print(\">  \", input)\n        print(\">> \", output) \n        print(\">>*\", list(floor(input))) \n        print()\n        assert(list(floor(input)) == output)\n```\n\n\n\n  How can I implement the floor operator in the spirit of continued\n  fraction arithmetic by consuming terms only when necessary and\n  emitting terms right away, and especially only using the run-length\n  encoded format (in binary) rather than the unary expansion Gosper\n  tends to describe.\n\n    ", "Answer": "\r\nBy assuming that the next coefficient in the run-length encoding is infinite, you can get a lower bound. By assuming that the next term is 1, you can get an upper bound.\nYou can simply process as many run-length encoded coefficients until you know that both the lower and the upper bound are in the half-open interval [N, N + 1). In this case you know that the floor of the continued logarithm is N. This is similar to what Bill Gosper does at the start of the linked document.\nNote, however, that this process doesn't necessarily terminate. For example, when you multiply sqrt(2) by sqrt(2), you get, of course, the number 2. However, the continued logarithm for sqrt(2) is infinite. To evaluate the product sqrt(2) * sqrt(2) you will need all the coefficients to know that you will end up with 2. With any finite number of terms, you can't decide if the product is less than 2 or at least equal to it.\nNote that this problem is not specific to continued logarithms, but it is a fundamental problem that occurs in any system in which you can have two numbers for which the representation is infinite but the product can be represented with a finite number of coefficients.\nTo illustrate this, suppose that these coroutines don't spit out run-length encoded values, but decimal digits, and we want to calculate floor(sqrt(2) * sqrt(2)). After how many steps can we be sure that the product will be at least 2? Let's take 11 digits, just to see what happens:\n1.41421356237 * 1.41421356237 = 1.9999999999912458800169\nAs you might guess, we get arbitrarily close to 2, but will never 'reach' 2. Indeed, without knowing that the source of the digits is sqrt(2), it might just happen that the digits terminate after that point and that the product ends up below 2. Similarly, all following digits might be 9's, which would result in a product slightly above 2.\n(A simpler example would be to take the floor of a routine that produces 0.9999...)\nSo in these kind of arbitrary-precision numerical systems you can end up in situations where you can only calculate some interval (N - epsilon, N + epsilon), where you can make epsilon arbitrarily small, but never equal to zero. It is not possible to take the floor of this expression, as -- by the numerical methods employed -- it is not possible to decide if the real value will end up below or above N.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Any way to store extremely precise numbers in java?\r\n                \r\nI am looking for a way of storing really precise and also really large numbers in java. I want something like a double, but ideally with a few hundred bytes instead of only 8. I would like to be able to evaluate trig functions and things more complicated than basic arithmetic with this level of accuracy.\n\nThis isn't that important, but I would like to know if this is possible.\n    ", "Answer": "\r\nYou can use ```\nBigInteger```\n or ```\nBigDecimal```\n. I recomend use ```\nBigInteger```\n just because in Java 8 it has been made a mayor improvements in that class.\n\nRegards\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Work with numbers larger than long double\r\n                \r\nI'm trying to implement a calculator function in my app, and the values will usually be very large along with decimal precision up to 12 digits. I understand the ```\nNSDecimalNumber```\n has the ```\ndecimalNumberWithMantissa```\n function which could be useful although it doesn't seem easy to implement, especially when trying to work with basic arithmetic as well as advanced arithmetic. I know the built in iOS calculator can work with very large numbers, and although they are expressed in scientific notation, that's fine for my purposes. Is there any type I'm missing? I've tried float, double, long double, etc. but nothing seems to work. Any ideas are appreciated.\n    ", "Answer": "\r\nI used to work with GMP with C, I haven't done further research about the availability of this library for Objective-C especially for iOS \"out of the box\"\n\nThis link might help: Linear Programming library for iOS\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Arithmetic operations on datetime index in pandas\r\n                \r\nIn pandas, you can access specific positions of a time series either by classical integer position / row based indexing, or by datetime based indexing. The integer based index can be manipulated using basic arithmetic operations, e.g. if I have a ```\ninteger_index```\n for a time series with frequency 12 hours and I want to access the entry exactly one day prior to this, I can simply do ```\ninteger_index - 2```\n. However, real world data are not always perfect, and sometimes rows are missing. In this case, this method fails, and it would be helpful to be able to use datetime based indexing and subtract, for example, ```\none day```\n from this index. How can I do this?\n\nSample script:\n\n```\n# generate a sample time series\nimport pandas as pd\ns = pd.Series([\"A\", \"B\", \"C\", \"D\", \"E\"], index=pd.date_range(\"2000-01-01\", periods=5, freq=\"12h\"))\nprint s\n\n2000-01-01 00:00:00    A\n2000-01-01 12:00:00    B\n2000-01-02 00:00:00    C\n2000-01-02 12:00:00    D\n2000-01-03 00:00:00    E\nFreq: 12H, dtype: object\n\n# these to indices should access the same value (\"C\")\ninteger_index = 2\ndate_index = \"2000-01-02 00:00\"\n\nprint s[integer_index]  # prints \"C\"\nprint s[date_index]  # prints \"C\"\n\n# I can access the value one day earlier by subtracting 2 from the integer index\nprint s[integer_index - 2]  # prints A\n\n# how can I subtract one day from the date index?\nprint s[date_index - 1]  # raises an error \n```\n\n\nThe background to this question can be found in an earlier submission of mine here:\n\nFill data gaps with average of data from adjacent days\n\nwhere user JohnE found a workaround to my problem that uses integer position based indexing. He makes sure that I have equally spaced data by resampling the time series.\n    ", "Answer": "\r\nYour datetime index isn't based on strings, it's a ```\nDatetimeIndex```\n meaning you can use ```\ndatetime```\n objects to index appropriately, rather than a string which looks like a date. \n\nThe code below converts ```\ndate_index```\n into a ```\ndatetime```\n object and then uses ```\ntimedelta(days=1)```\n to subtract \"one day\" away from it.\n\n```\n# generate a sample time series\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\ns = pd.Series([\"A\", \"B\", \"C\", \"D\", \"E\"], index=pd.date_range(\"2000-01-01\", periods=5, freq=\"12h\"))\nprint(s)\n\n# these two indices should access the same value (\"C\")\ninteger_index = 2\n# Converts the string into a datetime object\ndate_index = datetime.strptime(\"2000-01-02 00:00\", \"%Y-%m-%d %H:%M\")\nprint(date_index) # 2000-01-02 00:00:00\n\nprint(s[integer_index])  # prints \"C\"\nprint(s[date_index])  # prints \"C\"\n\n\nprint(s[integer_index - 2])  # prints \"A\"\n\none_day = timedelta(days=1)\nprint(s[date_index - one_day]) # prints \"A\"\nprint(date_index - one_day) # 2000-01-01 00:00:00\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to avoid floating point precision errors with floats or doubles in Java?\r\n                \r\nI have a very annoying problem with long sums of floats or doubles in Java. Basically the idea is that if I execute:\n\n```\nfor ( float value = 0.0f; value < 1.0f; value += 0.1f )\n    System.out.println( value );\n```\n\n\nWhat I get is:\n\n```\n0.0\n0.1\n0.2\n0.3\n0.4\n0.5\n0.6\n0.70000005\n0.8000001\n0.9000001\n```\n\n\nI understand that there is an accumulation of the floating precision error, however, how to get rid of this? I tried using doubles to half the error, but the result is still the same.\n\nAny ideas?\n    ", "Answer": "\r\nThere is a no exact representation of 0.1 as a ```\nfloat```\n or ```\ndouble```\n. Because of this representation error the results are slightly different from what you expected.\n\nA couple of approaches you can use:\n\n\nWhen using the ```\ndouble```\n type, only display as many digits as you need. When checking for equality allow for a small tolerance either way.\nAlternatively use a type that allows you to store the numbers you are trying to represent exactly, for example ```\nBigDecimal```\n can represent 0.1 exactly.\n\n\nExample code for ```\nBigDecimal```\n:\n\n```\nBigDecimal step = new BigDecimal(\"0.1\");\nfor (BigDecimal value = BigDecimal.ZERO;\n     value.compareTo(BigDecimal.ONE) < 0;\n     value = value.add(step)) {\n    System.out.println(value);\n}\n```\n\n\nSee it online: ideone\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "What is the most standard mathematics notation that could easily parse and compute in any programming language?\r\n                \r\nI want to store mathematics formula as string in database and load it to inject and compute in any programming language\n\nIt should be easy notation that could write by hand and should support at least basic arithmetic operation include pow and sqrt and log in any base\n\nI wish there would be standard format for math notation that any language could agree upon. Is there anything like that? Is there a most popular notation format?\n    ", "Answer": "\r\nMany shell languages can calculate using elementary mathematical formulae, represented as strings. For example, the Bash shell in Linux contains ```\nbc```\n - \"An arbitrary precision calculator language\":\n\n```\nhekto@ubuntu:~$ bc --version\nbc 1.06.95\nCopyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.\n\nhekto@ubuntu:~$ echo '2+2' | bc\n4\n\nhekto@ubuntu:~$ echo 'sqrt(2)' | bc -l\n1.41421356237309504880\n```\n\n\nSo, if your programming language of choice can communicate with shell, and this shell can calculate, then your problem is solved.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Arithmetic in array assignments?\r\n                \r\nI'm relatively new to php and need to do basic PEMDAS arithmetic within an associative array assignment, however am getting syntax errors and cannot seem to find them.\n\nHere is some code. \n\n```\n$worth=array(\n        'one'=>((1000/333)*$min[0]->getPrice(),\n        'two'=>((833/333)*$min[0]->getPrice()) + ((416/333)*$min[1]->getPrice()));\n```\n\n\nThese are only two entries of 16.  Each of which have another ((number/number)*$arr[$i]->getPrice()) added to the end of the assignment.\n\nIs this type of array assignment not allowed? \n\nSuggestions on alternatives which may be cleaner?\n\nAll help is appreciated. \n    ", "Answer": "\r\nthats allowed, you have parenthesis missing, try\n\n\n```\n\n$worth=array(\n        'one'=>(int) ((1000/333)*$min[0]->getPrice()),\n        'two'=>(int) (((833/333)*$min[0]->getPrice()) + ((416/333)*$min[1]->getPrice())));\n```\n\n\n\nHope it helps\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is there a way to link a value from a website onto my console application on c# [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 3 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nSo this should be a fairly simple question. I'm experimenting with c#, and I was wondering if someone could help me do the following:\n\nI'm trying to get the daily market value of gold through a website (www.moneymetals.com) and perform basic arithmetic functions with that value and print the results to the user. \n\nWhat I want this basic application to do is \n1) grab the value from the website. Obviously this type of data is variable data as it fluctuates a lot\n2) perform arithmetic such as multiplication on that value \n3) print the value to the user \n\nExample: \n- Gold price today = $52 \n- I have 5 grams of gold so $52 x 5 = 260\n- Print the result \n\nIf someone could list out a skeleton of the code I would greatly appreciate it.\n\nThank you !\n    ", "Answer": "\r\nWhile you could fetch the HTML and parse it, that's typically quite a brittle approach.\n\nIn general it's much better if you can use an API provided by the web site owner to give the same information in a machine-readable format. It doesn't look like moneymetals.com has this - but https://metals-api.com/ exists for precisely that reason as far as I can see.\n\nTheir pricing only allows 50 API calls per month on the free tier, which isn't many, but it might be okay if you're just looking to experiment.\n\nYou'd just need to make a web request (e.g. with ```\nHttpClient```\n) and parse the JSON (e.g. with Json.NET) which should be simple.\n\nThere are no doubt plenty of other similar APIs you could use - you may want to hunt around for them. But I'd definitely try to use an API rather than parsing HTML if you possibly can.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Golang func - return type\r\n                \r\nThis is my first ```\nGolang```\n program after 'Hello world'. Please find following code block which aims to perform basic arithmetic and multiple type return demo. This is just a hypothetical sample to learn ```\nGo func```\n. However, I am getting following exception on compilation. From exception, i assume, operations on ```\nint8```\n operand return ```\nint16/int32```\n as return type and which is not correct as per go.\n\nQuestion: Isn't it safe for language to assume ```\nint8```\n is safely assignable to ```\nint16```\n or ```\nint32```\n\n\n```\npackage main\nimport (\n    \"fmt\"\n)\nfunc Arithmetic(a,b int8) (int8,string,int16,int32){\n    return a-b, \"add\",a*b,a/b\n}\nfunc main() {\n    a,b,c,d :=Arithmetic(5,10)\n    fmt.Println(a,b,c,d)\n}\n```\n\n\nError:\n\n```\nC:/Go\\bin\\go.exe run C:/GoWorkspace/src/tlesource/ff.go\n# command-line-arguments\n.\\ff.go:15: cannot use a * b (type int8) as type int16 in return argument\n.\\ff.go:15: cannot use a / b (type int8) as type int32 in return argument\n\nProcess finished with exit code 2\n```\n\n    ", "Answer": "\r\n\n  Is it it safe for language to assume int8 is safely assignable to int16 or int32\n\n\nYes, It would be, if Go did implicit conversions on assignment. But it does not (only interface-wrapping when applicable).\n\nThere are several reasons:\n\n\nThe concept of automatic conversion cannot be generalized to all types without introducing the concept of a type hierarchy. And, as you know, all concrete types in Go are invariant.\nGo is \"anti-magic\" and in this spirit it doesn't do stuff you did not request it to do (except e.g. write-barriers on pointers).\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "should signals in vhdl be signed/unsigned to perform arithmetic operations?\r\n                \r\nI am practising some basic vhdl programs.Now i came across arithmetic operations.I used bit_vector and multiplied the input signals directly but it errors \"No feasible entries for infix operator\".The program is below:\n\n```\n   entity multiplier is\n   port(a,b : in bit_vector(3 downto 0);\n   c: out bit_vector(7 downto 0));\n   end  multiplier;\n\n   architecture ar of multiplier is\n\n   begin\n\n   c<=(a*b);\n\n   end ar;\n```\n\n\nBut i came across this program which works fine with std_logic_vector\n\n```\n   library IEEE;\n   use IEEE.STD_LOGIC_1164.ALL;\n   use IEEE.NUMERIC_STD.ALL;\n   entity Multiplier_VHDL is\n   port(\n  Nibble1, Nibble2: in std_logic_vector(3 downto 0);\n  Result: out std_logic_vector(7 downto 0)\n  );\n  end entity Multiplier_VHDL;\n\n architecture Behavioral of Multiplier_VHDL is\n begin\n\n Result <= std_logic_vector(unsigned(Nibble1) * unsigned(Nibble2));\n\n end ;\n```\n\n\nMy questions are:\n\n1.cant we simply add 2 signal bits c<=a+b as we do in verilog?\n\n2.should a signal be signed/unsigned to perform arithmetic operations?\n\n3.like c which is signed by default,what about vhdl/verilog?\n\n4.are signed & unsigned present in use ieee.std_logic_arith.all and use IEEE.NUMERIC_STD.ALL same?\n    ", "Answer": "\r\n1. Cant we simply add 2 signal bits ```\nc <= a + b```\n as we do in verilog?\nVHDL is a strongly typed language, which means it is strict when it comes to assigning things of different types to each other. Verilog might let you multiply a simple bit vector; you know what the types of the operands are and the format of the result, and that's fine  for your design process. In VHDL, it's not good enough that you as the designer know what formats the numbers are in, the compiler wants to know this as well. In your example, the compiler doesn't know if your vectors represent an unsigned number, signed, fixed point, etc. By casting them to unsigned, you are explicitly telling it what the number format is. An even better solution would be to have these as type ```\nunsigned```\n throughout, to avoid the type casts.\nAnother advantage of VHDL strongly typed is that this can help to catch bugs caused by errors in number format storage at the compilation stage instead of under simulation or on an FPGA device. In general it saves time to catch bugs earlier in the design cycle. If you search online for \"strongly typed\" you will find more discussion on this topic.\n2. Should a signal be signed/unsigned to perform arithmetic operations?\nAs above, if you want to stick to standard libraries, then yes it is a good idea to give your signals a meaningful type. Think about the guy trying to understand your code in 10 years time (it might even be you), if it's clear what the number formats are, their life will be made easier.\n3. Like ```\nc```\n which is signed by default, what about vhdl/verilog?\n```\nc```\n in your example code is not signed by default in VHDL, it has whatever type you declared it as. If you are multiplying using ```\nunsigned```\n, the result would also be ```\nunsigned```\n, so this would be the type that I would use for the result. If the type of the result signal does not match the return type of the operation, this will be a compiler error.\n4. Are ```\nsigned```\n & ```\nunsigned```\n present in ```\nuse ieee.std_logic_arith.all```\n and use ```\nIEEE.NUMERIC_STD.ALL```\n same?\nNo, it is not recommended to use ```\nstd_logic_arith```\n, as this library is not part of the VHDL standard. If you familiarise yourself with the number formats in ```\nnumeric_std```\n, you should not need to use any other libraries for integer arithmetic.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why the value of input elements are not changing?\r\n                \r\nI'm learning Javascript and right now I'm trying to build a simple calculator.\n\nI have added four buttons for basic arithmetic operation and three input elements.\n\nI have attached eventListener to every button. The problem I am facing is when I input two numbers and click on any one of the four buttons I can see the result for only half second and then every input value clear away.\nHere is the code.\n\n\r\n\r\n```\nvar res = document.getElementById('result');\r\ndocument.getElementById('ADD').addEventListener('click', function() {\r\n  var num1 = parseFloat(document.getElementById('first').value);\r\n  var num2 = parseFloat(document.getElementById('second').value);\r\n  res.value = num1 + num2;\r\n});\r\ndocument.getElementById('SUB').addEventListener('click', function() {\r\n  var num1 = parseFloat(document.getElementById('first').value);\r\n  var num2 = parseFloat(document.getElementById('second').value);\r\n  res.value = num1 - num2;\r\n});\r\ndocument.getElementById('MUL').addEventListener('click', function() {\r\n  var num1 = parseFloat(document.getElementById('first').value);\r\n  var num2 = parseFloat(document.getElementById('second').value);\r\n  res.value = num1 * num2;\r\n});\r\ndocument.getElementById('DIV').addEventListener('click', function() {\r\n  var num1 = parseFloat(document.getElementById('first').value);\r\n  var num2 = parseFloat(document.getElementById('second').value);\r\n  res.value = num1 / num2;\r\n});```\n\r\n```\nbody {\r\n  text-align: center;\r\n}```\n\r\n```\n<body>\r\n  <h1>SIMPLE CALCULATOR</h1>\r\n  <form>\r\n    <label for=\"first\">Number 1:</label>\r\n    <input id=\"first\" type=\"text\" value=\"\">\r\n    <br><br>\r\n\r\n    <label for=\"second\">Number 2:</label>\r\n    <input type=\"text\" value=\"\" id=\"second\">\r\n    <br><br>\r\n\r\n    <label for=\"result\">Result :</label>\r\n    <input type=\"text\" value=\"\" id=\"result\">\r\n    <br><br>\r\n\r\n    <button id=\"ADD\">ADD</button>\r\n    <button id=\"SUB\">SUB</button>\r\n    <button id=\"MUL\">MUL</button>\r\n    <button id=\"DIV\">DIV</button>\r\n  </form>\r\n</body>```\n\r\n\r\n\r\n\n    ", "Answer": "\r\nIt's because it's a form. Add an event listener to make sure the form doesn't refresh the page (default action when ```\naction```\n is not given or invalid):\n\n```\ndocument.querySelector(\"form\").addEventListener(\"submit\", e => e.preventDefault());\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why the value of input elements are not changing?\r\n                \r\nI'm learning Javascript and right now I'm trying to build a simple calculator.\n\nI have added four buttons for basic arithmetic operation and three input elements.\n\nI have attached eventListener to every button. The problem I am facing is when I input two numbers and click on any one of the four buttons I can see the result for only half second and then every input value clear away.\nHere is the code.\n\n\r\n\r\n```\nvar res = document.getElementById('result');\r\ndocument.getElementById('ADD').addEventListener('click', function() {\r\n  var num1 = parseFloat(document.getElementById('first').value);\r\n  var num2 = parseFloat(document.getElementById('second').value);\r\n  res.value = num1 + num2;\r\n});\r\ndocument.getElementById('SUB').addEventListener('click', function() {\r\n  var num1 = parseFloat(document.getElementById('first').value);\r\n  var num2 = parseFloat(document.getElementById('second').value);\r\n  res.value = num1 - num2;\r\n});\r\ndocument.getElementById('MUL').addEventListener('click', function() {\r\n  var num1 = parseFloat(document.getElementById('first').value);\r\n  var num2 = parseFloat(document.getElementById('second').value);\r\n  res.value = num1 * num2;\r\n});\r\ndocument.getElementById('DIV').addEventListener('click', function() {\r\n  var num1 = parseFloat(document.getElementById('first').value);\r\n  var num2 = parseFloat(document.getElementById('second').value);\r\n  res.value = num1 / num2;\r\n});```\n\r\n```\nbody {\r\n  text-align: center;\r\n}```\n\r\n```\n<body>\r\n  <h1>SIMPLE CALCULATOR</h1>\r\n  <form>\r\n    <label for=\"first\">Number 1:</label>\r\n    <input id=\"first\" type=\"text\" value=\"\">\r\n    <br><br>\r\n\r\n    <label for=\"second\">Number 2:</label>\r\n    <input type=\"text\" value=\"\" id=\"second\">\r\n    <br><br>\r\n\r\n    <label for=\"result\">Result :</label>\r\n    <input type=\"text\" value=\"\" id=\"result\">\r\n    <br><br>\r\n\r\n    <button id=\"ADD\">ADD</button>\r\n    <button id=\"SUB\">SUB</button>\r\n    <button id=\"MUL\">MUL</button>\r\n    <button id=\"DIV\">DIV</button>\r\n  </form>\r\n</body>```\n\r\n\r\n\r\n\n    ", "Answer": "\r\nIt's because it's a form. Add an event listener to make sure the form doesn't refresh the page (default action when ```\naction```\n is not given or invalid):\n\n```\ndocument.querySelector(\"form\").addEventListener(\"submit\", e => e.preventDefault());\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "C++ Calculator Skipping Else Statement\r\n                \r\nI was making a simple calculator in C++. However the program does not completely function the way it should. When run, the trig if statement executes fine, however, the basic arithmetic else statement doesn't work. I have determined that the code is not executing the else statement and was wondering how to fix it. The code inside the else statement works fine, as I have commented out the if statement. Help?\n\nHere is my code:\n\n```\n#include \"stdafx.h\"\n#include <iostream>\n#include <string>\n#include <cmath>\n\n\nint main()\n{\n    double input = 0;\n    double firstnumber = 0;\n    double secondnumber = 0;\n\n\n    std::string function;\n    std::string operation;\n\n\n    std::cout << \"Enter your calculation: \";\n    std::cin >> function;   \n\n\n    if(function == \"sin\" || \"cos\" || \"tan\")\n    {\n        if(function == \"sin\")\n        {\n            std::cin >> input;\n            std::cout << \"The sine is \" << sin(input) << std::endl;\n            system(\"PAUSE\");\n        }\n        else if(function == \"cos\")\n        {\n            std::cin >> input;\n            std::cout << \"The cosine is \" << cos(input) << std::endl;\n            system(\"PAUSE\");\n\n        }\n        else if(function == \"tan\")\n        {\n            std::cin >> input;\n            std::cout << \"The tangent is \" << tan(input) << std::endl;\n            system(\"PAUSE\");\n        }\n    }\n    else\n    {       \n\n        firstnumber = ::atof(function.c_str());\n        std::cin >> operation;\n        std::cin >> secondnumber;\n\n\n        double valueadd = firstnumber + secondnumber;\n        double valuesubtract = firstnumber - secondnumber;\n        double valuemultiply = firstnumber * secondnumber;\n        double valuedivide = firstnumber / secondnumber;\n\n\n        if(operation == \"+\")\n        {      \n            std::cout << \" = \" << valueadd << std::endl;\n            system(\"PAUSE\");\n        }\n        else if(operation == \"-\")\n        {          \n            std::cout << \" = \" << valuesubtract << std::endl;\n            system(\"PAUSE\");\n        }\n        else if(function == \"*\")\n        {\n            std::cout << \" = \" << valuemultiply << std::endl;\n            system(\"PAUSE\");\n        }\n        else if(function == \"/\")\n        {\n            std::cout << \" = \" << valuedivide << std::endl;\n            system(\"PAUSE\");\n        }\n\n        else\n        {\n            std::cout << \"Error\" << std::endl;\n            return 0;\n        }\n    }\n    return 0;\n}\n```\n\n    ", "Answer": "\r\nThis line is wrong. \n\n```\nif(function == \"sin\" || \"cos\" || \"tan\")\n```\n\n\nIt should be\n\n```\nif((function == \"sin\") || (function == \"cos\") || (function == \"tan\"))\n```\n\n\nNote that the check is actually meaningless because you already check for them each individually. You could tidy this up by doing this in a ```\nif```\n, ```\nelse if```\n, ```\nelse```\n chain.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Executing bash -c with xargs\r\n                \r\nI had a job to perform that involved:\n\n\ngrep lines from a log\nfind a number in the line\nperform basic arithmetic on the number (say, number + 1234)\n\n\nThe final result is a bunch of numbers separated by a newline.\n\nIf the input was:\n\n```\n1000\n2000\n3000\n```\n\n\nThen the required output was:\n\n```\n2234\n3234\n4234\n```\n\n\nI ended up with the following command:\n\n```\ncat log.txt | grep \"word\" | cut -d'|' -f7 | cut -d' ' -f5 | xargs -n 1 bash -c 'echo $(($1 + 1234))' args\n```\n\n\nI found the ```\nxargs -n 1 bash -c 'echo $(($1 + 1234))' args```\n snippet in an answer to this question but I don't understand the need for the final ```\nargs```\n argument that is passed in. I can change it to anything, ```\nargs```\n could be ```\nblah```\n, but if I omit it the arithmetic fails and the output is the numbers unchanged:\n\n```\n1000\n2000\n3000\n```\n\n\nCould anyone shed some light on why ```\nargs```\n is a required argument to ```\nbash -c```\n?\n    ", "Answer": "\r\nA simple ```\nawk```\n command can do the same - in a clean way:\n\n```\nawk -F'|' '/word/{split($7,a,\" \"); print a[5]+1234}' log.txt\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Will there be a concept for arithmetic types in C++ standard library?\r\n                \r\nI've been looking through concepts library on C++ reference and i couldn't find a concept for arithmetic types. I couldn't also find it in p0898. I think such concept would be very helpful.\nInsted of doing:\n\n```\ntemplate <typename T>\nT some_function(T arg) requires std::integral<T> || std::floating_point<T>\n{ /* functions body */ }\n```\n\n\nI could just do:\n\n```\ntemplate <std::arithmetic T>\nT some_function(T arg)\n{ /* functions body */ }\n```\n\n\nI could obviously define it myself and it wouldn't be hard (ex. ```\ntemplate <typename T> concept arithmetic = std::integral<T> || std::floating_point<T>;```\n), but in my opinion such basic concept should be defined in standard library. Is there any good reason why it's not there? Or is there any proposal to add it?\n    ", "Answer": "\r\n\nIs there any good reason why it's not there? Or is there any proposal to add it?\n\nThere isn't any proposal to add it, but I would expect to see an NB comment that just proposes ```\ntemplate <typename T> concept arithmetic = std::is_arithmetic_v<T>;```\n† (which doesn't guarantee that C++20 will have this concept, merely that at least it will be considered).\nThe standard library concepts were added by the Ranges proposal and were driven by needs in algorithms for certain concepts. ```\nintegral```\n comes up a lot, but I guess ```\narithmetic```\n never did and so it just never got added. If you look at, say, N4382 (from early 2015), you can see that ```\nIntegral```\n (and ```\nSignedIntegral```\n and ```\nUnsignedIntegral```\n) were there from the very beginning... whereas even ```\nFloatingPoint```\n got added way later. (by P0631, in July 2019... and even the paper that added the floating point concept didn't make any mention of ```\narithmetic```\n)\n\n†Of course, then you get into the fun question of whether it should be based on strictly that type trait or should it be ```\ntemplate <typename T> concept arithmetic = integral<T> || floating_point<T>;```\n so that both the ```\nintegral```\n and ```\nfloating_point```\n concepts subsume ```\narithmetic```\n. Probably? Maybe?\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Compare two symbolic expressions\r\n                \r\nI have two symbolic expressions ```\na```\n and ```\nb```\n, each consists of polynomials with basic arithmetic and small, positive, integer powers.\n```\nsimplify(a - b)```\n doesn't go up to 0, and my only alternative is to ```\nsubs```\n some random numbers into the variables and compare.\nI would have expected something like expanding the expressions until there are no parentheses. Then, add all fractions into a single fraction.\nI converted the data into a function which can be called as:\n```\nx = sym('x', [1 8], 'real')';\nerr = func( x ) % should be simplified to zeros\n\nx0 = rand( size(x) )\ndouble( subs(err, x, x0) )\n\nsimplify(err)\n```\n\nThe function\n```\nfunction err_Dpsi_Dpsi2 = func(in1)\n%FUNC\n%    ERR_DPSI_DPSI2 = FUNC(IN1)\n\n%    This function was generated by the Symbolic Math Toolbox version 8.4.\n%    29-Dec-2020 20:03:34\n\nx1 = in1(1,:);\nx2 = in1(2,:);\nx3 = in1(3,:);\nx4 = in1(4,:);\nx5 = in1(5,:);\nx6 = in1(6,:);\nx7 = in1(7,:);\nx8 = in1(8,:);\nt2 = x1.*x6;\nt3 = x2.*x5;\nt4 = x1.*x7;\nt5 = x3.*x5;\nt6 = x2.*x7;\nt7 = x3.*x6;\nt8 = -x2;\nt9 = -x3;\nt10 = -x6;\nt11 = -x7;\nt15 = x1./2.0;\nt16 = x2./2.0;\nt17 = x1./4.0;\nt18 = x3./2.0;\nt19 = x2./4.0;\nt20 = x3./4.0;\nt21 = x5./2.0;\nt22 = x6./2.0;\nt23 = x5./4.0;\nt24 = x7./2.0;\nt25 = x6./4.0;\nt26 = x7./4.0;\nt43 = x2.*7.072e+3;\nt44 = x3.*7.072e+3;\nt45 = x4.*7.071e+3;\nt46 = x6.*7.072e+3;\nt47 = x7.*7.072e+3;\nt48 = x8.*7.071e+3;\nt60 = x2.*x8.*-7.071e+3;\nt62 = x4.*x7.*-7.071e+3;\nt69 = x1.*9.999907193999999e-1;\nt70 = x5.*9.999907193999999e-1;\nt71 = x1.*1.0000660704;\nt72 = x5.*1.0000660704;\nt74 = x2.*1.0001321408;\nt75 = x3.*1.0001321408;\nt76 = x6.*1.0001321408;\nt77 = x7.*1.0001321408;\nt78 = x1.*1.0000660704;\nt79 = x2.*5.000660704e-1;\nt80 = x2.*1.0001321408;\nt81 = x3.*5.000660704e-1;\nt82 = x3.*1.0001321408;\nt83 = x5.*1.0000660704;\nt84 = x6.*5.000660704e-1;\nt85 = x6.*1.0001321408;\nt86 = x7.*5.000660704e-1;\nt87 = x7.*1.0001321408;\nt102 = x1.*9.999907194000001e-1;\nt103 = x5.*9.999907194000001e-1;\nt104 = x4.*4.999953597e-1;\nt105 = x8.*4.999953597e-1;\nt108 = x2.*1.000132149530596;\nt109 = x3.*1.000132149530596;\nt110 = x6.*1.000132149530596;\nt111 = x7.*1.000132149530596;\nt112 = x2.*1.000056789186827;\nt113 = x3.*1.000056789186827;\nt114 = x6.*1.000056789186827;\nt115 = x7.*1.000056789186827;\nt124 = x4.*1.000056789186827;\nt125 = x8.*1.000056789186827;\nt126 = x4.*9.999814388861295e-1;\nt127 = x8.*9.999814388861295e-1;\nt128 = x2.*1.000132149530596;\nt129 = x3.*1.000132149530596;\nt130 = x6.*1.000132149530596;\nt131 = x7.*1.000132149530596;\nt139 = x4.*2.500307147434136e-1;\nt140 = x8.*2.500307147434136e-1;\nt141 = x2.*1.000056789186827;\nt142 = x3.*1.000056789186827;\nt144 = x4.*1.000056789186827;\nt145 = x6.*1.000056789186827;\nt146 = x7.*1.000056789186827;\nt148 = x8.*1.000056789186827;\nt157 = x2.*x8.*(-2.500307147434136e-1);\nt158 = x4.*x7.*(-2.500307147434136e-1);\nt159 = x4.*9.999814388861297e-1;\nt160 = x8.*9.999814388861297e-1;\nt12 = -t3;\nt13 = -t4;\nt14 = -t7;\nt27 = t2./4.0;\nt28 = t3./4.0;\nt29 = t4./4.0;\nt30 = t5./4.0;\nt31 = t6./4.0;\nt32 = t7./4.0;\nt33 = t8+x1;\nt34 = t9+x1;\nt35 = t10+x5;\nt36 = t11+x5;\nt37 = -t16;\nt38 = -t18;\nt39 = -t20;\nt40 = -t22;\nt41 = -t24;\nt42 = -t26;\nt52 = t6.*7.072e+3;\nt53 = t48.*x2;\nt54 = t7.*7.072e+3;\nt55 = t45.*x6;\nt56 = t48.*x3;\nt57 = t45.*x7;\nt58 = -t45;\nt59 = -t48;\nt88 = -t74;\nt89 = -t75;\nt90 = -t76;\nt91 = -t77;\nt92 = -t80;\nt93 = -t79;\nt94 = -t82;\nt95 = -t81;\nt96 = -t85;\nt97 = -t84;\nt98 = -t87;\nt99 = -t86;\nt116 = -t108;\nt117 = -t109;\nt118 = -t110;\nt119 = -t111;\nt120 = -t112;\nt121 = -t113;\nt122 = -t114;\nt123 = -t115;\nt132 = -t128;\nt133 = -t129;\nt134 = -t130;\nt135 = -t131;\nt136 = t6.*2.500660747652978e-1;\nt137 = t7.*2.500660747652978e-1;\nt143 = -t139;\nt147 = -t140;\nt149 = t140.*x2;\nt150 = t139.*x6;\nt151 = t140.*x3;\nt152 = t139.*x7;\nt153 = -t141;\nt154 = -t142;\nt155 = -t145;\nt156 = -t146;\nt49 = -t28;\nt50 = -t29;\nt51 = -t32;\nt61 = -t54;\nt63 = t43+t58;\nt64 = t44+t58;\nt65 = t46+t59;\nt66 = t47+t59;\nt67 = t2+t5+t6+t12+t13+t14;\nt138 = -t137;\nt161 = t15+t38+t93+t104;\nt162 = t15+t37+t95+t104;\nt163 = t21+t41+t97+t105;\nt164 = t21+t40+t99+t105;\nt169 = t71+t89+t116+t124;\nt170 = t71+t88+t117+t124;\nt171 = t72+t91+t118+t125;\nt172 = t72+t90+t119+t125;\nt173 = t78+t92+t133+t144;\nt174 = t78+t94+t132+t144;\nt175 = t83+t96+t135+t148;\nt176 = t83+t98+t134+t148;\nt177 = t69+t120+t121+t126;\nt178 = t70+t122+t123+t127;\nt179 = t102+t153+t154+t159;\nt180 = t103+t155+t156+t160;\nt68 = 1.0./t67;\nt73 = t27+t30+t31+t49+t50+t51;\nt106 = t52+t55+t56+t60+t61+t62;\nt165 = t161.^2;\nt166 = t162.^2;\nt167 = t163.^2;\nt168 = t164.^2;\nt182 = t136+t138+t150+t151+t157+t158;\nt100 = 1.0./t73;\nt107 = 1.0./t106;\nt181 = t165+t166+t167+t168;\nt183 = 1.0./t182;\nt101 = t100.^2;\nt184 = t183.^2;\nerr_Dpsi_Dpsi2 = [t181.*(t35.*t68.*t100-t36.*t68.*t100)+t101.*t181.*(t25+t42),-t100.*t169+t100.*t174+t169.*t183-t174.*t183-t101.*t181.*(t23+t42)+t181.*t184.*(t140-x7.*2.500660747652978e-1)+t36.*t68.*t100.*t181+t66.*t107.*t181.*t183.*1.0,-t100.*t170+t100.*t173+t170.*t183-t173.*t183-t181.*t184.*(t140-x6.*2.500660747652978e-1)+t101.*t181.*(t23-t25)-t35.*t68.*t100.*t181-t65.*t107.*t181.*t183.*1.0,t100.*t177-t100.*t179-t177.*t183+t179.*t183+t181.*(t65.*t107.*t183.*9.998585972850678e-1-t66.*t107.*t183.*9.998585972850678e-1)-t181.*t184.*(x6.*2.500307147434136e-1-x7.*2.500307147434136e-1),-t181.*(t33.*t68.*t100-t34.*t68.*t100)-t101.*t181.*(t19+t39),-t100.*t171+t100.*t176+t171.*t183-t176.*t183+t101.*t181.*(t17+t39)-t181.*t184.*(t139-x3.*2.500660747652978e-1)-t34.*t68.*t100.*t181-t64.*t107.*t181.*t183.*1.0,-t100.*t172+t100.*t175+t172.*t183-t175.*t183+t181.*t184.*(t139-x2.*2.500660747652978e-1)-t101.*t181.*(t17-t19)+t33.*t68.*t100.*t181+t63.*t107.*t181.*t183.*1.0,t100.*t178-t100.*t180-t178.*t183+t180.*t183-t181.*(t63.*t107.*t183.*9.998585972850678e-1-t64.*t107.*t183.*9.998585972850678e-1)+t181.*t184.*(x2.*2.500307147434136e-1-x3.*2.500307147434136e-1)];\n```\n\n    ", "Answer": "\r\nI found what I was looking for\n```\nnum = numden( err ) % convert to rational polynomial, and we care only about the numerator\ncollect( num ) % cancel terms--not needed, numden does some version of simplify\n```\n\nMy example, though, wasn't good. For some reason, there are precision issues. I thought that symbolic used exact arithmetic, but I didn't look into that. However, if I use variables instead of finite precision coefficients, then it outputs zeros.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Clingo Syntax Error, unexpeced \">\" and \"!=\"\r\n                \r\nThe error occurs on line\n\"not pref(A,C), clockwise(A,C), path(A,C,Z), pref(A,B), clockwise(A,B), path(A,B,W), W > Y, Z < Y,\" .\nand\n\"not (pref(A,C), clockwise(A,C), selects(C,A,_), C != B),\"\nI am try to use basic arithmetic operation in Clingo. Since I have no experience, I don't know how to fix this syntax error. I assume that logic is true.\n```\nas(1..3).\n\nclockwise(1,2).\nclockwise(2,3).\nclockwise(3,1).\n\npath(1,2,20).\npath(2,3,30).\npath(3,1,40).\npath(1,3,310).\npath(3,2,230).\n\npref(1,2).\npref(2,3).\npref(3,1).\n\nselects(1,2,20).\nselects(2,3,30).\nselects(3,1,40).\n\ngadget :-\n    selects(2,3,230),\n    not selects(3,1,310),\n    not selects(1,2,20),\n    selects(3,1,30),\n    selects(1,2,40).\n\nselects(A,X,Y) :-\n    pref(A,B),\n    clockwise(A,B),\n    path(A,B,Y),\n    not pref(A,C), clockwise(A,C), path(A,C,Z), pref(A,B), clockwise(A,B), path(A,B,W), W > Y, Z < Y,\n    not selects(A,B,Z), Z > Y),\n    not gadget, selects(A,_,Z), Z > Y,\n    not selects(_,A,Z), Z > Y),\n    not gadget, selects(_,A,Z), Z > Y,\n    not selects(A,X,Z), Z < Y.\n\nprefers(A,B) :-\n    selects(B,A,_),\n    not (pref(A,C), clockwise(A,C), selects(C,A,_), C != B),\n    not (gadget, selects(C,A,_), selects(B,C,_)),\n    not (pref(A,B), selects(_,A,_), not selects(B,A,_)),\n    not (gadget, selects(_,A,_), selects(B,C,_), selects(C,D,_), selects(D,E,_), selects(E,F,_), selects(F,G,_), selects(G,H,_), selects(H,I,_), selects(I,B,_)).\n\n:- selects(A,X,Y), selects(B,X,Z), A != B, Y > Z, not gadget.\n```\n\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Regex: Regular expression for algorithmic operations with parentheses [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Regular expression for math operations with parentheses\r\n                            \r\n                                (4 answers)\r\n                            \r\n                    \r\n                Closed 3 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI need help to build a ```\nregular expression```\n that accepts the basic arithmetic operations algorithm, but also allows ```\nmeter operations```\n on any number of parentheses \n\nso far I have this expression:\n\n```\n^([(]*(-)?\\d+(\\.\\d+)?[)]?)([(]?[-+/*%^]?\\d+(\\.\\d+)?[)]*)+\n```\n\n\nIt happens that the above expression accepts me without closing parenthesis or unopened (parentheses must go in pairs). \nI show the evidence that I have made, which is in the red box should not accept\nhttp://regexr.com/38r4u\n\nAnd I hope you can help me,\n\nThanks.\n    ", "Answer": "\r\nYou cannot parse a recursive structure using a regex. Use a parser instead.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Implementing new data type in Python - without classes\r\n                \r\nI'm trying to implement new data type \"Fractions\" in Python to represents fractions, where numenator and denominator are both integers. Moreover, I have to implement four basic arithmetic operations. The trick is, I can't use classes in this task.\nI thoght maybe tuples can be a good idea but I really don't know how to approach this.\nIs there an easy way to solve such a problem? Any hint would really help me. \n    ", "Answer": "\r\nYou have two problems. 1) How to encapsulate the data, and 2) How to operate on the data.\n\nFirst, let's solve encapsulation. Just put everything you need in a tuple:\n\n```\nhalf = (1,2)\nwhole = (1,1)\nanswer = (42,1)\n```\n\n\nSee? The first item is the numerator, the second is the denominator.\n\nNow you need a way to operate on the data. Since we can't use methods, we'll just use regular functions:\n\n```\ndef mul(a,b):\n    'Multiply two fractions'\n    return (a[0]*b[0], a[1]*b[1])\n```\n\n\nSimilarly, implement ```\nadd(a,b)```\n, ```\nnegate(a)```\n, ```\nsub(a,b)```\n, etc. You might need a ```\nsimplify()```\n, so you don't end up with ```\n10240000/20480000```\n after a while.\n\nTo make our object-oriented-without-classes suite complete, we need a constructor:\n\n```\ndef make_frac(num, denom):\n    'Create a fraction with the indicated numerate and denominator'\n    return (num, denom)\n```\n\n\nFinally, place all of these functions in a module, and your task is complete. The user of your library will write something like this:\n\n```\nimport your_fraction_lib\n\nhalf = your_fraction_lib.make_frac(1,2)\nquarter = your_fraction_lib.mul(half, half)\nthree_quaters = your_fraction_lib.add(half, quarter)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Does VB.NET offer any performance improvement over VB6 for CPU-bound processes?\r\n                \r\nI'm working on a mathematical model written in VB6. The amount of CPU time this model is consuming is becoming a concern to some of our customers and the notion has been floated that porting it to VB.NET will improve its performance.\n\nThe model is performing a lot of single-precision arithmetic (a finite-difference scheme over a large grid) with small bursts of database access every five seconds or so (not enough to be important). Only basic arithmetic functions with occasional use of the ^ 4 operator are involved.\n\nDoes anyone think porting to VB.NET is likely to improve matters (or not)? Does anyone know any reliable articles or papers I can check over to help with this decision?\n    ", "Answer": "\r\nMy opinion is that VB.Net won't improve performance by far. The improvement is given by your ability to make an optimized algorith.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Arithmetic compound operator overload as non-member\r\n                \r\nI've written a templated class that implements some basic operator overloading, following the guidelines provided by this particularly insightful answer:\n\n```\ntemplate <typename _type>\nclass myClass {\n    // ...\n    template<_input_type> myClass<_type>& operator+=(const myClass<_input_type>& _other);\n    // ...\n}\n```\n\n\nwith the arithmetic compound operators written as members:\n\n```\ntemplate <typename _type>\ntemplate <typename _input_type>\nmyClass<_type>& myClass<_type>::operator+=(const myClass<_input_type>& _other) { \n    static_assert(std::is_arithmetic<_type>::value);\n    // do stuff\n    return *this;\n};\n```\n\n\nand the non-compound operator as a non-member:\n\n```\ntemplate <typename _type, typename _input_type> \ninline myClass<_type> operator+(myClass<_type>& _o1, myClass<_input_type> _o2) { \n    return _o1+=_o2;\n};\n```\n\n\nHowever, due to the template ```\nmyClass```\n can be used for several data types, some of them non-numeric that can't handle ```\n+```\n,```\n-```\n,```\n*```\n or ```\n/```\n operators, and as such I was wondering what are the downsides of implementing all operator overloading code as non-member functions, so that e.g. I could just placed them all on a separate header file that would only need to be included if there is need for arithmetic functionality. I understand one solution would be to define a new ```\nclass myNumericClass : public myClass```\n that just implements operator overloading, but that would require a new typename and limit the versatility of ```\nmyClass```\n.\n    ", "Answer": "\r\nThe primary shortcoming of implementing compound assignment as a non-member is inconsistency with the simple (copy or move) assignment operator. A simple copy or move assignment (i.e., ```\noperator=```\n) must be implemented as a member function, or the compiler will outright reject the code.\n\nGiven that copy/move assignment must be implemented as member functions, many prefer to implement compound assignment as members as well.\n\nAs an aside, this code:\n\n```\ntemplate <typename _type, typename _input_type> \ninline myClass<_type> operator+(myClass<_type>& _o1, myClass<_input_type> _o2) { \n    return _o1+=_o2;\n};\n```\n\n\n...is, IMO, highly inadvisable. The general style is fine, but you've mixed up which operand to pass by value and which to pass by reference. As a result, it may be needlessly inefficient, and (much worse) modifies its left operand, so it really acts like ```\n+=```\n instead of ```\n+```\n. What you almost certainly want is more like this:\n\n```\ntemplate <typename _type, typename _input_type> \ninline myClass<_type> operator+(myClass<_type> _o1, myClass<_input_type> const &_o2)\n{ \n    return _o1+=_o2;\n};\n```\n\n\nHere we pass the left operand by value, so when the function is called a temporary value is created and initialized from the left operand. We then modify that temporary value (without changing the original) and return it. Since we do return it, there will be copy elision (optional on older compilers, but mandatory since C++17) which means it'll normally really just be a reference to the destination, so effectively, something like: ```\na = b + c;```\n will be treated as: ```\na = b; a += c;```\n. Since we only need the previous value of the right operand, we pass it as a reference to const to avoid an unnecessary copy (though, depending on the type, passing by reference may not gain enough to care about, or could even be a loss. But it can be a big gain, and is rarely more than a tiny loss).\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is there any difference between DATE_SUB() and using arithmetic operators for datetime calculation?\r\n                \r\nAfter I have seen a lot of questions here using the ```\nDATE_SUB()```\n or ```\nDATE_ADD()```\n functions instead of the arithmetic operators ```\n+```\n or ```\n-```\n, I was wondering if there was any difference:\n\nQuote from the MySQL-manual:\n\n\n  Date arithmetic also can be performed using INTERVAL together with the + or\n  - operator:\n\n```\ndate + INTERVAL expr unit\ndate - INTERVAL expr unit\n```\n\n\n\nSo basically, these two statements return the same result:\n\n```\nSELECT DATE_ADD(NOW(), INTERVAL 7 DAY);\n```\n\n\nand\n\n```\nSELECT NOW() + INTERVAL 7 DAY;\n```\n\n\nNow my question:\n\nIs there any difference between ```\nDATE_SUB()```\n and using the ```\n-```\n operator in MySQL? (besides readability?)\n    ", "Answer": "\r\nThe MySQL documentation for DATE_ADD (http://dev.mysql.com/doc/refman/5.1/en/date-and-time-functions.html#function_date-add) explicitly states that you may do date arithmetic with the + and - operators. \n\n\n  \n    Date arithmetic also can be performed using INTERVAL together with the + or - operator:\n    \n    date + INTERVAL expr unit\n    \n    date - INTERVAL expr unit\n  \n\n\nGiven that it's endorsed by the docs, I think any difference is stylistic. I personally think the +/- is easier to read (after all, you don't use INT_ADD(...) or DOUBLE_ADD(...) to manipulate numeric values, so why dates?). Others might have their own reasons for liking DATE_ADD and DATE_SUB, and that's fine too. Just pick something and stick with it.\n\nJemiah\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Passing expressions and getting results from Python interpreter back to Django?\r\n                \r\nHow do you pass and get results to a python interpreter where the input is coming from a website form? \n\nFor instance if you have a web form populated with basic arithmetic expressions like addition, subtraction, multiplication and division.\n\nIf you want to pass that expression like 1+1 or 4/6 to the python interpreter and get the result back to show on the web page is that possible? I'm using Django as framework.\n    ", "Answer": "\r\nYou can always use ```\neval()```\n to evaluate an expression.\n\n```\n>>> eval('4*4')\n16\n>>> \n```\n\n\nDANGER\nSince eval() can execute arbitrary code you should never ever use it with user input. In your case I strongly discourage using it.\n\nIn short, there is no very easy way with built-in python functions.\n\nYou could try one of the solutions from the answers on this question\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Trying to get new values when calling class from another class\r\n                \r\nI am writing a math quiz problem in java that basically asks 10 questions and gives the user 2 \n     chances to get the answer right.  The program asks questions based on basic arithmetic in addition, \n     subtraction, division and multiplication.\n     My problem is when I run the program, it runs fine but later in the program it asks the same \n     question with the same values.  How do I get the program to use fresh values each and everytime the \n     c lass is called?\n     I left the add, subtract, multiply, and divide classes out for now..if you need them please let me \n      know\n\n```\n import java.util.Scanner;\n import java.math.*;\n\n\npublic class MathQ {\n public static void main(String[] args) {\n    int credit = 0;\n    int firstTry = 0;\n    int secondTry = 0;\n    int wrong = 0;\n    System.out.print(\"What's your name?\");\n    Scanner sc = new Scanner(System.in);\n    String name = sc.next();\n    AdditionProblem q1 = new AdditionProblem();\n    SubtractionProblem q2 = new SubtractionProblem();\n    MultiplicationProblem q3 = new MultiplicationProblem();\n    DivisionProblem q4 = new DivisionProblem();\n\n    System.out.println(\"Nice to meet you , \" + name + \"!\");\n    System.out.println(\"**************MATH CHALLENGE*************\");\n    System.out.println(\n            \"This challenge will present you 10 problems in which you will have two chances to answer \n the question correctly\");\n    System.out.println(\n            \"The questions that will be asked will be basic arithmetic ranging from addition, \n subtraction, multiplication and division\");\n    System.out.println(\"You will receive full credit if you answer the question correctly on the \n first try\");\n    System.out.println(\"You will only receive half credit if you answer it correctly on the second \n try\");\n    System.out.println(\"You score will be tallied at the end of the quiz\");\n    System.out.println(\"Good luck!\");\n    System.out.println(\"---------------------\");\n\n    for (int i = 1; i <= 10; i++) {\n        long rand1 = Math.round((Math.random() * 4) + 1);\n        // System.out.println(rand1); //for testing random function\n\n        if (rand1 == 1.0) {\n            System.out.println(\"Problem #\" + i);\n            System.out.println(\"----------------------------\");\n            System.out.println(q1.getProblem());\n\n            System.out.println(\"Type Your Answer Below:\");\n            Integer ans = sc.nextInt();\n            System.out.println(\"Your answer was: \" + ans);\n            if (ans == q1.getAnswer()) {\n                System.out.println(\"That is correct!\");\n                credit = credit + 10;\n                firstTry = firstTry + 1;\n                System.out.println(\"Your total points right now is: \" + credit);\n                System.out.println();\n            } else {\n                System.out.println(\"-------------------------\");\n                System.out.println();\n                System.out.println(\"Sorry that is not correct\");\n                System.out.println(\"Lets try again\");\n                System.out.println();\n                System.out.println(q1.getProblem());\n                System.out.println(\"Type Your Answer:\");\n                Integer ans1 = sc.nextInt();\n                if (ans1 == q1.getAnswer()) {\n                    System.out.println(\"There ya go..good answer\");\n                    System.out.println(\"Lets move on\");\n                    credit = credit + 5;\n                    secondTry = secondTry + 1;\n                    System.out.println(\"You total points thus far is: \" + credit);\n                } else {\n                    System.out.println();\n                    System.out.println(\"Hmmmm.sorry thats still not correct\");\n                    System.out.println(\"The correct answer was: \" + q1.getAnswer());\n                    wrong = wrong + 1;\n                    System.out.println(\"You have \" + credit + \" points\");\n                    System.out.println(\"Lets continue on!\");\n                    System.out.println();\n                    System.out.println(\"-------------------------\");\n                }\n\n            }\n```\n\n    ", "Answer": "\r\nI assume that the psvm you posted contains the actual code. Should this not be the case, please fill the gaps for me.\n\nThere are multiple issues with the code example and I will address them one by one.\n\nYou have 4 local attributes q1-q4 with the 4 different instances. Based on the code I see that each of the classes contains one question and one answer. This already limits you to 4 questions tops. There is no way for you to get 10 different questions.\n\nTo solve this you have to rethink your approach. I will not go overboard with the OO-Aspect now, as this does not seem to be your goal.\nFirst we have to fix your \"static\" locals, and add some utility to enable your dynamic questions. Assuming that you do not really care too much about the distribution of types (addition etc) we can remove this separation from the main class. So we add a new class, which we call ProblemFactory, and an Interface, which we call Problem. Your 4 classes implement Problem.\n\n```\npublic final class ProblemFactory {\n\n    public static Problem createProblem(){\n        long random = Math.round((Math.random() * 4) + 1);\n        switch(random) {\n            case 1:\n                return new AdditionProblem();\n            case 2:\n                return new SubtractionProblem();\n                ...\n    }\n}\n\npublic interface Problem {\n\n    public String getProblem();\n\n    public String getAnswer();\n\n}\n```\n\n\nAnd in your main class you replace the Math.random() line with\n\n```\nProblem problem = ProblemFactory.createProblem();\n```\n\n\nYou do not require if(rand1 == 1.0) in the main class anymore, and you can remove all but one of these former if-else-blocks. q1-q4 is replaced with the new problem variable.\n\nNow your require one last change to your 4 Problem-Classes. I assume you have some type of map in there with 2 strings, where key is the question, and value is the answer. If that is the case your classes could look like this\n\n```\n\npublic class AdditionProblem(){\n\n    private static Map<String, String> questions = createQuestions();\n\n    private String problem;\n\n    private String answer;\n\n    private static Map<String, String> createQuestions() {\n        Map<String, String> questions = new HashMap();\n        questions.put(\"24 + 36 + 10\", \"70\");\n        //add as many more as you desire, but at least 10 total\n        return questions;\n    }\n\n    public AdditionProblem(){\n        //we first get the number of available questions\n        int numberOfQuestions = questions.size();\n        //we now generate a random again to choose which question to pick\n        long random = Math.round((Math.random() * numberOfQuestions) + 1);\n        //We pull they keySet from the map and use the random number as index, this is our question now\n        problem = questions.keys().get(random);\n        //we use the question to pull the answer\n        answer = questions.get(problem);\n        //as our last step, we remove the question from the list, so it is not pulled again\n        questions.remove(problem);\n    }\n\n    public String getProblem(){\n        return problem;\n    }\n\n    public String getAnswer(){\n        return answer;\n    }\n\n}\n\n```\n\n\nWith those changes you create a new Object of Problem with each loop iteration. You do not know, or care, what type of arithmetic function it is, you just know it is either of the 4, and always a new question.\nThe only thing you have to ensure now is that you have at least 10 questions per class, when you want to have 10 questions in the quiz. Otherwise you will run into exceptions eventually.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Converting a binary string to integer using a basic mathematical operator\r\n                \r\nMain:\n\n```\npublic class Main{                                      \n  public static void main(String[] args){                                       \n    System.out.println(Convert.BtoI(\"10001\"));                                  \n    System.out.println(Convert.BtoI(\"101010101\"));                                              \n  }                                     \n}\n```\n\n\nClass:\n\n```\npublic class Convert{                                       \n  public static int BtoI(String num){                                       \n    Integer i= Integer.parseInt(num,2);                                     \n    return i;                                       \n  }                                     \n}\n```\n\n\nSo I was working on converters, I was struggling as I am new to java and my friend suggested using integer method, which works. However, which method would be most efficient to convert using the basic operators (e.g. logical, arithmetic etc.)  \n    ", "Answer": "\r\n\n  .... my friend suggested using integer method, which works. \n\n\nCorrect: \n\n\nit works, and\nit is the best way.\n\n\n\n  However, which method would be most efficient to convert using the basic operators (e.g. logical, arithmetic etc.) \n\n\n\nIf you are new to Java, you should not be obsessing over the efficiency of your code.  You don't have the intuition.\nYou probably shouldn't optimize this it even if you are experienced.  In most cases, small scale efficiencies are irrelevant, and you are better off using a profiler to validate your intuition about what is important before you start to optimize.\nEven if this is a performance hotspot in your application, the ```\nInteger.parseint```\n code has (no doubt) already been well optimized.  There is little chance that you could do significantly better using \"primitive\" operations.  (Under the hood, the methods will most likely already be doing the same thing as you would be doing.)\n\n\n\n\nIf you are just asking this because you are curious, take a look at the source code for the ```\nInteger```\n class.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "(0.3)^3 == (0.3)*(0.3)*(0.3) returns false in matlab?\r\n                \r\nI am trying to understand roundoff error for basic arithmetic operations in MATLAB and I came across the following curious example.\n\n```\n(0.3)^3 == (0.3)*(0.3)*(0.3)\n\nans = 0\n```\n\n\nI'd like to know exactly how the left-hand side is computed. MATLAB documentation suggests that for integer powers an 'exponentiation by squaring' algorithm is used.\n\n\"Matrix power. X^p is X to the power p, if p is a scalar. If p is an integer, the power is computed by repeated squaring.\"\n\nSo I assumed ```\n(0.3)^3```\n and ```\n(0.3)*(0.3)^2```\n would return the same value. But this is not the case. How do I explain the difference in roundoff error? \n    ", "Answer": "\r\nI don't know anything about MATLAB, but I tried it in Ruby:\n\n```\nirb> 0.3 ** 3\n  => 0.026999999999999996\nirb> 0.3 * 0.3 * 0.3\n  => 0.027\n```\n\n\nAccording to the Ruby source code, the exponentiation operator casts the right-hand operand to a float if the left-hand operand is a float, and then calls the standard C function ```\npow()```\n. The ```\nfloat```\n variant of the ```\npow()```\n function must implement a more complex algorithm for handling non-integer exponents, which would use operations that result in roundoff error. Maybe MATLAB works similarly.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Efficient method to update Map values\r\n                \r\nWe have an array with transaction details of more than ten million records\n\n```\nKey1    Key2    Value\n-----------------------\nA       B       <value>\nB       C       <value>\nD       A       <value>\n...\n...\n```\n\n\nThe requirement is to perform basic arithmetic operation(add/subtract) on \"value\" from Key1 and add resulting value to Key2 (in a single transaction) for each of the records. The order of the transactions should be maintained. \nThe resulting map should have the cumulative transaction values.\n\n```\nKey     Result\nA       <result>\nB       <result>\nC       <result>\n...\n...\n```\n\n\nPlease suggest an efficient solution to this scenario.\n\nEdit\n\nApologies for not making this clear in the question earlier.\n\n```\nSample data:\n------------\n\nRow1 -> A,B,Add,10.0\nRow2 -> C,D,Subtract,20.0\nRow3 -> D,B,Add,50.0\nRow4 -> B,X,Subtract,30.0\n\nInitial Map:\n------------\nA     1000\nB     1000\nC     1000\nD     1000\nX     1000\n\nRow 1 => 10.0 to be subtracted from B and added to A (B:990 - A:1010)\nRow 2 => 20.0 to be subtracted from C and added to D (C:980 - D:1020)\nRow 3 => 50.0 to be subtracted from B and added to D (B:940 - D:1070)\nRow 4 => 30.0 to be subtracted from B and added to X (B:910 - X:1030)\n\nResulting Map:\n--------------\nA    1010\nB     910\nC     980\nD    1070\nX    1030\n```\n\n    ", "Answer": "\r\nYou have a list of transaction. Let's represent one transaction with its own class called\n\n```\npublic class Transaction {\n\n    private String target;\n    private String source;\n    private String operation;\n    private int amount;\n\n    public Transaction(String target, String source, String operation, int amount) {\n        this.target = target;\n        this.source = source;\n        this.operation = operation;\n        this.amount = amount;\n    }\n\n    // + getters\n\n}\n```\n\n\n```\nsource```\n will represent the source of the transaction and ```\ntarget```\n the target. In the case of an ```\n\"Add\"```\n operation, the source will be deduced by the ```\namount```\n and the target will be increased by the amount. If the operation is ```\n\"Subtract\"```\n, the transaction is reversed.\n\nThen, given a ```\nMap<String, Integer> map```\n that holds the initial values, we can loop over those transactions and make the calculation. During each one, we just need to subtract the amount from the source and add it to the target (in the case of an ```\n\"Subtract\"```\n, the amount is negative so the transaction is effectively reversed).\n\n```\npublic static void main(String[] args) {\n    // set-up sample data\n    Map<String, Integer> map = new HashMap<>();\n    for (String s : Arrays.asList(\"A\", \"B\", \"C\", \"D\", \"X\")) {\n        map.put(s, 1000);\n    }\n    List<Transaction> transactions = Arrays.asList(\n        new Transaction(\"A\",\"B\",\"Add\",10),\n        new Transaction(\"C\",\"D\",\"Subtract\",20),\n        new Transaction(\"D\",\"B\",\"Add\",50),\n        new Transaction(\"B\",\"X\",\"Subtract\",30)\n    );\n\n    // implement the transactions\n    for (Transaction t : transactions) {\n        final int amount = t.getOperation().equals(\"Add\") ? t.getAmount() : -t.getAmount();\n        map.put(t.getSource(), map.get(t.getSource()) - amount);\n        map.put(t.getTarget(), map.get(t.getTarget()) + amount);\n    }\n\n    System.out.println(map); // prints \"{A=1010, B=910, C=980, D=1070, X=1030}\"\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Chain arithmetic operators with the R |> pipe\r\n                \r\nThis is basically the same question as Chain arithmetic operators in dplyr with %>% pipe but updated for the new (as R 4.1) pipe operator ```\n|>```\n.\nHow can I chain arithmetic operators with the R native pipe ```\n|>```\n? With dplyr/magrittr, you can use backticks for arithmetic operators, but that doesn't work with the inbuilt R pipe operator. Here's a simple example:\n```\nR.version$version.string\n# [1] \"R version 4.2.2 (2022-10-31 ucrt)\"\n\nx <- 2\n# With dplyr/magrittr, you can use backticks for arithmetic operators\nx %>% `+`(2)\n# [1] 4\n\n# But that doesn't work with the inbuilt R pipe operator\nx |> `+`(2)\n#  Error: function '+' not supported in RHS call of a pipe\n```\n\nHopefully, the answer would be generic enough to work for any operator or in-built function that does not usually work nicely with the native R pipe (my version is R 4.2.2).\nThe answer https://stackoverflow.com/a/72086492/2449926 has lots of useful information on the differences between ```\n%>%```\n and ```\n|>```\n, but none that quite answers my question.\n    ", "Answer": "\r\nWe can use namespace prefixing.\n```\n2 |> base::`+`(2)\n# 4\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Complex number arithmetic in Tcl?\r\n                \r\nIs there an equivalent to the ```\nexpr```\n command which works for complex numbers (represented lists of two doubles)?\n\nThis library provides functions for complex number arithmetic, and this seems to be a useful utility to define the required ```\ncexpr```\n function, but it doesn't work well.\n\nE.g. it doesn't handle properly the brackets.\n\n```\nParseExpressions::ParseExpr { (1) + ((2) + (3)) } { }\n```\n\n\nreturns\n\n```\n+ [+ 1 ((2)] (3))\n```\n\n\nwhile it should return\n\n```\n+ [+ 1 2] 3\n```\n\n\nAlso\nParseExpressions::ParseExpr { {1 2} + {3 4} } {}\n\nreturns\n\n```\n+ 1 2 3 4\n```\n\n\nwhile it should return\n\n```\n+ {1 2} {3 4}\n```\n\n\nSo basically I am asking for a robust version of this utility.\n    ", "Answer": "\r\nWhy don't you try this: http://wiki.tcl.tk/11415\nor something like this too: http://wiki.tcl.tk/13885\n\nI hope these are easy to use alternatives for the mentioned utility.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to make my Arithmetic Class Modular c# CLI Program\r\n                \r\nBackground:\n\nHey guys, I'm studying a course in Software Design right now and I'm pretty confused over this. \n\nI decided to write a program so I could go over the basics of class:class interaction, and I have two classes right now, an Arithmetic Class which contains some very simple methods such as ```\nmultiply()```\n, ```\naddition()```\n etc.\n\nand my main class which contains a CLI menu via a case statement.\n\nWhat I'm trying to do is make my Arithmetic class modular.\n\nMy ```\nResultGen()```\n and ```\nrandomNumberGen()```\n methods contain ```\nConsole.WriteLine```\n and if possible, I don't want this Arithmetic class to have to rely on the Console Class being present (As I want to use this Arithmetic class with a GUI WPF program soon)\n\nMy question is, \n\nhow do I take the ```\nmonth```\n and the ```\nyear```\n variables from my ```\nrandomNumberGen()```\n method over to my main ```\nProgram()```\n class so I can format those there, and how do I take the ```\nresult```\n variable from ```\nResultGen()```\n over too?\n\nPreferably I'd like to use parameters or getters and setters to fulfil this problem rather than returns.\n\n```\n    public int ResultGen()\n    {\n        Console.WriteLine(\"Result is equal to: \" + result + \".\");\n        return result;\n    }\n\n    public void randomNumberGen()\n    {\n        Random rnd = new Random();\n        month = rnd.Next(1, 11); // creates a number between 1 and 12\n        year = rnd.Next(1, 21); // creates a number between 1 and 51\n        Console.WriteLine(\"Month: \" + month);\n        Console.WriteLine(\"Year:  \" + year);\n    }\n```\n\n\nHere's my main program:\n\n```\nclass Program\n{\n    static void Main(string[] args)\n    {\n        ProgramMenu();\n    }\n\n    static void ProgramMenu()\n    {\n        ConsoleKeyInfo cki;\n        Arithmetic math = new Arithmetic();\n        math.randomNumberGen();\n        Console.WriteLine(\"Press '1' for addition or '2' for multiplication, press '3 'to generate results\");\n        do\n        {\n            cki = Console.ReadKey(false); // show the key as you read it\n            switch (cki.KeyChar.ToString())\n            {\n                case \"1\":\n                {\n                    math.addition();\n                    math.ResultGen();\n                    break;\n                }\n                case \"2\":\n                {\n                    math.multipy();\n                    math.ResultGen(); \n                    break;\n                }\n                case \"3\":\n                {\n                    math.randomNumberGen();\n                    break;\n                }\n            }\n        } while (cki.Key != ConsoleKey.Escape);\n    }\n}\n```\n\n\nI appreciate any help you guys can give, but please keep in mind that I am a novice programmer only trying to understand basic practices.\n\nIf I tried to do this, I'd probably use a toString() method and I've tried that and failed.\n    ", "Answer": "\r\nUsing Tuples\n\nFor the first method just remove the ```\nConsole.WriteLine```\n call and do it in your application that is handling output.\n\nFor the second one you need to return both variables in this case would suggest returning a Tuple.\n\nChange the return type of your randomNumberGen to ```\nTuple<int,int>```\n the type for a two tuple with both members' types being ints, so your method signature should be\n\n```\npublic Tuple<int,int> randomNumberGen() \n```\n\n\nYou should create the tuple from the two variables (month and year), again a few ways to do this, easiest using the start ```\nTuple.Create```\n\n\nSo your return statement should look like this ```\nreturn Tuple.Create(month,year)```\n\n\nAt the callers end to remove the variables you can call the ```\nItem1```\n property for the first, and ```\nItem2```\n property for the second.\n\nyour method should look like this\n\n```\npublic Tuple<int,int> RandomNumberGen()\n{\n\n    Random rnd = new Random();\n    int month = rnd.Next(1, 11); // creates a number between 1 and 12\n    int year = rnd.Next(1, 21); // creates a number between 1 and 51\n\n    return Tuple.Create(month,year);\n\n}\n```\n\n\nand in your main\n\n```\n    var result = math.randomNumberGen();\n    var month = result.Item1;\n    var year = result.Item2;\n```\n\n\nNow you can do with month and year whatever you'd like.\n\nDesign Notes\n\nKnow this wasn't part of your question but just as an FYI normally convention for naming public facing members in C# is upper camel case, locals are lower camel case \n\nProperties ( doesn't make sense in this case )\n\nYou can set properties in any context with visibility to that properties setter, that is the property, in this case doing it this way makes no sense:\n\nin your class\n\n```\npublic int Month{ get; private set;} \npublic int Year { get; private set; }\n\npublic void RandomNumberGen()\n{\n    Random rnd = new Random();\n    Month = rnd.Next(1, 11); // creates a number between 1 and 12\n    Year = rnd.Next(1, 21); // creates a number between 1 and 51\n\n}\n```\n\n\nAnd in your main\n\n```\nvar custGenVarName = new Arithmetic();\ncustGenVarName.RandomNumberGen();\nint month = custGenVarName.Month;\nint year = custGenVarName.Year;\n```\n\n\nin this case that doesn't make sense, as a calculation result should not live in the object that is meant to do calculation, should do the calculation and return to the caller\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Multiplying peano integers in swi-prolog\r\n                \r\nI am currently on the verge of getting mad trying to solve a simple \"multiply peano integers\" problem in Prolog.\n\nBasic rules\n\n\nA peano integer is defined as follows: 0 -> 0; 1 -> s(0); 2 -> s(s(0)) s(s(s(0) -> 3 etc.\nThe relation is to be defined as follows: multiply(N1,N2,R)\n\nWhere\n\nN1 is the first peano integer (i.e. something like s(s(0)))\nN2 is the second peano integer (i.e. something like s(s(0)))\nR is the resulting new peano integer (like s(s(s(s(0))))\n\n\n\n\nI am aware of the fact that Prolog provides basic arithmetic logic by default, but I am trying to implement basic arithmetic logic using peano integers.\n\nAs a multiplication is basically a repeated addition, I think it could look something like this:\n\nProlog attempts\n\n```\n%Addition\n% Adds two peano integers 3+2: add(s(s(s(0))),s(s(0)),X). --> X = s(s(s(s(s(0)))))\nadd(X,0,X).\nadd(X,s(Y),s(Z)) :- add(X,Y,Z).\n\n%Loop\n%Loop by N\nloop(0).\nloop(N) :- N>0, NewN is N-1, loop(NewN).\n```\n\n\nThe problem is that I am out of ideas how I can get prolog to run the loop N times based on the coefficient, adding the peano integers and building up the correct result. I'm confident that this is rather easy to achieve and that the resulting code probably won't be longer than a few lines of code. I've been trying to achieve this for hours now and it's starting to make me mad.\n\nThank you so much for your help, and ... Merry Christmas!\n\nMike\n    ", "Answer": "\r\nthanks @false for the hint to this post:\nProlog successor notation yields incomplete result and infinite loop\n\nThe referenced PDF doc in this post helps clarifying a number of features regarding peano integers and how to get simple arithmetic to work - pages 11 and 12 are particularly interesing: http://ssdi.di.fct.unl.pt/flcp/foundations/0910/files/class_02.pdf\n\nThe code could be set up like this - please note the two approaches for multiplying the integers:\n\n```\n%Basic assumptions\nint(0). %0 is an integer\nint(s(M)) :- int(M). %the successor of an integer is an integer\n\n%Addition\nsum(0,M,M). %the sum of an integer M and 0 is M.\nsum(s(N),M,s(K)) :- sum(N,M,K). %The sum of the successor of N and M is the successor of the sum of N and M.\n\n%Product\n%Will work for prod(s(s(0)),s(s(0)),X) but not terminate for prod(X,Y,s(s(0)))\nprod(0,M,0). %The product of 0 with any integer is 0\nprod(s(N),M,P) :- \n    prod(N,M,K), \n    sum(K,M,P).%The product of the successor of N and M is the sum of M with the product of M and N. --> (N+1)*M = N*M + M\n\n%Product #2\n%Will work in both forward and backward direction, note the order of the calls for sum() and prod2()\nprod2(0,_,0). %The product of 0 with any given integer is 0\nprod2(s(N), M, P) :- % implements (N+1)*M = M + N*M\n   sum(M, K, P),\n   prod2(M,N,K).\n```\n\n\nWhich, when consulting the database will give you something like this:\n\n```\n?- prod(s(s(s(0))),s(s(s(0))),Result).\nResult = s(s(s(s(s(s(s(s(s(0))))))))).\n\n?- prod2(s(s(s(0))),s(s(s(0))),Result).\nResult = s(s(s(s(s(s(s(s(s(0))))))))).\n```\n\n\nPlease note the different behavior of ```\nprod()```\n and ```\nprod2()```\n when consulting Prolog in reverse direction - when tracing, please pay attention to the way Prolog binds its variables during the recursive calls:\n\n```\n?- prod(F1,F2,s(s(s(s(0))))).\nF1 = s(0),\nF2 = s(s(s(s(0)))) ;\nF1 = F2, F2 = s(s(0)) ;\nERROR: Out of global stack\n\n?- prod2(F1,F2,s(s(s(s(0))))).\nF1 = s(s(s(s(0)))),\nF2 = s(0) ;\nF1 = F2, F2 = s(s(0)) ;\nF1 = s(0),\nF2 = s(s(s(s(0)))) ;\nfalse.\n```\n\n\nI would therefore discourage from the use of ```\nprod()```\n as it doesn't reliably terminate in all thinkable scenarios and use ```\nprod2()```\n instead.\n\nI'm really excited by the people here at StackOverflow. I got so much useful feedback, which really helped me in getting a deeper understanding of how Prolog works. Thanks a ton everyone!\n\nMike\n\nEdit: Had another look at this issue thanks to @false and the following post: Prolog successor notation yields incomplete result and infinite loop\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "php manipulation of one data simple basic php code execution\r\n                \r\nI have to solve an assignment question that touches on the simple basic php codings learnt in class so far..the question goes:\n\nArithmetic-assignment operators perform an arithmetic operation on the variable at the same time as assigning a new value. Write a script to reproduce the output below. Manipulate only one variable using no simple arithmetic operators to produce the values given in the statements. \n\nHint: In the script each statement ends with \"Value is now $variable.\"\n\n```\nOutput:\n\nValue is now 8.\nAdd 2. Value is now 10.\nSubtract 4. Value is now 6.\nMultiply by 5. Value is now 30.\nDivide by 3. Value is now 10.\nIncrement value by one. Value is now 11.\nDecrement value by one. Value is now 10.\n```\n\n\nDo you guys think the question is telling me to use arrays??\n\nCoz I'm just gonna take a swing at this and assume it is arrays that this question wants me to write.. Then here is my sample answer. Hope you guys could check it out and see if my answer meets the question's needs:\n\n```\n    <?php\n    $numbers=array(\"8\",\"10\",\"6\",\"30\",\"11\");\n    echo \"Value is now {$numbers[0]}.<br>\";\n    echo \"Add 2. Value is now {$numbers[1]}.<br>\";\n    echo \"Subtract 4. Value is now {$numbers[2]}.<br>\";\n    echo \"Multiply by 5. Value is now{$numbers[3]}.<br>\";\n    echo \"Divide by 3. Value is now {$numbers[1]}.<br>\";\n    echo \"Increment value by one. Value is now {$numbers[4]}.<br>\";\n    echo \"Decrement value by one. Value is now {$numbers[1]}.<br>\";\n    ?>\n```\n\n    ", "Answer": "\r\nI believe you are asked to use the arithmetic operators.\n\nIf so it should be like:\n\n```\n<?php\n    $value = 8;\n    echo \"Value is now $value.<br>\";\n    echo \"Add 2. Value is now \" . $value+=2 . \".<br>\";\n    echo \"Subtract 4. Value is now \" . $value-=4 . \".<br>\";\n    echo \"Multiply by 5. Value is now\" . $value*=5 . \".<br>\";\n    // do the rest as this is an assignment\n?>\n```\n\n\nYou can play with it here.\n\nNote:\n\n\n  ```\n<br>```\n is for HTML. If you are only asked to use PHP then use ```\n\\r\\n```\n.\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why does using a character class make this left-recursive?\r\n                \r\nI have the following to define a basic arithmetic grammar:\n```\ngrammar Calc;\n\n\nexpression\n    : '(' expression ')'                // parenExpression has highest precedence\n    | expression ('*' | '/') expression // then multDivExpression\n    | expression ('+' | '-') expression // then addSubExpression\n    | OPERAND\n    ;\n\n// 12 or .12 or 2. or 2.38\nOPERAND\n    : [0-9]+ ('.' [0-9]*)?\n    | '.' [0-9]+\n    ;\n```\n\nAnd it can handle something like:\n```\n1+2*3\n```\n\nHowever, as soon as I change the ```\n('*' | '/')```\n to the character class ```\n[*/]```\n I get the following error:\n\nHow does adding a character class do this? Or is it because I'm trying to add that to a parser rule and not a lexer rule, or why does that occur?\nUpdate: extracting the character class out of the grammar rule fixes it, but it'd be great to understand why:\n```\nexpression\n    : '(' expression ')'           // parenExpression has highest precedence\n    | expression MULDIV expression // then multDivExpression\n    | expression ADDSUB expression // then addSubExpression\n    | OPERAND\n    ;\n\nMULDIV\n    : [*/]\n    ;\n\nADDSUB\n    : [-+]\n    ;\n```\n\n    ", "Answer": "\r\nCharacter classes are only available to Lexer rules.\nwhen you put literals (```\n'+'```\n, ```\n'/'```\n, etc.) implicit Lexer rules are defined for you (and given rather unusable names like ```\nT__1```\n, ```\nT__2```\n, etc.). So they're just convenient ways of inserting implicit tokens.  (The character class is only available in actual Lexer rules.)\nNot sure which version of ANTLR you're using, but I get a \"rule expression has no defined parameters\" error, and not mutual left recursion.\nI think you're seeing a side effect of the character class syntax not being available in parser rules.  (The ```\n[```\n...```\n]```\n syntax has an entirely different meaning in parser rules.)\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Nim. How to inherit all operations on distinct type?\r\n                \r\nSuppose, I have ```\ntype Radians = distinct float```\n and ```\ntype Degrees = distinct float```\n\nThis is not allowing me to use all operations available for floats, even most basic arithmetics ```\n+```\n, ```\n-```\n, ```\n*```\n\nIs there any way to sort of 'inherit' them all and use ```\ndistinct```\n only for compile-time checks?\n    ", "Answer": "\r\nCheck the Modeling Currencies section from the Distinct type on the nim manual for the full example.\nIn summary:\nUse the borrow pragma\n```\nproc `*` (x: int, y: Dollar): Dollar {.borrow.}\nproc `div` (x: Dollar, y: int): Dollar {.borrow.}\n```\n\nUse templates to reduce boilerplate\n```\ntemplate multiplicative(typ, base: typedesc) =\n  proc `*` *(x: typ, y: base): typ {.borrow.}\n  proc `*` *(x: base, y: typ): typ {.borrow.}\n  proc `div` *(x: typ, y: base): typ {.borrow.}\n  proc `mod` *(x: typ, y: base): typ {.borrow.}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to add column with query folding using snowflake connector\r\n                \r\nI am trying to add a new column to a power query result that is the result of subtracting one column from another. according to the power bi documentation basic arithmetic is supported with query folding but for some reason it is showing a failure to query fold. I also tried simply adding a column populated with the number 1 and it still was not working. Is there some trick to getting query folding a new column to work on snowflake? \n    ", "Answer": "\r\nIf the computation is made based only on data from source, then it could be computed during table import as SQL Statement:\n```\nSELECT col1, col2, col1 + col2 AS computed_total\nFROM my_table_name\n```\n\n\n\nEDIT:\n\nThe problem with this solution is that native SQL statement for snowflake is only supported on PBI desktop and I want to have this stored in a dataflow (so pbi web client) for reusability and other reasons.\n\nOption 1:\nCreate a view istead of table at source:\n```\nCREATE OR REPLACE VIEW my_view\nAS\nSELECT col1, col2, col1 + col2 AS computed_total\nFROM my_table_name;\n```\n\nOption 2:\nAdd computed column to the table:\n```\nALTER TABLE my_table_name\nADD COLUMN computed_total NUMBER(38,4) AS (col1 + col2);\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "multiple arithmetic expressions in processing\r\n                \r\nOk, so still getting use to the basics with processing, and I am unsure if this is the correct way to do multiple arithmetic expressions with the same data, should I be typing each as its own code, or doing it like this?\n\nhere is the question;\n\n\n  \n  Write the statements which perform the following arithmetic operations (note: the variable names can be changed). (i)  a=50 b=60\n  c=43 result1 = a+b+c result2=a*b result3 = a/b\n  \n\n\nhere is my code;\n\n```\nshort a = 50;\nshort b = 60;\nshort c = 43;\nint sum = a+b+c; // Subsection i\nprint (sum);\nint sum2 = a*b; // Subsection ii\nprint (sum2);\nint sum3 =a/b; // Subsection iii\nprint (sum3); \n```\n\n    ", "Answer": "\r\nUsing the same variable for a in all three expressions, like you're doing, is the right way.  This means that if you wanted to change a, b, or c you'd only have to change it in one place.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is there a way to check input data type using only basic concepts?\r\n                \r\nI'm being challenged to find ways to perform tasks that usually require the use of headers (besides ```\niostream```\n and ```\niomanip```\n) or greater-than-basic C++ knowledge. How can I check the data type of user input using only logical operators, basic arithmetic (+, -, *, /, %), if statements, and while loops?\n\nObviously the input variable has a declared data type in the first place, but this problem is covering the possibility of the user inputting the wrong data type.\n\nI've tried several methods including the ```\nif (!(cin >> var1))```\n trick, but nothing works correctly. Is this possible at all?\n\nExample\n\n```\nint main() {\n    int var1, var2;\n    cin >> var1;\n    cin >> var2;\n    cout << var1 << \" - \" << var2 << \" = \" << (var1-var2);\n\n    return 0;\n}\n```\n\n\nIt's possible to input ```\nasdf```\n and ```\n5.25```\n here, so how do I check that the input aren't integers as expected, using only the means I stated earlier?\n\n\n\nI understand this problem is vague in many ways, mostly because the restrictions are extremely specific and listing everything I'm allowed to use would be a pain. I guess part of the problem as mentioned in the comments is figuring out how to distinguish between data types in the first place.\n    ", "Answer": "\r\nYou can do that using simple operations, although it might be a little difficult, for example the following function can be used to check if the input is a decimal number. You can extend the idea and check if there is a period in between for floating point numbers. \n\nAdd a comment if you need further help.\n\n```\nbool isNumber(char *inp){\n    int i = 0;\n    if (inp[0] == '+' || inp[0] == '-') i = 1;\n    int sign = (inp[0] == '-' ? -1 : 1);\n    for (; inp[i]; i++){\n        if (!(inp[i] >= '0' && inp[i] <= '9'))\n            return false;\n    }\n    return true;\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "bitwise arithmetic tutorial\r\n                \r\nI'm looking for tutorials which talk about bitwise arithmetic operations, such as addition, subtraction, multiplication and division, maybe other operators more complicated like modular, inverse modular etc.\n\nActually I'm trying to implement a big number library for an embedded system on which there is no such library. So I'd like to learn how to handle signed big integers and how to do arithmetic calculations by manipulating bits. Now the only idea I have is to hold my big integer in a big ```\nuint8_t```\n array with 1 bit reserved for sign. For example, if I need a 160-bit integer, then I need an array ```\nuint8_t num[21]```\n.\n\nWhat are the basic knowledge that I have to learn ? I've searched on Google but I haven't found many well explained tutorials. Or more exactly I don't know what are the keywords that I have to use.\n\nSo I need your suggestions. If you know where I can find interesting tutorials, please post links here. PDFs, web pages, videos anything.\n    ", "Answer": "\r\nThe topic you're interested in is called arbitrary precision arithmetic.\n\nFurther information can be found here: http://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic\n\nAs far as \"basic knowledge\" is concerned: you will need to learn algorithms for performing arithmetic. you will also need a fairly competent understanding of dynamic memory management. I suspect your approach using arrays can be very clumsy and wasteful.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic expression Antlr4 grammar\r\n                \r\nI am trying to write a basic grammar that starts with '{' and ends with '}'.\nIt has 'IF' and 'Else' only. And some basic expressions like a = (arithmetic operation). There is no need for variable initialisation and declaration check. Can someone guide me, I am writing grammar, but it is not working properly. I am writing code below of my grammar.\n```\nprog: stat_block+ EOF;\n\nstat_block\n: OBRACE block CBRACE\n;\n\nblock\n: stat*\n;\n\nstat: expr\n;\n\nexpr: expr ('*'|'/') expr\n| expr ('+'|'-') expr\n| expr ('<'|'<='|'>='|'>'|'=') expr\n| expr ( '&&'|'||') expr\n| expr '(' exprList? ')'\n| IF condition_block  (ELSE stat_block)?\n;\n\nexprList : expr (',' expr)* ;\n\ncondition_block\n: OPAR expr CPAR stat_block\n;\n\nIF : 'IF';\nELSE : 'ELSE';\nOPAR : '(';\nCPAR : ')';\nOBRACE : '{';\nCBRACE : '}';\nID : [a-zA-Z]+ ;\nINT : [0-9]+ ;\nNEWLINE:'\\r'? '\\n' ;\nWS : [ \\t]+ -> skip ;\n```\n\nSample Code for what i am trying to write grammar for\n```\n{\n IF ( a > 10 && funcName(param) = Found ) {\n    b = 10;\n }\n ELSE {\n    b=20;\n }\n}\n```\n\nIf statement can be nested. IF some one can provide me with grammar or tell me, what i am doing wrong. that will be huge help. thanks.\n    ", "Answer": "\r\nWith the following changes, I get an error free parse and a parse tree:\n1.\n```\nNEWLINE:'\\r'? '\\n' ;\n```\n\nYou're not using the ```\nNEWLINE```\n token, so, presumably, you want to hide that token from the parser rules.  ```\n-> skip```\n is one simple way to accomplish that.\n```\nNEWLINE:'\\r'? '\\n' -> skip;\n```\n\n\n\n\n```\nexpr\n    : expr ('*' | '/') expr\n    | expr ('+' | '-') expr\n    | expr ('<' | '<=' | '>=' | '>' | '=') expr\n    | expr ( '&&' | '||') expr\n    | expr '(' exprList? ')'\n    | IF condition_block (ELSE stat_block)?\n    ;\n```\n\n```\nID```\ns and ```\nNUMBER```\ns should also be considered expressions\n```\nexpr\n    : expr ('*' | '/') expr\n    | expr ('+' | '-') expr\n    | expr ('<' | '<=' | '>=' | '>' | '=') expr\n    | expr ( '&&' | '||') expr\n    | expr '(' exprList? ')'\n    | IF condition_block (ELSE stat_block)? \n    | ID\n    | INT\n    ;\n```\n\n\n\n\n```\nblock\n: stat*\n;\n\nstat: expr\n;\n```\n\nYou haven't accounted for the possibility/requirement of the ```\n;```\n after an expression\nIt's not clear you intention. so\nTo simply say that each expression may be followed by a ```\n;```\n\n```\nstat: expr ';'?;\n```\n\nThis would allow for some possible confusion when expressions appear adjacent to one another without a ```\n;```\n, so consider making it non-optional.\n```\nstat: expr ';';\n```\n\nMany language treat ```\n;```\n as a expression/statement separator.\n```\nblock: (stat (stat ';')*)?;\n```\n\n\nThe sum of the changes:\n```\ngrammar Basic\n    ;\n\nprog: stat_block+ EOF;\n\nstat_block: OBRACE block CBRACE;\n\nblock: (stat (stat ';')*)?;\n\nstat: expr ';'?;\n\nexpr\n    : expr ('*' | '/') expr\n    | expr ('+' | '-') expr\n    | expr ('<' | '<=' | '>=' | '>' | '=') expr\n    | expr ( '&&' | '||') expr\n    | expr '(' exprList? ')'\n    | IF condition_block (ELSE stat_block)?\n    | ID\n    | INT\n    ;\n\nexprList: expr (',' expr)*;\n\ncondition_block: OPAR expr CPAR stat_block;\n\nIF:      'IF';\nELSE:    'ELSE';\nOPAR:    '(';\nCPAR:    ')';\nOBRACE:  '{';\nCBRACE:  '}';\nID:      [a-zA-Z]+;\nINT:     [0-9]+;\nNEWLINE: '\\r'? '\\n' -> skip;\nWS:      [ \\t]+     -> skip;\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Basic expression Antlr4 grammar\r\n                \r\nI am trying to write a basic grammar that starts with '{' and ends with '}'.\nIt has 'IF' and 'Else' only. And some basic expressions like a = (arithmetic operation). There is no need for variable initialisation and declaration check. Can someone guide me, I am writing grammar, but it is not working properly. I am writing code below of my grammar.\n```\nprog: stat_block+ EOF;\n\nstat_block\n: OBRACE block CBRACE\n;\n\nblock\n: stat*\n;\n\nstat: expr\n;\n\nexpr: expr ('*'|'/') expr\n| expr ('+'|'-') expr\n| expr ('<'|'<='|'>='|'>'|'=') expr\n| expr ( '&&'|'||') expr\n| expr '(' exprList? ')'\n| IF condition_block  (ELSE stat_block)?\n;\n\nexprList : expr (',' expr)* ;\n\ncondition_block\n: OPAR expr CPAR stat_block\n;\n\nIF : 'IF';\nELSE : 'ELSE';\nOPAR : '(';\nCPAR : ')';\nOBRACE : '{';\nCBRACE : '}';\nID : [a-zA-Z]+ ;\nINT : [0-9]+ ;\nNEWLINE:'\\r'? '\\n' ;\nWS : [ \\t]+ -> skip ;\n```\n\nSample Code for what i am trying to write grammar for\n```\n{\n IF ( a > 10 && funcName(param) = Found ) {\n    b = 10;\n }\n ELSE {\n    b=20;\n }\n}\n```\n\nIf statement can be nested. IF some one can provide me with grammar or tell me, what i am doing wrong. that will be huge help. thanks.\n    ", "Answer": "\r\nWith the following changes, I get an error free parse and a parse tree:\n1.\n```\nNEWLINE:'\\r'? '\\n' ;\n```\n\nYou're not using the ```\nNEWLINE```\n token, so, presumably, you want to hide that token from the parser rules.  ```\n-> skip```\n is one simple way to accomplish that.\n```\nNEWLINE:'\\r'? '\\n' -> skip;\n```\n\n\n\n\n```\nexpr\n    : expr ('*' | '/') expr\n    | expr ('+' | '-') expr\n    | expr ('<' | '<=' | '>=' | '>' | '=') expr\n    | expr ( '&&' | '||') expr\n    | expr '(' exprList? ')'\n    | IF condition_block (ELSE stat_block)?\n    ;\n```\n\n```\nID```\ns and ```\nNUMBER```\ns should also be considered expressions\n```\nexpr\n    : expr ('*' | '/') expr\n    | expr ('+' | '-') expr\n    | expr ('<' | '<=' | '>=' | '>' | '=') expr\n    | expr ( '&&' | '||') expr\n    | expr '(' exprList? ')'\n    | IF condition_block (ELSE stat_block)? \n    | ID\n    | INT\n    ;\n```\n\n\n\n\n```\nblock\n: stat*\n;\n\nstat: expr\n;\n```\n\nYou haven't accounted for the possibility/requirement of the ```\n;```\n after an expression\nIt's not clear you intention. so\nTo simply say that each expression may be followed by a ```\n;```\n\n```\nstat: expr ';'?;\n```\n\nThis would allow for some possible confusion when expressions appear adjacent to one another without a ```\n;```\n, so consider making it non-optional.\n```\nstat: expr ';';\n```\n\nMany language treat ```\n;```\n as a expression/statement separator.\n```\nblock: (stat (stat ';')*)?;\n```\n\n\nThe sum of the changes:\n```\ngrammar Basic\n    ;\n\nprog: stat_block+ EOF;\n\nstat_block: OBRACE block CBRACE;\n\nblock: (stat (stat ';')*)?;\n\nstat: expr ';'?;\n\nexpr\n    : expr ('*' | '/') expr\n    | expr ('+' | '-') expr\n    | expr ('<' | '<=' | '>=' | '>' | '=') expr\n    | expr ( '&&' | '||') expr\n    | expr '(' exprList? ')'\n    | IF condition_block (ELSE stat_block)?\n    | ID\n    | INT\n    ;\n\nexprList: expr (',' expr)*;\n\ncondition_block: OPAR expr CPAR stat_block;\n\nIF:      'IF';\nELSE:    'ELSE';\nOPAR:    '(';\nCPAR:    ')';\nOBRACE:  '{';\nCBRACE:  '}';\nID:      [a-zA-Z]+;\nINT:     [0-9]+;\nNEWLINE: '\\r'? '\\n' -> skip;\nWS:      [ \\t]+     -> skip;\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Arcpy map algebra from reticulate\r\n                \r\nI'm trying to use ```\narcpy```\n from R via ```\nreticulate```\n. For the most part, it works really well. However, I'm running into some issues when trying to do raster algebra. Consider the following code:\n\n```\nlibrary(reticulate)\nuse_python(\"C:/Python27/ArcGISx6410.2\")\n\narcpy = import(\"arcpy\")\narcpy$CheckOutExtension(\"Spatial\")\n\narcpy$management$CreateRandomRaster(\"in_memory\", \n  \"randrast\", \"NORMAL 3.0\", \"0 0 500 500\", 50)\n\nrandrast = arcpy$sa$Raster(\"in_memory/randrast\")\n\ndoublerast = randrast + randrast \n```\n\n\n\n  Error in randrast + randrast : non-numeric argument to binary operator\n\n\nIt seems that even though ```\nreticulate```\n recognizes that the rasters are Python objects (```\n\"python.builtin.Raster\" \"python.builtin.object\"```\n), it doesn't know to use Python's ```\n+```\n operator rather than R's. I tried importing ```\narcpy```\n with ```\nconvert = FALSE```\n but the error is the same.\n\nI can get around this by defining Python functions to mimic the basic arithmetic operators.\n\n```\ntmp = tempfile(fileext = \".py\")\ncat(\"def add(x, y):\\n  return x + y\\n\", file = tmp)\n\nsource_python(tmp)\n\ndoublerast = add(randrast, randrast)\n```\n\n\nBut obviously this is gets pretty cumbersome for more complex statements.\n\nDoes anyone know of a way to force ```\nreticulate```\n to use Python's arithmetic operators for Python objects, rather than R's?\n    ", "Answer": "\r\nOne option is to define my own operators for Python objects using the ```\noperator```\n module:\n\n```\n`%py+%` = function(e1, e2) {\n  op = import(\"operator\")\n  op$add(e1, e2)\n}\n\ndoublerast = randrast %py+% randrast \n```\n\n\nOr, alternatively, use S3 classes to overload the arithmetic operators (as is done for TensorFlow) to support ```\npython.builtin.object```\n, e.g.\n\n```\n`+.python.builtin.object` = function(e1, e2) {\n  op = import(\"operator\")\n  op$add(e1, e2)\n}\n```\n\n\nBut I worry that order of operations might not function as expected.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Select arithmetic operation e.g. 2 + 2 eval and echo result in the minibuffer\r\n                \r\nI have an org file with lots of tables containing simple arithmetic values like \"2 + 2\", \"1 + 2 + 3\", \"3 * 4\"(notice - no elisp here) that I want to keep as is, without transforming into corresponding arithmetic results(for transparency/visibility reasons).\nBut I would like to find a way to quickly select any cell/arithmetic operation and get its result(ideally in popup/separate minibuffer).\nIs it possible?\nBasically it's a combination of ```\n(calculator)```\n but in non-iterative way using the selected region.\n    ", "Answer": "\r\nI was able to a function that does exactly that\n```\n(calc-grab-region)```\n\n\nParse the region as a vector of numbers and push it on the Calculator stack.\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Splitting string input into discrete numbers and operators\r\n                \r\nI am trying to split a string like ```\n\"-10 5 + 3 *\"```\n into component parts to use in basic arithmetic, while maintaining the integrity of operators, e.g. not confusing ```\n-10```\n for the ```\n-```\n operator and a ```\n10```\n. How should I approach this?\nCurrently I am doing a simple split based on a space delimiter, and intend to write individual methods to deal with each operation. However this does not account for inputs with no spaces: example ```\n\"11+1+1\"```\n. I have explored delimiting by every character e.g. ```\nstring.split(\"\")```\n but missing something in the logic.\n```\nString[] simplifyCommand(String s) {\n    return s.split(\" \");\n    //or s.split(\"\"); for individual characters\n  }\n```\n\n    ", "Answer": "\r\nYou can use the ```\n\\b```\n word boundary regex anchor to split your input string into digits and operators:\n```\n\"11+1+1\".split(\"\\\\b\");\n```\n\nAbove expression would produce ```\n[11, +, 1, +, 1]```\n as its result so you can iterate through the result as is.\nLikewise, ```\n\"11+1+1\".split(\"\\\\b\")```\n would produce ```\n[-, 11, +, 1, +, 1]```\n as a result. This should not make it any harder to interpret the operation itself.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Arithmetic operation when multiple textbox is created by js\r\n                \r\nI created a basic table where textboxes are available on button click. Now I want to perform some arithmetic operations on it and show value in the total column and parallelly I want to to do the mass calculation at the end. ```\n(quantity * price = total)```\n in each row and at the end for the table\n\nWhat I want:\n\n```\n         Quantity       Price       Total\n          28             300         8400\n           8              50          400\nTOTAL     36             350         8800\n```\n\n\nI use this JS code to create multiple textbox:\n\n```\nvar index = 1;\n\nfunction insertRow() {\n    var table = document.getElementById(\"rep1\");\n    var row = table.insertRow(table.rows.length);\n\n    var cell1 = row.insertCell(0);\n    var t1 = document.createElement(\"input\");\n    t1.id = \"quan\" + index;\n    t1.name = \"quan[]\";\n    cell1.appendChild(t1).classList.add('form-control');\n\n    var cell2 = row.insertCell(1);\n    var t2 = document.createElement(\"input\");\n    t2.id = \"price\" + index;\n    t2.name = \"price[]\";\n    cell2.appendChild(t2).classList.add('form-control');\n\n    var cell3 = row.insertCell(2);\n    var t3 = document.createElement(\"input\");\n    t3.id = \"total\" + index;\n    t3.name = \"total[]\";\n    cell3.appendChild(t3).classList.add('form-control');\n\n    index++;\n}\n```\n\n\nThis for html (For holding total of Quantity,Price,Total):\n\n```\nQuantity Total<input type=\"number\" name=\"quanTotal\" readonly>\nPrice Total<input type=\"number\" name=\"priceTotal\" readonly>\nGrand Total<input type=\"number\" name=\"grandTotal\" readonly>\n```\n\n    ", "Answer": "\r\nI have edited the code.And when you click the add row button it will perform the arithmetic operation and total will be appending the total field textboxes. Hope this is what you want. \n\n\r\n\r\n```\n$(function(){\r\ninsertRow();\r\n$('#addrow').on('click',function(){\r\ninsertRow();\r\n});\r\n//var index = 1;\r\n\r\nfunction insertRow() {\r\n    var index = $('#noofrows').val();\r\n    var table = document.getElementById(\"rep1\");\r\n    var row = table.insertRow(table.rows.length);\r\n\r\n    var cell1 = row.insertCell(0);\r\n    var t1 = document.createElement(\"input\");\r\n    t1.id = \"quan\" + index;\r\n    t1.name = \"quan[]\";\r\n    cell1.appendChild(t1).classList.add('form-control');\r\n\r\n    var cell2 = row.insertCell(1);\r\n    var t2 = document.createElement(\"input\");\r\n    t2.id = \"price\" + index;\r\n    t2.name = \"price[]\";\r\n    cell2.appendChild(t2).classList.add('form-control');\r\n\r\n    var cell3 = row.insertCell(2);\r\n    var t3 = document.createElement(\"input\");\r\n    t3.id = \"total\" + index;\r\n    t3.name = \"total[]\";\r\n    cell3.appendChild(t3).classList.add('form-control');\r\n\r\n    index++;\r\n    $('#noofrows').val(index);\r\n    \r\n    var quan = $('input[name=\"quan[]\"]').map(function () {\r\n    return (this.value)?this.value:'0'; \r\n    }).get();\r\n    //console.log(quan);\r\n    quan_total=0;\r\n    for(i=0;i<quan.length;i++){\r\n     quan_total += parseInt(quan[i]);\r\n    }\r\n    $('[name=quanTotal]').val(quan_total);\r\n    \r\n    var price = $('input[name=\"price[]\"]').map(function () {\r\n    return (this.value)?this.value:'0'; \r\n    }).get();\r\n    price_total=0;\r\n    for(i=0;i<price.length;i++){\r\n     price_total += parseInt(price[i]);\r\n     j=i+1;\r\n     t =parseInt(price[i])+parseInt(quan[i]);\r\n     $('#total'+j).val(t);\r\n    }\r\n    $('[name=priceTotal]').val(price_total);\r\n    \r\n    var grand = $('input[name=\"total[]\"]').map(function () {\r\n    return (this.value)?this.value:'0'; \r\n    }).get();\r\n    grand_total=0;\r\n    for(i=0;i<grand.length;i++){\r\n     grand_total += parseInt(grand[i]);\r\n    }\r\n    $('[name=grandTotal]').val(grand_total);\r\n}\r\n\r\n\r\n});```\n\r\n```\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\r\n<table id=\"rep1\">\r\n<input type='button' name='addrow' id='addrow' value='Add Row'>\r\n</table>\r\n\r\nQuantity Total<input type=\"number\" name=\"quanTotal\" readonly>\r\nPrice Total<input type=\"number\" name=\"priceTotal\" readonly>\r\nGrand Total<input type=\"number\" name=\"grandTotal\" readonly>\r\n<input type='hidden' name='noofrows'  id='noofrows' value='1'>```\n\r\n\r\n\r\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How can I do 64-bit arithmetic in Perl?\r\n                \r\nI am a perl newbie,\n\nCan I simply use 64-bit arithmetic in Perl?\n\nFor example\n\n```\n$operand1 = 0xFFFFFFFFFFFF;   # 48 bit value\n$operand2 = 0xFFFFFFFFFFFF;   # 48 bit value\n\n$Result = $operand1 * $operand2;\n```\n\n\n\nI am basically looking for a\nreplacement for the int64_t in perl.\nIs there any way to mention, if the\nvariable is signed or unsigned?\n\n    ", "Answer": "\r\nYes, however you need to have Perl compiled with 64-bit support.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Accessing hi and low part of int64_t with int32_t\r\n                \r\nI am working on a 32-bit architecture where ```\nint64_t```\n is defined only with the most recent version of the compiler (software emulation). Since we did not entirely upgraded to the last compiler, I would like to manage 64-bit integers with a union and define basic arithmetic operations.\nI wrote this:\n```\ntypedef union _int64_u {\n    int64_t  int64;\n    int64_32 int32;\n} int64_u;\n\ntypedef struct _int64_32 {\n    int32_t hi;\n    int32_t lo;\n}  \n```\n\nI would like to clarify the following points:\n\nWhat is the naming standards for such definition (part and types)?\nIs this solution correct?\n\nHereafter, an example of the add and sub functions:\n```\n#pragma inline\n#pragma always_inline\nint64_u int64_sub(int64_u x, int64_u y)\n{\n    int64_u n;\n    asm(\"%0 = %1 - %2;\"\n            : \"=d\" (n.int32.lo)\n            : \"d\"  (x.int32.lo), \"d\" (y.int32.lo));\n    asm(\"%0 = %1 - %2 + CI - 1;\"\n            : \"=d\" (n.int32.hi)\n            : \"d\"  (x.int32.hi), \"d\" (y.int32.hi));\n    return n;\n}\n\n#pragma inline\n#pragma always_inline\nint64_u int64_add(int64_u x, int64_u y)\n{\n    int64_u n;\n    asm(\"%0 = %1 + %2;\"\n            : \"=d\" (n.int32.lo)\n            : \"d\"  (x.int32.lo), \"d\" (y.int32.lo));\n    asm(\"%0 = %1 + %2 + CI;\"\n            : \"=d\" (n.int32.hi)\n            : \"d\"  (x.int32.hi), \"d\" (y.int32.hi));\n    return n;\n} \n```\n\n    ", "Answer": "\r\nFirst I should note that ```\nint64_t```\n is a C99 feature, but older C89 compilers often already have support for double-word operations via some extension types like ```\nlong long```\n or ```\n__int64```\n. Check if it's the case of your old compiler, if not then check if your compiler has an extension to get the carry flag, like ```\n__builtin_addc()```\n or ```\n__builtin_add_overflow()```\n. If all failed go to the next step\nNow ```\n%0 = %1 + %2;```\n is not an assembly instruction in any architecture I know, but it looks more readable than the traditional mnemonic syntax. However you don't even need to use assembly for multiword additions/subtractions like this. It's very simple to do directly in C since\n\nbasic operations in 2's complement don't depend on the signness of the type, and\nif an overflow occurs then the result will be smaller than the operands (in unsigned) which we can use to get the carry bit\n\nRegarding the implementation, since your old compiler has no 64-bit type, there's no need to declare the union, and you can't do that either because ```\nint64_t```\n wasn't declared before. You can just access the whole thing as a struct.\n```\n#if COMPILER_VERSION <= SOME_VERSION\n\ntypedef UINT64_T {\n    uint32_t h;\n    uint32_t l;\n} uint64_t;\n\nuint64_t add(uint64_t x, uint64_t y)\n{\n    uint64_t z;\n    z.l = x.l + y.l;               // add the low parts\n    z.h = x.h + y.h + (z.l < x.l); // add the high parts and carry\n    return z;\n}\n\n// ...\n\n#else\nuint64_t add(uint64_t x, uint64_t y)\n{\n    return x + y;\n}\n#endif\n\nt = add(2, 3);\n```\n\nIf you need a signed type then a small change is needed\n```\ntypedef INT64_T {\n    int32_t h;\n    uint32_t l;\n} int64_t;\n```\n\nThe add/sub/mul functions are still the same as the unsigned version\nA smart modern compiler will recognize the ```\nz.l < x.l```\n pattern and turn into ```\nadd/adc```\n pair in architectures that have them, so there's no comparison and/or branch there. If not then unfortunately you still need to fall back to inline assembly\nSee also\n\nMultiword addition in C\nAccess the flags without inline assembly?\nEfficient 128-bit addition using carry flag\nAn efficient way to do basic 128 bit integer calculations in C++?\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Python: Tool to compare pairs of dicts of varying deepness?\r\n                \r\nI have a couple of pairs of rather big dicts. The structure of the pair dicts is exactly the same but the values will differ. All pairs differ in how nested they are.\n\nTo clarify:\n\n\n```\ndict_a```\n has same structure as ```\ndict_b```\n\n```\ndict_c```\n has same structure as ```\ndict_d```\n (but is different from dict_a and dict_b)\n\n\netc. \n\nIs there a tool out there that makes it easy to implement a function to compare the values only, and/or do some basic arithmetic on them? My dicts can be quite nested, so a simple ```\n[for k,v in dict_x.iteritems()...]```\n won't do.\n    ", "Answer": "\r\nSounds like a problem for...recursive functions!\n\nBasically, if I understand your question, you have a deep dictionary with varying levels of depths at unspecified keys. You'd like to compare the values of ```\ndict_a```\n to ```\ndict_b```\n but don't care much about the keys: just the differences in values. Here's an idea using a recursive function to print out each set of values that doesn't match.\n\n```\ndef dict_compare(da, db):\n    for k, v in da.iteritems():\n        if isinstance(v, dict): #if the value is another dict:\n            dict_compare(v, db[k]) #enter into the comparison function again!\n        else:\n            if v != db[k]: \n                print 'values not equal at', k\n```\n\n\nThen you just can call\n\n```\ndict_compare(dict_a, dict_b)\n```\n\n\nThe magic being that if the value of a given key is in fact another dictionary, just call your comparison function again.\n\nObviously, if you wanted to do something more complicated than just print the simple key of the values that don't match, just modify what happens after the ```\nif v != db[k]```\n line.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "What happens when I mix signed and unsigned types in C++?\r\n                \r\nI have some doubt about type conversion, could you explain me what happens in an expression like this:\n```\nunsigned int u = 10; \nint a = -42; \nstd::cout << u - a << std::endl;\n```\n\nHere I know that the result will be 52 if I apply the rules when we have two mathematical operators. But I wonder what happens when the compiler to convert a to an unsigned value creates a temporary of unsigned type, what happens after? The expression now should be 10 -4294967254.\n    ", "Answer": "\r\nIn simple terms, if you mix types of the same rank (in the sequence of ```\nint```\n, ```\nlong int```\n, ```\nlong long int```\n), the unsigned type \"wins\" and the calculations are performed within that unsigned type. The result is of the same unsigned type.\n\nIf you mix types of different rank, the higher-ranked type \"wins\", if it can represent all values of lower-ranked type. The calculations are performed within that type. The result is of that type.\n\nFinally, if the higher-ranked type cannot represent all values of lower-ranked type, then the unsigned version of the higher ranked type is used. The result is of that type.\n\nIn your case you mixed types of the same rank (```\nint```\n and ```\nunsigned int```\n), which means that the whole expression is evaluated within ```\nunsigned int```\n type. The expression, as you correctly stated, is now ```\n10 - 4294967254```\n (for 32 bit ```\nint```\n). Unsigned types obey the rules of modulo arithmetic with ```\n2^32```\n (```\n4294967296```\n) as the modulo. If you carefully calculate the result (which can be expressed arithmetically as ```\n10 - 4294967254 + 4294967296```\n), it will turn out as the expected ```\n52```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Calculating arithmetic mean from a list [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question is opinion-based. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it can be answered with facts and citations by editing this post.\r\n                \r\n                    \r\n                        Closed 6 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI have a question asking on calculating the arithmetic mean from random numbers appended into a list. Basically what we have to do is to simulate rolling of 1000 dice, by generating random numbers of 1 to 6 and store in in a list. Then from there on we calculate the arithmetic mean of the list. I have done it but I'm not sure if it's done correctly. Any mistakes pointed out is much appreciated :) Also we aren't allowed to use built in functions.\n\n```\nimport random\nnumberList = []\n\ncount = 0\nwhile count<1001:\n    x= random.randrange(1,7)\n    numberList.append(x)\n    count += 1\n\n    list_sum = 0\n    for i in numberList:\n        list_sum += i\nprint(list_sum/len(numberList))\n```\n\n    ", "Answer": "\r\nYour code is quite verbose but correct nonetheless. Below, you can find a more pythonic solution:\n\n```\nimport random\n\nnumberList = []\nfor _ in range(1000):\n    numberList.append(random.randrange(1, 7))\n\n# or simply using a list comprehension\n# numberList = [random.randrange(1, 7) for _ in range(1000)]\n\nprint(sum(numberList)/len(numberList))  # I got 3.587, 3.556, 3.529 which is close to what you would expect (3.5)\n```\n\n\nNote that the solution proposed above saves memory as well as it does not define as many variables (```\nx```\n, ```\ncount```\n, ```\nlist_sum```\n)\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Syntax for arithmetics on prior distributions in JAGS/BUGS\r\n                \r\nFor a prior on a bound measure, I am trying to stretch a beta distribution between [-1,1], \"[a]s described by Barnard, McCulloch & Meng (2000)\" (according to this tutorial).\n\nSpecifically, I am trying to implement this suggestion:\n\n```\nrho_half_with ~ dbeta(1, 1)\n# shifting and streching rho_half_with from [0,1] to [-1,1]\nrho ~ 2 * rho_half_with - 1\n```\n\n\nHowever, I always get\n\n```\nsyntax error on line (...) near \"2\"\n```\n\n\nNo entry in the manual for JAGS or BUGS I found deals with manipulations of distributions (as sources of stochastic relation assignments). Is it indeed possible to apply basic arithmetic operations to BUGS/JAGS stochastic relation (following the ```\n~```\n operator), and if yes, how?\n    ", "Answer": "\r\nThe problem with the code you have posted is that you use a ```\n~```\n in a non-stochastic relation, where JAGS would want you to use ```\n<-```\n instead. The following should work:\n\n```\nrho_half_with ~ dbeta(1, 1)\n# shifting and streching rho_half_with from [0,1] to [-1,1]\nrho <- 2 * rho_half_with - 1\n```\n\n\nRegarding the error message you mention in the comments you get that because you try to initiate a variable that is not stochastic (```\nrho```\n). Remove that initialization or switch to initializing ```\nrho_half_with```\n to solve that problem.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Create generic class or interface with self typed parameters in children classes\r\n                \r\nI'd like to create a class or interface that I could subclass, always using current class instances as methods parameters...\n\nHere is an example to explain my problem:\n\n```\n type IArithmeticObject = interface(IInterface)\n   procedure assign(ao : IArithmeticObject);\n   procedure add(ao : IArithmeticObject);\n   procedure remove(ao : IArithmeticObject);\n   procedure multiply(ao : IArithmeticObject);\n   procedure divide(ao : IArithmeticObject);\n end;\n```\n\n\nthe interface ```\nIArithmeticObject```\n whould be the starting point, referencing basic arithmetic operations and child classes could be declared as\n\n```\n type TInteger = class(TInterfacedObject, IArithmeticObject)\n   procedure assign(ao : TInteger);\n   procedure add(ao : TInteger);\n   procedure remove(ao : TInteger);\n   procedure multiply(ao : TInteger);\n   procedure divide(ao : TInteger);\n end;\n```\n\n\nwith parameter type for ```\nao```\n being ```\nTInteger```\n and not ```\nIArithmeticObject```\n.\n\nAnother idea would be to use a self referencing generic type like:\n\n```\n  AMathObject = class;\n\n  AMathObject<T : AMathObject, constructor> = class\n    procedure assign(ao : T);virtual;abstract;\n    procedure add(ao : T);virtual;abstract;\n    procedure remove(ao : T);virtual;abstract;\n    procedure multiply(ao : T);overload;virtual;abstract;\n    procedure divide(ao : T);virtual;abstract;\n  end;\n```\n\n\nbut I could not figure out the right syntax... \n\nDoes anyone have any ideas about this possibility (or impossibility)?\n    ", "Answer": "\r\nIf I undestand it correctly, you may want to derive your class from a generic interface.\n\n```\ntype\n  IArithmeticObject<T> = interface\n    procedure assign(ao: IArithmeticObject<T>);\n    procedure add(ao: IArithmeticObject<T>);\n    procedure remove(ao: IArithmeticObject<T>);\n    procedure multiply(ao: IArithmeticObject<T>);\n    procedure divide(ao: IArithmeticObject<T>);\n  end;\n\n  TInteger = class (TInterfacedObject, IArithmeticObject<TInteger>)\n    procedure assign(ao: IArithmeticObject<TInteger>);\n    procedure add(ao: IArithmeticObject<TInteger>);\n    procedure remove(ao: IArithmeticObject<TInteger>);\n    procedure multiply(ao: IArithmeticObject<TInteger>);\n    procedure divide(ao: IArithmeticObject<TInteger>);\n  end;\n```\n\n\nAnswer edited according to the Stefan Glienke's comment: now the methods of the class accept parameters declared either as objects or interfaces.\n\n```\nvar\n  ao: IArithmeticObject<TInteger>;\nbegin\n  ao := TInteger.Create;\n  ao.multiply(ao);\nend.\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Detect signed int overflow in Go\r\n                \r\nI'm building a Lisp, and I want 32 bit integers to automatically switch to 64 bit integers if a computation would cause them to otherwise overflow. And likewise, for 64 bit overflows, switch to arbitrarily sized integers.\n\nThe problem I have is that I don't know what the \"correct\" way is to detect an integer overflow.\n\n```\na, b := 2147483647, 2147483647\nc := a + b\n```\n\n\nHow can I efficiently check if c overflowed?\n\nI have considered always converting to 64 bit values to do the calculation, then down-sizing again afterwards when possible, but that seems expensive and memory wasteful for something that is as primitive and core to the language as basic arithmetic.\n    ", "Answer": "\r\nFor example, to detect 32-bit integer overflow for addition,\n\n```\npackage main\n\nimport (\n    \"errors\"\n    \"fmt\"\n    \"math\"\n)\n\nvar ErrOverflow = errors.New(\"integer overflow\")\n\nfunc Add32(left, right int32) (int32, error) {\n    if right > 0 {\n        if left > math.MaxInt32-right {\n            return 0, ErrOverflow\n        }\n    } else {\n        if left < math.MinInt32-right {\n            return 0, ErrOverflow\n        }\n    }\n    return left + right, nil\n}\nfunc main() {\n    var a, b int32 = 2147483327, 2147483327\n    c, err := Add32(a, b)\n    if err != nil {\n        // handle overflow\n        fmt.Println(err, a, b, c)\n    }\n}\n```\n\n\nOutput:\n\n```\ninteger overflow 2147483327 2147483327 0\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "pyparsing infixNotation optimization\r\n                \r\nMy implementation of ```\ninfixNotation```\n is running slower than I would like even after  using ```\nenablePackrat```\n, which greatly increased performance.\n\nParsing needs to recognize and parse the following types of strings:\n\n\nBasic arithmetic operations, numbers, negation, and parentheses groupings\nGroupings in the format ```\nprefix::dotted.alphanum.string -> [prefix::dotted.alphanum.string]```\n\nStrings that look like function calls e.g. ```\npow(some::var + 2.3, 5) -> [pow, [[some::var, +, 2.3], 5]]```\n\n\n\nThe code I'm using:\n\n```\ndef parse_expression(expr_str):\n\n    fraction = Combine(\".\" + Word(nums))\n    number = Combine(Word(nums) + Optional(fraction)).setParseAction(str_to_num)\n\n    event_id_expr = Word(alphanums + \"_\") + \"::\"\n    dotted_columns = Combine(Word(alphanums + \"_\") + Optional(\".\"))\n\n    column_expr = Combine(event_id_expr + OneOrMore(dotted_columns))\n\n    arith_expr = infixNotation(column_expr | number, [\n        (Word(alphanums + \"_\"), 1, opAssoc.RIGHT),\n        (\"-\", 1, opAssoc.RIGHT),\n        (oneOf(\"* /\"), 2, opAssoc.LEFT),\n        (oneOf(\"+ -\"), 2, opAssoc.LEFT),\n        (Literal(\",\"), 2, opAssoc.LEFT)\n    ])\n\n    parsed_expr = arith_expr.parseString(expr_str).asList()[0]\n\n    return parsed_expr\n\n def str_to_num(t):\n      num_str = t[0]\n      try:\n          return int(num_str)\n      except ValueError:\n          return float(num_str)\n```\n\n\nAre there any changes I can make that would result in substantial performance improvements?  The structures I'm parsing are fairly simple, but they're in batches.  On average each string is taking ~5.3ms.\n    ", "Answer": "\r\nIt looks like you are \"fudging\" the functions as if they are operators, I think you are better off moving function calls into the operand expression for ```\ninfixNotation```\n:\n\n```\ndef parse_expression(expr_str):\n\n    number = pyparsing_common.number()\n\n    event_id_expr = Word(alphas+\"_\", alphanums + \"_\") + \"::\"\n    dotted_columns = Combine(Word(alphas+\"_\", alphanums + \"_\") + Optional(\".\"))\n\n    column_expr = Combine(event_id_expr + OneOrMore(dotted_columns))\n\n    func_name = Word(alphas+\"_\", alphanums+'_')\n    LPAR, RPAR = map(Suppress, \"()\")\n    arith_expr = Forward()\n    func_call = Group(func_name('name') \n                      + LPAR \n                      + Group(Optional(delimitedList(arith_expr)))(\"args\") \n                      + RPAR)\n\n    arith_expr <<= infixNotation(number | func_call | column_expr, [\n        (\"-\", 1, opAssoc.RIGHT),\n        (oneOf(\"* /\"), 2, opAssoc.LEFT),\n        (oneOf(\"+ -\"), 2, opAssoc.LEFT),\n    ])\n\n    parsed_expr = arith_expr.parseString(expr_str)[0]\n\n    return parsed_expr\n```\n\n\nI also modified most of your identifiers to use the two-argument form of Word - just using ```\nWord(alphanums+\"_\")```\n would also match ordinary integers, which I don't think is your intent. If I got this wrong, then just put these back as you had them.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Class operators can not access member variables\r\n                \r\nI am working on an integer class that should be able to do basic arithmetic. The integer values are stored in an array where every array element holds two integer values. I convert this array of integers into the member variable integer.\n```\nclass Integer {\nprivate:\n  char* arr;\n  bool t;\n  int integer;\n  int arr_len;\n\npublic:\n...\nInteger operator-();\nInteger operator+(Integer& i);\n...\n};  \n```\n\nThe first operator is supposed to just negate the integer value. However, VS tells me that I do not have enough operator parameters. Further, I can not access the member variables in both operators and the stand alone integer is not defined.\n```\nInteger& operator-()\n{\n  Integer temp;\n  temp.integer = -integer;;\n  return temp;\n}\n\nInteger& operator+(Integer& i)\n{\n  Integer temp;\n  temp.integer = integer + i.integer;\n  return temp;\n}\n```\n\n    ", "Answer": "\r\nYou have to indicate that the operators belong to the class ```\nInteger```\n.\nTo do so, add ```\nInteger::```\n before names of each operator.\nAlso the signature in the definitions of operator doesn't match to the declarations. They return ```\nInteger```\n in the declarations, but they are defined to return ```\nInteger&```\n.\n```\nInteger Integer::operator-()\n{\n  Integer temp;\n  temp.integer = -integer;\n  return temp;\n}\n\nInteger Integer::operator+(Integer& i)\n{\n  Integer temp;\n  temp.integer = integer + i.integer;\n  return temp;\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "C++11 numeric_limits<float> and arithmetic\r\n                \r\nWhen I compiled this C++ code I didn't expect to see this output\n\n```\n#include <iostream>\n#include <iomanip>\n#include <limits>\n\nint main() {\n    const long double ldMinFloat = std::numeric_limits<float>::lowest();\n    std::cout << std::left << std::setw(20) << \"ldMinFloat\" << \"= \" << std::fixed << ldMinFloat << std::endl;\n    std::cout << std::left << std::setw(20) << \"(ldMinFloat - 10)\" << \"= \" << std::fixed << (ldMinFloat - 10) << std::endl;\nreturn 0;\n    return 0;\n}\n```\n\n\nHere is the output\n\n```\nldMinFloat          = -340282346638528859811704183484516925440.000000\n(ldMinFloat - 10)   = -340282346638528859811704183484516925440.000000\n```\n\n\nCan someone be kind enough to explain why the subtraction is not -340282346638528859811704183484516925450.000000???\n\nBased on this link long double max value is +/- 1.797,693,134,862,315,7*10^308 and I don't really understand why the mantissa would explain this behaviour in basic integer arithmetic? or is it the implicit conversion from float to long double? or it's the operator << of std::cout?\n\nAny idea to help me feel less stupid before going to sleep?\n    ", "Answer": "\r\nA ```\nlong double```\n cannot represent most values exactly, typically you are talking about big values (```\nstd::numeric_limits<float>::max()```\n), so there are big gaps between values that are exactly representable by a ```\nlong double```\n.\n\nCheck the ```\nepsilon```\n for ```\nlong double```\n, which is the difference between ```\n1.0```\n and the smallest value greater than ```\n1.0```\n that a ```\nlong double```\n can represent.\n\nIf you want to find the difference between the largest value lower than ```\nldMinFloat```\n that a ```\nlong double```\n can store and ```\nldMinFloat```\n, you can use the below approximation:\n\n```\nstd::abs(ldMinFloat) * std::numeric_limits<long double>::epsilon()\n```\n\n\nThis is (on my computer) ```\n36893485948395847680```\n, so a ```\nlong double```\n cannot differentiate values between ```\n340282346638528859811704183484516925440```\n and ```\n340282346638528859811704183484516925440 +/- 36893485948395847680```\n (approximately... ) even if it can store values well below this. \n\n\n\nA more precision computation of the next representation value:\n\nAssuming 32 bits ```\nfloat```\n and 64 bits ```\ndouble```\n (I do not have 96 bits ```\nlong double```\n to test... ) and both uses IEEE 754 representation:\n\nThe lowest float (```\n-340282346638528859811704183484516925440```\n) has the following binary representation:\n\n```\n1 11111110 11111111111111111111111\n```\n\n\nConverted to a ```\ndouble```\n:\n\n```\n1 10001111110 1111111111111111111111100000000000000000000000000000\n```\n\n\nThe first representable number for a double below this is (just add 1 to the mantissa, and luckily it is easy for this number):\n\n```\n1 10001111110 1111111111111111111111100000000000000000000000000001\n```\n\n\nWhich is exactly ```\n-340282346638528897590636046441678635008```\n. The difference between both values (computed in the code) is:\n\n```\n37778931862957161709568 // About half the value of the approximation (using double)\n```\n\n\nHow to compute this difference from ```\nldMinFloat```\n?\n\nYou can compute this difference using the binary representation. You know that with IEEE754 the \"conversion\" is (without sign):\n\n```\nV = 2 ^ (E - shift) * M\n```\n\n\nHere, the exponent ```\nE```\n is the same for both value1, so (```\nV1```\n is ```\nldMinFloat```\n and ```\nV2```\n is the next representable value, I am assuming positive values for this, the sign does not matter here):\n\n```\nV2 - V1 = 2 ^ (E - shift) * M2 - 2 ^ (E - shift) * M1\n        = 2 ^ (E - shift) * (M2 - M1)\n```\n\n\n```\nE```\n is ```\n1050```\n in the above (```\n10001111110```\n) and the shift for 64-bits ```\ndouble```\n is ```\n1023```\n, so ```\nE - shift = 127```\n:\n\n```\nV2 - V1 = 2 ^ 127 * (M2 - M1)\n```\n\n\nHere we are \"lucky\" because the last bit in ```\nM1```\n (mantissa of ```\nldMinFloat```\n) is ```\n0```\n, so the difference between ```\nM1```\n and ```\nM2```\n is:\n\n```\nM2 - M1 = 0.000...001b\n//          <-------> 52 bits (51 zeros)\n```\n\n\nSo the difference is:\n\n```\nV2 - V1 = (2 ^ 127) * 0.000...001b\n        = (2 ^ 127) >> 52\n        = 37778931862957161709568\n```\n\n\n1 This all work smoothly because the last bit of the mantissa in ```\nldMinFloat```\n was ```\n0```\n, if it was not the case, adding ```\n1```\n to this mantissa could propagate the remainder and even change the exponent, so the computation would be harder.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Post a SOAP request in HTML and get response\r\n                \r\nI'm using WCFStorm in order to debug a very simple SOAP endpoint: \n\nhttp://www.dneonline.com/calculator.asmx?WSDL \n\nsuch endpoint can be used in order to request the 4 basic arithmetic calculations and retrieve a response: here in the example I'm requesting the numbers ```\n3```\n and ```\n5```\n and I receive as response ```\n8```\n, all good!\n\n\n\nI now want to create an HTML page that can do the same without using WCFStorm. Here is my code: \n\n```\n<html>\n\n<head>\n    <title>Calling Web Service from jQuery</title>\n    <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.3/jquery.min.js\"></script>\n    <script type=\"text/javascript\">\n        $(document).ready(function() {\n            $(\"#btnCallWebService\").click(function(event) {\n                var wsUrl = \"http://www.dneonline.com/calculator.asmx?WSDL\";\n                var soapRequest = '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">   <soap:Body> <getQuote xmlns:impl=\"http://www.dneonline.com/calculator.asmx?WSDL\">  <intA>' + $(\"#intA\").val() + '</intA> <intB>' + $(\"#intB\").val() + '</intB>  </getQuote> </soap:Body></soap:Envelope>';\n                alert(soapRequest)\n                $.ajax({\n                    type: \"POST\",\n                    url: wsUrl,\n                    contentType: \"text/xml\",\n                    dataType: \"xml\",\n                    data: soapRequest,\n                    success: processSuccess,\n                    error: processError\n                });\n\n            });\n        });\n\n        function processSuccess(data, status, req) {\n            alert('success');\n            if (status == \"success\")\n                $(\"#response\").text($(req.responseXML).find(\"Int32\").text());\n\n            alert(req.responseXML);\n        }\n\n        function processError(data, status, req) {\n            alert('err' + data.state);\n            //alert(req.responseText + \" \" + status);\n        }\n    </script>\n</head>\n\n<body>\n    <h3>\n        Calling Web Services with jQuery/AJAX\n    </h3>\n    Enter the numbers:\n    <input id=\"intA\" type=\"string\" />\n    <input id=\"intB\" type=\"string\" />\n    <input id=\"btnCallWebService\" value=\"Call web service\" type=\"button\" />\n    <div id=\"response\"></div>\n</body>\n\n</html>\n```\n\n\nBut unfortunately I can only receive an: ```\nerrundefined```\n.\nWhere am I wrong? \n    ", "Answer": "\r\n\n  Where am I wrong?\n\n\n\nThe request payload/data is not properly formatted:\n\nFor SOAP 1.1: (request and response format are in XML)\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <Add xmlns=\"http://tempuri.org/\">\n      <intA>int</intA>\n      <intB>int</intB>\n    </Add>\n  </soap:Body>\n</soap:Envelope>\n```\n\n\nFor SOAP 1.2: (request and response format are in SOAP + XML)\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <Add xmlns=\"http://tempuri.org/\">\n      <intA>int</intA>\n      <intB>int</intB>\n    </Add>\n  </soap12:Body>\n</soap12:Envelope>\n```\n\n\nRefer to the calculator web service docs for details.\nAnd as pointed in my original answer, which is a very important thing to be considered: The calculator web service endpoint (http://www.dneonline.com/calculator.asmx?WSDL) does not have the proper CORS header (```\nAccess-Control-Allow-Origin```\n) which is required when making CORS requests — excerpt from MDN's article about Cross-Origin Resource Sharing (CORS):\n\n\n  A web application executes a cross-origin HTTP request when it\n  requests a resource that has a different origin (domain, protocol, or\n  port) than its own origin.\n  \n  An example of a cross-origin request: The frontend JavaScript code for\n  a web application served from ```\nhttp://domain-a.com```\n uses\n  ```\nXMLHttpRequest```\n\n  to make a request for ```\nhttp://api.domain-b.com/data.json```\n.\n  \n  For security reasons, browsers restrict cross-origin HTTP requests\n  initiated from within scripts. For example, ```\nXMLHttpRequest```\n and the\n  Fetch\n  API\n  follow the same-origin\n  policy.\n  This means that a web application using those APIs can only request\n  HTTP resources from the same origin the application was loaded from,\n  unless the response from the other origin includes the right CORS\n  headers.\n\n\n\nSo if the above (the second paragraph) applies to you, i.e. you're not actually making the CORS/AJAX request from the same origin/domain, then you could:\n\n\nIf you own the domain/website of the calculator web service (dneonline.com).. or have control to its administration, then enable CORS on that site.\nOr if your site has a server-side application like PHP or Python, then you can use a server-side script to make the request — example in PHP, you could have ```\ncalculator.php```\n which makes remote request to the API and then your script makes AJAX request to the ```\ncalculator.php```\n.\nOr you can use a CORS proxy such as https://cors-anywhere.herokuapp.com which I've tried working — check out the demo below.\n\n\nDemo: Making AJAX request to a non- CORS-enabled resource using https://cors-anywhere.herokuapp.com\n\n\r\n\r\n```\n$('#btnCallWebService').click(function(event) {\r\n  $('#intA').val(Number($('#intA').val() || 0).toFixed(0) || 0);\r\n  $('#intB').val(Number($('#intB').val() || 0).toFixed(0) || 0);\r\n  if ('0' === $('#intA').val() && '0' === $('#intB').val()) {\r\n    alert('Non-zeros only.. for this demo.');\r\n    return;\r\n  }\r\n\r\n  var $btn = $(this), _btn_text = $btn.val();\r\n  $btn.prop('disabled', true).val('Calculating..');\r\n  $('#response').hide();\r\n\r\n  var wsUrl = 'http://www.dneonline.com/calculator.asmx';\r\n  var soap12Request = '<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">  <soap12:Body>    <Add xmlns=\"http://tempuri.org/\">      <intA>' + $('#intA').val() + '</intA>      <intB>' + $('#intB').val() + '</intB>    </Add>  </soap12:Body></soap12:Envelope>';\r\n\r\n  $.ajax({\r\n    type: 'POST',\r\n    url: 'https://cors-anywhere.herokuapp.com/' + wsUrl,\r\n    contentType: 'application/soap+xml', // can also be text/xml\r\n    dataType: 'xml',\r\n    data: soap12Request,\r\n    success: function(xml){\r\n      var $doc = $(xml);\r\n      $('#answer').html($doc.find('AddResult').text());\r\n      $('#response').show();\r\n    },\r\n    complete: function(){\r\n      $btn.val(_btn_text).prop('disabled', false);\r\n    }\r\n  });\r\n});```\n\r\n```\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n\r\nEnter the numbers:\r\n<input id=\"intA\" type=\"number\" placeholder=\"No decimals\" /> <code>+</code>\r\n<input id=\"intB\" type=\"number\" placeholder=\"No decimals\" />\r\n<input id=\"btnCallWebService\" value=\"Call web service (SOAP 1.2)\" type=\"button\" />\r\n<div id=\"response\" style=\"display:none\">\r\n  The answer is: <b id=\"answer\"></b>\r\n</div>```\n\r\n\r\n\r\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "extract data from sql, modify it and save the result to a table\r\n                \r\nThis may seem like a dumb question. I am wanting to set up an SQL db with records containing numbers. I would like to run an enquiry to select a group of records, then take the values in that group, do some basic arithmetic on the numbers and then save the results to a different table but still have them linked with a foreign key to the original record. Is that possible to do in SQL without taking the data to another application and then importing it back? If so, what is the basic function/procedure to complete this action?\n\nI'm coming from an excel/macro/basic python background and want to investigate if it's worth the switch to SQL. \n\nPS. I'm wanting to stay open source.\n    ", "Answer": "\r\nA tiny example using postgresql (9.6)\n\n```\n-- Create tables\nCREATE TABLE initialValues(\n  id serial PRIMARY KEY,\n  value int\n);\n\nCREATE TABLE addOne(\n   id serial,\n   id_init_val int REFERENCES initialValues(id),\n   value int\n);\n\n-- Init values\nINSERT INTO initialValues(value)\nSELECT a.n\nFROM generate_series(1, 100) as a(n);\n\n-- Insert values in the second table by selecting the ones from the \n-- First one .\nWITH init_val as (SELECT i.id,i.value FROM initialValues i)\nINSERT INTO addOne(id_init_val,value)\n(SELECT id,value+1 FROM init_val);\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to inherit operators in Kotlin?\r\n                \r\nI've the following two classes:\n\n```\nclass Volume(var value: Double, unit: Unit) {\n    var unit: Unit = unit\n        private set\n\n    enum class Unit(symbol: String){\n        MILLILITER(\"ml\"),\n        CENTILITER(\"cl\"),\n        DECILITER(\"dl\"),\n        LITER(\"l\"),\n        TEASPOON(\"tsp\"),\n        TABLESPOON(\"tbsp\"),\n        FLUIDOUNCE(\"floz\"),\n        SHOT(\"jig\"),\n        GILL(\"gi\"),\n        CUP(\"cup\"),\n        PINT(\"pt\"),\n        QUART(\"qt\"),\n        GALLON(\"gal\")\n    }\n}\n\nclass Mass(var value: Double, unit: Unit) {\n    var unit: Unit = unit\n    private set\n\n    enum class Unit(symbol: String){\n        GRAM(\"g\"),\n        DECAGRAM(\"dag\"),\n        HECTOGRAM(\"hg\"),\n        KILOGRAM(\"kg\"),\n        OUNCE(\"oz\"),\n        POUND(\"lb\")\n    }\n}\n```\n\n\nI want to create operators for both classes for basic arithmetic operations, for example:\n\n```\noperator fun inc(): Mass {\n    value++\n    return this\n}\n```\n\n\nSince both classes will have the same operator logics, i don't want to duplicate this part of the code.\n\nMy first idea was that Both classes inherit from a PhysicalQuantity interface which contains the operators. In this case the following code doesn't work, because the IDE expects IPhysicalQuantity as return type but the type is Volume:\n\n```\ninterface IPhysicalQuantity() {\n\n    var value: Double\n    var unit: IUnit\n\n    operator fun inc(): IPhysicalQuantity {\n        value++\n        return this\n    }\n}\n\nfun main() {\n    var vol = Volume(10.0, Volume.Unit.CENTILITER)\n    vol++\n}\n```\n\n\nSame issue with abstract super class.\n    ", "Answer": "\r\nThe problem with doing this inside the ```\nIPhysicalQuantity```\n interface is that you don't want to return the object as the interface type ```\nIPhysicalQuantity```\n from the ```\ninc```\n method. Instead, you want to keep its original type (```\nVolume```\n or ```\nMass```\n), so you'd have to use generics there. However, I didn't find a way to do this without complex syntax and an unchecked cast:\n\n```\ninterface IPhysicalQuantity<T : IPhysicalQuantity<T>> {\n    var value: Double\n\n    operator fun inc(): T {\n        value++\n        return this as T\n    }\n}\n\nclass Volume(override var value: Double, unit: Unit): IPhysicalQuantity<Volume>\n```\n\n\nHowever, you can do this fairly simply with an extension instead without having to make the interface itself generic, if that works for you:\n\n```\noperator fun <T : IPhysicalQuantity> T.inc(): T {\n    value++\n    return this\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "XML concatenation : how to concatenate nodes with markup tags not just values with XSLT\r\n                \r\nI have the following XML for batch processing by a web service which simply does basic arithmetic operations. During processing, some nodes will fail, for example, because of illegal arguments such as those causing division by zero (in the example the 3rd node). I need to create a separate XML document concatenating these offending nodes, or those which will fail for some other reason. I cannot come up with a proper XPATH method to concatenate the XML fragments.\n\nThe source XML:\n\n```\n<Envelopes>\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:fc=\"http://fc.org/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <fc:add>\n         <arg0>99938</arg0>\n         <arg1>62</arg1>\n      </fc:add>\n   </soapenv:Body>\n</soapenv:Envelope>\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:fc=\"http://fc.org/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <fc:addaaaaaaaaaa>\n         <arg0>34</arg0>\n         <arg1>223</arg1>\n      </fc:addaaaaaaaaaa>\n   </soapenv:Body>\n</soapenv:Envelope>\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:fc=\"http://fc.org/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <fc:divide>\n         <arg0>634</arg0>\n         <arg1>0</arg1>\n      </fc:divide>\n   </soapenv:Body>\n</soapenv:Envelope>\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:fc=\"http://fc.org/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <fc:subtract>\n         <arg0>3400</arg0>\n         <arg1>2200</arg1>\n      </fc:subtract>\n   </soapenv:Body>\n</soapenv:Envelope>\n</Envelopes>\n```\n\n\nXSL transformation\n\n```\n<xsl:stylesheet version=\n\"1.0\" xmlns:xsl=\n\"http://www.w3.org/1999/XSL/Transform\" xmlns:dp=xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns:str=\"http://exslt.org/strings\">\n<xsl:output omit-xml-declaration=\"yes\"/>\n\n\n<xsl:template match=\"/\">\n\n<xsl:for-each select=\"/Envelopes/soapenv:Envelope\">\n\n<!-- introduce a variable for the current envelope -->\n<xsl:variable name=\"fc\" select=\".\"/>\n\n<!--  I NEED TO CONCAT THE ENTIRE NODE TO CREATE A BRAND NEW XML FILE -->\n\n<xsl:variable name=\"addEnvelope\" select=\"'&lt;Envelopes&gt;',.\"/>\n   <xsl:message terminate=\"no\" dp:priority=\"notice\">\n  <xsl:copy-of select=\"$addEnvelope\"/>\n</xsl:message>\n<!-- I SEE THE OUTPUT <Envelopes>324 0  etc... WHAT I WANT IS TO GET AN OUTPUT LIKE: -->\n<Envelopes><soapenv:Envelope\nxmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\nxmlns:fc=\"http://fc.org/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <fc:multiply>\n         <arg0>34</arg0>\n         <arg1>2</arg1>\n      </fc:multiply>\n   </soapenv:Body>\n</soapenv:Envelope>  etc...\n\n</xsl:for-each>\n```\n\n    ", "Answer": "\r\nAs the question is a bit vague, it is hard to give an exact answer, but I would suggest you need to be building on top of the XSLT identity transform.\n\n```\n <xsl:template match=\"@*|node()\">\n    <xsl:copy>\n       <xsl:apply-templates select=\"@*|node()\"/>\n    </xsl:copy>\n </xsl:template>\n```\n\n\nIn XSLT, you don't 'concatenate' nodes, that is something you do to strings, but you do copy elements, or create new ones, to the output tree. The identity template above, on its own, copies all nodes in the document to the output tree. By doing this, this means all you really need to do is add templates to handle nodes you want to change, or in your case, add a template to stop nodes being copied.\n\nFor example, you mention about division by zero. Suppose you wanted to create XML containing only the envelope elements where arg1 is zero. This means, when used in conjunction with the XSLT identity template, all you need it a template to ignore envelope elements where arg1 is not zero.\n\n```\n<xsl:template match=\"soapenv:Envelope[not(soapenv:Body/fc:divide/arg1 = '0')]\" />\n```\n\n\nAnd that's it! Try this XSLT\n\n```\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"   \n xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n xmlns:fc=\"http://fc.org/\">\n  <xsl:output method=\"yes\" omit-xml-declaration=\"yes\" indent=\"yes\" />\n\n  <xsl:template match=\"@*|node()\">\n    <xsl:copy>\n      <xsl:apply-templates select=\"@*|node()\"/>\n    </xsl:copy>\n  </xsl:template>\n\n  <xsl:template match=\"soapenv:Envelope[not(soapenv:Body/fc:divide/arg1 = '0')]\" />\n</xsl:stylesheet>\n```\n\n\nAlternatively, if you would rather explicitly select the Envelope elements you want to copy, as opposed to you want to copy, you could create a template to match the Envelopes element, and then use xsl:apply-templates to select the ones you want.\n\nThis XSLT should work too\n\n```\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"   \n xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n xmlns:fc=\"http://fc.org/\">\n  <xsl:output method=\"yes\" omit-xml-declaration=\"yes\" indent=\"yes\" />\n\n  <xsl:template match=\"@*|node()\">\n    <xsl:copy>\n      <xsl:apply-templates select=\"@*|node()\"/>\n    </xsl:copy>\n  </xsl:template>\n\n  <xsl:template match=\"Envelopes\">\n    <xsl:apply-templates select=\"soapenv:Envelope[soapenv:Body/fc:divide/arg1 = '0']\" />\n  </xsl:template>\n</xsl:stylesheet>\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Bitwise Interval Arithmetic\r\n                \r\nI've recently read an interesting thread on the D newsgroup, which basically asks,\n\n\n  Given two (signed) integers a ∈ [amin, amax], b ∈ [bmin, bmax], what is the tightest interval of a  |  b?\n\n\nI'm think if interval arithmetics can be applied on general bitwise operators (assuming infinite bits). The bitwise-NOT and shifts are trivial since they just corresponds to -1 − x and 2n x. But bitwise-AND/OR are a lot trickier, due to the mix of bitwise and arithmetic properties.\n\nIs there a polynomial-time algorithm to compute the intervals of bitwise-AND/OR?\n\n\n\nNote:\n\n\nAssume all bitwise operations run in linear time (of number of bits), and test/set a bit is constant time.\nThe brute-force algorithm runs in exponential time.\nBecause ```\n~(a | b) = ~a & ~b```\n, solving the bitwise-AND and -NOT problem implies bitwise-OR is done. \nAlthough the content of that thread suggests min{a | b} = max(amin, bmin), it is not the tightest bound. Just consider ```\n[2, 3] | [8, 9] = [10, 11]```\n.)\nActually working on unsigned arithmetic is enough, as we can split a signed interval into negative and nonnegative subsets, and using de Morgan's laws and commutativity only the bitwise-AND, -OR and -AND-NOT cases on nonnegative intervals need to be solved.\n\n    ", "Answer": "\r\nArgh.  Are you sure these have to be signed integers?  That just brings up a pile of annoying cases where you have to flip things.\n\nIf we limit ourselves to unsigned integers, we can just walk down the bits to find the maximum.  Any bit above the highest bit set in ```\nmax(a_max , b_max)```\n obviously can't be on.  Assume without loss of generality that a_max > b_max.  Keep all the bits in a_max until we hit the highest bit in b_max.  Then keep all the bits of both until we have flexibility on at least one side (i.e. we can choose a number in the range allowed that will flip that bit).  If the other side cannot set that bit to 1, set it to 1 and keep going (setting one higher bit always beats setting all lower bits).  Otherwise, set your answer to (that bit - 1), which will places 1's in all the rest of the bits and you're done.\n\nNow we do the same sort of thing for the minimum, except we avoid setting bits at every opportunity, but take every opportunity to pair bits if one side must set one.\n\nThis is O(n) in the number of bits if we can do math on the integers in O(1) time.  Otherwise, it's O(n^2).\n\nHere's how it works on your example of [2,3] | [8,9]\n\n```\n101 -> 1xx works\n10 to 11 -> x1x always set ; 11x doesn't fit in a so we're not done\n11 can set last bit -> 111\n100 -> 1xx must be set\n10 to 11 -> x1x must be set ; 11x doesn't fit so we're not done\n10 has xx0 as does 100 -> xx0 works -> 110\n```\n\n\nEdit: adding sign bits doesn't change the order of the algorithm, but it does require more annoying bookkeeping.  If you cannot get rid of a sign bit, then you flip min and max strategies (i.e. set vs. don't set bits).  If it's optional, the min is when you set it and then try to keep everything else unset; the max is when you unset it and then try to keep everything else set.\n\nSecond edit: here's another example; both ranges are [1001,1100]:\n\n```\nMust keep first bit -> 1xxx\nCan set 2nd bit -> x1xx\nOther _could have but did not need to_ set 2nd bit -> set 2nd bit -1 -> xx11\n-> 1111 is max\nMust keep first bit -> 1xxx\nNeither needs 2nd bit -> x0xx\nNeither needs 3rd bit -> xx0x\nBoth need 4th bit -> xxx1\n-> 1001 is min\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Pandas eval returns error on date arithmetic using Timedelta\r\n                \r\nWhen I try to use basic date arithmetic in Pandas' ```\neval()```\n, it gives the following error:\n```\nCannot convert input [1 days 00:00:00] of type <class 'pandas._libs.tslibs.timedeltas.Timedelta'> to Timestamp```\n\nThe same expression run against the data frame works fine, though. Is this a feature of ```\neval()```\n or am I missing something?\nA minimal example:\n```\nimport pandas as pd\n\ndf = pd.DataFrame(data={\n    \"date\": pd.date_range(start=\"2020-01-01\", periods=10, freq='D')\n})\n\n# works fine\ndf.date + pd.Timedelta('1D')\n\n# errors out\ndf.eval(\"date + @pd.Timedelta('1D')\")\n```\n\nIncidentally, the expression complains about undefined \"pd\", even if it's included in the ```\nlocal_dict```\n parameter to ```\neval()```\n. The only way I found to get around it is with the ```\n@```\n prefix. For what it's worth, I'm using the latest version of ```\npandas==1.5.2```\n.\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Expression template, addition of a variable and a value\r\n                \r\nI have an expression template which adds a variable with a constant in a given expression. I want to convert that to add the variable with any given number. \nStructs for constants and variables:\n\n```\nstruct Var {\n  int operator () (int v) { return v; }\n};\n\nstruct  Constant {\n  int c;\n Constant (int d) : c (d) {}\n  int operator () (int) { return c; }\n};\n```\n\n\nThis is the expression struct:\n\n```\ntemplate < class L, class H, class OP >\nstruct DBinaryExpression {\n    H h_;\n  L l_;\n\n  DBinaryExpression (L l, H h) : l_ (l), h_ (h) {}\n  int operator () (int d) { return OP::apply (l_ (d), h_(d)); }\n};\n```\n\n\nThis is the addition struct:\n\n```\nstruct Add {\n  static int apply (int l, int h) { return l + h; }\n};\n```\n\n\nThis is the operator template:\n\n```\ntemplate< class A, class B >\nDExpression<DBinaryExpression<DExpression<A>, DExpression<B>, Add> >\noperator + (DExpression<A> a, DExpression<B> b)\n{\n  typedef DBinaryExpression <DExpression<A>, DExpression<B>, Add> ExprT;\n  return DExpression<ExprT>(ExprT(a,b));\n}\n```\n\n\nThis is the header file:\n\n```\nint main (void)\n{\n  typedef DExpression <Var> Variable;\n  typedef DExpression <Constant> Literal;\n\n  Variable x ((Var()));\n  Literal l (Constant (50));\n\n  int a=10;\n\n\n evaluate (a, x+l); \n\n return 0;\n}\n```\n\n\nThis is actually not my code but i have added all of the basic arithmetic operations to the code.\n\nAny ideas guys? I am new to C++ templates and i don't really get much of it.\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Designing a BigNumber class\r\n                \r\nI'm implementing my own BigNumber class in C# for educational purposes. For a start, I intend it to code the basic arithmetic, relational operators and certain math methods. The values will be stored in a byte array. \n\nCould you guys give me some tips on how I would design such a class or rather the proper way of designing such a class ? \n\nEdit:\n\nI'm not asking for help on how to implement the specific operators and methods. I'd like to know how the class should be structured internally.\n    ", "Answer": "\r\nI did that once in C++. I recommend that you read The Art of Computer Programming. Volume 2 has all the details of the algorithms for implementing big numbers. It's a great resource (for this and many other problems.)\n\nThe book should be available from most public libraries around you (or any university library).\n\nBTW. No need to read the whole book, if you just want you can just use it as a reference for the algorithms that you need.\n\nUPDATE: As for the API you should try to mimic the existing APIs for number in .NET. Something like Int32.\n\nAs for the internal class design, it should be pretty straightforward because there should be very few units interacting. You could abstract the \"storage\" (byte array) part away and iterate over the \"digits\" using standard iterators over some generic storage provider. This would allow you to change to use int arrays for example. If you do this then you can automatically change the base of your numbers and enable your implementation to store \"more\" per digit. This implies that the base of the operations won't be static but would be determined by the \"digit\" size.\n\nI had fun implementing mine, it's a simple but nice project. In my case I didn't go fancy with the internal design. Good luck!\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Using rems for responsive web design\r\n                \r\nAre people still using those complex 62.5% font tricks in 2022 for every element in a website? Rem units for fonts, padding, margins, boxes' sizes everything?\nI come across articles like this: https://www.aleksandrhovhannisyan.com/blog/62-5-percent-font-size-trick/#setting-the-root-font-size-to-625percent\nand to be honest, the math is really confusing. It doesn't help that I failed my math in school (I can do basic arithmetic operations but these math concepts are challenging to me).\n    ", "Answer": "\r\nWell, you do not need to know advanced math for this. You just need to know how rems work. \"rem\" always inherits the font size of the root element like an HTML tag. In the article, you will see that ```\nhtml{ font-size: 62.5%'```\n or ```\nhtml{ font-size: 10px}```\n. Now if we assign font size to any other elements with rem it will multiply the root elements' font size with its own font size.  Check this out....\n```\nhtml{\n font-size: 62.5%;  //10px\n}\n\np{\n font-size: 1rem; //10px;\n}\n\nh1{ font-size: 2rem } //20px;\n```\n\nyou can control all the properties with this method easily. It is an easy approach to responsive design. If you use SCSS, it will be easier in case of responsive design.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Spark 3 with Pandas Vectorised UDF's\r\n                \r\nI'm looking at using Pandas UDF's in PySpark (v3). For a number of reasons, I understand iterating and UDF's in general are bad and I understand that the simple examples I show here can be done PySpark using SQL functions - all of that is besides the point!\nI've been following this guide: https://databricks.com/blog/2020/05/20/new-pandas-udfs-and-python-type-hints-in-the-upcoming-release-of-apache-spark-3-0.html\nI have a simple example working from the docs:\n```\nimport pandas as pd\nfrom typing import Iterator, Tuple\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import col, pandas_udf\n\nspark = SparkSession.builder.getOrCreate()\n\npdf = pd.DataFrame(([1, 2, 3], [4, 5, 6], [8, 9, 0]), columns=[\"x\", \"y\", \"z\"])\ndf = spark.createDataFrame(pdf)\n\n@pandas_udf('long')\ndef test1(x: pd.Series, y: pd.Series) -> pd.Series:\n    return x + y\n\ndf.select(test1(col(\"x\"), col(\"y\"))).show()\n```\n\nAnd this works well for performing basic arithmetic - if I want to add, multiply etc this is straight forward (but it is also straightforward in PySpark without functions).\nI want to do a comparison between the values for example:\n```\n@pandas_udf('long')\ndef test2(x: pd.Series, y: pd.Series) -> pd.Series:\n    return x if x > y else y\n\ndf.select(test2(col(\"x\"), col(\"y\"))).show()\n```\n\nThis will error with ```\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().```\n. I understand that it is evaluating the series rather than the row value.\nSo there is an iterator example. Again this works fine for the basic arithmetic example they provide. But if I try to apply logic:\n```\n@pandas_udf(\"long\")\ndef test3(batch_iter: Iterator[Tuple[pd.Series, pd.Series]]) -> Iterator[pd.Series]:\n    for x, y in batch_iter:\n        yield x if x > y else y\n\ndf.select(test3(col(\"x\"), col(\"y\"))).show()\n```\n\nI get the same ValueError as before.\nSo my question is how should I perform row by row comparisons like this? Is it possible in a vectorised function? And if not then what are the use cases for them?\n    ", "Answer": "\r\nI figured this out. So simple after you write it down and publish the problem to the world.\nAll that needs to happen is to return an array and then convert to a Pandas Series:\n```\n@pandas_udf('long')\ndef test4(x: pd.Series, y: pd.Series) -> pd.Series:\n    return pd.Series([a if a > b else b for a, b in zip(x, y)])\n\ndf.select(test4(col(\"x\"),col(\"y\"))).show()\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "F# Giving a function parameters or not - what's the difference\r\n                \r\nI have a couple of functions for doing basic arithmetic on polynomials. Initially, I defined the functions without explicitly providing parameters, but when it came to using some of these functions inside another function, things started coming apart, until I changed them to take parameters.\n\nThe code is better at explaining it:\n\n```\n//Multiplying a polynomial with a constant\nlet rec mulC = function\n| (_,[])                    -> []\n| (x,y::tail) when x > 0    -> x * y::mulC(x,tail)\n\n//Adding two polynomials\nlet rec addE = function\n| ([],[])                   -> []\n| ([], y::ytail)            -> y::ytail\n| (x::xtail,[])             -> x::xtail\n| (x::xtail, y::ytail)      -> (x + y) :: addE(xtail,ytail)\n\n//Multiplying a polynomial by x\nlet mulX = function\n| []                    -> []\n| xs                    -> 0::xs\n\n//Multiplying two polynomials\nlet rec mul = function\n| []                    -> []\n| x::tail               -> addE (mulC x qs)\n                                (mulX(mul qs tail))\n```\n\n\nNow, this gives an error This value is not a function and cannot be applied at addE in the function mul at the very end.\n\nIf I change the function definitions to this though, it works:\n\n```\nlet rec mulC x ys =\nmatch (x,ys) with\n| (_,[])                    -> []\n| (x,y::ys) when x > 0    -> x * y::mulC x ys\n\nlet rec addE xs ys =\nmatch (xs, ys) with\n| ([],[])                   -> []\n| ([], y::ys)            -> y::ys\n| (x::xs,[])             -> x::xs\n| (x::xs, y::ys)      -> (x + y) :: addE xs ys\n\nlet mulX xs = \nmatch xs with\n| []                    -> []\n| xs                    -> 0::xs\n\nlet rec mul qs = function\n| []                    -> []\n| x::tail               -> addE (mulC x qs)\n                                (mulX(mul qs tail))\n```\n\n\nWhat gives?\n    ", "Answer": "\r\nThe ```\nfunction```\n keyword creates a function that takes one parameter and goes straight into a pattern match on it. These three functions are all equivalent and have a type signature of ```\n(int * int) -> int```\n. There is a single 2-tuple parameter:\n\n```\nlet add = function (a, b) -> a + b\nlet add' = fun x -> match x with (a, b) -> a + b\nlet add'' x = match x with (a, b) -> a + b\n```\n\n\nWhereas this function has a type signature of ```\nint -> int -> int```\n. There are 2 parameters:\n\n```\nlet add a b = a + b\n```\n\n\n\n\nBut why did you get the error ```\nThis value is not a function and cannot be applied.```\n? Because ```\naddE```\n takes one argument and returns a ```\nlist```\n. You applied one argument so the type system infers that you have a list, and then tried to apply another argument to that list, but list is not a function. You can get the same error with just this code:\n\n```\n[] 1\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Consume a simple web service using mule\r\n                \r\nI am trying to consume a public service using Mule + apache cxf. The service is available at http://www.html2xml.nl/Services/Calculator/Version1/Calculator.asmx?WSDL\n\nThis is a very simple service which does basic arithmetic operations. I am trying to call the operation \"Add\" here. My mule configuration is as below\n\n```\n<flow name=\"calculator\" doc:name=\"calculator\">\n\n<stdio:inbound-endpoint system=\"IN\" doc:name=\"STDIO\"/>\n<custom-transformer class=\"com.calculator.transformer.CalculatorClient\" doc:name=\"Java\"/>\n\n<outbound-endpoint address=\"http://localhost:28081/service/Calculator?WSDL\" exchange-pattern=\"request-response\" doc:name=\"HTTP\">\n\n  <cxf:jaxws-client clientClass=\"com.calculator.wsdl.Calculator\" enableMuleSoapHeaders=\"true\" port=\"CalculatorHttpPost\" wsdlLocation=\"classpath:/wsdl/Calculator.wsdl\" operation=\"Add\">\n      <cxf:inInterceptors>\n    <spring:bean class=\"org.apache.cxf.interceptor.LoggingInInterceptor\" />\n    </cxf:inInterceptors>\n    <cxf:outInterceptors>\n      <spring:bean class=\"org.apache.cxf.interceptor.LoggingOutInterceptor\" />\n    </cxf:outInterceptors>\n  </cxf:jaxws-client>\n\n</outbound-endpoint>\n\n <transformer ref=\"CalculatorResponse\" doc:name=\"Transformer Reference\"/>\n\n <mulexml:jaxb-object-to-xml-transformer name=\"CalculatortoXML\" jaxbContext-ref=\"myJaxbCal\" />\n\n\n\n<stdio:outbound-endpoint system=\"OUT\" doc:name=\"STDIO\"/>\n\n\n</flow>\n```\n\n\nBefore calling the client class i added a transformer as below. This just sets the 2 numbers to add.\n\nCode\n\n```\npackage com.calculator.transformer;\n\nimport org.mule.api.MuleMessage;\nimport org.mule.api.transformer.TransformerException;\nimport org.mule.transformer.AbstractMessageTransformer;\n\nimport com.calculator.wsdl.Add;\n\npublic class CalculatorClient extends AbstractMessageTransformer {\n\n@Override\npublic Object transformMessage(MuleMessage message, String outputEncoding)\n        throws TransformerException {\n    Add add= new Add();\n    add.setA(3);\n    add.setB(3);\n\n    return add;\n}\n\n}\n```\n\n\nOnce i start mule i receive the error.Not sure what i am doing wrong.\n\n```\nERROR 2014-01-16 01:09:46,237 [[weatherproject].calculator.stage1.02] org.mule.exception.DefaultMessagingExceptionStrategy: \nMessage               : wrong number of arguments. Failed to route event via endpoint: org.mule.module.cxf.CxfOutboundMessageProcessor. Message payload is of type: Add\nCode                  : MULE_ERROR--2\nException stack is:\n1. wrong number of arguments (java.lang.IllegalArgumentException)\n  sun.reflect.NativeMethodAccessorImpl:-2 (null)\n2. wrong number of arguments. Failed to route event via endpoint: org.mule.module.cxf.CxfOutboundMessageProcessor. Message payload is of type: Add (org.mule.api.transport.DispatchException)\n  org.mule.module.cxf.CxfOutboundMessageProcessor:148 (http://www.mulesoft.org/docs/site/current3/apidocs/org/mule/api/transport/DispatchException.html)\nRoot Exception stack trace:\njava.lang.IllegalArgumentException: wrong number of arguments\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    + 3 more (set debug level logging or '-Dmule.verbose.exceptions=true' for everything)\n```\n\n    ", "Answer": "\r\nyou have mentioned ```\nhttp://localhost:28081/service/Calculator?WSDL```\n as your address and I suppose it  should be ```\nhttp://localhost:28081/service/Calculator```\n .\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "algorithm - How to solve an arithmetic expression DAG?\r\n                \r\nThere are two related excises in The Algorithm Design Manual. \n\nBasically, I know how to solve the first excise, but I don't know how to solve the 2nd one using the first one's solution as a hint. \n\nExcise of an arithmetic expression tree\n\n\n\n\n  Above is an arithmetic expression tree. Suppose an arithmetic\n  expression is given as a tree. Each leaf is an integer and each\n  internal node is one of the standard arithmetical operations\n  (+,−,∗,/). For example, the expression 2 + 3 ∗ 4 + (3 ∗ 4)/5 is\n  represented by the tree in above Figure. Give an O(n) algorithm for\n  evaluating such an expression, where there are n nodes in the tree.\n\n\nOk, this is not hard. My solution is like this:\n\n```\n    public float evaluate() {\n        return evaluate(root);\n    }\n\n    private float evaluate(Node_EX _node) {\n        if (_node.left == null || _node.right == null)\n            return Float.parseFloat(_node.key);\n        String op = _node.key;\n        if (op == \"+\") {\n            return evaluate(_node.left) + evaluate(_node.right);\n        } else if (op == \"-\") {\n            return evaluate(_node.left) - evaluate(_node.right);\n        } else if (op == \"*\") {\n            return evaluate(_node.left) * evaluate(_node.right);\n        } else {\n            return evaluate(_node.left) / evaluate(_node.right);\n        }\n    }\n```\n\n\nI just use recursive way to solve the expression tree for the result. \n\nExcise of an arithmetic expression DAG\n\n\n\n\n  Suppose an arithmetic expression is given as a DAG (directed acyclic\n  graph) with common subexpressions removed. Each leaf is an integer and\n  each internal node is one of the standard arithmetical operations\n  (+,−,∗,/). For example, the expression 2 + 3 ∗ 4 + (3 ∗ 4)/5 is\n  represented by the DAG in above Figure. Give an O(n + m) algorithm\n  for evaluating such a DAG, where there are n nodes and m edges in the\n  DAG. Hint: modify an algorithm for the tree case to achieve the\n  desired efficiency.\n\n\nOk, there is such a hint in the description: Hint: modify an algorithm for the tree case to achieve the desired efficiency.\n\nI am quite confused by this hint, actually. For a typical tree related thing, we normally can use recursive to solve. However, if this is a graph, my first intuitive is to use BFS or DFS to solve it. Then how can I relate BFS or DFS to the tree, though DFS is actually a recursive?\n    ", "Answer": "\r\nI believe, to achieve the desired efficiency, the problem wants you to avoid re-evaluating parts of the tree you've already visited. Once you've reached and evaluated some sub-tree in the DAG (every node in the tree represents the sub-tree rooted at that node), you can store the resulting value and associate it with that sub-tree. Then, when you visit it again, you can check whether you've pre-computed that value and just retrieve it rather than evaluating it again.\n\nThere are many different ways you can store and retrieve these values a simple one being to modify the structure of a node to allow for a cacheable result.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is this a VB.NET Arithmetic exception?\r\n                \r\nOkay, here is what I am asked to do by my teacher. Write a basic program that uses one of the arithmetic exceptions (other than dividing a number by zero) modeling the programs you’ve seen in this lesson. Then, in a second program, write one that would not produce an error. \n\nThe one's in the lesson were DivideByZeroException, NotFiniteNumberException, and OverflowException.\n\nEDIT: I cannot use DivideByZeroException. \n\nI am a beginner so I don't know much about programming. I'm taking a high school class, so please be patient.\n    ", "Answer": "\r\nBala's answer comes close:\n\n```\nDim j As Integer = Integer.MaxValue + 1 '<-- doesn't compile\n```\n\n\nThis would indeed overflow, but it doesn't compile because the compiler detects that we're trying to assign a value that doesn't fit inside an integer.\n\nIf we pass a variable to it, then the compiler doesn't make any assumption about the value of that variable, so the code compiles. It will fail with ```\nOverflowException```\n at runtime.\n\n```\nDim i As Integer = Integer.MaxValue\nDim j As Integer = i + 1 '<--  OverflowException at runtime\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Reversing a string using pointer-arithmetic\r\n                \r\nI want to reverse a string using pointer arithmetic. I wrote a small program based on what I read in \"A Book on C\" and basic programs I wrote myself (which worked to my satisfaction).\nHere is what I wrote:\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nvoid rv(char* str)\n{\n    int l = strlen(str);\n    char* copy = (char*) malloc((l + 1) * sizeof(char));\n    assert(copy != NULL);\n    int i;\n\n    for (i = 0 ; i < l ; i++) { // copy str to copy in reversed order\n        *(copy + i) = *(str + (l - 1 - i));\n    }\n\n    for (i = 0 ; i < l ; i++) { // \n        *(str + i) = *(copy + i);\n    }\n\n    free(copy);\n    printf(\"Current string is %s\\n\", str);\n}\n\nint main(void)\n{\n    char* s1 = \"abcde\";\n    rv(s1); \n    return 0;\n}\n```\n\n\nThe program crashes.\nFrom my tests, the problematic part is:\n\n```\nfor (i = 0 ; i < l ; i++) { // \n    *(str + i) = *(copy + i);\n}\n```\n\n\nI read similar questions, and it seems that this little piece of code should do no harm.\nactually, even if I replace that part with:\n\n```\n*(str + i) = 'c';\n```\n\n\nThe program still crashes. It seems I can't even change one simple character of the string.\nwhat is the problem?\n    ", "Answer": "\r\nHere is the culprit:\n\n```\nfor (i = 0 ; i < l ; i++) {\n    *(str + i) = *(copy + i);\n}\n```\n\n\nThis crashes, because you are passing a non-writable string into the ```\nrv```\n function.\n\nTo fix, copy the content of the string that you are reversing into a writable memory:\n\n```\nint main(void)\n{\n    char s1[] = \"abcde\";\n    rv(s1); // No crash here!\n    return 0;\n}\n```\n\n\nWith the crash out of the way, you could work on improving the efficiency of your algorithm: rather than allocating and freeing a temporary string, you could reverse in place by starting two pointers at both ends, swapping their content, and then moving them toward the middle. Stop once your pointers meet in the middle:\n\n```\nchar *s = str;\nchar *e = s + strlen(str)-1;\nfor ( ; s < e ; s++, e--) {\n    char tmp = *s;\n    *s = *e;\n    *e = tmp;\n}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to find the recurrence relation for the basic operation of algorithm\r\n                \r\nThis an algorithm to count inversions in an array, a divide and conquer algorithm. I want to know what is the basic operation of the this algorithm and how do I set up a recurrence relation to analyze the number of executions of the basic step?\nThe definition of basic step: The operation contributing the most to the total running time of an algorithm. It is typically the most time consuming operation in the algorithm’s innermost loop.\nExamples: Key comparison operation; arithmetic operation (division being the most time-consuming, followed by multiplication).\nThis is the algorithm\n```\n  public static int merge(int[] arr, int[] aux, int low, int mid, int high)\n    {\n        int k = low, i = low, j = mid + 1;\n        int inversionCount = 0;\n \n        // while there are elements in the left and right runs\n        while (i <= mid && j <= high)\n        {\n            if (arr[i] <= arr[j]) {\n                aux[k++] = arr[i++];\n            }\n            else {\n                aux[k++] = arr[j++];\n                inversionCount += (mid - i + 1);    // NOTE\n            }\n        }\n \n        // copy remaining elements\n        while (i <= mid) {\n            aux[k++] = arr[i++];\n        }\n \n        // no need to copy the second half\n \n        // copy back to the original array to reflect sorted order\n        for (i = low; i <= high; i++) {\n            arr[i] = aux[i];\n        }\n \n        return inversionCount;\n    }\n \n    // Sort array `arr[low…high]` using auxiliary array `aux`\n    public static int mergeSort(int[] arr, int[] aux, int low, int high)\n    {\n        // Base case\n        if (high == low) {    // if run size == 1\n            return 0;\n        }\n \n        // find midpoint\n        int mid = (low + ((high - low) >> 1));\n        int inversionCount = 0;\n \n        // recursively split runs into two halves until run size == 1,\n        // then merges them and return up the call chain\n \n        // split/merge left half\n        inversionCount += mergeSort(arr, aux, low, mid);\n \n        // split/merge right half\n        inversionCount += mergeSort(arr, aux, mid + 1, high);\n \n        // merge the two half runs\n        inversionCount += merge(arr, aux, low, mid, high);\n \n        return inversionCount;\n    }\n```\n\nHow do I set up a recurrence relation to analyze number of executions of the basic steps? Please also provide explanation.\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to efficiently check against bitmask?\r\n                \r\nI am using inotify and want to efficiently check against the reported bitmask event (see inotify man page).\n\nNow I could brutely check against every bit on every event, but that would be extremely crude, if not stupid, as I would have N conditionals every time. Or is calling\n\n```\n( bitmask & mask ) == mask\n```\n\n\nfor each mask already super efficient?\n\nSince the resulting bitmask is basically just a well defined number, I should be able to use basic arithmetic operations for this. But before I think up something myself, I wanted to ask if there is a well-known, efficient way to check against a given bitmask. So, is there?\n    ", "Answer": "\r\nIf you want to check against one bitmask, then \n\n```\nif ((value & mask) == mask)\n```\n\n\nwill give you an exact match (\"all bits in the mask\"), and \n\n```\nif ((value & mask) != 0)\n```\n\n\nwill supply a loose match (\"any bit in the mask\"). The compiler will further optimize the check against zero.\n\nIf you have several bitmasks, you want to extract the maximum information out of each check in the time domain (an extreme case: if all the values you get are certainly odd, you needn't check the 0th bit at all. It will always be 1). Ideally you need to identify a first round of bits that have a 50% probability of being 1.\n\nIn both groups you then identify a subgroup (probably not the same in the two cases) with the same chance.\n\n```\nif ((value & SPECIAL_MASK_1) == SPECIAL_MASK_1) {\n    if ((value & SPECIAL_MASK_2) == SPECIAL_MASK_2) {\n        ...\n    } else {\n        ...\n    }\n} else {\n    if ((value & SPECIAL_MASK_3) == SPECIAL_MASK_3) {\n        ...\n    } else {\n        ...\n    }\n}\n```\n\n\nIf you had, say, 32 states, each mapped to one bit, and only one bit can be set at each call - the easiest case - the \"serial\" sequence would be one of 32 checks one after the other\n\n```\nif ((mask & 0x00000001) == 0x00000001) {\n} else if ((mask & 0x00000002) == 0x00000002) {\n}\n...\n```\n\n\nand a first simple optimization would to place the checks for the most frequent occurrences first. Say that one case out of three the seventh bit is set; you put the check for the seventh bit first.\n\nThis way you will end up doing only one check 33% of the time; then maybe two checks another 20% of the time, ..., and in the end on average you might run, say, seven checks.\n\nAnother possibility is\n\n```\nif (mask & 0x0000FFFF) {\n    // The bit is in the LSW\n    if (mask & 0x0000FF00) {\n        // MSB of LSW\n        if (mask & 0x0000F000) {\n            ...\n        } else {\n        }\n    }\n} else {\n}\n```\n\n\nThis will run every time exactly five checks. At that point, however, considerations about the CPU architecture, branch prediction etc. are likely to trump any optimization you might attempt to do.\n\nUnless you have a very complex setup, or some other constraint (e.g. embedded device), I fear that the cost of analyzing, building, debugging and maintaining an \"optimized\" versus \"brute force\" check is likely to more than balance any advantage you could squeeze out of the former.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Division of integers in Java [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Int division: Why is the result of 1/3 == 0?\r\n                            \r\n                                (19 answers)\r\n                            \r\n                    \r\n                Closed 5 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nThis is a basic question but I can't find an answer.  I've looked into floating point arithmetic and a few other topics but nothing has seemed to address this.  I'm sure I just have the wrong terminology.\n\nBasically, I want to take two quantities - completed, and total - and divide them to come up with a percentage (of how much has been completed).  The quantities are ```\nlong```\ns.  Here's the setup:\n\n```\nlong completed = 25000;\nlong total = 50000;\n\nSystem.out.println(completed/total);  // Prints 0\n```\n\n\nI've tried reassigning the result to a double - it prints ```\n0.0```\n.  Where am I going wrong?\n\nIncidentally, the next step is to multiply this result by 100, which I assume should be easy once this small hurdle is stepped over.\n\nBTW not homework here just plain old numskull-ness (and maybe too much coding today).\n    ", "Answer": "\r\nConverting the output is too late; the calculation has already taken place in integer arithmetic.  You need to convert the inputs to ```\ndouble```\n:\n\n```\nSystem.out.println((double)completed/(double)total);\n```\n\n\nNote that you don't actually need to convert both of the inputs. So long as one of them is ```\ndouble```\n, the other will be implicitly converted.  But I prefer to do both, for symmetry.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "JAVA: having trouble working with arithmetic operators (code so far included)\r\n                \r\nI need to modify ```\nevalE```\n and ```\nevalMD```\n so that the program now can evaluate arithmetic expressions with +, -, *, / operators and positive or negative integer operands.  I have gotten it to work with basic equations, but if for example I put in equation 25+-2 I receive errors. Here is what I have so far:\n\n```\nint evalE(String exp)   \n{\n    int result = 0;\n    String tmp=\"\";\n    char ch;\n\n    for (int i=exp.length()-1;i>=0;i--)\n    {   ch = exp.charAt(i);\n        if (ch == '+')\n        {\n            result += evalMD(tmp);\n            tmp = \"\";\n        }\n        else if (ch == '-')\n        {\n            result -= evalMD(tmp);\n            tmp = \"\";\n        }\n        else\n            tmp = ch+tmp;\n\n    }\n\n    if (exp.charAt(0) != '+' && exp.charAt(0) != '-')\n         result += evalMD(tmp);\n\n    return result;\n}\n\n\nint evalMD(String exp)\n{\n    int result = 1;\n    String tmp = \"\";\n    char previousOP = '*';\n\n    for (int i=0;i<exp.length();i++)\n    {\n        char ch = exp.charAt(i);\n        if (ch == '*' || ch == '/')\n        {\n            if (previousOP == '*')\n                result *= Integer.parseInt(tmp);\n            else\n                result /= Integer.parseInt(tmp);\n\n            tmp = \"\";\n            previousOP = ch;\n        }\n        else\n            tmp = tmp+ch;\n    }\n\n    if (previousOP == '*')\n        result *= Integer.parseInt(tmp);\n    else\n        result /= Integer.parseInt(tmp);            \n\n    return result;\n}\n```\n\n\nWhy won't my equation work with the above mentioned circumstances? Any help is much appreciated. Thank you.\n    ", "Answer": "\r\nAfter looking at your code, it seems that if the second number is negative at all, (regardless the operand), the program will send errors. I suggest making a scenario in which the second number, if negative, would be enclosed in parentheses. e.g. 25+(-10). By doing this, it should be a lot easier to see if there is going to be a negative. \nAlso, maybe you should check your code for the division operand. It only does integer division right now, (  24/20 = 1  ) but if you want it to do a real divide, you will have to change the return type of the method to \"double\".\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "R: Properly using a dataframe as an argument to a function\r\n                \r\nI am practicing using the apply function in R, and so I'm writing a simple function to apply to a dataframe.\n\nI have a dataframe with 2 columns. \n\n```\n V1    V2\n 1     3\n 2     4\n```\n\n\nI decided to do some basic arithmetic and have the answer in the 3rd column, specifically, I want to multiply the first column by 2 and the second column by 3, then sum them.\n\n```\n V1    V2    V3\n 1     3     11\n 2     4     16\n```\n\n\nHere's what I was thinking:\n\n```\nmydf <- as.data.frame(matrix(c(1:4),ncol=2,nrow=2))\nsome_function <- function(some_df) {some_df[,1]*2 +   \n                                    some_df[,2]*3}\nmydf <- apply(mydf ,2, some_function)\n```\n\n\nBut what is wrong with my arguments to the function?  R is giving me an error regarding the dimension of the dataframe.  Why?\n    ", "Answer": "\r\nThree things wrong:\n\n1) apply \"loops\" a vector of either each column or row, so you just address the name [1] not [,1]\n2) you need to run by row MARGIN=1, not 2\n3) you need to cbind the result, because apply doesn't append, so you're overwriting the vector\n\n```\nmydf <- as.data.frame(matrix(c(1:4),ncol=2,nrow=2))\n\nsome_function <- function(some_df) {some_df[1]*2 +   \n                                      some_df[2]*3}\n\nmydf <- cbind(mydf,V3=apply(mydf ,1, some_function))\n\n#  V1 V2 V3\n#1  1  3 11\n#2  2  4 16\n```\n\n\nbut probably easier just to do the vector math:\n\n```\nmydf$V3<-mydf[,1]*2 + mydf[,2]*3 \n```\n\n\nbecause vector math is one of the greatest things about R\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "retrieve matrix from ANN using sci-kit learn\r\n                \r\nUSing python 3.5, I do the following\n\n```\nfrom sklearn.neural_network import MLPRegressor\nimport pandas as pd\n```\n\n\nfrom sklearn import datasets\nfrom sklearn.decomposition import PCA\n\n```\n# import some data to play with\niris = datasets.load_iris()\nX = iris.data[0:100, :2]  # we only take the first two features.\nY = iris.target[0:100]\n\nX = StandardScaler().fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.15)\nreg = MLPRegressor(hidden_layer_sizes=(10,),\n                           solver=\"lbfgs\", #solver=\"lbfgs\",\n                           max_iter = 10000,\n                           activation = 'relu')\nreg.fit(X_train,y_train)\n```\n\n\ni can get the matrix using ```\nreg.coefs_[0]```\n but when I multiply it by a test case, I don't get 0 or 1\n\nwhat I'm trying to do is train an ANN based on lab data, and then implement it as matrix multiplication on a piece of hardware.  The hardware can do basic arithmetic, so I need to deconstruct my ANN into a matrix, and then program matrix multiplication as iterated multiplication/addition\n    ", "Answer": "\r\nThe short, \"specific to this question\" answer is \n\n```\nnp.dot((np.dot(X_test[0],reg.coefs_[0]) +reg.intercepts_[0] ),reg.coefs_[1]) + reg.intercepts_[1]\n```\n\n\nThe long answer is as follows (even longer version here: https://www.mohammadathar.com/blog/2017/2/15/a-different-look-at-neural-networks ) \n\nA perceptron neural net can be modeled like this: \n\nWhat that really means, is \"multiply input values by a weight, and add.  then add in a bias value.  Then activate.  Then multiply by weights, and add.  Then activate.  And repeat!\"\n\nAs matrix math, it looks like this\n\n\n\nSo the ```\nreg.coefs_```\n is the matrix coefficients (per layer) and the ```\nreg.intercepts_```\n is the activation values (again, per layer)\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How should I go about creating a point system for users like SO and yahoo answers?(PHP)\r\n                \r\nI am creating a voting system for a Q&A site project in which if a user asks a question, he/she losses -5 points; answer a question +5, vote a question +1, etc. (kind of like SO and yahoo answers) \n\n-->To create the basic arithmetic, I have a \"users_points\" table that relates the user_id and their total points.\n\n```\n+---+---------+\n| 1 | 100     |\n+---+---------+\n| 2 | 54      |\n+---+---------+\n```\n\n\n-->Basically if the users does certain task, it would + or - the points. How do I prevent users from say voting an answer up 100 times. ex: I want a user to be only able to vote once per question, etc. \n    ", "Answer": "\r\nYou should create a votes table that has the columns: ```\nuser_id, question_id, delta```\n. Delta is the value of the vote, which should be 1 or -1 (this way you can just do a ```\nSUM(delta)```\n to find a question's point value). \n\nTo get the uniqueness, create a unique index on ```\n(user_id, question_id).```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why do divisions not work in jsonpath-ng?\r\n                \r\nJsonpath-ng offers basic arithmetic as in:\n```\nfrom jsonpath_ng import jsonpath\nfrom jsonpath_ng.ext import parse\n\njsonpath_expr = parse('$.foo * 2')\ntarget = {'foo': 2}\nresult = jsonpath_expr.find(target)\nresult = [match.value for match in result]\nprint(result)\n```\n\nresult: ```\n[4]```\n\nHowever, if I change the expression to ```\n$.foo / 2```\n, then I get a Parse Error:\n```\nTraceback (most recent call last):\n  File \"test.py\", line 4, in <module>\n    jsonpath_expr = parse('$.foo / 2')\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\jsonpath_ng\\ext\\parser.py\", line 172, in parse\n    return ExtentedJsonPathParser(debug=debug).parse(path)\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\jsonpath_ng\\parser.py\", line 32, in parse\n    return self.parse_token_stream(lexer.tokenize(string))\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\jsonpath_ng\\parser.py\", line 55, in parse_token_stream\n    return new_parser.parse(lexer = IteratorToTokenStream(token_iterator))\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\ply\\yacc.py\", line 333, in parse\n    return self.parseopt_notrack(input, lexer, debug, tracking, tokenfunc)\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\ply\\yacc.py\", line 1201, in parseopt_notrack\n    tok = call_errorfunc(self.errorfunc, errtoken, self)\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\ply\\yacc.py\", line 192, in call_errorfunc\n    r = errorfunc(token)\n  File \"C:\\Users\\micha\\AppData\\Roaming\\Python\\Python38\\site-packages\\jsonpath_ng\\parser.py\", line 69, in p_error\n    raise Exception('Parse error at %s:%s near token %s (%s)' % (t.lineno, t.col, t.value, t.type))\nException: Parse error at 1:6 near token / (SORT_DIRECTION)\n```\n\nI can sometimes work around this issue by dividing by the inverse value, so I would do ```\n$.foo * 0.5```\n to get the result ```\n[1.0]```\n. But this doesn't work if both sides of the equation are numeric values of different types (int or float). So ```\n2 * 0.5```\n and ```\n0.5 * 2```\n will result in a Parse error, but ```\n2.0 * 0.5```\n will not.\nHow do I get divisions to work? And why can I not multiply a float by an integer?\n    ", "Answer": "\r\nThose are both grammar bugs.\n\nExtended JSON paths are allowed to be suffixed with a bracketed expression containing a list of \"sorts\"; each sort starts with ```\n/```\n or ```\n\\```\n. To make that work, the extended lexer recognises those two symbols as the token ```\nSORT_DIRECTION```\n, which takes precedence over the recognition of ```\n/```\n as an arithmetic operator. Consequently the use of ```\n/```\n as an arithmetic operator is not allowed by the parser. (In fact, the problem goes deeper than that, but that's the essence.)\n\nFor some reason, the grammar author chose to separate ```\nNUMBER```\n (actually, integer) and ```\nFLOAT```\n in arithmetic expressions, which means that they had to enumerate the possible combinations. What they chose was:\n```\njsonpath : NUMBER operator NUMBER\n         | FLOAT operator FLOAT\n         | ID operator ID\n         | NUMBER operator jsonpath\n         | FLOAT operator jsonpath\n         | jsonpath operator NUMBER\n         | jsonpath operator FLOAT\n         | jsonpath operator jsonpath\n```\n\nThere are other problems with this grammar, but the essence here is that it permits ```\nNUMBER operator NUMBER```\n and ```\nFLOAT operator FLOAT```\n but does not permit ```\nNUMBER operator FLOAT```\n or ```\nFLOAT operator NUMBER```\n, which is what you observe. However, path expressions can work with either ```\nNUMBER```\n or ```\nFLOAT```\n.\n\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "What happens when you perform arithmetic operation on a reference of a pointer [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Why are `&array` and `array` pointing to the same address?\r\n                            \r\n                                (2 answers)\r\n                            \r\n                    \r\n                    \r\n                        why is array name a pointer to the first element of the array?\r\n                            \r\n                                (3 answers)\r\n                            \r\n                    \r\n                    \r\n                        How *(&arr + 1) - arr is working to give the array size [duplicate]\r\n                            \r\n                                (6 answers)\r\n                            \r\n                    \r\n                Closed 1 year ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI saw one approach to calculate the length of an array is like this:\n```\n   int arr[5] = {5, 8, 1, 3, 6};\n   int len = *(&arr + 1) - arr;\n```\n\nI understand basic pointer arithmetic. For example ```\narr + 1```\n move the pointer to the 2nd element in the array and the value of ```\narr + 1```\n is the address of the 2nd element.\nHowever I'm confused about what ```\n&arr + 1```\n does. I tried printing out the value of ```\n&arr```\n and it's the same as ```\narr```\n, both are the address of the 1st element in the array. Any help is appreciated.\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Sass is concatenating instead of adding? [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has an answer here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Math with interpolated variables?\r\n                            \r\n                                (1 answer)\r\n                            \r\n                    \r\n                Closed 7 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI need to define a width in my SCSS code as so:\n\n```\n#example {\n  width: $currentWidth + 349 !important;\n}\n```\n\n\nWhere ```\n$currentWidth```\n is defined by the loop.\n\nHowever, Sass always ends up concatenating the two numbers instead of doing the arithmetic.\n\nI have also tried:\n\n```\nwidth: #{$currentWidth + 349}px !important;```\n\n\nWhich still results in concatenation.\n\nI'm wondering what I'm doing wrong? I know this is incredibly basic, but I also can't seem to find good information on how Sass handles arithmetic\n    ", "Answer": "\r\nAssuming ```\n$currentWidth```\n is an integer.\n\nSASS:\n\n```\n$currentWidth: 30;\n\n#example {\n  width: unquote( ($currentWidth + 349) + 'px ' + !important );\n}\n```\n\n\nCSS OUTPUT:\n\n```\n#example {\n  width: 379px !important;\n}\n```\n\n\nYou can test it here:\n\nhttp://sass-lang.com/try.html\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "segFault on return from pthread_join\r\n                \r\nI am implementing a stack pool to do some basic arithmetic in a specific number of threads.\nhere is the code:\n```\nint add(int a, int b) {return a+b;}\nint sub(int a, int b) {return a-b;}\nint mul(int a, int b) {return a*b;}\nsem_t sem_ops;\nvoid* compute(void* arg){\n    Args *args = arg;\n    Operation* op = args->operation;\n    printOP(*op);\n    int * value = malloc ( sizeof ( int ) ) ;\n    * value = op->op(op->a, op->b);\n    args->is_complete = true;\n    sem_post(&sem_ops);\n    return value;\n}\nvoid push(Operation op , Queue* q){\n    q->operations[++(q->last)] = op;\n}\nOperation *pop(Queue *q){\n    q->first++;\n    return &q->operations[q->first];\n}\nint size(Queue *q){\n    return q->last - q->first;\n}\n               \nbool read_operations(char* filename, Queue* ops){\n    printf(\"reading from file %s\\n\",filename);\n    FILE *fp = fopen(filename, \"r\");\n    if(fp == NULL ) \n    {\n        printf(\"couldnt open\");\n        return false;\n    }\n    int id,a,b;\n    while(!feof(fp)){\n        fscanf(fp,\"%d %d %d\\n\",&id,&a,&b);\n        Operation op;\n        op.a = a;\n        op.b = b;\n        switch (id){\n            case 0:\n                op.op = add;\n                break;\n            case 1:\n                op.op = sub;\n                break;\n            case 2:\n            default:\n                op.op =mul;\n                break;\n        }\n        push(op,ops);\n    }\n    return true;\n}\nArrayList* execute_thread_pool(char* filename, int poolSize){\n    sem_init(&sem_ops,0,poolSize);\n    //init return value\n    ArrayList* retval =malloc(sizeof(ArrayList));\n    int res [ TOTAL_OP_COUNT];\n    retval->results = res;\n    retval->count = 0;\n    // populate Q\n    Queue q;\n    Operation ops[TOTAL_OP_COUNT];\n    q.first = 0;\n    q.last = 0;\n    q.max = TOTAL_OP_COUNT;\n    q.operations = ops;\n    read_operations(filename,&q);\n    // thread tids\n    pthread_t threads[TOTAL_OP_COUNT];\n    //args for each thread\n    Args args[TOTAL_OP_COUNT];\n    int* result= NULL;\n    for(int i =0; i<poolSize; ++i){\n        sem_wait(&sem_ops);\n        args[i].operation = pop(&q);\n        args[i].is_complete=false;\n        pthread_create(&threads[i],NULL, compute,&args[i]);\n    }\n    for(int i =0; i<poolSize; ++i){\n        if(args[i].is_complete){\n            pthread_join(threads[i],(void**) result);\n            res[i] = *result; // line 88\n        }else --i;\n    }\n    return retval;\n}\n```\n\nand the structs typedefs:\n```\ntypedef struct _Operation{\n    int(*op) (int, int);\n    int a;\n    int b;\n} Operation;\ntypedef struct _Args{\n    Operation* operation;\n    bool is_complete;\n}Args;\ntypedef struct _Queue{\n    Operation* operations;\n    int last;\n    int first;\n    int max;\n}Queue;\n```\n\nI tried using malloc at a few different places, but can't run away from segfault.\nthis is the content of the main function:\n```\n    ArrayList *al =malloc(sizeof(ArrayList)) ;\n    al = execute_thread_pool(\"bob.txt\", 4);\n```\n\nin gdb the bt is as follow:\n```\n#0  0x0000555555555762 in execute_thread_pool (filename=0x555555556004 \"bob.txt\", poolSize=4) at pool.c:88\n#1  0x00005555555552db in main (argc=1, argv=0x7fffffffda68) at main.c:5\n```\n\nI've been on this for a few hours, tried multiple ways, tried without semaphores and using not so fun loops and yet the same result. can anyone help me spot the issue?\n    ", "Answer": "\r\nYou misunderstand the ```\npthread_join```\n call and how emulating pass-by-reference work in works.\nYou are supposed to pass a pointer to an ```\nint *```\n variable, using the pointer-to operator ```\n&```\n:\n```\npthread_join(threads[i], &result);\n```\n\nYou should also remember to ```\nfree```\n the pointer ```\nresult```\n, or you will have a memory leak.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Segmentation Fault after assignment statement(lex and yacc)\r\n                \r\nThis code works perfectly fine. After compiling lex and yacc, the code is able to do basic arithmetic operations, and even echoes the value of a variable when asked to do so. The only problem is with assignment statements. \n\nIf I want to, say, do A = 12, and later type A to see its value, the program crashes and I get a segmentation fault. How do I ensure that my assignment statements work, and how can I avoid this segmentation fault? \n\nHere is my code:\n\n```\n//lex file\n\n/*Lex input specification*/\n%{\n#include <stdlib.h>\n#include <stdio.h>\n#include \"y.tab.h\"\nvoid yyerror(char*);\n%}\n\n%%\n\" \"             ;\n\n[A-Z]               { yylval = *yytext-'a'; return VARIABLE;}\n\n[0-9]+([0-9])*          { yylval=atoi(yytext); return INTEGER;}\n\n[-/+()=*\\n]         { return *yytext;}\n\n\n[\\t]                ;\n\n.               { yyerror(\"invalid character\");}\n%%\n\nint yywrap(void) { return 1;}\n```\n\n\nAnd the yacc file:\n\n```\n/*yacc*/\n\n%token INTEGER VARIABLE\n%left '|'\n%left '&'\n%left '+' '-'\n%left '*' '/'\n%left UMINUS\n\n\n\n%{\n    void yyerror(char*);\n    int yylex(void);\n    int sym[26];\n\n    #include <stdio.h>\n    #include <string.h>\n    #include <stdlib.h>\n\n%}\n\n%%\n\nprogram:\n        program statement '\\n'\n        |\n        ;\nstatement:\n        expr            {printf(\"%d\\n\",$1);}\n        | VARIABLE '=' expr     {sym[$1] = $3;}\n        ;\n\nexpr:\n\n        INTEGER         {$$ = $1;}\n        | VARIABLE      {$$ = sym[$1];}\n        | expr '*' expr     {$$ = $1 * $3;}\n        | expr '/' expr     {$$ = $1 / $3;}\n        | expr '+' expr     {$$ = $1 + $3;}\n        | expr '-' expr     {$$ = $1 - $3;}\n        | '(' expr ')'      {$$ = $2;}\n        ;\n%%\n\nvoid yyerror(char*s) {\n    fprintf(stderr, \"%s\\n\", s);\n}\n\nint main(void) {\n    yyparse();\n    return 0;\n\n}\n```\n\n    ", "Answer": "\r\n(I flagged this as \"not reproducible\" because the fix was so trivial; however the flag has now timed-out/aged away. I'll answer instead so it is not shown as an open unanswered question).\n\nAs @BLUEPIXY noted:\n\n\n  maybe ```\n*yytext-'A'```\n\n\n\nWhich, to clarify, is the lex rule:\n\n```\n[A-Z]               { yylval = *yytext-'A'; return VARIABLE;}\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Integer overflow in intermediate arithmetic expression\r\n                \r\nThis might be a very basic programming question, but it's something I've wanted to understand for some time.\n\nConsider this simple example:\n\n```\nint main(void) \n{\n  unsigned char a = 5;\n  unsigned char b = 20;\n  unsigned char m = 0xFF;\n\n  unsigned char s1 = m + a - b;\n  unsigned char s2 = m - b + a;\n  printf(\"s1 %d s2 %d\", s1, s2);\n  return 0;\n}\n```\n\n\nGiven that arithmetic operators are evaluated from left to right in C, the first calculation here should overflow at m + a. However, running this program returns the same answer for s1 and s2. \nMy question here is: does the first expression lead to undefined behavior because of the overflow? \nThe second expression should avoid the overflow, but I wanted to understand why the two expressions return the same answer.\n    ", "Answer": "\r\nDue to C's integer promotion the s1 calculation is effectively executed as:\n\n```\nunsigned char s1 = (unsigned char)( (int)m + (int)a - (int)b );\n```\n\n\nAnd there is no interim overflow.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "I want to read file and write another file. Basically, I want to do some arithmetic and write few other columns\r\n                \r\nI have a file like\n\n```\n2.0 4 3\n0.5 5 4\n-0.5 6 1\n-2.0 7 7\n.......\n```\n\n\nthe actual file is pretty big\n\nwhich I want to read and add couple of columns, first added column, ```\ncolumn(4) = column(2) * column(3)```\n and 2nd column added would be ```\ncolumn 5 = column(2)/column(1) + column(4)```\n so the result should be\n\n```\n2.0 4 3 12 14\n0.5 5 4 20 30\n-0.5 6 1 6 -6\n-2.0 7 7 49 45.5\n.....\n```\n\n\nwhich I want to write in a different file.\n\n```\nwith open('test3.txt', encoding ='latin1') as rf: \n     with open('test4.txt', 'w') as wf:\n        for line in rf:\n            float_list= [float(i) for i in line.split()]\n            print(float_list)\n```\n\n\nBut so far I just have this. I am just able create the list not sure how to perform arithmetic on the list and create new columns. I think I am completely off here. I am just a beginner in python. Any help will be greatly appreciated. Thanks!\n    ", "Answer": "\r\nI would reuse your formulae, but shifting indexes since they start at 0 in python.\nI would extend the read ```\ncolumn```\n list of floats with the new computations, and write back the line, space separated (converting back to ```\nstr```\n in a list comprehension)\n\nSo, the inner part of the loop can be written as follows:\n\n```\nwith open('test3.txt', encoding ='latin1') as rf:\n     with open('test4.txt', 'w') as wf:\n        for line in rf:    \n           column= [float(i) for i in line.split()]  # your code\n           column.append(column[1] * column[2])  # add column\n           column.append(column[1]/column[0] + column[3])  # add another column\n           wf.write(\" \".join([str(x) for x in column])+\"\\n\")  # write joined  strings, separated by spaces\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to input multiple numeric types in the same line in Python\r\n                \r\nI'm trying to do basic arithmetic with different numeric types. The input is one floating number (4.2), two integers (3)(2), one string('Hello'). How can I read the input from the user in one the same line? Each numeric type is separated by a space only, with no commas.  I've managed to make it work by defining the inputs separately on one line per input.\n\n```\n`    a = float (input())\n     b = int (input())\n     c = int (input())\n     d = str (input())\n     print (round (a * b,2),end=d*c)    `\n```\n\n\nThe actual result works fine if the input is provided in different lines but I would like to get all the input in one line. Thank you.\n    ", "Answer": "\r\n```\nitems = input.split(' ')\nitems = [int(i) for i in items]\nprint (round (items[0] * items[1],2),end=items[2]*items[3]) \n```\n\n\nPlease note this will crash if you enter more or less than 4 space separated values.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How much lisp to implement in C before writing extension in itself?\r\n                \r\nI am implementing a lisp interpreter in C, i have implemented along with few primitives like cons , car, cdr , eq, basic arithmetic stuff.\n\nJust before i was starting to implement define and lambda it occurred to me that i need to implement an environment. I am unsure if i could implement it in lisp itself.\n\nMy intent is to implement minimal amount of lisp so that i could write extension to the language in itself. I am not sure how much is minimal, Would implementing FFI Qualify as minimal ?\n    ", "Answer": "\r\nThe answer to your question depends on the meaning that you give to the word “minimal”.\n\nGiven your question, and assuming that you don't want to make an implementation competing with the nowdays fine implementations of Common Lisp and Schema, my hypothesis is that with “minimal” you intend: Turing complete, that is capable of expressing any computation expressible in a general purpose programming language.\n\nWith this assumption, you need to implement three other things:\n\n\nconditional forms  (```\ncond```\n)\nlambda expressions (```\nlambda```\n)\na way of defining recursive lambda expression (```\nlabels```\n or ```\ndefun```\n)\n\n\nYour interpreter then should be able to evaluate forms. This should be sufficient to have a language equivalent to the initial LISP, that allow to express in the language any computable function.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "how come my code isn't recognizing input?\r\n                \r\nI want this code to recognize the users input ex: ```\n2+3```\n\nand make it ```\n5```\n\nor if user inputs ```\n4*3```\n give me ```\n12```\n\nhow do i modify my code?\n\nI am currently getting\n\nEnter expression: ```\n3+3```\n\n\nand then it gave me space to enter two more inputs like this which shouldn't be allowed\n3_#\n3&3\n\n```\nException in thread \"main\" java.lang.NumberFormatException: For input string: \"3+3\"\nat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\nat java.lang.Integer.parseInt(Integer.java:580)\nat java.lang.Integer.valueOf(Integer.java:766)\nat Calculator.main(Calculator.java:13)\n```\n\n\n----jGRAS\n\nbefore giving me that error^^^\nHow can I get it to recognize the input operator and go to the calculator1 method and process the basic arithmetic?\n\nthank you in advance for any advice.\nhere is my code:\n\n```\nimport java.util.Scanner;\n\nclass Calculator {\n     public static void main(String[] args) {      \n\n\n         Scanner kb = new Scanner(System.in);\n\n         System.out.print(\"Enter expression: \");   \n         String d = kb.next();\n         String f = kb.next();\n         String e = kb.next();\n         int a = (Integer.valueOf(d));\n         int b = (Integer.valueOf(e));\n         char c = f.charAt(0);\n         calculator1(a, b, c);\n\n\n     }\n     public static int calculator1(int a, int b, char c)  {\n\n         int fault = Integer.parseInt(\"Please Check Your Expression.\");\n\n         if(\"+\".equals(c)) \n             System.out.print(a+b);\n         else if (\"-\".equals(c)) \n             System.out.print(a-b);\n         else if (\"*\".equals(c))  \n             System.out.print(a*b);\n         else if (\"/\".equals(c)) \n             System.out.print(a/b);\n         return fault;\n     }\n}\n```\n\n    ", "Answer": "\r\nThe problem is that you're trying to compare between a ```\nString```\n and a ```\nchar```\n. You're doing:\n\n```\nif(\"+\".equals(c))\n    ....\n```\n\n\nIt should be:\n\n```\nif('+' == c)\n    ....\n```\n\n\nAlso, try using ```\nInteger.parseInt()```\n instead like the following:\n\n```\n int a = (Integer.parseInt(d));\n```\n\n\nLastly, you can't ```\nparseInt```\n a full sentence like ```\n\"Please Check Your Expression.\"```\n. ```\nInteger.parseInt```\n is supposed to parse the string to find a match numeric value.\n\nSo if you were to execute ```\nInteger.parseInt(\"5\")```\n, it will return an ```\nint```\n of ```\n5```\n.\n\nIt looks like you're program is just trying to print out the result. If that's the case, I would change the return type your ```\ncalculator1```\n method from ```\nint```\n to ```\nvoid```\n and remove ```\nreturn fault;```\n at the end.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Numpy significantly slower on Windows than on Ubuntu\r\n                \r\nI ran the following snippet in IPython on both Windows 10 and Ubuntu 16.04 installed on the same machine (dual-boot):\n```\nimport numpy as np\n\na = np.random.random((1280, 1024))\nb = np.random.random((1280, 1024))\n\n%timeit a / b\n```\n\nOn Windows, this outputs:\n```\n1.81 ms ± 21.3 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```\n\nOn Ubuntu, the output is:\n```\n649 µs ± 1.41 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```\n\nI see the same performance difference with all basic arithmetic operations.\nOn both systems, I'm running this in a conda environment, with Python 3.8.3, NumPy 1.19.2 and MKL 2020.1. The machine runs AMD Ryzen 9 5950X CPU.\nWhy is there such a big discrepancy between the two systems? Are there ways to bring performance on Windows closer to Ubuntu?\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Modulus division to get multiples of 10\r\n                \r\nI'm currently doing a practice where I'm given a non-negative number \"num\", and return true if num is within 2 of a multiple of 10.\n\nI have the idea of an if statement which would include the below, but a more working / similar version;\n\n```\nif (num-2 >= (num % 10 == 0) <= num+2);\n```\n\n\nSeems like I'm trying to create a variable with all multiples of 10, however this seems a bit overkill. I feel it's basic arithmetic with something like num-2 >= x <= num+2, where x is a multiple of 10, but what is the solution?\n    ", "Answer": "\r\nYou are looking for numbers that end in 0,1,2,8 or 9, which means\n\n```\nif (num % 10 <= 2 || num % 10 >= 8)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Tensorarray initialization\r\n                \r\nI am writing an example program to learn distributed tensorflow on 4 nodes. My program consists of assigning values to a simple numpy array. Then I convert them into tensorflow arrays to do a basic arithmetic addition operation. I store the outputs in another tensorflowarray. Finally convert this array into tensor to print it in the output.  \n\n```\nimport tensorflow as tf\nimport numpy as np\nimport datetime\n\nu1 = tf.TensorArray(dtype=tf.float64,size=101)\nu2 = tf.TensorArray(dtype=tf.float64,size=101)\nu3 = tf.TensorArray(dtype=tf.float64,size=101)\nu4 = tf.TensorArray(dtype=tf.float64,size=101)\nu5 = tf.Variable(np.zeros(101))\nu = np.zeros(101)\na = tf.Variable(0, dtype=tf.float64)\nL = 100.0\n\nx = tf.constant(2, dtype=tf.float64)\n\nt1 = datetime.datetime.now()\nwith tf.device(\"/job:local/task:3\"):\n    for i in range(2):\n        for j in range(101):\n            # u[j] = (np.sin(2*np.pi*j/L))\n            u[j] = j\n            u1 = u1.write(j,u[j])\n            u2 = u2.write(j,u[j])\n            u3 = u3.write(j,u1.read(j)+u2.read(j))\n\n        u4 = u3.pack()\n        assign = tf.assign(u5, u3(100))\n\n\nmodel = tf.initialize_all_variables()\n\nwith tf.Session(\"grpc://localhost:2222\") as sess:\n    sess.run(model)\n    print sess.run(u4)\n    print sess.run(assign)\n    # print (u4.eval())\nt2 = datetime.datetime.now()\n\nprint('\\n')\nprint \"Multi node computation time: \" + str(t2-t1)\n```\n\n\nI want to overwrite the tensorarrays u1,u2,u3,u4. The above written program gives the following error:-\n\n```\nInvalidArgumentError (see above for traceback): TensorArray TensorArray_1_21: Could not write to TensorArray index 0 because it has already been read.\n```\n\n\nIs there anyway to initialize the used tensorarrays after the first for loop? Please help.\n    ", "Answer": "\r\nTensorArrays are a \"write-once\" data structure: after they've been read from (e.g. with pack()) they can't be written to. They're mainly useful in combination with tf.while_loop (see the TensorArray documentation).\n\nIt looks like TensorArrays aren't a great fit here. You could use Python lists of Tensors, which will avoid the TensorArray errors, although this will lead to a large graph when looping over many values. If that becomes an issue, you can switch the Python for loops over to a while_loop or one of the higher-level looping constructs. It's not clear exactly what you're trying to do, but you might look at scan() in particular if you want to save intermediate values.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Octave division of a binomial breaks plot\r\n                \r\nI am not sure if this is the correct stack exchange for this question. I normally use javascript and a canvas to graph an equation. I am trying out Octave. I am having trouble getting any function with the same variable on both sides of a division to render. Test equation:\n\n```\nx=0:1:512;\nVr=x/100;\nclf;\nplot((50*Vr.^2-200*Vr)/(Vr-3), 'k-', 'linewidth', 3.0);\naxis([0 512 -256 256]);\n```\n\n\nIt works just fine without the division:\n\n```\nplot((50*Vr.^2-200*Vr), 'k-', 'linewidth', 3.0);\n```\n\n\nScreenscrapes: https://i.stack.imgur.com/pWnWi.jpg\nThe third is the equation with the division rendered with javascript.\n\nDoes octave not support this rather basic arithmetic, or is there a syntax eccentricity that I'm missing?\n    ", "Answer": "\r\nAs much as I hate to be the guy who answers his own question, I found the answer in octave's docs.\n\nhttps://octave.org/doc/v4.2.1/Arithmetic-Ops.html\n\n'/' Multiplies the left by the inverse of the right. Seemed right, as the opposite of the (Vr/3) sounds like what I wanted, until I read on. './' is \"Element-by-element right division.\" So the plot function treats Vr as a matrix of all the coordinates and computes a matrix with one equation. That was not clear in any of the documentation I read. Seriously, this should have been in the top level help section.\n\nSo \"syntax eccentricity\" it is. The correct syntax for octave is:\n\n```\nplot((50*Vr.^2-200*Vr)./(Vr-3), 'k-', 'linewidth', 3.0)\n```\n\n\nThis works. I think I'll stick to JS though, if only to avoid needing to transform my equations to and from octave's weird syntax. Still, it's nice to have a non-browser-dependent option handy, however eccentric.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "pyparsing: nested expression with simple arithmetics\r\n                \r\nI am using pyparsing to parse a nested expression which is formed by delimited lists but which includes some basic arithmetic (just multiplication, for instance).\nA sample expression could look like this:\n\n```\n(A, B, 2 * C, 3 * ( D, E, 2 * F, 3 *(G, H)), I )\n```\n\n\nThe output should unfold the arithmetic:\n\n```\n( A, B, C, C, D, E, F, F, G, H, G, H, G, H, D, E, F, F, G, H, G, H, G, H, D, E, F, F, G, H, G, H, G, H, I )\n```\n\n\nCould somebody give me hint how to approach the problem?\n\nI started like follows: since there's just the operation multiplication, I decided to use the '*' character as a delimiter in a somewhat weird list:\n\n```\nimport pyparsing as pp\n\noddDelim = pp.Or([',', '*'])\nweirdList = pp.Optional(',').suppress() + \\\n            pp.delimitedList(pp.Or([pp.alphas, pp.pyparsing_common.number]), delim = oddDelim, combine = False) + \\\n            pp.Optional('*').suppress()\nnestedTest = pp.nestedExpr(content = weirdList)\n```\n\n\nUsing this nestedTest expression I get a reasonable result:\n\n```\n[['A', 'B', 2, 'C', 3, ['D', 'E', 2, 'F', 3, ['G', 'H']], 'I']]\n```\n\n\nbut I don't know how should I parse the tokens in order to properly unfold the arithmetics.\n\nInstead of iterating over the tokens sequentially in a FOR loop, I would ideally like to start unfolding the arithmetic from the highest degree of nesting and progressively going down. But I don't know how...\n\nIs nestedExpr the way to go? Or should I change the approach and use Forward or maybe infixNotation? I am very new into pyparsing I would be very grateful if I got some hints/ideas on this.\n\nThanks very much in advance for your help!\n\nCheers,\nPau\n    ", "Answer": "\r\nIf you want to use Forward() to roll our own recursive grammar, it is best to start \nwith writing a BNF for your grammar. This will help you think straight about the\nproblem space first, and then worry about the coding later.\n\nHere is a rough BNF for what you've posted:\n\n```\nlist_expr ::= '(' list_item [',' list_item]* ')'\nlist_item ::= term | mult_term | list_expr\nmult_term ::= integer '*' list_item\nterm      ::= A-Z\n```\n\n\nThat is, each list enclosed in parentheses has a comma-delimited list of \nitems, and each item can be a single character term, a multiplication expression \nof an integer, a '*' and an item, or a nested list in another set of parentheses.\n\nTo translate this to pyparsing, work bottom-up to define each expression. For \ninstance, define a term using the new Char class (which is a single-character\nfrom a string of allowed characters):\n\n```\nterm = pp.Char(\"ABCDEFGHI... etc.\")\n```\n\n\nYou'll need to use Forward for list_item, since it will need expressions that\naren't defined yet, so Forward() gives you a placeholder. Then when you have\nterm, mult_term, and list_expr defined, using '<<=' to \"insert\" the definition\ninto the existing placeholder, like this:\n\n```\nlist_item <<= term | mult_term | list_expr\n```\n\n\nSince you asked about infixNotation, I'll talk about that approach also.\nWhen using infixNotation, look at your input and identify what constitutes\ngrouping, operators, and operands.\n\nThe grouping here is easy, it is done using ()'s,\nwhich is pretty standard, and infixNotation will treat them as such by default.\n\nNext identify what the lowest-level\noperands are. You have two types of operands: integers and single alpha \ncharacters.\n\nThe two operators are '*' for multiplication, and ',' for addition.\n\nSince you only asked for suggestions, I'll stop there and let you tackle/struggle\nwith the next steps on your own.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "VBA Excel - Variable \"Double\" as function\r\n                \r\nI was given a VBA function that is working but I do not understand how it works and would appreciate your help because in the way it was written, the calculus is really long (basic arithmetic * 15 000 rows)\n\nMy problem comes from the definition of the Double variable Qty_Level which is defined as follow:\n\n```\nDim Qty_Level(30) As Double\n```\n\n\nI have never seen a variable defined like this, with a couple of parenthesis like a function. Here's my code:\n\n```\nSub cumul()\n\n    Dim i As Long\n    Dim j As Integer\n    Dim Qty_level(30) As Double\n    Dim Col_Niveau As Integer\n    Dim Col_Quantite As Integer\n    Dim Col_Resultat As Integer\n\n    i = InputBox(\"Veuillez indiquer le numéro de la première à analyser (numéro de     ligne Excel)\", \"Ligne de départ\")\n   Col_Niveau = InputBox(\"Veuillez indiquer le numéro de la colonne contenant les niveaux\", \"Niveaux\")\n   Col_Quantite = InputBox(\"Veuillez indiquer le numéro de la colonne contenant les quantités\", \"Quantités\")\n   Col_Resultat = InputBox(\"Veuillez indiquer le numéro de la colonne contenant les résultats\", \"Résultats\")\n\n   Do While IsEmpty(Cells(i, Col_Niveau)) = False\n\n   If IsNumeric(Cells(i, Col_Quantite)) = True Then\n\n        Qty_level(Cells(i, Col_Niveau).Value) = Cells(i, Col_Quantite).Value\n        Cells(i, Col_Resultat).Value = 1\n\n        For j = 1 To Cells(i, Col_Niveau).Value\n            Cells(i, Col_Resultat).Value = Cells(i, Col_Resultat).Value * Qty_level(j)\n        Next j\n\n    End If\n\n    i = i + 1\n\nLoop\n\n\nEnd Sub\n```\n\n\nI do not understand how this works, and particularly how the ```\nFor```\n loop works with the ```\nDouble(j)```\n\n    ", "Answer": "\r\nWhen you define an array with parentheses and a value inside them, it creates an array with that many elements contained within it. Dimensioning it with 30 as the max element value means that for a variable between 0 and 30 (since the array will start with 0 by default) you can store up to 31 values inside of the array. Dimensioning it as a double (according to MSDN) allows you to store the largest and smallest numbers available in Visual Basic.\n\nWhat the loop appears to do is pull the quantity value from the quantity column based off of the number in the levels column, and then multiply each stored quantity value so far, storing it into the results cell.\n\nSo if your quantities are 2, 4, 6, 5, when you are at level 3 your result cell should show 48, and level 4 should show 240. Looping from 1 to the levels value allows it to iterate through the entire amount of stored quantities in the double array, which just contains numbers. The levels column should only contain numbers between 1 and 30, otherwise it will draw an error from the qty_level array.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "What are examples of typical workloads where MRI outperforms JRuby?\r\n                \r\nI have a Ruby webservice of which I recently checked whether using JRuby (9.1.17.0, OpenJDK 1.8) would improve the performance relative to the current use of MRI (2.5.0). I expected that might be the case, because the performance bottleneck is the large amount of 'basic arithmetic' that is performed to calculate the response data and JRuby tends to outperform MRI on computation-heavy benchmarks.\n\nHowever, this turns out not to be the case: I've tried many combinations of JRuby/JVM options, but the 'steady state' is 2x slower than MRI. The steady state is achieved after repeating the request ~ 100 times, where the JVM is clearly doing its JIT magic, as the performance improves by a factor 2.5 relative to the initial request.\n\nI would like to understand whether this is expected or unexpected behavior. So I am wondering: what are typical workloads on which JRuby can be expected to be slower than MRI? And is 'basic arithmetic on floats' indeed among them?\n\n(The performance bottleneck is in the same place in MRI and JRuby, determined using appropriate profilers. Originally this post said JRuby was only 20% slower, but I've since introduced an optimization that improved MRI performance by a factor of almost 2, but hardly changed JRuby performance. I suspect the JVM performed the same optimization automatically as it basically amounted to 'constant folding')\n    ", "Answer": "\r\nIf you are doing computations on ```\nInteger```\ns, and the ```\nInteger```\ns fit into native_word_size - 1 bits, then YARV will use native machine arithmetic on ```\nFixnum```\ns. If you are doing computations on ```\nFloat```\ns, are on a 64 bit platform, and your computations fit into 62 bits, YARV will use native FPU arithmetic on flonums. In either case, it doesn't get much faster than that, unless your operations are so trivial that the JVM JIT (or the JRuby compiler) can optimize them away completely, constant fold them, or something similar.\n\nThe sweet spot is ```\nInteger```\ns that are larger than 63 bits but smaller than 64 bits, which are treated as native machine integers by JRuby but not YARV, the same for ```\nFloat```\ns larger than 62 but smaller than 64 bits. In this range, JRuby will use native operations but YARV won't, which gives JRuby a performance advantage.\n\nIn general, YARV outperforms JRuby on latency, particularly startup time. This depends a lot on the JVM used and on the environment, though. There are JVMs that are designed to start up very fast (e.g. IBM J9, which IMO should be the default desktop JVM instead of Oracle HotSpot) or Avian (which is not actually a JVM, as it only implements a subset of the JVM and JRE specs, but nevertheless can run many non-trivial programs that don't use any of the non-implemented features, JRuby being one of those.) Also, there are environments and configurations, that allow you to keep and re-use a JVM and a JRuby instance in memory, eliminating much of the start up time.\n\nThe second biggy are YARV C extensions. YARV has a very open and wide API for C extensions. Essentially, YARV C extensions can access pretty much every private internal implementation detail of YARV. (Which obviously means that they can corrupt and crash YARV.) JVM \"C extensions\" on the other hand, always need to go through a security barrier. They can only corrupt memory that has been explicitly handed to them by the Java code that calls them, they can never corrupt other memory, let alone the JVM itself. However, this comes at a performance cost: calling C from Java or vice versa is generally slower than calling C from YARV and vice versa.\n\nYARV C extensions are even slower than that, since JRuby essentially has to provide an entire complex emulation layer, emulating the internal data structures, functions, and memory layout of YARV in order to get at least some YARV C extensions to run. This is just slow. Period.\n\nNote that this does not apply to Ruby wrappers for C libraries that use the Ruby FFI API. Those don't rely on YARV internals and thus don't need an emulation layer, and JRuby has a quite fast and optimized implementation of the Ruby FFI API. The cost of JVM ↔ C bridging still applies, though.\n\nThese are the two big things where YARV is faster: code that runs too short to take advantage of the JVM's optimizations for long-running processes, and code that makes heavy use of calls to and from C, especially YARV C extensions.\n\nIf you can get your code to run on TruffleRuby, that would be an interesting experiment. The optimizations TruffleRuby can do are truly amazing (e.g. folding an entire Ruby library using significant amounts of dynamic metaprogramming, reflection, and ```\nHash```\n lookups into a single constant) and it can approach and even beat hand-optimized C. Also, TruffleRuby contains a C interpreter in addition to a Ruby interpreter, and thus can analyze and optimize Ruby code calling into C extensions and vice versa, and even perform cross-language inlining, which means that in some benchmarks, it can execute Ruby code making heavy use of YARV extensions faster than YARV!\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How do I combine multiple .csv files in R [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        How to combine multiple .csv files in R?\r\n                            \r\n                                (1 answer)\r\n                            \r\n                    \r\n                    \r\n                        Trying to merge multiple csv files in R\r\n                            \r\n                                (10 answers)\r\n                            \r\n                    \r\n                Closed 7 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI am new to R and have a folder containing ~300 .csv files. I am trying to merge all the data into one file so that I can carry out some basic arithmetic on it. I have tried searching the web however the function I have tried keep bringing me errors eg \n\n```\n master <- list.files(path = \"~/\")\nmaster <- do.call(\"rbind\", lapply(\"001.csv\" \"002.csv\", read.csv, header = TRUE))\n```\n\n\ngives back ```\nError: unexpected string constant in \"\"329.csv\" \"330.csv\"\"```\n\netc \n\nand the following \n\n```\nmaster <- do.call( rbind, lapply(`001.csv`,`002.csv` function(nam){ \n  cbind(name=nam, read.file(paste0(nam,\".csv\"), header=TRUE) )\n}))\n```\n\n\ngives ```\nError: unexpected '}' in \"}\"```\n\n\nWould anyone be able to help? If so could you please explain so that someone who is new to programming will be able to follow. \n\nThank you \n    ", "Answer": "\r\nHi I think your code almost worked, you forgot to put the file names in a vector. You could make a sequence of the file names with \n\n```\ndo.call(\"rbind\",lapply(c(\"001.csv\", \"001.csv\"), read.csv, header = T))\n```\n\n\nIf the files are all in the form \"001.csv\" you could use the following function that automates the names of the csv files, for example if we have 001.csv until 10.csv you could use:\n\n```\npollutantmean <- function(idrange) {\n  output <- c()\n  for(id in idrange){\n    if((id>=1) && (id<10)) {\n      output <- c(output, paste(\"00\",id,sep=\"\"))\n    } else if((id>=10) && (id<=99)) {\n      output <- c(output, paste(\"0\",id,sep=\"\"))\n    } else {\n      output <- c(output,id)\n    }}\n  output\n}\n\n\ndo.call(\"rbind\",lapply(paste0(pollutantmean(1:10),\".csv\"), read.csv, header = T))\n```\n\n\nCredits to Using colon to specify a sequence in function which I used to create the pollutantmean function.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "python3 performance: loop using range() Vs plain old while()\r\n                \r\nIn Python3, I find that if I replace a \n\n\n  for i in range(n):\n\n\nstatement with \n\n\n  while i < n:\n\n\nI get significant runtime gains. My loop itself is not meaty where it does couple of basic arithmetic operations.\n\nAny pointers to why I am seeing this behavior?\n\nEdit: n is ranging in 10s of K, 10K, 12K etc\nTiming I observe is .19s for 12K, .12s for 10K with while loop. Whereas with 'while' loop, i see .11s for 12K, .08s for 10K.\nHere is my program:\n\n\n```\ntarget = 0\ni = 1\n#for i in range(1, n+1):\nwhile i < n+1:\n    target += i * (2 ** (i - 1)) + (i * (i + 1))//2\n    i += 1\n\nreturn target % (10 ** 9 + 7)\n```\n\n\n    ", "Answer": "\r\n```\nrange```\n involves a small amount of fixed overhead (to look up ```\nrange```\n, first in the globals, then in the built-ins, then the cost of generic function call dispatch, and allocating/initializing the object); if ```\nn```\n is sufficiently small, it won't be made up on the reduced per loop cost:\n\n```\nIn [1]: %%timeit -r5 n = 3\n   ...: for i in range(n):\n   ...:     pass\n   ...:\n365 ns ± 15.1 ns per loop (mean ± std. dev. of 5 runs, 1000000 loops each)\n\nIn [2]: %%timeit -r5 n = 3\n   ...: i = 0\n   ...: while i < n:\n   ...:     i += 1\n   ...:\n252 ns ± 16.9 ns per loop (mean ± std. dev. of 5 runs, 1000000 loops each)\n```\n\n\nBut when ```\nn```\n gets to even moderate size, the reduced overhead per item pays off:\n\n```\nIn [3]: %%timeit -r5 n = 10\n   ...: for i in range(n):\n   ...:     pass\n   ...:\n461 ns ± 18.1 ns per loop (mean ± std. dev. of 5 runs, 1000000 loops each)\n\nIn [4]: %%timeit -r5 n = 10\n   ...: i = 0\n   ...: while i < n:\n   ...:     i += 1\n   ...:\n788 ns ± 73.6 ns per loop (mean ± std. dev. of 5 runs, 1000000 loops each)\n```\n\n\n```\nrange```\n involves higher fixed costs, but lower per-item costs, that's all.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How yo make a simple calculator in C which saves intermediate result\r\n                \r\nНi everybody!\nI'm solving a problem from the exercise section of S.Kochan's \"Programming in C\" book and actually got stuck at the problem, which suggests creating a simple calculator in C,which saves intermediate results in the so called \"accumulator\". So when you enter a value, and then pressing 'S' - the value is supposed to be saved and all further action should be executed with this value. When you press \"E'- the prigramm should be over, when you press any of the basic arithmetic sign appropriate action should be don etc. \nI'm using eternal for loop and switch-case operator, but something's wrong. The value is not displayed correctly< so as the arithmetic operations.\n\nHere's my code\n\n```\n#include <stdio.h>\n\nint main(void)\n{\n    float accumulator, value;\n    char operator;\n\n    printf(\"Calculator\\nType in your value:\\n\");\nfor(;;)\n{\n    scanf(\"%f %c %f\", &accumulator, &operator, &value);\n\n    switch(operator)\n    {\n        case 'S':\n        printf(\"=%.2f\\n\", accumulator);\n        break;\n        case 'E':\n        printf(\"=%.2f\\nEnd of programm\");\n        break;\n        case '+':\n        accumulator=accumulator+value;\n        printf(\"=%.2f\", accumulator);\n        break;\n        case '-':\n        accumulator=accumulator-value;\n        printf(\"=%.2f\", accumulator);\n        break;\n        case '*':\n        accumulator=accumulator*value;\n        printf(\"=%.2f\", accumulator);\n        break;\n        case '/':\n            if(value==0)\n                printf(\"You can not divide by zero\");\n            else\n                accumulator=accumulator/value;\n                printf(\"=%.2f\", accumulator);\n\n        break;\n        default:\n        printf(\"Unknown symbol\");\n    }\n}\nreturn 0;\n}\n```\n\n\nWhat am I doing wrong?\nP.S. Sorry for my bad English)\n    ", "Answer": "\r\nwhen you press  E ,to exit from the program use exit(0); instead of break\n\n```\n case 'E':\n        printf(\"End of programm\");\n        exit(0);    \n```\n\n\nAnd in your program you are using accumulator to store intermediate results , but you also taking this as input value in each iteration because of this you may lost the value of accumulator which holds the result of previous operation ,it would be better if you scan accumulator value before loop only once and then use the value of accumulator after each operation    \n\nfor this you need to modify like this\n\n```\nscanf(\"%f\", &accumulator );\nfor(;;)\n{\n    scanf(\" %c %f\",&operator, &value);\n...........\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Automatically derive Add, Mul, Ord, etc. for a numeric type [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Automatically implement traits of enclosed type for Rust newtypes (tuple structs with one field)\r\n                            \r\n                                (3 answers)\r\n                            \r\n                    \r\n                Closed 7 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nWhat's the simplest way to create a custom type that behaves like a number?\n\nI want type-checking that prevents mixing different units in my program, but I still want to be able to easily perform calculations on the type without casting back and forth (similar case to custom ```\nCentimeters```\n and ```\nInches```\n types).\n\nIf I create:\n\n```\nstruct Centimeters(f64);\n```\n\n\nthen I have to implement ```\nAdd```\n, ```\nMul```\n, ```\nOrd```\n and lots of other traits manually. That's a lot of boilerplate, and copy&pasting of this code creates a  risk of breaking basic arithmetic in the program :)\n\nUnfortunately ```\n#[derive(Add, Sub, …)]```\n doesn't seem to be supported. Is there another standard trait/type/crate that could achieve similar effect?\n    ", "Answer": "\r\nUnits of Measurement\nYou should have a look at https://crates.io/crates/measurements. That crate contains definitions for many units of measurement like centimeters, feet, etc.\nImplementing traits for your newtypes\nThere are now some crates that make it really easy to implement ```\nAdd```\n, ```\nMul```\n, etc. for your newtypes.\nderive_more\n```\n// This needs rust in the 2018 edition\nextern crate derive_more;\nuse derive_more::{Add, Mul};\n\n#[derive(Add, Mul)]\nstruct Centimeters(i32);\n```\n\nnewtype_derive\n```\ncustom_derive! {\n  #[derive(NewtypeAdd, NewtypeMul)]\n  pub struct Centimeters(i32);\n}\n```\n\nTraits with your own macro\nThis answer has a nice macro to help you implement traits for your newtypes.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Creating a javascript function that can check different kinds of arithmetic based on select menu options\r\n                \r\nI am creating a math game with javascript that asks the user to solve basic math problems based on their chosen select menu option. The user will enter their answer using an input field and when the enter key is pressed a function is called that checks wether or not the answer is correct.\nI am having trouble creating a function that can check the different kinds of arithmetic when the enter key is pressed. So far I have only managed to create a check function that can check a single kind of arithmetic.\nThe basics of the game are this:\n\nthe user selects wether to do addition, subtraction, multiplication, or division, then presses the \"start\" button and the first question is generated of their chosen operation\n\nwhen the enter key is pressed if the users input is correct, the score is incremented by 1, and a new question of the same kind of arithmetic is generated, if not they are asked to try again.\n\n\n\r\n\r\n```\nlet gameMenu = document.getElementById('game-menu');\nlet gameCard = document.getElementById('game-card');\nlet x = document.getElementById(\"num1\");\nlet y = document.getElementById(\"num2\");\nlet displayOperator = document.getElementById('display-operator');\nlet score = 0;\n\nlet answer = document.getElementById('user-answer');\nanswer.addEventListener('keyup', function(e) {\n  if (e.key === 'Enter') {\n    check();\n  }\n});\n\nfunction start() {\n  let opt = document.getElementById('opt');\n  let selOpt = opt.options[opt.selectedIndex].value;\n\n  if (selOpt == \"+\") {\n    doAddition();\n  }\n\n  if (selOpt == \"-\") {\n    doSubtraction();\n  }\n\n  if (selOpt == \"*\") {\n    doMultiplication();\n  }\n\n  if (selOpt == \"/\") {\n    doDivision();\n  }\n}\n\nfunction doAddition() {\n  displayOperator.innerHTML = \"&plus;\"\n  x.innerHTML = Math.floor(Math.random() * 5 + 1);\n  y.innerHTML = Math.floor(Math.random() * 5 + 1);\n}\n\nfunction doSubtraction() {\n  displayOperator.innerHTML = \"&minus;\"\n  x.innerHTML = Math.floor(Math.random() * 5 + 1);\n  y.innerHTML = Math.floor(Math.random() * 5 + 1);\n}\n\nfunction doMultiplication() {\n  displayOperator.innerHTML = \"&times;\"\n  x.innerHTML = Math.floor(Math.random() * 5 + 1);\n  y.innerHTML = Math.floor(Math.random() * 5 + 1);\n}\n\nfunction doDivision() {\n  displayOperator.innerHTML = \"&divide;\"\n  x.innerHTML = Math.floor(Math.random() * 5 + 1);\n  y.innerHTML = Math.floor(Math.random() * 5 + 1);\n}\n\nfunction check() {\n  let x = parseInt(document.getElementById(\"num1\").innerHTML);\n  let y = parseInt(document.getElementById(\"num2\").innerHTML);\n  let tryAgain = document.getElementById(\"try-again\");\n  let answer = parseInt(document.getElementById(\"user-answer\").value);\n  if (answer === x + y) {\n    score++;\n    document.getElementById(\"score\").innerHTML = score;\n  } else {\n    tryAgain.innerHTML = \"incorrect, try again\";\n    preventDefault();\n  }\n  document.getElementById(\"user-answer\").value = \"\";\n  doAddition();\n}```\n\r\n```\n#question {\n  display: flex;\n  flex-direction: row;\n}```\n\r\n```\n<!DOCTYPE html>\n\n<head>\n</head>\n\n<body>\n  <div id=\"game-menu\">\n    <p>game menu</p>\n    <select id=\"opt\">\n      <option value=\"+\">Addition</option>\n      <option value=\"-\">Subtraction</option>\n      <option value=\"*\">Multiplication</option>\n      <option value=\"/\">Division</option>\n    </select>\n    <button onclick=\"start()\">START</button>\n  </div>\n  <div id=\"game-card\">\n    <div id=\"question\">\n      <p id=\"num1\"></p>\n      <p id=\"display-operator\"></p>\n      <p id=\"num2\"></p>\n    </div>\n    <p id=\"try-again\"></p>\n    <input id=\"user-answer\">\n    <p id=\"score\">score</p>\n  </div>\n</body>```\n\r\n\r\n\r\n\nThis is the current code that I have.\nI have separate functions for each type of arithmetic and plan on modifying the ```\nMath.floor(Math.random()*5+1)```\n in the ```\ndoSubtraction()```\n and ```\ndoDivision()```\n functions to prevent negative answers and avoid division questions that aren't evenly divisible.\nThe problem I'm facing now is that I am not clear on how to make the ```\ncheck()```\n function account for what the user chose from the select menu. I've included (```\nanswer === x + y```\n) and ```\ndoAddition()```\n in the ```\ncheck()```\n function to show how it works, but I cant figure out how to make it check for the proper arithmetic based on the select menu that was chosen, and then call back to the same type of function that was chosen.\nI'm pretty new to javascript and appreciate the help and any constructive criticism too. Thanks.\n    ", "Answer": "\r\nGet the value of the dropdown the same way you do it in ```\nstart()```\n, then use similar ```\nif/else if```\n statements to check the result.\nAt the end of ```\ncheck()```\n call ```\nstart()```\n again to generate a new question using the same select option.\nYou need to clear ```\ntryAgain```\n when the user enters a correct answer.\n\r\n\r\n```\nlet gameMenu = document.getElementById('game-menu');\nlet gameCard = document.getElementById('game-card');\nlet x = document.getElementById(\"num1\");\nlet y = document.getElementById(\"num2\");\nlet displayOperator = document.getElementById('display-operator');\nlet score = 0;\n\nlet answer = document.getElementById('user-answer');\nanswer.addEventListener('keyup', function(e) {\n  if (e.key === 'Enter') {\n    check();\n  }\n});\n\nfunction start() {\n  let opt = document.getElementById('opt');\n  let selOpt = opt.options[opt.selectedIndex].value;\n\n  if (selOpt == \"+\") {\n    doAddition();\n  }\n\n  if (selOpt == \"-\") {\n    doSubtraction();\n  }\n\n  if (selOpt == \"*\") {\n    doMultiplication();\n  }\n\n  if (selOpt == \"/\") {\n    doDivision();\n  }\n}\n\nfunction doAddition() {\n  displayOperator.innerHTML = \"&plus;\"\n  x.innerHTML = Math.floor(Math.random() * 5 + 1);\n  y.innerHTML = Math.floor(Math.random() * 5 + 1);\n}\n\nfunction doSubtraction() {\n  displayOperator.innerHTML = \"&minus;\"\n  x.innerHTML = Math.floor(Math.random() * 5 + 1);\n  y.innerHTML = Math.floor(Math.random() * 5 + 1);\n}\n\nfunction doMultiplication() {\n  displayOperator.innerHTML = \"&times;\"\n  x.innerHTML = Math.floor(Math.random() * 5 + 1);\n  y.innerHTML = Math.floor(Math.random() * 5 + 1);\n}\n\nfunction doDivision() {\n  displayOperator.innerHTML = \"&divide;\"\n  x.innerHTML = Math.floor(Math.random() * 5 + 1);\n  y.innerHTML = Math.floor(Math.random() * 5 + 1);\n}\n\nfunction check() {\n  let x = parseInt(document.getElementById(\"num1\").innerHTML);\n  let y = parseInt(document.getElementById(\"num2\").innerHTML);\n  let tryAgain = document.getElementById(\"try-again\");\n  let answer = parseInt(document.getElementById(\"user-answer\").value);\n    let selOpt = document.getElementById('opt').value;\n    let correctAnswer;\n    switch (selOpt) {\n      case '+': correctAnswer = x + y; break;\n      case '-': correctAnswer = x - y; break;\n      case '*': correctAnswer = x * y; break;\n      case '/': correctAnswer = Math.floor(x / y); break;\n    }\n\n  if (answer === correctAnswer) {\n    score++;\n    document.getElementById(\"score\").innerHTML = score;\n    tryAgain.innerHTML = '';\n  } else {\n    tryAgain.innerHTML = \"incorrect, try again\";\n  }\n  document.getElementById(\"user-answer\").value = \"\";\n  start();\n}```\n\r\n```\n#question {\n  display: flex;\n  flex-direction: row;\n}```\n\r\n```\n<!DOCTYPE html>\n\n<head>\n</head>\n\n<body>\n  <div id=\"game-menu\">\n    <p>game menu</p>\n    <select id=\"opt\">\n      <option value=\"+\">Addition</option>\n      <option value=\"-\">Subtraction</option>\n      <option value=\"*\">Multiplication</option>\n      <option value=\"/\">Division</option>\n    </select>\n    <button onclick=\"start()\">START</button>\n  </div>\n  <div id=\"game-card\">\n    <div id=\"question\">\n      <p id=\"num1\"></p>\n      <p id=\"display-operator\"></p>\n      <p id=\"num2\"></p>\n    </div>\n    <p id=\"try-again\"></p>\n    <input id=\"user-answer\">\n    <p id=\"score\">score</p>\n  </div>\n</body>```\n\r\n\r\n\r\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Simple arithmetic using Preon framework\r\n                \r\nI'm using Preon Binding for reading a stream of incoming binary data. \n\nThe problem we are having is that certain field values require some simple arithmetic for their proper representation, as our \"data documentation\" says:\n\n\nfield lat: Latitude component from the device coordinate. In binary\nformat the latitude must be divided by 1.000.000\nfield direction: Bearing of the device in degrees divided by 3\n\n\nCan Preon support such arithmetic upon binding, or do I have to specifically do it after decoding (which renders the decoded DTO values non-consistent)?\n\nOther fields (latPositive and lngPositive) provide the math sign (either negative or positive) for their corresponding values (lat and lng fields), I think this could also be supported just by multiplying by -1 in the negative cases, but that would only be possible if some kind of arithmetic is actually supported by Preon.\n\nMapping basically as follows:\n\n```\n// ok\n@BoundString(size = \"1\")\nprivate String start;\n\n// ??\n@BoundNumber(size = \"8\")\nprivate short size;\n\n// ok\n@BoundNumber(size = \"8\")\nprivate short header;\n\n// ok\n@BoundNumber(size = \"56\", byteOrder = ByteOrder.BigEndian)\nprivate long imei;\n\n// ok\n@BoundNumber(size = \"8\")\nprivate short mask;\n\n// ok\n@BoundNumber(size = \"5\", byteOrder = ByteOrder.BigEndian)\nprivate short day;\n\n// ok\n@BoundNumber(size = \"4\", byteOrder = ByteOrder.BigEndian)\nprivate short month;\n\n// ok\n@BoundNumber(size = \"5\", byteOrder = ByteOrder.BigEndian)\nprivate short year;\n\n// ok\n@BoundNumber(size = \"5\", byteOrder = ByteOrder.BigEndian)\nprivate short hour;\n\n// ok\n@BoundNumber(size = \"6\", byteOrder = ByteOrder.BigEndian)\nprivate short minute;\n\n// ok\n@BoundNumber(size = \"6\", byteOrder = ByteOrder.BigEndian)\nprivate short second;\n\n@Bound\nprivate boolean latPositive;\n\n@BoundNumber(size = \"27\", byteOrder = ByteOrder.BigEndian)\nprivate int lat;\n\n@Bound\nprivate boolean lngPositive;\n\n@BoundNumber(size = \"28\", byteOrder = ByteOrder.BigEndian)\nprivate int lng;\n\n// ok\n@BoundNumber(size = \"8\", byteOrder = ByteOrder.BigEndian)\nprivate int speed;\n\n@BoundNumber(size = \"7\", byteOrder = ByteOrder.BigEndian)\nprivate int direction;\n\n// ok\n@Bound\nprivate boolean gpsFix;\n\n// ok\n@BoundNumber(size = \"13\", byteOrder = ByteOrder.BigEndian)\nprivate int altitude;\n\n// ok\n@BoundNumber(size = \"20\", byteOrder = ByteOrder.BigEndian)\nprivate int odometer;\n\n// ok\n@BoundNumber(size = \"8\", byteOrder = ByteOrder.BigEndian)\nprivate int batteryLevel;\n```\n\n\nPS: Is there a Preon users mailing list available?\n    ", "Answer": "\r\nThis might be too late, but I've been digging into preon lately, so there seem to be two possibilities I've seen in preon:\n\na) Use the @Init annotation to specify the transformations to be done in code, e.g.\n\n```\npublic static class Blah {\n    @BoundNumber(size=\"32\", byteOrder = ByteOrder.BigEndian)\n    private int size;\n\n    @Init\n    public void go() {\n        size = size * 3;\n    }\n}\n```\n\n\nb) Create a CodecDecorator (I would copy something like InitCodecDecorator to start) that understands how to perform arithmetic, add the right annotations and add it to the decoder like so: http://technofovea.com/blog/archives/850\n\nOr simply add getters and setters that understand the binary contract;\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Octave division of a binomial breaks plot\r\n                \r\nI am not sure if this is the correct stack exchange for this question. I normally use javascript and a canvas to graph an equation. I am trying out Octave. I am having trouble getting any function with the same variable on both sides of a division to render. Test equation:\n\n```\nx=0:1:512;\nVr=x/100;\nclf;\nplot((50*Vr.^2-200*Vr)/(Vr-3), 'k-', 'linewidth', 3.0);\naxis([0 512 -256 256]);\n```\n\n\nIt works just fine without the division:\n\n```\nplot((50*Vr.^2-200*Vr), 'k-', 'linewidth', 3.0);\n```\n\n\nScreenscrapes: https://i.stack.imgur.com/pWnWi.jpg\nThe third is the equation with the division rendered with javascript.\n\nDoes octave not support this rather basic arithmetic, or is there a syntax eccentricity that I'm missing?\n    ", "Answer": "\r\nAs much as I hate to be the guy who answers his own question, I found the answer in octave's docs.\n\nhttps://octave.org/doc/v4.2.1/Arithmetic-Ops.html\n\n'/' Multiplies the left by the inverse of the right. Seemed right, as the opposite of the (Vr/3) sounds like what I wanted, until I read on. './' is \"Element-by-element right division.\" So the plot function treats Vr as a matrix of all the coordinates and computes a matrix with one equation. That was not clear in any of the documentation I read. Seriously, this should have been in the top level help section.\n\nSo \"syntax eccentricity\" it is. The correct syntax for octave is:\n\n```\nplot((50*Vr.^2-200*Vr)./(Vr-3), 'k-', 'linewidth', 3.0)\n```\n\n\nThis works. I think I'll stick to JS though, if only to avoid needing to transform my equations to and from octave's weird syntax. Still, it's nice to have a non-browser-dependent option handy, however eccentric.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "newbie Linux Shell \"for loop\" tower arithmetic\r\n                \r\nI am trying to write a basic code for (tower arithmetic), atleast thats what its called in my language.\nI am new, so I need some help\nIm gonna explain how it works:\nyou have to input 2 numbers number1, number2\nthose have to multiply result=(number1 * number2)\nthe result has to be multiplied with number2 again and +1 on number2 number1=(result * (number2+1))\nthis has to loop for 5 times\nI hope you understand what I mean and someone can help me\n    ", "Answer": "\r\n```\n#!/usr/bin/env bash\n\nset -e # stops execution on first error\nset -x # adds tracing of execution steps\n\nread -p \"Number 1: \" number1\nread -p \"Number 2: \" number2\n\nresult=$((number1 * number2))\n\nfor i in $(seq 1 5)\ndo\n    result=$((result * $((number2 + i))))\ndone\n\necho \"Result: $result\"\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Addition going wrong in Python\r\n                \r\nI am a beginner at python and am writing a basic calculator \n\n```\nwhile True:\n    print(\"PyCalc\")\n    print()\n    print()\n    init=input(\"Press 1 for Basic arithmetic\")\n    if init==\"1\":\n        input1=input(\"Basic Arithmetic...Only +,-,*,/ accepted...\")\n        input2=re.findall(r'\\d+|\\+|\\-|\\*|\\/',input1 )\n        ans =basiccalc(input2)\n        print(ans )\n```\n\n\nThe method basiccalc:\n\n```\ndef basiccalc(givenlist):\n    ans=int(givenlist[0])\n    for pt in givenlist:\n        if str(pt).isdigit():\n            continue\n        elif pt=='+':\n            pos=givenlist.index(pt)\n            ans=ans+int(givenlist[pos+1])\n\nreturn ans\n```\n\n\nwhen I run the program...adding 2 numbers works correctly.\n\n```\n  PyCalc\n\n\n  Press 1 for Basic arithmetic1\n  Basic Arithmetic...Only +,-,*,/ accepted...2+3\n  5\n```\n\n\nbut when I enter more than 2 numbers...it gives me a wrong answer\n\n```\nPyCalc\n\n\nPress 1 for Basic arithmetic1\nBasic Arithmetic...Only +,-,*,/ accepted...2+4+5+6\n14\n```\n\n\nwhy do I get such an answer?\n    ", "Answer": "\r\nFirst problem you must use raw_input function instead of input, because input already compute arithmetique operation on input.\n\nSecond problem is in your basiccalc function for more than 2 number the last one was not calculate, try that:\n\n```\nimport re\n\ndef sum(a,b):\n    return a+b\n\n\ndef basiccalc(givenlist):\n    ans=0\n    op=sum\n    for pt in givenlist:\n        if str(pt).isdigit():\n            ans = op(ans,int(pt))\n            last = int(pt)\n        elif pt=='+':\n            op=sum\n    return ans            \n\ninput1=raw_input(\"Basic Arithmetic...Only +,-,*,/ accepted...\")\ninput2 = re.findall( r'\\d+|\\+|\\-|\\*|\\/', input1 )\nans = basiccalc(input2)\nprint(ans)\n```\n\n\nFor more information about parsing look at Dragon Book code example :\nhttps://github.com/lu1s/dragon-book-source-code/blob/master/parser/Parser.java\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to parse multiple expressions when using the rply library\r\n                \r\nI created a parser using the rply library for python and can currently perform basic arithmetic. The problem is that I cannot parse more than one line when reading from a file. \nSay I have:\n5 + 4 on a single line. \n\nThat parses with no errors. But if I have something like the following over two lines.\n\n5 + 4 \n\n7 * 3\n\nI get this error: rply.errors.ParsingError. \n\nI have set my lexer to ignore newlines and spaces:\n\n```\nlg.ignore('\\n')\nlg.ignore('\\s+')\n```\n\n\nAnd these are my productions:\n\n```\n@pg.production('main : expression')\ndef main(p):\n    return p[0]\n\n@pg.production(’expression : NUMBER’)\ndef expression_number(p):\n    return Number(int(p[0].getstr()))\n\n@pg.production(’expression : expression PLUS expression’)\ndef expression_binop(p):\nleft = p[0]\nright = p[2]\nif p[1].gettokentype() == ’AND’:\n    return Add(left, right)\n```\n\n\nAny help would be greatly appreciated! Thanks!\n    ", "Answer": "\r\nThis will work, you had no multiplication setup:\n\n```\nfrom rply import ParserGenerator, LexerGenerator\nfrom rply.token import BaseBox\n\nlg = LexerGenerator()\n# Add takes a rule name, and a regular expression that defines the rule.\nlg.add(\"PLUS\", r\"\\+\")\nlg.add(\"MINUS\", r\"-\")\nlg.add(\"NUMBER\", r\"\\d+\")\nlg.add('MUL', r'\\*') # added MUL here\n\nlg.ignore(r\"\\s+\")\n\n# This is a list of the token names. precedence is an optional list of\n# tuples which specifies order of operation for avoiding ambiguity.\n# precedence must be one of \"left\", \"right\", \"nonassoc\".\n# cache_id is an optional string which specifies an ID to use for\n# caching. It should *always* be safe to use caching,\n# RPly will automatically detect when your grammar is\n# changed and refresh the cache for you.\npg = ParserGenerator([\"NUMBER\", \"PLUS\", \"MINUS\",'MUL'], # added MUL here\n        precedence=[(\"left\", ['PLUS', 'MINUS'])], cache_id=\"myparser\")\n\n@pg.production(\"main : expr\")\ndef main(p):\n    # p is a list, of each of the pieces on the right hand side of the\n    # grammar rule\n    return p[0]\n@pg.production(\"expr : expr MUL expr\") # added MUL here\n@pg.production(\"expr : expr PLUS expr\")\n@pg.production(\"expr : expr MINUS expr\")\ndef expr_op(p):\n    lhs = p[0].getint()\n    rhs = p[2].getint()\n    if p[1].gettokentype() == \"PLUS\":\n        return BoxInt(lhs + rhs)\n    elif p[1].gettokentype() == \"MINUS\":\n        return BoxInt(lhs - rhs)\n    elif p[1].gettokentype() == 'MUL': # added Mul here\n        return BoxInt(lhs * rhs)\n    else:\n        raise AssertionError(\"This is impossible, abort the time machine!\")\n\n@pg.production(\"expr : NUMBER\")\ndef expr_num(p):\n    return BoxInt(int(p[0].getstr()))\n\nlexer = lg.build()\nparser = pg.build()\n\nclass BoxInt(BaseBox):\n    def __init__(self, value):\n        self.value = value\n\n    def getint(self):\n        return self.value\nwith open(\"hello.txt\") as f:\n    for line in f:\n        if line.strip():\n            print parser.parse(lexer.lex(line)).value\n21\n9\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Mathematical (Arithmetic) representation of XOR\r\n                \r\nI have spent the last 5 hours searching for an answer. Even though I have found many answers they have not helped in any way.\n\nWhat I am basically looking for is a mathematical, arithmetic only representation of the bitwise XOR operator for any 32bit unsigned integers.\n\nEven though this sounds really simple, nobody (at least it seems so) has managed to find an answer to this question.\n\nI hope we can brainstorm, and find a solution together.\n\nThanks.\n    ", "Answer": "\r\nXOR any numerical input between 0 and 1 including both ends\n```\na + b - ab(1 + a + b - ab)```\n\nXOR binary input\n```\na + b - 2ab```\n or ```\n(a-b)²```\n\n\nDerivation\nBasic Logical Operators\n```\nNOT```\n = ```\n(1-x)```\n\n```\nAND```\n = ```\nx*y```\n\nFrom those operators we can get...\n```\nOR```\n = ```\n(1-(1-a)(1-b))```\n = ```\na + b - ab```\n\nNote: If a and b are mutually exclusive then their ```\nand```\n condition will always be zero - from a Venn diagram perspective, this means there is no overlap. In that case, we could write ```\nOR```\n = ```\na + b```\n, since ```\na*b = 0```\n for all values of a & b.\n\n2-Factor XOR\nDefining XOR as ```\n(a OR B) AND (NOT (a AND b))```\n:\n```\n(a OR B)```\n --> ```\n(a + b - ab)```\n\n```\n(NOT (a AND b))```\n --> ```\n(1 - ab)```\n\n```\nAND```\n these conditions together to get...\n```\n(a + b - ab)(1 - ab)```\n = ```\na + b - ab(1 + a + b - ab)```\n\n\nComputational Alternatives\nIf the input values are binary, then powers terms can be ignored to arrive at simplified computationally equivalent forms.\n```\na + b - ab(1 + a + b - ab)```\n = ```\na + b - ab - a²b - ab² + a²b²```\n\nIf x is binary (either 1 or 0), then we can disregard powers since ```\n1² = 1```\n and ```\n0² = 0```\n...\n```\na + b - ab - a²b - ab² + a²b²```\n -- remove powers --> ```\na + b - 2ab```\n\n```\nXOR```\n (binary) = ```\na + b - 2ab```\n\nBinary also allows other equations to be computationally equivalent to the one above. For instance...\nGiven ```\n(a-b)²```\n = ```\na² + b² - 2ab```\n\nIf input is binary we can ignore powers, so...\n```\na² + b² - 2ab```\n -- remove powers --> ```\na + b - 2ab```\n\nAllowing us to write...\n```\nXOR```\n (binary) = ```\n(a-b)²```\n\n\nMulti-Factor XOR\n```\nXOR```\n = ```\n(1 - A*B*C...)(1 - (1-A)(1-B)(1-C)...)```\n\nExcel VBA example...\n\n```\nFunction ArithmeticXOR(R As Range, Optional EvaluateEquation = True)\n\nDim AndOfNots As String\nDim AndGate As String\nFor Each c In R\n    AndOfNots = AndOfNots & \"*(1-\" & c.Address & \")\"\n    AndGate = AndGate & \"*\" & c.Address\nNext\nAndOfNots = Mid(AndOfNots, 2)\nAndGate = Mid(AndGate, 2)\n\n'Now all we want is (Not(AndGate) AND Not(AndOfNots))\nArithmeticXOR = \"(1 - \" & AndOfNots & \")*(1 - \" & AndGate & \")\"\nIf EvaluateEquation Then\n    ArithmeticXOR = Application.Evaluate(xor2)\nEnd If\n\nEnd Function\n```\n\n\nAny n of k\nThese same methods can be extended to allow for any n number out of k conditions to qualify as true.\nFor instance, out of three variables a, b, and c, if you're willing to accept any two conditions, then you want a&b or a&c or b&c. This can be arithmetically modeled from the composite logic...\n```\n(a && b) || (a && c) || (b && c) ...```\n\nand applying our translations...\n1 - (1-ab)(1-ac)(1-bc)...\nThis can be extended to any n number out of k conditions. There is a pattern of variable and exponent combinations, but this gets very long; however, you can simplify by ignoring powers for a binary context. The exact pattern is dependent on how n relates to k. For n = k-1, where k is the total number of conditions being tested, the result is as follows:\nc1 + c2 + c3 ... ck - n*∏\nWhere c1 through ck are all n-variable combinations.\nFor instance, true if 3 of 4 conditions met would be\nabc + abe + ace + bce - 3abce\nThis makes perfect logical sense since what we have is the additive ```\nOR```\n of ```\nAND```\n conditions minus the overlapping ```\nAND```\n condition.\nIf you begin looking at n = k-2, k-3, etc. The pattern becomes more complicated because we have more overlaps to subtract out. If this is fully extended to the smallest value of n = 1, then we arrive at nothing more than a regular ```\nOR```\n condition.\n\nThinking about Non-Binary Values and Fuzzy Region\nThe actual algebraic XOR equation ```\na + b - ab(1 + a + b - ab)```\n is much more complicated than the computationally equivalent binary equations like ```\nx + y - 2xy```\n and ```\n(x-y)²```\n. Does this mean anything, and is there any value to this added complexity?\nObviously, for this to matter, you'd have to care about the decimal values outside of the discrete points (0,0), (0,1), (1,0), and (1,1). Why would this ever matter? Sometimes you want to relax the integer constraint for a discrete problem. In that case, you have to look at the premises used to convert logical operators to equations.\nWhen it comes to translating Boolean logic into arithmetic, your basic building blocks are the ```\nAND```\n and ```\nNOT```\n operators, with which you can build both ```\nOR```\n and ```\nXOR```\n.\n```\nOR```\n = ```\n(1-(1-a)(1-b)(1-c)...)```\n\n```\nXOR```\n = ```\n(1 - a*b*c...)(1 - (1-a)(1-b)(1-c)...)```\n\nSo if you're thinking about the decimal region, then it's worth thinking about how we defined these operators and how they behave in that region.\nNon-Binary Meaning of ```\nNOT```\n\nWe expressed ```\nNOT```\n as ```\n1-x```\n. Obviously, this simple equation works for binary values of 0 and 1, but the thing that's really cool about it is that it also provides the fractional or percent-wise compliment for values between 0 to 1. This is useful since ```\nNOT```\n is also known as the ```\nCompliment```\n in Boolean logic, and when it comes to sets, ```\nNOT```\n refers to everything outside of the current set.\nNon-Binary Meaning of ```\nAND```\n\nWe expressed ```\nAND```\n as ```\nx*y```\n. Once again, obviously it works for 0 and 1, but its effect is a little more arbitrary for values between 0 to 1 where multiplication results in partial truths (decimal values) diminishing each other. It's possible to imagine that you would want to model truth as being averaged or accumulative in this region. For instance, if two conditions are hypothetically half true, is the ```\nAND```\n condition only a quarter true (0.5 * 0.5), or is it entirely true (0.5 + 0.5 = 1), or does it remain half true ((0.5 + 0.5) / 2)? As it turns out, the quarter truth is actually true for conditions that are entirely discrete and the partial truth represents probability. For instance, will you flip tails (binary condition, 50% probability) both now AND again a second time? Answer is 0.5 * 0.5 = 0.25, or 25% true. Accumulation doesn't really make sense because it's basically modeling an ```\nOR```\n condition (remember ```\nOR```\n can be modeled by ```\n+```\n when the ```\nAND```\n condition is not present, so summation is characteristically ```\nOR```\n). The average makes sense if you're looking at agreement and measurements, but it's really modeling a hybrid of ```\nAND```\n and ```\nOR```\n. For instance, ask 2 people to say on a scale of 1 to 10 how much do they agree with the statement \"It is cold outside\"? If they both say 5, then the truth of the statement \"It is cold outside\" is 50%.\nNon-Binary Values in Summary\nThe take away from this look at non-binary values is that we can capture actual logic in our choice of operators and construct equations from the ground up, but we have to keep in mind numerical behavior. We are used to thinking about logic as discrete (binary) and computer processing as discrete, but non-binary logic is becoming more and more common and can help make problems that are difficult with discrete logic easier/possible to solve. You'll need to give thought to how values interact in this region and how to translate them into something meaningful.\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "What is the best way to apply an arithmetic expression to 2 binary numbers provided by the user in C?\r\n                \r\nI am writing a program that accepts 2 binary numbers from the user. Then the user selects a arithmetic expression (+ - / * %) to apply to the numbers. I have the general input code but am at a loss as to where to go next. I'm fairly new to the C language. Here is what I have so far.\n\n```\n#include <stdio.h>\n\nint main(){\n\nint number1, number2;\nchar expression;\n\n//Basic instructions at the beginning of the program\nprintf(\"This is a program to execute arithmetic in binary.\\n\");\nprintf(\"The program will ask you for input in the form of two binary numbers separated byan arithmetic expression (+ - / * %).\\n\");\nprintf(\"The binary numbers must be only 1's and 0's and a maximum of seven digits.\\n\");\nprintf(\"You may exit the program by typing 'exit'.\\n\");\n\n//Obviously an incomplete do statement, need a loop\ndo  {\n//Getting input from the user\n    printf(\"\\nEnter first binary number: \");\n    scanf(\"%d\", &number1);\n    printf(\"Enter second number: \");\n    scanf(\"%d\", &number2);\n    printf(\"Which expression would you like (+ - / * %): \");\n    scanf(\"%c\", &expression);   \n    }\n\n}\n```\n\n    ", "Answer": "\r\nSince ```\nexpression```\n is a ```\nchar```\n(and not ```\nchar[]```\n), you can use ```\nswitch```\n-```\ncase```\n:\n\n```\nint result;\nswitch(expression){\n    case '+':\n        result=number1+number2;\n        break;\n    case '-':\n        result=number1-number2;\n        break;\n    case '*':\n        result=number1*number2;\n        break;\n    case '/':\n        result=number1/number2;\n        break;\n}\n```\n\n\nYou might also want to add a ```\ndefault```\n, in case the user entered an invalid operator.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Differentiate between mathematical user input and all else [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 10 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nHow can I use machine-learning or some other technique to differentiate between what is mathematical user input and what is not mathematical user input in PHP?\n\nBy mathematical user input, I mean a mathematical statement that can be computed / solved.\n\nSo, I built a calculator that can handle basic arithmetic in PHP.\nBefore, I pass the user input I want to check if it is a mathematical statement that can be computed. And if it is not then ```\necho \"can not be computed\";```\n\n\nSo in pseudo code / semi-code:\n\n```\nfunction isComputable($input){\n    /* code I need help with here */\n}\n$userInput = $_GET['input'];\nif(isComputable($userInput){\n    compute($userInput);\n}\nelse{\n    echo \"can not be computed\";\n}\n```\n\n\nWhat is the best way to do this in PHP?\n    ", "Answer": "\r\nShunting-yard algorithm is a nice one to solve this problem. You can find many implementations of Shunting-yard algorithm in PHP online. It only takes a stack and a queue data structure to check whether an expression is correct or not.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How do arithmetic operators work in python?\r\n                \r\nI am wondering how the \"+\" operator works in python, or indeed how any of the basic arithmetic operators work. My knowledge is very limited with regards to this topic, so I hope this isn't a repeat of a question already here.\n\nMore specifically, I would like to know how this code:\n\n```\na = 5\nb = 2\nc = a + b\nprint (c)\n```\n\n\nproduces the result of c = 7 when ran. How does the computer perform this operation? I found a thread on Reddit explaining how the computer performs the calculation in binary (https://www.reddit.com/r/askscience/comments/1oqxfr/how_do_computers_do_math/) which I can understand. What I fail to comprehend however is how the computer knows how to convert the values of 5 and 2 into binary and then perform the calculation. Is there a set formula for doing this for all integers or base 10 numbers? Or is there something else happening at a deeper hardware level here?\n\nAgain I'm sorry if this a repeat or if the question seems completely silly, I just can't seem to understand how python can take any two numbers and then sum them, add them, divide them or multiply them. Cheers.\n    ", "Answer": "\r\nThe numbers are always in binary. The computer just isn't capable of keeping then in a different numerical system (well, there are ternary computers but these are a rare exception). The decimal system is just used for a \"human representation\", so that it is easier to read, but all the symbols (including the symbol ```\n\"5\"```\n in the file, it's just a character) are mapped to numbers through some encoding (e. g. ASCII). These numbers are, of course in binary, just the computer knows (through the specification of the encoding) that if there is a ```\n1000001```\n in a context of some string of characters, it has to display the symbol ```\na```\n (in the case of ASCII). That's it, the computer don't know the number 58, for it, these are just two symbols and are kept in the memory as ones and zeros.\n\nNow, memory. This is where it's getting interesting. All the instructions and the data are kept in one place as a large buffer of ones and zeros. These are passed to the CPU which (using its instruction set) knows what the first chunk of ones and zeros (this is what we call a \"word\") means. The first word is an instruction, then the argument(s) follow. Depending on the instruction different things happen. Ok, what happens if the instruction means \"add these two numbers\" and store the result here?\n\nWell, now it's a hardware job. Adding binary numbers isn't that complicated, it's explained in the link you provided. But how the CPU knows that this is the algorithm and how to execute it? Well, it uses a bunch of \"full-adders\". What is a \"full-adder\"? This is a hardware circuit that by given two inputs (each one of them is one bit, i. e. either one or zero) \"adds\" them and outputs the result to two other bits (one of which it uses for carry). But how the full-adder works? Well, it is constructed (physically) by half-adders, which are constructed by standard ```\nand```\n and ```\nxor```\n gates. If you're familiar with similar operators (```\n&```\n and ```\n^```\n in Python) you probably know how they work. These gates are designed to work as expected using the physical properties of the elements (the most important of them being silicon) used in the electronic components. And I think this is where I'll stop. \n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "frozen numeric arrays, dataclasses, numba\r\n                \r\nI am trying to improve quality of an existing scientific code by declaring classes as dataclasses, declaring them as ```\nfrozen=True```\n as much as possible. One of the intents is to use numba's JIT for acceleration at a few places.\nThe code is currently using tuples for storing small constant numeric arrays (think of constant 3d coordinate), but tuples don't declare their size, can't be easily consumed by numba and don't support basic arithmetics. Numpy arrays, on the other hand, are dynamically-sized and modifiable, not lending themselves to frozen dataclasses easily.\nI am looking for suitable class for fixed-size frozen numeric array which supports basic arithmetics and could be used with numba's JIT (with ```\nnopython=True```\n) without further conversions. Any tips?\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Regex: Using Regex to only allow simple arithmetic\r\n                \r\nSo, I have a validator and a ```\nstring.replace()```\n to protect my basic ```\ntextarea```\n input.\n\nMy validator looks like this:\n\n```\nValidators.pattern('-?[0-9]+([-+*/]?-?[0-9])*')\n```\n\n\nEssentially, I want to allow all simple arithmetic.\n\nExamples: \n\n```\n2*2-2\n2*2--2\n-2**2--2\n```\n\n\nI don't want to allow multiple symbols beyond * or + like *** or +++\n\nExamples of what should be allowed for the validator:\n\n```\n+\n+- (addition of a negative)\n-\n-- (evaluated as +)\n/\n*\n**\n```\n\n\nEverything outside of ```\ninteger (valid expression) integer (valid expression) integer etc.```\n should be replaced with \"\". (just as an added precaution incase the validator fails):\n\n```\n+++ => +\n--- => -\n*** => **\n/// => /\n+-  => -\n*/  => // (not sure what to do with this)\n```\n\n\nI have something like this, but it needs tweaking to be a whitelist:\n\n```\nunsafeCalculation.replace(/-?[0-9]+([-+*/]{1,2}?-?[0-9])*/, '');\n```\n\n\nExample:\n\n```\n2**2--2---2+++2///2 => 2**2+2-2+2/2 \n```\n\n\nLet me know what you think would be the best ```\nreplace```\n regex.\n    ", "Answer": "\r\nAs mentioned in the comments, what you're describing is very close to (if not quite exactly) parsing. RegEx is terrible for parsing. For a good parsing tutorial, look here: http://lisperator.net/pltut/parser/\n\nThat said, this is simple enough that you could get away using RegEx. Instead of trying to create an end-all-be-all regex, you can replace multiple times on the same string. This makes it clearer to read and write.\n\ne.g.\n\n```\nunsafeCalculation\n  .replace(/[+]{2,}/g, '+')\n  .replace(/[-]{2,}/g, '-')\n  // etc,.\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Regex: Using Regex to only allow simple arithmetic\r\n                \r\nSo, I have a validator and a ```\nstring.replace()```\n to protect my basic ```\ntextarea```\n input.\n\nMy validator looks like this:\n\n```\nValidators.pattern('-?[0-9]+([-+*/]?-?[0-9])*')\n```\n\n\nEssentially, I want to allow all simple arithmetic.\n\nExamples: \n\n```\n2*2-2\n2*2--2\n-2**2--2\n```\n\n\nI don't want to allow multiple symbols beyond * or + like *** or +++\n\nExamples of what should be allowed for the validator:\n\n```\n+\n+- (addition of a negative)\n-\n-- (evaluated as +)\n/\n*\n**\n```\n\n\nEverything outside of ```\ninteger (valid expression) integer (valid expression) integer etc.```\n should be replaced with \"\". (just as an added precaution incase the validator fails):\n\n```\n+++ => +\n--- => -\n*** => **\n/// => /\n+-  => -\n*/  => // (not sure what to do with this)\n```\n\n\nI have something like this, but it needs tweaking to be a whitelist:\n\n```\nunsafeCalculation.replace(/-?[0-9]+([-+*/]{1,2}?-?[0-9])*/, '');\n```\n\n\nExample:\n\n```\n2**2--2---2+++2///2 => 2**2+2-2+2/2 \n```\n\n\nLet me know what you think would be the best ```\nreplace```\n regex.\n    ", "Answer": "\r\nAs mentioned in the comments, what you're describing is very close to (if not quite exactly) parsing. RegEx is terrible for parsing. For a good parsing tutorial, look here: http://lisperator.net/pltut/parser/\n\nThat said, this is simple enough that you could get away using RegEx. Instead of trying to create an end-all-be-all regex, you can replace multiple times on the same string. This makes it clearer to read and write.\n\ne.g.\n\n```\nunsafeCalculation\n  .replace(/[+]{2,}/g, '+')\n  .replace(/[-]{2,}/g, '-')\n  // etc,.\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "CPU bound web apps with servlet 3.1 performance\r\n                \r\nWe are developing a spring boot 1.5.x webapp with some complex calculations (basic arithmetic stuff, but lots of it). The app has no I/O. Each request takes about 100-200ms.  \n\nWe are expecting relatively high load for that app. I was wondering if using servlet 3.1 (something like reactive spring, vert.x etc.) might improve throughput.\n\nNearly all of the resources I've checked says that servlet 3.1 is good for improving throughput for I/O bound apps but I couldn't find any benchmarks for CPU bound apps. \n    ", "Answer": "\r\nYou're already using Servlet 3.1 if you're using Spring Boot (Servlet 3.1 spec came out in 2013). Since you don't even know what you're using currently, I'd suggest you don't try to guess things to do.\n\nDo load testing and profile your application and see what the performance bottlenecks are. Only then you can start deciding on what can and needs to be done.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Large numpy matrix memory issues\r\n                \r\nI have two questions, but the first takes precedence.\n\nI was doing some timeit testing of some basic numpy operations that will be relevant to me.\n\nI did the following\n\n```\nn = 5000\nj = defaultdict()\nfor i in xrange(n):\n    print i\n    j[i] = np.eye(n)\n```\n\n\nWhat happened is, python's memory use almost immediately shot up to 6gigs, which is over 90% of my memory.  However, numbers printed off at a steady pace, about 10-20 per second.  While numbers printed off, memory use sporadically bounced down to ~4 gigs, and back up to 5, back down to 4, up to 6, down to 4.5, etc etc.\nAt 1350 iterations I had a segmentation fault.\n\nSo my question is, what was actually occurring during this time?  Are these matrices actually created one at a time?  Why is memory use spiking up and down?\n\nMy second question is, I may actually need to do something like this in a program I am working on.  I will be doing basic arithmetic and comparisons between many large matrices, in a loop.  These matrices will sometimes, but rarely, be dense.  They will often be sparse.\n\nIf I actually need 5000 5000x5000 matrices, is that feasible with 6 gigs of memory?  I don't know what can be done with all the tools and tricks available...  Maybe I would just have to store some of them on disk and pull them out in chunks?  \n\nAny advice for if I have to loop through many matrices and do basic arithmetic between them?\n\nThank you. \n    ", "Answer": "\r\n\n  If I actually need 5000 5000x5000 matrices, is that feasible with 6 gigs of memory?\n\n\nIf they're dense matrices, and you need them all at the same time, not by a long shot. Consider:\n\n```\n5K * 5K = 25M cells\n25M * 8B = 200MB (assuming float64)\n5K * 200MB = 1TB\n```\n\n\n\n\nThe matrices are being created one at a time. As you get near 6GB, what happens depends on your platform. It might start swapping to disk, slowing your system to a crawl. There might be a fixed-size or max-size swap, so eventually it runs out of memory anyway. It may make assumptions about how you're going to use the memory, guessing that there will always be room to fit your actual working set at any given moment into memory, only to segfault when it discovers it can't. But the one thing it isn't going to do is just work efficiently.\n\n\n\nYou say that most of your matrices are sparse. In that case, use one of the sparse matrix representations. If you know which of the 5000 will be dense, you can mix and match dense and sparse matrices, but if not, just use the same sparse matrix type for everything. If this means your occasional dense matrices take 210MB instead of 200MB, but all the rest of your matrices take 1MB instead of 200MB, that's more than worthwhile as a tradeoff.\n\n\n\nAlso, do you actually need to work on all 5000 matrices at once? If you only need, say, the current matrix and the previous one at each step, you can generate them on the fly (or read from disk on the fly), and you only need 400MB instead of 1TB.\n\n\n\nWorst-case scenario, you can effectively swap things manually, with some kind of caching discipline, like least-recently-used. You can easily keep, say, the last 16 matrices in memory. Keep a dirty flag on each so you know whether you have to save it when flushing it to make room for another matrix. That's about as tricky as it's going to get.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to make cron run only 42 times in 10 minute intervals?\r\n                \r\nI need to make a job run 42 times in intervals of 10 minutes. I will be doing this using AWS Scheduled Task, which has the following cron syntax: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html\nThe basic arithmetic formula I came up with:\n```\n42 * 10 minutes = 420 minutes / 60 minutes = 7 hours.\n```\n\nThat means I want the Scheduled Task to run in intervals of 10 minutes over 7 hours. Once it reaches that 7 hours, it just no longer runs for the rest of the day.\nGiven this, I came up with this expression?\n```\ncron(1/10,15-21,*,*,?,*) \n```\n\nIs this expression accurate and most efficient for my needs?\n    ", "Answer": "\r\nThe syntax for the expression should actually be ```\ncron(1/10 15-21 * * ? *)```\n so you would want to remove the commas between.\nYou have offset the minute part of the expression by ```\n1```\n so it will run at 1,11,21,31,41,51. If you simply wanted it to run once every 10 minutes then you could do ```\n*/10```\n instead.\nThis will run 6 times in an hour 7 hours so that checks out as your count of 42 which is what you expect ranging from ```\n15:01```\n to ```\n21:51```\n.\nJust be aware that this is executed in ```\nUTC```\n so ensure that the times match any time zone that you're expecting it to operate it.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why do we bother with CPU registers in assembly, instead of just working directly with memory?\r\n                \r\nI have a basic question about assembly.\nWhy do we bother doing arithmetic operations only on registers if they can work on memory as well?\nFor example both of the following cause (essentially) the same value to be calculated as an answer:\nSnippet 1\n```\n.data\n    var dd 00000400h\n\n.code\n\n    Start:\n        add var,0000000Bh\n        mov eax,var\n        ;breakpoint: var = 00000B04\n    End Start\n```\n\n\nSnippet 2\n```\n.code\n\n    Start:\n        mov eax,00000400h\n        add eax,0000000bh\n        ;breakpoint: eax = 0000040B\n    End Start\n```\n\n\nFrom what I can see most texts and tutorials do arithmetic operations mostly on registers. Is it just faster to work with registers?\n    ", "Answer": "\r\nIf you look at computer architectures, you find a series of levels of memory. Those that are close to the CPU are the fast, expensive (per a bit), and therefore small, while at the other end you have big, slow and cheap memory devices. In a modern computer, these are typically something like:\n\n```\n CPU registers (slightly complicated, but in the order of 1KB per a core - there\n                are different types of registers. You might have 16 64 bit\n                general purpose registers plus a bunch of registers for special\n                purposes)\n L1 cache (64KB per core)\n L2 cache (256KB per core)\n L3 cache (8MB)\n Main memory (8GB)\n HDD (1TB)\n The internet (big)\n```\n\n\nOver time, more and more levels of cache have been added - I can remember a time when CPUs didn't have any onboard caches, and I'm not even old! These days, HDDs come with onboard caches, and the internet is cached in any number of places: in memory, on the HDD, and maybe on caching proxy servers.\n\nThere is a dramatic (often orders of magnitude) decrease in bandwidth and increase in latency in each step away from the CPU. For example, a HDD might be able to be read at 100MB/s with a latency of 5ms (these numbers may not be exactly correct), while your main memory can read at 6.4GB/s with a latency of 9ns (six orders of magnitude!).  Latency is a very important factor, as you don't want to keep the CPU waiting any longer than it has to (this is especially true for architectures with deep pipelines, but that's a discussion for another day).\n\nThe idea is that you will often be reusing the same data over and over again, so it makes sense to put it in a small fast cache for subsequent operations. This is referred to as temporal locality. Another important principle of locality is spatial locality, which says that memory locations near each other will likely be read at about the same time. It is for this reason that reading from RAM will cause a much larger block of RAM to be read and put into on-CPU cache. If it wasn't for these principles of locality, then any location in memory would have an equally likely chance of being read at any one time, so there would be no way to predict what will be accessed next, and all the levels of cache in the world will not improve speed. You might as well just use a hard drive, but I'm sure you know what it's like to have the computer come to a grinding halt when paging (which is basically using the HDD as an extension to RAM). It is conceptually possible to have no memory except for a hard drive (and many small devices have a single memory), but this would be painfully slow compared to what we're familiar with.\n\nOne other advantage of having registers (and only a small number of registers) is that it lets you have shorter instructions. If you have instructions that contain two (or more) 64 bit addresses, you are going to have some long instructions!\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "NASM division using variables instead of actual values\r\n                \r\nI'm learning some basic arithmetic using NASM on Linux. I need to divide two numbers using variables NUMBER1 and NUMBER2. My code works if I type in actual value instead of variables. For example if I type in '6' instead of NUMBER2 and '2' instead of NUMBER1, the program does division and gives me answer of 3.\nRunning code with variables gives FLOATING EXCEPTION (CORE DUMPED). could please explain how correctly use variables in this code?\nWhile debugging, I see that the problem is in DIV line. Thank you !\n\n```\n section .text\n\nglobal main ;must be declared for using gcc\n\nmain: ;tell linker entry point\nmov ax,[NUMBER2]\nsub ax, '0'\nmov bl, [NUMBER1]\ndiv bl\nadd ax, '0'\nmov [res], ax\nmov ecx,msg\nmov edx, len\nmov ebx,1 ;file descriptor (stdout)\nmov eax,4 ;system call number (sys_write)\nint 0x80 ;call kernel\nnwln\nmov ecx,res\nmov edx, 1\n mov ebx,1 ;file descriptor (stdout)\n mov eax,4 ;system call number (sys_write)\nint 0x80 ;call kernel\nmov eax,1 ;system call number (sys_exit)\nint 0x80 ;call kernel\n\nsection .data\nNUMBER1: dw 2\nNUMBER2: dw 6\nmsg db \"The result is:\", 0xA,0xD\nlen equ $- msg\n\nsegment .bss\nres resb 1\n```\n\n    ", "Answer": "\r\nBecause given example is supposed to process ASCII codes for numbers, not numbers themselves. If you enter ```\n6```\n instead of ```\n'6'```\n, ```\n6 - '0'```\n evaluates to ```\n65494```\n (not ```\n6```\n). If you try to divide further by ```\n2```\n, processor is unable to store quotient in lower half of ```\nax```\n register.\n\nIf you do not intend to output result to console and only try to learn how division with one byte integer works using assembler, pick your favourite debugger, place breakpoint after division operation and enjoy your result.\n\n```\nsection .text\n\nglobal main ;must be declared for using gcc\n\nmain: ;tell linker entry point\nmov ax,[NUMBER2]\nmov bl, [NUMBER1]\ndiv bl\nnop ; quotient at al, remainder at ah\n; remove nop instruction if your code is larger than few lines\n; place output code here\n\nsection .data\nNUMBER2: dw 6 ; dw means two bytes\nNUMBER1: db 2 ; db means one byte\n\nsegment .bss\nres resb 1\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Converting command line arguments to decimals in C [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     This question appears to be off-topic because it lacks sufficient information to diagnose the problem. Describe your problem in more detail or include a minimal example in the question itself.\r\n                \r\n                    \r\n                        Closed 9 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI am writing a program that takes command line arguments and performs basic arithmetic operations on them.  I am using ```\ngetopt```\n to get the arguments and I am storing them as strings.  Below are the variables I store the arguments in\n\n```\nchar *distance = NULL;\nchar *time = NULL;\nchar *pace = NULL;\n```\n\n\nHowever how do I then convert them to decimals?  So for example \"5\" will become 5.00 or \"6.12\" will become 6.12.  I have tried search around but other solutions don't seem to work for me.  \n\nI have tried doing\n\n```\ndouble testnum;\ntestnum = atof(time);\n```\n\n\nbut I get \n\nerror: request for member 'testnum' in something not a structure or a union\n    ", "Answer": "\r\nYou can also try strtof()\n\n```\n#include <stdlib.h>\n#include <stdio.h>\n\nint main(void)\n    {\n        char *string, *stopstring;\n        double x;\n        float f;\n        long double ld;\n\n        string = \"3.1415926This stopped it\";\n        f = strtof(string, &stopstring);\n        printf(\"string = %s\\n\", string);\n        printf(\"strtof = %f\\n\", f);\n        printf(\"Stopped scan at \\\"%s\\\"\\n\\n\", stopstring);\n    }\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Why can't I subtract an int from a uint? [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Addition of int and uint\r\n                            \r\n                                (6 answers)\r\n                            \r\n                    \r\n                Closed 7 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI have two variables.  \n\n```\nint x = 1;\nuint y = 2;\n```\n\n\nThe types must remain ```\nint```\n and ```\nuint```\n.  Yet I can't perform basic arithmetic with them.  \n\n```\ny += x;\n```\n\n\n\n  Cannot implicitly convert type 'int' to 'uint'. An explicit conversion\n  exists (are you missing a cast?)\n\n\nSo I have to do something like this everytime?  \n\n```\nif (x < 0)\n{\n    y -= (uint)Math.Abs(x);\n}\nelse\n{\n    y += (uint)x;\n}\n```\n\n\nComing from a C/C++/Java background, this confuses me.\nIs there something I'm missing here?   \n\nWhy is this behavior different from the other languages mentioned?\nAre there better alternatives?  \n\nI assume this is a common trip-up to newcomers of the language.\nNo, I'm not relying on underflow.\n    ", "Answer": "\r\nThere is no guarantee that an ```\nint```\n will fit into an ```\nuint```\n, that's why you get the compiler error.\n\nIf you really want to perform the operation (that is, if you know somehow that the numbers will fit), you can cast like you did or use ```\nConvert```\n methods.\n\n```\nif (x < 0)\n{\n    y -= Convert.ToUint32(Math.Abs(x));\n}\nelse\n{\n    y += Convert.ToUint32(x);\n}\n```\n\n\nIf you are unsure if the numbers will fit, you can just clamp them:\n\n```\nuint result = Math.Max(uint.MinValue(Math.Min(uint.MaxValue, x))\n```\n\n\nAlso, in some cases you can use an ```\nunchecked```\n context. This won't give you errors, but will overflow values larger than it's possible to fit.\n\nAt last, if you want to map between their range of possible values, use ```\nint.MaxValue```\n as offset:\n\n```\nuint x = someuint();\nint y = Convert.ToInt32(x - int.MaxValue);\n\nint w = someint();\nuint z = Convert.ToUint32(w + int.MaxValue);\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Syntax for DMS Transformation Rule For Arithmetic Expression\r\n                \r\n\nI needed some help with my DMS migration. Basically, I have a source and target database with a condition to add a new column to the target table where we do some arithmetic computation on the source column. But on AWS, I can only find examples of concatenating strings but no number calculations. Could someone please share their experience on how to do arithmetic on number data. \nExample of the string concat that I saw:\nhttps://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TableMapping.SelectionTransformation.Expressions.html\nMy Table Schema and mapping.json file snippetsou:\n```\n# Source table example\n\nCREATE TABLE USER_INFO (\n    ID INT PRIMARY KEY,\n    FIRST_NAME VARCHAR(50),\n    LAST_NAME VARCHAR(50),\n    EMAIL VARCHAR(50),\n    GENDER VARCHAR(50),\n    IP_ADDRESS VARCHAR(20)\n);\n\n# Json rule for DMS transformation\n {\n        \"rule-type\": \"transformation\",\n        \"rule-id\": \"5\",\n        \"rule-name\": \"5\",\n        \"rule-action\": \"add-column\",\n        \"rule-target\": \"column\",\n        \"object-locator\": {\n            \"schema-name\": \"source_database_name_goes_here\",\n            \"table-name\": \"USER_INFO\"\n        },\n        \"value\": \"new_column_name_for_target_table\",\n        \"expression\": \"$ID*1000+2\",  ////////// Does this work? $ID is source table ID field//////////////\n        \"data-type\": {\n             \"type\": \"integer\",\n             \"length\": 10\n        }\n```\n\n    ", "Answer": "\r\nyour rule expresion will work, I have used transformation rule below and works fine\n```\n{\n\"rules\": [\n{\n\"rule-type\": \"transformation\",\n\"rule-id\": \"644091346\",\n\"rule-name\": \"644091346\",\n\"rule-target\": \"column\",\n\"object-locator\": {\n\"schema-name\": \"%\",\n\"table-name\": \"%\"\n},\n\"rule-action\": \"add-column\",\n\"value\": \"USER_ID_NEW\",\n\"expression\": \"$USER_ID*10\",\n\"data-type\": {\n\"type\": \"int8\"\n}\n},\n{\n\"rule-type\": \"selection\",\n\"rule-id\": \"643832693\",\n\"rule-name\": \"643832693\",\n\"object-locator\": {\n\"schema-name\": \"ADMIN\",\n\"table-name\": \"TB\"\n},\n\"rule-action\": \"include\",\n\"filters\": []\n}\n]}\n```\n\nyou could review link below to deep dive little more about transformation rules.\nhttps://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TableMapping.SelectionTransformation.Expressions.html\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "JS Arithmetic calculations using eval are being multiplied\r\n                \r\nI'm creating a basic calculator using prompts. The user inputs a number, an operand, and another number, which will give them the correct answer. \n\nPROBLEM:\nMy numbers are being multiplied, regardless of the operator used. For example, inputting 5+5 gives me the value of 25. \n\nWhy are my eval calculations doing this, even though I have specified different arithmetic operators?\n\nI can't figure out how/why my code is incorrect. Perhaps I am overlooking something crucial as a newbie. Any help would be greatly appreciated. \n\n```\n    var firstNumber = prompt(\"Enter a number\", \"\");\n    var sign = prompt(\"Enter an operand\", \"\");\n    var secondNumber = prompt(\"Enter another number\", \"\");\n\n    if (sign = \"+\") {\n        answer = eval(+firstNumber + +secondNumber);\n    }\n\n    if (sign = \"-\") {\n        answer = eval(+firstNumber - +secondNumber);\n    }\n\n    if (sign = \"/\") {\n        answer = eval(+firstNumber / +secondNumber);\n    }\n\n    if (sign = \"*\") {\n        answer = eval(+firstNumber * +secondNumber);\n    }\n    var answer = document.write(\"Your answer is\" + answer);\n```\n\n    ", "Answer": "\r\nYou're assigning values to ```\nsign```\n within the if statement condition which is wrong. Do this\n\n```\nvar firstNumber = prompt(\"Enter a number\", \"\");\nvar sign = prompt(\"Enter an operand\", \"\");\nvar secondNumber = prompt(\"Enter another number\", \"\");\n\nif (sign === \"+\") {\n    answer = firstNumber + secondNumber;\n}\n\nif (sign === \"-\") {\n    answer = firstNumber - secondNumber;\n}\n\nif (sign === \"/\") {\n    answer = firstNumber / secondNumber;\n}\n\nif (sign === \"*\") {\n    answer = firstNumber * secondNumber;\n}\nvar answer = document.write(\"Your answer is\" + answer);\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "C performance and choice of functions parameters\r\n                \r\nI'm making a little bignum library as an exercise (it is my first little project, i'm a newbie). I'm using the c language.\nI defined a structure number in this way:\n\n```\ntypedef struct number{\nchar *mantissa;\nlong exponent;\nenumSign sign;\n}number;\n```\n\n\n(I'm including the structure because I don't know if size matters here),\nand some functions to do basic arithmetic operations. \nMy question is:\nis it more efficient if i use:\n\n```\nnumber do_sum(number n, number q)```\n\n\nor,\n\n```\nvoid do_sum(number *n, number *q, number *result)\n```\n\n\n?\nI tried to record the time of execution in both cases (the functions being almost identical) but the results were not consistent.\nCould you please explain also what happens in both cases?\n    ", "Answer": "\r\nIn order to find the answer to questions of this kind, you need to\n\n\nLearn how to view the assembly output of your compiler in each case.  All decent C compilers have an option to produce assembly output.  If you do that, you will see that one version is considerably more complicated than the other, both for the caller and for the callee.  The version which is more complicated is the one returning a ```\nstruct```\n.  And greater complexity usually (but not always) means worse performance.\nUse a profiler to try each case and see which one performs better.  Spoiler: the version that returns a ```\nstruct```\n will perform worse than the version that accepts a pointer to an existing ```\nstruct```\n.\n\n\nPerformance notwithstanding, C is quite fast either way, so I would recommend that you do not pay so much attention to performance while learning to code.  The kind of performance that tends to matter is algorithmic performance, which is language agnostic.  The performance of individual low level operations hardly ever matters much.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Can we solve this Arithmetic Problem using Python in a more efficient way?\r\n                \r\nI've been thinking about making an Equation Solving program, starting off with some basic Equations first.\nI have this Arithmetic progression problem here\n\nProblem Statement: If the nth term of AP is 3n + 2 find the sum up to 15 terms\n\nThis is what I have tried,\n```\nn = 1\nwhile n <= 15:\n    ap = 3 * n + 2\n    n += 1\n\nprint(ap)\n\n#OUTPUT: 47\n```\n\nIs there a more efficient way to calculate these types of problems using python?\nI'm thinking of handling bigger equations\nAnd the answer is not quite Correct\n    ", "Answer": "\r\nIf you want the sum of 3n+2 for 1<=n<=15 then:\n```\nprint(sum(3*n+2 for n in range(1,16)))\n```\n\nOutput:\n```\n390\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Converting arithmetic sequence to slice in Python\r\n                \r\nIs there a neat way to convert an arithmetic progression of integers into a slice in Python? Perhaps a nice built-in function?\n\nIt seems like an easy problem, but it's basically a nightmare.\n\nI'm only interested in non-negative integer inputs.\n\nMy best attempt so far:\n\n```\ndef seq_to_slice(xs):\n    if len(xs) == 0:\n        return slice(0, 0)\n    start = xs[0]\n    if len(xs) == 1:\n        return slice(start, start+1)\n    else:\n        step = xs[1] - start\n        stop = xs[-1] + step\n        if stop < 0:\n            stop = None\n        return slice(start, stop, step)\n```\n\n    ", "Answer": "\r\nI think you'll also need to fail if the sequence does not have a uniform step.\n```\ndef seq_to_slice(arr):\n    if len(arr) == 1:\n        return slice(arr[0], arr[0]+1)\n    diff = [arr[num] - arr[num-1] for num in range(1, len(arr))]\n    if max(diff) == min(diff):\n        step = max(diff)\n    else:\n        raise ValueError('Sequence cannot be converted to slice')\n    step = None if step == 1 else step\n    min_arr = None if min(arr) == 0 else min(arr)\n    max_arr = max(arr) + 1\n    if step and step < 0:\n        min_arr, max_arr = max_arr - 1, min_arr - 1 if min_arr else min_arr\n    return slice(min_arr, max_arr, step)\n\nseq_to_slice([1,2,5]) # Should fail\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Unary Operation Using For Loops In Matlab\r\n                \r\nI'm trying to do some basic arithmetic within a ```\nfor```\n loop in MatLab.\n\nBasically I want to copy and operate on each element one-by-one.  First I want to subtract 3.6: ```\ntestDataMean```\n from each element, raise each element to the power of ```\n2```\n then sum up each variable.  The finally divide the variable ```\ns```\n by ```\n5```\n (```\nsizeOfTestData```\n)  \n\nThis should calculate approximately ~1.05.  \n\nThe ```\ntestData```\n variable is a 1x5 vector containing the numbers ```\n3, 4, 2, 5, 4```\n  \n\n```\n   s = 0;\n\nfor k = 1:sizeTestData\n    p = testData(k);\n    q = p - testDataMean;\n    r = q^2;\n    s = s + r;\n    s/5;\n\nend\n```\n\n\nThis loop actually throws an error on the last line ```\ns = s + r```\n.  I am aware I can use the ```\nsum```\n function in most circumstances when operating on vectors of the same size, but in the context of a for loop I'm not sure.\n    ", "Answer": "\r\nNote that ```\nsum(s) / numel(s)```\n by definition is the same as ```\nmean(s)```\n.\n\nThe loop free approach:\n\n```\ntestData = [3, 4, 2, 5, 4]\nq = testData - mean(testData);\ns = mean(q.^2);\ns = 1.0400\n```\n\n\nThe one-liner:\n\n```\ns = mean((testData-mean(testData)).^2)\ns = 1.0400\n```\n\n\nAnd your initial approach:\n\n(After bug fixing)\n\n```\ntestData = [3, 4, 2, 5, 4]\n\ns = 0;\nsizeTestData = length(testData);\ntestDataMean = mean(testData);\n\nfor k = 1:sizeTestData\n   p = testData(k);\n   q = p - testDataMean;\n   r = q^2;\n   s = s + r;  \nend\ns = s / numel(s);\ns = 1.0400\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "C++ template nontype parameter arithmetic\r\n                \r\nI am trying to specialize template the following way:\n\n```\ntemplate<size_t _1,size_t _2> // workaround: bool consecutive = (_1 == _2 - 1)>\nstruct integral_index_ {};\n...\ntemplate<size_t _1>\nstruct integral_index_<_1, _1 + 1> { // cannot do arithmetic?\n//struct integral_index_<_1, _2, true> { workaround\n};\n```\n\n\nhowever I get compiler message error\n\n```\nthe template argument list of the partial specialization includes a non\n-type argument whose type depends on a template parameter.\n```\n\n\nwhat do my doing wrong?\nthanks\n\nI put workaround in comments.  Apparently I cannot do arithmetic in template specialization?  seems counterintuitive.\n\nhere is my final solution in the problem to be solved. Basically, consecutive index requires one multiplication only.\n\n```\n130 template<size_t _1,size_t _2, bool consecutive = (_1 == _2 - 1)>\n131 struct integral_index_ {\n132     template<typename T, typename U>\n133     __device__\n134     static T eval(const T (&N)[4], const U &index) {\n135         T j = index/N[_1];\n136         return ((index - j*N[_1])*range<0,_1>::multiply(N) +\n137                 j*range<0,_2>::multiply(N));\n138     }\n139 };\n140\n141 template<size_t _1,size_t _2>\n142 struct integral_index_<_1, _2, true> {\n143     template<typename T, typename U>\n144     __device__\n145     static T eval(const T (&N)[4], const U &index) {\n146         return index*range<0,_1>::multiply(N);\n147     }\n148 };\n149\n150 template<size_t _1,size_t _2, typename T, typename U>\n151 __device__\n152 T integral_index(const T (&N)[4], const U &index) {\n153     return integral_index_<_1,_2>::eval(N, index);\n154 }\n```\n\n    ", "Answer": "\r\nI am posting my solution is suggested by GMan\n\n```\n130 template<size_t _1,size_t _2, bool consecutive = (_1 == _2 - 1)>\n131 struct integral_index_ {\n132     template<typename T, typename U>\n133     __device__\n134     static T eval(const T (&N)[4], const U &index) {\n135         T j = index/N[_1];\n136         return ((index - j*N[_1])*range<0,_1>::multiply(N) +\n137                 j*range<0,_2>::multiply(N));\n138     }\n139 };\n140\n141 template<size_t _1,size_t _2>\n142 struct integral_index_<_1, _2, true> {\n143     template<typename T, typename U>\n144     __device__\n145     static T eval(const T (&N)[4], const U &index) {\n146         return index*range<0,_1>::multiply(N);\n147     }\n148 };\n149\n150 template<size_t _1,size_t _2, typename T, typename U>\n151 __device__\n152 T integral_index(const T (&N)[4], const U &index) {\n153     return integral_index_<_1,_2>::eval(N, index);\n154 }\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Solution to floating point arithmetic for calculator app\r\n                \r\nI'm making a calculator app in React and would like a solution to floating point arithmetic without having to round to a fixed number of decimal places or truncating.\n\nBasically, how can I get my calculator app to calculate ```\n0.3 - 0.1```\n and return ```\n0.2```\n and not ```\n0.19999999999999998```\n?\n    ", "Answer": "\r\nYou can use an arbitrary precision ```\nDecimal```\n like type to do the calculations. Like this one: https://github.com/MikeMcl/decimal.js\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Python 'pointer arithmetic' - Quicksort\r\n                \r\nIn idiomatic C fashion, one can implement quicksort in a simple way with two arguments:\n\n```\nvoid quicksort(int inputArray[], int numelems);```\n\n\nWe can safely use two arguments for later subdivisions (i.e. the partitions, as they're commonly called) via pointer arithmetic:\n\n```\n//later on in our quicksort routine...\nquicksort(inputArray+last+1, numelems-last-1);\n```\n\n\nIn fact, I even asked about this before on SO because I was untrained in pointer arithmetic at the time: see Passing an array to a function with an odd format - “v+last+1”\n\nBasically, Is it possible to replicate the same behavior in python and if so, how? I have noticed that lists can be subdivided with the colon inside of square brackets (the slicing operator), but the slice operator does not pass the list from that point on; that is to say that the 1st element (0th index) is still the same in both cases.\n    ", "Answer": "\r\nAs you're aware, Python's slice syntax makes a copy, so in order to manipulate a subsection of a list (not \"array\", in Python) in place, you need to pass around both the list and the start-index and size (or end-index) of the portion under discussion, much as you could in C. The signature of the recursive function would be something like:\n\n```\ndef quicksort( inputList, numElems, startIndex = 0 ):\n```\n\n\nAnd the recursive call would be something like:\n\n```\nquicksort( inputList, numElems-last-1, last+1 )\n```\n\n\nThroughout the function you'd add ```\nstartIndex```\n to whatever list accesses you would make.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Numpy is very slow for basic array operations\r\n                \r\nI have a code where I do a lot of basic arithmetic calculations with a bunch of numerical data that is is multiple arrays. I have realized that in most concievable operations, numpy classes are always slower than the default python ones. Why is this?\n\nFor example I have a simple snippet where all I do is just update 1 numpy array element with another one retrieved from another numpy array, or I update it with the mathematical product of 2 other numpy array elements. It should be a basic operation, yet it will always be at least 2-3x slower than if I do it with ```\nlist```\n.\n\nFirst I thought that it's because I haven't harmonized the data structures and the compiler has to do a lot of unecessary transformations. So then I recoded the whole thing and replaced every ```\nfloat```\n with ```\nnumpy.float64```\n and every ```\nlist```\n with ```\nnumpy.ndarray```\n, and the entire data is ```\nnumpy.float64```\n all across the code so that it doesn't have to do any unecessary transformations.\n\nThe code is still 2-3 times slower than if I just use ```\nlist```\n and ```\nfloat```\n.\n\nFor example:\n\n```\n    ALPHA       = [[random.uniform(*a_param)    for k in range(l2)] for l in range(l1)]\n    COEFF       = [[random.uniform(*c_param)    for k in range(l2)] for l in range(l1)]\n\n    summa=0.0\n    for l in range(l1):\n        for k in range(l2):\n            summa+=COEFF[l][k] * ALPHA[l][k]\n```\n\n\nwill always be 2-3x faster than:\n\n```\n    ALPHA       = numpy.random.uniform(*a_param, (l1,l2))\n    COEFF       = numpy.random.uniform(*c_param, (l1,l2))\n\n    summa=0.0\n    for l in range(l1):\n        for k in range(l2):\n            summa+=COEFF[l][k] * ALPHA[l][k]\n```\n\n\nHow is this possible, am I doing something wrong , since numpy is supposed to speed up things.\n\nFor the record I am using ```\nPython 3.5.3```\n and ```\nnumpy (1.12.1)```\n, should I update?\n    ", "Answer": "\r\nModifying a single element of a NumPy array is not expected to be faster than modifying a single element of a Python list.  The speedup from using NumPy comes when you perform \"vectorized\" operations on entire arrays (or subsets of arrays).  Try assigning the first 10000 elements of a NumPy array to be equal to the first 10000 elements of another, and compare that with using lists.\n\nIf your data and/or operations are very small (one or just a few elements), you are probably better off not using NumPy.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to split a program into multiple files with a .h and a couple of .c files?\r\n                \r\nI am trying to figure out to split a program into multiple files to have 1 .h file and 2 .c files. I have a full program but just for this example, I would like the function of printing of the output to be in a separate .c file. I know how to make a function of basic arithmetic like:\n```\nint Sum(int a, int b) \n{ \n    return a+b; \n}\n```\n\nbut how would I make a function with a for loop and just the code below?\n```\nfor (i = 0; i < count; i++)\n{\n    printf(\"\\n%s\", ptr[i]->name);\n    printf(\"%s\", ptr[i]->street);\n    printf(\"%s\", ptr[i]->citystate);\n    printf(\"%s\", ptr[i]->zip);\n    free(ptr[i]);    \n}\n```\n\nI get the way it works is like this, just don't know how to make a for loop into a function.\nFunctions.h:\n```\n#ifndef FUNCTIONS_H_INCLUDED\n#define FUNCTIONS_H_INCLUDED\n/* ^^ these are the include guards */\n\n/* Prototypes for the functions */\n/* Sums two ints */\nint Sum(int a, int b);\n\n#endif\n```\n\nFunctions.c:\n```\n/* In general it's good to include also the header of the current .c,\n   to avoid repeating the prototypes */\n#include \"Functions.h\"\n\nint Sum(int a, int b)\n{\n    return a+b;\n}\n```\n\nMain.c\n```\n#include \"stdio.h\"\n/* To use the functions defined in Functions.c I need to #include Functions.h */\n#include \"Functions.h\"\n\nint main(void)\n{\n    int a, b;\n    printf(\"Insert two numbers: \");\n    if(scanf(\"%d %d\", &a, &b)!=2)\n    {\n        fputs(\"Invalid input\", stderr);\n        return 1;\n    }\n    printf(\"%d + %d = %d\", a, b, Sum(a, b));\n    return 0;\n }\n```\n\n    ", "Answer": "\r\nThere are two different issues involved (I recommend to address the first one, if so needed, before the second one):\n\n\nhow to split a monolithic translation unit in several ones, but keeping the same functions\nhow to refactor a code to make it more readable and made of \"smaller\" and \"better\" functions. In your case, this is the main issue.\n\n\n\n\nThe first question, for example splitting a small single program in a single ```\nmyprog.c```\n file of a few dozen thousands of lines, is quite easy. The real issue is to organize that cleverly (and then it becomes harder, and opinion based). You just need to  put mostly declarations in your header file, and to put definitions in several translation units, and of course to improve your build process to use and link them together. So you would have first a single common header file ```\nmyheader.h```\n declaring your types, macros, functions, global variables. You would also define some short ```\nstatic inline```\n functions there, if you need them. Then you would have several C files (technically translation units) ```\nfoo.c```\n, ```\nbar.c```\n, ```\ndingo.c```\n, and you'll better put several related functions in each of them. Each such C file has ```\n#include \"myheader.h\"```\n. You'll better use some build automation tool, probably GNU make (or something else, e.g. ninja) that you would configure with your ```\nMakefile```\n. You could later have several header files, but for a small project of only several dozen thousands of source code lines that might be not needed. In some cases, you would generate some C file from a higher-level description (e.g. use simple metaprogramming techniques).\n\nThe second question (code refactoring) is really difficult, and has no simple universal answer. It really depends of the project. A simple (and very debatable, and over-simplifying) rule of thumb is that you need to have functions \"doing only one thing\" and of at most a few dozen lines each. So as soon as a  function does more than one thing or has more than one or two dozen lines you should consider splitting and refactoring it (but you won't always do that). Obviously your ```\nmain```\n should be split in several stuff.\n\n\n\nAt last, don't fail into the excessive habit of putting only one function per ```\n*.c```\n file, or have lots of small ```\n*.c```\n files of only a hundred lines each. This is generally useless, and could increase your build time (because the preprocessor would work a lot), and perhaps even slightly decrease the runtime performance of your executable (because your optimizing compiler won't be able to inline, unless you use link-time optimization). My recommendation (opinion-based, so debatable) is to have source files of several thousand lines each containing several (dozen of) functions.\n\nIn your case, I believe your program (in your question) is so tiny that you don't need to split it into several translation units (unless your teacher asks you to). But indeed you need to refactor it, perhaps defining some abstract data type and routines supporting it (see this).\n\n\n\nStudy the source code of existing free software (e.g. on github) related to your project for inspiration, since you'll need to define and follow many coding conventions (and coding rules) which matter a lot with C programming. In your newbie case, I believe that studying the source of any small free software program (of a few dozen thousand lines, see this) -in a domain you are understanding or interested in, and in the programming language you are practicing- will profit you a lot.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How can I use brackets while using bc (Unix basic calculator)? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     This question does not appear to be about a specific programming problem, a software algorithm, or software tools primarily used by programmers. If you believe the question would be on-topic on another Stack Exchange site, you can leave a comment to explain where the question may be able to be answered.\r\n                \r\n                    \r\n                        Closed 1 year ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nWhile working with ```\nbc```\n, UNIX basic calculator on my Ubuntu WSL, I found this bizarre behaviour:\n```\nPrompt> echo (1+2)*3 | bc -l\n-bash: syntax error near unexpected token `1+2'\nPrompt> echo (1 + 2) * 3 | bc -l\n-bash: syntax error near unexpected token `1'\n```\n\nAt first, I thought this meant that ```\nbc```\n does not cover brackets, but then I did this:\n```\nPrompt> bc\nbc 1.07.1\nCopyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.\nThis is free software with ABSOLUTELY NO WARRANTY.\nFor details type `warranty'.\n(1 + 2) * 3\n9\n(1+2)*3\n9\n^C\n(interrupt) use quit to exit.\nquit\n```\n\nSo ```\nbc```\n does support the usage of brackets.\nDoes anybody know how I can use arithmetic expressions with brackets, while using ```\nbc```\n as a one-liner-support-tool (I mean, while using it in one-liners like (```\n...| bc```\n)?\n    ", "Answer": "\r\nUse quotes around your expression, such as:\n```\necho \"(1 + 2) * 3\" | bc -l```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "C++: How do I round arithmetically after a division with BASIC operations? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs details or clarity. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Add details and clarify the problem by editing this post.\r\n                \r\n                    \r\n                        Closed 2 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI just started learning how to program in C++ and I'm already desperate because of one task. I'm only allowed to use the following operations: + - * / % and brackets and int variables and declaration, e.g. a = b;\nThe task is to divide int numbers a and b. The output should be the mathematically / arithmetically correct rounding to the next int. How do I do that? I can't use if/else, define new functions etc. I really don't know and I've tried a couple of things but they don't work for every case (a and b can be all positive integers).\nThanks a lot for your help!!!!\nEDIT: As we didn't learn what bool etc. is, I can't use it. It should output, for example 5/2 = 3 (rounded up)\n7/3 = 2 (rounded down)\n    ", "Answer": "\r\nI assume that you want to round to nearest, and that ```\n.5```\n goes to the next bigger integer. And we restrict to ```\na > 0```\n and ```\nb > 0```\n.\nConsider that you already get the correct answer for half of the cases from simple integer arithmetics (because it is always rounding down). To get also the other half correct, you can shift the numerator by half the denominator:\n```\n#include <iostream>\n\nint divide(int a, int b){\n    return (a+b/2) / b;\n}\n\nvoid test(int a, int b){\n    std::cout << a << \" / \" << b  << \" = \" << (double)a/b << \" == \" << divide(a,b) << \"\\n\";\n}\n\nint main(){\n    for (int i=0;i<20;++i){\n        test(i,3);\n    }\n\n}\n```\n\nOutput:\n```\n0 / 3 = 0 == 0\n1 / 3 = 0.333333 == 0\n2 / 3 = 0.666667 == 1\n3 / 3 = 1 == 1\n4 / 3 = 1.33333 == 1\n5 / 3 = 1.66667 == 2\n6 / 3 = 2 == 2\n7 / 3 = 2.33333 == 2\n8 / 3 = 2.66667 == 3\n9 / 3 = 3 == 3\n10 / 3 = 3.33333 == 3\n11 / 3 = 3.66667 == 4\n12 / 3 = 4 == 4\n13 / 3 = 4.33333 == 4\n14 / 3 = 4.66667 == 5\n15 / 3 = 5 == 5\n16 / 3 = 5.33333 == 5\n17 / 3 = 5.66667 == 6\n18 / 3 = 6 == 6\n19 / 3 = 6.33333 == 6\n```\n\nI will try to visualize what happens here, actually it is rather simple:\nFor denomiator 3:\n```\na          0   1   2   3   4   5   6  \na/3        000000000   111111111   222222    <- integer arithmetics\nround(a/3) 00000   111111111   2222222222    <- desired result\na/3==n.5         ^           ^  \n```\n\nFor denominator b\n```\na          0   1   2  ... b/2   ...   b-1   b   b+1    \na/b        000000000000000000000000000000   111111111111   \nround(a/3) 000000000000   111111111111111111111111111111\na/b==n.5                  ^            \n```\n\nWith denominator ```\nb=3```\n we need to add an offset of ```\n1```\n to ```\na```\n to get correct results. In general we need to add an offset of ```\nb/2```\n. I hope the tables speak more than words.\nNote that ```\na+b/2```\n is suspectible to overflows. There are other mathematically equivalent epxressions that do not overflow that easily. As the final result for sure fits in an ```\nint```\n we can use ```\nunsigned```\n for the intermediate addition:\n```\nint div = (static_cast<unsigned>(a) + static_cast<unsigned>(b/2)) / b;\n```\n\nFor typical implementations where ```\nunsigned```\n can store the sum of any two positive ```\nint```\ns this avoids the overflow.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is one supposed to grayscale and brightness contrast process the image before sending to AWS Textract?\r\n                \r\nTextract results on recognizing basic arithmetic seems to degrade with color\nThis series of images show Textract failing unusually in all cases except the one where the image has been both grayscale and brightness/contrast (50/50 and 25/25)\n\nunedited image from the camera FAIL\nbrightness contrast applied without grayscale FAIL\ngrayscale FAIL\ngrayscale with brightness contrast finally!\n\nIs one supposed to grayscale the image before sending to textract? Should one also apply brightness/contrast?\nI assume Textract was trained with grayscale images - so should the service automatically convert the input images to grayscale?\n    ", "Answer": "\r\nAmazon Textract is an API that is built and tailored for document images, like scanned forms, bank statements, invoices, receipts. This is why you are getting sub-par results on your image.\nFor the type of documents you are trying to extract text from (post-it notes), the recommended API to use is Amazon Rekognition DetectText API. This API deals with text recognition in the wild, like license plate, signs, short notes, shop front, etc. The main constraint of that API is that it only supports up to 100 words.\nHere is a short snippet on how to use the API:\n```\n    session = boto3.Session(profile_name='default')\n    client = session.client('rekognition')\n\n    response = client.detect_text(Image={'S3Object': {'Bucket': bucket, 'Name': document_name}})\n\n    textDetections = response['TextDetections']\n    for text in textDetections:\n        print('Detected text:' + text['DetectedText'])\n        print('Confidence: ' + \"{:.2f}\".format(text['Confidence']) + \"%\")\n        print('Type:' + text['Type'])\n        print()\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Printing out the same info in MIPS assembly\r\n                \r\nThis is a simple program to take two numbers from the user and perform #basic arithmetic functions such as addition, subtraction and multiplication with them\n#Program flow:\n#1. Print statements to ask the user to enter the two different numbers\n#2. Store the two numbers in different registers and print the ‘menu’ of arithmetic instructions to the user\n#3. Based on the choice made by the user, create branch structures to perform the commands and print the result\n#4. Exit the program.\nMy struggle: When I enter number 3 (which is 'multiply' option) everything works fine. But when I enter '1' my program prints out ```\nYour final result is: 5Your final result is: -1Your final result is: 6```\n It prints out 3x times! And when I enter '2' it prints out ```\nYour final result is: 1Your final result is: 6```\n\nI'm struggling to see where my logic is missing. Also - how to prevent user from entering number that is different from 1-3?\n```\n    prompt1:    .asciiz      \"Enter the first number: \"\n    prompt2:    .asciiz      \"Enter the second number: \"\n    menu:      .asciiz      \"Enter the number associated with the operation \n    you want performed: 1 => add, 2 => subtract or 3 => multiply: \"\n    resultText:    .asciiz      \"Your final result is: \"\n    \n.text\n.globl main\nmain:\n    #The following block of code is to pre-load the integer values representing the various instructions into registers for storage\n    li $t3, 1    #This is to load the immediate value of 1 into the temporary register $t3\n    li $t4, 2    #This is to load the immediate value of 2 into the temporary register $t4\n    li $t5, 3    #This is to load the immediate value of 3 into the temporary register $t5\n    \n     #asking the user to provide the first number\n    li $v0, 4     #command for printing a string\n    la $a0, prompt1 #loading the string to print into the argument to enable printing\n    syscall      #executing the command\n    \n    \n    #the next block of code is for reading the first number provided by the user\n    li $v0, 5    #command for reading an integer\n    syscall      #executing the command for reading an integer\n    move $t0, $v0     #moving the number read from the user input into the temporary register $t0\n    \n    #asking the user to provide the second number\n    li $v0, 4    #command for printing a string\n    la $a0, prompt2    #loading the string into the argument to enable printing\n    syscall      #executing the command\n    \n    \n    #reading the second number to be provided to the user\n    li $v0, 5    #command to read the number  provided by the user\n    syscall      #executing the command for reading an integer\n    move $t1, $v0    #moving the number read from the user input into the temporary register $t1\n    \n     li $v0, 4    #command for printing a string\n    la $a0, menu    #loading the string into the argument to enable printing\n    syscall      #executing the command\n    \n    #the next block of code is to read the number provided by the user\n    li $v0, 5    #command for reading an integer\n    syscall      #executing the command\n    move $t2, $v0    #this command is to move the integer provided into the temporary register $t2\n    \n    beq $t2,$t3,addProcess    #Branch to 'addProcess' if $t2 = $t3\n    beq $t2,$t4,subtractProcess #Branch to 'subtractProcess' if $t2 = $t4\n    beq $t2,$t5,multiplyProcess #Branch to 'multiplyProcess' if $t2 = $t5\n    \n    addProcess:\n    add $t6,$t0,$t1    #this adds the values stored in $t0 and $t1 and assigns them to the     temporary register $t6\n    \n    #The following line of code is to print the results of the computation above\n    li $v0,4    #this is the command for printing a string\n    la $a0,resultText    #this loads the string to print into the argument $a0 for printing\n    syscall      #executes the command\n    \n    #the following line of code prints out the result of the addition computation\n    li $v0,1\n    la $a0, ($t6)\n    syscall\n    \n    li $v0,10 #This is to terminate the program\n    \n    subtractProcess:\n    sub $t6,$t0,$t1 #this adds the values stored in $t0 and $t1 and assigns them to the temporary register $t6\n    li $v0,4    #this is the command for printing a string\n    la $a0,resultText    #this loads the string to print into the argument $a0 for printing\n    syscall      #executes the command\n    \n    #the following line of code prints out the result of the addition computation\n    li $v0,1\n    la $a0, ($t6)\n    syscall\n    \n    li $v0,10 #This is to terminate the program\n    \n    multiplyProcess:\n    mul $t6,$t0,$t1 #this adds the values stored in $t0 and $t1 and assigns them to the temporary register $t6\n    li $v0,4    #this is the command for printing a string\n    la $a0,resultText    #this loads the string to print into the argument $a0 for printing\n    syscall      #executes the command\n    \n    #the following line of code prints out the result of the addition computation\n    li $v0,1\n    la $a0, ($t6)\n    syscall\n    \n    li $v0,10 #This is to terminate the program\n    ```\n```\n\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How does xarray broadcasting work with numpy functions?\r\n                \r\nI am trying to do a coordinate transformation with my xarray coordinates so \n\nI have a DataArray like:\n\n```\nd = xr.DataArray(np.zeros((10, 10, 1)), dims=['x', 'y', 'z']\n```\n\n\nand am doing operations like:\n\n```\nr = np.sqrt(d.x**2 + d.y**2 + d.z**2)\ntheta = np.arctan2(np.sqrt(d.x**2 + d.y**2), d.z)\nphi = np.arctan2(d.y, d.x)\n```\n\n\nI get shapes of:\n\n```\nIn [212]: r.shape\nOut[212]: (10, 10, 1)\n\nIn [214]: theta.shape\nOut[214]: (10, 10)\n\nIn [216]: phi.shape\nOut[216]: (10,)\n```\n\n\nI would like to see the ```\n(10, 10, 1)```\n shape that I get for r for all of them. \n\nIt looks like xarray's fancy broadcasting only kicks in for basic arithmetic operations and the numpy functions are broadcasting naively. \n\nIs this correct?\n\nIs there an approved way to get around this? I can write my own xarray aware arctan2 function which gets the broadcasting right, but I am hoping I don't have to.\n    ", "Answer": "\r\nUnfortunately, NumPy functions generally don't do appropriate broadcasting on xarray objects. But xarray does come with wrapped versions of many of these functions, including ```\narctan2```\n, in the ```\nxarray.ufuncs```\n module. So ```\nxarray.ufuncs.arctan2```\n should do exactly what you're looking for.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How does xarray broadcasting work with numpy functions?\r\n                \r\nI am trying to do a coordinate transformation with my xarray coordinates so \n\nI have a DataArray like:\n\n```\nd = xr.DataArray(np.zeros((10, 10, 1)), dims=['x', 'y', 'z']\n```\n\n\nand am doing operations like:\n\n```\nr = np.sqrt(d.x**2 + d.y**2 + d.z**2)\ntheta = np.arctan2(np.sqrt(d.x**2 + d.y**2), d.z)\nphi = np.arctan2(d.y, d.x)\n```\n\n\nI get shapes of:\n\n```\nIn [212]: r.shape\nOut[212]: (10, 10, 1)\n\nIn [214]: theta.shape\nOut[214]: (10, 10)\n\nIn [216]: phi.shape\nOut[216]: (10,)\n```\n\n\nI would like to see the ```\n(10, 10, 1)```\n shape that I get for r for all of them. \n\nIt looks like xarray's fancy broadcasting only kicks in for basic arithmetic operations and the numpy functions are broadcasting naively. \n\nIs this correct?\n\nIs there an approved way to get around this? I can write my own xarray aware arctan2 function which gets the broadcasting right, but I am hoping I don't have to.\n    ", "Answer": "\r\nUnfortunately, NumPy functions generally don't do appropriate broadcasting on xarray objects. But xarray does come with wrapped versions of many of these functions, including ```\narctan2```\n, in the ```\nxarray.ufuncs```\n module. So ```\nxarray.ufuncs.arctan2```\n should do exactly what you're looking for.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How can I pass an arithmetic operator based on a condition in JS ? Say + for 'add' and * for 'times'\r\n                \r\nI am writing a JS program, where i have a condition to make some arithmetic operations based on the input.\nI need to add two values if i encounter the operation type as 'add' and multiply if i get 'times' as my operator value.\n\nI tried using basic if conditions which can solve my problem , but also gives a lot of boiler plate code. I am trying to minimise the code and optimise it more.\n\nHere is what i tried\n\n```\nif (otMethod === 'add') {\n    if (method === 'add'){\n        // some computation\n            result = ( (num + value) + otValue);\n        // some more computation \n    }\n        else{\n        // some computation\n        result = ( (num * value) + otValue);\n        // some more computation \n    }\n} else {\n    if (method === 'add'){\n        // some computation\n            result = ( (num + value) * otValue);\n        // some more computation \n    }\n        else{\n        // some computation\n        result = ( (num * value) * otValue);\n        // some more computation \n    }\n}\n```\n\n\nIn this , i had to change the OT calculation based on ```\notMethod```\n and had to do arithmetic operation over num based on method ```\nvalue```\n. \n\nWhat my question is , can we dynamically pass the operator itself based on the condition of ```\nmethod```\n and ```\notMethod```\n, so i can reduce the number of if conditions.\nThanks in advance!\n    ", "Answer": "\r\nYou can't pass the operator themselves but you don't need to use operators. You can just use functions instead:\n```\nfunction add (a,b) { return a+b }\nfunction times (a,b) { return a*b }\n\nvar op = {\n    add: add,\n    times: times\n}\n\nresult = op[otMethod](op[method](num, value),otValue);\n```\n\nYou can make it more readable by formatting it as follows:\n```\nresult = op[otMethod](\n             op[method](\n                 num,\n                 value\n             ),\n             otValue\n         );\n```\n\nWhat this boils down to is you are executing the functions and passing the result to another function. For example, if both ```\notMethod```\n and ```\nmethod```\n are ```\nadd```\n it becomes:\n```\nresult = add( add(num,value), otValue )\n```\n\nPutting the functions in an object allows us to use the square bracket notation to choose which function to execute. The format of the operation above actually has a formal name: it is called the Polish notation.\nIf you can use ES6 then the arrow function syntax makes the code really terse:\n```\nvar op = {\n    add: (a,b) => a+b,\n    times: (a,b) => a*b\n}\n```\n\n\nEpilogue - Polish Notation\nBasically the regular notation formula\n```\n(a + b) * c```\n becomes\n```\n* + a b c```\n in Polish notation.\nThe advantage of Polish notation is that it does not require braces to denote operator precedence and also the operator and values are naturally in function call format:\n```\n*( +(a,b), c)```\n.\nThe programming language Lisp actually function like this. In Lisp ```\n+```\n and ```\n*```\n are not operators but functions.\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Creating simple addition and subtraction program in ARM Assembly\r\n                \r\nI'm new to ARM assembly, and I'm struggling to utilize the basic arithmetic. I'm trying to create two programs, one that adds two numbers and stores the result to a register, and another that subtracts to numbers and stores the result to a register. I feel I'm pretty close but I'm not for sure and might need a bit of guidance. With these two programs I'm assuming that the numbers are stored in memory. Here's the addition program:\n```\n.global_start:\n_start:\n    mov r0, #1       // Moves the first number into the register r0.\n    mov r1, #2       // Moves the second number into register r1.\n    add r2, r1, r0   // Adds r0 and r1 and stores the result in register r2.\n```\n\nAnd here's the subtraction program:\n```\n.global_start:\n_start:\n    mov r0, #1       @ Moves the first number into the register r0.\n    mov r1, #2       @ Moves the second number into register r1.\n    sub r2, r0, r1   @ Subtracts r1 from r0 and stores the result in register r2.\n```\n\nThese could be completely wrong, but I'm extremely new to ARM ASM!\nAny advice or guidance would be very helpful!\n    ", "Answer": "", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Ceil function using limited set of arithmetic operators\r\n                \r\nIs it possible to calculate a ceiling (e.g ```\nceil(2.12) = 3```\n) with only a few arithmetic operations available: ```\n* - + /```\n \nI.e. without casting and other software tricks, only using division/mul/sub/addition and comparison operators?\n\nClarifications:\n\n\nComplexity is important, but I will be glad to hear any solutions.\nModulus not available.\nValues are positive. \nOperations are not rounding.\nBy software tricks I meant mod, bit level manipulations, etc.\n\n\nBasically I have a system which allows assigning expressions to variables where expression can contain only the above 4 arithmetic operation, comparisons, and loops. E.g.\n\nvar x = if (A * (1.434 + 0.4325)) > 54.4534) then 45.6\n    else then 43.435\n\nand I would like to do \n\nvar x = CEIL(...)\n    ", "Answer": "\r\nIt is possible, but don't expect any amazing performance. The simplest algorithm (```\nth(x)```\n) is:\n\n```\nfrac = x;\nwhile(frac<0) frac+=1;\nwhile(frac>=1) frac-=1;\n\nif(frac>0) return x-frac+1;\nelse return x;\n```\n\n\nYou can do better via binary search (```\nth(log x)```\n):\n\n```\nlower = 0;\nupper = 0;\nif(x>0){\n  upper = 1;\n  while (x > upper) upper *= 2;\n}else if(x<0){\n  lower = -1;\n  while (x > lower) lower *= 2;\n}\n\nwhile(upper-lower > 1){\n  //mid is guaranteed to be integer, since the upper-lower is a power of two\n  mid = (upper+lower)/2; \n  if(x > mid) lower = mid;\n  else if(x < mid) upper = mid;\n  else return mid;\n}\n\nreturn upper; // lower for floor\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is there an easy way to implement binary arithmetic without 2's compliment?\r\n                \r\nAs a beginner computer science student, please excuse my limited knowledge of the field.\nInitially, we learned how to perform the following basic binary arithmetic manually.\n\nHow to do addition with binary numbers\n\nHow to do subtraction with binary numbers\n\n\nHowever, even as a novice programmer, I realized that the methods we learned by hand are challenging to translate into computer code algorithms example. Maybe this is just a personal perception.\nLater, we studied 2's complement, which made things a bit easier (e.g., negative numbers were simpler to implement and subtraction was now just the addition of negative numbers).\nMy question is, was there a way to perform all arithmetic operations (multiplication, division, addition, and subtraction) without using 2's complement? Or was the invention of 2's complement solely for this purpose? This is a purely pedagogical exercise.\n    ", "Answer": "\r\n2's complement works great. What exactly would you want to improve? It can deal with arbitrarily large numbers, and only uses a chain of very simple processing units to do its job.\n\nThe main exception is with floating point numbers, which don't use 2's complement. I'm sure you'll learn about IEEE-754 soon, it's a lot of fun :)\n\nFinally, noöne is forcing you to use 2's complement. You can do whatever you want, it's just that 2's is great and cheap. You can make your software calculate everything in Roman numerals if you so desire. It's not going to be very fast, though.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Bash script for renaming files, using modular arithmetic?\r\n                \r\nI've got a series of files that are namedHHMMSSxxxxxxxxxxxxxxxx.mp3, where HH,MM, and SS are parts of a timestamp and the x's are unique per file.\n\nThe timestamp follows a 24 hour form (where 10am is 100000, 12pm is 120000, 6pm is 180000, 10pm is 220000, etc). I'd like to shift each down by 10 hours, so that 10am is 000000, 12pm is 020000, etc.\n\nI know basic BASH commands for renaming and moving, etc, but I can't figure out how to do the modular arithmetic on the filenames.\n\nAny help would be very much appreciated.\n    ", "Answer": "\r\n```\n#!/bin/bash\nfor f in *.mp3\ndo\n    printf -v newhour '%02d' $(( ( 10#${f:0:2} + 14 ) % 24 ))\n    echo mv \"$f\" \"$newhour${f:2}\"\ndone\n```\n\n\nRemove the ```\necho```\n to make it functional.\n\nExplanation:\n\n\n```\nprintf -v newhour '%02d'```\n - this is like ```\nsprintf()```\n, the value is stored in the named variable\n```\n$(( ( 10#${f:0:2} + 14 ) % 24 ))```\n - ```\n10#```\n forces the number to base 10 (e.g. ```\n08```\n would otherwise be considered an invalid octal), ```\n${f:0:2}```\n extracts the first two characters (the hour), the rest does the math\n```\n\"$newhour${f:2}\"```\n - prepend the new hour before the substring of the original name, starting at the third character\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "R does not import values as numbers\r\n                \r\nBasic data was generated using a SQL query and the intention is to process data in R. However, while importing from a ```\n.csv```\n or from ```\n.xlsx```\n, R imports numbers as characters in spite of changing the data-type in the built-in ```\nimport```\n tool. Further, while performing basic arithmetic operations, following errors were encountered:\n ```\nIn Ops.factor((data$A), (data$B)) :‘/’ not meaningful for factors```\n\n\nIs there a simple way to solve this?\n\n\nData-set was analysed using the ```\nstr()```\n function, which revealed that R imported the particular columns as ```\nfactors```\n.   \nUsed package ```\nvarhandle```\n and function ```\nunfactor```\n to unfactorize the data\nUsed ```\nas.numeric```\n for some columns which were read as ```\ncharacters```\n instead of ```\nfactors```\n\nTried changing data-types in Excel before importing\n\n```\ndata$A <- unfactor(data$A)```\n\n\n```\ndata$B <- unfactor(data$B)```\n\n\n```\ndata$PERCENTAGE <- (data$B)/(data$A)*100```\n\n\n\nBy what means can R import the data as per specified data-types?\n\nThank you for the help in advance!\n    ", "Answer": "\r\nFor csv files I would recommend read_csv from Hadley Wickham's excellent Tidyverse package. It has intelligent defaults that cope with most things I throw at it. \n\nFor .xlsx, there is read_excel, also from the Tidyverse package (there are other packages available).\nOr, alternatively just  export a .csv from within Excel and use read_csv.\n\n[Note the Tidyverse's will import these files as a \"tibble\" which is essentially a data frame on steroids without some of the headaches but is easily converted to a data.frame if you prefer.]\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "When is operation complexity such that dplyr rowwise is needed?\r\n                \r\nAccording to the documentation the dplyr ```\nrowwise```\n operator can be used to \"support arbitrary complex operations that need to be applied to each row\".  I find this a little vague.  For example, addition does not appear to rise to the level of complexity required for a rowwise:\n\n```\ndf <- data.frame( a =  c(1,2,3,4), b = c(5,6,7,8)) \ndf %>% \n  mutate(\n    c = a+b,\n  )\n\n  a b  c\n1 1 5  6\n2 2 6  8\n3 3 7 10\n4 4 8 12\n```\n\n\nBut a very similar function, ```\nsum```\n does.  For example:\n\n```\ndf %>%\n  mutate(\n    d = sum(a,b)\n  ) %>%\n  rowwise() %>%\n  mutate(\n    e = sum(a,b)\n  )\n\n  a b  d  e\n1 1 5 36  6\n2 2 6 36  8\n3 3 7 36 10\n4 4 8 36 12\n```\n\n\nMy question is, when exactly do we need to use ```\nrowwise```\n in the course of dplyr operations? Anytime the operation is not a basic arithmetic one or are there some other rules for when an operation will be automatically treat its inputs as rowwise vs column wise?\n    ", "Answer": "\r\nI think the short answer is that ```\nsum```\n, ```\nmax```\n is not \"vectorised\", it acceps multiple vectors and gives you the aggregated answer, a bit weird. I usually try to use functions that dont require ```\nrowwise```\n since it is slow, and the risk of error is high. An solution to your simple case could be:\n\n```\nlibrary(hablar)\nlibrary(dplyr)\n\ndf <- data.frame( a =  c(1,2,3,4), b = c(5,6,7,8)) \n\ndf %>% mutate(c = row_sum(a:b))\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Function plot from points result of other function combinations\r\n                \r\nI have 2 functions declared in wxmaxima: ```\nf1(x, y)```\n and ```\nf2(x, y)```\n. Both contain if-then-else statements and basic arithmetic operations: addition, subtraction, multiplication and division.\nFor example (just an example, real functions look much more complicated):\n\n```\nf1(x, y) := block([],\n    if x * y < 123 then x + y\n    else if x / y > 7 then x - y\n);\n```\n\n\nIn both functions ```\nx```\n and ```\ny```\n change from 0.1 to 500000.\nI need a 3D plot (graph) of the following points:\n\n```\n(x, y, z), where f1(x, y) == f2(z, x)\n```\n\n\nNote that it's impossible to extract ```\nz```\n out from the equation above (and get a new shiny function ```\nf3(x, y)```\n), since ```\nf1```\n and ```\nf2```\n are too complex.\n\nIs this something possible to achieve using any computational software?\n\nThanks in advance!\n\nEDIT:\nWhat I need is the plot for \n\n```\nF(x, y, z) = 0\n```\n\n\nwhere\n\n```\nF(x, y, z) = f1(x, y) - f2(z, x)\n```\n\n    ", "Answer": "\r\nFor Maxima, try ```\nimplicit_plot(f1(x, y) = f2(x, y), [x, <x0>, <x1>], [y, <y0>, <y1>])```\n where ```\n<x0>, <x1>, <y0>, <y1>```\n are some floating point numbers which are the range of the plot. Note that ```\nload(implicit_plot)```\n is needed since ```\nimplicit_plot```\n is not loaded by default.\n\nAs an aside, I see that your function ```\nf1```\n has the form ```\nif <condition1> then ... else if <condition2> then ...```\n and that's all. That means if both ```\n<condition1>```\n and ```\n<condition2>```\n are false, then the function will return false, not a number. Either you must ensure that the conditions are exhaustive, or put ```\nelse ...```\n at the end of the ```\nif```\n so that it will return a number no matter what the input. \n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "ARM-Assembly: Arithmetic Shift / Logical Shift\r\n                \r\nI'm a bit stuck finding out in which way those 2 operations are different. So I read that Arithmetic shift is basically the same as Logical with the only difference, that it somehow keeps the highest or signed bit.\n\nSo when I do LSL #2 on 101110 assuming that this binary is a unsigned one, the result would be: 111000 and the carry bit would be set in the CPSR, right?\n\nWhen I perform ASL #2 on the same number, what would be the result and how does it keep the signed bit? What about ASR #2 on the above binary? Would the result be 101011?\n\nUnfortunately I've only found a really rough description about Arithmetic shift. Thanks in advance!\n    ", "Answer": "\r\nI had hard time to understand the real difference between LSR and ASR but hope this image helps you to understand the same.\nIn LSR(```\nLogical Shift Right```\n) the MSB(```\nMost Significant Bit```\n) is replaced by 0 where as In ASR(```\nArithematic Shift Right```\n) MSB is same as the earlier MSB before being shifted .(Similar for Left Shift)\nASR is useful in computing with signed values in two-complement representation.\n\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Is it possible to increment the modulo operator in later loop iterations?\r\n                \r\nI am trying to construct a simple program which adds together the digits of a long number. I attempted to do this by using a loop employing the modulo operator and some basic arithmetic. I want to increment the modulo operator by multiplying it by ten on each iteration of the loop in order to reach the next digit. I want to check if my code is correct, however, I receive errors pertaining to the lines involving the modulo operations and I'm not quite sure why.\nThis was my attempted construction:\n```\n{\n    long i = 0;\n    long b;\n    int m = 1;\n    do\n    {\n        long number = get_long(\"Number?\\n\");\n        long a = number % m;\n        b = number - a;\n        long c = b % m x 10;\n        long d = c / m;\n        {\n            i = i + d;\n        }\n        {\n            m = m x 10\n        }\n    }\n    while (b > 0);\n    printf(\"%ld\\n\", i);\n}\n```\n\nEdit:\nI made the basic error of writing \"x\" instead of \"*\". However, having fixed this, I no longer receive errors, but the program simply returns \"0\". Any diagnosis would be appreciated.\n```\nint main(void)\n{\n    long i = 0;\n    long b;\n    int m = 10;\n    long number = get_long(\"Number?\\n\");\n    do\n    {\n        long a = number % m;\n        b = number - a;\n        long c = b % m * 10;\n        long d = c / m;\n        {\n            i = i + d;\n        }\n        {\n            m = m * 10;\n        }\n    }\n    while (b > 0);\n    printf(\"%ld\\n\", i);\n}\n```\n\n    ", "Answer": "\r\nFor your revised code:\n```\nlong c = b % m * 10;\n```\n\nthis line will evaluate ```\n(b % m)```\n and then multiply it by 10 because of the order of operations.\nI presume what you actually want is:\n```\nlong c = b % (m * 10);\n```\n\nSecondly, the following line determines which digit you start at:\n```\nint m = 10;\n```\n\nand this line determines how many digits between the ones you include in your total:\n```\nm = m * 10;\n```\n\nSo for this configuration, it will start at the 2nd digit from the right and add every digit.\nSo for the number ```\n1234```\n, you'd get ```\n3 + 2 + 1 = 6```\n.\nIf you want to add every digit, you could set:\n```\nint m = 10;\n```\n\nand you'd get ```\n4 + 3 + 2 + 1 = 10```\n.\nAlternatively, if you had used:\n```\nm = m * 10;\n```\n\nyou'd have ```\n3 + 1 = 4```\n.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Safe arithmetic with numbers smaller than machine precision?\r\n                \r\nThis appears to be a very basic question, yet I'm still not sure I understand correctly.\n\nSay I have defined some very small and large numbers\n\n```\n    constexpr double a = 1.53636e-34;\n    constexpr double b = 6.12362e-36;\n    constexpr double c = 6.92956e+19;\n```\n\n\nand want to use them for some arithmetic. Is it safe to do so in double precision where only 16 digits are significant?\n\nEDIT: Let's use an example. Say we want to obtain the speed of light in atomic units. It's defined as:\n\n```\n    double c = 2 * epsi * h * col / (e * e);\n```\n\n\nwhere\n\n```\n    double e = 1.602176634e−19;\n    double h = 6.62607015e−34;\n    double col = 299792458;\n    double epsi = 8.8541878128e−12;\n```\n\n\nWe obviously don't care about everything that happens after the ninth decimal place or so. What we do care about though is that the above consistently evaluates to 137.035999....    \n\nEDIT2: Formula was wrong.\n    ", "Answer": "\r\nThe relative precision of IEEE-754 floating point numbers using 64 bits (commonly ```\ndouble```\n in C++) is constant* for values with magnitudes between about 10-308 and 10308.\n\nWithin this range, you can expect about 15-16 decimal significant digits after the decimal point when you write the numbers in normalized scientific notation.\n\n*Well, stays within a narrow margin:\nhttps://en.wikipedia.org/wiki/IEEE_754-1985#/media/File:IEEE_754_relative_precision.svg\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to write a Parser in C#? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 7 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nHow do I go about writing a Parser (Recursive Descent?) in C#? For now I just want a simple parser that parses arithmetic expressions (and reads variables?). Though later I intend to write an xml and html parser (for learning purposes). I am doing this because of the wide range of stuff in which parsers are useful: Web development, Programming Language Interpreters, Inhouse Tools, Gaming Engines, Map and Tile Editors, etc. So what is the basic theory of writing parsers and how do I implement one in C#? Is C# the right language for parsers (I once wrote a simple arithmetic parser in C++ and it was efficient.  Will JIT compilation prove equally good?). Any helpful resources and articles. And best of all, code examples (or links to code examples). \n\nNote: Out of curiosity, has anyone answering this question ever implemented a parser in C#?\n    ", "Answer": "\r\nI have implemented several parsers in C# - hand-written and tool generated.\n\nA very good introductory tutorial on parsing in general is Let's Build a Compiler - it demonstrates how to build a recursive descent parser; and the concepts are easily translated from his language (I think it was Pascal) to C# for any competent developer. This will teach you how a recursive descent parser works, but it is completely impractical to write a full programming language parser by hand.\n\nYou should look into some tools to generate the code for you - if you are determined to write a classical recursive descent parser (TinyPG, Coco/R, Irony). Keep in mind that there are other ways to write parsers now, that usually perform better - and have easier definitions (e.g. TDOP parsing or Monadic Parsing).\n\nOn the topic of whether C# is up for the task - C# has some of the best text libraries out there. A lot of the parsers today (in other languages) have an obscene amount of code to deal with Unicode etc. I won't comment too much on JITted code because it can get quite religious - however you should be just fine. IronJS is a good example of a parser/runtime on the CLR (even though its written in F#) and its performance is just shy of Google V8.\n\nSide Note: Markup parsers are completely different beasts when compared to language parsers - they are, in the majority of the cases, written by hand - and at the scanner/parser level very simple; they are not usually recursive descent - and especially in the case of XML it is better if you don't write a recursive descent parser (to avoid stack overflows, and because a 'flat' parser can be used in SAX/push mode).\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Safe arithmetic with numbers smaller than machine precision?\r\n                \r\nThis appears to be a very basic question, yet I'm still not sure I understand correctly.\n\nSay I have defined some very small and large numbers\n\n```\n    constexpr double a = 1.53636e-34;\n    constexpr double b = 6.12362e-36;\n    constexpr double c = 6.92956e+19;\n```\n\n\nand want to use them for some arithmetic. Is it safe to do so in double precision where only 16 digits are significant?\n\nEDIT: Let's use an example. Say we want to obtain the speed of light in atomic units. It's defined as:\n\n```\n    double c = 2 * epsi * h * col / (e * e);\n```\n\n\nwhere\n\n```\n    double e = 1.602176634e−19;\n    double h = 6.62607015e−34;\n    double col = 299792458;\n    double epsi = 8.8541878128e−12;\n```\n\n\nWe obviously don't care about everything that happens after the ninth decimal place or so. What we do care about though is that the above consistently evaluates to 137.035999....    \n\nEDIT2: Formula was wrong.\n    ", "Answer": "\r\nThe relative precision of IEEE-754 floating point numbers using 64 bits (commonly ```\ndouble```\n in C++) is constant* for values with magnitudes between about 10-308 and 10308.\n\nWithin this range, you can expect about 15-16 decimal significant digits after the decimal point when you write the numbers in normalized scientific notation.\n\n*Well, stays within a narrow margin:\nhttps://en.wikipedia.org/wiki/IEEE_754-1985#/media/File:IEEE_754_relative_precision.svg\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to write a Parser in C#? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 7 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nHow do I go about writing a Parser (Recursive Descent?) in C#? For now I just want a simple parser that parses arithmetic expressions (and reads variables?). Though later I intend to write an xml and html parser (for learning purposes). I am doing this because of the wide range of stuff in which parsers are useful: Web development, Programming Language Interpreters, Inhouse Tools, Gaming Engines, Map and Tile Editors, etc. So what is the basic theory of writing parsers and how do I implement one in C#? Is C# the right language for parsers (I once wrote a simple arithmetic parser in C++ and it was efficient.  Will JIT compilation prove equally good?). Any helpful resources and articles. And best of all, code examples (or links to code examples). \n\nNote: Out of curiosity, has anyone answering this question ever implemented a parser in C#?\n    ", "Answer": "\r\nI have implemented several parsers in C# - hand-written and tool generated.\n\nA very good introductory tutorial on parsing in general is Let's Build a Compiler - it demonstrates how to build a recursive descent parser; and the concepts are easily translated from his language (I think it was Pascal) to C# for any competent developer. This will teach you how a recursive descent parser works, but it is completely impractical to write a full programming language parser by hand.\n\nYou should look into some tools to generate the code for you - if you are determined to write a classical recursive descent parser (TinyPG, Coco/R, Irony). Keep in mind that there are other ways to write parsers now, that usually perform better - and have easier definitions (e.g. TDOP parsing or Monadic Parsing).\n\nOn the topic of whether C# is up for the task - C# has some of the best text libraries out there. A lot of the parsers today (in other languages) have an obscene amount of code to deal with Unicode etc. I won't comment too much on JITted code because it can get quite religious - however you should be just fine. IronJS is a good example of a parser/runtime on the CLR (even though its written in F#) and its performance is just shy of Google V8.\n\nSide Note: Markup parsers are completely different beasts when compared to language parsers - they are, in the majority of the cases, written by hand - and at the scanner/parser level very simple; they are not usually recursive descent - and especially in the case of XML it is better if you don't write a recursive descent parser (to avoid stack overflows, and because a 'flat' parser can be used in SAX/push mode).\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How do I determine the highest value of three columns from the same row, Python, SQLite3\r\n                \r\nI am trying to display the results of a basic arithmetic test created in python, the test is repeated three times and collects three scores, this works fine, however whe I try to display these by the highest score of the three in descending order I am displayed an error message. which is as follows.\n\n```\nTraceback (most recent call last):\n  File \"F:\\Adair,Rowan CA2\\Task 3\\Code\\DisplayTablesScore.py\", line 4, in <module>\n    cursor.execute(\"SELECT * FROM class1 ORDER BY (score1,score2,score3) DESC\")\nsqlite3.OperationalError: near \",\": syntax error\n```\n\n\nHowever when it is organised by one of the columns e.g. only score 1 it works fine. \nThe code that I cannot figure out how to fix is below.\n\n```\nimport sqlite3\nconnection = sqlite3.connect(\"class1.db\")\ncursor = connection.cursor()\ncursor.execute(\"SELECT * FROM class1 ORDER BY (score1,score2,score3) DESC\")\nprint(\"Class 1:\")\nresult = cursor.fetchall() \nfor r in result:\n    print(r)\n```\n\n\nAny help with this would be immensly appreciated, I am also trying to determine the average aswell.\n    ", "Answer": "\r\nFirst the syntax of ORDER BY its wrong, should be\n\n```\nSELECT * FROM class1 ORDER BY score1 DESC, score2 DESC, score3 DESC;\n```\n\n\nBased in the response of Max of multiple columns, if you need to order by the high score of the columns, you need to calculate them\n\n```\nSELECT score1, score2, score3,\n    CASE\n    WHEN score1 >= score2 AND score1 >= score3 THEN score1\n    WHEN score2 >= score1 AND score2 >= score3 THEN score2\n    WHEN score3 >= score1 AND score3 >= score2 THEN score3\n    ELSE score1\nEND AS high_score FROM class1 ORDER BY high_score DESC;\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How do I work with high precision decimals in PHP\r\n                \r\nI am trying to create a database-driven website with PHP and with data stored in a PostgreSQL database, (accessed with PDO) and I will be needing to store and manipulate high precision decimal numbers (in some cases, more than 20 digits after the decimal). \n\nI am planning on using the NUMERIC or DECIMAL datatypes in my database to store this data, in order to maintain the high levels of precision needed. \n\nWhat is the best way to use PHP to (1) access these values, and (2) perform basic arithmetic on such high-precision numbers?\n\nI don't want to just use floats, since that datatype can be imprecise.\n\nThanks! \n    ", "Answer": "\r\nCheck out the GNU Multiple Precision and BC Math extensions.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Using <form> and <input> elements as an input for JavaScript code. Is this the best way to do this?\r\n                \r\nFolks,\nI am newbie to coding, obviously, so having completed few Lynda courses recently on HTML and Javascript, I have hit a wall with my simple HTML page. Basically, what I want is to do a basic calculation with JavaScript to have the user enter the two numbers using HTML  form/ input elements and do a basic arithmetic calculation on JS. For some reason the code is not working. Can somebody point me to the right direction as why those input values are not being read by JS? Is getElementById the correct way?\n\nAlso, I am using the console.log to dislpay the results as I don't know yet how to have it displayed on the HTML page as a text below the submit button.\n\nThe HTML code:\n\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Accurate Mass Error Calculator</title>\n    </head>\n    <body>\n        <h1> Accurate Mass Error Calculator </h1>\n        <p> Please enter the values below for each field:</p>\n        <form onsubmit=\"return calculateError()\" method=\"post\">\n            <p> Exact Theoretical Mass: <input id=\"exactMass\" type=\"number\" step=\"any\" name=\"exactMass\"/></p>\n            <p> Accurate Experimental Mass: <input id=\"accurateMass\" type=\"number\" step=\"any\" name=\"accurateMass\"/></p>\n            <p> <input id=\"submitButton\" type=\"submit\" name=\"submit1\" value=\"Calculate\" onclick=\"return calculateError()\" /></p>\n        </form> \n        <script type=\"text/javascript\" src=\"ppmError.js\"></script>\n    </body>\n</html>\n```\n\n\nThe JS code(ppmError.js):\n\n```\nfunction calculateError () {\n    var exactMass=document.getElementById(\"exactMass\");\n    var accurateMass=document.getElementById(\"accurateMass\");\n    var ppmError=(accurateMass.value-exactMass.value)/exactMass.value*1000000;\nif (isNaN (ppmError) ) {\n    console.log (\"Not a valid Entry! Please try again.\")\n} else {\n    console.log(ppmError);\n    }\n}\n```\n\n    ", "Answer": "\r\nAs Satpal said in the comment you should indeed cast your text to an int with :\n\n```\nvar exactMass = parseInt(document.getElementById(\"exactMass\").value);\nvar accurateMass = parseInt(document.getElementById(\"accurateMass\").value);\nvar ppmError=(accurateMass-exactMass)/exactMass*1000000;\n```\n\n\nFor your other question, in your html add an empty paragraph where you want to display your result\n\n```\n<p id=\"result\"></p>```\n\n\nAnd instead of calling ```\nconsole.log```\n you can do :\n\n```\ndocument.getElementById('result').innerHTML = ppmError;\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "using yyparse() and fprintf\r\n                \r\nI've a piece of code for a compiler for basic arithmetic (add, diff). In my mparse.y yacc file, I've read input from a file in main function. To invoke parsing, I've put the condition as follows:\n\n```\nif(yyparse()==0)\n  fprintf(stderr,\"Parsing complete.\");\n```\n\n\nthe last statement of yyparse, after completion is supposed to be:\n\n```\nprintf(\"The last statement of yyparse\");\n```\n\n\nThe problem is, if I use fprintf(), I get the following absurd output:\n\n```\nParsing Complete\nThe last statement of yyparse.\n```\n\n\nWhereas, if I use printf instead of fprintf, I get the normal output.\n\n```\nThe last statement of yyparse\nParsing complete.\n```\n\n\nShouldn't the second option be correct, ie, all the statements of yyparse should be executed first and then the printf after if? Why this weird behaviour?\n    ", "Answer": "\r\nThis is the result of stderr and stdout being buffered differently. It has nothing to do with yyparse.\n\nStdout is normally line buffered, which means that output is kept in a buffer until a newline is printed or the file descriptor is closed.\n\nStdout is normally unbuffered, so its output is immediate.\n\nIf you mix output to stdout and stderr, the order of actual output can be inverted.\n\nBy the way, if you just want to output a fixed string, it is better to use ```\nputs(msg)```\n (to print to stdout) or ```\nfputs(msg, file)```\n. ```\nputs```\n automatically outputs a newline at the end of the string; if for some reason you don't want that, use ```\nfputs(msg, stdout)```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Arithmetic operations across rows in pandas dataframe\r\n                \r\nHow do I perform an arithmetic operation across rows and columns for a data frame like the one shown below?\nFor example I want to calculate gross margin (gross profit/Revenue) - this is basically dividing one row by another row. I want to do this across all columns.\n\n    ", "Answer": "\r\nI think you need to restructure your dataframe a little bit to do this most effectively. If you transposed your dataframe such that Revenue, etc were columns and the years were the index, you could do:\n```\ndf[\"gross_margin\"] = df[\"Gross profit\"] / df[\"Revenue\"]\n```\n\nIf you don't want to make so many changes, you should at least set the metric as the index.\n```\ndf = df.set_index(\"Metric\")\n```\n\nAnd then you could:\n```\ngross_margin = df.loc[\"Gross profit\", :] / df.loc[\"Revenue\", :]\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Options for deploying basic ML scripts with serverless\r\n                \r\nAn API I am building on AWS Lambda has some basic scikit-learn/numpy operations, such as vector arithmetic and clustering. However, the dependencies are very large (scipy = 100M+) and cause issues with deployment limits for a lot of the serverless solutions out there (e.g. lambda = 250MB limit). These dependencies also exceed layer limits.\nI'm guessing this is a basic problem for ML engineers, so I'm wondering what the defacto practice for a microservice based architectures is. Is it typical for organizations to host all custom ML logic to a service like AWS Sagemaker, even if it's something as simple as SKLearn? Note: I'm not looking to migrate to docker (asked here).\n    ", "Answer": "\r\nWell, yes. SageMaker offers 1P(first party) containers in your case for SKLearn(here) that you could leverage to host. Additonally, SageMaker offers Serverless Inference where you don't need to configure any instances behind the endpoint explicitly, you can provide the max_concurrency and memory that your model requires. Some examples on Serverless Inference can be found here.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Overloading Addition, Subtraction, and Multiplication Operators\r\n                \r\nHow do you go about overloading the addition, subtraction, and multiplication operator so we can add, subtract, and multiply two vectors of different or identical sizes? For example, if the vectors are different sizes we must be able to add, subtract, or multiply the two vectors according to the smallest vector size?\n\nI've created a function that allows you to modify different vectors, but now I'm struggling to overload the operators and haven't a clue on where to begin. I will paste the code below. Any ideas? \n\n```\ndef __add__(self, y):\n    self.vector = []\n    for j in range(len(self.vector)):\n        self.vector.append(self.vector[j] + y.self.vector[j])\n    return Vec[self.vector]\n```\n\n    ", "Answer": "\r\nYou define the ```\n__add__```\n, ```\n__sub__```\n, and ```\n__mul__```\n methods for the class, that's how.  Each method takes two objects (the operands of ```\n+```\n/```\n-```\n/```\n*```\n) as arguments and is expected to return the result of the computation.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How can one implement | and & (bitor,bitand) using +-*/%?\r\n                \r\nHow to implement bitOR and bitAND operation (on two variable-sized ints, but at least as small as 8 bits)  using just basic arithmetics? I don't care about execution speed, the most important is the simplicity and size of code. I've managed to get negation, xor and shifts implemented.\n    ", "Answer": "\r\nIf you already have xor, then I propose the following:\n\n```\nbitAnd(a,b) = ((a+b) - bitXor(a,b)) / 2\n```\n\n\nwhere / 2 is (truncated) integer quotient of division by 2 (or bit shift 1 place to the right).\n\nBeware, integers must be sufficiently wide to not overflow!\nIf we loose highest bit in ```\n(a+b)```\n operation, then the operation will not work.\n\nThen you can reconstruct bitOr with one of:\n\n```\nbitOr(a,b) = bitXor(a,b) + bitAnd(a,b)\nbitOr(a,b) = (a+b) - bitAnd(a,b)\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Arithmetic combination of multiple rows into one row - Oracle SQL\r\n                \r\nI am currently working with oracle SQL with a database with different metrics. However, what I'm looking for is an arithmetic combination of the different metrics. All of this information is currently in one table.\n\nIdeally I would create a new metric through basic math of currently stored data. I would not need any of the current output, just it's combination into the new metric.\n\nI don't know how to limit it to know that for each specific building/date to only combine metric Z,X and Y.\n\nCurrent Output:  \n\n```\nDate      Building    Metric    Performance```\n\n```\n--------------------------------------------```\n\n```\n12/1/19      A         Z            1```\n\n```\n12/1/19      A         Y            2```\n\n```\n12/1/19      A         X            3```\n\n\nDesired Output (functionally):\n```\n12/1/19      A         W         =(1+2)/3```\n  \n\nThank you!\n    ", "Answer": "\r\nI am assuming that what you have shown is your question is table and what you want is some of the constants and aggregation of values.\n\nUse ```\ngroup by```\n with ```\naggregate function```\n as following:\n\n```\nSelect date, building, 'W' as metric,\n       Sum(case when metric in ('Y', 'Z') then performance end) \n      / sum(case when metric ='X' then performance end)\nFrom your_table\nWhere metric in ('X','Y','Z')\nGroup by date, building\nHaving count(distinct metric) = 3\n```\n\n\nAlso, handle the situation where ```\nperformance```\n against X is not 0 by adding condition on ```\nsum```\n of X.\n\nCheers!!\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "How to avoid/resolve overflow in arithmetic operation\r\n                \r\nI'm just getting into Unity and C#, trying to code a script for calculator with 2 input fields, buttons for necessary arithmetic operations and a \"Result\" text field. All basic functions are working fine, but while messing with the input values for Power I encountered this issue of overflowing value in resulting variable. Googling various solutions I settled with this one shown in the code below. Problem is, mentioned issue still persists, and when testing the app I am still getting this error in the console:\n\nOverflowException: Arithmetic operation resulted in an overflow.\nSystem.Decimal.op_Explicit (System.Single value) (at <695d1cc93cca45069c528c15c9fdd749>:0)\n\nI assume that the way checked-keyword is implemented in my code might be incorrect, but I can't figure out in what way.\nMy initial idea was to convert resulting value to double and set a ceiling for it, but as I understand the calculation still being done and overflow happens before I even compare value to the threshold, so it was decided to try other tools. If any other ways to avoid this error exist - it would be awesome.\n```\npublic class Calculator : MonoBehaviour\n{\n    public Text Result;\n    public InputField FirstNumber;\n    public InputField SecondNumber;\n\n    public void OnClickPower()\n    {\n\n        if (FirstNumber.text.ToString() != \"\" & SecondNumber.text.ToString() != \"\")\n        {\n            Debug.Log(\"Numbers Unequal > success\");\n            decimal i = decimal.MaxValue;\n            int j;\n            float k;\n\n            j = int.Parse(FirstNumber.text);\n            Debug.Log(\"First number > \" + j);\n\n            j = int.Parse(FirstNumber.text);\n            Debug.Log(\"Second number > \" + j);\n\n            k = Mathf.Pow(float.Parse(FirstNumber.text), float.Parse(SecondNumber.text));\n            Debug.Log(\"Result in float > \" + k);\n            decimal l = Convert.ToDecimal(k);\n            Debug.Log(\"Result in decimal > \" + l);\n\n            try\n            {\n                l = checked(i + l);\n                Result.text = l.ToString();\n            }\n            catch (OverflowException ex)\n            {\n                Debug.Log(ex);\n                Result.text = l.ToString();\n            }\n\n        }\n        else\n        {\n            Result.text = \"NO NUMBERS\";\n        }\n    }\n};\n```\n\n    ", "Answer": "\r\nUse ```\nSystem.Math```\n instead of ```\nMathf```\n if you need to handle very large values because ```\ndouble```\n supports larger values than ```\nfloat```\n.\nAs for checking if the result will overflow, just don't use ```\nPow```\n until you determine if it's safe. Think back to algebra. You can check ```\nMath.Log(Double.MaxValue, base)```\n and if the result is less than ```\nexponent```\n then you can know that ```\nMath.Pow(base, exponent)```\n will be greater than the max value, which means it will overflow.\nFor example:\n```\n// Avoid shadowing Unity's Random if you're using it.\nusing Math = System.Math; \n\n// ...\n\ndouble baseVal = Double.Parse(FirstNumber.text);\nDebug.Log(\"First number > \" + baseVal);\n\ndouble exponent = Double.Parse(SecondNumber.text);\nDebug.Log(\"Second number > \" + exponent);\n\nif (Math.Log(Double.MaxValue, baseVal) < exponent) \n{\n    // a pow would overflow, so\n    // do something reasonable\n    return;\n}\n\ndouble k = Math.Pow(baseVal, exponent);\nDebug.Log(\"Result in double > \" + k);\n```\n\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "Doing arithmetic operation on android shell\r\n                \r\nI am banging my head on the wall trying to do a floating point arithmetic operations on Android. Doing so much research forced me to use sqlite3 to get my floating point calculation done.\n\n```\nsqlite3 <<< \"SELECT 16.8/1.2\"\n```\n\n\nUnfortunately, I am restricted to not use sqlite3 in my script. I tried most of the things but I don't have ```\nbc```\n or ```\nawk```\n on my device as well. \n\nEDIT: I have to run a shell script on the android phone for an embedded project. Basically, I am working with decimal point temperature values read on the phone and I need to do an arithmetic operation on that.\n\nCan anyone give me a quick pointer here? \n\nNote: My device is not rooted. \n    ", "Answer": "\r\nYou could use the \"bc\" command in termux.\nIf you want to use it in an app, it may be possible to get the executable binary and use it as a resource.\n\nYou will also need to use sh to execute the script on command line as\n$sh script.sh. Any binaries would have to be put as resources of an app in order to be executable.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
{"Question": "use expression tree to evaluate properties of a generic class\r\n                \r\ni have to evaluate a formula which contains certain expressions, say for eg:\"column1 * column3\". These column names are dynamic and are generated only at run time. I have the class objects with me having these column names.\nThe expressions can have any basic arithmetic operators.\n\nI think this could be approached with Expression tree in c#. Would that be the best approach. If so could someone provide me some assistance on how to approach this because i could not find any good examples on Expression trees. Or whether it could/should be done using reflections.\n\nThanks\n    ", "Answer": "\r\nThat really depends, if it is not performance critical code, you are much better off with reflection, the source code will be easier to read and maintain.\n    ", "Knowledge_point": "Basic Arithmetic", "Tag": "算法分析"}
