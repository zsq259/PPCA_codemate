{"Question": "Count the number of set bits in a 32-bit integer\r\n                \r\n8 bits representing the number 7 look like this:\n```\n00000111\n```\n\nThree bits are set.\nWhat are the algorithms to determine the number of set bits in a 32-bit integer?\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to check if a number is a power of 2\r\n                \r\nToday I needed a simple algorithm for checking if a number is a power of 2.\nThe algorithm needs to be:\n\nSimple\nCorrect for any ```\nulong```\n value.\n\nI came up with this simple algorithm:\n```\nprivate bool IsPowerOfTwo(ulong number)\n{\n    if (number == 0)\n        return false;\n\n    for (ulong power = 1; power > 0; power = power << 1)\n    {\n        // This for loop used shifting for powers of 2, meaning\n        // that the value will become 0 after the last shift\n        // (from binary 1000...0000 to 0000...0000) then, the 'for'\n        // loop will break out.\n\n        if (power == number)\n            return true;\n        if (power > number)\n            return false;\n    }\n    return false;\n}\n```\n\nBut then I thought: How about checking if log2 x is an exactly a round number? When I checked for 2^63+1, ```\nMath.Log()```\n returned exactly 63 because of rounding. So I checked if 2 to the power 63 is equal to the original number and it is, because the calculation is done in ```\ndouble```\ns and not in exact numbers.\n```\nprivate bool IsPowerOfTwo_2(ulong number)\n{\n    double log = Math.Log(number, 2);\n    double pow = Math.Pow(2, Math.Round(log));\n    return pow == number;\n}\n```\n\nThis returned ```\ntrue```\n for the given wrong value: ```\n9223372036854775809```\n.\nIs there a better algorithm?\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What are the differences between genetic algorithms and genetic programming?\r\n                \r\nI would like to have a simple explanation of the differences between genetic algorithms and genetic programming (without too much programming jargon). Examples would also be appreciated.\n\nApparently, in genetic programming, solutions are computer programs. On the other hand, genetic algorithms represent a solution as a string of numbers. Any other differences?\n    ", "Answer": "\r\nGenetic algorithms (GA) are search algorithms that mimic the process of natural evolution, where each individual is a candidate solution: individuals are generally \"raw data\" (in whatever encoding format has been defined).\n\nGenetic programming (GP) is considered a special case of GA, where each individual is a computer program (not just \"raw data\"). GP explore the algorithmic search space and evolve computer programs to perform a defined task.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Bellman-Ford Algorithms and Number of Steps\r\n                \r\nSuppose there is a Directed Graph with ```\n100-Vertexes```\n such as ```\nV_1---> V_2 ---> ... ---> V_100```\n\n\nAll weights of edges is 1. we want to use ```\nBellman-Ford```\n Algorithm to find the shortest path between vertex 1 ```\n(V_1)```\n to other vertexes. this algorithms in each step inspect all edges in arbitrary order. if in one step the shortest path between ```\nV_1```\n to all other vertexes ```\nnot changed```\n (from previous values), the algorithm will be stops !. ```\nthe number of steps in this algorithms```\n ```\ndepends on the order of inspecting edges```\n. \n\n\n  what is the Max and Min number of steps in this algorihms?\n\n\n```\na) 100, 10000\n\nb) 2, 100\n\nc) 100, 100\n\nd) 2, 99\n```\n\n\nanyone could describe me why option (2) is selected for the answer of this question ?\n    ", "Answer": "\r\nThe Bellman-Ford algorithm is given at Wikipedia. \n\nIt is two steps if ```\nV_1```\n and ```\nV_2```\n are chosen. It won't get any better assuming ```\nV_1```\n to ```\nV_1```\n is not an allowed input, which could be done with a single step.\n\nThe worst case is if ```\nV_1```\n and ```\nV_100```\n are given as input: this takes 100 steps to arrive at V_100.\n\n\n\nThe question is: given the possible inputs, what is the best and what is the worst case that can happen for the distance between to edges in your example graph?\n\nExample: the input is ```\nBellman-Ford(Vertices, Edges, Soucre)```\n\nWhat will happen? \nIn this particular example the Vertices are V_1 to V_100, Edges are E_1 (from V_1 to V_2, etc.) and the Source is V_1.\n\nStep 1: start at beginning, i.e. we know the shortest path from ```\nV_1```\n to ```\nV_1```\n. \nStep 2: follow one of the edges. There is only one edge, lets call it E_1. This edge is from ```\nV_1```\n to ```\nV_2```\n. The algorithm will follow this edge. Now we now the shortest path from ```\nV_1```\n to ```\nV_2```\n takes 1 step along this edge. The number of steps for V_1 and V_2 is 2. This is the shortest non-trivial path.\n\nNow determine what will be the result for the distance between V_1 and V_100. There are 99 edges between ```\nV_1```\n and ```\nV_100```\n, since ```\nE_99```\n goes from ```\nV_99```\n to ```\nV_100```\n. How many steps will this take? Can there be a longer path for this specific graph? \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Which is the fastest algorithm to find prime numbers?\r\n                \r\nWhich is the fastest algorithm to find out prime numbers using C++? I have used sieve's algorithm but I still want it to be faster!\n    ", "Answer": "\r\nA very fast implementation of the Sieve of Atkin is Dan Bernstein's primegen. This sieve is more efficient than the Sieve of Eratosthenes. His page has some benchmark information.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What is the fastest search algorithm for a list with names and numbers\r\n                \r\nThe list has names and numbers. Each name has a number. The list is sorted by name and the numbers in the list's are sorted least to greatest. I need to find the sum of all the largest numbers associated with each name. \n\n```\na 1, a 4, a 5, b 0, b 4, c 1, n 9, n 10\n```\n\n\nI would need to out put \n\n```\n5 + 4 + 1 + 10 = 20\n```\n\n\nI need to do this in O(logn) time.\n    ", "Answer": "\r\nPseudo code, find last O(log N) of each name O(M).\n\n```\nauto it = vec.begin();\nwhile (it != vec.end()) { // O(M)\n  auto last = find_last_with_same_name(it, it->name); \n  sum += last.value;\n  it++;\n}\n```\n\n\nUse exponential_search for O(log N) for finding the last and therefore largest value.\n\nFor a total of O(M log N).\n\nIf M, the number of names is a constant you get O(log N), but that would need some rules lawyering. \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to calculate the number of divisors of a given number\r\n                \r\nWhat would be the most optimal algorithm (performance-wise) to calculate the number of divisors of a given number?\n\nIt'll be great if you could provide pseudocode or a link to some example.\n\nEDIT: All the answers have been very helpful, thank you. I'm implementing the Sieve of Atkin and then I'm going to use something similar to what Jonathan Leffler indicated. The link posted by Justin Bozonier has further information on what I wanted.\n    ", "Answer": "\r\nDmitriy is right that you'll want the Sieve of Atkin to generate the prime list but I don't believe that takes care of the whole issue. Now that you have a list of primes you'll need to see how many of those primes act as a divisor (and how often).\nHere's some python for the algo Look here and search for \"Subject: math - need divisors algorithm\". Just count the number of items in the list instead of returning them however.\nHere's a Dr. Math that explains what exactly it is you need to do mathematically.\nEssentially it boils down to if your number ```\nn```\n is:\n```\nn = a^x * b^y * c^z```\n\n(where a, b, and c are n's prime divisors and x, y, and z are the number of times that divisor is repeated)\nthen the total count for all of the divisors is:\n```\n(x + 1) * (y + 1) * (z + 1)```\n.\nEdit: BTW, to find a,b,c,etc you'll want to do what amounts to a greedy algo if I'm understanding this correctly. Start with your largest prime divisor and multiply it by itself until a further multiplication would exceed the number n. Then move to the next lowest factor and times the previous prime ^ number of times it was multiplied by the current prime and keep multiplying by the prime until the next will exceed n... etc. Keep track of the number of times you multiply the divisors together and apply those numbers into the formula above.\nNot 100% sure about my algo description but if that isn't it it's something similar .\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Understanding \"randomness\"\r\n                \r\nI can't get my head around this, which is more random?\n\n```\nrand()\n```\n\n\nOR:\n\n```\nrand() * rand()\n```\n\n\nI´m finding it a real brain teaser, could you help me out?\n\n\n\nEDIT:\n\nIntuitively I know that the mathematical answer will be that they are equally random, but I can't help but think that if you \"run the random number algorithm\" twice when you multiply the two together you'll create something more random than just doing it once.\n    ", "Answer": "\r\nJust a clarification\n\nAlthough the previous answers are right whenever you try to spot the randomness of a pseudo-random variable or its multiplication, you should be aware that while Random() is usually uniformly distributed, Random() * Random() is not.  \n\nExample\n\nThis is a uniform random distribution sample simulated through a pseudo-random variable:\n\n  \n\n```\n        BarChart[BinCounts[RandomReal[{0, 1}, 50000], 0.01]]\n```\n\n\nWhile this is the distribution you get after multiplying two random variables:\n\n  \n\n```\n        BarChart[BinCounts[Table[RandomReal[{0, 1}, 50000] * \n                                 RandomReal[{0, 1}, 50000], {50000}], 0.01]]\n```\n\n\nSo, both are “random”, but their distribution is very different.\n\nAnother example\n\nWhile 2 * Random() is uniformly distributed:\n\n\n\n```\n        BarChart[BinCounts[2 * RandomReal[{0, 1}, 50000], 0.01]]\n```\n\n\nRandom() + Random() is not!\n\n\n\n```\n        BarChart[BinCounts[Table[RandomReal[{0, 1}, 50000] + \n                                 RandomReal[{0, 1}, 50000], {50000}], 0.01]]\n```\n\n\nThe Central Limit Theorem\n\nThe Central Limit Theorem states that the sum of Random() tends to a normal distribution as terms increase.\n\nWith just four terms you get:\n\n\n\n```\nBarChart[BinCounts[Table[RandomReal[{0, 1}, 50000] + RandomReal[{0, 1}, 50000] +\n                   Table[RandomReal[{0, 1}, 50000] + RandomReal[{0, 1}, 50000],\n                   {50000}],\n         0.01]]  \n```\n\n\nAnd here you can see the road from a uniform to a normal distribution by adding up 1, 2, 4, 6, 10 and 20 uniformly distributed random variables:\n\n\n\nEdit\n\nA few credits\n\nThanks to Thomas Ahle for pointing out in the comments that the probability distributions shown in the last two images are known as the Irwin-Hall distribution  \n\nThanks to Heike for her wonderful torn[] function\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to find Largest prime factor of a number\r\n                \r\nWhat is the best approach to calculating the largest prime factor of a number?\n\nI'm thinking the most efficient would be the following:\n\n\nFind lowest prime number that divides cleanly\nCheck if result of division is prime\nIf not, find next lowest\nGo to 2.\n\n\nI'm basing this assumption on it being easier to calculate the small prime factors. Is this about right? What other approaches should I look into?\n\nEdit: I've now realised that my approach is futile if there are more than 2 prime factors in play, since step 2 fails when the result is a product of two other primes, therefore a recursive algorithm is needed.\n\nEdit again: And now I've realised that this does still work, because the last found prime number has to be the highest one, therefore any further testing of the non-prime result from step 2 would result in a smaller prime.\n    ", "Answer": "\r\nHere's the best algorithm I know of (in Python)\n\n\n\n```\ndef prime_factors(n):\n    \"\"\"Returns all the prime factors of a positive integer\"\"\"\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n /= d\n        d = d + 1\n\n    return factors\n\n\npfs = prime_factors(1000)\nlargest_prime_factor = max(pfs) # The largest element in the prime factor list\n```\n\n\nThe above method runs in ```\nO(n)```\n in the worst case (when the input is a prime number).\n\nEDIT:\nBelow is the ```\nO(sqrt(n))```\n version, as suggested in the comment. Here is the code, once more.\n\n```\ndef prime_factors(n):\n    \"\"\"Returns all the prime factors of a positive integer\"\"\"\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n /= d\n        d = d + 1\n        if d*d > n:\n            if n > 1: factors.append(n)\n            break\n    return factors\n\n\npfs = prime_factors(1000)\nlargest_prime_factor = max(pfs) # The largest element in the prime factor list\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "2 Way Encryption Algorithm that for both Ruby & Node.JS that only encrypts to letters and numbers\r\n                \r\nI have a node.js server that will encrypt a string and store it into a database. I also have a RoR(Ruby on Rails) server that will retrieve the encrypted string from the database and decrypt it. The only criteria I have is that the encryption must only encrypt strings into a string of letters and numbers (no special characters)\n\nAny suggestions\n    ", "Answer": "\r\nAs others have suggested, a strong encryption like AES-CBC or AES-CTR together with Base-64 is one solution.  Base-64 uses +, / and = in addition to the 62 alphanumeric characters.  Hex (Base-16) is strictly alphanumeric, but takes more storage space.  Base-32 only has the padding character, =, like Base-64.  In a pinch it is possible to omit padding, and to recalculate in for decoding.\n\nIf you are wiling to accept a lower level of security then one alternative is to use a Vigenère cypher, where you can explicitly determine the input and output characters allowed. \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Hash function which returns not just lowercase letters and numbers, but also symbols and uppercase letters\r\n                \r\nAll hash algorithms (sha1, md5 etc) seem to return string with lowercase letters and numbers. Are there any algorithms which also return symbols like ```\n[ ] \\ , !```\n etc. and uppercase letters? \n    ", "Answer": "\r\nA typical hash function (like MD5) produces bytes as output. These bytes are usually hex encoded so that they can be represented as text. However, there are other binary-to-text encodings too.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "PHP combinations of letters and numbers algorithm and start from X position\r\n                \r\nI've been working with this algorithm and right now as it is the output is a string like this:\n\n\n  AAA AAB AAC AAD AAE AAF AAG AAH AAI AAJ AAK AAL AAM AAN AAO AAP AAQ AAR AAS AAT AAU AAV AAW AAX AAY AAZ AA0 AA1 AA2 AA3 AA4 AA5 AA6 AA7 AA8 AA9 (END OF LOOP 1) ABA ABB ABC ABD ABE ABF ABG ABH ABI ABJ ABK ABL ABM ABN ABO ABP ABQ ABR ABS ABT ABU ABV ABW ABX ABY ABZ AB0 AB1 AB2 AB3 AB4 AB5 AB6 AB7 AB8 AB9 (END OF LOOP 2)\n\n\nThis works perfectly but, let's say that I want to continue from the AB0 position. How do I continue after X position? I've been playing with the code trying to implement a position keeper but I run out of ideas and I'm pulling my hair out by now.\n\nWhat my project does is to create a few text.txt files with all possible combinations which the code below can do, but it echoes out everything in one long string/echo, so, what I'm trying to achieve is be able to make those text.txt files into parts.\n\nExample, need 5700 combinations (5700 loops), five text.txt of 1000 combinations and one text.txt file with the 700 combinations left. How do I continue from loop 3000 without starting from the beginning? \n\nHere is the code I'm using:\n\n```\n<?php\nini_set('memory_limit', '3062M');\n/*\nAuthor: Luka Vidaković\nWebsite: http://www.lvidakovic.com\nDate: 21.2.2013.\n*/\n$charSet .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n$charSet .= '0123456789';\n\n$size = strlen($charSet);\n$base = array();\n$counter = 0;\n\n$maxLength = 3; // 3 for now to experiment\n$baseSize = 3; // min\n\n$loops_to_make = 1; // 0 will loop once. 1 will loop twice and so on...\n$loops_done = 0;\n$megavar = \"\";\n\nwhile($baseSize <= $maxLength)\n{\n    if($loops_done > $loops_to_make) { break; }\n    // Go through all the possible combinations of last character and output $base\n    for($i = 0; $i < $size; $i++)\n    {\n        $base[0] = $i; //echo $i.\" \";\n        for($j=$baseSize-1;$j>=0;$j--)\n        {\n            $megavar .= $charSet[$base[$j]];\n        }\n        $megavar .= ' ';    \n    }\n    // How many $base elements reached their max?\n    for($i = 0; $i<$baseSize;$i++)\n    {\n        if($base[$i] == $size-1) { $counter++; $megavar .= \"<br>|(\".$j.\")|\"; }\n        else break;\n    }\n    // Every array element reached max value? Expand array and set values to 0.\n    if($counter == $baseSize)\n    {\n        // Notice <=$baseSize! Initialize 0 values to all existing array elements and ADD 1 more element with that value\n        for($i=0;$i<=$baseSize;$i++)\n        {\n            $base[$i] = 0;\n        }\n        $baseSize = count($base);\n    }\n    // Carry one\n    else\n    {\n        $base[$counter]++;\n        for($i=0;$i<$counter;$i++) $base[$i] = 0;\n    }\n    $loops_done++;\n    $counter=0;\n}\necho $megavar; // Eventually I'll echo this into a txt file\n?>\n```\n\n\nI'm also open to other ideas that create the same output as long is in PHP and or better.\nThanks.\n    ", "Answer": "\r\nYour issue is a simple case of calculating sum of given string and given positions. The only difficulty is that your numeral base is ```\n36```\n and digits are custom. But that could be easily resolved with ```\nstrtr()```\n and ```\nbase_convert()```\n combination:\n\n```\nfunction getSeed($string, $positions=1)\n{\n   $convert = array_combine(\n                  array_merge(range('A', 'Z'), range('0', '9')),\n                  array_merge(range('0', '9'), range('A', 'Z'))\n              );\n   //actually, $result can be written as one-liner\n   //but that will be horrible whitespacing..\n   $result  = base_convert(strtr($string, $convert), 36, 10);\n   $result  = strtoupper(base_convert($result+$positions, 10, 36));\n   $result  = strtr(str_pad($result, strlen($string), '0', STR_PAD_LEFT), array_flip($convert));\n   return $result;\n}\n```\n\n\nSo to use it, just call:\n\n```\n$result = getSeed('AAA', 40);//ABE\n```\n\n\nThus, you'll be able either generating values in loop or resuming your loop via specifying offset. Note, that I would recommend you to evaluate ```\n$convert```\n outside function if you'll use it in loop. That will save unnecessary overhead.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Get special characters and numbers in output file? Using ROT 13\r\n                \r\nThis program is using the ROT-13 algorithm successfully, but it is not capturing any special characters or numbers, instead, special characters and numbers are not being saved in the output file at all. What changes in my code do I need to make for numbers and special characters to output?\n\n```\n    static void Encode ()\n    {\n        string alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"; // declaring alphabet \n        string strROT13 = \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM\"; // declaring alphabet using the ROT13 system\n\n            Console.WriteLine(\"Enter the name of the file you would like to encode (.txt, .bat, etc): \"); // prompts user to read in file\n            string inputFile = Console.ReadLine();\n            if (!File.Exists(inputFile)) { // test to see if file is found\n            Console.WriteLine(\"File not found, please try again.\");\n            return;\n            }\n            Console.WriteLine(\"Enter the name of the file you would like to save to (.txt, .bat, etc): \"); // asks user where to save translated file\n            string outputFile = Console.ReadLine();\n\n            StreamReader input = new StreamReader(inputFile); // reads file\n            StreamWriter output = new StreamWriter(outputFile); // writes file\n\n            string str = \"\"; // reading file line by line\n            while ((str = input.ReadLine()) != null) // reads entire file\n            {\n                string encoded = \"\";\n                int length = str.Length;\n                if (length > 0)\n                {\n                    foreach (char character in str) // takes each character from the line\n                    {\n                        if (character == ' ') // if a space in file, left unchanged\n                            encoded += ' ';\n                        else\n                            for (int i = 0; i < 52; i++) // if character in array, then encoded\n                                if (character == alphabet[i])\n                                    encoded += strROT13[i];\n                    }\n                }\n                output.WriteLine(encoded); // writes encoded string to the new file\n            }\n            input.Close();\n            output.Close();\n        Console.WriteLine(\"The file was successfully encoded.\");\n    }\n```\n\n    ", "Answer": "\r\nOne way to do this is to create a variable that we set to ```\ntrue```\n if the character was found in the ```\nalphabet```\n array. Then, after the inner loop, we know that if the character wasn't found, it was a \"special character\" or a number, and we can just add it.\n\nFor example:\n\n```\nforeach (char character in str)  // takes each character from the line\n{\n    bool characterFound = false;\n\n    for (int i = 0; i < alphabet.Length; i++)  // if character in array, then encoded\n    {\n        if (character == alphabet[i])\n        {\n            encoded += strROT13[i];  // add the encoded character\n            characterFound = true;   // set our variable to indicate it was found\n            break;                   // break out of the for loop early\n        }                            // since there's no need to keep searching\n    }\n\n    // If this character was not found in alphabet, just add it as-is\n    if (!characterFound)\n    {\n        encoded += character;\n    }\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Fastest way to determine if an integer's square root is an integer\r\n                \r\nI'm looking for the fastest way to determine if a ```\nlong```\n value is a perfect square (i.e. its square root is another integer): \n\n\nI've done it the easy way, by using the built-in ```\nMath.sqrt()```\n\nfunction, but I'm wondering if there is a way to do it faster by\nrestricting yourself to integer-only domain.\nMaintaining a lookup table is impractical (since there are about\n231.5 integers whose square is less than 263).\n\n\nHere is the very simple and straightforward way I'm doing it now:\n\n```\npublic final static boolean isPerfectSquare(long n)\n{\n  if (n < 0)\n    return false;\n\n  long tst = (long)(Math.sqrt(n) + 0.5);\n  return tst*tst == n;\n}\n```\n\n\nNote: I'm using this function in many Project Euler problems.  So no one else will ever have to maintain this code.  And this kind of micro-optimization could actually make a difference, since part of the challenge is to do every algorithm in less than a minute, and this function will need to be called millions of times in some problems.\n\n\n\nI've tried the different solutions to the problem:\n\n\nAfter exhaustive testing, I found that adding ```\n0.5```\n to the result of Math.sqrt() is not necessary, at least not on my machine.\nThe fast inverse square root was faster, but it gave incorrect results for n >= 410881.  However, as suggested by BobbyShaftoe, we can use the FISR hack for n < 410881.\nNewton's method was a good bit slower than ```\nMath.sqrt()```\n.  This is probably because ```\nMath.sqrt()```\n uses something similar to Newton's Method, but implemented in the hardware so it's much faster than in Java.  Also, Newton's Method still required use of doubles.\nA modified Newton's method, which used a few tricks so that only integer math was involved, required some hacks to avoid overflow (I want this function to work with all positive 64-bit signed integers), and it was still slower than ```\nMath.sqrt()```\n.\nBinary chop was even slower.  This makes sense because the binary chop will on average require 16 passes to find the square root of a 64-bit number.\nAccording to John's tests, using ```\nor```\n statements is faster in C++ than using a ```\nswitch```\n, but in Java and C# there appears to be no difference between ```\nor```\n and ```\nswitch```\n.\nI also tried making a lookup table (as a private static array of 64 boolean values).  Then instead of either switch or ```\nor```\n statement, I would just say ```\nif(lookup[(int)(n&0x3F)]) { test } else return false;```\n.  To my surprise, this was (just slightly) slower. This is because array bounds are checked in Java. \n\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to restrict the user to input only letters and numbers in Python 3?\r\n                \r\nI need to write an algorithm that validates a player's username and checks to see if the name is registered in an external text file.\n```\nplayerName = input('Please enter a player name')\n```\n\nHow do I restrict the user to only being able to enter letters and numbers?\n    ", "Answer": "\r\nYou cannot restrict what the user can type (at least with input) but you can use a while loop to repeat the input request until user gets it right\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Question about algorithms and the Fibonacci number in Pascal ABS\r\n                \r\nThere is a sequence of Fibonacci numbers (limited by a certain value), which has a certain number of values. What should the algorithm look like if it is necessary that each value (the Fibonacci number) has its own ordinal number, and the key task is to output the value when entering the desired ordinal number. For example, the border is 1000, there are 16 numbers in total (total numbers), I enter the number 5 and I should be given the value 13 (if I start counting from two, that is, without taking into account the first two units to get the first Fibonacci value).\nthere is no code here, because I don't understand at all how at least approximately this (seemingly not complicated) algorithm should look.\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "DPLL algorithm and number of visited nodes\r\n                \r\nI'm implementing DPLL algorithm that counts the number of visited nodes. I managed to implement DPLL that doesn't count visited nodes but I can't think of any solutions to the problem of counting. The main problem is that as the algorithm finds satisfying valuation and returns True, the recursion rolls up and returns counter from the moment the recursion started. In any imperative language I would just use global variable and increment it as soon as function is invoked, but it is not the case in Haskell.\n\nThe code I pasted here does not represent my attempts to solve the counting problem, it is just my solution without it. I tried to use tuples such as (True,Int) but it will always return integer value from the moment the recursion started.\n\nThis is my implementation where (Node -> Variable) is a heuristic function, Sentence is list of clauses in CNF to be satisfied, [Variable] is a list of Literals not assigned and Model is just a truth valuation.\n\n```\ndpll' :: (Node -> Variable) -> Sentence -> [Variable] -> Model -> Bool\ndpll' heurFun sentence vars model\n  | satisfiesSentence model sentence  = True\n  | falsifiesSentence model sentence  = False\n  | otherwise         = applyRecursion\n    where\n      applyRecursion\n        | pureSymbol /= Nothing = recurOnPureSymbol\n        | unitSymbol /= Nothing = recurOnUnitSymbol\n        | otherwise             = recurUsingHeuristicFunction\n          where\n            pureSymbol  = findPureSymbol vars sentence model\n            unitSymbol  = findUnitClause sentence model\n            heurVar = heurFun (sentence,(vars,model))\n            recurOnPureSymbol =\n              dpll' heurFun sentence (vars \\\\ [getVar pureSymbol]) ((formAssignment pureSymbol):model)\n            recurOnUnitSymbol =\n              dpll' heurFun sentence (vars \\\\ [getVar unitSymbol]) ((formAssignment unitSymbol):model)\n            recurUsingHeuristicFunction = case vars of\n              (v:vs) ->     (dpll' heurFun sentence (vars \\\\ [heurVar]) ((AS (heurVar,True)):model)\n                        ||   dpll' heurFun sentence (vars \\\\ [heurVar]) ((AS (heurVar,False)):model))\n              []     ->     False\n```\n\n\nI would really appreciate any advice on how to count the visited nodes. Thank you.\n\nEDIT:\n\nThe only libraries I'm allowed to use are System.Random, Data.Maybe and Data.List.\n\nEDIT:\n\nOne possible solution I tried to implement is to use a tuple (Bool,Int) as a return value from DPPL function. The code looks like:\n\n```\ndpll'' :: (Node -> Variable) -> Sentence -> [Variable] -> Model -> Int -> (Bool,Int)\ndpll'' heurFun sentence vars model counter\n  | satisfiesSentence model sentence  = (True,counter)\n  | falsifiesSentence model sentence  = (False,counter)\n  | otherwise         = applyRecursion\n  where\n    applyRecursion\n      | pureSymbol /= Nothing = recurOnPureSymbol\n      | unitSymbol /= Nothing = recurOnUnitSymbol\n      | otherwise             = recurUsingHeuristicFunction\n      where\n        pureSymbol  = findPureSymbol vars sentence model\n        unitSymbol  = findUnitClause sentence model\n        heurVar = heurFun (sentence,(vars,model))\n        recurOnPureSymbol =\n          dpll'' heurFun sentence (vars \\\\ [getVar pureSymbol]) ((formAssignment pureSymbol):model) (counter + 1)\n        recurOnUnitSymbol =\n          dpll'' heurFun sentence (vars \\\\ [getVar unitSymbol]) ((formAssignment unitSymbol):model) (counter + 1)\n        recurUsingHeuristicFunction = case vars of\n          (v:vs)    ->    ((fst $ dpll'' heurFun sentence (vars \\\\ [heurVar]) ((AS (heurVar,True)):model) (counter + 1))\n                      ||  (fst $ dpll'' heurFun sentence (vars \\\\ [heurVar]) ((AS (heurVar,False)):model) (counter + 1)),counter)\n          []        -> (False,counter)\n```\n\n\nThe basic idea of this approach is to increment the counter at each recursive call. However, the problem with this approach is that I have no idea how to retrieve counter from recursive calls in OR statement. I'm not even sure if this is possible in Haskell.\n    ", "Answer": "\r\nYou can retrieve the counter from the recursive call using ```\ncase```\n or similar.\n\n```\nrecurUsingHeuristicFunction = case vars of\n    v:vs -> case dpll'' heurFun sentence (vars \\\\ [heurVar]) (AS (heurVar,True):model) (counter + 1) of\n        (result, counter') -> case dpll'' heurFun sentence (vars \\\\ [heurVar]) (AS (heurVar,False):model) counter' of\n            (result', counter'') -> (result || result', counter'')\n    []   -> (False,counter)\n```\n\n\nThis is a manual implementation of the ```\nState```\n monad. However, it's not clear to me why you are passing in a counter at all. Just return it. Then it is the simpler ```\nWriter```\n monad instead. The code for this helper would look something like this:\n\n```\nrecurUsingHeuristicFunction = case vars of\n    v:vs -> case dpll'' heurFun sentence (vars \\\\ [heurVar]) (AS (heurVar,True):model) of\n        (result, counter) -> case dpll'' heurFun sentence (vars \\\\ [heurVar]) (AS (heurVar,False):model) of\n            (result', counter') -> (result || result', counter + counter' + 1)\n    []   -> (False,0)\n```\n\n\nOther results would be similar -- returning ```\n0```\n instead of ```\ncounter```\n and ```\n1```\n instead of ```\ncounter+1```\n -- and the call to the function would be simpler, with one fewer argument to worry about setting up correctly.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "SiftDown Algorithm Number of Comparisons\r\n                \r\nI was recently working with the ```\nsiftDown```\n algorithm used for building binary heaps. In the book \"Algorithms and Data Structures: The Basic Toolbox\" in exercise 6.5 it is stated that the given implementation of that algorithm needs ```\n2*log(n)```\n element comparisons. Now, I've tried to figure out why this is so, but I couldn't. Why is this correct?\n    ", "Answer": "\r\nWhen calling ```\nsiftDown(i)```\n you first perform two element comparisons: \n\n\nThe first is between ```\nh[2i]```\n and ```\nh[2i+1]```\n.\nThe second is between ```\nh[i]```\n and ```\nh[m]```\n.\n\n\nAfter making the two comparisons you recursively call ```\nsiftDown(m)```\n where ```\nm=2i```\n or ```\nm=2i+1```\n. That is, each call to ```\nsiftDown()```\n with an ```\nn```\n-element heap results in making two element comparisons and a call to ```\nsiftDown()```\n with an ```\nn/2```\n-element heap.\n\nTherefore, ```\nT(n)```\n, the number of comparisons made when calling ```\nsiftDown()```\n with an ```\nn```\n-element heap, satisfies:\n\n```\nT(n) = 2 + T(n/2)\n```\n\n\nThe solution to this recurrence relation is\n\n```\nT(n) = 2logn\n```\n\n\nYou can see that the above relation solves to ```\n2logn```\n by observing that each time, exactly 2 element comparisons are being made, and that the number of times is ```\nlogn```\n (because if you start with ```\nn```\n and keep dividing by 2 over and over, you're done after ```\nlogn```\n divisions).\n\nHence, the total number of element comparisons made by ```\nsiftDown()```\n is about ```\n2logn```\n.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Generate a random length is 12 string that is comprised uppercase and lowercase alpha and numbers [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question is seeking recommendations for books, tools, software libraries, and more. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     We don’t allow questions seeking recommendations for books, tools, software libraries, and more. You can edit the question so it can be answered with facts and citations.\r\n                \r\n                    \r\n                        Closed 7 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nHow can I create a Python algorithm to generate a 12 character string comprised of unique uppercase and lowercase alpha and numbers?\n\nIn my situation, it would be used as a unique session/key identifier that would likely be unique over 500K+ generations.\n\nFor example:\n\n```\n837uNNM9abCb\n\n9HFRHcop24Cd\n```\n\n\nThanks!\n    ", "Answer": "\r\nThis is easily achieved using a while loop and Python's ```\nrandom```\n and ```\nstring```\n libraries.\n\nCode:\n\n```\nimport random\nimport string\n\ndef create():\n    _string, counter = \"\", 0\n    while counter < 12:\n        choice = random.choice(string.ascii_letters + string.digits)\n        if choice not in _string:\n            _string += choice\n            counter += 1\n        else:\n            pass\n    return _string\n\nprint(create())\n```\n\n\nOutput:\n\n```\nYWdTocQs0R4X\n```\n\n\nWhat it is doing:\n\n\nCreating variables ```\n_string```\n and ```\ncounter```\n.\nStarting a while loop that breaks after the condition ```\ncounter < 12```\n becomes false.(There is a reason for using a ```\nwhile```\n loop over a ```\nfor```\n loop here that I will explain later)\nUses Python's random library to find a random number/letter(upper and lowercase).\nChecks to see if the choice is a already in the string, if it is not, the choice is added to the string. But if it is, nothing happens and the loop starts over again (Why I used a ```\nwhile```\n loop over a ```\nfor```\n loop.\nReturns the string!\n\n\nNote: If you are ok with duplicates WITHIN the string this one-liner works much more efficiently.\n\n```\nprint(''.join(random.choice(string.letters + string.digits) for _ in range(12)))\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Does the number of comparisons in an algorithm differ from its complexity? If so, how?\r\n                \r\nI just started learning about algorithms and time complexity. \n\nI noticed that, for certain algorithms, their time complexity is measured based on the number of comparisons made. I'm confused. Are they different?\n    ", "Answer": "\r\nComparisons are only used to measure the efficiency of sorting algorithms or similar.  It's not the same as runtime complexity.\n\nThe idea is that, instead of simple integers, the array that you're sorting might contain things that take a long time to compare. An array of of strings, for example, can be bubble-sorted using N(N-1)/2 string comparisons, even though a single string comparison might require many other operations, including many comparisons of individual characters.\n\nMeasuring the performance of a sorting algorithm in terms of the number of comparisons makes the measurement independent of the type of things being sorted.  Usually you'll also want to know how many moves or swaps it makes.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What algorithms and tools should I be using to create a CSS specificity calculator?\r\n                \r\nI'm thinking about making a function that calculates CSS specificity, which is a fairly simple calculation. Basically, every instance of ```\n#somestring```\n is worth ```\n100```\n, every instance of ```\n.somestring```\n or ```\n:somestring```\n is worth ```\n10```\n and every instance of ```\nsomestring```\n is worth ```\n1```\n. \n\nExamples: \n\n```\n\"#mydiv p\"```\n ---> ```\n101```\n\n\n```\n\"ul>li>a\"```\n ---> ```\n3```\n\n\n```\n\"div.pull-right img\"```\n --> ```\n12```\n\n\n```\n\"body#homepage #home-side-box div.row.pull-left[name=\"thisrow\"]:after\"```\n --> ```\n232```\n\n\nSo the function would be something like \n\n```\nunsigned long specificity ( const std::string & slctr )\n{\n    // ....\n}\n```\n\n\nNow, I'm not expecting this to be a simple implementation, for I realize there is a number of nuances that will go into it, but I'm wondering if someone can give me some hints about algorithms and tools I should be using to make something efficient and clean. For instance, I'm assuming I should be using ```\nstd::regex_iterator```\n -- is that right?\n    ", "Answer": "\r\nThe specificity of a selector is not really a number. You can't compare the different types of specificity to one another as if they are integers.\n\nIn your example, where you assign 10 to a class and 1 to a tag name, it would mean that if a selector contains more than 10 tag names, it would have a greater specificity than one with only a class. But that is not how it works.\n\nWhat you could do, if you absolutely insist on returning a single value, is use very large differences, say, 212 for a class and 224 for an ID. Then the algorithm would only fail on selectors with more than 4096 tag names.\n\nThe proper approach, however, is not to try to calculate a single value, but to make a function that compares two selectors. If one selector contains more IDs than the other, its specificity is highest; return \"one\". If the number of IDs is the same, then compare the number of classes. And so on, until you find a difference, or else you return \"equal\".\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "how can I sort three (more) arrays according to one (strings and numbers)\r\n                \r\nI want sort the first array and have the second array and the third follow the same sort as the first. And if i choose to sort the second one the other two will follow again. As you can see below i need it to work for strings and numbers. Any advice for a good algorithm would be appreciated. Preferably using The push() method.\n\n```\n    let array_one  = [\"bravo_one\", \"charlie_two\", \"alpha_three\", \"echo_four\", \"delta_five\"]\n    let array_two = [1, 2, 3, 4, 5]\n    let array_three = [\"golf_one\", \"zulu_two\", \"tango_three\", \"november_four\", \"kilo_five\"]\n\n\n    // Some Logic expected here\n    let new_one = array_one.sort(function(a, b){\n        return (a.localeCompare(b));\n    })\n\n    let new_two = []\n    let new_three = []\n\n    // Exprected Output\n    console.log(new_one); // [\"alpha_three\", \"bravo_one\", \"charlie_two\", \"delta_five\", \"echo_four\"]\n    console.log(new_two); // [3, 1, 2, 5, 4]\n    console.log(new_three); // [\"tango_three\", \"golf_one\", \"zulu_two\",  \"kilo_five\", \"november_four\"]\n\n    // Some Logic expected here\n    let new_one = []\n\n    let new_two = array_two.sort(function(a, b){\n        return b.length - a.length;\n    })\n\n    let new_three = []\n\n    // Exprected Output\n    console.log(new_one); // [\"bravo_one\", \"charlie_two\", \"alpha_three\", \"echo_four\", \"delta_five\"]\n    console.log(new_two); // [1, 2, 3, 4, 5]\n    console.log(new_three); // [\"golf_one\", \"zulu_two\", \"tango_three\", \"november_four\", \"kilo_five\"]\n\n\n    // Some Logic expected here\n    let new_one = []\n\n    let new_two = []\n\n    let new_three = array_three.sort(function(a, b){\n        return (a.localeCompare(b));\n    })\n\n    // Exprected Output\n    console.log(new_one); // [\"bravo_one\", \"delta_five\", \"echo_four\", \"tango_three\", \"charlie_two\"]\n    console.log(new_two); // [1, 5, 4, 3, 2]\n    console.log(new_three); // [\"golf_one\", \"kilo_five\", \"november_four\", \"tango_three\", \"zulu_two\"]\n```\n\n    ", "Answer": "\r\n```\narray_one```\n, ```\narray_two```\n and ```\narray_three```\n look like they should be an object. Especially if ```\narray_one[0]```\n, ```\narray_two[0]```\n and ```\narray_three[0]```\n contain related data.\n\nEither change the way you get that data in the first place, or:\n\n```\nvar bigarray = array_one.map(function(_,i) {\n  return {\n    name: array_one[i],\n    number: array_two[i],\n    extra: array_three[i]\n  }\n);\n```\n\n\nNow you can sort:\n\n```\nbigarray.sort(function(a,b) {\n    return a.name.localeCompare(b.name);\n});\n```\n\n\nAnd iterate as you wish.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm: Print the nth consecutive prime number\r\n                \r\nI'm currently learning algorithms and have came across a code challenge from an interviewer about a function that prints out the nth prime number sequentially. So it would be something like:\n\n```\ngetPrimeNth(10)```\n will print ```\n1  2  3  5  7  11  13  17  19  23```\n\n\nbut most of the ones I found will print out just the nth number, so ```\n23```\n, or just ones that will detect if it is prime numbers. I am going to risk getting downvoted for this but I can't seem to find the right solution for this.\n    ", "Answer": "\r\nOne is not a prime, for starters.\n\nSecond, your question needs more clarification....\n\nPrimes are not challenging - there is a lot of information available.\n\nThe simplest solution for you would be to simply test every number by modding up to the square root of that number. If it mods to zero, it is not prime. Store the primes in an array one after another. I'm not going to straight up give you the answer, but read more about The Sieve of Eratosthenes - which is highly inefficient IMO, but where you must start.\n\nTherefore, the first prime would be in slot 0, second in slot 1, etc, etc.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to split a string into words and numbers? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 3 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI need to tokenize a string representing an item in inventory in javascript getting words and numbers, for example:\n\nGiven the string 'Plane Engine 50x60' the tokens should be ['Plane','Engine','50','x','60']\n\nGiven the string 'Car wheel 220v' the tokens should be ['Car','wheel','220','v']\n\nThe solution could be a RegExp or a Javascript Algorithm\n\nAll the items have that kind of names come has measures like 20x30 and others have electronic info such as 220v. The thing I need to do is split like the examples above.\n\nThanks\n    ", "Answer": "\r\nWe can split by groups of either numbers or letters and then filter out the empty strings or spaces.\n\n\r\n\r\n```\n'Car wheel 220v'.split(/([0-9]+|[a-zA-Z]+)/).filter(token => (token.match(/[a-zA-Z0-9]/)))```\n\r\n\r\n\r\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Looking for space efficient algorithms and data structures\r\n                \r\nPreferably in Java. I am interested in implementations of data structures such as Sets and Maps, and algorithms such as sorting, that are memory-efficient, not necessarily fast. I could live with O(n^2) fetch and store if the amount of memory and number of allocations was low. Anything out there?\n    ", "Answer": "\r\nFor extremely compact structures compared to java standard ones, one could work at the bit level. That depends a lot on your data of course, the code can't really be generic I guess. I know nothing that could do it generically. You could have to develop it (possibly using the BitSet class).\n\n\n\nSomething in Java that is extremely compact it the enum classes : EnumSet and EnumMaps. They are both extremely compact and extremely fast. The idea:\n\n\nIdentifying the presence or not of a specific enum instance in a Set is a boolean information, so it requires 1 bit. Therefore, the EnumSet requires only one Long (for enums with less than 64 instances).\nIn an EnumMap (String is just for the example), it is not required to store the key (enum), it can be made implicit by calling ordinal() on the enum which delivers the index. Therefore, the storage can be String[], and the keys are not stored.\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Fast permutation -> number -> permutation mapping algorithms\r\n                \r\nI have n elements.  For the sake of an example, let's say, 7 elements, 1234567.  I know there are 7! = 5040 permutations possible of these 7 elements.\n\nI want a fast algorithm comprising two functions:\n\nf(number) maps a number between 0 and 5039 to a unique permutation, and\n\nf'(permutation) maps the permutation back to the number that it was generated from.\n\nI don't care about the correspondence between number and permutation, providing each permutation has its own unique number.\n\nSo, for instance, I might have functions where\n\n```\nf(0) = '1234567'\nf'('1234567') = 0\n```\n\n\nThe fastest algorithm that comes to mind is to enumerate all permutations and create a lookup table in both directions, so that, once the tables are created, f(0) would be O(1) and f('1234567') would be a lookup on a string.  However, this is memory hungry, particularly when n becomes large.\n\nCan anyone propose another algorithm that would work quickly and without the memory disadvantage?\n    ", "Answer": "\r\nTo describe a permutation of n elements, you see that for the position that the first element ends up at, you have n possibilities, so you can describe this with a number between 0 and n-1. For the position that the next element ends up at, you have n-1 remaining possibilities, so you can describe this with a number between 0 and n-2.\nEt cetera until you have n numbers. \n\nAs an example for n = 5, consider the permutation that brings ```\nabcde```\n to ```\ncaebd```\n.\n\n\n```\na```\n, the first element, ends up at the second position, so we assign it index 1.\n```\nb```\n ends up at the fourth position, which would be index 3, but it's the third remaining one, so we assign it 2.\n```\nc```\n ends up at the first remaining position, which is always 0. \n```\nd```\n ends up at the last remaining position, which (out of only two remaining positions) is 1.\n```\ne```\n ends up at the only remaining position, indexed at 0.\n\n\nSo we have the index sequence {1, 2, 0, 1, 0}.\n\nNow you know that for instance in a binary number, 'xyz' means z + 2y + 4x. For a decimal number,\nit's z + 10y + 100x. Each digit is multiplied by some weight, and the results are summed. The obvious pattern in the weight is of course that the weight is w = b^k, with b the base of the number and k the index of the digit. (I will always count digits from the right and starting at index 0 for the rightmost digit. Likewise when I talk about the 'first' digit I mean the rightmost.)\n\nThe reason why the weights for digits follow this pattern is that the highest number that can be represented by the digits from 0 to k must be exactly 1 lower than the lowest number that can be represented by only using digit k+1. In binary, 0111 must be one lower than 1000. In decimal, 099999 must be one lower than 100000.\n\nEncoding to variable-base\nThe spacing between subsequent numbers being exactly 1 is the important rule. Realising this, we can represent our index sequence by a variable-base number. The base for each digit is the amount of different possibilities for that digit. For decimal each digit has 10 possibilities, for our system the rightmost digit would have 1 possibility and the leftmost will have n possibilities. But since the rightmost digit (the last number in our sequence) is always 0, we leave it out. That means we're left with bases 2 to n. In general, the k'th digit will have base b[k] = k + 2. The highest value allowed for digit k is h[k] = b[k] - 1 = k + 1.\n\nOur rule about the weights w[k] of digits requires that the sum of h[i] * w[i], where i goes from i = 0 to i = k, is equal to 1 * w[k+1]. Stated recurrently, w[k+1] = w[k] + h[k] * w[k] = w[k]*(h[k] + 1). The first weight w[0] should always be 1. Starting from there, we have the following values:\n\n```\nk    h[k] w[k]    \n\n0    1    1  \n1    2    2    \n2    3    6    \n3    4    24   \n...  ...  ...\nn-1  n    n!  \n```\n\n\n(The general relation w[k-1] = k! is easily proved by induction.)\n\nThe number we get from converting our sequence will then be the sum of s[k] * w[k], with k running from 0 to n-1. Here s[k] is the k'th (rightmost, starting at 0) element of the sequence. As an example, take our {1, 2, 0, 1, 0}, with the rightmost element stripped off as mentioned before: {1, 2, 0, 1}. Our sum is 1 * 1 + 0 * 2 + 2 * 6 + 1 * 24 = 37.\n\nNote that if we take the maximum position for every index, we'd have {4, 3, 2, 1, 0}, and that converts to 119. Since the weights in our number encoding were chosen so that we don't skip any numbers, all numbers 0 to 119 are valid. There are precisely 120 of these, which is n! for n = 5 in our example, precisely the number of different permutations. So you can see our encoded numbers completely specify all possible permutations. \n\nDecoding from variable-base\nDecoding is similar to converting to binary or decimal. The common algorithm is this:\n\n```\nint number = 42;\nint base = 2;\nint[] bits = new int[n];\n\nfor (int k = 0; k < bits.Length; k++)\n{\n    bits[k] = number % base;\n    number = number / base;\n}\n```\n\n\nFor our variable-base number:\n\n```\nint n = 5;\nint number = 37;\n\nint[] sequence = new int[n - 1];\nint base = 2;\n\nfor (int k = 0; k < sequence.Length; k++)\n{\n    sequence[k] = number % base;\n    number = number / base;\n\n    base++; // b[k+1] = b[k] + 1\n}\n```\n\n\nThis correctly decodes our 37 back to {1, 2, 0, 1} (```\nsequence```\n would be ```\n{1, 0, 2, 1}```\n in this code example, but whatever ... as long as you index appropriately). We just need to add 0 at the right end (remember the last element always has only one possibility for its new position) to get back our original sequence {1, 2, 0, 1, 0}.\n\nPermuting a list using an index sequence\nYou can use the below algorithm to permute a list according to a specific index sequence. It's an O(n²) algorithm, unfortunately.\n\n```\nint n = 5;\nint[] sequence = new int[] { 1, 2, 0, 1, 0 };\nchar[] list = new char[] { 'a', 'b', 'c', 'd', 'e' };\nchar[] permuted = new char[n];\nbool[] set = new bool[n];\n\nfor (int i = 0; i < n; i++)\n{\n    int s = sequence[i];\n    int remainingPosition = 0;\n    int index;\n\n    // Find the s'th position in the permuted list that has not been set yet.\n    for (index = 0; index < n; index++)\n    {\n        if (!set[index])\n        {\n            if (remainingPosition == s)\n                break;\n\n            remainingPosition++;\n        }\n    }\n\n    permuted[index] = list[i];\n    set[index] = true;\n}\n```\n\n\nCommon representation of permutations\nNormally you would not represent a permutation as unintuitively as we've done, but simply by the absolute position of each element after the permutation is applied. Our example {1, 2, 0, 1, 0} for ```\nabcde```\n to ```\ncaebd```\n is normally represented by {1, 3, 0, 4, 2}. Each index from 0 to 4 (or in general, 0 to n-1) occurs exactly once in this representation.\n\nApplying a permutation in this form is easy:\n\n```\nint[] permutation = new int[] { 1, 3, 0, 4, 2 };\n\nchar[] list = new char[] { 'a', 'b', 'c', 'd', 'e' };\nchar[] permuted = new char[n];\n\nfor (int i = 0; i < n; i++)\n{\n    permuted[permutation[i]] = list[i];\n}\n```\n\n\nInverting it is very similar:\n\n```\nfor (int i = 0; i < n; i++)\n{\n    list[i] = permuted[permutation[i]];\n}\n```\n\n\nConverting from our representation to the common representation\nNote that if we take our algorithm to permute a list using our index sequence, and apply it to the identity permutation {0, 1, 2, ..., n-1}, we get the inverse permutation, represented in the common form. ({2, 0, 4, 1, 3} in our example).\n\nTo get the non-inverted premutation, we apply the permutation algorithm I just showed:\n\n```\nint[] identity = new int[] { 0, 1, 2, 3, 4 };\nint[] inverted = { 2, 0, 4, 1, 3 };\nint[] normal = new int[n];\n\nfor (int i = 0; i < n; i++)\n{\n    normal[identity[i]] = list[i];\n}\n```\n\n\nOr you can just apply the permutation directly, by using the inverse permutation algorithm:\n\n```\nchar[] list = new char[] { 'a', 'b', 'c', 'd', 'e' };\nchar[] permuted = new char[n];\n\nint[] inverted = { 2, 0, 4, 1, 3 };\n\nfor (int i = 0; i < n; i++)\n{\n    permuted[i] = list[inverted[i]];\n}\n```\n\n\nNote that all the algorithms for dealing with permutations in the common form are O(n), while applying a permutation in our form is O(n²). If you need to apply a permutation several times, first convert it to the common representation.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to replace all available special character and numbers in php using regular expression\r\n                \r\nI am using AES algorithm and its encrypting the string with all avilable special chanracter and number. Please help me to write a ereg_replace function which will remove all special character and number from the encrypted string.\n\nExample of the string is:\n\n```\nHyS7Nj+c3b3+1kaT6gLpK9kDQS3lIDtYUNQHtz/bLAw=\n```\n\n\ni have used following:\n\n```\n    $enc1 = preg_replace('/[0-9]/', '', $enc);\n$enc2=preg_replace('/[\\/\\&%#\\$]/', '', $enc1);\n$en=preg_replace('/[\\\"\\'\\|]/', '', $enc2);\n```\n\n\nEvery time this string it gets change. so please help me. i want to replace this with any random character.\n\nhelp me to write one single preg_replace which will just give me alphabets in resulted string.\n    ", "Answer": "\r\nYou can try this:\n\nTo remove just special characters use this.\n\n```\n$enc = \"HyS7Nj+c3b3+1kaT6gLpK9kDQS3lIDtYUNQHtz/bLAw=\";\necho preg_replace('/\\W/', '', $enc);\n```\n\n\nTo remove both numbers and special characters use this.\n\n```\n$enc = \"HyS7Nj+c3b3+1kaT6g$#@LpK9kDQS3lIDtYU%^NQHtz/bLAw=\";\necho preg_replace('/\\W|\\d/', '', $enc);\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithms task about finding not unique number in array\r\n                \r\nI'm new at algorithms and want to know how to solve this task. A detailed Java solution is desirable.\nYou have been given an integer n≥2 and an integer array A[0..n−1] which is sorted in\nnondecreasing order . All numbers repeat 1 time but one number repeats 2 times, how do you find the number that repeat 2 times. Using data structures and built-in functions was not allowed. Complexity of algorithm should be O(lg(n))\n    ", "Answer": "\r\nYou can use a custom binary search algorithm.\nWe can observe that if there would be only values that repeated once (which occur twice), then the size of the array is even, and we have for each even index ```\ni```\n: ```\nA[i] == A[i+1]```\n.\nSince there is exactly one triplet, the array's size is odd, and so if we find an even index ```\ni```\n for which ```\nA[i] == A[i+1]```\n we know that the triplet did not occur at the left side of ```\ni```\n. If however ```\nA[i] != A[i+1]```\n, then we are sure the triplet occurred at the left side of ```\ni```\n.\nThis is all we need to perform a binary search. We should just make sure we always make our checks at even indices.\nHere is an implementation in JavaScript:\n\r\n\r\n```\nfunction binarySearchTriplet(arr) {\n    let lo = 0, hi = arr.length - 1; // even\n    while (lo < hi) {\n        // Take mid, but force it to be even\n        mid = (lo + hi) >> 2 << 1;\n        if (arr[mid] === arr[mid+1]) {\n            lo = mid + 2;\n        } else {\n            hi = mid;\n        }\n    }\n    return arr[lo];\n}\n\nlet arr = [1,1,4,4,4,5,5,7,7,2,2,6,6,8,8];\nconsole.log(binarySearchTriplet(arr)); // 4```\n\r\n\r\n\r\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Which metaheuristic algorithm should i use in this situation?\r\n                \r\nNeed advice here on metaheuristic algorithms.\nI have a set of numerical data (a population if you will) given to me by several people regarding the way they approach a certain problem (how much time did they take, how many resources, number of people for task, etc or failing that how hard/easy certain things within the problem was to do using a Fibonacci sequence). The results have low ends, high ends and numbers between those two so i cant really know which one is the most correct\nUsing metaheuristic algorithms (and which ones) how do i find which numbers are more accurate/optimal\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Java 8: Difference between two LocalDateTime in multiple units\r\n                \r\nI am trying to calculate the difference between two ```\nLocalDateTime```\n. \n\nThe output needs to be of the format ```\ny years m months d days h hours m minutes s seconds```\n. Here is what I have written:\n\n```\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.Period;\nimport java.time.ZoneId;\n\npublic class Main {\n\n    static final int MINUTES_PER_HOUR = 60;\n    static final int SECONDS_PER_MINUTE = 60;\n    static final int SECONDS_PER_HOUR = SECONDS_PER_MINUTE * MINUTES_PER_HOUR;\n\n    public static void main(String[] args) {\n        LocalDateTime toDateTime = LocalDateTime.of(2014, 9, 9, 19, 46, 45);\n        LocalDateTime fromDateTime = LocalDateTime.of(1984, 12, 16, 7, 45, 55);\n\n        Period period = getPeriod(fromDateTime, toDateTime);\n        long time[] = getTime(fromDateTime, toDateTime);\n\n        System.out.println(period.getYears() + \" years \" + \n                period.getMonths() + \" months \" + \n                period.getDays() + \" days \" +\n                time[0] + \" hours \" +\n                time[1] + \" minutes \" +\n                time[2] + \" seconds.\");\n\n\n    }\n\n    private static Period getPeriod(LocalDateTime dob, LocalDateTime now) {\n        return Period.between(dob.toLocalDate(), now.toLocalDate());\n    }\n\n    private static long[] getTime(LocalDateTime dob, LocalDateTime now) {\n        LocalDateTime today = LocalDateTime.of(now.getYear(),\n                now.getMonthValue(), now.getDayOfMonth(), dob.getHour(), dob.getMinute(), dob.getSecond());\n        Duration duration = Duration.between(today, now);\n\n        long seconds = duration.getSeconds();\n\n        long hours = seconds / SECONDS_PER_HOUR;\n        long minutes = ((seconds % SECONDS_PER_HOUR) / SECONDS_PER_MINUTE);\n        long secs = (seconds % SECONDS_PER_MINUTE);\n\n        return new long[]{hours, minutes, secs};\n    }\n}\n```\n\n\nThe output that I am getting is ```\n29 years 8 months 24 days 12 hours 0 minutes 50 seconds```\n. I have checked my result from this website (with values ```\n12/16/1984 07:45:55```\n and ```\n09/09/2014 19:46:45```\n). The following screenshot shows the output:\n\n\n\nI am pretty sure that the fields after the month value is coming wrong from my code. Any suggestion would be very helpful.\n\nUpdate\n\nI have tested my result from another website and the result I got is different. Here it is: Calculate duration between two dates (result: 29 years, 8 months, 24 days, 12 hours, 0 minutes and 50 seconds).\n\nUpdate\n\nSince I got two different results from two different sites, I am wondering if the algorithm of my calculation is legitimate or not. If I use following two ```\nLocalDateTime```\n objects:\n\n```\nLocalDateTime toDateTime = LocalDateTime.of(2014, 9, 10, 6, 40, 45);\nLocalDateTime fromDateTime = LocalDateTime.of(1984, 12, 16, 7, 45, 55);\n```\n\n\nThen the output is coming: ```\n29 years 8 months 25 days -1 hours -5 minutes -10 seconds.```\n\n\nFrom this link it should be ```\n29 years 8 months 24 days 22 hours, 54 minutes and 50 seconds```\n. So the algorithm needs to handle the negative numbers too.\n\nNote the question is not about which site gave me what result, I need to know the right algorithm and need to have right results.\n    ", "Answer": "\r\nI found the best way to do this is with ChronoUnit.\n```\nlong minutes = ChronoUnit.MINUTES.between(fromDate, toDate);\nlong hours = ChronoUnit.HOURS.between(fromDate, toDate);\n```\n\nAdditional documentation is here: Period and Duration\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "algorithms and run-time analysis\r\n                \r\nA file (included with two examples) is a list of banned number intervals. A line that contains, for example, 12-18, indicates that all numbers 12 to (inclusive) 18 are prohibited. The intervals may overlap.\nWe want to know what the minimum number is.\nUse variables to analyze run-time (not necessarily need all them):\n\n• N: Maximum (not maximum permissible) number; So the numbers are between 0 and N\n\n• K: number of intervals in a file\n\n• M: width of maximum interval.\n\nA. There is an obvious way to solve this problem: we're checking all numbers until we run into the smallest allowed.\n• How fast is such an algorithm?\n\nB. You can probably imagine another simple algorithm that uses N bytes (or bits) of memory.\n(Hint: strikethrough.)\n• Describe it with words. For example, you can make your own assignment (say a few intervals with numbers between 0 and 20), and show the algorithm on them. However, it also draws up a general description.\n• How fast is this algorithm? When thinking, use N, K, and M (if you need it).\n\nC. Make an algorithm that does not consume additional memory (more accurately: the memory consumption should be independent of N, K and M), but it is faster than the algorithm under point A.\n• Describe it.\n• How fast is it? Is it faster than the B algorithm?\n\nD. Now we are interested in how many numbers are allowed (between 0 and N). How would you adjust the above algorithms for this question? What happens to their rates?\n\n```\nfile = \"0-19.txt\"\nintervals = [tuple(map(int, v.split(\"-\"))) for v in open(file)]\n#example# intervals = [(12, 18), (2, 5), (3, 8), (0, 4), (15, 19), (6, 9), (13, 17), (4, 8)]#\n```\n\n\nmy current code just executes the program but better algorithms for the code i am yet to figure, still need a lot of work to understand, i would need a quick solution code/algorithm for examples A, B, and C and maybe D. Then i can study the time analysis myself. Appreciate help!\n\n```\ndef generator_intervala(start, stop, step):\n    forbidden_numbers = set()\n    while start <= stop:\n        forbidden_numbers.add(start)\n        start += step\n    return (forbidden_numbers)\n\n\nmnozica = set()\nfor interval in intervals:\n    a, b = interval\n    values = (generator_intervala(a, b, 1))\n    for i in values:\n        mnozica.add(i)\n\n\n\nallowed_numbers = set()\nN = max(mnozica)\nfor i in range(N):\n    if i not in mnozica:\n        allowed_numbers.add(i)\n\n\n\n\nprint(intervals)\nprint(mnozica)\nprint(min(allowed_numbers))\nprint(max(mnozica))\n\nOutput:\n\n[(12, 18), (2, 5), (3, 8), (0, 4), (15, 19), (6, 9), (13, 17), (4, 8)]\n{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19}\n10\n19\n```\n\n    ", "Answer": "\r\nYour set approach is needlessly complex:\n\n```\nN = 100\nranges = [(12, 18), (2, 5), (3, 8), (0, 4), (15, 19), (6, 9), (13, 17), (4, 8)]\n\ndo_not_use = set()\n\nfor (a,b) in ranges: \n    do_not_use.update(range(a,b+1))          \n\nprint(do_not_use)  \n\nprint( min(a for a in range(N+1) if a not in do_not_use))\n```\n\n\nIs about all that is needed. Output:\n\n```\nset([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19])\n10\n```\n\n\nThis is independend of N it just depends on how many numbers are in the ranges.\n\nStoring only forbidden numbers in a set takes O(1) for checking, using the ```\nmin()```\n buildin over a range to get the minimum. \n\nYou can make it faster if you sort your tuples first and then iterate them until you find the first gap making it Θ(N log N) for the sort, followed by Θ(N) for the search:\n\n```\ndef findme():\n    ranges = [(12, 18), (2, 5), (3, 8), (0, 4), (15, 19), (6, 9), (13, 17), (4, 8)]\n    ranges.sort()  # inplace sort, no additional space requirements\n    if ranges[0][0]>0: \n        return 0\n\n    for ((a_min,a_max),(b_min,b_max)) in zip(ranges,ranges[1:]):\n        if a_max < b_min-1:\n            return a_max+1\n\n    return ranges[-1][1]+1  # might give you N+1 if no solution in 0-N exists\n```\n\n\n\n\n```\ntimeit```\n of yours vs mine:\n\nYour code uses 2 sets, as well as multiple loops, incremental addition to your set and function calls that makes it slower:\n\n```\nN = 100\n\ndef findme():\n    ranges = [(12, 18), (2, 5), (3, 8), (0, 4), (15, 19), (6, 9), (13, 17), (4, 8)]\n    ranges.sort()\n    if ranges[0][0]>0: \n        return 0\n\n    for ((a_min,a_max),(b_min,b_max)) in zip(ranges,ranges[1:]):\n        if a_max < b_min-1:\n            return a_max+1\n\n    return ranges[-1][1]+1\n\ndef mine():\n    ranges = [(12, 18), (2, 5), (3, 8), (0, 4), (15, 19), (6, 9), (13, 17), (4, 8)]\n    N = 100\n    do_not_use = set()\n\n    for (a,b) in ranges: \n        do_not_use.update(range(a,b+1))          \n\n    return min(a for a in range(N+1) if a not in do_not_use)\n\ndef yours():\n    ranges = [(12, 18), (2, 5), (3, 8), (0, 4), (15, 19), (6, 9), (13, 17), (4, 8)]\n    def generator_intervala(start, stop, step):\n        forbidden_numbers = set()\n        while start <= stop:\n            forbidden_numbers.add(start)\n            start += step\n        return (forbidden_numbers)\n\n    mnozica = set()\n    for interval in ranges:\n        a, b = interval\n        values = (generator_intervala(a, b, 1))\n        for i in values:\n            mnozica.add(i)\n\n    allowed_numbers = set()\n    N = max(mnozica)\n    for i in range(N):\n        if i not in mnozica:\n            allowed_numbers.add(i)\n\n    return min(allowed_numbers)\n\nimport timeit\nprint(\"yours\", timeit.timeit(yours,number=100000))  \nprint(\"mine\", timeit.timeit(mine,number=100000))\nprint(\"findme\", timeit.timeit(findme,number=100000))\n```\n\n\nOutput:\n\n```\nyours 1.3931225209998956\nmine 1.263602267999886\nfindme 0.1711935210005322\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Divide and Conquer Algorithm Max Number in Array\r\n                \r\nI'm new to divide and conquer algorithms and need to construct one to find the largest number in an array. Below is my code, I understand I need to divide the array into 2 parts, then recursively find the maximum in each part. Then, combine and find the largest in the 2 parts. Below is my code, I'm struggling to figure out how to recursively call the function to find the maximum in each part.\n\n```\nprivate static int problem(int[] histogram) {\n        int left = 0;\n        int right = histogram.length -1;\n        if (left == right){\n            return left;\n        }\n        int middle = (left + right)/2;\n\n        return -1;\n    }    \n```\n\n\nAlso, would this be O(n log n) time complexity?\n    ", "Answer": "\r\n```\nstatic int maxNumber(int[] array) {\n        switch (array.length) {\n            case 1:\n              return array[0];\n            case 2:\n              return array[0] > array[1]\n                ? array[0]\n                : array[1];\n            default:\n              int left = maxNumber(Arrays.copyOfRange(array, 0, (int) (array.length / 2)));\n              int right = maxNumber(Arrays.copyOfRange(array, (int) (array.length / 2), array.length));\n              return left > right\n                ? left\n                : right;\n        }\n    }\n```\n\n\nAs you can see, in recursions the most important part is handling the end conditions. Telling the recursion when to stop. In our case, we stop when we have one or two numbers in an array (if we devide array with 3 elements we get one with 2 and one with 1).\n\nAfter you handle the end conditions, what's left is the recursion. You divide the array into two parts and run the same function on each part. This will give you (eventually) the answer.\n\nBear in mind that the space complexity of such a solution is quite high. You create two sub-arrays each time you call the recursive functions. This could be solved with a method signature of sorts: ```\nmaxNumber(array, start, end)```\n which will be first called as ```\nmaxNumber(array, 0, array.length)```\n and each recursive run, instead of copying the array, you just call the method with the same array reference, but you narrow the ```\nstart```\n and ```\nend```\n pointers.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How do I create a URL shortener? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                Closed 2 years ago.\r\n        \r\n\r\n\r\n            \r\n        \r\n            \r\n                    \r\n                        \r\n                    \r\n                \r\n                    \r\n                            \r\n                                Locked. This question and its answers are locked because the question is off-topic but has historical significance. It is not currently accepting new answers or interactions.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n\r\n\r\n    \r\n\r\nI want to create a URL shortener service where you can write a long URL into an input field and the service shortens the URL to \"```\nhttp://www.example.org/abcdef```\n\".\n\nInstead of \"```\nabcdef```\n\" there can be any other string with six characters containing ```\na-z, A-Z and 0-9```\n. That makes 56~57 billion possible strings.\n\nMy approach:\n\nI have a database table with three columns:\n\n\nid, integer, auto-increment\nlong, string, the long URL the user entered\nshort, string, the shortened URL (or just the six characters)\n\n\nI would then insert the long URL into the table. Then I would select the auto-increment value for \"```\nid```\n\" and build a hash of it. This hash should then be inserted as \"```\nshort```\n\". But what sort of hash should I build? Hash algorithms like MD5 create too long strings. I don't use these algorithms, I think. A self-built algorithm will work, too.\n\nMy idea:\n\nFor \"```\nhttp://www.google.de/```\n\" I get the auto-increment id ```\n239472```\n. Then I do the following steps:\n\n```\nshort = '';\nif divisible by 2, add \"a\"+the result to short\nif divisible by 3, add \"b\"+the result to short\n... until I have divisors for a-z and A-Z.\n```\n\n\nThat could be repeated until the number isn't divisible any more. Do you think this is a good approach? Do you have a better idea?\n\n\n  Due to the ongoing interest in this topic, I've published an efficient solution to GitHub, with implementations for JavaScript, PHP, Python and Java. Add your solutions if you like :) \n\n    ", "Answer": "\r\nI would continue your \"convert number to string\" approach. However, you will realize that your proposed algorithm fails if your ID is a prime and greater than 52.\n\nTheoretical background\n\nYou need a Bijective Function f. This is necessary so that you can find a inverse function g('abc') = 123 for your f(123) = 'abc' function. This means:\n\n\nThere must be no x1, x2 (with x1 ≠ x2) that will make f(x1) = f(x2),\nand for every y you must be able to find an x so that f(x) = y.\n\n\nHow to convert the ID to a shortened URL\n\n\nThink of an alphabet we want to use. In your case, that's ```\n[a-zA-Z0-9]```\n. It contains 62 letters.\nTake an auto-generated, unique numerical key (the auto-incremented ```\nid```\n of a MySQL table for example).\n\nFor this example, I will use 12510 (125 with a base of 10).\nNow you have to convert 12510 to X62 (base 62).\n\n12510 = 2×621 + 1×620 = ```\n[2,1]```\n\n\nThis requires the use of integer division and modulo. A pseudo-code example:\n\n```\ndigits = []\n\nwhile num > 0\n  remainder = modulo(num, 62)\n  digits.push(remainder)\n  num = divide(num, 62)\n\ndigits = digits.reverse\n```\n\n\nNow map the indices 2 and 1 to your alphabet. This is how your mapping (with an array for example) could look like:\n\n```\n0  → a\n1  → b\n...\n25 → z\n...\n52 → 0\n61 → 9\n```\n\n\nWith 2 → c and 1 → b, you will receive cb62 as the shortened URL.\n\n```\nhttp://shor.ty/cb\n```\n\n\n\nHow to resolve a shortened URL to the initial ID\n\nThe reverse is even easier. You just do a reverse lookup in your alphabet.\n\n\ne9a62 will be resolved to \"4th, 61st, and 0th letter in the alphabet\".\n\ne9a62 = ```\n[4,61,0]```\n = 4×622 + 61×621 + 0×620 = 1915810\nNow find your database-record with ```\nWHERE id = 19158```\n and do the redirect.\n\n\nExample implementations (provided by commenters)\n\n\nC++\nPython\nRuby\nHaskell\nC#\nCoffeeScript\nPerl\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithms and techniques for string search across multiple GiB of text files\r\n                \r\nI have to create a utility that searches through 40 to 60 GiB of text files as quick as possible.\nEach file has around 50 MB of data that consists of log lines (about 630.000 lines per file).\nA NOSQL document database is unfortunately no option...\nAs of now I am using a Aho-Corsaick algorithm for the search which I stole from Tomas Petricek off of his blog. It works very well.\nI process the files in Tasks. Each file is loaded into memory by simply calling ```\nFile.ReadAllLines(path)```\n. The lines are then fed into the Aho-Corsaick one by one, thus each file causes around 600.000 calls to the algorithm (I need the line number in my results).\nThis takes a lot of time and requires a lot of memory and CPU.\nI have very little expertise in this field as I usually work in image processing.\nCan you guys recommend algorithms and approaches which could speed up the processing?\nBelow is more detailed view to the Task creation and file loading which is pretty standard. For more information on the Aho-Corsaick, please visit the linked blog page above.\n```\nprivate KeyValuePair<string, StringSearchResult[]> FindInternal(\n    IStringSearchAlgorithm algo, \n    string file)\n{\n    List<StringSearchResult> result = new List<StringSearchResult>();\n    string[] lines = File.ReadAllLines(file);\n    for (int i = 0; i < lines.Length; i++)\n    {\n        var results = algo.FindAll(lines[i]);\n        for (int j = 0; j < results.Length; j++)\n        {\n            results[j].Row = i;\n        }\n    }\n    foreach (string line in lines)\n    {\n        result.AddRange(algo.FindAll(line));\n    }\n    return new KeyValuePair<string, StringSearchResult[]>(\n        file, result.ToArray());\n}\n\n\npublic Dictionary<string, StringSearchResult[]> Find(\n    params string[] search)\n{\n    IStringSearchAlgorithm algo = new StringSearch();\n    algo.Keywords = search;\n    Task<KeyValuePair<string, StringSearchResult[]>>[] findTasks\n        = new Task<KeyValuePair<string, StringSearchResult[]>>[_files.Count];\n    Parallel.For(0, _files.Count, i => {\n        findTasks[i] = Task.Factory.StartNew(\n            () => FindInternal(algo, _files[i])\n        );\n    });\n    Task.WaitAll(findTasks);\n    return findTasks.Select(t => t.Result)\n        .ToDictionary(x => x.Key, x => x.Value);\n}\n```\n\n    ", "Answer": "\r\nEDIT\nSee section Initial Answer for the original Answer.\nI further optimized my code by doing the following:\n\nAdded ```\npaging```\n to prevent memory overflow / crash due to large amount of result data.\nI ```\noffload```\n the search ```\nresults into local files```\n as soon as they exceed a certain buffer size (64kb in my case).\nOffloading the results required me to convert my ```\nSearchData```\n  struct ```\nto binary and back```\n.\nSplicing the array of files which are processed and running them in ```\nTasks```\n greatly increased performance (from 35 sec to 9 sec when processing about 25 GiB of search data)\n\n\nSplicing / scaling the file array\nThe code below gives a scaled/normalized value for T_min and T_max.\nThis value can then be used to determine the size of each array holding n-amount of file paths.\n```\nprivate int ScalePartition(int T_min, int T_max)\n{\n    // Scale m to range.\n    int m = T_max / 2;\n    int t_min = 4;\n    int t_max = Math.Max(T_max / 16, T_min);            \n    m = ((T_min - m) / (T_max - T_min)) * (t_max - t_min) + t_max;\n\n    return m;\n}\n```\n\nThis code shows the implementation of the scaling and splicing.\n```\n// Get size of file array portion.\nint scale = ScalePartition(1, _files.Count);\n// Iterator.\nint n = 0;\n// List containing tasks.\nList<Task<SearchData[]>> searchTasks = new List<Task<SearchData[]>>();\n// Loop through files.\nwhile (n < _files.Count) {\n    // Local instance of n. \n    // You will get an AggregateException if you use n \n    // as n changes during runtime.\n    int num = n;\n    // The amount of items to take.\n    // This needs to be calculated as there might be an \n    // odd number of elements in the file array.\n    int cnt = n + scale > _files.Count ? _files.Count - n : scale;\n    // Run the Find(int, int, Regex[]) method and add as task.\n    searchTasks.Add(Task.Run(() => Find(num, cnt, regexes)));\n    // Increment iterator by the amount of files stored in scale.\n    n += scale;\n}\n```\n\n\nInitial Answer\nI had the best results so far after switching to MemoryMappedFile and moving from the Aho-Corsaick back to Regex (a demand has been made that pattern matching is a must have).\nThere are still parts that can be optimized or changed and I'm sure this is not the fastest or best solution but for it's alright.\nHere is the code which returns the results in 30 seconds for 25 GiB worth of data:\n```\n// GNU coreutil wc defined buffer size.\n// Had best performance with this buffer size.\n//\n// Definition in wc.c:\n// -------------------\n// /* Size of atomic reads. */\n// #define BUFFER_SIZE (16 * 1024)\n//\nprivate const int BUFFER_SIZE = 16 * 1024;\n\nprivate KeyValuePair<string, SearchData[]> FindInternal(Regex[] rgx, string file)\n{\n    // Buffer for data segmentation.\n    byte[] buffer = new byte[BUFFER_SIZE];\n    // Get size of file.\n    FileInfo fInfo = new FileInfo(file);\n    long fSize = fInfo.Length;\n    fInfo = null;\n\n    // List of results.\n    List<SearchData> results = new List<SearchData>();\n\n    // Create MemoryMappedFile.\n    string name = \"mmf_\" + Path.GetFileNameWithoutExtension(file);\n    using (var mmf = MemoryMappedFile.CreateFromFile(\n        file, FileMode.Open, name))\n    {\n        // Create read-only in-memory access to file data.\n        using (var accessor = mmf.CreateViewStream(\n            0, fSize,\n            MemoryMappedFileAccess.Read))\n        {\n            // Store current position.\n            int pos = (int)accessor.Position;\n            // Check if file size is less then the \n            // default buffer size.\n            int cnt = (int)(fSize - BUFFER_SIZE > 0 \n                    ? BUFFER_SIZE \n                    : fSize - BUFFER_SIZE);\n\n            // Iterate through file until end of file is reached.\n            while (accessor.Position < fSize)\n            {\n                // Write data to buffer.\n                accessor.Read(buffer, 0, cnt);\n                // Update position.\n                pos = (int)accessor.Position;\n                // Update next buffer size.\n                cnt = (int)(fSize - pos >= BUFFER_SIZE \n                    ? BUFFER_SIZE \n                    : fSize - pos);\n                // Convert buffer data to string for Regex search.\n                string s = Encoding.UTF8.GetString(buffer);\n                // Run regex against extracted data.\n                foreach (Regex r in rgx) {\n                    // Get matches.\n                    MatchCollection matches = r.Matches(s);\n                    // Create SearchData struct to reduce memory \n                    // impact and only keep relevant data.\n                    foreach (Match m in matches) {\n                        SearchData sd = new SearchData();\n                        // The actual matched string.\n                        sd.Match = m.Value; \n                        // The index in the file.\n                        sd.Index = m.Index + pos;\n                        // Index to find beginning of line.\n                        int nFirst = m.Index;\n                        // Index to find end of line.\n                        int nLast = m.Index;\n                        // Go back in line until the end of the\n                        // preceeding line has been found.\n                        while (s[nFirst] != '\\n' && nFirst > 0) {\n                            nFirst--;\n                        }\n                        // Append length of \\r\\n (new line).\n                        // Change this to 1 if you work on Unix system.\n                        nFirst+=2;\n                        // Go forth in line until the end of the\n                        // current line has been found.\n                        while (s[nLast] != '\\n' && nLast < s.Length-1)  {\n                            nLast++;\n                        }\n                        // Remove length of \\r\\n (new line).\n                        // Change this to 1 if you work on Unix system.\n                        nLast-=2;\n                        // Store whole line in SearchData struct.\n                        sd.Line = s.Substring(nFirst, nLast - nFirst);\n                        // Add result.\n                        results.Add(sd);\n                    }\n                }\n            }\n        }\n    }\n    return new KeyValuePair<string, SearchData[]>(file, results.ToArray());\n}\n\n\npublic List<KeyValuePair<string, SearchData[]>> Find(params string[] search)\n{\n    var results = new List<KeyValuePair<string, SearchData[]>>();\n    // Prepare regex objects.\n    Regex[] regexes = new Regex[search.Length];\n    for (int i=0; i<regexes.Length; i++) {\n        regexes[i] = new Regex(search[i], RegexOptions.Compiled);                \n    }\n\n    // Get all search results.\n    // Creating the Regex once and passing it\n    // to the sub-routine is best as the regex\n    // engine adds a lot of overhead.\n    foreach (var file in _files) {\n        var data = FindInternal(regexes, file);                \n        results.Add(data);\n    }\n    return results;\n}\n```\n\nI had a stupid idea yesterday were I though that it might work out converting the file data to a bitmap and looking for the input within pixels as pixel checking is quite fast.\nJust for the giggles... here is the non-optimized test code for that stupid idea:\n```\npublic struct SearchData\n{\n    public string Line;\n    public string Search;\n    public int Row;\n\n    public SearchData(string l, string s, int r) {\n        Line    = l;\n        Search  = s;\n        Row     = r;\n    }\n}\n\n\ninternal static class FileToImage\n{\n    public static unsafe SearchData[] FindText(string search, Bitmap bmp)\n    {\n        byte[] buffer = Encoding.ASCII.GetBytes(search);\n\n        BitmapData data = bmp.LockBits(\n            new Rectangle(0, 0, bmp.Width, bmp.Height),\n            ImageLockMode.ReadOnly, bmp.PixelFormat);\n\n        List<SearchData> results = new List<SearchData>();\n        int bpp = Bitmap.GetPixelFormatSize(bmp.PixelFormat) / 8;\n        byte* ptFirst = (byte*)data.Scan0;\n        byte firstHit = buffer[0];\n        bool isFound = false;\n        for (int y=0; y<data.Height; y++) {\n            byte* ptStride = ptFirst + (y * data.Stride);\n            for (int x=0; x<data.Stride; x++) {\n                if (firstHit == ptStride[x]) {\n                    byte[] temp = new byte[buffer.Length];                       \n                    if (buffer.Length < data.Stride-x) {\n                        int ret = 0;                            \n                        for (int n=0, xx=x; n<buffer.Length; n++, xx++) {                             \n                            if (ptStride[xx] != buffer[n]) {\n                                break;\n                            }\n                            ret++;\n                        }\n                        if (ret == buffer.Length) {\n\n                            int lineLength = 0;\n                            for (int n = 0; n<data.Stride; n+=bpp) {\n                                if (ptStride[n+2] == 255 &&\n                                    ptStride[n+1] == 255 &&\n                                    ptStride[n+0] == 255) \n                                {\n                                    lineLength=n;\n                                }\n                            }\n\n                            SearchData sd = new SearchData();\n                            byte[] lineBytes = new byte[lineLength];\n                            Marshal.Copy((IntPtr)ptStride, lineBytes, 0, lineLength);\n                            sd.Search = search;\n                            sd.Line = Encoding.ASCII.GetString(lineBytes);\n                            sd.Row = y;\n                            results.Add(sd);\n                        }\n                    }\n                }\n            }             \n        }\n        return results.ToArray();\n        bmp.UnlockBits(data);\n        return null;\n    }\n    \n\n    private static unsafe Bitmap GetBitmapInternal(string[] lines, int startIndex, Bitmap bmp)\n    {\n        int bpp = Bitmap.GetPixelFormatSize(bmp.PixelFormat) / 8;\n        BitmapData data = bmp.LockBits(\n            new Rectangle(0, 0, bmp.Width, bmp.Height),\n            ImageLockMode.ReadWrite,\n            bmp.PixelFormat);\n\n        int index = startIndex;\n        byte* ptFirst = (byte*)data.Scan0;\n        int maxHeight = bmp.Height;\n        if (lines.Length - startIndex < maxHeight) {\n            maxHeight = lines.Length - startIndex -1;\n        }\n        for (int y = 0; y < maxHeight; y++) {\n            byte* ptStride = ptFirst + (y * data.Stride);\n            index++;\n            int max = lines[index].Length;\n            max += (max % bpp);\n            lines[index] += new string('\\0', max % bpp);\n            max = lines[index].Length;\n            for (int x=0; x+2<max; x+=bpp) {                    \n                ptStride[x+0] = (byte)lines[index][x+0];\n                ptStride[x+1] = (byte)lines[index][x+1];\n                ptStride[x+2] = (byte)lines[index][x+2];\n            }\n            ptStride[max+2] = 255;\n            ptStride[max+1] = 255;\n            ptStride[max+0] = 255;\n            for (int x = max + bpp; x < data.Stride; x += bpp) {\n                ptStride[x+2] = 0;\n                ptStride[x+1] = 0;\n                ptStride[x+0] = 0;\n            }\n        }\n        bmp.UnlockBits(data);            \n        return bmp;\n    }\n\n\n    public static unsafe Bitmap[] GetBitmap(string filePath)\n    {\n        int bpp = Bitmap.GetPixelFormatSize(PixelFormat.Format24bppRgb) / 8;\n        var lines = System.IO.File.ReadAllLines(filePath);\n        int y = 0x800; //lines.Length / 0x800;\n        int x = lines.Max(l => l.Length) / bpp;\n        int cnt = (int)Math.Ceiling((float)lines.Length / (float)y);\n\n        Bitmap[] results = new Bitmap[cnt];\n        for (int i = 0; i < results.Length; i++) {\n            results[i] = new Bitmap(x, y, PixelFormat.Format24bppRgb);\n            results[i] = GetBitmapInternal(lines, i * 0x800, results[i]);\n        }\n        return results;            \n    }\n\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Difference between Ranges algorithms and std algorithms\r\n                \r\nMany standard library algorithms have two versions in C++20: one in the ```\nstd```\n namespace and another one in the ```\nstd::ranges```\n namespace with the same name. For example, ```\nstd::ranges::count```\n and ```\nstd::count```\n are both are used to count the number of elements that satisfy a predicate.\nWhy are there two versions of these algorithms?\n    ", "Answer": "\r\nThe Ranges functionality adds C++20 concepts to iterators and ranges, and it constrains the definition of its algorithms and the like to those concepts. However, the C++20 concepts have different requirements from the C++17 named requirements. Usually, types which fulfilled the C++17 requirements will fulfill the C++20 concept equivalents, but not in all cases1. And while it is usually easy enough to update your own code to be valid for C++20 concepts, it would still break backwards compatibility for user-written iterators to just stop compiling in C++20.\nSo instead of imposing constrained algorithms on the user, they created new algorithms that you can choose to use instead. Thus, no code breakage.\n1: Also, because C++17's requirements were never actually checked by anything, it was really easy to accidentally write an iterator that didn't entirely implement their requirements. The algorithms you use could just not actually use the the functionality you didn't implement, thus giving the appearance that you implemented what you needed to. This is especially true if you didn't test the code against more than one standard library implementation. If C++20 started checking your iterators, it would suddenly break your technically-broken-yet-functional code.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to sort odd number list using only merge sort algorithm? and also even number separately?\r\n                \r\nHow to sort odd  number list using only merge sort algorithm? and also even number separately?\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What is the core difference between strings and numbers in Common Lisp?\r\n                \r\nBeing new with CL, I play a lot with simple algorithms. For instance, I tried to implement a function for removing all unique elements in a list. \n\n```\n(1 2 2 3 3 4 5 3) -> (2 2 3 3 3)```\n\n\nFirst attempt lead to this code:\n\n```\n(defun remove-unique (items)\n  (let ((duplicates (set-difference items (remove-duplicates items :test #'equal))))\n    (append duplicates (remove-duplicates duplicates :test #'equal))))\n```\n\n\nThis works ok with strings but does always return ```\nNIL```\n for numbers. Reading a bit more about ```\nset-difference```\n I've learned that it isn't suppose to work with duplicate populated lists at all, it just works somehow in my case, so I abandoned the approach as unportable and moved along.\n\nAnother attempt is:\n\n```\n(defun remove-unique (items)\n  (loop for item in items \n    when (member item (cdr (member item items)))\n    collect item))\n```\n\n\nAnd this works ok with numbers, but returns ```\nNIL```\n for strings.\n\nApparently there is a core difference between strings and numbers I don't understand. How come list processing functions such as ```\nmember```\n and ```\nset-difference```\n work differently on them?\n    ", "Answer": "\r\nThe equality comparison for numbers, characters and strings is indeed different. Equal, which you should be wary to use because it is more expensive, does structure equality (so it descends on some objects). eq does object equality. And eql does object equality for most cases except for numbers (where they check type and value) and characters (where they check 'value')\n\nSee the hyperspec entries for equal, eql and eq for more information.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Unknown Error in Number Prediction Algorithm\r\n                \r\nSo I'm working on this simple number prediction algorithm as an entry into algorithms and pattern recognition. It takes a linear string of numbers (14 in this case) starting at 2 and going up by 2 until 28.\n\nThe program works out the difference between each number by subtracting the number before from it. It then checks all the differences are the same, then adds the difference to the last number and prints it to the screen.\n\nIt works fine except that it thinks the difference is 0 every time and so prints the last number, 28, and the next number. There seem to be other questions like this, except they are asking how to do it with non-linear sequence and no one has the problem I do.\n\nI've tried everything I can think of, but it still can't determine the difference. It's probably something really obvious that I'm missing.\n\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace number_predition_with_constant\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int[] sequence = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 }; //all differ by 2. Diff = 2.\n            Console.WriteLine(sequence);\n            Console.WriteLine(\"\");\n            int[] differences = {};\n            int legnth = sequence.Length;\n            int diff = 0;  //when not given value,  some other instances not recognised \n            int j = 0;\n            //find difference between each number.\n            for (int i = 0; i == legnth-1; i++)\n            {\n                j = i + 1;\n                diff = sequence[j] - sequence[i];\n                differences[i] = diff;\n            }\n            //Print the difference between each number.\n            Console.Write(\"Difference: \");\n            Console.WriteLine(diff);\n            //Check all diffs are same. If not the same, print \"Error\"\n            for (int i = 0; i == legnth-1; i++)\n            {\n                if (differences[i] != differences[i+1])\n                {\n                    Console.WriteLine(\"Error\");\n                }\n            }\n            //calculate next number and print.\n            Console.Write(\"There are: \");\n            Console.Write(legnth);\n            Console.WriteLine(\" Numbers in the sequence\");\n            legnth = legnth - 1;\n            int next = sequence[legnth] + diff;\n            Console.Write(\"The next Number in the sequence is: \");\n            Console.WriteLine(next);\n            Console.ReadKey(); //Stop Console from closing till key pressed\n            }\n    }\n}\n```\n\n    ", "Answer": "\r\nI think that this line (which occurs in two places)\n\n```\nfor (int i = 0; i == legnth-1; i++)\n```\n\n\nShould be:\n\n```\nfor (int i = 0; i <= legnth-1; i++)\n```\n\n\nAlso these lines:\n\n```\nint[] differences = {};\nint legnth = sequence.Length;\n```\n\n\nShould be:\n\n```\nint legnth = sequence.Length;\nint[] differences = new int[legnth];\n```\n\n\nThere are probably other problems too, but fix those first. You might also want to globally change ```\nlegnth```\n to ```\nlength```\n... ;)\n\nIt looks like you might also have some out-by-one errors.\n\nRun the program under the debugger and single step through the entire thing. That should tell you what's wrong and give you a much better understanding of how to fix it.\n\nThat will be a useful exercise, and much more beneficial to you than if we just corrected all your code (even if anyone did have the time to do so). \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Find common numbers in array, algorithm efficiency in Javascript [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Simplest code for array intersection in javascript\r\n                            \r\n                                (40 answers)\r\n                            \r\n                    \r\n                Closed 5 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI'm solving the problem of finding the common numbers in two arrays.\n\nMy first approach was:\n\n```\n    const findCommonNumbers = (array1,array2) => {\n\n    const map = array1.reduce((accum, element)=>{\n        accum[element] = true;\n        return accum;\n    } , {});\n\n    const result = [];\n    array2.forEach((e)=>{\n        if (map[e]) {\n            result.push(e);\n        }\n    });\n    return result;\n}\n\nconst array1 = [4, 2, 3, 6, 23];\nconst array2 = [3, 2, 4, 7 ,9];\n\n\n\nconst result = findCommonNumbers(array1, array2 );\nconsole.log('result', result);\n```\n\n\nBut then, looking at the solution, the most efficient way seems to be:\n\n```\nconst findCommonNumbers = (array1, array2) => {\n\n    const result = [];\n    let p1 = 0;\n    let p2 = 0;\n    while (p1 < array1.length  && p2 < array2.length) {\n        const e1 = array1[p1];\n        const e2 = array2[p2];\n\n        if (e1 === e2) {\n            result.push(e1);\n            p1++;\n            p2++;\n        }\n        else if (e1 < e2) {\n            p1++;\n        }\n        else {\n            p2++;\n        }\n    }\n\n    return result;\n}\n\nconst array1 = [2, 3, 4, 6, 23];\nconst array2 = [2, 3, 4, 7, 9];\n\n\nconst result = findCommonNumbers(array1, array2);\nconsole.log('result', result);\n```\n\n\nBut, I see that in both cases, both arrays are iterated once, besides, my initial solution also works for unsorted arrays.\nWhat would be the complexity of both algorithms, and why?\nIs the proposed solution more efficient just by the fact that both arrays are iterated in the same loop, while in my case I iterate them sequentially?\n    ", "Answer": "\r\nOne line solution: \n\n```\na1.filter(n => a2.includes(n));\n```\n\n\nOr wrapping in function: \n\n```\nconst findCommonNumbers = (a1, a2) => a1.filter(n => a2.includes(n));\n```\n\n\nOr final solution when we want pass 'n' arrays and find common numbers\n\n```\nconst findCommonNumbers = (...a) => [...a].reduce((p,c) => p.filter(e => c.includes(e)));\n```\n\n\nPerformance\n\nI run simple benchmark to compare performance (i5-7500 3,4GHz, 16GB ram, windows 10, NodeJS v9.8.0)\n\n```\nsmallArray length = 10;\nbigArray length = 10000;\n```\n\n\nand some results: \n\n```\nCASE1: (a1, a2) => a1.filter(n => a2.includes(n)), INPUT(smallArr,BigArr)\n1: 0.892ms\nCASE2: (a1, a2) => a1.filter(n => a2.includes(n)), INPUT(bigArr,smallArr)\n2: 2.088ms\nCASE3: (...a) => [...a].reduce((p,c) => p.filter(e => c.includes(e))), INPUT(smallArr,BigArr)\n3: 0.968ms\nCASE4: (...a) => [...a].reduce((p,c) => p.filter(e => c.includes(e))), INPUT(bigArr,smallArr)\n4: 1.712ms\nCASE5: fgonzalez code, INPUT(smallArr,BigArr)\n5: 1.090ms\nCASE6: fgonzalez code, INPUT(bigArr,smallArr)\n6: 0.989ms\n\n\nCASE1: (a1, a2) => a1.filter(n => a2.includes(n)), INPUT(smallArr,BigArr)\n1: 0.908ms\nCASE2: (a1, a2) => a1.filter(n => a2.includes(n)), INPUT(bigArr,smallArr)\n2: 2.227ms\nCASE3: (...a) => [...a].reduce((p,c) => p.filter(e => c.includes(e))), INPUT(smallArr,BigArr)\n3: 0.968ms\nCASE4: (...a) => [...a].reduce((p,c) => p.filter(e => c.includes(e))), INPUT(bigArr,smallArr)\n4: 1.588ms\nCASE5: fgonzalez code, INPUT(smallArr,BigArr)\n5: 1.058ms\nCASE6: fgonzalez code, INPUT(bigArr,smallArr)\n6: 0.987ms\n\n\nCASE1: (a1, a2) => a1.filter(n => a2.includes(n)), INPUT(smallArr,BigArr)\n1: 1.014ms\nCASE2: (a1, a2) => a1.filter(n => a2.includes(n)), INPUT(bigArr,smallArr)\n2: 2.167ms\nCASE3: (...a) => [...a].reduce((p,c) => p.filter(e => c.includes(e))), INPUT(smallArr,BigArr)\n3: 0.991ms\nCASE4: (...a) => [...a].reduce((p,c) => p.filter(e => c.includes(e))), INPUT(bigArr,smallArr)\n4: 1.642ms\nCASE5: fgonzalez code, INPUT(smallArr,BigArr)\n5: 1.161ms\nCASE6: fgonzalez code, INPUT(bigArr,smallArr)\n6: 1.063ms\n\n\nCASE1: (a1, a2) => a1.filter(n => a2.includes(n)), INPUT(smallArr,BigArr)\n1: 0.941ms\nCASE2: (a1, a2) => a1.filter(n => a2.includes(n)), INPUT(bigArr,smallArr)\n2: 2.262ms\nCASE3: (...a) => [...a].reduce((p,c) => p.filter(e => c.includes(e))), INPUT(smallArr,BigArr)\n3: 0.989ms\nCASE4: (...a) => [...a].reduce((p,c) => p.filter(e => c.includes(e))), INPUT(bigArr,smallArr)\n4: 1.603ms\nCASE5: fgonzalez code, INPUT(smallArr,BigArr)\n5: 1.080ms\nCASE6: fgonzalez code, INPUT(bigArr,smallArr)\n6: 1.178ms\n```\n\n\nMy code is slightly faster when smallArr is the first arg.\n@fgonzalez code is 2x faster when bigArr is the first arg.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Is there a known algorithm for simplifying a boolean expression with number comparisons?\r\n                \r\nFor example, if I have the expression ```\n(A > 5) && (A == 6)```\n,\nthat expression can be simplified to just ```\n(A == 6)```\n, and still have the same behavior for A ∈ ℤ.\nI also need it to work with multiple variables, so for instance ```\n((B > 2) && (C == 2)) || ((B > 2) && (C < 2))```\n should simplify to ```\n(B > 2) && (C < 3)```\n.\nI won't need to compare two unknowns, only unknowns and numbers, and I only need it to work with the operators ```\n<```\n, ```\n>```\n, and ```\n==```\n for numbers, and ```\n&&```\n and ```\n||```\n for expressions (```\n&&```\n being AND and ```\n||```\n being OR, of course). All unknowns are integers.\nIs there any algorithm that takes such an expression and returns an expression with equal behavior and a minimal amount of operators?\n(in my specific case, ```\n||```\n operators are preferred over ```\n&&```\n)\n    ", "Answer": "\r\nHere's a slow dynamic programming algorithm along the lines that you were thinking of.\n```\nfrom collections import defaultdict, namedtuple\nfrom heapq import heappop, heappush\nfrom itertools import product\nfrom math import inf\n\n# Constructors for Boolean expressions. False and True are also accepted.\nLt = namedtuple(\"Lt\", [\"lhs\", \"rhs\"])\nEq = namedtuple(\"Eq\", [\"lhs\", \"rhs\"])\nGt = namedtuple(\"Gt\", [\"lhs\", \"rhs\"])\nAnd = namedtuple(\"And\", [\"lhs\", \"rhs\"])\nOr = namedtuple(\"Or\", [\"lhs\", \"rhs\"])\n\n# Variable names. Arbitrary strings are accepted.\nA = \"A\"\nB = \"B\"\nC = \"C\"\n\n# Example formulas.\nfirst_example = And(Gt(A, 5), Eq(A, 6))\nsecond_example = Or(And(Gt(B, 2), Eq(C, 2)), And(Gt(B, 2), Lt(C, 2)))\nthird_example = Or(And(Gt(A, 1), Gt(B, 1)), And(Gt(A, 0), Gt(B, 2)))\nfourth_example = Or(Lt(A, 6), Gt(A, 5))\nfifth_example = Or(And(Eq(A, 2), Gt(C, 2)), And(Eq(B, 2), Lt(C, 2)))\n\n# Returns a map from each variable to the set of values such that the formula\n# might evaluate differently for variable = value-1 versus variable = value.\ndef get_critical_value_sets(formula, result=None):\n    if result is None:\n        result = defaultdict(set)\n    if isinstance(formula, bool):\n        pass\n    elif isinstance(formula, Lt):\n        result[formula.lhs].add(formula.rhs)\n    elif isinstance(formula, Eq):\n        result[formula.lhs].add(formula.rhs)\n        result[formula.lhs].add(formula.rhs + 1)\n    elif isinstance(formula, Gt):\n        result[formula.lhs].add(formula.rhs + 1)\n    elif isinstance(formula, (And, Or)):\n        get_critical_value_sets(formula.lhs, result)\n        get_critical_value_sets(formula.rhs, result)\n    else:\n        assert False, str(formula)\n    return result\n\n\n# Returns a list of inputs sufficient to compare Boolean combinations of the\n# primitives returned by enumerate_useful_primitives.\ndef enumerate_truth_table_inputs(critical_value_sets):\n    variables, value_sets = zip(*critical_value_sets.items())\n    return [\n        dict(zip(variables, values))\n        for values in product(*({-inf} | value_set for value_set in value_sets))\n    ]\n\n\n# Returns both constants and all single comparisons whose critical value set is\n# a subset of the given ones.\ndef enumerate_useful_primitives(critical_value_sets):\n    yield False\n    yield True\n    for variable, value_set in critical_value_sets.items():\n        for value in value_set:\n            yield Lt(variable, value)\n            if value + 1 in value_set:\n                yield Eq(variable, value)\n            yield Gt(variable, value - 1)\n\n\n# Evaluates the formula recursively on the given input.\ndef evaluate(formula, input):\n    if isinstance(formula, bool):\n        return formula\n    elif isinstance(formula, Lt):\n        return input[formula.lhs] < formula.rhs\n    elif isinstance(formula, Eq):\n        return input[formula.lhs] == formula.rhs\n    elif isinstance(formula, Gt):\n        return input[formula.lhs] > formula.rhs\n    elif isinstance(formula, And):\n        return evaluate(formula.lhs, input) and evaluate(formula.rhs, input)\n    elif isinstance(formula, Or):\n        return evaluate(formula.lhs, input) or evaluate(formula.rhs, input)\n    else:\n        assert False, str(formula)\n\n\n# Evaluates the formula on the many inputs, packing the values into an integer.\ndef get_truth_table(formula, inputs):\n    truth_table = 0\n    for input in inputs:\n        truth_table = (truth_table << 1) + evaluate(formula, input)\n    return truth_table\n\n\n# Returns (the number of operations in the formula, the number of Ands).\ndef get_complexity(formula):\n    if isinstance(formula, bool):\n        return (0, 0)\n    elif isinstance(formula, (Lt, Eq, Gt)):\n        return (1, 0)\n    elif isinstance(formula, And):\n        ops_lhs, ands_lhs = get_complexity(formula.lhs)\n        ops_rhs, ands_rhs = get_complexity(formula.rhs)\n        return (ops_lhs + 1 + ops_rhs, ands_lhs + 1 + ands_rhs)\n    elif isinstance(formula, Or):\n        ops_lhs, ands_lhs = get_complexity(formula.lhs)\n        ops_rhs, ands_rhs = get_complexity(formula.rhs)\n        return (ops_lhs + 1 + ops_rhs, ands_lhs + ands_rhs)\n    else:\n        assert False, str(formula)\n\n\n# Formula compared by complexity.\nclass HeapItem:\n    __slots__ = [\"_complexity\", \"formula\"]\n\n    def __init__(self, formula):\n        self._complexity = get_complexity(formula)\n        self.formula = formula\n\n    def __lt__(self, other):\n        return self._complexity < other._complexity\n\n    def __le__(self, other):\n        return self._complexity <= other._complexity\n\n    def __eq__(self, other):\n        return self._complexity == other._complexity\n\n    def __ne__(self, other):\n        return self._complexity != other._complexity\n\n    def __ge__(self, other):\n        return self._complexity >= other._complexity\n\n    def __gt__(self, other):\n        return self._complexity > other._complexity\n\n\n# Like heapq.merge except we can add iterables dynamically.\nclass Merge:\n    __slots__ = [\"_heap\", \"_iterable_count\"]\n\n    def __init__(self):\n        self._heap = []\n        self._iterable_count = 0\n\n    def update(self, iterable):\n        iterable = iter(iterable)\n        try:\n            value = next(iterable)\n        except StopIteration:\n            return\n        heappush(self._heap, (value, self._iterable_count, iterable))\n        self._iterable_count += 1\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if not self._heap:\n            raise StopIteration\n        value, index, iterable = heappop(self._heap)\n        try:\n            next_value = next(iterable)\n        except StopIteration:\n            return value\n        heappush(self._heap, (next_value, index, iterable))\n        return value\n\n\nclass Combinations:\n    __slots__ = [\"_op\", \"_formula\", \"_best_formulas\", \"_i\", \"_n\"]\n\n    def __init__(self, op, formula, best_formulas):\n        self._op = op\n        self._formula = formula\n        self._best_formulas = best_formulas\n        self._i = 0\n        self._n = len(best_formulas)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self._i >= self._n:\n            raise StopIteration\n        formula = self._op(self._formula, self._best_formulas[self._i])\n        self._i += 1\n        return HeapItem(formula)\n\n\n# Returns the simplest equivalent formula, breaking ties in favor of fewer Ands.\ndef simplify(target_formula):\n    critical_value_sets = get_critical_value_sets(target_formula)\n    inputs = enumerate_truth_table_inputs(critical_value_sets)\n    target_truth_table = get_truth_table(target_formula, inputs)\n    best = {}\n    merge = Merge()\n    for formula in enumerate_useful_primitives(critical_value_sets):\n        merge.update([HeapItem(formula)])\n    best_formulas = []\n    for item in merge:\n        if target_truth_table in best:\n            return best[target_truth_table]\n        formula = item.formula\n        truth_table = get_truth_table(formula, inputs)\n        if truth_table in best:\n            continue\n        n = len(best_formulas)\n        for op in [And, Or]:\n            merge.update(Combinations(op, formula, best_formulas))\n        best[truth_table] = formula\n        best_formulas.append(formula)\n\n\nprint(simplify(first_example))\nprint(simplify(second_example))\nprint(simplify(third_example))\nprint(simplify(fourth_example))\nprint(simplify(fifth_example))\n```\n\nOutput:\n```\nEq(lhs='A', rhs=6)\nAnd(lhs=Lt(lhs='C', rhs=3), rhs=Gt(lhs='B', rhs=2))\nAnd(lhs=And(lhs=Gt(lhs='B', rhs=1), rhs=Gt(lhs='A', rhs=0)), rhs=Or(lhs=Gt(lhs='B', rhs=2), rhs=Gt(lhs='A', rhs=1)))\nTrue\nOr(lhs=And(lhs=Eq(lhs='B', rhs=2), rhs=Lt(lhs='C', rhs=2)), rhs=And(lhs=Gt(lhs='C', rhs=2), rhs=Eq(lhs='A', rhs=2)))\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithms based on number base systems? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                    \r\n                        \r\n                    \r\n                \r\n                    \r\n                            \r\n                                As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,  or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question  can be improved and possibly reopened, visit the help center for guidance.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                Closed 11 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI've noticed recently that there are a great many algorithms out there based in part or in whole on clever uses of numbers in creative bases.  For example:\n\n\nBinomial heaps are based on binary numbers, and the more complex skew binomial heaps are based on skew binary numbers.\nSome algorithms for generating lexicographically ordered permutations are based on the factoradic number system.\nTries can be thought of as trees that look at one digit of the string at a time, for an appropriate base.\nHuffman encoding trees are designed to have each edge in the tree encode a zero or one in some binary representation.\nFibonacci coding is used in Fibonacci search and to invert certain types of logarithms.\n\n\nMy question is: what other algorithms are out there that use a clever number system as a key step of their intuition or proof?. I'm thinking about putting together a talk on the subject, so the more examples I have to draw from, the better.\n    ", "Answer": "\r\nChris Okasaki has a very good chapter in his book Purely Functional Data Structures that discusses \"Numerical Representations\": essentially, take some representation of a number and convert it into a data structure. To give a flavor, here are the sections of that chapter:\n\n\nPositional Number Systems\nBinary Numbers (Binary Random-Access Lists, Zeroless Representations, Lazy Representations, Segmented Representations)\nSkew Binary Numbers (Skew Binary Random Access Lists, Skew Binomial Heaps)\nTrinary and Quaternary Numbers\n\n\nSome of the best tricks, distilled:\n\n\nDistinguish between dense and sparse representations of numbers (usually you see this in matrices or graphs, but it's applicable to numbers too!)\nRedundant number systems (systems that have more than one representation of a number) are useful.\nIf you arrange the first digit to be non-zero or use a zeroless representation, retrieving the head of the data structure can be efficient.\nAvoid cascading borrows (from taking the tail of the list) and carries (from consing onto the list) by segmenting the data structure\n\n\nHere is also the reference list for that chapter:\n\n\nGuibas, McCreight, Plass and Roberts: A new representation for linear lists.\nMyers: An applicative random-access stack\nCarlsson, Munro, Poblete: An implicit binomial queue with constant insertion time.\nKaplan, Tarjan: Purely functional lists with catenation via recursive slow-down.\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What is the difference between tree depth and height?\r\n                \r\nThis is a simple question from algorithms theory.\nThe difference between them is that in one case you count number of nodes and in other number of edges on the shortest path between root and concrete node.\nWhich is which?\n    ", "Answer": "\r\nI learned that depth and height are properties of a node:\n\n\nThe depth of a node is the number of edges from the node to the tree's root node.A root node will have a depth of 0.\nThe height of a node is the number of edges on the longest path from the node to a leaf.A leaf node will have a height of 0.\n\n\nProperties of a tree:\n\n\nThe height of a tree would be the height of its root node,or equivalently, the depth of its deepest node.\nThe diameter (or width) of a tree is the number of nodes on the longest path between any two leaf nodes. The tree below has a diameter of 6 nodes.\n\n\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to write an efficient algorithm that generates a list of unique random numbers? [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        How do I shuffle a Javascript Array ensuring each Index is in a new position in the new Array?\r\n                            \r\n                                (5 answers)\r\n                            \r\n                    \r\n                Closed 2 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI'm pretty new to algorithms and am trying to solve a problem that involves generating a list of 5,000 numbers in random order each time it is run. Each number in the list must be unique and be between 1 and 5,000 (inclusive).\n\r\n\r\n```\nfunction createRandomList() {\n  let arr = [];\n  while(arr.length < 5000){\n    const num = Math.floor(Math.random() * 5000) + 1;\n    if(arr.indexOf(num) === -1) arr.push(num);\n  }\n  console.log(arr);\n}\n\ncreateRandomList()```\n\r\n\r\n\r\n\nHere's the solution that I came up with. I wanted to know the Time/Space complexity of this solution. Would it just be O(1) for both space and time because the values are bounded?\nAny feedback would be greatly appreciated as well better ways to optimize the solution.\n    ", "Answer": "\r\nKeep a sequential list around and shuffle it.  Fisher-Yates shuffle in-place is O(n).\nMike Bostock suggests an implementation here.\n\r\n\r\n```\nfunction shuffle(array) {\n  var m = array.length, t, i;\n\n  // While there remain elements to shuffle…\n  while (m) {\n\n    // Pick a remaining element…\n    i = Math.floor(Math.random() * m--);\n\n    // And swap it with the current element.\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n\nconst sequence = [1,2,3,4,5,6,7,8,9] // or gen this for any length you choose\nlet randomNonRepeatingSequence = shuffle(sequence)\nconsole.log(randomNonRepeatingSequence)```\n\r\n\r\n\r\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Python algorithms and Big-O [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Big O, how do you calculate/approximate it?\r\n                            \r\n                                (24 answers)\r\n                            \r\n                    \r\n                Closed 2 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI am trying to wrap my head around time complexity when it comes to algorithm design using Python.\nI've been tasked with writing a function that meets the following requirements:\n\nMust be linear O(n) time\nmust return the nth smallest number from a list of random numbers\n\nI have found the following example online:\n```\ndef nsmallest(numbers, nth):\nresult = []\nfor i in range(nth):\n    result.append(min(numbers))\n    numbers.remove(min(numbers))\nreturn result\n```\n\nAs I understand it, Big-O is an approximation and only dominant part of the function is considered when analyzing it time complexity.\nSo my question is:\nDoes calling min() within the loop influence the time complexity or does the function remain O(n) because min() executes in O(n) time?\nAlso, would adding another loop (not nested) to further parse the resulting list for the specific number keep the algorithm in linear time even if it contains two or three more constant operations per loop?\n    ", "Answer": "\r\nDoes calling min() within the loop influence the time complexity or does the function remain O(n) because min() executes in O(n) time?\n\nYes it does. ```\nmin()```\n takes O(N) time to run and if you use it inside a loop that runs for O(N) time then the total time is now - O(N^2)\n\nAlso, would adding another loop (not nested) to further parse the resulting list for the specific number keep the algorithm in linear time even if it contains two or three more constant operations per loop?\n\nDepends on what your loop does. Since you haven't mentioned what that loop does, it is difficult to guess.\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What is a possible use case of BigInteger's .isProbablePrime()?\r\n                \r\nThe method ```\nBigInteger.isProbablePrime()```\n is quite strange; from the documentation, this will tell whether a number is prime with a probability of ```\n1 - 1 / 2^arg```\n, where ```\narg```\n is the integer argument.\n\nIt has been present in the JDK for quite a long time, so it means it must have uses. My limited knowledge in computer science and algorithms (and maths) tells me that it does not really make sense to know whether a number is \"probably\" a prime but not exactly a prime.\n\nSo, what is a possible scenario where one would want to use this method? Cryptography?\n    ", "Answer": "\r\nYes, this method can be used in cryptography.  RSA encryption involves the finding of huge prime numbers, sometimes on the order of 1024 bits (about 300 digits).  The security of RSA depends on the fact that factoring a number that consists of 2 of these prime numbers multiplied together is extremely difficult and time consuming.  But for it to work, they must be prime.\n\nIt turns out that proving these numbers prime is difficult too.  But the Miller-Rabin primality test, one of the primality tests uses by ```\nisProbablePrime```\n, either detects that a number is composite or gives no conclusion.  Running this test ```\nn```\n times allows you to conclude that there is a 1 in 2n odds that this number is really composite.  Running it ```\n100```\n times yields the acceptable risk of 1 in 2100 that this number is composite.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Structuring SWI-Prolog Code into Modules for Unit Testing of Multiple Algorithms and Data Sets\r\n                \r\nTo elaborate on a discussion in the comments below my last question: I am looking for suggestions on techniques or best practices for structuring SWI-Prolog code in order to be able to use and test alternative, interchangeable implementations of algorithms and their supporting modules.\n\nThe current situation can be illustrated using the following small, ficticous example: The user provides some input data (file ```\ndata.pl```\n) and loads a module with an algorithm to be applied (file ```\ngraph.pl```\n). The algorithm module itself uses helper predicates from another module (file ```\npath.pl```\n) which in turn requires access to the user-provided data:\n\nFile '```\ndata.pl```\n' (input data set):\n\n```\n:- use_module(graph).\n\nedge(a,b).\nedge(b,c).\nedge(c,d).\n```\n\n\nFile '```\ngraph.pl```\n' (algorithm):\n\n```\n:- module(graph, [reachable/2]).\n:- use_module(path).\n\nreachable(X,Y) :-\n    path(X,Y), !.\nreachable(X,Y) :-\n    path(Y,X), !.\n```\n\n\nFile '```\npath.pl```\n' (module with helper predicates, notice it accessing the data in ```\nuser```\n):\n\n```\n:- module(path, [path/2]).\n\npath(X,X).\npath(X,Y) :-\n    user:edge(X,Z),\n    path(Z,Y).\n```\n\n\nFor the use case of applying the algorithm to a single input data set and the single implementation of the algorithm, this is perfectly fine:\n\n```\n?- [data].\ntrue.\n\n?- reachable(a,a).\ntrue.\n\n?- reachable(a,d).\ntrue.\n\n?- reachable(d,a).\ntrue.\n```\n\n\nNow suppose that I have a larger number of data sets, and multiple alternative implementations of the ```\ngraph```\n and ```\npath```\n modules (with the same interface, i.e., exported predicates). For the sake of the (small) example, let us assume we files data files ```\ndata1.pl```\n, ```\ndata2.pl```\n, helper predicate modules ```\npath1.pl```\n, ```\npath2.pl```\n, and algorithm modules ```\ngraph1```\n, ```\ngraph2.pl```\n.\n\nI want to automate testing these using SWI-Prolog unit tests, and preferably be able to write a test suite that supports both the differing data sets and the different module implementations, without the need to restart Prolog in between. That is to say I want to be able test all combinations in the Cartesian product\n\n\n  ```\n{data1.pl, data2.pl} x {path1.pl, path2.pl} x {graph1.pl, graph2.pl}```\n\n\n\nwithout copy-pasting/duplicating code.\n\nMy question is: How would I go about this in SWI-Prolog? Are there best practices, design patterns or the like on how to structure code into modules for this purpose? Should I perhaps make use of dynamic importing for switching between alternative algorithm modules, and simply use ```\nsetup```\n and ```\ncleanup```\n in unit tests for the data?\n    ", "Answer": "\r\nIn order to apply the same set of tests to different implementations of the same predicates, or, more generically, to different implementations of the same interface/protocol, the tests must take the implementation as a dynamic parameter. Ideally, we should also be able to test the different algorithm implementations with different datasets.\n\nA separate concern is how to organize the data and the algorithms that we want to run on the data. There are two sensible approaches. The first option is to view the data as importing or inheriting the algorithm implementations. In this case, the queries (e.g. ```\nreachable/2```\n) would be sent to the data. A downside of this solution is that we may need to update the datasets everytime we want to apply a different set of algorithms (e.g. by importing a different module).\n\nThe second option is to view the data as a parameter of the algorithms. An easy implementation of this solution would be to add an extra argument to the predicates (e.g. the path and reachable predicates) that would be used to pass a reference to the data (e.g. ```\nuser```\n in the simple case mentioned in the question). A downside of this solution is that all algorithm related predicates would need the extra parameter (e.g. ```\nreachable/2```\n only calls ```\npath/2```\n and is only this predicate that actually calls ```\nedge/2```\n).\n\nAll the above questions and corresponding alternative solutions can be easily and cleanly expressed using Logtalk parametric objects instead of Prolog modules and using Logtalk unit test framework, ```\nlgtunit```\n, which supports parameterized tests out-of-the-box. Follows an example solution (which is portable and can be used with most Prolog systems).\n\nFirst, let's make data only about the data. We start by defining a protocol/interface for all data objects:\n\n```\n:- protocol(graph_protocol).\n\n    :- public(edge/2).\n    ...\n\n:- end_protocol.\n```\n\n\nAll data objects would implement this protocol. For example:\n\n```\n:- object(graph1,\n    implements(graph_protocol)).\n\n    edge(a,b).\n    edge(b,c).\n    edge(c,d).\n\n:- end_object.\n```\n\n\nNext, let's define parametric objects holding the algorithms with the single parameter being to pass the dataset object. These objects would likely also implement defined protocols specifying the predicates for which we want to provide alternative implementations. These protocols are omitted here for brevity.\n\n```\n:- object(path(_Data_)).\n\n    :- uses(_Data_, [edge/2]).\n\n    :- public(path/2).\n    path(X,X).\n    path(X,Y) :-\n        edge(X,Z),\n        path(Z,Y).\n\n:- end_object.\n\n\n:- object(reachable(_Data_)).\n\n    :- uses(path(_Data_), [path/2]).\n\n    :- public(reachable/2).\n    reachable(X,Y) :-\n        path(X,Y), !.\n    reachable(X,Y) :-\n        path(Y,X), !.\n\n:- end_object.\n```\n\n\nNote that these objects use your predicate definitions as-is (the ```\nuses/2```\n directive in the ```\nreachable/1```\n object requires Logtalk 3.28.0 or later version).\n\nThe default case where the dataset is loaded into ```\nuser```\n can be simplified by defining:\n\n```\n:- object(reachable ,\n    extends(reachable(user))).\n\n:- end_object.\n```\n\n\nA typical query would be:\n\n```\n?- reachable(graph1)::reachable(a,d).\n...\n```\n\n\nSo far, we're only parameterizing the datasets, not the algorithms. We will get there. The tests could be defined also as a parametric object. For example:\n\n```\n:- object(tests(_Data_),\n    extends(lgtunit)).\n\n    :- uses(reachable(_Data_), [reachable/2]).\n\n    test(r1) :-\n        reachable(a,a).\n\n    test(r2) :-\n        reachable(a,d).\n\n    test(r3) :-\n        reachable(d,a).\n\n:- end_object.\n```\n\n\nTesting over multiple datasets would use a goal such as:\n\n```\nlgtunit::run_test_sets([\n    tests(graph1),\n    tests(graph2),\n    tests(graph3)\n])\n```\n\n\nThe original question focused on test alternative, interchangeable implementations of algorithms. But the solution is the same. We just need to modify the parametric tests object to take instead the object implementing the algorithm being tested as a parameter:\n\n```\n:- object(tests(_Algorithm_),\n    extends(lgtunit)).\n\n    :- uses(_Algorithm_, [reachable/2]).\n\n    cover(reachable(_)).\n    cover(path(_)).\n\n    test(r1) :-\n        reachable(a,a).\n\n    test(r2) :-\n        reachable(a,d).\n\n    test(r3) :-\n        reachable(d,a).\n\n:- end_object.\n```\n\n\nAnd then, on the query that runs the tests, use whatever combination we want of datasets and algorithms. For example:\n\n```\nlgtunit::run_test_sets([\n    tests(reachable1(graph1)), tests(reachable2(graph1)), \n    tests(reachable1(graph2)), tests(reachable2(graph2)),\n    ...\n])\n```\n\n\nThe list argument of the ```\nlgtunit::run_test_sets/1```\n predicate can also be dynamically created. For example, assuming that all alternative implementations of the ```\nreachable/2```\n predicate implement a ```\nreachable_protocol```\n protocol, the test goal could be:\n\n```\ndatasets(Datasets),\nfindall(\n    tests(Algorithm),\n    (   implements_protocol(Algorithm, reachable_protocol),\n        member(Dataset, Datasets),\n        arg(1, Algorithm, Dataset)\n    ),\n    TestObjects\n),\nlgtunit::run_test_sets(TestObjects)\n```\n\n\nOne noteworthy aspect of running these tests using ```\nlgtunit```\n is that, besides, reporting the passed and failed tests, it's also trivial to report full predicate code coverage at the predicate clause level. This means that we not only test the algorithms but also check that all clauses used to implement the algorithms are being used. For this example, using only the ```\ngraph1```\n dataset, the test output at the top-level interpreter is:\n\n```\n?- {tester}.\n% \n% tests started at 2019/8/5, 7:17:46\n% \n% running tests from object tests(graph1)\n% file: /Users/pmoura/Desktop/plu/tests.lgt\n% \n% g1: success\n% g2: success\n% g3: success\n% \n% 3 tests: 0 skipped, 3 passed, 0 failed\n% completed tests from object tests(graph1)\n% \n% \n% clause coverage ratio and covered clauses per entity predicate\n% \n% path(A): path/2 - 2/2 - (all)\n% path(A): 2 out of 2 clauses covered, 100.000000% coverage\n% \n% reachable(A): reachable/2 - 2/2 - (all)\n% reachable(A): 2 out of 2 clauses covered, 100.000000% coverage\n% \n% 2 entities declared as covered containing 4 clauses\n% 2 out of 2 entities covered, 100.000000% entity coverage\n% 4 out of 4 clauses covered, 100.000000% clause coverage\n% \n% tests ended at 2019/8/5, 7:17:46\n% \ntrue.\n```\n\n\nIf you're automating tests (e.g. using a CI server), you can use instead the ```\nlogtalk_tester```\n script.\n\nWhat if we want to keep using modules for datasets and/or the algorithms? For the tests object, it's just a question of writing instead:\n\n```\n:- object(tests(_Algorithm_),\n    extends(lgtunit)).\n\n    :- use_module(_Algorithm_, [reachable/2]).\n    ...\n\n:- end_object.\n```\n\n\nLogtalk's ```\nlgtunit```\n supports testing plain Prolog code and Prolog modules code, besides Logtalk code (indeed, the Logtalk distribution includes a Prolog standards conformance test suite). For a tool overview, see e.g.\n\nhttps://logtalk.org/tools.html#testing\n\nAt the above URL, we'll also find a code coverage report example. For full code example of using the solution sketched above see e.g.\n\nhttps://github.com/LogtalkDotOrg/logtalk3/tree/master/library/dictionaries\n\nThis library provides three alternative implementations of a dictionary API and a single set of tests (using a parametric object) to test all of them.\n\nLast, but not the least, you can use this testing solution with not only SWI-Prolog but also +10 other Prolog systems.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Assistance with Quick Sort Algorithm to work with letter and number char values in one array [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs details or clarity. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Add details and clarify the problem by editing this post.\r\n                \r\n                    \r\n                        Closed 3 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI am writing a program that takes an input. This input gets placed in different arrays. Each array is of 'char' data type. I need to have each array organized from greatest to least in value. Each array represents a suit in playing cards; hearts, spades etc. The values that need to be organized are the values of these cards. The order hierarchy is as follows. A to K to Q to J to T (representing '10'), then 9 to 8 to 7 to 6 to 5 to 4 to 3 to 2. The problem I have is implementing the quick sort algorithm to work with letters and numbers alike. Here are my methods. \n\n```\npublic static void quickSort (int a[], int start, int end)\n{\nif (start < end)\n{ \n  int split = partition (a, start, end);\n\n   // show split\n  System.out.println (\"split \" + split);\n  System.out.println (\"\");\n\n   // sort the left sublist\n  quickSort (a, start, split);\n\n   // now sort the right sublist\n  quickSort (a, split + 1, end);\n  }\n}\n\npublic static int partition (int a[], int start, int end)\n{ \nint bottom = start - 1;\nint top = end + 1;\n\n // pick a value pivot.Arrange the list according to: <= or >= to pivot\n\nint pivot = a [start];\n\nSystem.out.println (\"pivot is \" + pivot);\n\n // walk bottom and top towards each other, using them to swap array\n // elements as we go, and stopping when bottom and top pass each other\n\nwhile (bottom < top)\n{\n   // walk until you find an element that is not in its current sublist\n\n  do\n  {\n    bottom++;\n  }\n  while (a [bottom] < pivot);\n\n  do\n  {\n    top--;\n  }\n  while (a [top] > pivot);\n\n   // swap a[bottom] and a[top], thus putting the values in the\n   // correct sublist\n\n  int temp = a [bottom];\n  a [bottom] = a [top];\n  a [top] = temp;\n}\n\n // undo the last swap that took place after the bottom and top\n // indices passed each other\n\nint temp = a [bottom];\na [bottom] = a [top];\na [top] = temp;\n\n // finally, return split index\nreturn top;\n\n}\n}\n```\n\n\nInput: 4C3C6CTSTHAD2S8DACQHKS2D4H \nExpected Output:\nSpades K 10 2 \nHearts Q 10 4 \nDiamonds A 8 2 \nClubs A 6 4 3 \n\nThe output that I get is out of order. I call the method once for each suit.\n    ", "Answer": "\r\nI have followed these steps to sort the card of each suit in reverse order\n\nStep1: Read the input string and split by length of 2 because each card in the input is represented by 2 Characters. For example, the input string '6CTS' means the card is 6 of Club and Ten of Spades.\n\nStep2: Modify the input from String representation to numeric representation. We wanted to use the quicksort function that you have implemented. Your quicksort needs the input array to be of integer type so I manipulated the input string to be in that format. For example, TS will become 10 of the Spades. JH will become 11 of Heart and so on.\n\nStep3: Use your quicksort method to sort each of the suits by iterating over them.\n\nThe implementation of the above approach is in the snippet below.\n\n```\nimport com.google.common.primitives.Ints;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class Main {\n\n    public static void quickSort(int a[], int start, int end) {\n        if (start < end) {\n            int split = partition(a, start, end);\n\n            // show split\n//            System.out.println(\"split \" + split);\n\n            // sort the left sublist\n            quickSort(a, start, split);\n\n            // now sort the right sublist\n            quickSort(a, split + 1, end);\n        }\n    }\n\n    public static int partition(int a[], int start, int end) {\n        int bottom = start - 1;\n        int top = end + 1;\n\n        // pick a value pivot.Arrange the list according to: <= or >= to pivot\n\n        int pivot = a[start];\n\n//        System.out.println(\"pivot is \" + pivot);\n\n        // walk bottom and top towards each other, using them to swap array\n        // elements as we go, and stopping when bottom and top pass each other\n\n        while (bottom < top) {\n            // walk until you find an element that is not in its current sublist\n\n            do {\n                bottom++;\n            }\n            while (a[bottom] < pivot);\n\n            do {\n                top--;\n            }\n            while (a[top] > pivot);\n\n            // swap a[bottom] and a[top], thus putting the values in the\n            // correct sublist\n\n            int temp = a[bottom];\n            a[bottom] = a[top];\n            a[top] = temp;\n        }\n\n        // undo the last swap that took place after the bottom and top\n        // indices passed each other\n\n        int temp = a[bottom];\n        a[bottom] = a[top];\n        a[top] = temp;\n\n        // finally, return split index\n        return top;\n\n    }\n\n    public static void main(String[] args) {\n        Map<String, Integer> cardValueMap = new HashMap<>();\n        // append the value as per the priority of the card\n        cardValueMap.put(\"T\", 10);\n        cardValueMap.put(\"J\", 11);\n        cardValueMap.put(\"Q\", 12);\n        cardValueMap.put(\"K\", 13);\n        cardValueMap.put(\"A\", 14);\n        String inputString = \"4C3C6CTSTHAD2S8DACQHKS2D4H\";\n        readInput(inputString, cardValueMap);\n    }\n\n    static void readInput(String inputString, Map<String, Integer> cardValueMap) {\n        String[] cardInput = splitToNChar(inputString, 2); // each input is of size 2 as per the problem\n        Map<String, List<Integer>> allCardMap = new HashMap<>();\n        for (String eachCard : cardInput) {\n            String[] tempCardToProcess = splitToNChar(eachCard, 1);\n            List<Integer> existingList = allCardMap.get(tempCardToProcess[1]);\n            if (existingList == null) {\n                existingList = new ArrayList<>();\n            }\n\n            existingList.add(getNumericValueOfCard(tempCardToProcess[0], cardValueMap));\n            allCardMap.put(tempCardToProcess[1], existingList);\n        }\n\n        System.out.println(\"allCardMap before sorting is = \" + allCardMap);\n\n        for (Map.Entry<String, List<Integer>> entry : allCardMap.entrySet()) {\n            String suitType = entry.getKey();\n            List<Integer> presentCardList = entry.getValue();\n            List<Integer> sortedPresentCardList = getSortedUsingQuickSort(presentCardList);\n            Collections.reverse(sortedPresentCardList); // needed in reverse order\n            allCardMap.put(suitType, sortedPresentCardList);\n        }\n        System.out.println(\"allCardMap after sorting is = \" + allCardMap);\n        // Do the post processing of the output as per your requirement.\n        // For example if you want to see D as diamond, S as spade. Print accordingly.\n    }\n\n    /**\n     * Split text into n number of characters.\n     *\n     * @param text the text to be split.\n     * @param size the split size.\n     * @return an array of the split text.\n     */\n    private static String[] splitToNChar(String text, int size) {\n        List<String> parts = new ArrayList<>();\n\n        int length = text.length();\n        for (int i = 0; i < length; i += size) {\n            parts.add(text.substring(i, Math.min(length, i + size)));\n        }\n        return parts.toArray(new String[0]);\n    }\n\n    static Integer getNumericValueOfCard(String cardString, Map<String, Integer> cardValueMap) {\n        boolean isNumeric = cardString.chars().allMatch(Character::isDigit);\n        Integer valueToInsert;\n        if (!isNumeric) {\n            valueToInsert = cardValueMap.get(cardString);\n        } else {\n            valueToInsert = Integer.valueOf(cardString);\n        }\n        return valueToInsert;\n    }\n\n    static List<Integer> getSortedUsingQuickSort(List<Integer> cardList) {\n        int[] suitArray = Ints.toArray(cardList);\n        quickSort(suitArray, 0, suitArray.length - 1);\n        return Arrays.stream(suitArray)        // IntStream\n                .boxed()        // Stream<Integer>\n                .collect(Collectors.toList());\n    }\n\n}\n```\n\n\nLet me know if you feel any difficulty in understanding the above code.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Why the \"if else statement\" is not working properly?\r\n                \r\nI am doing JS Algorithms and Data structures projects in freecodecamp and I am stuck at the last problem \"Cash register\". I already did some of the coding and my code doesn't pass all the tests.\n\nThe link to the problem : https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/cash-register\n\nMy code doesn't pass the 3 and 5 number test. In number 3, the output is almost the same, but the last part [\"PENNY\",0.03], which doesn't match with the output. In number 5, the ```\ntotalCid```\n and ```\ncashback```\n variables are equal but it doesn't return \"CLOSED\". If those are equal it should return the status \"CLOSED\".\n\n\r\n\r\n```\nfunction checkCashRegister(price, cash, cid) {\r\n  var cashback = (cash - price)\r\n  var returnMoney = {\r\n    status: \"\",\r\n    change: []\r\n  }\r\n  var totalCid = cid.map(v => {\r\n      return v[1]\r\n    })\r\n    .reduce((a, b) => {\r\n      return a + b\r\n    })\r\n    .toFixed(2)\r\n  console.log(cashback)\r\n  console.log(totalCid)\r\n  if (totalCid === cashback) {\r\n    returnMoney.status = \"CLOSED\"\r\n    returnMoney.change = cid\r\n    return returnMoney\r\n  } else if (totalCid < cashback) {\r\n    returnMoney.status = \"INSUFFICIENT_FUND\"\r\n    returnMoney.change = []\r\n    return returnMoney\r\n  } else {\r\n    var denomValue = [{\r\n        bill: \"ONE HUNDRED\",\r\n        val: 100\r\n      },\r\n      {\r\n        bill: \"TWENTY\",\r\n        val: 20\r\n      },\r\n      {\r\n        bill: \"TEN\",\r\n        val: 10\r\n      },\r\n      {\r\n        bill: \"FIVE\",\r\n        val: 5\r\n      },\r\n      {\r\n        bill: \"ONE\",\r\n        val: 1\r\n      },\r\n      {\r\n        bill: \"QUARTER\",\r\n        val: 0.25\r\n      },\r\n      {\r\n        bill: \"DIME\",\r\n        val: 0.10\r\n      },\r\n      {\r\n        bill: \"NICKEL\",\r\n        val: 0.05\r\n      },\r\n      {\r\n        bill: \"PENNY\",\r\n        val: 0.01\r\n      }\r\n    ]\r\n    var newCidArray = [];\r\n    var currVal = 0;\r\n    for (let i = 0; i < denomValue.length; i++) {\r\n      while (cashback >= denomValue[i].val && currVal < cid[8 - i][1]) {\r\n        cashback -= denomValue[i].val.toFixed(2);\r\n        currVal += denomValue[i].val;\r\n      }\r\n\r\n      if (currVal > 0) {\r\n        newCidArray.push([denomValue[i].bill, currVal]);\r\n      }\r\n      currVal = 0; // reset current value (currVal) to zero after the loop has completed\r\n    }\r\n    returnMoney.status = \"OPEN\"\r\n    returnMoney.change = newCidArray\r\n    return returnMoney\r\n\r\n  }\r\n\r\n}\r\nconsole.log(checkCashRegister(19.5, 20, [\r\n  [\"PENNY\", 0.5],\r\n  [\"NICKEL\", 0],\r\n  [\"DIME\", 0],\r\n  [\"QUARTER\", 0],\r\n  [\"ONE\", 0],\r\n  [\"FIVE\", 0],\r\n  [\"TEN\", 0],\r\n  [\"TWENTY\", 0],\r\n  [\"ONE HUNDRED\", 0]\r\n]))```\n\r\n\r\n\r\n\n    ", "Answer": "\r\nYou had a total of 3 problems in your code.\n\nThe first has been pointed out by @trincot: ```\ntoFixed()```\n returns a string, which you cannot compare with ```\n===```\n to a number.\n\nThe second is that even if the cash in the drawer is more than the expected change, you can be in an ```\nINSUFFICIENT_FUNDS```\n situation because you cannot split the bills (notes, in British English) and coins you have. This means that at the end of your algorithm you must check whether the change sums up.\n\nThe third, and major one, comes from working with floating point numbers. If you click on \"Run code snippet under your code\" you can see that the change would be ```\n0.49000000000000027```\n dollars in pennies.\n\nThe only safe way out of the swamp of floating point is to convert everything to integers. So what I did, apart from fixing the first two problems, is convert dollars to pennies in your script. I tried not to alter your script too much, nonetheless.\n\n```\nfunction checkCashRegister(price, cash, cid) {\n  // P stands for pennies\n  var cidP = cid.map(v => [v[0], Math.round(v[1] * 100)])\n  var priceP = Math.round(price * 100)\n  var cashP  = Math.round(cash * 100)\n  var cashbackP = (cashP - priceP)\n  var returnMoney = {\n    status: \"\",\n    change: []\n  }\n  var totalCidP = cidP.map(v => {\n      return v[1]\n    })\n    .reduce((a, b) => {\n      return a + b\n    })\n  if (totalCidP === cashbackP) {\n    returnMoney.status = \"CLOSED\"\n    returnMoney.change = cid\n    return returnMoney\n  } else if (totalCidP < cashbackP) {\n    returnMoney.status = \"INSUFFICIENT_FUNDS\"\n    returnMoney.change = []\n    return returnMoney\n  } else {\n    var denomValueP = [\n      {bill: \"ONE HUNDRED\", val: 10000},\n      {bill: \"TWENTY\", val: 2000},\n      {bill: \"TEN\", val: 1000},\n      {bill: \"FIVE\", val: 500},\n      {bill: \"ONE\", val: 100},\n      {bill: \"QUARTER\", val: 25},\n      {bill: \"DIME\", val: 10},\n      {bill: \"NICKEL\", val: 5},\n      {bill: \"PENNY\", val: 1}\n    ]\n    var changeArray = [];\n    for (let i = 0; i < denomValueP.length; i++) {\n      var currValP = 0;\n      while (cashbackP >= denomValueP[i].val && currValP < cidP[8 - i][1]) {\n        cashbackP -= denomValueP[i].val;\n        currValP  += denomValueP[i].val;\n      }\n      if (currValP > 0) {\n        changeArray.push([denomValueP[i].bill, currValP / 100]);\n      }\n    }\n    if (cashbackP === 0) {\n      returnMoney.status = \"OPEN\"\n      returnMoney.change = changeArray\n    } else {\n      returnMoney.status = \"INSUFFICIENT_FUNDS\"\n      returnMoney.change = []\n    }\n    return returnMoney\n  }\n}\n```\n\n\nAs to why those ```\nMath.round()```\n are needed, try this:\n\n```\n4567.89 * 100 === 456789  // => false\n```\n\n\nEDIT\n\nYou asked for clarification about the last if-else in the code. The fourth paragraph in freecodecamp says:\n\n\n  Return ```\n{status: \"INSUFFICIENT_FUNDS\", change: []}```\n if cash-in-drawer\n  is less than the change due, or if you cannot return the exact\n  change.\n\n\nIf you got to the end of the algorithm and ```\ncashbackP```\n, which you have been decreasing for every bill or coin you added to the change, has not gone to zero, this means that the change is not complete, and you are in the situation I emphasized.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "A page replacement algorithm should minimize the number of page faults\r\n                \r\nI'm currently reading about Page Replacement Algorithms and I find complex question for me.\n\nQuestion is:\n\nPage replacement algorithm should minimize the number of page faults.\n\nDescription:\n\nWe can achieve this minimization by distributing heavily used pages evenly over all of memory, rather than having them compete for a small number of page frames. We can associate with each page frame a counter of the number of pages associated with that frame. Then, to replace a page, we can search for the page frame with the smallest counter.\n\nb) How many page faults occur for your algorithm for the following reference string with four page frames?\n\n1, 2, 3, 4, 5, 3, 4, 1, 6, 7, 8, 7, 8, 9, 7, 8, 9, 5, 4, 5, 4, 2\n    ", "Answer": "\r\nThis is Problem 9.13 of Operating System Concepts. Using the least frequently used(LFU) page-replacement algorithm and decreasing the frequency by 1 for the removed page, using FIFO for pages with the same counted frequency will get the answer 14. Detail:\n\n\n\n\npage-reference strings\n1\n2\n3\n4\n5\n3\n4\n1\n6\n7\n8\n7\n8\n9\n7\n8\n9\n5\n4\n5\n4\n2\n\n\n\n\n* LFU\n1\n1\n1\n1\n5\n\n\n5\n6\n6\n8\n\n\n8\n\n\n\n8\n8\n8\n\n8\n\n\npage faults = 14\n\n2\n2\n2\n2\n\n\n1\n1\n7\n7\n\n\n7\n\n\n\n7\n7\n7\n\n7\n\n\n\n\n\n3\n3\n3\n\n\n3\n3\n3\n3\n\n\n9\n\n\n\n9\n9\n5\n\n2\n\n\n\n\n\n\n4\n4\n\n\n4\n4\n4\n4\n\n\n4\n\n\n\n5\n4\n4\n\n4\n\n\n* optimal\n1\n1\n1\n1\n1\n\n\n\n6\n6\n8\n\n\n8\n\n\n\n\n8\n\n\n2\n\n\npage faults = 11\n\n2\n2\n2\n5\n\n\n\n5\n5\n5\n\n\n5\n\n\n\n\n5\n\n\n5\n\n\n\n\n\n3\n3\n3\n\n\n\n3\n7\n7\n\n\n7\n\n\n\n\n4\n\n\n4\n\n\n\n\n\n\n4\n4\n\n\n\n4\n4\n4\n\n\n9\n\n\n\n\n9\n\n\n9\n\n\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to get the excel-like column name of a number\r\n                \r\nI'm working on a script that generate some Excel documents and I need to convert a number into its column name equivalent. For example:\n\n```\n1 => A\n2 => B\n27 => AA\n28 => AB\n14558 => UMX\n```\n\n\nI have already written an algorithm to do so, but I'd like to know whether are simpler or faster ways to do it:\n\n```\nfunction numberToColumnName($number){\n    $abc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    $abc_len = strlen($abc);\n\n    $result_len = 1; // how much characters the column's name will have\n    $pow = 0;\n    while( ( $pow += pow($abc_len, $result_len) ) < $number ){\n        $result_len++;\n    }\n\n    $result = \"\";\n    $next = false;\n    // add each character to the result...\n    for($i = 1; $i<=$result_len; $i++){\n        $index = ($number % $abc_len) - 1; // calculate the module\n\n        // sometimes the index should be decreased by 1\n        if( $next || $next = false ){\n            $index--;\n        }\n\n        // this is the point that will be calculated in the next iteration\n        $number = floor($number / strlen($abc));\n\n        // if the index is negative, convert it to positive\n        if( $next = ($index < 0) ) {\n            $index = $abc_len + $index;\n        }\n\n        $result = $abc[$index].$result; // concatenate the letter\n    }\n    return $result;\n}\n```\n\n\nDo you know a better way to do it? Maybe something to keep it simpler? or a performance improvement?\n\nEdit\n\nircmaxell's implementation works pretty fine. But, I'm going to add this nice short one:\n\n```\nfunction num2alpha($n)\n{\n    for($r = \"\"; $n >= 0; $n = intval($n / 26) - 1)\n        $r = chr($n%26 + 0x41) . $r;\n    return $r;\n}\n```\n\n    ", "Answer": "\r\nHere's a nice simple recursive function (Based on zero indexed numbers, meaning 0 == A, 1 == B, etc)...\n\n```\nfunction getNameFromNumber($num) {\n    $numeric = $num % 26;\n    $letter = chr(65 + $numeric);\n    $num2 = intval($num / 26);\n    if ($num2 > 0) {\n        return getNameFromNumber($num2 - 1) . $letter;\n    } else {\n        return $letter;\n    }\n}\n```\n\n\nAnd if you want it one indexed (1 == A, etc):\n\n```\nfunction getNameFromNumber($num) {\n    $numeric = ($num - 1) % 26;\n    $letter = chr(65 + $numeric);\n    $num2 = intval(($num - 1) / 26);\n    if ($num2 > 0) {\n        return getNameFromNumber($num2) . $letter;\n    } else {\n        return $letter;\n    }\n}\n```\n\n\nTested with numbers from 0 to 10000...\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What is the algorithm to determine optimal work group size and number of workgroup\r\n                \r\nOpenCL standard defines the following options to get info about device and compiled kernel:\n\n\nCL_DEVICE_MAX_COMPUTE_UNITS\nCL_DEVICE_MAX_WORK_GROUP_SIZE\nCL_KERNEL_WORK_GROUP_SIZE\nCL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE\n\n\nGiven this values, how can I calculate the optimal size of work group and number of work groups?\n    ", "Answer": "\r\nYou discover these values experimentally for your algorithm. Use a profiler to get hard numbers.\n\nI like to use CL_DEVICE_MAX_COMPUTE_UNITS as the number of work groups, because I often rely on synchronizing work items. I usually run kernels with little branching, so the take the same time to execute in each compute unit.\n\nSome multiple of CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE will be optimal for your device. What that multiple actually is depends on your memory access pattern and type of work you are doing with each work item. Use 1 as the multiple when you are running a heavy, compute-bound (ALU) kernel. Try a larger multiple to hide memory latency if you are bottlenecked by memory access. Use a profiler to determine when your access time and your ALU time are optimal.\n\nOptimal ratio for ALU to fetch is 1:1 for any device. This is rarely achieved in practice, so you want to keep the ALU/SIMD banks saturated. This means ALU:fetch should be greater than 1 whenever possible. Less than 1 means you should try a larger work group size to better hide the memory latency.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Number of comparisons for different lists in sorting algorithms\r\n                \r\nI've been studying sorting algorithms and had a question about the number of comparisons in each sorting algorithm.\n\nLet's say we have a sorting algorithm (insertion sort, quicksort, anything). Then I want to count the number of comparisons using different files. These files have items that are randomized and not in order. For example, file 1 has 10 items, containing letters a to j. Then we have another file (again, 10 items) containing integers 1 to 10. Then we have another file (10 items), containing float numbers 1.1111111111 to 10.1111111111. If we want to sort these using any sorting algorithm (for the first one we sort in alphabetical order and others from smallest to largest number). \n\nIf we count the number of comparisons (in a quicksort algorithm, for example) in each file, would they be the same since we are comparing the same number of items, or does the length of the items change the number of comparisons (a vs 10.1111111)? If they are the same, is it the case for all sorting algorithms (at least the ones I mentioned) or just some? I don't think it's a hard question (sorry), but I'm over-thinking as usual. I'm guessing that they would be the same, but I'm not really. Would someone care to explain? \n    ", "Answer": "\r\nThe number of comparisons depends on the initial state. the sorting algorithm and the specific implementation.\n\nFor example:\n\n\nThe implementation could make a first pass to check if the set is already sorted up or down to avoid unnecessary work or even a worst case scenario.  This has a small cost but can avoid a pathological case. The number of comparisons will be very different for the same set between an implementation that does and one that does not.\nSome implementation choices such as which element to select as a pivot in ```\nqsort()```\n will greatly impact the number of comparisons for identical sets.\nEven worse: to avoid quadratic worst case in ```\nqsort()```\n that can be triggered more of less easily as described in Kernighan's paper anti qsort, one can implement ```\nqsort()```\n to make non deterministic choices of pivot values, using some source of randomness.  For such an implementation, the number of comparisons may vary, even for sorting the same set repeatedly. Note that this can produce a different order if some elements compare equal, due to ```\nqsort()```\ns unstability.\n\n\nYour teacher's question cannot be answered precisely unless you know both the initial state and the sorting algorithm specific implementation. Even best case and worst case numbers depend on the implementation details.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Go and a bad prime number algorithm\r\n                \r\nI wrote this prime number sieving algorithm and it doesn't run properly. I can't find the error in the algorithm itself. Could someone help me?\n\nThis is what it's supposed to print:\n\n```\n[2 3 5 7 11 13 17 19 23 29]\n```\n\n\nVersus what it actually prints:\n\n```\n[3 5 7 11 13 17 19 23 25 29]\n```\n\n\n.\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n var primes = sieve(makeNumbers(29))\n fmt.Printf(\"%d\\n\", primes);\n}\n\nfunc makeNumbers(n int) []int {\n var numbers = make([]int, n - 1)\n for i := 0; i < len(numbers); i++ {\n  numbers[i] = i + 2\n }\n return numbers\n}\n\nfunc sieve(numbers []int) []int {\n var numCopy = numbers\n var max = numbers[len(numbers)-1]\n var sievedNumbers = make([]int, 0)\n for i := 0; numCopy[i]*numCopy[i] <= max; i++ {\n  for j := i; j < len(numCopy); j++ {\n   if numCopy[j] % numCopy[i] != 0 || j == i {\n    sievedNumbers = append(sievedNumbers, numCopy[j])\n   }\n  }\n  numCopy = sievedNumbers\n  sievedNumbers = make([]int, 0) \n }\n return numCopy\n}\n```\n\n    ", "Answer": "\r\nIt should be \"for j := 0\" rather than \"for j := i\".\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Two arrays and number-- best algorithm\r\n                \r\nThis is a question I got in a job interview:\n\nYou are given two sorted arrays (sizes n and m), and a number x. What would be the best algorithm to find the indexes of two numbers (one from each array), that their sum equals the given number.\n\nI couldn't find a better answer than the naive solution which is:\n\n\nStart from the smaller array, from the cell that contains the largest number which is smaller than x.\nFor each cell in small array. do binary search on the big one, looking for the number so the sum will equal x.\nContinue until the first cell of the smaller array, returning the appropriate indexes.\nReturn FALSE if no such numbers exist.\n\n\nCan anyone think of a better solution in terms of runtime?\n    ", "Answer": "\r\nUse two indices ```\ni1,i2```\n - set ```\ni1=0, i2=n-1```\n\n\n```\nwhile i1 < m && i2>=0:\n    if arr1[i1] + arr2[i2] == SUM:\n         return i1,i2\n    else if arr1[i1] + arr2[i2] > SUM:\n         i2--\n    else\n         i1++\nreturn no pair found\n```\n\n\nThe idea is to use the fact that the array is sorted, so start from the two edges of the arrays, and at each iteration, make changes so you will get closer to the desired element\n\nComplexity is ```\nO(n+m)```\n under worst case analysis, which is better than binary search approach if ```\nmin{m,n} >= log(max{m,n})```\n\n\nProof of correctness (guidelines):\n\nAssume the answer is ```\ntrue```\n with indices ```\nk1,k2```\n.\nThen, for each ```\ni2>k2```\n- ```\narr1[k1] + arr2[i2] > SUM```\n - and you will NOT change ```\ni1```\n after  reaching it before getting to ```\ni2==k2```\n. Similarly you can show that when you get to ```\ni2==k2```\n, you will NOT change ```\ni2```\n before you get ```\ni1==k1```\n.\nSince we linearly scan the arrays - one of ```\ni1```\n or ```\ni2```\n will get to ```\nk1```\n or ```\nk2```\n at some point, and then - you will continue iterating until you set the other iterator to the correct location, and find the answer.\nQED\n\nNotes:\n If you want to output ALL elements that matches the desired sum, when ```\narr1[i1]+arr2[i2] ==SUM```\n, change the element with the LOWER absolute difference to the next element in the iteration order. It will make sure you output all desired pairs. \n\nNote that this solution might fail for duplicate elements. As is, the solution works if there is no pair (x,y) such that x AND y both have dupes.\nTo handle this case, you will need to 'go back up' once you have exhausted all possible pairs in one direction, and the pseudo code should be updated to:\n\n```\ndupeJump = -1\nwhile i1 < m && i2>=0:\n    if arr1[i1] + arr2[i2] == SUM:\n         yield i1,i2\n         if arr1[i1+1] == arr1[i1] AND arr2[i2-1] == arr2[i2]:\n             //remembering where we were in case of double dupes\n             if (dupeJump == -1):\n                 dupeJump = i2\n             i2--\n         else:\n             if abs(arr1[i1+1] - arr1[i1]) < abs(arr2[i2-1] - arr2[i2]):\n                 i1++\n             else:\n                 i2--\n            //going back up, because there are more pairs to print due to dupes\n             if (dupeJump != -1):\n                 i2 = dupeJump \n                 dupeJump = -1\n    else if arr1[i1] + arr2[i2] > SUM:\n         i2--\n    else\n         i1++\n```\n\n\nNote however that the time complexity might increase to ```\nO(n+m+size(output))```\n, because there could ```\nO(n*m)```\n such pairs and you need to output all of them (note that every correct solution will have this restriction).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Fastest way to list all primes below N\r\n                \r\nThis is the best algorithm I could come up.\n\n```\ndef get_primes(n):\n    numbers = set(range(n, 1, -1))\n    primes = []\n    while numbers:\n        p = numbers.pop()\n        primes.append(p)\n        numbers.difference_update(set(range(p*2, n+1, p)))\n    return primes\n\n>>> timeit.Timer(stmt='get_primes.get_primes(1000000)', setup='import   get_primes').timeit(1)\n1.1499958793645562\n```\n\n\nCan it be made even faster?\n\nThis code has a flaw: Since ```\nnumbers```\n is an unordered set, there is no guarantee that ```\nnumbers.pop()```\n will remove the lowest number from the set. Nevertheless, it works (at least for me) for some input numbers:\n\n```\n>>> sum(get_primes(2000000))\n142913828922L\n#That's the correct sum of all numbers below 2 million\n>>> 529 in get_primes(1000)\nFalse\n>>> 529 in get_primes(530)\nTrue\n```\n\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm(s) for formatting floating point to decimal number\r\n                \r\nRecently, I've studied the IEEE 754-1985 standard. After reading some materials on the web, I think I've grasped the basic ideas underlie floating point numbers.  While, I have a question that can not be solved by searching the web. That is, how the computer system convert the floating point number(in binary form) to its decimal equivalent and print it on the screen as a string for our reading?\n\nTo be clear, for example, In C/C++ language, we just write:\n\n```\n...\nfloat x,y,z;\nx=3.14;\ny=2.71;\nz=x+y;\nprintf(\"%f\",z);\n```\n\n\nwe will get 5.85 as a result on the screen. But how computer(or just the C language and its compiler) convert x,y to IEEE binary floating point form and after the calculation by CPU, convert the IEEE form back to the decimal string form?\n\nIs there some algorithms and for this conversion? By the way, is it hardware or software that does this trick?\n\nThank you! :-)\n    ", "Answer": "\r\nyou should have a look at the ```\nglibc```\n, especially the ```\nprintf```\n function. this is where the authoritative answer for at least one popular implementation lies. i doubt that it is too readable, though.\n\nit is definitely done in software.\n\nhttp://www.gnu.org/software/libc/download.html\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to use alphanum.py?\r\n                \r\nThe Alphanum algorithm (python implementation) \"sorts strings containing a mix of letters and numbers. Given strings of mixed characters and numbers, it sorts the numbers in value order, while sorting the non-numbers in ASCII order. The end result is a natural sorting order.\"\n\nMy attempt in python2.7 is below.\n\n```\n>>> import alphanum\n>>> unsorted = ['NASEC-100', 'NASEC-200', 'NASEC-99', 'NASEC-101']\n>>> sorted = unsorted[:]\n>>> sorted.sort(alphanum)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'module' object is not callable\n```\n\n    ", "Answer": "\r\nI am just a beginner, but I don't remember a alphanum in the standard library of python. \n\nIf alphanum.py is something you wrote or downloaded try ```\nfrom alphanum.py import *```\n.\nI seem to remember having a similar issue with a module I built that was corrected using that instead of just import.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Bubble sort algorithm has a bug where some numbered lists don't sort correctly in NodeJS\r\n                \r\nI am new when it comes to algorithms and am starting from the bottom with the bubble sort. I created my implementation and it seems to work 9/10 times sorting a list of numbers from 1-100. \n\nHowever there are rare times where it is not sorted properly and there will be 1 random number that doesn't get sorted fully.\n\nNot sure where the error in my code is and have come to stack overflow for help.\n\nalgorithims.js\n\n\r\n\r\n```\nconst sortArr = [51, 54, 63, 98, 100, 86, 80, 52, 88, 6, 75, 22, 64, 66, 84, 91, 12, 73, 9, 90, 41, 85, 37, 2, 46, 57, 58, 1, 31, 87, 78, 93, 82, 55, 47, 20, 43, 21, 70, 50, 53, 15, 19, 39, 11, 30, 33, 83, 7, 77]\r\n\r\n\r\n//This bubblesort algoritihm sorts a numbered list\r\n\r\nlet bubbleSort = (arr) => {\r\n  let counter = 0\r\n\r\n  for (let i = 0; i <= sortArr.length; i++) {\r\n    if (sortArr[i] > sortArr[i + 1]) {\r\n      counter += 1\r\n      sortArr.splice(i, 0, sortArr[i + 1])\r\n      sortArr.splice(i + 2, 1)\r\n    }\r\n  }\r\n\r\n  if (counter > 1) {\r\n    bubbleSort(sortArr)\r\n  } else {\r\n    console.log(sortArr)\r\n  }\r\n\r\n};\r\n\r\nbubbleSort(sortArr);```\n\r\n\r\n\r\n\n    ", "Answer": "\r\nIt should be ```\ncounter >= 1```\n rather than ```\ncounter > 1```\n. \n\nBecause for a case like ```\n3,5,3,3```\n Swapping one element makes it ```\n3,3,5,3```\n and it will show the array values rather than going for another recursive calls.\n\nBut,\nA standard bubble sort uses nested loop. Can break the outer loop if everything is sorted(like you did with your counter variable).\n\nAlso, Swapping an element can be done much faster using good old temp variable.\n\n```\ntemp = a;\na = b;\nb = temp\n```\n\n\nOR the cool one,\n\n```\na ^= b;\nb ^= a;\na ^= b\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to count the number of comparisons in this algorithm?\r\n                \r\nI'm learning to analyze the performance of an algorithm. Here, I have created an algorithm to count the number of capital letters in a sentence. But I don't understand how to calculate comparisons in an algorithm. Here is my algorithm:\n```\npublic class CountCapitalLetters{\n    public static void main(String[] args) {\n        String str = \"Wonderfull World\";\n        char[] capitalLetters = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};\n        int count = 0;\n        \n        for (int i = 0; i < str.length(); i++) {\n            for (int j = 0; j < capitalLetters.length; j++) {\n                if (capitalLetters[j] == str.charAt(i))\n                    count += 1;\n            }\n        }\n    }\n}\n```\n\nAnd this is the pseudocode:\n```\nString str = “Wonderfull World”;\nArray capitalLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\ncount = 0\nn = length of str\nnn = length of capitalLetters\n\nfor i = 0 to n\n    for j = 0 to nn\n        if capitalLetters[j] == str[i]\n             count += 1;\n        endif\n    endfor\nendfor\n```\n\nCan someone help me?\n    ", "Answer": "\r\nThe number of comparisons made is the same as the length of characters of the variable ```\nstr```\n times 26.\n\nNumber of comparisons = str.length() * 26\n\nThis is because you are comparing each and every character in ```\nstr```\n to all the capital letters in the array ```\ncapitalLetters```\n. Note that I said \"character\" and not letter, so any spaces in ```\nstr```\n is also included.\nHave a look at this program:\n```\npublic class Test\n{\n    public static void main(String[] args) \n    {\n        String str = \"Wonderfull World\" ;\n        char[] capitalLetters = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'} ;\n        \n        int capitalLetterCount = 0 ;\n        int comparisonCount = 0 ;\n\n        for (int i = 0; i < str.length(); i++) \n        {\n            for (int j = 0; j < capitalLetters.length; j++) \n            {\n                if(capitalLetters[j] == str.charAt(i))      // if the letter is a capital letter\n                    capitalLetterCount += 1;\n\n                comparisonCount+=1 ;        // as a comparison has been made above\n            }\n        }\n\n        System.out.println(\"Number of capital letters: \" + capitalLetterCount) ;\n        System.out.println(\"Number of capital comparisons made: \" + comparisonCount) ;\n\n        int c = str.length() * 26 ;\n        System.out.println(c) ;\n    }\n}\n```\n\nEvery time a comparison is made, the variable ```\ncomparisonCount```\n is incremented by 1. Run the program and see that both the variables ```\ncomparisonCount```\n and ```\nc```\n have the same values.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to handle a variable number of algorithms in a kernel?\r\n                \r\nI'm capturing video frames. Every frame is passed into the kernel as an Image2D. I've got about five simple image processing algorithms (blur, sharpen etc.) which a user can choose of (also a combination of different ones is possible). I see three possibilities here:\n\n\nOne kernel: At runtime construct the string of the kernel with the\nchosen algorithms and compile (and take the overhead of the one-time\ncompiling delay)\nOne kernel: Handle the chosen algorithms with flags (although I understand that conditional branches are undesirable)\nMany kernels (one per algorithm): Seems to be the issue, that an ```\nImage2D```\n can either be ```\nread_only```\n or ```\nwrite_only```\n and I would need to repetively copy the image from and to the GPU as one output image of a kernel is the input image of the next kernel.\n\n\nIs there a suggested rule of thumb which way to follow?\n    ", "Answer": "\r\nOne workaround for the readonly/writeonly problem could be to use buffers for the middle steps.\n\nImage2D -> buffer0 -> buffer1 -> ... bufferN -> Image2D\n\nOr use two buffers and alternate with them if you don't need the intermediate results. (I2d, B0, B1, B0, ..., I2D) \n\nYou would probably need to know in advance how many filters you are applying, but that shouldn't be much of an issue.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "C algorithm about returning a number\r\n                \r\nI have this algorithm\n\n```\nint oglinda(int n)\n{\n    if(n>9)\n    {\n\n        cout << n%10;\n        oglinda(n/10);\n    }\n}\n```\n\n\nand it returns a number from right to left for example for 341=>143.\nHere's the problem:\nWhen the algorithm reaches the last number (which is < 9) it shouldn't receive it's value but instead it does. How comes that when the number is less than 9?\n    ", "Answer": "\r\nPlease try using the code below:\n\n```\nint oglinda(int n)\n{\n    if(n>9)\n    {\n        cout<<n%10;\n        oglinda(n/10);\n    } else{\n        cout<<n;\n    }\n    return 0;\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "C algorithm about returning a number\r\n                \r\nI have this algorithm\n\n```\nint oglinda(int n)\n{\n    if(n>9)\n    {\n\n        cout << n%10;\n        oglinda(n/10);\n    }\n}\n```\n\n\nand it returns a number from right to left for example for 341=>143.\nHere's the problem:\nWhen the algorithm reaches the last number (which is < 9) it shouldn't receive it's value but instead it does. How comes that when the number is less than 9?\n    ", "Answer": "\r\nPlease try using the code below:\n\n```\nint oglinda(int n)\n{\n    if(n>9)\n    {\n        cout<<n%10;\n        oglinda(n/10);\n    } else{\n        cout<<n;\n    }\n    return 0;\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to divide array of length n containing numbers from 1 to n (no repetition) into two equal sum\r\n                \r\nYou are giving array of length ```\nN```\n and numbers in the array contain ```\n1```\n to ```\nN```\n no repetition. You need to check if the array can be divided into to list of equal sum. \n\nI know it can be solved using subset sum problem whose time complexity is.\nIs there an algorithm so that I can reduce the time complexity?\n    ", "Answer": "\r\nAs per your requirements, we conclude the array will always contain numbers 1 to N.\nSo ```\nif Array.Sum()==Even```\n the answer is YES, otherwise NO.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "how to concatenate tokens and strings and numbers in java?\r\n                \r\nI have a program where I'm trying to concatenate token objects with string, using operands (numbers and variables) and operators (+, -, *, /):\n\n```\n         private static Token evalOp(Token op, Token t1, Token t2) { \n             return \"Operator: [\" + op + \"]; Operand1: [\" + t1 +\"]; Operand2 [\" + t2 + \"]\";\n```\n\n\n}\n\nI have a separate array of tokens, that I'm trying to add onto.\n\n```\n  private static ArrayList<Token> infixToPostfix(ArrayList<Token> intokens) {\n      String string = \"\";\n      Stack s = new Stack();\n      for (int i = 0; i < s.length(); i++){\n         if (intokens[i]==operand){\n            string+=intokens[i];\n         }\n         else if (intokens[i]==operator){\n            while (!s.empty()/*&&hasHigherPrecedence(s.top(), intokens[i])*/){\n                string+=s.pop();\n               s.pop();\n            }\n             s.push(intokens[i]);\n         }\n      }\n   }\n```\n\n\nIts for an infix to postfix program. I want to convert infix to postfix and display it in an array. I originally thought the problem had to do with concatenating strings and numbers, but I now believe I was wrong. You'll notice the first code was just replaced. That's because the old code had several if-statements that concatenated numbers and tokens. The tokens could be numbers or variables. I sort of forgot and made the stupid mistake treating it above like they were numbers.\n\nAnyways, I want the user to enter an infix expression, like\n\n```\n2 * 3 + 5\n```\n\n\nand convert it to\n\n```\n2 3 * 5 +\n```\n\n\nSee what I mean? It takes in an expression, then it returns it as a postfix expression. But the postfix expression needs to have these types of strings around it, so the output would really be:\n\n```\n[num: 2], [num: 3], [op: *], [num: 5], [op: +]\n```\n\n\nSee what I mean? I also have another function in my code, in addition to the main method for making an arrayList of token:\n\n```\nprivate static ArrayList<Token> parse(String s) {\n  // make a loop and take each char out of the String s, one by one and check\n  //   to see what token type it is. Then store the token type in an ArrayList of tokens\n  for (int i = 0; i < s.length(); i++){\n     char c = s.charAt(i);\n     String v = Character.toString(c);\n     TokenType t = getTokenType(c);\n     if (t==null){\n        //print error\n        System.out.println(\"Error\");\n     }\n     else if(!t.equals(TokenType.WS)){\n        //add to array\n        list.add(TokenType.WS);\n     }\n  }\n  return list;\n   }\n```\n\n\nI have more code, but basically, I want to convert infix to postfix and I want to evaluate it. It has to pass this algorithm as a test:\n\n```\nclass SimpleCalcTest {\n\npublic static void test() {\n    String[] inputs = {\n        \"3*4 + 5\",\n        \"3 + 4*5\",\n        \"(1+1)*(5-2)\",\n        \"(3*4+5)*(3*3 + 4*4)\"\n    };\n\n    for (int i=0; i<inputs.length; i++) {\n        String s = inputs[i];\n        System.out.println();\n        System.out.println();\n        System.out.println(\"test:  input = \" + s);\n        String r = SimpleCalc.evalExpression(s);\n        System.out.println(\"\\tresult = \" + r);\n    }\n}\n\n\npublic static void main(String[] args) {\n    SimpleCalc.commandLine();\n}\n```\n\n    ", "Answer": "\r\nYou can. You're doing something else wrong but you haven't given enough context. The following works so compare it with your own code:\n\n```\nclass Foo {\n    public static void main(String[] args) {\n        System.out.println(demo());\n    }\n\n    static String demo() {\n        int t1 = 5;\n        int t2 = 3;\n        return \"Answer: \" + (t1 - t2);\n    }\n}\n\n$ java -version\njava version \"1.7.0_79\"\nOpenJDK Runtime Environment (IcedTea 2.5.6) (7u79-2.5.6-0ubuntu1.14.04.1)\nOpenJDK 64-Bit Server VM (build 24.79-b02, mixed mode)\n$ javac Foo.java\n$ java Foo\nAnswer: 2\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Sort algorithm and distance between number\r\n                \r\nLet's say we have an array filled with long long unsigned int. The distance between each adjacent elements is small. For example we have : [0,1,0,1,0,1] \nWe have another array of the same size and the distance between each adjacent element is now significant. \nWe have then the following array : [1, 1000000000, 1, 1000000000, 1, 1000000000].\n\nThe last step is to sort the two arrays with the insertion sort or merge sort or quicksort.\nIs it possible that the processing time is longer for the second array because of the greater distance between elements ?\n\nThank you in advance !\n    ", "Answer": "\r\nSorting algorithms like insertion sort, quicksort, and mergesort are called comparison sorts because they sort elements based purely on the relative order of those elements, not their absolute size. From the perspective of quicksort, mergesort, or insertion sort, the array [0, 1, 0, 1, 0] and [0, 100000, 0, 100000, 0] are completely identical, since they have no way of knowing that 100000 is \"much bigger than\" 1. The total number of operations performed to sort those arrays will be completely identical to one another. In fact, if you sort each array with those algorithms and watch the elements move around, you'll find that the exact same moves get performed.\n\nIf you're talking about sorting integers that fit into a single machine word, then the cost of a move is independent of the numeric value stored in that machine word. The cost of comparing those elements is likely also the same. I would therefore predict that you would see absolutely no difference in the time required to sort these arrays with those algorithms.\n\nIf there is any difference, it would mean that the processor you're using can compare or move numbers of different sizes in different amounts of time. To the best of my knowledge there are no real processor architectures that do this.\n\nNow, on the other hand, sorting algorithms like counting sort or radix sort, which are not comparison sorts and do depend on the sizes of the numbers you're dealing with, could take longer to sort these arrays because they work either one digit at a time or by distributing into an array whose size depends on the sizes of the numbers in questions. In those cases, you should see a difference between the runtimes, provided that the algorithm you used was implemented well.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "OR of pairwise XOR\r\n                \r\nCan anyone suggest me a ```\nO(n)```\n algorithm for ```\nOR```\n the result of pairwise ```\nXOR```\n operations on N numbers for example let ```\nN=3```\n and numbers be ```\n5,7```\n and ```\n9```\n\n\n```\n5 ^ 7 = 2,  7 ^ 9 = 14,  9 ^ 5 = 12\n2|14|12 = 14\n```\n\n\n```\n^ for XOR```\n operation and ```\n| for OR```\n operation\n    ", "Answer": "\r\nIf ```\nA[i]```\n differs from ```\nA[j]```\n in ```\nk```\n-th bit then:\neither ```\nA[i]```\n differs from ```\nA[1]```\n in ```\nk```\n-th bit\nor ```\nA[j]```\n differs from ```\nA[1]```\n in ```\nk```\n-th bit\nSo, N operations are enough:\n\n```\n// A[i] = array of source numbers, i=1..N\nResult = 0\nfor i = 2 to N\n    Result = Result OR (A[i] XOR A[1])\nprint(Result)\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to create / generate permutation of characters and numbers with length control in ruby\r\n                \r\nI need to create / generate long string contains permutation of characters and numbers at the same time I need to control the string length the most famous examples of this approach are\n\nMetasploit project :\n\npettern_create.rb [string length as arg]\n\nex. pattern_create.rb  100\n\nand \n\nRonin project: \n\n```\nString.generate([:alpha, 1], :numeric).take(100).each do |pattern| \n   print pattern\nend\n```\n\n\nboth will generate \n\n\n  A0A1A2A3A4A5A6A7A8A9B0B1B2B3B4B5B6B7B8B9C0C1C2C3C4C5C6C7C8C9D0D1D2D3D4D5D6D7D8D9E0E1E2E3E4E5E6E7E8E9F0F1F2F3F4F5F6F7F8F9G0G1G2G3G4G5G6G7G8G9H0H1H2H3H4H5H6H7H8H9I0I1I2I3I4I5I6I7I8I9J0J1J2J3J4J5J6J7J8J9\n\n\nI tried with \n\n```\nall  = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\",\n         \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n         \"0\",\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n\nputs  all.permutation(4).to_a\n```\n\n\nputs this will take a huge time because it'll generate ALL permutations without control, the control is the way to prevent unwanted strings \n\nthere is no issue in specifying the particular position of a string like \"4C5C6\"\nI can use \n\n```\nstr = \"A0A1A2A3A4A5A6A7A8A9B0B1B2B3B4B5B6B7B8B9C0C1C2C3C4C5C6C7C8C9D0D1D2D3D4D5D6D7D8D9E0E1E2E3E4E5E6E7E8E9F0F1F2F3F4F5F6F7F8F9G0G1G2G3G4G5G6G7G8G9H0H1H2H3H4H5H6H7H8H9I0I1I2I3I4I5I6I7I8I9J0J1J2J3J4J5J6J7J8J9\"\nputs str.index(\"4C5C6\")   #=> 46\n```\n\n\nNotes:\n\n\npermutation should be generated with same sequence all the time. \nI don't want to force user to gem huge project for small function\nI need to understand the algorithm or programmatic trick to do that \n\n\nThanks \n    ", "Answer": "\r\nThe ```\npermutation```\n method results in a enumerator, which is what you want. Don't turn it into an array with ```\nto_a```\n, just take what you need.\n\n```\nall  = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\",\n         \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n         \"0\",\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n\np  all.permutation(4).first(100) #take(100) is fine too\n```\n\n\nRuby strings work in a Range btw, so you can do:\n\n```\n('aaaa'..'zzzz').first(100) #or\n('A0'..'Z9').first(100).join\n#=> \"A0A1A2A3A4A5A6A7A8A9B0B1B2B3B4B5B6B7B8B9C0C1C2C3C4C5C6C7C8C9D0D1D2D3D4D5D6D7D8D9E0E1E2E3E4E5E6E7E8E9F0F1F2F3F4F5F6F7F8F9G0G1G2G3G4G5G6G7G8G9H0H1H2H3H4H5H6H7H8H9I0I1I2I3I4I5I6I7I8I9J0J1J2J3J4J5J6J7J8J9\"\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Number Pyramid Algorithm\r\n                \r\nI was searching around the internet trying to find the algorithm of the following pyramid:\n\n```\n                           1\n                        2  3  2\n                     3  4  5  4  3\n                  4  5  6  7  6  5   4\n               5  6  7  8  9  8   7  6  5   \n            6  7  8  9  10 11 10  9  8  7  6\n          7 8  9  10 11 12 13 12 11 10  9  8 7\n       8  9 10 11 12 13 14 15 14 13 12 11 10 9  8\n    9 10 11 12 13 14 15 16 17 16 15 14 13 12 11 10 9\n10 11 12 13 14 15 16 17 18 19 18 17 16 15 14 13 12 11 10\n```\n\n\nI wasn't able to find the algorithm, my question is: Does anyone know the algorithm and/or name for this type of pyramid?\n\nAny help is greatly appreciated. I'm sorry if anything in the post is wrong in some way, new posting here.\n    ", "Answer": "\r\nHere's one solution .... but you should not be lazy, this isn't so hard :)\n\nIt is written in Java ....\nWhat you see in the System.out.print() is \"Ternary operator\". You need to check if it is two digit number, to reduce the number of empty spaces.\n\n```\npublic static void Pyramid(int rows) {\n    int r = 1; // r is current row\n    int emptySpaces = rows;\n\n    while(r <= rows) {\n        //print the empty spaces (3 empty spaces in one iteration)\n        for(int i = 1; i < emptySpaces; i++) {\n            System.out.print(\"   \");\n        }\n        //print the numbers to the middle including the middle number\n        for(int i = 0; i < r; i++) {\n            System.out.print((r+i)/10 == 0 ? (r+i + \"  \") : (r+i + \" \"));\n        }            \n        //print the numbers from the middle to the end\n        for(int i = r-2; i >= 0; i--) {\n            System.out.print((r+i)/10 == 0 ? (r+i + \"  \") : (r+i + \" \"));\n        }\n        //print new line, reduce empty spaces\n        System.out.println(\"\");\n        emptySpaces--;\n        r++;\n    }\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Genetic algorithm and Tetris\r\n                \r\nIm creating a Tetris player using genetic algorithms, and facing some issues. I've read a lot of related works, but they don't give me enough details on the GA.\n\nThe problem is that my agent seems to get stucked very fast...Im using a evaluation function take covers 4 features:height, covered holes, flatness and number of cleared rows. I read some paper that uses the same evaluation, and is capable of doing thousands of rows.\n\nAfter 600 generations, with a population of 100 agents, the best one is capable of doing only 260 rows on average, that's lame. All agents are playing the same piece sequence.\n\nDetails of my GA:\n\ngenerations:600\npopulation:100\n\ngenes: Array of 4 float values, between 0 and 1.\n\nUniform crossover happens at a certain probability, and swaps genes between two parents, with a certain probability.\n\nMutation occurs at a certain probability, here i've tried 3 different approaches:swap genes, replace the gene with a random value, or add some noise value to the gene.\n\nI have a elite rate of 50%, and noticed that some good agents are being selected and given birth to worse agents, contaminating the population.\n\nSelection is roulette wheel...\n\nIf someone could give me details on the best way to crossover and mutate, i appreciate!\n\nThanks, and sorry for the long post!\n    ", "Answer": "\r\nThere seems to be some difference in the evaluation functions.  You describe four features:\n\n\nheight, \ncovered holes, \nflatness and \nnumber of cleared rows\n\n\nHowever, the paper you reference describes five features:\n\n\n  The function that the agent uses to determine the utility of a board’s state is the weighted linear sum of numerical features calculated from the state. Colin Fahey’s agents used these features: pile-height, the number of closed holes, and the number of wells (Fahey 2003). The features that we added are the number of lines that were just made, and a number that represents how “bumpy” the pile is.\n\n\n(emphasis mine)\n\nSo it appears that you are missing the \"wells\" feature in your evaluation function and the makeup of the genes.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What is the id number for Brotli compression inside a ZIP archive?\r\n                \r\nThe ZIP file format supports a number of compression algorithms and assigns them numbers, for example 0 is store, 8 is deflate, and 14 is lzma. What number indicates Brotli compression? Is there any additional zip-level metadata needed for this compression algorithm?\n    ", "Answer": "\r\nAs of this writing, there isn't one. The official list of ZIP file format compression methods is found in PKWare's ZIP Appnote, for which the most recent version is 6.3.4, dated October 1, 2014. Here are the defined compression methods therein:\n```\n   4.4.5 compression method: (2 bytes)\n\n        0 - The file is stored (no compression)\n        1 - The file is Shrunk\n        2 - The file is Reduced with compression factor 1\n        3 - The file is Reduced with compression factor 2\n        4 - The file is Reduced with compression factor 3\n        5 - The file is Reduced with compression factor 4\n        6 - The file is Imploded\n        7 - Reserved for Tokenizing compression algorithm\n        8 - The file is Deflated\n        9 - Enhanced Deflating using Deflate64(tm)\n       10 - PKWARE Data Compression Library Imploding (old IBM TERSE)\n       11 - Reserved by PKWARE\n       12 - File is compressed using BZIP2 algorithm\n       13 - Reserved by PKWARE\n       14 - LZMA (EFS)\n       15 - Reserved by PKWARE\n       16 - Reserved by PKWARE\n       17 - Reserved by PKWARE\n       18 - File is compressed using IBM TERSE (new)\n       19 - IBM LZ77 z Architecture (PFS)\n       97 - WavPack compressed data\n       98 - PPMd version I, Rev 1\n```\n\nI suppose you could define your own method number and use it, but that use would be non-standard. (It is a two-byte field, so you could pick a large number that PKWare would be very unlikely to define to be something else.)\nNo, there is no other information required to be able to decompress a brotli stream.\nUpdate:\nAs of the July 2020 appnote (6.3.9), more compression methods, notably zstd and xz, but still no brotli.\n```\n   4.4.5 compression method: (2 bytes)\n\n        0 - The file is stored (no compression)\n        1 - The file is Shrunk\n        2 - The file is Reduced with compression factor 1\n        3 - The file is Reduced with compression factor 2\n        4 - The file is Reduced with compression factor 3\n        5 - The file is Reduced with compression factor 4\n        6 - The file is Imploded\n        7 - Reserved for Tokenizing compression algorithm\n        8 - The file is Deflated\n        9 - Enhanced Deflating using Deflate64(tm)\n       10 - PKWARE Data Compression Library Imploding (old IBM TERSE)\n       11 - Reserved by PKWARE\n       12 - File is compressed using BZIP2 algorithm\n       13 - Reserved by PKWARE\n       14 - LZMA\n       15 - Reserved by PKWARE\n       16 - IBM z/OS CMPSC Compression\n       17 - Reserved by PKWARE\n       18 - File is compressed using IBM TERSE (new)\n       19 - IBM LZ77 z Architecture \n       20 - deprecated (use method 93 for zstd)\n       93 - Zstandard (zstd) Compression \n       94 - MP3 Compression \n       95 - XZ Compression \n       96 - JPEG variant\n       97 - WavPack compressed data\n       98 - PPMd version I, Rev 1\n       99 - AE-x encryption marker (see APPENDIX E)\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Converting numbers by Euclidean algorithm and the Horner's method\r\n                \r\nI have some trouble with my code in C. It doesn't convert the number as it should be.\nThis is the euclidean algorithm to transform a given number to another number with a different base. \"precision\" is the amount of digits after comma.\n\n```\nstatic char* euclid(float number, int base, int precision)\n{\n    //create a buffer for holding the resulting string\n    char* resultString = createBuffer(number, base, precision);\n    int numbTemp;\n    int numbDiv;\n\n    float maxExponent  = 0;\n\n    while (number >= pow((float)base, (float)maxExponent)) {\n       maxExponent++;\n    }\n\n    maxExponent--;\n\n   if (maxExponent < 0) {\n\n       maxExponent = 0;\n   }\n\n   while (maxExponent >= 0) {\n     numbDiv = number / pow(base, maxExponent);\n     *resultString += converIntToChar(numbDiv);\n     numbTemp = numbDiv * pow(base, maxExponent);\n     number -= numbTemp;\n     maxExponent--;\n     if(maxExponent < 0 && precision >0) {\n         *resultString += \",\";\n         while(precision > 0) {\n             numbDiv = number / pow(base, maxExponent);\n             numbTemp = numbDiv * pow(base, maxExponent);\n             *resultString += convertIntToChar(numbDiv);\n             number = number - numbTemp;\n             maxExponent--;\n             precision--;\n         }\n     }\n  }\n  return resultString;\n}\n```\n\n\nconverting number to character:\n\n```\nstatic char convertIntToChar(int number) {\n     if (0 <= number && 10 > number) {\n          return number + '0';\n     }\n     else if (16 > number) {\n          return number - 10 + 'A';\n     }\n     else {\n          return '\\0';\n     }\n}\n```\n\n\nThe input for the \"number\" is always a number to the base 10. I tried it for example with 170 and as result I wanted to have 170 (which is to the base 10) returned as a number to the base 16, which is AA.\nBut what I get as result is  �. Could you help me to find the the problem. Besides I use linux. So I use the gcc compiler.\nAlso I am trying to implement Horner's method and I get the same result as above (�)\nMy code for the Horner's method.\n\n```\nstatic char* horner(float number, int base, int precision) {\n\n    // create a buffer for holding the resulting string.\n    char* resultString = createBuffer(number, base, precision);\n    int numbDiv = 0;\n    int numbTemp = 0;\n    int numbConv = 0;\n\n    do {\n        numbDiv = number / base;\n        numbTemp = numbDiv * base;\n        numbConv = number - numbTemp;\n        number = numbDiv;\n        *resultString += convertIntToChar(numbConv);\n    } while (number != 0);\n\n    return resultString;\n }\n```\n\n\nregards\nHagi\n    ", "Answer": "\r\nYour issue is with confusion over what is ```\n*resultString```\n;  you are supposed to be putting the precisions in resultString[idx] where idx is the next index but all you are doing is just adding the values to 0th character because *resultString points to it;\n\nSo do this:\n\n```\nchar * resultString = createBuffer(number, base, precision); \n```\n\n\nis fine;\n\nbut \n\n```\n*resultString += converIntToChar(numbDiv);\n```\n\n\nis nonsensical\n\nDeclare an index variable;\n\n```\nchar * resultString = createBuffer(number, base, precision); \nsize_t idx = 0;\n```\n\n\nNow later on :\n\n```\nresultString[idx++] = convertIntToChar(numbDiv);\n```\n\n\nand in your while(); loop:\n\n```\n*resultString += \",\"; /* ??? */\n```\n\n\nbecomes\n\n```\n resultString[idx++] = ','; /* note single character quotes */\n```\n\n\nand similar treatment of other instances of *resultString;\n\nOnce the function is about to return (i.e. the resultString is ready)  you still need a terminating NULL character:\n\n```\n resultString[idx++] = 0; \n return;\n```\n\n\nThis also means that your createBuffer should return memory that accounts for the NULL character of C strings at the end.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Whats the ideal population size and number of iterations for Genetic Algorithm\r\n                \r\nI am using a GA to evaluate a continuous function for a vector with approximately 40,000 variables. Currently I am using a population size of 200 where every member of the population has 40,000 variables. I am using 50 iterations. \n\nWith these numbers, the GA is not getting me really close to the optimum solution. I was wondering if there is a way to determine the best population size and number of iterations for a vector of huge size (40,000 variables).\n    ", "Answer": "\r\nYes, it's call trail and error. I suggest starting with a much larger size and see how close you get then decrease the population size repeatedly until you find the point where the size is getting unacceptable results.  \n\nThere is also check that the population size is the problem.  There might be a problem with your algorithm so that given any size and iterations you still don't get an ideal solution.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Find the number of instructions of an algorithm\r\n                \r\nGiven this algorithm (a>0, b>0) :  \n\n```\nwhile(a>=b){\n   k=1;\n   while(a>=k*b){\n      a = a - k*b;\n      k++;\n   }\n}\n```\n\n\nMy question : I have to find the time complexity of this algorithm and to do so, I must find the number of instructions but I couldn't find it. Is there a way to find this number and if not, how can I find its time complexity ?\n\nWhat I have done : First of all I tried to find the number of iterations of the first loop and I found a pattern : a_i = a - (i(i+1)/2)*b where i is the number of iterations. I've spent hours doing some manipulations on it but I couldn't find anything relevant (I've found weird results like q² <= a/b < q²+q where q is the number of iterations).\n    ", "Answer": "\r\nYou have correctly calculated that the value of ```\na```\n after the ```\ni```\n-th iteration of the inner loop is:\n\n\n\nWhere ```\na_j0```\n is the value of ```\na```\n at the start of the ```\nj```\n-th outer loop. The stopping condition for the inner loop is:\n\n\n\nWhich can be solved as a quadratic inequality:\n\n\n\nTherefore the inner loop is approximately ```\nO(sqrt(a_j0 / b))```\n. The next starting value of ```\na```\n satisfies:\n\n\n\nScaling roughly as ```\nsqrt(2b * a_j0)```\n. It would be quite tedious to compute the  time complexity exactly, so let's apply the above approximations from here on:\n\n\n\nWhere ```\na_n```\n replaces ```\na_j0```\n, and ```\nt_n```\n is the run-time of the inner loop – and of course the total time complexity is just the sum of ```\nt_n```\n. Note that the first term is given by ```\nn = 1```\n, and that the input value of ```\na```\n is defined to be ```\na_0```\n.\n\nBefore directly solving this recurrence, note that since the second term ```\nt_2```\n is already proportional to the square root of the first ```\nt_1```\n, the latter dominates all other terms in the sum.\n\n\n  The total time complexity is therefore just ```\nO(sqrt(a / b))```\n.\n\n\n\n\nUpdate: numerical tests.\n\nNote that, since all changes in the value of ```\na```\n are proportional to ```\nb```\n, and all loop conditions are also proportional to ```\nb```\n, the function can be \"normalized\" by setting ```\nb = 1```\n and only varying ```\na```\n.\n\nJavascript test function, which measures the number of times that the inner loop executes: \n\n```\nfunction T(n)\n{\n   let t = 0, k = 0;\n   while (n >= 1) {\n      k = 1;\n      while (n >= k) {\n          n -= k;\n          k++; t++;\n      }\n   }\n   return t;\n}\n```\n\n\nPlot of ```\nsqrt(n)```\n against ```\nT(n)```\n:\n\n\n\nA convincing straight line which confirms that the time complexity is indeed half-power.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Winding number algorithm and point on boundary/edge of convex\r\n                \r\nI need algorithm which can tell, if Point lies inside/outside or on boundary (edge) of convex hull (C/C++).\n\nConvex hull is described as array of Points X,Y, integer, connection are from i to i+1.\n\nCurrently Im using winding number algorithm, described here:\nhttp://geomalgorithms.com/a03-_inclusion.html\nIt's function \"wn_PnPoly()\".\n\nIs it possible, and how, to make winding number algorithm detect, if Point lies exactly on boundary (edge) of convex?\nIs there another algorithm to do that? (Needs to work on ints).\n    ", "Answer": "\r\nFound solution:\n\n```\nint wn_PnPoly2(Point P, vector<Point> V, int n)\n{\n    int    wn = 0;    // the  winding number counter\n\n                      // loop through all edges of the polygon\n    for (int i = 0; i<n; i++) {   // edge from V[i] to  V[i+1]\n        if (V[i].Y <= P.Y) {          // start y <= P.y\n            if (V[i + 1].Y  > P.Y)      // an upward crossing\n            {\n                int l = isLeft(V[i], V[i + 1], P);\n                if (l > 0)  // P left of  edge\n                    ++wn;            // have  a valid up intersect\n                else if (l == 0) // boundary\n                    return 0;\n            }\n        }\n        else {                        // start y > P.y (no test needed)\n            if (V[i + 1].Y <= P.Y)     // a downward crossing\n            {\n                int l = isLeft(V[i], V[i + 1], P);\n                if (l < 0)  // P right of  edge\n                    --wn;            // have  a valid down intersect\n                else if (l == 0)\n                    return 0;\n            }\n        }\n    }\n    return wn;\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to approach a number guessing game (with a twist) algorithm?\r\n                \r\nUpdate(July 2020): Question is 9 years old but still one that I'm deeply interested in. In the time since, machine learning(RNN's, CNN's, GANS,etc), new approaches and cheap GPU's have risen that enable new approaches. I thought it would be fun to revisit this question to see if there are new approaches.\nI am learning programming (Python and algorithms) and was trying to work on a project that I find interesting. I have created a few basic Python scripts, but I’m not sure how to approach a solution to a game I am trying to build.\nHere’s how the game will work:\nUsers will be given items with a value. For example,\n```\nApple = 1\nPears = 2\nOranges  = 3\n```\n\nThey will then get a chance to choose any combo of them they like (i.e. 100 apples, 20 pears, and one orange). The only output the computer gets is the total value (in this example, it's currently $143). The computer will try to guess what they have. Which obviously it won’t be able to get correctly the first turn.\n```\n         Value    quantity(day1)    value(day1)\nApple      1        100                100\nPears      2         20                 40\nOrange     3          1                  3\nTotal               121                143\n```\n\nThe next turn the user can modify their numbers but no more than 5% of the total quantity (or some other percent we may chose. I’ll use 5% for example.). The prices of fruit can change(at random) so the total value may change based on that also (for simplicity I am not changing fruit prices in this example). Using the above example, on day 2 of the game, the user returns a value of $152 and $164 on day 3. Here's an example:\n```\nQuantity (day2)   %change (day2)    Value (day2)   Quantity (day3)   %change (day3)   Value(day3)\n 104                                 104            106                                106\n  21                                  42             23                                 46\n   2                                   6              4                                 12\n 127               4.96%             152            133               4.72%            164\n```\n\n*(I hope the tables show up right, I had to manually space them so hopefully it's not just doing it on my screen, if it doesn't work let me know and I'll try to upload a screenshot.)\nI am trying to see if I can figure out what the quantities are over time (assuming the user will have the patience to keep entering numbers). I know right now my only restriction is the total value cannot be more than 5% so I cannot be within 5% accuracy right now so the user will be entering it forever.\nWhat I have done so far\nHere’s my solution so far (not much). Basically, I take all the values and figure out all the possible combinations of them (I am done this part). Then I take all the possible combos and put them in a database as a dictionary (so for example for $143, there could be a dictionary entry {apple:143, Pears:0, Oranges :0}..all the way to {apple:0, Pears:1, Oranges :47}. I do this each time I get a new number so I have a list of all possibilities.\nHere’s where I’m stuck. In using the rules above, how can I figure out the best possible solution? I think I’ll need a fitness function that automatically compares the two days data and removes any possibilities that have more than 5% variance of the previous days data.\nQuestions:\nSo my question with user changing the total and me having a list of all the probabilities, how should I approach this? What do I need to learn? Is there any algorithms out there or theories that I can use that are applicable? Or, to help me understand my mistake, can you suggest what rules I can add to make this goal feasible (if it's not in its current state. I was thinking adding more fruits and saying they must pick at least 3, etc..)?  Also, I only have a vague understanding of genetic algorithms, but I thought I could use them here, if is there something I can use?\nI'm very very eager to learn so any advice or tips would be greatly appreciated (just please don't tell me this game is impossible).\nUPDATE: Getting feedback that this is hard to solve. So I thought I'd add another condition to the game that won't interfere with what the player is doing (game stays the same for them) but everyday the value of the fruits change price (randomly). Would that make it easier to solve? Because within a 5% movement and certain fruit value changes, only a few combinations are probable over time.\nDay 1, anything is possible and getting a close enough range is almost impossible, but as the prices of fruits change and the user can only choose a 5% change, then shouldn't (over time) the range be narrow and narrow. In the above example, if prices are volatile enough I think I could brute force a solution that gave me a range to guess in, but I'm trying to figure out if there's a more elegant solution or other solutions to keep narrowing this range over time.\nUPDATE2: After reading and asking around, I believe this is a hidden Markov/Viterbi problem that tracks the changes in fruit prices as well as total sum (weighting the last data point the heaviest). I'm not sure how to apply the relationship though. I think this is the case and could be wrong but at the least I'm starting to suspect this is a some type of machine learning problem.\nUpdate 3: I am created a test case (with smaller numbers) and a generator to help automate the user generated data and I am trying to create a graph from it to see what's more likely.\nHere's the code, along with the total values and comments on what the users actually fruit quantities are.\n```\n#!/usr/bin/env python\nimport itertools\n\n# Fruit price data\nfruitPriceDay1 = {'Apple':1, 'Pears':2, 'Oranges':3}\nfruitPriceDay2 = {'Apple':2, 'Pears':3, 'Oranges':4}\nfruitPriceDay3 = {'Apple':2, 'Pears':4, 'Oranges':5}\n\n# Generate possibilities for testing (warning...will not scale with large numbers)\ndef possibilityGenerator(target_sum, apple, pears, oranges):\n    allDayPossible = {}\n    counter = 1\n    apple_range = range(0, target_sum + 1, apple)\n    pears_range = range(0, target_sum + 1, pears)\n    oranges_range = range(0, target_sum + 1, oranges)\n    for i, j, k in itertools.product(apple_range, pears_range, oranges_range):\n        if i + j + k == target_sum:\n            currentPossible = {}\n\n            #print counter\n            #print 'Apple', ':', i/apple, ',', 'Pears', ':', j/pears, ',', 'Oranges', ':', k/oranges\n            currentPossible['apple'] = i/apple\n            currentPossible['pears'] = j/pears\n            currentPossible['oranges'] = k/oranges\n\n            #print currentPossible\n            allDayPossible[counter] = currentPossible\n            counter = counter +1\n    return allDayPossible\n\n# Total sum being returned by user for value of fruits\ntotalSumDay1=26 # Computer does not know this but users quantities are apple: 20, pears 3, oranges 0 at the current prices of the day\ntotalSumDay2=51 # Computer does not know this but users quantities are apple: 21, pears 3, oranges 0 at the current prices of the day\ntotalSumDay3=61 # Computer does not know this but users quantities are apple: 20, pears 4, oranges 1 at the current prices of the day\ngraph = {}\ngraph['day1'] = possibilityGenerator(totalSumDay1, fruitPriceDay1['Apple'], fruitPriceDay1['Pears'], fruitPriceDay1['Oranges'] )\ngraph['day2'] = possibilityGenerator(totalSumDay2, fruitPriceDay2['Apple'], fruitPriceDay2['Pears'], fruitPriceDay2['Oranges'] )\ngraph['day3'] = possibilityGenerator(totalSumDay3, fruitPriceDay3['Apple'], fruitPriceDay3['Pears'], fruitPriceDay3['Oranges'] )\n\n# Sample of dict = 1 : {'oranges': 0, 'apple': 0, 'pears': 0}..70 : {'oranges': 8, 'apple': 26, 'pears': 13}\nprint graph\n```\n\n    ", "Answer": "\r\nWe'll combine graph-theory and probability:\n\nOn the 1st day, build a set of all feasible solutions. Lets denote the solutions set as A1={a1(1), a1(2),...,a1(n)}.\n\nOn the second day you can again build the solutions set A2.\n\nNow, for each element in A2, you'll need to check if it can be reached from each element of A1 (given x% tolerance). If so - connect A2(n) to A1(m). If it can't be reached from any node in A1(m) - you can delete this node.\n\nBasically we are building a connected directed acyclic graph.\n\nAll paths in the graph are equally likely. You can find an exact solution only when there is a single edge from Am to Am+1 (from a node in Am to a node in Am+1).\n\nSure, some nodes appear in more paths than other nodes. The probability for each node can be directly deduced based on the number of paths that contains this node.\n\nBy assigning a weight to each node, which equals to the number of paths that leads to this node, there is no need to keep all history, but only the previous day.\n\nAlso, have a look at non-negative-values linear diphantine equations - A question I asked a while ago. The accepted answer is a great way to enumarte all combos in each step.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Prime number search algorithm (two different algorithm) and use of prime tables\r\n                \r\nI've written two algorithms to find prime numbers. One - ```\nisPrime()```\n - is based on searching for odd divisors from 3 till the square root of the odd numbers to analyze (the even numbers are discarded), the second - ```\nisPrime2()```\n - is based on the assumption that all prime numbers greater than 3 have the form: p=k*6-1 or p=k*6+1. (These function consider the number 1 is a prime, but is easy to modify this behaviour if you think 1 is not a prime!)\n\nThe second algorithm is slightly faster than the first, but using tables they have at least the same speed.\n\nUsing tables (as the main(), below, does) the search becomes two times faster (searching for the first million of primes) than without using them. You may verify that fact modifying the calls to the ```\nisPrime()```\n functions in the ```\nwhile```\n loops as in the following:\n\n```\nisPrime(n, NULL);\n```\n\n\ninstead of:\n\n```\nisPrime(n, &tbl[x]);\n```\n\n\nThe main() loads two primes tables containing a million of primes, one using ```\nisPrime()```\n and the other one using ```\nisPrime2()```\n, then printout the used time and some primes. After that the main() compares the results of the two tables.\n\nI'm interested in algorithms to fill prime numbers tables (also starting from 1) and to indentify if a big/huge number is a prime number. Have you suggestions? Do you know different or faster algorithms? \n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <math.h>\n#include <sys/time.h>\n\ntypedef struct prime_table {\n    uint64_t * primes;\n    uint32_t inTable;\n    uint32_t maxIn;\n} table;\n\nint isPrime(uint64_t n, table * t)\n{\n    uint64_t i, k, m;\n\n    if(!n)\n        return 0;\n\n    if(n < 4)\n        return 1;\n\n    if(!(n & 1))    /* the number is even */\n        return 0;\n\n    m = sqrt(n);\n\n    k = 1;\n    if(t) {\n        for(i = 2; i < t->inTable && t->primes[i] <= m; i++) {\n            k = t->primes[i];\n            if(!(n % k))\n                return 0;\n        }\n    }\n\n    k += 2;\n    for(i = k; i <= m; i += 2) {\n        if(!(n % i))\n            return 0;\n    }\n\n    return 1;\n}\n\nint isPrime2(uint64_t n, table * t)\n{\n    uint64_t i, k, m;\n\n    if(!n)\n        return 0;\n\n    if(n < 4 || n == 5)\n        return 1;\n\n    if(!(n & 1))    /* the number is even */\n        return 0;\n\n    if(!(n % 3))\n        return 0;\n\n    k = (n - 1) / 6; m = (n + 1) / 6;\n    if(k * 6 + 1 != n && m * 6 - 1 != n)\n        return 0;\n\n    m = sqrt(n);\n    k = 5;\n    if(t) {\n        for(i = 3; i < t->inTable && t->primes[i] <= m; i++) {\n            k = t->primes[i];\n\n            if(!(n % k))\n                return 0;\n        }\n    }\n    k += 2;\n\n    k = (k - 1) / 6; m = (m + 1) / 6;\n    for(i = k; i <= m; i++) {\n        if(!(n % (6 * i - 1)) || !(n % (6 * i + 1)))\n            return 0;\n    }\n\n    return 1;\n}\n\nuint32_t getusec()\n{\n    struct timeval t;\n    gettimeofday(&t, NULL);\n\n    return (t.tv_sec * 1000000UL + t.tv_usec);\n}\n\nint main(void)\n{\n    static table tbl[2];\n    uint64_t n = 1;\n    uint32_t t, i, j;\n\n    /* Init two prime tables */\n    for(i = 0; i < 2; i++) {\n        tbl[i].maxIn = 1000000;\n        tbl[i].primes = malloc(tbl[i].maxIn * sizeof(*tbl[0].primes));\n\n        /* Load the 1,2 and 3 into the table */\n        for(j = 1; j < 4; j++)\n            tbl[i].primes[j - 1] = j;\n\n        tbl[i].inTable = 3;\n    }\n\n    /* Loading table with isPrime()*/\n    t = getusec();\n    n = 3;\n    while(tbl[0].inTable < tbl[0].maxIn) {\n        n += 2;\n        if(isPrime(n, &tbl[0])) {\n            tbl[0].primes[tbl[0].inTable++] = n;\n        }\n    }\n\n    printf(\"%u primes computed in %u usec\\n\", tbl[0].inTable, getusec() - t);\n    puts(\"First 16 computed primes\");\n\n    for(i = 0; i < 16; i++)\n        printf(\"%9lu \", tbl[0].primes[i]);\n\n    puts(\"\\n--------------------\");\n    puts(\"Last 16 computed primes\");\n\n    for(i = tbl[0].inTable - 16; i < tbl[0].inTable; i++)\n        printf(\"%9lu \", tbl[0].primes[i]);\n\n    puts(\"\\n--------------------\");\n\n    /* Loading table with isPrime2()*/\n    t = getusec();\n    n = 3;\n    while(tbl[1].inTable < tbl[1].maxIn) {\n        n += 2;\n        if(isPrime2(n, &tbl[1])) {\n            tbl[1].primes[tbl[1].inTable++] = n;\n        }\n    }\n\n    printf(\"%u primes computed in %u usec\\n\", tbl[1].inTable, getusec() - t);\n    puts(\"First 16 computed primes\");\n\n    for(i = 0; i < 16; i++)\n        printf(\"%9lu \", tbl[1].primes[i]);\n\n    puts(\"\\n--------------------\");\n    puts(\"Last 16 computed primes\");\n\n    for(i = tbl[1].inTable - 16; i < tbl[1].inTable; i++)\n        printf(\"%9lu \", tbl[1].primes[i]);\n\n    puts(\"\\n--------------------\");\n    puts(\"Searching for differences in tables\");\n\n    for(i = 0; i < tbl[0].inTable; i++) {\n        if(tbl[0].primes[i] != tbl[1].primes[i]) {\n            printf(\"%u %lu %lu\", i, tbl[0].primes[i], tbl[1].primes[i]);\n            break;\n        }\n    }\n\n    if(i == tbl[0].inTable) {\n        puts(\"No differences have been found!\");\n    }\n\n    puts(\"--------------------\");\n    return 0;\n}\n```\n\n    ", "Answer": "\r\nDepending on input values, but if you want to get more efficient, a known solution is using the Sieve of Eratosthenes.\n\nThe sieve is similar to the concept of \"check if there is an odd divisor\" - why only odds? Because only even prime is 2. Similarly you could do it for 3,5 and any other prime number.\nThe sieve finds these prime dynamically, and discards all non primes that are influenced by each prime.\n\n\n\nIf you are looking for checking if a single huge number is prime, there is actually an efficient solution to it that runs in polynomial time of the number of bits representing the number (polynomial of the log of the number), which is known as AKS\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for mixing a number of variables\r\n                \r\nExample: I have the numbers form 1 to 10. All possible combinations, where in every combination every variable in included once without any repetition, are... well... 3628800 (10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 = 3628800).\n\nIn my case, the computer has to check ALL of the combinations, instead of picking random ones.  Afterwords, the system will store the needed combinations in an array. But I can't think of an algorithm and I can't find one in the internet (probably because I'm not searching the right way).\n\nWhat algorithm can I use for mixing a number of variables, where all of the combinations have no repeating variables?\n    ", "Answer": "\r\nYou can try a recursive approach for this.\n\nThe idea is to \"guess\" which number will be first, set it - and then recurse on the remaining of the array. If you do these \"guesses\" for all remaining elements, you get yourself all possible permutations.\n\nThis is a general case C code that prints all permutations for a given array (does not handle repeating value in the array):\n\n```\nvoid permute(int *array,int i,int length) { \n  if (length == i){\n     printArray(array,length);\n     return;\n  }\n  int j = i;\n  for (j = i; j < length; j++) { \n     swap(array+i,array+j);\n     permute(array,i+1,length);\n     swap(array+i,array+j);\n  }\n  return;\n}\n```\n\n\nIn this approach: pre-populate an array with your numbers: ```\n1,2,...,n```\n - and invoke the permutation algorithm on it.\n\nYou can see it with a simple test case including the ```\nprint()```\n and ```\nswap()```\n functions in ideone\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for finding if there's a \"common number\"\r\n                \r\nLet an array with the size of ```\nn```\n. We need to write an algorithm which checks if there's a number which appears at least ```\nn/loglogn```\n times.\n\nI've understood that there's a way doing it in ```\nO(n*logloglogn)```\n which goes something like this:\n\n\nFind the median using select algorithm and count how many times it appears. if it appears more than ```\nn/loglogn```\n we return ```\ntrue```\n. It takes ```\nO(n)```\n.\nPartition the array according the median. It takes ```\nO(n)```\n\nApply the algorithm on both sides of the partition (two ```\nn/2```\n arrays).\nIf we reached a subarray of size less than ```\nn/loglogn```\n, stop and return false.\n\n\nQuestions:  \n\n\nIs this algorithm correct?\nThe recurrence is: ```\nT(n) = 2T(n/2) + O(n)```\n and the base case is ```\nT(n/loglogn) = O(1)```\n. Now, the largest number of calls in the recurrence-tree is ```\nO(logloglogn)```\n and since every call is ```\nO(n)```\n then the time complexity is ```\nO(n*logloglogn)```\n. Is that correct?  \n\n    ", "Answer": "\r\nThe suggested solution works, and the complexity is indeed ```\nO(n/logloglog(n))```\n.\n\nLet's say a \"pass i\" is the running of all recursive calls of depth ```\ni```\n. Note that each pass requires ```\nO(n)```\n time, since while each call is much less than ```\nO(n)```\n, there are several calls - and overall, each element is processed once in each \"pass\".\n\nNow, we need to find the number of passes. This is done by solving the equation:\n\n```\nn/log(log(n))  = n / 2^x\n<->\nn/log(log(n)) * 2^x = n \n```\n\n\nAnd the idea is each call is dividing the array by half until you get to the predefined size of ```\nn/log(log(n))```\n.\n\nThis problem is indeed solved for x in ```\nO(n/log(log(log(n)))```\n, as you can see in wolfram alpha, and thus the complexity is indeed ```\nO(nlog(log(log(n))))```\n\n\nAs for correctness - that's because if an element repeats more than the required - it must be in some subarray with size greater/equals the required size, and by reducing constantly the size of the array, you will arrive to a case at some point where ```\n#repeats <= size(array) <= #repeats```\n - at this point, you are going to find this element as the median, and find out it's indeed a \"frequent item\".\n\nSome other approach, in ```\nO(n/log(log(n))```\n time - but with great constants is suggested by Karp-Papadimitriou-Shanker, and is based on filling a table with \"candidates\" while processing the array.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Advanced Algorithms Problems (\"Nice Triangle\"): Prime number Pyramid where every number depends on numbers above it\r\n                \r\nI'm currently studying for an advanced algorithms and datastructures exam, and I simply can't seem to solve one of the practice-problems which is the following:\n1.14) \"Nice Triangle\"\nA \"nice\" triangle is defined in the following way:\n\nThere are three different numbers which the triangle consists of, namely the first three prime numbers (2, 3 and 5).\nEvery number depends on the two numbers below it in the following way.\n\nNumbers are the same, resulting number is also the same. (2, 2 => 2)\nNumbers are different, resulting number is the remaining number. (2, 3 => 5)\n\n\n\nGiven an integer N with length L, corresponding to the base of the triangle, determine the last element at the top\nFor example:\nGiven N = 25555 (and thus L = 5), the triangle looks like this:\n```\n    2\n   3 5\n  2 5 5\n 3 5 5 5\n2 5 5 5 5\n```\n\n=> 2 is the result of this example\nWhat does the fact that every number is prime have to do with the problem?\nBy using a naive approach (simply calculating every single row), one obtains a time-complexity of O(L^2).\nHowever, the professor said, it's possible with O(L), but I simply can't find any pattern!!!\n    ", "Answer": "\r\nI'm not sure why this problem would be used in an advanced algorithms course, but yes, you can do this in O(l) = O(log n) time.\nThere are a couple ways you can do it, but they both rely on recognizing that:\n\nFor the problem statement, it doesn't matter what digits you use.  Lets use 0, 1, and 2 instead of 2, 3, and 5.  Then\nIf a and b are the input numbers and c is the output, then c = -(a+b) mod 3\nYou can build the whole triangle using c = a+b mod 3 instead, and then just negate every second row.\n\nNow the two ways you can do this in O(log n) time are:\n\nFor each digit d in the input, calculate the number of times (call it k) that it gets added into the final sum, add up all the kd mod 3, and then negate the result if you started with an even number of digits.  That takes constant time per digit.  Alternatively:\nrecognize that you can do arithmetic on n-sized values in constant time.  Make a value that is a bit mask of all the digits in n.  That takes 2 bits each.  Then by using bitwise operations you can calculate each row from the previous one in constant time, for O(log n) time altogether.\n\nHere's an implementation of the 2nd way in python:\n```\ndef niceTriangle(n):\n    # a vector of 3-bit integers mod 3\n    rowvec = 0\n    # a vector of 1 for each number in the row\n    onevec = 0\n    # number of rows remaining\n    rows = 0\n    # mapping for digits 0-9\n    digitmap = [0, 0, 0, 1, 1, 2, 2, 2, 2, 2]\n    # first convert n into the first row\n    while n > 0:\n        digit = digitmap[n % 10]\n        n = n//10\n        rows += 1\n        onevec = (onevec << 3) + 1\n        rowvec = (rowvec << 3) + digit\n\n    if rows%2 == 0:\n        # we have an even number of rows -- negate everything\n        rowvec = ((rowvec&onevec)<<1) | ((rowvec>>1)&onevec)\n\n    while rows > 1:\n        # add each number to its neighbor\n        rowvec += (rowvec >> 3)\n        # isolate the entries >= 3, by adding 1 to each number and\n        # getting the 2^2 bit\n        gt3 = ((rowvec + onevec) >> 2) & onevec\n        # subtract 3 from all the greater entries\n        rowvec -= gt3*3\n        rows -= 1\n    return [2,3,5][rowvec%4]\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to implement a natural sort algorithm in c++?\r\n                \r\nI'm sorting strings that are comprised of text and numbers. \nI want the sort to sort the number parts as numbers, not alphanumeric.\n\nFor example I want: abc1def, ..., abc9def, abc10def\n\ninstead of: abc10def, abc1def, ..., abc9def  \n\nDoes anyone know an algorithm for this (in particular in c++)\n\nThanks\n    ", "Answer": "\r\nI asked this exact question (although in Java) and got pointed to http://www.davekoelle.com/alphanum.html which has an algorithm and implementations of it in many languages.\nUpdate 14 years later: Dave Koelle’s blog has gone off line and I can’t find his actual algorithm, but here’s an implementation.\nhttps://github.com/cblanc/koelle-sort\nUpdate 14 years and 5 months after the original answer: In the comments, it was pointed out that Dave Koelle’s blog is on the wayback machine at https://web.archive.org/web/20210207124255/davekoelle.com/alphanum.html\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Given a number, find the next higher number which has the exact same set of digits as the original number\r\n                \r\nI just bombed an interview and made pretty much zero progress on my interview question.\n\nGiven a number, find the next higher number which has the exact same\nset of digits as the original number. For example: given 38276 return\n38627\n\nI wanted to begin by finding the index of the first digit (from the right) that was less than the ones digit. Then I would rotate the last digits in the subset such that it was the next biggest number comprised of the same digits, but got stuck.\nThe interviewer also suggested trying to swap digits one at a time, but I couldn't figure out the algorithm and just stared at a screen for like 20-30 minutes. Needless to say, I think I'm going to have to continue the job hunt.\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to encrypt data with no meta character in result using symmetric-key algorithms in PHP\r\n                \r\nI need a symmetric-key cryptography algorithm which return only Alphabet and Numbers in result without any meta character. Is there anything in PHP?\n    ", "Answer": "\r\nAssume you are using encrypt() and decrypt() as your encryption scheme and it spits out binary valued encryption. You can use:\n\n```\n$plaintext = \"My Super Secret\";\n$cryptbin = encrypt($plaintext, $mykey);\n$crypthex = bin2hex($cryptbin); // This is ascii\n// some code and you want to decrypt later...\n$cryptbin = hex2bin($crypthex);\n$plaintext = decrypt($cryptbin, $mykey);\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Why are primes important in cryptography?\r\n                \r\nOne thing that always strikes me as a non-cryptographer: Why is it so important to use prime numbers? What makes them so special in cryptography?\nDoes anyone have a simple short explanation? (I am aware that there are many primers and that Applied Cryptography is the Bible, but as said: I am not looking to implement my own cryptographic algorithm, and the stuff that I found just made my brain explode - no ten pages of math formulas please).\n    ", "Answer": "\r\nMost basic and general explanation: cryptography is all about number theory, and all integer numbers (except 0 and 1) are made up of primes, so you deal with primes a lot in number theory.\n\nMore specifically, some important cryptographic algorithms such as RSA critically depend on the fact that prime factorization of large numbers takes a long time. Basically you have a \"public key\" consisting of a product of two large primes used to encrypt a message, and a \"secret key\" consisting of those two primes used to decrypt the message. You can make the public key public, and everyone can use it to encrypt messages to you, but only you know the prime factors and can decrypt the messages. Everyone else would have to factor the number, which takes too long to be practical, given the current state of the art of number theory.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How can I make my program finish when there is no more std input in C++?\r\n                \r\nI am working on an algorithm, and I am asked to print \"QUIT\" when there is no more input to the program.\n\nI am using \n\n```\nchar c;\nwhile(c = getchar()){...} \n```\n\n\nbecause I need to look for ```\n'\\n'```\n characters and numbers.\n\nSo I copy the sample input and paste it on my program's to test it, but it keeps waiting for another input and therefore I get a time limit exceeded when I submit it.\n\nPS: I can't use multithreading.\n    ", "Answer": "\r\nYou can stop when ```\ngetchar()```\n returns ```\nEOF```\n, like this:\n\n```\nint c;\nwhile ((c = getchar()) != EOF) {...}\n```\n\n\nNote that ```\nc```\n needs to be declared an ```\nint```\n, not a ```\nchar```\n.\n\nTo make your program more C++-like, use operator ```\n>>```\n instead of ```\ngetchar```\n in a loop, like this:\n\n```\nchar c;\nwhile (cin >> c) {...} \n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Encryption Algorithm and bitwise parity\r\n                \r\nI am currently learning about encryption algorithms and working on problems. I am a little bit lost with this one here. I was wondering if anyone can give me some guidance. So far I know the initial parity definition is even parity but I am not sure how to proceed with the next steps. Thank you for any guidance. \n\n\"A simple hashing method divides the given data into integral number of bytes, padding with 1s to the lower order bits, if needed, to make the data integral multiple of bytes, and then computes bitwise parity of the bits in the bytes to come up with a byte-long hash code.\n\nWhat would be the hash code computed by this scheme for the following data in hex: \n0x000100010\n\nList another data item of same length which will have the same hash code. Is this a good hashing scheme? Explain your answer. \n\nParity Definition:  10101011  1, odd number of 1s gives a parity value of 1. \"\n    ", "Answer": "\r\nParity is pretty simple:  it just means to count the number of 1 bits in the value to see if it's an even or odd number.  In this case it looks like you're using even parity, which means that an odd number of 1s produces a parity value of 1 (so that the total number of 1 bits, including the parity, becomes even), and an even number of 1s produces a parity value of 0.  Even parity is equivalent to just XORing all the bits together.\n\nYour \"bitwise parity\" scheme sounds like you're supposed to take the value 0x000100010 (4.5 bytes) and expand it to 0x000100010F (5 bytes, with the low 4 bits being all 1), then split that into the 8-bit values 0x00, 0x01, 0x00, 0x01, and 0x0F, then bitwise-XOR all those together.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Python generate all possible strings of length n [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        What is the best way to generate all possible three letter strings? [duplicate]\r\n                            \r\n                                (8 answers)\r\n                            \r\n                    \r\n                Closed 6 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI am learning ethical hacking. I have the hash key of a password and the crypt algorithm (sha256/sha512). I want to parse all the strings from a file and to check if the hash of the password matches the hash of each of the string from the file.\n\nThe generated String may contain small letters, big letters and numbers.\n\nAny ideas how to generate all the possible Strings of length n which may contain letters and numbers?\n    ", "Answer": "\r\nHere's a piece of code that uses [Python 3.Docs]: itertools.product(*iterables, repeat=1). \nNote that the number of generated strings is ```\n62 ** length```\n, so for testing purposes use small values for length:\n\n```\nimport string\nimport itertools\n\n\ndef generate_strings(length=3):\n    chars = string.ascii_letters + string.digits  # \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    for item in itertools.product(chars, repeat=length):\n        yield \"\".join(item)\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Is this a good algorithm for listing prime numbers?\r\n                \r\n```\nDECLARE @c int = 1000;\nDECLARE @numbers  TABLE (n int NOT NULL PRIMARY KEY);\nDECLARE @products TABLE (p int NOT NULL PRIMARY KEY);\nDECLARE @primes   TABLE (p int NOT NULL PRIMARY KEY);\n\n-- The 'composite exclusion' approach\n\n-- 1. list all n = 2, 3, 4, ... c\nWITH numbers AS\n(\n    SELECT  2 AS n\n    UNION ALL\n    SELECT n + 1 FROM numbers\n    WHERE   n <= @c - 1\n)\nINSERT INTO @numbers SELECT n FROM numbers OPTION(MAXRECURSION 0);\n\n-- 2. find all products n x n <= c\nWITH products AS\n(\n    SELECT  DISTINCT m.n * n.n AS p\n    FROM    @numbers m LEFT OUTER JOIN\n            @numbers n ON 1 = 1\n    WHERE   m.n * n.n <= @c\n)\nINSERT INTO @products SELECT p FROM products;\n\n-- 3. numbers with no matching products are not composite, i.e, they're prime numbers.\nINSERT INTO @primes\nSELECT n.n FROM @numbers n LEFT JOIN @products p ON n.n = p.p WHERE p.p IS NULL;\n```\n\n\nIt's kind of a one pass Sieve of Eratosthenes approach.\n\nI've seen loops, stored procedures and the like, as well as pseudo-code and other language implementations, but it seems to me that this simple, set-based approach stemming from the definition of prime numbers should suffice.\n\nPlease bear in mind I'm not concerned with performance or memory consumption or optimizations at this time, and I have not tested it with larger numbers. I just want to publish the algorithm and have people confirm (or challenge) that excluding composite numbers from the list is enough.\n    ", "Answer": "\r\nRecursive CTEs (rCTE) are very rarely the best performing solution. Below is an approach that uses a tally table, it's a slightly tweaked version of the approach that Hugo Kornelis posted here: https://sqlserverfast.com/blog/hugo/2006/09/the-prime-number-challenge-great-waste-of-time/\n\nLet's compare the tally table solution to the rCTE solution:\n\n```\nSET STATISTICS TIME ON;\n\nPRINT 'tally table approach'+char(13)+char(10)+replicate('-',50);\nDECLARE @primes   TABLE (p int NOT NULL PRIMARY KEY);\nDECLARE @limit bigint = 10000;\n\nWITH E(x) AS (SELECT * FROM (VALUES (1),(1),(1),(1),(1),(1),(1),(1),(1),(1)) t(x)),\niTally(N) AS (SELECT TOP(@limit) ROW_NUMBER() OVER (ORDER BY (SELECT 1)) FROM E a, E b, E c, E d, E f)\nINSERT @primes\nSELECT      n1.N\nFROM        itally AS n1\nWHERE       n1.N > 1\nAND         n1.N < @Limit\nAND NOT EXISTS\n (SELECT    *\n  FROM      itally AS n2\n  WHERE     n2.N < @limit\n  AND       n2.N BETWEEN 2 AND n1.N-1\n  AND       n1.n % n2.N = 0)\n--ORDER BY N\nGO\n\nPRINT 'rCTE approach'+char(13)+char(10)+replicate('-',50);\nDECLARE @c int = 10000;\nDECLARE @numbers  TABLE (n int NOT NULL PRIMARY KEY);\nDECLARE @products TABLE (p int NOT NULL PRIMARY KEY);\nDECLARE @primes   TABLE (p int NOT NULL PRIMARY KEY);\n\nWITH numbers AS\n(\n    SELECT  2 AS n\n    UNION ALL\n    SELECT n + 1 FROM numbers\n    WHERE   n <= @c - 1\n)\nINSERT INTO @numbers SELECT n FROM numbers OPTION(MAXRECURSION 0);\n\n-- 2. find all products n x n <= c\nWITH products AS\n(\n    SELECT  DISTINCT m.n * n.n AS p\n    FROM    @numbers m LEFT OUTER JOIN\n            @numbers n ON 1 = 1\n    WHERE   m.n * n.n <= @c\n)\nINSERT INTO @products SELECT p FROM products;\n\n-- 3. numbers with no matching products are not composite, i.e, they're prime numbers.\nINSERT INTO @primes\nSELECT n.n FROM @numbers n LEFT JOIN @products p ON n.n = p.p WHERE p.p IS NULL;\n\nSET STATISTICS TIME OFF;\n```\n\n\nand the results:\n\n```\ntally table approach\n--------------------------------------------------\n\n SQL Server Execution Times:\n   CPU time = 3042 ms,  elapsed time = 3241 ms.\nSQL Server parse and compile time: \n   CPU time = 0 ms, elapsed time = 10 ms.\n\nrCTE approach\n--------------------------------------------------\n\n SQL Server Execution Times:\n   CPU time = 14976 ms,  elapsed time = 15757 ms.\n```\n\n\nAs you can see, the tally table approach against 10,000 was 5 times faster and also doesn't produce any reads (the rCTE produces a ton!)\n\nIf you are really working with prime numbers the absolute fastest approach would be to store them in a table so you don't need to calculate them each time you need prime numbers. \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for getting a special list of numbers [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs debugging details. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     Edit the question to include desired behavior, a specific problem or error, and the shortest code necessary to reproduce the problem. This will help others answer the question.\r\n                \r\n                    \r\n                        Closed 8 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI'm trying to find an algorithm in java for getting a special list of numbers. I tried writing my thoughts in code, but I feel my brain starting to melt... Maybe you can help me.\n\nThe algorithm should give me a list of all numbers:\n\n\nwith a setable length\nwith only numbers in a setable range\nwith each number appearing once or less\n\n\nSo if I set the length to 3 and the range of numbers to 0-4 it should start like this:\n\n```\n012\n013\n014\n021\n023\n024\n031\n032\n034\n041\n042\n043\n102\n103\n...\n```\n\n\nI know this is not a question for something I don't know, but I already spent an eternity with this algorithm and my brain starts hurting. Maybe I'm just thinking the wrong way...\n    ", "Answer": "\r\nBase X Numeral Systems!\n\nYou can interpret generate combinations of {...}x as count in base X\n\nYour question, rephrased: Enumerate base X numbers, up to the highest such number with n digits\n\nNaïve stab:\n\n```\nfor(int i = 0; i < Math.pow(5, 3); i++) {\n    System.out.println(Integer.toString(i, 5));\n}\n```\n\n\nNow, a few observations:\n\n\nYour example begins with \"012\", I'll assume that you actually meant \"000\"\nThe base in your example is \"4 + 1 = 5\"\nThe base in the general case is \"b - a + 1\", where your range is {a..b}\nThe symbols normally used to represent numbers in base X are the Arabic numerals 0..(X-1)\nThe symbols that you use in your number system are the Arabic numerals, from a to b\nNumbers do not have leading zeros, string representations of numbers do.\nThe highest number of length n in base X is Xn - 1\nYou can not customize String padding, so set width to n and replace ' ' with a\n\n\nTo generate your list of Strings:\n\n\nFind the base of your number system\nCount from 0 to Xn-1\nGenerate a base X representation of each number\nAdd a to all symbols in the generated representation\nPad the string on the left with a\n\n\nCode!\n\n```\npublic static void main(String[] args) {\n    for(String s : generate(3, 0, 4)) {\n        System.out.println(s);\n    }\n}\n\nprivate static List<String> generate(int n, int a, int b) {\n    List<String> numbers = new ArrayList<>();\n    int base = b - a + 1;                        // (1)\n    for(int i = 0; i < Math.pow(base, n); i++) { // (2)\n        String s = Integer.toString(i, base);    // (3)\n        s = substituteSymbols(s, a);             // (4)\n        s = String.format(\"%\" + n + \"s\", s);     // (5)...\n        s = replacePadding(a, s);                // ...(5)\n\n        numbers.add(s);\n    }\n    return numbers;\n}\n\nprivate static String substituteSymbols(String s, int a) {\n    char[] digits = s.toCharArray();\n    StringBuilder sb = new StringBuilder();\n    for(int c = 0; c < digits.length; c++) {\n        int val = Character.getNumericValue(digits[c]) + a;\n        sb.append(Character.forDigit(val, Character.MAX_RADIX));\n    }\n    return sb.toString();\n}\n\nprivate static String replacePadding(int a, String s) {\n    return s.replace(' ', Character.forDigit(a, Character.MAX_RADIX));\n}\n```\n\n\nNote:\n\n\nYou could also stick to the naïve stab and discard Strings containing digits less than a\nA robust solution should handle invalid arguments\nA generic solution should not assume alphanumeric symbols\nThis solution will create unnecessary garbage due to all new Strings\nIf the base is higher than Character.MAX_RADIX, base 10 will be used\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Questions on the Concepts of Sorting Algorithms\r\n                \r\nI'm currently learning how to program with Java, so I'm taking a class on Data Structures and whatnot. Recently, we've been covering the concepts of Sorting Algorithms, and from the start I've been very much confused about the concept as a whole. \n\nWe've been given an assignment recently on Sorting Algorithms, and one of the questions looks like this:\n\n\n  Closest 1d pair. Given a sequence of N real numbers, find the pair of integers that are closest in value. Give a O(N log N) algorithm.  Describe your proposed algorithm in English.\n\n\nBasically, what I'm trying to ask is this: Can someone explain to me the general idea of Sorting Algorithms and their purpose as a whole, as well as walk me through how I would go about answering this question? You don't have to give me an answer, I just am looking to acquire the knowledge necessary for answering this question.\n\nThank you.\n    ", "Answer": "\r\nThe idea of sorting is that in a sorted structure (e.g array, list, or balanced tree), you can find s specific element in log N operations.  (Using e.g binary search in arrays)\nIf the list is not sorted you would need N/2 operations on average.\n\nAltough common, the term \"log N\", is not very precise, correctly it is \"ld N\" or log2 (ld: logarithmus dualis, or logarithmus on base 2). log normally stands for log on base10.\nIn computer science, nearly ever log(N) means log2(N)\n\nSo a sorted list speeds up your algorithm, espcially if you have to search more than a few times.\n\nIn your case:\nIf the sequence is sorted, then then one of the candidate pairs is constructed by looking at the previous and next element in the sequence.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Given a RNG algorithm and a series of numbers is it possible to determine what seed would produce the series?\r\n                \r\nThe code is in Objective C but it should be understandable if you look it over even if you don't know Objective C. Basically its a RNG object, you instantiate a new instance, set the seed if you want and start grabbing random numbers.\n\nSo is it possible to backtrack a given series of numbers to determine the seed used to generate the numbers? I'm guessing any given algorithm can't generate just any random set of numbers though, or can it?\n\nSay I do the following:\n\n```\nrng.seed = 1024;\nfor (int i=1; i<11; i++)\n    DLog(@\"%lu\", [rng randomBetween:0 and:10]);\n```\n\n\nWhich gives me the sequence ```\n10, 10, 8, 10, 2, 10, 9, 9, 7, 4```\n. Is there some method or algorithm I could use, given the sequence, to get the number 1024? I know thats the valid sequence for the seen 1024, but what is I just make up a sequence... ```\n10, 1, 9, 6, 3, 9, 10, 3, 5, 2```\n. Is there a way to know if that is a valid sequence for this algorithm and if so what the seed is?\n\nRNG.h:\n\n```\n@interface RNG : NSObject\n@property (assign) unsigned long seed;\n- (unsigned long)random;\n- (long)randomBetween: (long)min and: (long)max;\n@end\n```\n\n\nRNG.m:\n\n```\n#define A 16807         /* a relatively prime number -- also M div Q */\n#define M 2147483647L   /* 0xFFFFFFFF / 2 */\n#define Q 127773L       /* M div A */\n#define R 2836          /* M mod A */\n\n@implementation RNG\n@synthesize seed = _seed;\n\n- (id)init {\n    self = [super init];\n    if (self) {\n        self.seed = 0;\n    }\n    return self;\n}\n\n\n- (unsigned long)random {\n    self.seed = A * (self.seed % Q) - R * (self.seed / Q);\n    if (self.seed > M)\n        return (self.seed -= M);\n    else if (self.seed)\n        return (self.seed);\n    else\n        return (self.seed = 1L);\n}\n\n\n- (long)randomBetween: (long)min and: (long)max {\n    return ([self random] % (max - min + 1) + min);\n}\n\n\n- (void)seed: (unsigned long)new_seed {\n    if (new_seed == 0)\n        new_seed = 1;\n    while (new_seed > M)\n        new_seed -= M;\n\n    self.seed = new_seed;\n}\n@end\n```\n\n    ", "Answer": "\r\nThis looks like a \"Linear congruential generator\", see http://en.wikipedia.org/wiki/Linear_congruential_generator\" ?\n\nThese offer no good cryptographic security, so yes, it should be possible to compute a seed that produces the sequence.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to find Number of Factors of \"product of numbers\"\r\n                \r\nI m trying to find number of factors of product of big numbers.\n\nThe problem statement is this : Suppose you are given N numbers(let say N = 10), each number <= 1000000.\nHow to find the number of factors of the product of such numbers.\n\nCan someone please provide an efficient algorithm for doing this.\n\nExample :\n\n1) N = 3 and Numbers are 3, 5, 7\n\nAns = 8 (1, 3, 5, 7, 15, 21, 35, 105)\n\n2) N = 2 and Numbers are 5, 5\n\nAns = 3 (1, 5 and 25)\n    ", "Answer": "\r\nEditorial for the problem is here \n\nhttp://discuss.codechef.com/questions/15943/numfact-editorial\n\n```\nint total = 0, N = 0, Number;\nscanf (\"%d\", &total);\nwhile (total--)\n{\n    scanf (\"%d\", &N);\n    map<int, int> Counter;\n    for (int i = 0; i < N; i++)\n    {\n        scanf (\"%d\", &Number);\n        for (int j = 2; j * j <= Number; j++)\n        {\n            while (Number % j == 0)\n            {\n                Counter[j]++;\n                Number /= j;\n            }\n        }\n        if (Number > 1) Counter[Number]++;\n    }\n    int Answer = 1;\n    for (map<int, int>::iterator it = Counter.begin(); it != Counter.end(); it++)\n        Answer *= (it->second + 1);\n    printf (\"%d\\n\", Answer);\n}\n```\n\n\nThis got Accepted. \n\nSample Inputs and Outputs:\n\n```\n7\n3\n3 5 7\n3\n2 4 6\n2\n5 5\n10\n2 2 2 2 2 2 2 2 2 2 \n1\n100\n10\n10000 10000 10000 10000 10000 10000 10000 10000 10000 10000\n10\n1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 \n\n8\n10\n3\n11\n9\n1681\n3721\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Is there maximum number of noise/ outliers in DBSCAN algorithm?\r\n                \r\nI did clustering on spatial datasets using DBSCAN algorithm and generating a lot of noise 193000 of 250000 data. is that a reasonable amount?\n    ", "Answer": "\r\nDepends on your data and problem.\n\nIf I generate random coordinates, 100% noise would be appropriate because the data is random noise.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Problems with recursive algorithms and Spark DataFrames\r\n                \r\nIf you want to do anything interesting with Graphs -- whether with ```\nGraphX```\n or the new ```\nGraphFrames```\n -- you end up doing recursive algorithms. The problem I am having is that when using ```\nDataFrames```\n each iteration of the algorithm takes longer and longer, and more execution stages get kicked off per iteration. I'm more of a functional Spark user -- I can make things happen but don't have a full grasp of what happens under the hood. But my guess is that the lineage chain keeps extending, and without breaking the lineage chain, the earlier iterations get re-calculated with each step. So iteration 1 does iteration 1; iteration 2 does iteration 1 again, then iteration 2; iteration 3 has to do 1, then 2 again, etc.\n\nSo my first question: Is that really what's happening, more or less?\n\nTo test it, I've been playing with ```\nRDD.checkpoint```\n. It seems to help, but I can't really prove it. So that's my second question -- tell me if the way I use ```\ncheckpoint```\n is helping or not.\n\nLastly, it would be great to hear about other possible solutions. Maybe Spark isn't even the right answer. I'm open to anything.\n\nTo test all of this, I have been using a simple algorithm to polyfill vertex attributes -- a sort of attribute inheritance. Given a graph like this:\n\n```\nval nodes = Seq(\n    (1L, Option(1L), Option(1L)),\n    (2L, None, Option(2L)),\n    (3L, Option(2L), None),\n    (4L, None, None)\n).toDF(\"id\",\"inputType\",\"recurrence\")\n\nval edges = Seq(\n    (1L, 2L, \"parent\"),\n    (2L, 4L, \"parent\"),\n    (1L, 3L, \"parent\")\n).toDF(\"src\",\"dst\",\"type\")\n```\n\n\nOnce I polyfill missing attributes in the vertices, I should get something like this:\n\n```\n+---+---------+----------+\n| id|inputType|recurrence|\n+---+---------+----------+\n|  1|        1|         1|\n|  2|        1|         2|\n|  3|        2|         1|\n|  4|        1|         2|\n+---+---------+----------+\n```\n\n\nVertex ```\n1L```\n is the parent, and the other vertices have inherited missing attributes from the parent, following the chain upwards if needed.\n\nThe algorithm actually isn't very complicated -- I'm going to use my own cobbled-together DataFrame / Graph algorithms instead of ```\nGraphFrames```\n.\n\nFirst, I'll define a function to create edge triplets out of nodes and edges:\n\n```\nimport org.apache.spark.sql.DataFrame\ndef triplets(vertices: DataFrame, edges: DataFrame) : DataFrame = {\n  edges.toDF(edges.columns.map(c => \"edge_\" + c):_*)\n    .join(vertices.toDF(vertices.columns.map(c => \"src_\" + c):_*), col(\"edge_src\") === col(\"src_id\"))\n    .join(vertices.toDF(vertices.columns.map(c => \"dst_\" + c):_*), col(\"edge_dst\") === col(\"dst_id\"))\n}\n```\n\n\nBased on the data above, ```\ntriplets(nodes,edges)```\n shows:\n\n```\n+--------+--------+---------+------+-------------+--------------+------+-------------+--------------+\n|edge_src|edge_dst|edge_type|src_id|src_inputType|src_recurrence|dst_id|dst_inputType|dst_recurrence|\n+--------+--------+---------+------+-------------+--------------+------+-------------+--------------+\n|       1|       2|   parent|     1|            1|             1|     2|         null|             2|\n|       1|       3|   parent|     1|            1|             1|     3|            2|          null|\n|       2|       4|   parent|     2|         null|             2|     4|         null|          null|\n+--------+--------+---------+------+-------------+--------------+------+-------------+--------------+\n```\n\n\nSo far so good, now a recursive function to polyfill ```\nnull```\n values down the hierarchy:\n\n```\ndef fillVertices(vertices: DataFrame, edges: DataFrame) : (DataFrame, DataFrame) = {\n  val vertexAttributes = vertices.columns.filter(c => c != \"id\")\n  val edgeAttributes = edges.columns.filter(c => (c != \"src\" && c != \"dst\"))\n\n  val messages = triplets(vertices,edges).select(\n    Seq(col(\"edge_src\"), col(\"edge_dst\")) ++ vertexAttributes.map(attr => when(col(\"src_\" + attr).isNotNull && col(\"dst_\" + attr).isNull, col(\"src_\" + attr)) as \"msg_\" + attr):_*\n  ).filter(\n    vertexAttributes.map(attr => col(\"msg_\" + attr).isNotNull).fold(lit(false)){ (a,b) => a || b }\n  ).groupBy(col(\"edge_dst\") as \"msg_dst\")\n   .agg(max(col(\"msg_\" + vertexAttributes(0))) as (\"msg_\" + vertexAttributes(0)), vertexAttributes.slice(1,vertexAttributes.length).map(c => max(col(\"msg_\" + c)) as (\"msg_\" + c)):_*)\n\n  if (! messages.rdd.isEmpty) {\n    val newVerts = vertices.join(messages, col(\"id\") === col(\"msg_dst\"), \"left_outer\").select(Seq(col(\"id\")) ++ vertexAttributes.map(c => coalesce(col(c), col(\"msg_\" + c)) as c):_*)\n    fillVertices(newVerts, edges)\n  }\n  else (vertices,edges)\n}\n```\n\n\nIf you do ```\nfillVertices(nodes,edges)._1.show```\n it will indeed show the correct results -- all the nodes have their ```\nnull```\n values correctly populated. However, it takes a ridiculous amount of computational stages.\n\nAgain note that this is very similar behavior to what I have seen with ```\nGraphFrames```\n -- I don't think it's specific to what I am doing, but rather a general problem with recursive algorithms in Spark.\n\nLike I said, I have tried checkpointing the underlying ```\nRDD```\n and it seems to help. I use this to checkpoint a ```\nDataFrame```\n:\n\n```\nsc.setCheckpointDir(\"/your/checkpoint/dir\")\ndef dfCheckpoint(df: DataFrame) : DataFrame = {\n  df.rdd.checkpoint\n  if (df.rdd.count > 0) {\n    df.sqlContext.createDataFrame(df.rdd, df.schema)\n  }\n  else df\n}\n```\n\n\nThen to test it side by side, here's the same algorithm as above, except that the newly created node ```\nDataFrame```\n gets checkpointed before it is returned.\n\n```\ndef fillVerticesCheckpoint(vertices: DataFrame, edges: DataFrame) : (DataFrame, DataFrame) = {\n  val vertexAttributes = vertices.columns.filter(c => c != \"id\")\n  val edgeAttributes = edges.columns.filter(c => (c != \"src\" && c != \"dst\"))\n\n  val messages = triplets(vertices, edges).select(\n    Seq(col(\"edge_src\"), col(\"edge_dst\")) ++ vertexAttributes.map(attr => when(col(\"src_\" + attr).isNotNull && col(\"dst_\" + attr).isNull, col(\"src_\" + attr)) as \"msg_\" + attr):_*\n  ).filter(\n    vertexAttributes.map(attr => col(\"msg_\" + attr).isNotNull).fold(lit(false)){ (a,b) => a || b }\n  ).groupBy(col(\"edge_dst\") as \"msg_dst\")\n   .agg(max(col(\"msg_\" + vertexAttributes(0))) as (\"msg_\" + vertexAttributes(0)), vertexAttributes.slice(1,vertexAttributes.length).map(c => max(col(\"msg_\" + c)) as (\"msg_\" + c)):_*)\n\n  if (! messages.rdd.isEmpty) {\n    val newVerts = vertices.join(messages, col(\"id\") === col(\"msg_dst\"), \"left_outer\").select(Seq(col(\"id\")) ++ vertexAttributes.map(c => coalesce(col(c), col(\"msg_\" + c)) as c):_*)\n    fillVerticesCheckpoint(dfCheckpoint(newVerts), edges)\n  }\n  else (vertices, edges)\n}\n```\n\n\nNow if you do ```\nfillVerticesCheckpoint(nodes,edges)._1.show```\n it completes a lot faster. There seem to be a lot fewer stages. I don't know how to quantify it, but it seems like the checkpoint version has 1/3 the number of stages as the non checkpointed.\n\nBased on what I'm seeing, then, I'm guessing the answer to my first question is, yes, this is a lineage issue. The answer to my second question seems to be yes, checkpointing makes it better. But it would be great to have confirmation on these two.\n\nAs to my last point, other ways to solve the same problem, the only think I can think of is to essentially create my own checkpoint by saving ```\nDataFrames```\n to ```\nParquet```\n files between each iteration. Anybody got anything else?\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Stuck on Project Euler # 10\r\n                \r\nI'm very new to Algorithms and just started coding a while ago. Please help me out with this problem from Project Euler: \n\n\n  The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n  \n  Find the sum of all the primes below two million.\n\n\nI tried reading up about Sieve Algorithms and after understanding the concept implemented it.\n\n```\ndef SieveofEratosthenes(n):\n    prime = [True for i in range(n+1)]\n    p = 2\n    while(p*p <= n):\n        if(prime[p] == True):\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n        p+=1 \n        for p in range(2, n):\n            if prime[p]:\n                print(p),\n\n#Driver Program\nif __name__=='__main__':\n    n=2000000\n    print('Following are the prime numbers smaller than or equal to', n)\n    SieveofEratosthenes(n)\n```\n\n\nThe problem is that it's taking way too long. It took 7.8sec on my machine.\nPlus how do I add all these numbers? What's the better way to handle it?\n    ", "Answer": "\r\nHere is your answer:\n\n```\ndef SieveofEratosthenes(n):\n    prime = [True for i in range(n+1)]\n    p = 2\n    while p*p <= n:\n        if prime[p]:\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n        p += 1\n    return prime\n\n\n#Driver Program\nif __name__=='__main__':\n    n = 2000000\n    print('Following is the sum of the prime numbers smaller than or equal to', n)\n    primes = SieveofEratosthenes(n)\n    sum_all = sum(p for p in range(2, n) if primes[p])\n    print(sum_all)\n```\n\n\nIt prompts:\n\n```\n>>> Following is the sum of the prime numbers smaller than or equal to 2000000\n>>> 142913828922\n```\n\n\nSome remarks\n\n\nTry to split functionality in the future: one function for getting the prime numbers and another for printing.\nIn python, ```\nif foo == True```\n could be written just like ```\nif foo```\n\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Suggesting Implementation of an Algorithm on FPGA [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 8 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nAs a course project, I have to implement an algorithm on FPGA. Currently I'm considering arithmetic algorithms and ideas like implementation of 4 basic operators for floating point numbers come to mind. As I'm new to such topics I'd be thankful if anyone suggests an algorithm which is worthwhile for implementing.\n    ", "Answer": "\r\nYour question is very vague, and there are infinite algorithms you could implement. Some suggestions with different difficulty level:\n\nVery easy\n\n\nAudio volume control.\nAudio echo.\n\n\nThese are technically not \"worthwhile\" implementing in hardware, but audio stuff usually makes for impressive live demonstrations. Even if the algorithm is very easy.\n\nEasy\n\n\nFIR or IIR filters (low pass, high pass, band pass, ...)\nCRC\nChecksum\n\n\nThese algorithms are implemented in hardware all the time. They are very typical examples. Yet still quite easy to implement.\nIf you start out with audio volume control or echo, you can later add filters to make it a little bit more advanced.\n\nMedium/hard\n\n\nVarious encryption algorithms, SHA, AES, ...\nFFT\nJPEG compression\n\n\nRegarding floating point algorithms: You typically would never use floating point math in an FPGA unless you absolutely have to.\nAll algorithms which are possible to do with fixed point math, should be implemented in fixed point math.\nYou would also never use division in an FPGA, unless you absolutely have to. It is desirable to replace all divisions with multiplications whenever possible.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Finding a nonzero integer x where x == -x?\r\n                \r\nIn a course on algorithms and data structures at my university, I received this question:\n\n\n  Which integer has the same bit-pattern as his negative value?\n  \n  Means: x == -x\n\n\nI know that 0 works, but I suspect that the instructor was looking for some other number x. What x is it? How would you find it?\n    ", "Answer": "\r\nInteger.MIN_VALUE and Long.MIN_VALUE have no equivalent positive value and when you take the negative value of these, you get the same value.\n\nNegative is the same as flipping all the bits and adding one. i.e.\n\n```\n-x = ~x + 1\n```\n\n\nSo -0x80000000 = 0x7fffffff + 1 = 0x8000000\n\nNote: Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE which is negative.  This is outlined in the javadoc for this method.\n\nTechnically there are many answers and types\n\n```\nbyte x = 0;\nshort x = 0;\nchar x = 0;\nint x = 0;\nint x = Integer.MIN_VALUE;\nfloat x = 0.0f;\nfloat x = -0.0f;\nlong x = 0;\nlong x = Long.MIN_VALUE;\ndouble x = 0.0;\ndouble x = -0.0;\nByte x = 0;\nShort x = 0;\nCharacter x = 0;\nInteger x = 0;\nInteger x = Integer.MIN_VALUE;\nFloat x = 0.0f;\nFloat x = -0.0f;\nLong x = 0L;\nLong x = Long.MIN_VALUE;\nDouble x = 0.0;\nDouble x = -0.0;\n```\n\n\n\n\nA similar Java Puzzler is; when is the following expression ```\ntrue```\n.\n\n```\nx != x + 0\n```\n\n\n\n\nEDIT: Floating point has both ```\n+0.0```\n and ```\n-0.0```\n.  A such you might consider ```\n-0.0```\n a different value to ```\n0.0```\n although it is the case that ```\n-0.0 == -(-0.0)```\n\n\nNote: ```\nDouble.compare(0.0, -0.0) > 0```\n\nNote:\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Python Cluster connnected elements with n to m relationship\r\n                \r\nThis is not a homework task (please see my profile). I do not have a computer science background and this question came up in an applied machine learning problem. I am pretty sure that I am not the first person to have this problem, hence I am looking for an elegant solution. I will preferre a solution using a python library over raw implementations.\nAssume we have a dictionary connecting letters and numbers as input\n```\nconnected = {\n    'A': [1, 2, 3],\n    'B': [3, 4],\n    'C': [5, 6],\n}\n```\n\nEach letter can be connected to multiple numbers. And one number can be connected to multiple letters. But each letter can only be connected to a number once.\nIf we look at the dictionary we realize, that the number ```\n3```\n is connected with the letter ```\n'A'```\n and the letter ```\n'B'```\n hence we can put ```\n'A'```\n and ```\n'B'```\n into a cluster. The numbers of the letter ```\n'C'```\n are not present in the other letters. Hence, we cannot cluster the letter ```\n'C'```\n any further. And the expected output should be\n```\ncluster = {\n    '1': {\n        'letters': ['A', 'B'],\n        'numbers': [1, 2, 3, 4], \n    },\n    '2': {\n        'letters': ['C'],\n        'numbers': [5, 6],\n    }\n}\n```\n\nI think this should be related to graph algorithms and connected subgraphs but I do not know where to start.\n    ", "Answer": "\r\nUsing a union-find structure you can solve this efficiently in ```\nO(num letters + num numbers)```\n. The key idea is that you can just connect letters to their list of numbers. Once you do this for all letters, you automatically have unions (i.e. clusters) of desired property.\n```\nclass UnionFind:\n    def __init__(self):\n        self.id = {}\n        self.size = {}\n\n    def find(self, a):\n        cur = a\n        path = []\n        while self.id[cur] != cur:\n            path.append(cur)\n            cur = self.id[cur]\n        for x in path:\n            self.id[x] = cur\n        return cur\n\n    def union(self, a, b):\n        if a not in self.id:\n            self.id[a] = a\n            self.size[a] = 1\n        if b not in self.id:\n            self.id[b] = b\n            self.size[b] = 1\n\n        roota, rootb = self.find(a), self.find(b)\n        if roota != rootb:\n            if self.size[roota] > self.size[rootb]:\n                roota, rootb = rootb, roota\n            self.id[roota] = rootb\n            self.size[rootb] += self.size[roota]\n\nif __name__ == \"__main__\":\n    from collections import defaultdict\n\n    uf = UnionFind()\n    connected = {\n        'A': [1, 2, 3],\n        'B': [3, 4],\n        'C': [5, 6],\n    }\n    for letter, numbers in connected.items():\n        for number in numbers:\n            uf.union(letter, number)\n    \n    clusters = defaultdict(list)\n    for key, cluster_id in uf.id.items():\n        clusters[cluster_id].append(key)\n    \n    formatted_clusters = {}\n    for i, cluster_elements in enumerate(clusters.values()):\n        letters = [e for e in cluster_elements if isinstance(e, str)]\n        numbers = [e for e in cluster_elements if not isinstance(e, str)]\n        key = str(i+1)\n        formatted_clusters[key] = {\n            \"letters\": letters,\n            \"numbers\": numbers\n        }\n    print(formatted_clusters)\n```\n\nOutput:\n```\n{'1': {'letters': ['A', 'B'], 'numbers': [1, 2, 3, 4]}, '2': {'letters': ['C'], 'numbers': [5, 6]}}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Number Theory Transform recursive algorithm\r\n                \r\nI was studying the Fast Fourier transform and Number theory Transform, I fully understood the FFT recursive code, I need NTT code to work with, but everywhere I see, its iterative code, but for learning purpose I need the recursive code of it. \n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Modelica Algorithm and equation- number of variables and equations\r\n                \r\nI am trying to build input/output connectors as interfaces and add them in a wrapper class that wraps a model. The variables of the connectors are defined using conditional declaration. when I instantiate the output connector in the wrapper class, I can compile the class successfully in Dymola when I use an \"equation\" section. but when I change it to an \"algorithm\" section I got an error that:\n\n```\nIt has 2 scalar unknowns and 5 scalar equations.\nThe Real part has 2 unknowns and 2 equations.\nThe Integer part has 0 unknowns and 2 equations.\nThe Boolean part has 0 unknowns and 0 equations.\nThe String part has 0 unknowns and 1 equations.\n```\n\n\nI have trouble understanding this error. I know the general difference between an algorithm section and an equation section but cannot relate my knowledge to the error that I am getting. I created a small example of what I am trying to compile: \n\nhere are the connector definitions: \n\n```\nconnector DO\n/**/\nparameter String Type;\nparameter input Integer[:] Dim;\ndiscrete output Real ScalarReal if Type == \"Real\" and size(Dim, 1) == 1 and          Dim[1] == 1 \"Scalar Real\";\ndiscrete output Real[Dim[1],Dim[2]] MatrixReal if Type == \"Real\" and  size(Dim, 1) > 1 \"Matrix Real\";\n\nend DO;\n\nconnector DI\nparameter String Type;\nparameter input Integer[:] Dim;\ndiscrete input Real ScalarReal if Type == \"Real\" and size(Dim, 1) == 1 and Dim[1] == 1 \"Scalar Real\";\ndiscrete input Real[Dim[1],Dim[2]] MatrixReal if Type == \"Real\" and size(Dim, 1) > 1 \"Matrix Real\";\nend DI;\n\nconnector Conn\n parameter input Integer nOut(min = 0) = 0;\n parameter input Integer nIn(min = 0) = 0;\n DI[nIn] InConn if nIn > 0;\n DO[nOut] OutConn if nOut > 0;\n end Conn;\n```\n\n\nand the wrapper model \n\n```\nmodel Wrapper\nConn testConn(nIn = 0, nOut = 1, OutConn(Type = {\"Real\"}, Dim = {{2,1}}));\nequation \nwhen sample(0,10) then\n  testConn.OutConn[1].MatrixReal = [2; 3];\nend when;\nend Wrapper;\n```\n\n\nCan anyone help me with this problem? \nThanks a lot!\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Efficiency of Sort Algorithms\r\n                \r\nI am studying up for a pretty important interview tomorrow and there is one thing that I have a great deal of trouble with: Sorting algorithms and BigO efficiencies.\n\nWhat number is important to know? The best, worst, or average efficiency?\n    ", "Answer": "\r\nworst, followed by average. be aware of the real-world impact of the so-called \"hidden constants\" too - for instance, the classic quicksort algorithm is O(n^2) in the worst case, and O(n log n) on average, whereas mergesort is O(n log n) in the worst case, but quicksort will outperform mergesort in practice. \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "C++: HeapSort function outputting wrong numbers\r\n                \r\nI'm relatively new to C++/Algorithms, and I'm not quite sure what's wrong with my heapSort function. Given the numbers (6, 2, 9, 1, 5), I am outputting the following incorrect numbers:\n\n\n  9\n  4197040\n  2\n  4196422\n  6\n\n\nThanks for looking.\n\n```\n#include <iostream>\n\nusing namespace std;\n\nvoid heapSort(int arr [], int size);\nvoid reheapDown(int arr[], int root, int bottom);\nvoid swap(int & num1, int & num2);\n\nint main()\n{\n   int arr[5] = {6, 2, 9, 1, 5};\n\n   heapSort(arr, 5);\n\n   for (int i = 0; i < 5; i++)\n   cout << arr[i] << endl;\n\n   return 0;\n}\n\nvoid heapSort(int arr [], int size){\n\n    int i;\n\n    for (i = size/2 -1; i >= 0; i--)\n    reheapDown(arr, i, size-1);\n\n    for (i = size - 1; i >= 1; i--){\n    swap(arr[0], arr[i]);\n    reheapDown(arr, 0, i-1);\n\n    }\n\n}\n\nvoid reheapDown(int arr[], int root, int bottom){\n\n    int max, right, left;\n\n    left = root * 2 + 1;\n    right = root * 2 + 2;\n\n    if (left <= bottom)\n\n        max = left;\n\n    else{\n        if (arr[left] <= right)\n        max = right;\n        else\n        max = left;\n    }\n    if (arr[root] < arr[max]){\n\n        swap(arr[root], arr[max]);\n        reheapDown(arr, max, bottom);\n    }\n}\n\nvoid swap(int & num1, int & num2){\n\n    int temp;\n\n    temp = num1;\n    num1 = num2;\n    num2 = temp;\n\n}\n```\n\n    ", "Answer": "\r\nAt least one problem is that you are accessing out of bounds:\n\n```\nvoid reheapDown(int arr[], int root, int bottom){\n\n    int max = 0;\n\n    int left = root * 2 + 1;\n    int right = root * 2 + 2;\n\n\n    if (left <= bottom)\n        max = left;\n    else{\n        if (left < 0){\n            throw std::runtime_error(\"Uh oh, left is less than zero\");\n        }\n        if (left > 4){\n            throw std::runtime_error(\"Uh oh, left is greater than 4\");\n        }\n\n        if (arr[left] <= right)\n            max = right;\n        else\n        max = left;\n    }\n    if (arr[root] < arr[max]){\n        if (root < 0){\n            throw std::runtime_error(\"Uh oh, root is less than zero\");\n        }\n        if (root > 4){\n            throw std::runtime_error(\"Uh oh, root is greater than 4\");\n        }\n        if (root < 0 || root > 4){\n            throw std::runtime_error(\"Uh oh\");\n        }\n        swap(arr[root], arr[max]);\n        reheapDown(arr, max, bottom);\n    }\n}\n```\n\n\nWill output:\n\n```\nterminate called after throwing an instance of 'std::runtime_error'\n  what():  Uh oh, left is greater than 4\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to find which number in a list sum up to a certain number\r\n                \r\nI have a list of numbers. I also have a certain sum. The sum is made from a few numbers from my list (I may/may not know how many numbers it's made from). Is there a fast algorithm to get a list of possible numbers? Written in Python would be great, but pseudo-code's good too. (I can't yet read anything other than Python :P )\n\nExample\n\n```\nlist = [1,2,3,10]\nsum = 12\nresult = [2,10]\n```\n\n\nNOTE: I do know of Algorithm to find which numbers from a list of size n sum to another number (but I cannot read C# and I'm unable to check if it works for my needs. I'm on Linux and I tried using Mono but I get errors and I can't figure out how to work C# :(\nAND I do know of algorithm to sum up a list of numbers for all combinations (but it seems to be fairly inefficient. I don't need all combinations.)\n    ", "Answer": "\r\nThis problem reduces to the 0-1 Knapsack Problem, where you are trying to find a set with an exact sum. The solution depends on the constraints, in the general case this problem is NP-Complete.\n\nHowever, if the maximum search sum (let's call it ```\nS```\n) is not too high, then you can solve the problem using dynamic programming. I will explain it using a recursive function and memoization, which is easier to understand than a bottom-up approach.\n\nLet's code a function ```\nf(v, i, S)```\n, such that it returns the number of subsets in ```\nv[i:]```\n that sums exactly to ```\nS```\n. To solve it recursively, first we have to analyze the base (i.e.: ```\nv[i:]```\n is empty):\n\n\nS == 0: The only subset of ```\n[]```\n has sum 0, so it is a valid subset. Because of this, the function should return 1.\nS != 0: As the only subset of ```\n[]```\n has sum 0, there is not a valid subset. Because of this, the function should return 0.\n\n\nThen, let's analyze the recursive case (i.e.: ```\nv[i:]```\n is not empty). There are two choices: include the number ```\nv[i]```\n in the current subset, or not include it. If we include ```\nv[i]```\n, then we are looking subsets that have sum ```\nS - v[i]```\n, otherwise, we are still looking for subsets with sum ```\nS```\n. The function ```\nf```\n might be implemented in the following way:\n\n```\ndef f(v, i, S):\n  if i >= len(v): return 1 if S == 0 else 0\n  count = f(v, i + 1, S)\n  count += f(v, i + 1, S - v[i])\n  return count\n\nv = [1, 2, 3, 10]\nsum = 12\nprint(f(v, 0, sum))\n```\n\n\nBy checking ```\nf(v, 0, S) > 0```\n, you can know if there is a solution to your problem. However, this code is too slow, each recursive call spawns two new calls, which leads to an O(2^n) algorithm. Now, we can apply memoization to make it run in time O(n*S), which is faster if ```\nS```\n is not too big:\n\n```\ndef f(v, i, S, memo):\n  if i >= len(v): return 1 if S == 0 else 0\n  if (i, S) not in memo:  # <-- Check if value has not been calculated.\n    count = f(v, i + 1, S, memo)\n    count += f(v, i + 1, S - v[i], memo)\n    memo[(i, S)] = count  # <-- Memoize calculated result.\n  return memo[(i, S)]     # <-- Return memoized value.\n\nv = [1, 2, 3, 10]\nsum = 12\nmemo = dict()\nprint(f(v, 0, sum, memo))\n```\n\n\nNow, it is possible to code a function ```\ng```\n that returns one subset that sums ```\nS```\n. To do this, it is enough to add elements only if there is at least one solution including them:\n\n```\ndef f(v, i, S, memo):\n  # ... same as before ...\n\ndef g(v, S, memo):\n  subset = []\n  for i, x in enumerate(v):\n    # Check if there is still a solution if we include v[i]\n    if f(v, i + 1, S - x, memo) > 0:\n      subset.append(x)\n      S -= x\n  return subset\n\nv = [1, 2, 3, 10]\nsum = 12\nmemo = dict()\nif f(v, 0, sum, memo) == 0: print(\"There are no valid subsets.\")\nelse: print(g(v, sum, memo))\n```\n\n\nDisclaimer: This solution says there are two subsets of [10, 10] that sums 10. This is because it assumes that the first ten is different to the second ten. The algorithm can be fixed to assume that both tens are equal (and thus answer one), but that is a bit more complicated.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to find Lucky Numbers\r\n                \r\nI came across this question.A number is called lucky if the sum of its digits, as well as the sum of the squares of its digits is a prime number. How many numbers between A and B are lucky? 1 <= A <= B <= 1018. I tried this.\n\n\nFirst I generated all possible primes between 1 and the number that could be resulted by summing the squares (81 *18 = 1458).\nI read in A and B  find out maximum number that could be generated by summing the digits If B is a 2 digit number ( the max number is 18 generated by 99).\nFor each prime number between  1 an max number. I applied integer partition algorithm.\nFor each possible partition I checked whether their sum of squares of their digits form prime. If so the possible permutations of that partition are generated and if they lie with in range they are lucky numbers.\n\n\n\n\nThis is the implementation:\n\n```\n#include<stdio.h>\n#include<malloc.h>\n#include<math.h>\n#include <stdlib.h>\n#include<string.h>\nlong long luckynumbers;\nint primelist[1500];\n\nint checklucky(long long possible,long long a,long long b){\n    int prime =0;\n    while(possible>0){\n            prime+=pow((possible%10),(float)2);\n            possible/=10;\n    }\n        if(primelist[prime]) return 1;\n        else return 0;\n}\nlong long getmax(int numdigits){\n        if(numdigits == 0) return 1; \n        long long maxnum =10;\n             while(numdigits>1){\n                        maxnum = maxnum *10;\n                        numdigits-=1;\n             }\n         return maxnum; \n\n}\nvoid permuteandcheck(char *topermute,int d,long long a,long long b,int digits){\n    if(d == strlen(topermute)){\n            long long possible=atoll(topermute);\n            if(possible >= getmax(strlen(topermute)-1)){  // to skip the case of getting already read numbers like 21 and 021(permuted-210\n\n                if(possible >= a && possible <= b){\n\n                    luckynumbers++;\n                }\n            }\n    }\n    else{\n        char lastswap ='\\0';\n        int i;\n        char temp;\n        for(i=d;i<strlen(topermute);i++){\n            if(lastswap == topermute[i])\n                continue;\n            else\n                lastswap = topermute[i];\n            temp = topermute[d];\n            topermute[d] = topermute[i];\n            topermute[i] = temp;\n\n            permuteandcheck(topermute,d+1,a,b,digits);\n\n            temp = topermute[d];\n            topermute[d] = topermute[i];\n            topermute[i] = temp;\n        }\n\n    }\n\n}\n\n\nvoid findlucky(long long possible,long long a,long long b,int digits){\n    int i =0;\n    if(checklucky(possible,a,b)){\n        char topermute[18];\n        sprintf(topermute,\"%lld\",possible);\n        permuteandcheck(topermute,0,a,b,digits);\n    }\n}\n\n\nvoid  partitiongenerator(int k,int n,int numdigits,long long  possible,long long a,long long b,int digits){\n    if(k > n || numdigits > digits-1 || k > 9) return;\n    if(k == n){\n\n        possible+=(k*getmax(numdigits));\n\n        findlucky(possible,a,b,digits);\n        return;\n    }\n    partitiongenerator(k,n-k,numdigits+1,(possible + k*getmax(numdigits)),a,b,digits);\n    partitiongenerator(k+1,n,numdigits,possible,a,b,digits);\n\n}\n\n\nvoid calcluckynumbers(long long a,long long b){\n    int i;\n    int numdigits = 0;\n    long long temp = b;\n    while(temp > 0){\n        numdigits++;\n        temp/=10;\n    }\n\n    long long maxnum =getmax(numdigits)-1;\n    int maxprime=0,minprime =0;\n    temp = maxnum;\n    while(temp>0){\n        maxprime+=(temp%10);\n        temp/=10;\n    }\n    int start = 2;\n    for(;start <= maxprime ;start++){\n            if(primelist[start]) {\n                partitiongenerator(0,start,0,0,a,b,numdigits);\n            }\n    }   \n\n}   \nvoid generateprime(){\n    int i = 0;\n    for(i=0;i<1500;i++)\n        primelist[i] = 1;\n    primelist[0] = 0;\n    primelist[1] = 0;\n    int candidate = 2;\n    int topCandidate = 1499;\n    int thisFactor = 2;\n    while(thisFactor * thisFactor <= topCandidate){\n        int  mark = thisFactor + thisFactor;\n        while(mark <= topCandidate){\n            *(primelist + mark) = 0;\n            mark += thisFactor;\n        }\n        thisFactor++;\n        while(thisFactor <= topCandidate && *(primelist+thisFactor) == 0) thisFactor++;\n    }\n\n}\nint main(){\n        char input[100];\n        int cases=0,casedone=0;\n    long long a,b;\n    generateprime();\n        fscanf(stdin,\"%d\",&cases);\n        while(casedone < cases){\n        luckynumbers = 0;\n                fscanf(stdin,\"%lld %lld\",&a,&b);\n        int i =0;\n               calcluckynumbers(a,b);\n                casedone++;\n        }\n\n}\n```\n\n\n\n\nThe algorithm is too slow. I think the answer can be found based on the property of numbers.Kindly share your thoughts. Thank you.\n    ", "Answer": "\r\nExcellent solution OleGG, But your code is not optimized. I have made following changes to your code,\n\n\nIt does not require to go through 9*9*i for k in count_lucky function, because for 10000 cases it would run that many times, instead i have reduced this value through start and end.\ni have used ans array to store intermediate results. It might not look like much but over 10000 cases this is the major factor that reduces the time.\n\n\nI have tested this code and it passed all the test cases. Here is the modified code:\n\n```\n    #include <stdio.h>\n\n    const int MAX_LENGTH = 18;\n    const int MAX_SUM = 162;\n    const int MAX_SQUARE_SUM = 1458;\n    int primes[1460];\n    unsigned long long dyn_table[20][164][1460];\n    //changed here.......1\n    unsigned long long ans[19][10][164][1460];  //about 45 MB\n\n    int start[19][163];\n    int end[19][163];\n    //upto here.........1\n    void gen_primes() {\n        for (int i = 0; i <= MAX_SQUARE_SUM; ++i) {\n            primes[i] = 1;\n        }\n        primes[0] = primes[1] = 0;\n\n        for (int i = 2; i * i <= MAX_SQUARE_SUM; ++i) {\n            if (!primes[i]) {\n                continue;\n            }\n            for (int j = 2; i * j <= MAX_SQUARE_SUM; ++j) {\n                primes[i*j] = 0;\n            }\n        }\n    }\n\n    void gen_table() {\n        for (int i = 0; i <= MAX_LENGTH; ++i) {\n            for (int j = 0; j <= MAX_SUM; ++j) {\n                for (int k = 0; k <= MAX_SQUARE_SUM; ++k) {\n                    dyn_table[i][j][k] = 0;\n                }\n            }\n        }\n        dyn_table[0][0][0] = 1;\n\n        for (int i = 0; i < MAX_LENGTH; ++i) {\n            for (int j = 0; j <= 9 * i; ++j) {\n                for (int k = 0; k <= 9 * 9 * i; ++k) {\n                    for (int l = 0; l < 10; ++l) {\n                        dyn_table[i + 1][j + l][k + l*l] += dyn_table[i][j][k];\n                    }\n                }\n            }\n        }\n    }\n\n    unsigned long long count_lucky (unsigned long long maxp) {\n        unsigned long long result = 0;\n        int len = 0;\n        int split_max[MAX_LENGTH];\n        while (maxp) {\n            split_max[len] = maxp % 10;\n            maxp /= 10;\n            ++len;\n        }\n        int sum = 0;\n        int sq_sum = 0;\n        unsigned long long step_result;\n        unsigned long long step_;\n        for (int i = len-1; i >= 0; --i) {\n            step_result = 0;\n            int x1 = 9*i;\n            for (int l = 0; l < split_max[i]; ++l) {\n    //changed here........2\n                step_ = 0;\n                if(ans[i][l][sum][sq_sum]!=0)\n                    {\n                        step_result +=ans[i][l][sum][sq_sum];\n                        continue;\n                    }\n                int y = l + sum;\n                int x = l*l + sq_sum;\n                for (int j = 0; j <= x1; ++j) {\n                    if(primes[j + y])\n                        for (int k=start[i][j]; k<=end[i][j]; ++k) {\n                            if (primes[k + x]) {\n                                step_result += dyn_table[i][j][k];\n                                step_+=dyn_table[i][j][k];\n                            }\n                    }\n\n                }\n                 ans[i][l][sum][sq_sum] = step_;\n    //upto here...............2\n            }\n            result += step_result;\n            sum += split_max[i];\n            sq_sum += split_max[i] * split_max[i];\n        }\n\n        if (primes[sum] && primes[sq_sum]) {\n            ++result;\n        }\n\n        return result;\n    }\n\n    int main(int argc, char** argv) {\n        gen_primes();\n        gen_table();\n\n    //changed here..........3\n        for(int i=0;i<=18;i++)\n            for(int j=0;j<=163;j++)\n                {\n                    for(int k=0;k<=1458;k++)\n                            if(dyn_table[i][j][k]!=0ll)\n                                {\n                                    start[i][j] = k;\n                                    break;                               \n                                }\n\n                    for(int k=1460;k>=0;k--)\n                            if(dyn_table[i][j][k]!=0ll)\n                                {\n                                    end[i][j]=k;\n                                    break;                               \n                                }\n                }\n    //upto here..........3\n        int cases = 0;\n        scanf(\"%d\",&cases);\n        for (int i = 0; i < cases; ++i) {\n            unsigned long long a, b;\n\n            scanf(\"%lld %lld\", &a, &b);\n    //changed here......4\n            if(b == 1000000000000000000ll)\n                b--;\n    //upto here.........4\n            printf(\"%lld\\n\", count_lucky(b) - count_lucky(a-1));\n        }\n        return 0;\n\n}\n```\n\n\nExplanation:\n\ngen_primes() and gen_table() are pretty much self explanatory.\n\ncount_lucky() works as follows:\n\nsplit the number in split_max[], just storing single digit number for ones, tens, hundreds etc. positions.\nThe idea is: suppose split_map[2] = 7, so we need to calculate result for \n\n1 in hundreds position and all 00 to 99.\n\n2 in hundreds position and all 00 to 99.\n\n.\n.\n\n7 in hundreds position and all 00 to 99.\n\nthis is actually done(in l loop) in terms of sum of digits and sum of square of digits which has been precalcutaled.\nfor this example: sum will vary from 0 to 9*i & sum of square will vary from 0 to 9*9*i...this is done in j and k loops.\nThis is repeated for all lengths in i loop\n\nThis was the idea of OleGG.\n\nFor optimization following is considered:\n\n\nits useless to run sum of squares from 0 to 9*9*i as for particular sums of digits it would not go upto the full range. Like if i = 3 and sum equals 5 then sum of square would not vary from 0 to 9*9*3.This part is stored in start[] and end[] arrays using precomputed values.\nvalue for particular number of digits and particular digit at most significant position of number and upto particular sum and upto particular sum of square isstored  for memorization. Its too long but still its about 45 MB. \nI believe this could be further optimized.\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Quick-Find Union on N Elements\r\n                \r\nI'm new to algorithms and was hoping someone could explain why the maximum number of id[] array entries that can be changed in one call to union using quick-find is n-1? Preferably in Layman's terms.\n    ", "Answer": "\r\nWell, you know at least one value isn't changing right?  It's the value that you are adding to the equivalence class of - since the edge-relation is reflexive!  There are n-1 others.\n\nIf this isn't obvious, re-read the description of the algorithm.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Print an integer in binary format in Java\r\n                \r\nI have a number and I want to print it in binary. I don't want to do it by writing an algorithm.\nIs there any built-in function for that in Java?\n    ", "Answer": "\r\nAssuming you mean \"built-in\":\n\n```\nint x = 100;\nSystem.out.println(Integer.toBinaryString(x));\n```\n\n\nSee Integer documentation.\n\n(```\nLong```\n has a similar method, ```\nBigInteger```\n has an instance method where you can specify the radix.)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Project Euler #10\r\n                \r\nI'm very new to Algorithms and just started coding weeks back. Please help me out with this one: \n\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below two million.\n\nI tried the usual brute method, which ofcourse sucked. I tried reading up about Sieve Algorithms. And implemented this and yes, it runs only for the odd numbers:\n\n```\ni=[x for x in range(3,2000001,2)]\nprint(len(i))\nj=0\nsum=2\nwhile(max(i)!=j):\n    m=0\n    while(m<(2000000-(i[j]**2)/(2*i[j]))):\n        a=(i[j]**2)+2*m*i[j] \n        if a in i:\n            i.remove(a)\n        m+=1\n    j+=1\nfor s in range(1,len(i)+1):\n    sum+=i[s]\nprint(sum)\n```\n\n\nThe program still takes like more than 5 hours. I stopped it in 3 hours. Where am I going wrong?\n    ", "Answer": "\r\nIt seems you are trying to learn, so I will not give you the full solution, just the path.\n\n\nDon't mess with lists, putting elements in and out, checking if they are in, etc. That is a recipe for inefficiency. Instead, keep a list of known primes.\nWrite comments. I have been staring at your code for some minutes and I have no clue what it does.\nUse ```\nmath```\n functions when appropiate. ```\nmath.sqrt```\n is faster than ```\n**0.5```\n (about 30% more).\nThis block:\n```\n\nfor s in range(1,len(i)+1):\n    sum+=i[s]\n```\n\nhurts. You can get the sum of a list by just: typing ```\nsum(i)```\n\n```\n[x for x in range(3,2000001,2)]```\n is exactly the same as ```\nrange(3,2000001,2)```\n (in Python2) or ```\nlist(range(3,2000001,2))```\n (in Python3).\nDon't use variable names as ```\ni```\n,```\na```\n, ```\nm```\n. It is not clear what they are. \n\n\nHow do you know if a number is prime? For all the primes below it, check if they divide your number. If none does, save it. In fact, you can check only those primes that are smaller than the square root of your number.\n\nIf you want to trade memory for speed, you can just use @vamosrafa 's function, and do ```\nsum(prime(2e6))```\n. (In Python2 change ```\nrange```\n for ```\nxrange```\n). You will only need memory to hold a couple of numbers at the same time, but will be doing a lot of unnecessary divisions (if it is not divisible by 3 nor 5, it will not be divisible by 15).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Explain the algorithm and check whether the number is a prime number or not?\r\n                \r\nI'm understand only the code, but not it's core concept anyone explain about its flow chart and Algorithm\nwhy we use i<=n/2  in this code is there any way to use i<=n\n```\n#include <stdio.h>\n\nint main() {\nint n, i, flag = 0;\nprintf(\"Enter a positive integer: \");\nscanf(\"%d\", &n);\n\nfor (i = 2; i <= n / 2; ++i) {\n\n    // condition for non-prime\n    if (n % i == 0) {\n        flag = 1;\n        break;\n    }\n}\n\nif (n == 1) {\n    printf(\"1 is neither prime nor composite.\");\n}\nelse {\n    if (flag == 0)\n        printf(\"%d is a prime number.\", n);\n    else\n        printf(\"%d is not a prime number.\", n);\n}\n\nreturn 0;\n}\n```\n\n    ", "Answer": "\r\nSuppose n is composite. Then n=ab for some integers a,b>1. Your first loop checks if a or b is an integer in the range [2, n/2]. If that loop never finds a factorization like that, it must be that one of the factors (if it exists) is greater than n/2. If it is greater than n/2, the other factor must be less than 2. The only such factorization is n=1n, in which case n is in fact a prime. Thus it suffices to check only factors up to n/2.\nPS: I deliberately don't specify what I mean when n is odd. That's left as an exercise for you to fill in.\nPPS: You can easily do a lot better than stopping at n/2. Hint: What happens when both factors are the same?\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Test for n digits in a string\r\n                \r\nI am trying to solve 'JavaScript Algorithms and Data Structures Projects: Telephone Number Validator' @freeCodeCamp.\nI need to test if string contains 10 digits and what I've come up with returns false and I don't understand why.\n```\nconsole.log(/\\d{10}/g.test(\"555-555-5555\"))\n```\n\n    ", "Answer": "\r\nIf you want to do this with a single regular expression, you can use:\n\r\n\r\n```\nconsole.log(/^(?:\\D*\\d){10}\\D*$/g.test(\"555-555-5555\"))\nconsole.log(/^(?:\\D*\\d){10}\\D*$/g.test(\"555-555-55555\"))```\n\r\n\r\n\r\n\nrequiring the input to be composed of exactly 10 digits in addition to any number of other non-digit characters - but replacing non-digits with the empty string first would be a more intuitive and readable solution.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Java: Over-represented candidates in random number generator?\r\n                \r\nHere is a method to generate long-type random number in the StdRandom class of \"Java Algorithms and Clients - Algorithms, 4th Edition\".\n\n```\n    public static long uniform(long n) {\n    if (n <= 0L) throw new IllegalArgumentException(\"argument must be positive: \" + n);\n\n    // https://docs.oracle.com/javase/8/docs/api/java/util/Random.html#longs-long-long-long-\n    long r = random.nextLong();\n    long m = n - 1;\n\n    // power of two\n    if ((n & m) == 0L) {\n        return r & m;\n    }\n\n    // reject over-represented candidates\n    long u = r >>> 1;\n    while (u + m - (r = u % n) < 0L) {\n        u = random.nextLong() >>> 1;\n    }\n    return r;\n}\n```\n\n\nCan anyone explain what the (u + m - (r = u % n) < 0L) part is doing? I can't understand what does it mean by \"over-represented candidates\".\n    ", "Answer": "\r\nSorry guys, I now can understand what it means. It prevents the random number located at the largest incomplete interval of length n.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to find number of comparisons and complexity of a given algorithm\r\n                \r\nI am trying to determine the total number of comparisons (without counting the loops’ stopping conditions) and how the complexity grows with N.\n```\n1. \nfor (int ind = 0; ind < N; ind++)\n{\n    if (arr[ind] < 0)\n        arr[ind] = arr[ind] * 2;\n}\n2. \nbool there_are_duplicates = false;\nfor (int ind1 = 0; ind1 < N; ind1++)\n{\n    for (int ind2 = 0; ind2 < N; ind2++)\n        if (ind1 != ind2 && arr[ind1] == arr[ind2])\n            there_are_duplicates = true;\n}\n3. \nfor (int ind = 0; ind < N; ind++)\n{\n    int sum = 0;\n    int nb = 0;\n    for (int n = 0; n < 4; n++)\n    {\n        if (ind >= n)\n        {\n            sum = sum + arr[ind - n];\n            nb++;\n        }\n    }\n    arr[ind] = sum / nb;\n}\n\n```\n\nFor the first one, complexity is N and number of comparisons is also N or its just equal to one?\nFor the second one, complexity is N^2 and number of comparisons is  2(N^2) or its just equal to two?\nFor the second one, complexity is N and number of comparisons is also 4N or its just equal to one or 4?\n    ", "Answer": "\r\nLet's count:\n\nYou compare for each item of the array, so you have ```\nN```\n comparisons and ```\nO(N)```\n complexity\n\nYou have nested loop, you compare every item (```\nN```\n of them) with all the others but theirselves (i.e. with ```\nN - 1```\n items). You have ```\nN * (N - 1)```\n comparisons and ```\nO(N^2)```\n complexity\n\nHere, you process each item ```\n4```\n times. So, you have ```\n4 * N```\n comparisons and ```\nO(N)```\n complexity\n\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to calculate number of intersecting discs\r\n                \r\nGiven an array ```\nA```\n of ```\nN```\n integers we draw ```\nN```\n discs in a 2D plane, such that i-th disc has center in ```\n(0,i)```\n and a radius ```\nA[i]```\n. We say that k-th disc and j-th disc intersect, if k-th and j-th discs have at least one common point. \n\nWrite a function \n\n```\nint number_of_disc_intersections(int[] A);\n```\n\n\nwhich given an array ```\nA```\n describing ```\nN```\n discs as explained above, returns the number of pairs of intersecting discs. For example, given ```\nN=6```\n and \n\n```\nA[0] = 1\nA[1] = 5\nA[2] = 2\nA[3] = 1\nA[4] = 4\nA[5] = 0\n```\n\n\nthere are 11 pairs of intersecting discs: \n\n```\n0th and 1st\n0th and 2nd\n0th and 4th\n1st and 2nd\n1st and 3rd\n1st and 4th\n1st and 5th\n2nd and 3rd\n2nd and 4th\n3rd and 4th\n4th and 5th\n```\n\n\nso the function should return 11. \nThe function should return -1 if the number of intersecting pairs exceeds 10,000,000. The function may assume that ```\nN```\n does not exceed 10,000,000. \n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Prime Number Algorithm\r\n                \r\nCan anyone tell me how to implement Sieve of Eratosthenes algorithm in C? I need to generate prime numbers but my algorithm is slow.\n\nMy code: \n\n```\n#include <stdio.h>\n\nint prime(long int i)\n{\n    long int j;\n    int state = 1;\n    for(j=2;j<i;j++)\n    {\n        if((i%j)==0){state=0;break;}\n    }\n    return state;\n}\n\nint main()\n{\n    int t;\n    long int m,n,i;\n    scanf(\"%d\", &t);\n    while(t--) {\n        scanf(\"%d %d\", &m,&n);\n        for(i=m;i<=n;i++)\n        {\n            if(i==1){\n                //do nothing for 1\n            } else{\n                if(prime(i))printf(\"%d\\n\",i);\n            }\n        }\n    }\n    return 0;\n}\n```\n\n\n```\nt```\n is the number of test cases m and n is the range between which prime are to be printed.\n    ", "Answer": "\r\nYou need to create an array of booleans as big as the maximum prime number you want to find. At the beginning it's completely initialized to true.\n\nThe ```\ni```\nth cell of such array will be true if ```\ni```\n is a prime number, or false if it's not.\n\nStart iterating from ```\ni=2```\n: it's prime, then set to false any cell with an index multiple of 2. Go to the next prime number (```\ni=3```\n) and do the same. Go to the next prime (it's ```\ni=5```\n: ```\ni=4```\n is not prime: ```\narray[4]```\n was set to false while processing ```\ni=2```\n) and do the same again and again.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Bucket sort faster than Quicksort\r\n                \r\nI've made a program in Python that sorts a randomly created list containing 5000 numbers with different algorithms and compares times.\nQuicksort is generally slower than Bucket sort, why?\nI thought Quicksort is faster.\n\nHere is my program:\n\nQuicksort\n\n```\ndef quicksort(seq):\n    wall = 0\n    pivot = seq[-1]\n    for index, num in enumerate(seq):\n        if num < pivot:\n            seq[wall], seq[index] = seq[index], seq[wall]\n            wall += 1\n    seq[wall], seq[-1] = seq[-1], seq[wall]\n    left = seq[:wall]\n    if len(left) > 0:\n        left = quicksort(left)\n    right = seq[(wall + 1):]\n    if len(right) > 0:\n        right = quicksort(right)\n    return left + [pivot] + right\n```\n\n\nBucket sort\n\n```\ndef bucket_sort(seq):\n    biggest = 0\n    for number in seq:\n        if number > biggest:\n            biggest = number\n    buckets = []\n    buckets.append([]) * (biggest / 10 + 1)\n    for number in seq:\n        buckets[number / 10].append(number)\n    for index, bucket in enumerate(buckets):\n        #Using quicksort to sort individual buckets\n        buckets[index] = quicksort(bucket)\n    new_list = [number for number in bucket for bucket in buckets]\n    return new_list\n```\n\n    ", "Answer": "\r\nAs you know Quick Sort is a good choice when you have to sort a lot of elements. When you are working with smaller collections, Bucket Sort may be a better choice. \n\nQuicksort is an example of a divide-and-conquer algorithm that does its main work before the\nrecursive calls, in dividing its data (using partition). and in this case your algorithm is not pythonic and is not a real quick sort algorithm !\n\nso I suggest to use this algorithm instead of that:\n\n```\ndef quicksort(seq):\n    if len(seq) <= 1: \n        return seq\n    lo, pi, hi = partition(seq)\n    return quicksort(lo) + [pi] + quicksort(hi)\n\ndef partition(seq):\n    pi, seq = seq[0], seq[1:]\n    lo = [x for x in seq if x <= pi]\n    hi = [x for x in seq if x > pi]\n    return lo, pi, hi\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "C - getting prime numbers using this algorithm\r\n                \r\nI am fighting some simple question.\nI want to get prime numbers\n\nI will use this algorithm\n\n\nand...  I finished code writing like this.\n\n```\nint k = 0, x = 1, n, prim, lim = 1;\nint p[100000];\nint xCount=0, limCount=0, kCount=0;\n\np[0] = 2;\nscanf(\"%d\", &n);\n\nstart = clock();\ndo\n{\n    x += 2; xCount++;\n    if (sqrt(p[lim]) <= x)\n    {\n        lim++; limCount++;\n    }\n    k = 2; prim = true;\n    while (prim && k<lim)\n    {\n\n        if (x % p[k] == 0)\n            prim = false;\n        k++; kCount++;\n    }\n    if (prim == true)\n    {\n        p[lim] = x;\n        printf(\"prime number : %d\\n\", p[lim]);\n    }\n} while (k<n);\n```\n\n\nI want to check how much repeat this code (x+=2; lim++; k++;) \nso I used xCount, limCount, kCount variables.\n\nwhen input(n) is 10, the results are x : 14, lim : 9, k : 43. wrong answer.\n\nanswer is (14,3,13).\n\nDid I write code not well?\ntell me correct point plz...\n    ", "Answer": "\r\nIf you want to adapt an algorithm to your needs, it's always a good idea to implement it verbatim first, especially if you have pseudocode that is detailed enough to allow for such a verbatim translation into C-code (even more so with Fortran but I digress)\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nint main (void){\n    // type index 1..n\n    int index;\n    // var\n    // x: integer\n    int x;\n    //i, k, lim: integer\n    int i, k, lim;\n    // prim: boolean\n    bool prim;\n    // p: array[index] of integer {p[i] = i'th prime number}\n    /*\n       We cannot do that directly, we need to know the value of \"index\" first\n    */\n    int res;\n\n    res = scanf(\"%d\", &index);\n    if(res != 1 || index < 1){\n        fprintf(stderr,\"Only integral values >= 1, please. Thank you.\\n\");\n        return EXIT_FAILURE;\n    }\n    /*\n       The array from the pseudocode is a one-based array, take care\n    */\n    int p[index + 1];\n    // initialize the whole array with distinguishable values in case of debugging\n    for(i = 0;i<index;i++){\n       p[i] = -i;\n    }\n    /*\n        Your variables\n    */\n    int lim_count = 0, k_count = 0;\n\n    // begin\n    // p[1] = 2\n    p[1] = 2;\n    // write(2)\n    puts(\"2\");\n    // x = 1\n    x = 1;\n    // lim = 1\n    lim = 1;\n    // for i:=2 to n do\n    for(i = 2;i < index; i++){\n       // repeat (until prim)\n       do {\n          // x = x + 2\n          x += 2;\n          // if(sqr(p[lim]) <= x) then\n          if(p[lim] * p[lim] <= x){\n             // lim = lim +1\n             lim++;\n             lim_count++;\n          }\n          // k = 2\n          k = 2;\n          // prim = true\n          prim = true;\n          // while (prim and (k < lim)) do\n          while (prim && (k < lim)){\n             // prim = \"x is not divisible by p[k]\"\n             if((x % p[k]) == 0){\n                prim = false;\n             }\n             // k = k + 1\n             k++;\n             k_count++;\n          }\n       // (repeat) until prim\n       } while(!prim);\n       // p[i] := x\n       p[i] = x;\n       // write(x)\n       printf(\"%d\\n\",x);\n    }\n    // end\n\n    printf(\"x = %d, lim_count =  %d, k_count =  %d \\n\",x,lim_count,k_count);\n\n    for(i = 0;i<index;i++){\n       printf(\"%d, \",p[i]);\n    }\n    putchar('\\n');\n\n    return EXIT_SUCCESS;\n}\n```\n\n\nIt will print an ```\nindex - 1```\n number of primes starting at 2.\n\nYou can easily change it now--for example: print only the primes up to ```\nindex```\n instead of ```\nindex - 1```\n primes.\n\nIn your case the numbers for all six primes up to 13 gives\n\n```\nx = 13, lim_count =  2, k_count =  3\n```\n\n\nwhich is distinctly different from the result you want.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "The smallest free number - divide and conquer algorithm\r\n                \r\nI'm reading a book Pearls of Functional Algorithm Design. Tried implementing the divide and conquer solution for smallest free number problem. \n\n```\nminfree xs = minfrom 0 (length xs) xs\n\nminfrom a 0 _  = a\nminfrom a n xs = if m == b - a\n                    then minfrom b (n-m) vs\n                    else minfrom a (m)   us\n    where b = a + 1 + (n `div` 2)\n          (us,vs) = partition (<b) xs\n          m = length us\n```\n\n\nBut this one works no faster than the solution that one might call \"naive\" solution. Which is\n\n```\nimport Data.List ((\\\\))\nminfree' = head . (\\\\) [0..]\n```\n\n\nI don't know why this is like this, what's wrong with the divide and conquer algorithm and how to improve it.\n\nTried using ```\nBangPatterns```\n, implementing the version of ```\npartition```\n that also returns first list's length in the tuple, so it eliminates additional traversal for ```\nm =length us```\n. None of them made improvement.\n\nFirst one takes more than 5 seconds, whereas second one does it almost instantly in ghci on input ```\n[0..9999999]```\n.\n    ", "Answer": "\r\nYou have pathological input on which ```\nhead . (\\\\) [0..]```\n performs in O(N) time. ```\n\\\\```\n is defined as follows:\n\n```\n(\\\\) =  foldl (flip delete)\n```\n\n\n```\ndelete x xs```\n is an O(N) operation that removes the first ```\nx```\n from ```\nxs```\n. ```\nfoldl (flip delete) xs ys```\n deletes all elements of ```\nys```\n from ```\nxs```\n one by one. \n\nIn ```\n[0..] \\\\ [0..9999999]```\n, we always find the next element to be deleted at the head of the list, so the result can be evaluated in linear time.\n\nIf you instead type ```\nminfree' (reverse [0..9999999])```\n into GHCi, that takes quadratic time and you find that it pretty much never finishes. \n\nThe divide-and-conquer algorithm on the other hand would not slow down on the reversed input.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Generating unique numbers that pass Luhn algorithm verification [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 8 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI am trying to generate unique numbers that can be verified with Luhn algorithm. The aim is to provide account numbers, so to speak, for all members on a p2p lending platform. I've been looking into luhn algorithm and a couple of other check digit algorithms, but all the information I get is on verifying numbers with these algorithms but I'm looking for pointers on actually generating those numbers which will pass this check digit algorithm. I'm using PHP for the project.\n\nAny pointers or recommendation is greatly appreciated.\n    ", "Answer": "\r\nThe Luhn algorithm generates an additional checksum digit for an arbitrary number. That means that you can turn any number with n digits into a Luhn-compatible number with n + 1 digits.\n\nThe Wikipedia article on the Luhn algorithm explains how to generate such a check digit: Set the rightmost digit, the check digit, to zero. Work from right to left and add the digits. Alternate between the digit itself and the digitsum of two times the digit. Now determine the check digit so that the whole sum's last digit is zero.\n\nIf you have a unique number you can make it Luhn compatible with:\n\n```\nfunction luhnify($number) {\n    $sum = 0;               // Luhn checksum w/o last digit\n    $even = true;           // Start with an even digit\n    $n = $number;\n\n    // Lookup table for the digitsums of 2*$i\n    $evendig = array(0, 2, 4, 6, 8, 1, 3, 5, 7, 9);\n\n    while ($n > 0) {\n        $d = $n % 10;\n        $sum += ($even) ? $evendig[$d] : $d;\n\n        $even = !$even;\n        $n = ($n - $d) / 10;\n    }\n\n    $sum = 9*$sum % 10;\n\n    return 10 * $number + $sum; \n}\n```\n\n\nThis code uses a number as input. Take care not to overflow the allowable range of numbers, because the Luhnified number will be 10 times as large as the original number.\n\nA better solution would be to use a string of digits, but I'm not really familiar with PHP, so I've chosen the easier way with numbers.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to calculate number of intersecting discs\r\n                \r\nGiven an array ```\nA```\n of ```\nN```\n integers we draw ```\nN```\n discs in a 2D plane, such that i-th disc has center in ```\n(0,i)```\n and a radius ```\nA[i]```\n. We say that k-th disc and j-th disc intersect, if k-th and j-th discs have at least one common point. \n\nWrite a function \n\n```\nint number_of_disc_intersections(int[] A);\n```\n\n\nwhich given an array ```\nA```\n describing ```\nN```\n discs as explained above, returns the number of pairs of intersecting discs. For example, given ```\nN=6```\n and \n\n```\nA[0] = 1\nA[1] = 5\nA[2] = 2\nA[3] = 1\nA[4] = 4\nA[5] = 0\n```\n\n\nthere are 11 pairs of intersecting discs: \n\n```\n0th and 1st\n0th and 2nd\n0th and 4th\n1st and 2nd\n1st and 3rd\n1st and 4th\n1st and 5th\n2nd and 3rd\n2nd and 4th\n3rd and 4th\n4th and 5th\n```\n\n\nso the function should return 11. \nThe function should return -1 if the number of intersecting pairs exceeds 10,000,000. The function may assume that ```\nN```\n does not exceed 10,000,000. \n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "how to sort strings in dictionary order?\r\n                \r\nI have a file of strings and I have to sort them in dictionary order in O(nlog(n)) or less time. I know the sorting algorithms and applied them to sort numbers. but I have no Idea how to sort strings by using Quick sort or any other sorting algorithm. \nPlease provide the algorithms not built in methods.\n    ", "Answer": "\r\nFor strings, common suggestion may be radix sort\n\nIt strictly depends from alphabet that was used for strings forming and is ```\nO(kN)```\n time complexity, where ```\nn```\n is number of keys and ```\nk```\n is average key length. Note, that it may be confusing to compare this with ```\nO(n log n)```\n (where ```\nn```\n  means number of input elements )\n\nSo - the lesser is ```\nk```\n, the better is radix sort approach. That means, for lesser radix it will be more effective. I would just quote extended explanation (no need to rephrase it):\n\n\n  The topic of the efficiency of radix sort compared to other sorting\n  algorithms is somewhat tricky and subject to quite a lot of\n  misunderstandings. Whether radix sort is equally efficient, less\n  efficient or more efficient than the best comparison-based algorithms\n  depends on the details of the assumptions made. Radix sort efficiency\n  is O(d·n) for n keys which have d or fewer digits. Sometimes d is\n  presented as a constant, which would make radix sort better (for\n  sufficiently large n) than the best comparison-based sorting\n  algorithms, which are all O(n·log(n)) number of comparisons needed.\n  However, in general d cannot be considered a constant. In particular,\n  under the common (but sometimes implicit) assumption that all keys are\n  distinct, then d must be at least of the order of log(n), which gives\n  at best (with densely packed keys) a time complexity O(n·log(n)). That\n  would seem to make radix sort at most equally efficient as the best\n  comparison-based sorts (and worse if keys are much longer than\n  log(n)).\n\n\nAlso, this algorithm will use some additional space (with worth space complexity ```\nO(k+n)```\n) - thus, you should be aware of that (not like comparative algorithms which won't use additional space)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Tetris Piece Rotation Algorithm\r\n                \r\nWhat are the best algorithms (and explanations) for representing and rotating the pieces of a tetris game?  I always find the piece rotation and representation schemes confusing.\n\nMost tetris games seem to use a naive \"remake the array of blocks\" at each rotation:\n\nhttp://www.codeplex.com/Project/ProjectDirectory.aspx?ProjectSearchText=tetris\n\nHowever, some use pre-built encoded numbers and bit shifting to represent each piece:\n\nhttp://www.codeplex.com/wintris\n\nIs there a method to do this using mathematics (not sure that would work on a cell based board)?\n    ", "Answer": "\r\nWhen I was trying to figure out how rotations would work for my tetris game, this was the first question that I found on stack overflow.  Even though this question is old, I think my input will help others trying to figure this out algorithmically.  First, I disagree that hard coding each piece and rotation will be easier.  Gamecat's answer is correct, but I wanted to elaborate on it.  Here are the steps I used to solve the rotation problem in Java.\n\n\nFor each shape, determine where its origin will be.  I used the points on the diagram from this page to assign my origin points. Keep in mind that, depending on your implementation, you may have to modify the origin every time the piece is moved by the user.\nRotation assumes the origin is located at point (0,0), so you will have to translate each block before it can be rotated.  For example, suppose your origin is currently at point (4, 5).  This means that before the shape can be rotated, each block must be translated -4 in the x-coordinate and -5 in the y-coordinate to be relative to (0,0).\nIn Java, a typical coordinate plane starts with point (0,0) in the upper left most corner and then increases to the right and down.  To compensate for this in my implementation, I multiplied each point by -1 before rotation.\nHere are the formulae I used to figure out the new x and y coordinate after a counter-clockwise rotation.  For more information on this, I would check out the Wikipedia page on Rotation Matrix. x' and y' are the new coordinates:\n\nx' = x * cos(PI/2) - y * sin(PI/2) and y' = x * sin(PI/2) + y * cos(PI/2)\n.\nFor the last step, I just went through steps 2 and 3 in reverse order.  So I multiplied my results by -1 again and then translated the blocks back to their original coordinates.\n\n\nHere is the code that worked for me (in Java) to get an idea of how to do it in your language:\n\n```\npublic synchronized void rotateLeft(){\n\n    Point[] rotatedCoordinates = new Point[MAX_COORDINATES];\n\n    for(int i = 0; i < MAX_COORDINATES; i++){\n\n        // Translates current coordinate to be relative to (0,0)\n        Point translationCoordinate = new Point(coordinates[i].x - origin.x, coordinates[i].y - origin.y);\n\n        // Java coordinates start at 0 and increase as a point moves down, so\n        // multiply by -1 to reverse\n        translationCoordinate.y *= -1;\n\n        // Clone coordinates, so I can use translation coordinates\n        // in upcoming calculation\n        rotatedCoordinates[i] = (Point)translationCoordinate.clone();\n\n        // May need to round results after rotation\n        rotatedCoordinates[i].x = (int)Math.round(translationCoordinate.x * Math.cos(Math.PI/2) - translationCoordinate.y * Math.sin(Math.PI/2)); \n        rotatedCoordinates[i].y = (int)Math.round(translationCoordinate.x * Math.sin(Math.PI/2) + translationCoordinate.y * Math.cos(Math.PI/2));\n\n        // Multiply y-coordinate by -1 again\n        rotatedCoordinates[i].y *= -1;\n\n        // Translate to get new coordinates relative to\n        // original origin\n        rotatedCoordinates[i].x += origin.x;\n        rotatedCoordinates[i].y += origin.y;\n\n        // Erase the old coordinates by making them black\n        matrix.fillCell(coordinates[i].x, coordinates[i].y, Color.black);\n\n    }\n    // Set new coordinates to be drawn on screen\n    setCoordinates(rotatedCoordinates.clone());\n}\n```\n\n\nThis method is all that is needed to rotate your shape to the left, which turns out to be much smaller (depending on your language) than defining each rotation for every shape.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to split a string without spaces into an array of words?\r\n                \r\nSo I'm practicing javascript at freecodecamp.org by making an algorithm of a telephone checker. I succeeded in checking it when only the provided phone number is a string of numbers. Now I'm stuck and don't know how to check it if the provided phone number contain words such as 'sixnineone'. So I want to split it into \"six nine one\" or convert them into \"691\" with an array of number objects.\n\nHere's the problem:\n\n(https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/telephone-number-validator)\n\nI tried to get some hints via the website, but they only solve the problem with regular expressions which i don't understand well.\n\nhere is what I've done:\n\n```\n    function telephoneCheck(str) {\n    let phoneNum = str.toLowerCase().replace(/[^1-9a-z]/g, \"\");\n    let numbers = [\n        {0: \"o\"},\n        {1: \"one\"},\n        {2: \"two\"},\n        {3: \"tree\"},\n        {4: \"four\"},\n        {5: \"five\"},\n        {6: \"six\"},\n        {7: \"seven\"},\n        {8: \"eight\"},\n        {9: \"nine\"}\n    ];\n\n    if (phoneNum.match(/[1-9]/)) {\n        phoneNum = phoneNum.split('')\n\n        if (phoneNum.length === 10) {\n            phoneNum.unshift(1);\n        }\n\n        for (let i = 0; i < phoneNum.length; i++) {\n            phoneNum[i] = Number(phoneNum[i]);\n        }\n\n        if (phoneNum.length === 11 && phoneNum[0] === 1) {\n            return true;\n        } else {\n            return false;\n        }\n\n    }\n\n    if (phoneNum.match(/[a-z]/)) {\n        console.log(phoneNum);\n    }\n}\n\nconsole.log(telephoneCheck(\"sixone\"));\n```\n\n\nIn the solution of the problem, it is said that the only solution is their's, but if what I think is right then there might be another one.\n    ", "Answer": "\r\nOne way might be to use a Map and use the names as a key and the value as the number.\n\nThen extract the keys from the map, order them so that the longest string comes first and create a regex with a capturing group and an alternation\n\nThe regex would eventually look like:\n\n```\n(three|seven|eight|four|five|nine|one|two|six|o)\n```\n\n\nThen split the string using this regex. Map over the items removing all non digits when the map does not contain the key and remove all empty values from the array.\n\nFinally get the value from the map by using the key.\n\n\r\n\r\n```\nlet map = new Map([\r\n  [\"o\", 0],\r\n  [\"one\", 1],\r\n  [\"two\", 2],\r\n  [\"three\", 3],\r\n  [\"four\", 4],\r\n  [\"five\", 5],\r\n  [\"six\", 6],\r\n  [\"seven\", 7],\r\n  [\"eight\", 8],\r\n  [\"nine\", 9]\r\n]);\r\nlet regex = new RegExp(\"(\" + [...map.keys()]\r\n  .sort((a, b) => b.length - a.length)\r\n  .join('|') + \")\");\r\n\r\nlet strings = [\r\n  \"69ooooneotwonine\",\r\n  \"o\",\r\n  \"testninetest\",\r\n  \"10001\",\r\n  \"7xxxxxxx6fivetimesfifefofourt\",\r\n  \"test\"\r\n\r\n].map(s =>\r\n  s.split(regex)\r\n  .map(x => !map.has(x) ? x.replace(/\\D+/, '') : x)\r\n  .filter(Boolean)\r\n  .map(x => map.has(x) ? map.get(x) : x)\r\n  .join(''));\r\n\r\nconsole.log(strings);```\n\r\n\r\n\r\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Occurrence of number in array,with complexity log n algorithm and c\r\n                \r\nhi genius i wish you good day\nSituation:\n\nT [M] an array sorts in ascending order.\nWrite an algorithm that calculates the number of occurrences of an integer x in the array T[M].\nthe number of comparison of x to the elements of T, must be of order log n\n\n\nMy attempt is:\n```\ndef Occurrence(T,X,n):{\n   \n \n       if ( n=0 ){ return 0;}\n        else { \n\n            Occurrence(T,X,n/2);\n\n            if( T[n]==X ){  return 1+Occurrence(T,x,n/2); }\n            else { return Occurrence(T,x,n/2); }\n\n \n }the end of code\ncomplexity is :\n                   0 if n=0\nwe have      O(n)={\n                   1+O(n/2) if n>0\nO(n)=1+1+1+....+O(n/2^(n))=n+O(2/2^(n))\nwhen algorithm stopp if{existe k  n=2^(k),so   O(n)=n+1 } \nn/2^(n)=1)  =>   O(n)=log(n)+1, so you think my code is true ?\n</pre>\n```\n\n    ", "Answer": "\r\nLook at binary search variants that give the leftmost and the rightmost indices of  needed element, then return ```\nindex_difference + 1```\n\nYou can use ```\nlower_bound```\n and ```\nupper_bound```\n in C++ STL, ```\nbisect_left```\n and ```\nbisect_right```\n in Python, similar functions if available, or implement pseudocode from Wiki citation.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Any useful mathematical function / algorithm to break down big numbers?\r\n                \r\nSo what I want to do is breaking down numbers that are dozens of thousands big into smaller numbers, preferably 2~9.\nThe first thing came to my mind was prime factorization, for instance the number 49392 can be expressed as (2 x 2 x 2 x 2 x 3 x 3 x 7 x 7 x 7). But there are prime numbers and numbers such as 25378 =  2 × 12689 that cant be expressed with only multiplication.\nSo I want to break these numbers down using multiplication and addition, for example, the number 25378 could be expressed as 25346 + 32 = (2 × 19 × 23 × 29) + (2^5). Still, 23 and 29 are too big but I just picked random number just to show what I mean by using addtion and multiplication together to express big numbers, I'm sure there's a better combination of number that express 25378 than 25346 and 32.\nAnyways, I thought programming this would involve ton of unnecessary if statement and would be incredibly slow in the big picture. So I was wondering, if there is a mathematical algorithm or function that does this thing? If not, I could just optimize the code myself, but I was just curious, I couldn't find anything on google myself though.\n    ", "Answer": "\r\nAssuming the problem is to write a number as the simplest expression containing the numbers 1-9, addition and multiplication (simplest = smallest number of operators), then this Python program does this in O(N^2) time.\nA number N can be written as the sum or product of two smaller numbers, so if you've precalculated the simplest way of constructing the numbers 1..N-1, then you can find the simplest way of constructing N in O(N) time. Then it's just a matter of avoiding duplicate work -- for example without loss of generality in the expressions A+B and AB, A<=B, and nicely printing out the final expression.\n```\ndef nice_exp(x, pri):\n    if isinstance(x, int):\n        return str(x)\n    else:\n        oppri = 1 if x[0] == '*' else 0\n        if oppri < pri:\n            bracks = '()'\n        else:\n            bracks = ['', '']       \n        return '%s%s %s %s%s' % (bracks[0], nice_exp(x[1], oppri), x[0], nice_exp(x[2], oppri), bracks[1])\n\ndef solve(N):\n    infinity = 1e12\n    size = [infinity] * (N+1)\n    expr = [None] * (N+1)\n    for i in range(N+1):\n        if i < 10:\n            size[i] = 1\n            expr[i] = i\n            continue\n        for j in range(2, i):\n            if j * j > i: break\n            if i%j == 0 and size[j] + size[i//j] + 1 < size[i]:\n                size[i] = size[j] + size[i//j] + 1\n                expr[i] = ('*', expr[j], expr[i//j])\n        for j in range(1, i):\n            if j > i-j: break\n            if size[j] + size[i-j] + 1 < size[i]:\n                size[i] = size[j] + size[i-j] + 1\n                expr[i] = ('+', expr[j], expr[i-j])\n    return nice_exp(expr[N], 0)\n\nprint(solve(25378))\n```\n\nOutput:\n```\n2 * (5 + 4 * 7 * (5 + 7 * 8 * 8))\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Greedy Algorithms and Time Complexity #2\r\n                \r\nWe have a bomb that is ticking and may explode. This bomb has n switches, that can be moved up or down. Certain combinations of these switches trigger the bomb, but only one combination disables it.\n\nOur task is to move the switches from the current position to a position that disables the bomb, without exploding it in the meantime. The switches are big and awkward, so we can move only one switch at a time.\n\nWe have, lets say, n = 4 switches currently in position ^vvv. We need to get them to the position ^v^^. Forbidden positions are vvv^, ^vv^, ^v^v, and ^^^v.\n\na.) I had to draw this by hand and find the shortest sequence of switch movements that solves the task - result I got was 4 ...and I found two such sequences, if i am right...\n\nb.) this is where it gets a hard - write a code that answers the above question/questions (the shortest sequence and how many). The code should be generalized so that it would work with another number of switches and other starting, targeted, and forbidden combinations; targeted and forbidden combinations may be multiple or even fewer. Only thing we know for sure is that the switches have only two positions. It should also provide the possibility that the desired condition is unavailable; in this case, the program should of course tell.\n\nc.) Next questions is the time complexity of the code this but for now I think I will just stop here...\n\nI used '0' and '1' instead, because it is easier for me to imagine this.\n\nSo my approach towards this was something of a greedy algorithm (I think) - starting position, you think of all the possible (allowed) positions, you ignore the forbidden ones, then pick the one that the sequence of positions has the fewest difference from our targeting sequence.\n\nThe key part of the code I am yet to write and that's the part I need help with.\n\n```\n\nall_combinations = ['0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111', '1000', '1001', '1010', '1011' , '1100', '1101', '1110', '1111']\n\n\ndef distance (position1, position2):\n     distance = 0\n     for i in range (len (position1)):\n         if position1 [i]! = position2 [i]:\n             distance + = 1\n     return distance\n\n\ndef allowed_positions (current, all_combinations):\n     allowed = set ()\n     for combination and all combinations:\n         if the distance (current, combination) == 1:\n             allowed.add (combination)\n     return allowed\n\n\ndef best_name (current, all_combinations, target):\n     list = []\n     for option and permitted_mood (current, all_combinations):\n         list.append (distance (option, target), option)\n\n```\n\n    ", "Answer": "\r\nThe task at hand is finding a shortest path in a graph.  For this there is one typical approach and that is a breadth-first search algorithm (https://en.wikipedia.org/wiki/Breadth-first_search).\n\nThere is no real need to go into the details of how this is done because it can be read elsewhere in more detail and far better explained than I can do this in a StackOverflow answer.\n\nBut what might need to be explained is how the switch-combinations you have at hand are represented by a graph.\n\nImagine you have just two switches.  Then you have exactly this graph:\n\n```\n^^---^v\n|     |\n|     |\nv^---vv\n```\n\n\nIf your starting position is ```\n^^```\n and your ending (defusing) position is ```\nvv```\n while the position ```\n^v```\n is an exploding position, then your graph is reduced to this:\n\n```\n^^   ^v\n|       \n|       \nv^---vv\n```\n\n\nIn this small example the shortest path is obvious and simple.\n\nThe graph at hand is easily sketched out in 2D, each dimension (x and y) representing one of the switches.  If you have more switches, then you just add one dimension for each switch.  For three switches this would look like this:\n\n```\n^^^--------^^v\n |\\         |\\\n | \\        | \\\n |  \\       |  \\\n |   \\      |   \\\n |   ^v^--- | --^vv\n |    |     |    |\n |    |     |    |\nv^^--------v^v   |\n  \\   |      \\   |\n   \\  |       \\  |\n    \\ |        \\ |\n     \\|         \\|\n     vv^--------vvv\n```\n\n\nIf the positions ```\n^^v```\n, ```\nv^^```\n, and ```\nvv^```\n are forbidden, then this graph is reduced to this:\n\n```\n^^^        ^^v\n  \\           \n   \\           \n    \\           \n     \\           \n     ^v^--------^vv\n                 |\n                 |\nv^^        v^v   |\n             \\   |\n              \\  |\n               \\ |\n                \\|\n     vv^        vvv\n```\n\n\nWhich already shows the clear way and the breadth-first search will easily find it.  It gets interesting only for many dimensions/switches, though.\n\nDrawing this for more dimensions/switches gets confusing of course (look up tesseracts for 4D).  But it isn't necessary to have a visual image.  Once you have written the algorithm for creating the graph in 2D and 3D in a general way it easily scales to n dimensions/switches without adding any complexity.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Minesweeper Clearing Algorithm\r\n                \r\nI'm attempting to recreate Minesweeper in flash for a project and I've gotten as far as placing mines and numbers. I can't seem to figure out the recursive algorithm for the expansion of clicking on a tile and clearing its neighbors. There are two arrays, _map holds the background + mines & numbers, _clickable map holds the tiles that sit on top of the background. So basically, what I'm asking for is help with recursion. If this isn't clear enough, I'll update the question with necessary information.\n\n```\nprivate function onClick(e:MouseEvent):void \n{\n    trace(\"on Click\");\n\n    var symbol = e.currentTarget;\n    var tempTileMask:TileMask = symbol;\n    var tempTile:Tile = _map[tempTileMask.yCoord][tempTileMask.xCoord]\n\n    if (tempTile.hasMine)\n    {\n        for (var i:int = _gridSize - 1; i >= 0; i--)\n            for (var j:int = _gridSize - 1; j >= 0; j--)\n            {\n                var temp:TileMask = _clickableMap[i][j];\n                removeChild(temp);\n            }\n\n        //explosion();\n\n        //gameOver();\n    }\n\n    if (tempTile.hasNumber)\n    {\n        removeChild(tempTileMask);\n        tempTile.cleared = true;\n    }\n\n    else\n    {\n        clearTiles(tempTile.xCoord, tempTile.yCoord);\n    }\n}\n```\n\n\nThis is the function I modified to clear mines\n\n```\nfunction clearTiles( x:int, y:int )\n{\n    // Get an object that contains the tile information for the location\n    // we are checking\n    if(_map[y][x] != null) \n    {\n        var tempTile:Tile = _map[y][x];\n        var tempTileMask:TileMask = _clickableMap[y][x];\n\n        // Check if the location we are checking is out of the bounds of the\n        // playable area\n\n        trace(tempTile);\n        if ( tempTile.outOfBounds(x, y) )\n        {\n            return;\n        }\n\n        // If the tile has already been revealed then there is nothing to do\n\n        trace(\"before clearing\");\n        if ( tempTile.cleared )\n        {\n            trace(\"clearing tile\");\n            return;\n        }\n\n        // If the tile hasn't been revealed and it's an empty square we\n        // reveal the location then call this function again for each\n        // surrounding block\n\n        trace(\"before check for surrounding tiles\");\n        if ( tempTile.hasNumber != true && tempTile.hasMine != true )\n        {\n            trace(\"check for surrounding tiles\");\n\n            // Remove the mask hiding the tiles property\n            removeChild( tempTileMask );\n            // Set the tile as cleared\n            tempTile.cleared = true;\n\n            if(_map[tempTile.yCoord][tempTile.xCoord - 1] != null)\n            {\n                var tile1:Tile =_map[tempTile.yCoord][tempTile.xCoord - 1]\n\n                if(!tile1.cleared)\n                    clearTiles( tempTile.xCoord - 1 , tempTile.yCoord ); //Check tile to the left\n            }\n\n            if(_map[tempTile.yCoord][tempTile.xCoord + 1] != null)\n            {\n                var tile2:Tile =_map[tempTile.yCoord][tempTile.xCoord + 1]\n\n                if(!tile2.cleared)\n                    clearTiles( tempTile.xCoord + 1 , tempTile.yCoord ); //Check tile to the left\n            }\n\n            if(_map[tempTile.yCoord - 1][tempTile.xCoord] != null)\n            {\n                var tile3:Tile =_map[tempTile.yCoord - 1][tempTile.xCoord]\n\n                if(!tile3.cleared)\n                    clearTiles( tempTile.xCoord, tempTile.yCoord - 1 ); //Check tile to the left\n            }\n\n            if(_map[tempTile.yCoord + 1][tempTile.xCoord] != null)\n            {\n                var tile4:Tile =_map[tempTile.yCoord + 1][tempTile.xCoord]\n\n                if(!tile4.cleared)\n                    clearTiles( tempTile.xCoord, tempTile.yCoord + 1 ); //Check tile to the left\n            }\n\n            if(_map[tempTile.yCoord - 1][tempTile.xCoord - 1] != null)\n            {\n                var tile5:Tile =_map[tempTile.yCoord - 1][tempTile.xCoord - 1]\n\n                if(!tile5.cleared)\n                    clearTiles( tempTile.xCoord - 1, tempTile.yCoord - 1 ); //Check tile to the left\n            }\n\n            if(_map[tempTile.yCoord + 1][tempTile.xCoord + 1] != null)\n            {\n                var tile6:Tile =_map[tempTile.yCoord + 1][tempTile.xCoord + 1]\n\n                if(!tile6.cleared)\n                    clearTiles( tempTile.xCoord + 1, tempTile.yCoord + 1 ); //Check tile to the left\n            } \n\n            if(_map[tempTile.yCoord - 1][tempTile.xCoord + 1] != null)\n            {\n                var tile7:Tile =_map[tempTile.yCoord - 1][tempTile.xCoord + 1]\n\n                if(!tile7.cleared)\n                    clearTiles( tempTile.xCoord + 1, tempTile.yCoord - 1 ); //Check tile to the left\n            }\n\n\n            if(_map[tempTile.yCoord + 1][tempTile.xCoord - 1] != null)\n            {\n                var tile8:Tile =_map[tempTile.yCoord + 1][tempTile.xCoord - 1]\n\n                if(!tile8.cleared)\n                    clearTiles( tempTile.xCoord - 1, tempTile.yCoord + 1 ); //Check tile to the left\n            }\n        }\n    }\n    else\n        return;\n\n}\n```\n\n    ", "Answer": "\r\nPlease forgive if I screw up actionscript syntax.  I just love recursive functions so I had to answer this.  I'll just paste the code with the most accurate comments I can muster.  If you have questions please ask.  I'm sure you can convert anything you need to the appropriate function calls, property references etc.\n\n```\n// Function to check if a tile is an empty space and then call\n// itself for the surrounding tiles\n\nfunction clearTiles( x:int, y:int ):void\n{\n    // Check if the location we are checking is out of the bounds of the\n    // playable area\n    if ( outOfBounds( x, y ) )\n    {\n        return;\n    }\n\n    // Get an object that contains the tile information for the location\n    // we are checking\n    var tempTile:Tile = _map[x][y];\n\n\n    // If the tile has already been revealed then there is nothing to do\n    if ( tempTile.cleared )\n    {\n        return;\n    }\n\n    // If the tile is a number then reveal it and return without checking\n    // surrounding tiles\n    var tempTileMask:DisplayObject = getTileMask(x,y);\n    // since we're no longer in the click handler context, we need\n    // to initialize the variable with something [TODO]\n    if ( tempTile.hasNumber )\n    {\n        removeChild( tempTileMask );\n        tempTile.cleared = true;\n        return;\n    }\n\n\n    // If the tile hasn't been revealed and it's an empty square we\n    // reveal the location then call this function again for each\n    // surrounding block\n\n    if ( tempTile.isEmpty )\n    {\n        // Remove the mask hiding the tiles property\n        removeChild( tempTileMask );\n        // Set the tile as cleared\n        tempTile.cleared = true;\n\n        clearTiles( tempTile.x - 1 , tempTile.y ); //Check tile to the left\n        clearTiles( tempTile.x + 1 , tempTile.y ); //Check tile to the right\n        clearTiles( tempTile.x , tempTile.y - 1 ); //Check tile above\n        clearTiles( tempTile.x , tempTile.y + 1 ); //Check tile below\n    }\n\n}\n```\n\n\nYou'll have to create an outOfBounds() function to just check if the X and Y being checked are larger than the current game board.  It looks like you reference _gridSize as a static number, so I assume all of your game boards are squares (ex: 4x4, 9x9, 120x120).  In which case you can use something like this:\n\n```\nfunction outOfBounds( int x, int y )\n{\n    if ( x < 0 )\n    {\n        return true;\n    }\n\n    if ( y < 0 )\n    {\n        return true;\n    }\n\n    if ( x > _gridSize - 1 )\n    {\n        return true;\n    }\n\n    if ( y > _gridSize -1 )\n    {\n        return true;\n    }\n\n    return false;\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Fast Algorithm to find and element in a string [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     Questions asking for code must demonstrate a minimal understanding of the problem being solved. Include attempted solutions, why they didn't work, and the expected results. See also: Stack Overflow question checklist\r\n                \r\n                    \r\n                        Closed 9 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI am newbie in algorithms and I needed to implement a fast search that make this. For example I have this sequence \n\n```\nseq =\"1111111145555666672222222222222222221111\";\n```\n\n\nand I have the element to search = \"1\";\n\nI need an algorithm (as fast as can be able) to give me or the numbers of element (\"1\") exists in seq or the number of elements are different of \"1\" in sequence.\n    ", "Answer": "\r\nFrom the sample string you've provided it looks like the string is essentially unsorted. In this case the only way to count the number of characters is it make one complete pass through the string.\n\nA quick and dirty way to do this would be with the ```\nCount```\n extension method:\n\n```\nint count=seq.Count(c => c=='1');\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to Generate 32 bit integers random number using marsenne twister Algorithm\r\n                \r\nHow to Generate 32 bit integers random number using marsenne twister Algorithm? And save it to binary file.\n    ", "Answer": "\r\n```\n#include <algorithm>\n#include <fstream>\n#include <ios>\n#include <iostream>\n#include <iterator>\n#include <ostream>\n#include <random>\n#include <vector>\n\nint main()\n{\n    // Create the random number engine\n    std::mt19937::result_type seed = std::random_device()();\n    auto engine = std::mt19937(seed);\n    auto random = [&engine]() { return engine(); };\n\n    // Generate some random numbers\n    auto constexpr n = 1000;\n    auto numbers = std::vector<std::mt19937::result_type>();\n    std::generate_n(std::back_inserter(numbers), n, random);\n\n    // Write them out to a file\n    auto fout = std::ofstream(\"random_numbers.bin\", std::ios::binary);\n    fout.write(reinterpret_cast<const char*>(numbers.data()), \n        n * sizeof(decltype(numbers)::value_type));\n\n    return 0;\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Correct Hashing Algorithm/Function\r\n                \r\nAre there any secure hashing algorithms/functions that give all the letters and numbers, and not just 0-9,a-f.\n\nSo the output could contain: 0-9, a-z, A-Z and even some symbols.\n    ", "Answer": "\r\nAny hashing algorithm, really.\n\nHexadecimal is just a common representation for them. Look at this code snippet (using perl, because you didn't tag a programming language):\n\n```\nuse Digest::MD5 qw/md5 md5_hex/;\nuse MIME::Base64;\n\nmy $str = 'Foobar';\n\n# Hexadecimal representation\nprint md5_hex($str),\"\\n\";\n\n# Base64 encoded representation\nprint encode_base64(md5($str));\n```\n\n\nOutput:\n\n```\n89d5739baabbbe65be35cbe61c88e06d\nidVzm6q7vmW+NcvmHIjgbQ==\n```\n\n\nThe first output is the hexadecimal representation of the MD5 digest of the string; the second is the Base64 encoded representation of the raw digest.\n\nThis would work with any digesting algorithm. It does not, however, affect how secure the underlying algorithm actually is.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What are \"relevant operations\" in analysis of algorithms?\r\n                \r\nI've been studying analysis of algorithms, and multiple times I've come across the idea that to define the time complexity of an algorithm I have to find the number of \"relevant operations\" performed by the algorithm. However, not a single source (Cormen, Skiena, Sedgewick...), at least to my knowledge, mentions HOW I can know what operations are in fact relevant. Any help?\n    ", "Answer": "\r\nIn general you just count the operations, that you care about in your given context.\n\nE.g.\n\n\n```\nfib(n)\n{\n   if(n < 2) \n      return 1;\n\n   return fib(n-1) + fib(n-2)\n}\n```\n\n\nThe operations you can find in this code are:\n\n\nif statement\ncomparison\nreturn a value\nrecursive call\naddition\n\n\nEvery operation takes some time to be executed, but every operation is executed really fast (assuming the input ```\nn```\n is a 64 bit number and the program runs on a \"normal\" computer). So the complexity of this function has to come from the recusive calls and especially not from the call it self, but from the number of calls. So you count the recursive calls and forget about the other operations, knowing that they run fast, means ```\nO(1)```\n (constant time).\n\nThe reason why you can ignore some operations, is that you calculate the complexity in terms of ```\no```\n, ```\nO```\n, ```\nΘ```\n, ```\nΩ```\n or ```\nω```\n (Landau-Notation), which allows you to calculate in asymtotics, where slwo growing parts and constants doesn't play any role.\n\nI think there is no easy answer how to know, what operations are relevant. There are easy examples (like the one I gave), but in general it is not that easy. Then you have to count everything that could be relevant until you notice, that it's not. \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Topological Sort Algorithm and Implementation\r\n                \r\nI'm working on an algorithm to the following problem:\n\nWe have a set amount of courses and for each course, we are given it's prerequisites. Find the longest sequence of courses such that every course in the sequence, the previous course is it's prereq. \n\nI know this is clearly a problem where topological sorting will come in handy, but I am having some difficulty with the algorithm and implementation. For the algorithm, my first thought is we should be able to run a standard topological sort algorithm and just keep a counter that counts if a course is a pre-req or not when we \"see\" it. \n\nI've decided that it would be best to represent the graph as an adjacency list. Here's kind of a rough idea of where I'm at with the implementation thus far,\n\n```\n public Vertex{\n     private String courseName;\n     private Vertex[] edges; //Represents all of this courses pre-reqs.\n\n     public addEdge(Vertex v); //Add's a pre-req\n     public getEdges();        //Returns array of edges\n     public getEdge(int index);//Return edge at specific index\n }\n```\n\n\nAnd then in the main program, the \"graph\" will simply be an array of Vertexes:\n\n```\n Vertex graph[] = new Vertex[num];\n```\n\n\nIf anyone has any thoughts, links, hints, etc. on either the algorithm, or implementation please feel free to share. I am aiming for O(n + m) time where n is the number of courses and m is the number of pre-reqs. \n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Sum of 2 elements in array - Algorithm - JavaScript\r\n                \r\nI'm working on JavaScript algorithms and could use some help. What am I doing wrong exactly?\n// Given an array of arr, positive integers, and another number X.\n// Determine whether or not there exist two elements in arr whose sum is exactly X.\n```\nfunction keyPair(arr, x){\n    var sum=false;\n    var key=0;\n    var temp=0;\n    for(var i=0;i<=arr.length;i++){\n        while(sum=false){\n            key=arr[i];\n            arr[i]=temp;\n            temp=key;\n        }\n        if(temp+arr[i]==x){\n            sum=true;\n        }\n    }\n    console.log(sum);\n}\nkeyPair([1,2,4,3,6], 4);\n```\n\n    ", "Answer": "\r\nI think this one deserves an explanation:\n```\nsum=false```\n is an assignment statement. As an expression, an assignment statement is evaluated as ```\nundefined```\n (regardless of the value assigned). So ```\nwhile(sum=false)```\n is actually ```\nwhile(undefined)```\n, which is interpreted as ```\nwhile(false)```\n.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Euclidean algorithm (GCD) with multiple numbers?\r\n                \r\nSo I'm writing a program in Python to get the GCD of any amount of numbers.\n\n```\ndef GCD(numbers):\n\n    if numbers[-1] == 0:\n        return numbers[0]\n\n\n    # i'm stuck here, this is wrong\n    for i in range(len(numbers)-1):\n        print GCD([numbers[i+1], numbers[i] % numbers[i+1]])\n\n\nprint GCD(30, 40, 36)\n```\n\n\nThe function takes a list of numbers. \nThis should print 2. However, I don't understand how to use the the algorithm recursively so it can handle multiple numbers. Can someone explain? \n\nupdated, still not working:\n\n```\ndef GCD(numbers):\n\n    if numbers[-1] == 0:\n        return numbers[0]\n\n    gcd = 0\n\n    for i in range(len(numbers)):\n        gcd = GCD([numbers[i+1], numbers[i] % numbers[i+1]])\n        gcdtemp = GCD([gcd, numbers[i+2]])\n        gcd = gcdtemp\n\n    return gcd\n```\n\n\n\n\nOk, solved it\n\n```\ndef GCD(a, b):\n\n    if b == 0:\n        return a\n    else:\n        return GCD(b, a % b)\n```\n\n\nand then use reduce, like\n\n```\nreduce(GCD, (30, 40, 36))\n```\n\n    ", "Answer": "\r\nSince GCD is associative, ```\nGCD(a,b,c,d)```\n is the same as ```\nGCD(GCD(GCD(a,b),c),d)```\n. In this case, Python's ```\nreduce```\n function would be a good candidate for reducing the cases for which ```\nlen(numbers) > 2```\n to a simple 2-number comparison. The code would look something like this:\n\n```\nif len(numbers) > 2:\n    return reduce(lambda x,y: GCD([x,y]), numbers)\n```\n\n\nReduce applies the given function to each element in the list, so that something like\n\n```\ngcd = reduce(lambda x,y:GCD([x,y]),[a,b,c,d])\n```\n\n\nis the same as doing\n\n```\ngcd = GCD(a,b)\ngcd = GCD(gcd,c)\ngcd = GCD(gcd,d)\n```\n\n\nNow the only thing left is to code for when ```\nlen(numbers) <= 2```\n. Passing only two arguments to ```\nGCD```\n in ```\nreduce```\n ensures that your function recurses at most once (since ```\nlen(numbers) > 2```\n only in the original call), which has the additional benefit of never overflowing the stack.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to draw a precision-recall diagram?\r\n                \r\nPrecision and Recall are some metrics for evaluation algorithms, and they are defined like this:\n\n```\nprecision = true_positive / (true_positive + false_positive)\n\nrecall = true_positive / (true_positive + false_negative)\n```\n\n\nSo, I think for every algorithm we have one number for precision and one number for recall, but we see that there are some diagram for evaluating according to precision and recall, I want to know that how can we draw a diagram with just one point?(one precision and one recall for every algorithm)\n    ", "Answer": "\r\nYou could draw a histogram with the precision and recall for each algorithm. But it's still a bit difficult to read because for each algorithm there are two values. But you need to decide what is the most important characteristics: a good recall or a good precision?\n\nHave you considered using a F-measure that tries to combine both measures? http://en.wikipedia.org/wiki/F1_score\n\nEdit:\n\nMy suggestion was to use a histogram:\n\n\n\nBut another solution is to plot like this:\n\n\n\nBoth were done using LibreOffice.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Read integers from a string\r\n                \r\nI'm learning algorithms and I'm trying to make an algorithm that extracts numbers lets say ```\nn```\n in [1..100] from a string. Hopefully I get an easier algorithm.\nI tried the following :\n```\nprocedure ReadQuery(var t : tab); // t is an array of Integer.\nvar \n    x,v,e : Integer;\n    inputs : String;\nbegin\n    //readln(inputs);\n    inputs:='1  2 3';\n    j:= 1;\n    // make sure that there is one space between two integers\n    repeat\n        x:= pos('  ', inputs); // position of the space\n        delete(inputs, x, 1)\n    until (x = 0);\n    x:= pos(' ', inputs); // position of the space\n    while x <> 0 do\n    begin  \n        x:= pos(' ', inputs); //(1) '1_2_3' (2) '2_3'\n        val(copy(inputs, 1, x-1), v, e); // v = value | e = error pos\n        t[j]:=v;    \n        delete(inputs, 1, x); //(1) '2_3' (2) '3'\n        j:=j+1; //(1) j = 2 (2) j = 3\n        //writeln(v);   \n    end;\n    //j:=j+1; // <--- The mistake were simply here.\n    val(inputs, v, e);\n    t[j]:=v;\n    //writeln(v);   \nend;\n```\n\nI get this result ( resolved ) :\n```\n1\n2\n0\n3\n```\n\nexpected :\n```\n1\n2\n3\n```\n\nPS : I'm not very advanced, so excuse me for reducing you to basics.\nThanks for everyone who is trying to share knowledge.\n    ", "Answer": "\r\nYour code is rather inefficient and it also doesn't work for strings containing numbers in general.\nA standard and performant approach would be like this:\n```\ntype\n  TIntArr = array of Integer;\n\nfunction GetNumbers(const S: string): TIntArr;\n\nconst\n  AllocStep = 1024;\n  Digits = ['0'..'9'];\n\nvar\n  i: Integer;\n  InNumber: Boolean;\n  NumStartPos: Integer;\n  NumCount: Integer;\n\n  procedure Add(Value: Integer);\n  begin\n    if NumCount = Length(Result) then\n      SetLength(Result, Length(Result) + AllocStep);\n    Result[NumCount] := Value;\n    Inc(NumCount);\n  end;\n\nbegin\n\n  InNumber := False;\n  NumCount := 0;\n  for i := 1 to S.Length do\n    if not InNumber then\n    begin\n      if S[i] in Digits then\n      begin\n        NumStartPos := i;\n        InNumber := True;\n      end;\n    end\n    else\n    begin\n      if not (S[i] in Digits) then\n      begin\n        Add(StrToInt(Copy(S, NumStartPos, i - NumStartPos)));\n        InNumber := False;\n      end;\n    end;\n\n  if InNumber then\n    Add(StrToInt(Copy(S, NumStartPos)));\n\n  SetLength(Result, NumCount);\n\nend;\n```\n\nThis code is intentionally written in a somewhat old-fashioned Pascal way. If you are using a modern version of Delphi, you wouldn't write it like this. (Instead, you'd use a ```\nTList<Integer>```\n and make a few other adjustments.)\nTry with the following inputs:\n```\n521 cats, 432 dogs, and 1487 rabbits\n1 2 3 4 5000 star 6000\nalpha1beta2gamma3delta\na1024b2048cdef32\na1b2c3\n32h50s\n5020\n   012       123!    \nhorses\n(empty string)\n```\n\nMake sure you fully understand the algorithm! Run it on paper a few times, line by line.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "OpenMP speed up loss\r\n                \r\nI used OpenMP to speed up my program which is looking for a pattern in text.\n\nQuestion:\nWhy there is speed up loss on six and ten threads and then it increases on eight and twelve(chart below)? I thought that speed up line should be more straight (more threads = speed up increase). I tried to use various text size, algorithms and number of blocks but chart did not change.\n\nProgram/device information\n\n\ntext is divided in 10000 blocks\nomp_max_threads() returns 8\ntext size is 40MB\nprocessor has 4 cores\n\n\nCode\n\n```\ndouble start = omp_get_wtime();\n\n#pragma omp parallel for shared(pat, blockTxt, numOfBlocks,patSize) private (i) reduction(+:result)\nfor (i = 0; i < numOfBlocks; i++) {\n    result += Alghorithm().naive(pat, blockTxt[i], patSize, blockTxt[i].size());\n}\n\n\ndouble end = omp_get_wtime();\n```\n\n\nChart\n\n\n    ", "Answer": "\r\nThe idea you seem to have that \"more threads = speed up increase\" is fundamentally wrong. What you should strive for is using the hardware capability you have as fully and effectively as possible in order to reduce the time it takes to solve your problem.\n\nSometime (often) that translates into parallelizing your problem and distributing the work between the various processing units your computer(s) provide. But most of the time (not always, but the counter examples are quite rare), overloading your processing units (the cores basically) with more than one thread or process each, will only slow-down the overall computation. So your goals, for efficient parallel processing, are as follows:\n\n\nDivide the work / problem into smaller pieces that can be solved as independently from each-other as possible, while adding as little as possible extra work to recombine them\nDistribute these smaller tasks to the various processing units you have access to in a manner such that:\n\n\nAll of them are busy\nThey all have work to do that will complete in a time that is as even as possible between them\nThe overhead of having distributed the work and to put it back together is as small as possible\nAnd most importantly, to make sure that the part of the work that hasn't been parallelized is a small as possible\n\n\n\nIn your case, since you have 4 cores available, what you want is to get them 4 busy, with about the same amount of work for each.\n\nI don't know whether each of the small individual calls to your search algorithm are of identical size, but is they are, then the likelihood of having an optimal overall speedup with 4 threads is the highest.\n\nNow, as you have actually 2 hardware threads per core, there's still the chance that each of them might permit a better use of the hardware at hand. It isn't usually the case for problems that are computationally intensive, but yours apparently isn't too so since indeed, when using 8 threads, the speedup gets slightly better: it reaches 4 which is basically the absolute limit you shouldn't be able to go above (as you have 4 cores).\n\nWhy does 6 get you a slow down? Well, if you look at what your goals must be, you should realise that with 6 OpenMP threads to divide between 4 cores, you create a load imbalance between these cores and, due to the synchronization that the finalization of the parallelization induces, some of the cores will have to wait for the others to finish the extra work they have at the end. And this waiting is enough to cripple your overall efficiency. Idem for 10 threads.\n\nFinally, as I said, you're lucky enough that your parallelization overhead is small enough so that 8 threads gives you a perfect speedup, and even 12 (which is evenly divided by 4 cores)... But again, that only gives you a speedup of 4, which is fundamentally the upper limit of what your hardware is capable of.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Kadane Algorithm Negative Numbers\r\n                \r\n```\nint array[] = {-1, 4, -2, 5, -5, 2, -20, 6};\n```\n\n\nIf I had that array, my Kadane algorithm implementation to find the maximum subarray works:\n\n```\n  int max_so_far = INT_MIN;\n  int max_ending_here = 0;\n  for (int i = 0; i < size; i++) {\n    max_ending_here = max(max_ending_here + array[i], 0);\n    max_so_far = max(max_ending_here, max_so_far);\n  }\n\n  printf(\"%d\\n\", max_so_far);\n```\n\n\nHowever, if I have an array of all negatives:\n\n```\nint array[]= {-10, -10, -10};\n```\n\n\nIt won't work, it should return -10, but I get 0.\n\nHow can I make it work for negative numbers too?\n\nThank you!\n    ", "Answer": "\r\nWhen all elements are negative, the maximum subarray is the empty subarray, which has sum 0.\n\nBut if you want to change the algorithm to store the greatest element in this case, you could do the following:\n\n```\nint max_so_far      = INT_MIN;\nint max_ending_here = 0;\nint max_element     = INT_MIN;\n\nfor (int i = 0; i < size; i++)\n{\n    max_ending_here = max(max_ending_here + array[i], 0);\n    max_so_far      = max(max_ending_here, max_so_far);\n    max_element     = max(max_element, array[i]);\n}\n\nif (max_so_far == 0)\n  max_so_far = max_element;\n\nprintf(\"%d\\n\", max_so_far);\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Insertion sort c++ [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs debugging details. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     Edit the question to include desired behavior, a specific problem or error, and the shortest code necessary to reproduce the problem. This will help others answer the question.\r\n                \r\n                    \r\n                        Closed 8 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI'm trying to practice with algorithms and I'm trying to write a prorgam that uses the insertion sort algorithm to arrange numbers in an array in ascending order, the numbers in the array are recieved via user input.\n\nNow when I type in a bunch of random numbers, it only returns them in the order I put them in, anyone spot my error? See code below.\n\n```\n#include <iostream>\n\nusing namespace std;\n\nconst int MAX_SIZE = 20; //global constant\n\nvoid fillArray(int a[], int size, int& numberUsed)\n{\n    int next = 0;\n    int index = 0;\n\n    cin >> next;\n\n    while ((next >= 0) && (index < size)) //Á meðan tala er stærri en 0, og heildarfjöldi minni en 20\n    {\n        a[index] = next; //gildi sett inn í array\n        index++;\n        cin >> next;    //næsta tala lesin inn\n    }\n    numberUsed = index; //\n}\n\nvoid sort(int a[], int numberUsed)\n{\n    int j, temp;\n\n    for (int i = i; i < numberUsed; i++)\n    {\n        temp = a[i];\n\n        j = i -1;\n\n        while (temp < a[j] && j >= 0)\n        {\n            a[j+1] = a[j];\n            --j;\n        }\n        a[j+1] = temp;\n\n    }\n}\n\nvoid displayArray(const int a[], int numberUsed)\n{\n    for (int index = 0; index < numberUsed; index++)\n        cout << a[index] << \" \";\n    cout << endl;\n}\n\nint main()\n{\n    cout << \"This program sorts numbers from lowest to highest.\\n\";\n    cout << \"Enter up to 20 nonnegative whole numbers.\\n\";\n    cout << \"Mark the end of the list with a negative number.\\n\";\n\n    int sampleArray[MAX_SIZE], numberUsed;\n\n    fillArray(sampleArray, MAX_SIZE, numberUsed);\n    sort(sampleArray, numberUsed);\n\n    cout << \"In sorted order the numbers are:\\n\";\n    displayArray(sampleArray, numberUsed);\n\n    return 0;\n}\n```\n\n    ", "Answer": "\r\nworks fine, just replace \n\n```\nint i = i;\n```\n\n\nwith:\n\n```\nint i = 0;\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What is the algorithm to convert an Excel Column Letter into its Number?\r\n                \r\nI need an algorithm to convert an Excel Column letter to its proper number.\n\nThe language this will be written in is C#, but any would do or even pseudo code. \n\nPlease note I am going to put this in C# and I don't want to use the office dll.\n\nFor 'A' the expected result will be 1\n\nFor 'AH' = 34\n\nFor 'XFD' = 16384\n    ", "Answer": "\r\n```\npublic static int ExcelColumnNameToNumber(string columnName)\n{\n    if (string.IsNullOrEmpty(columnName)) throw new ArgumentNullException(\"columnName\");\n\n    columnName = columnName.ToUpperInvariant();\n\n    int sum = 0;\n\n    for (int i = 0; i < columnName.Length; i++)\n    {\n        sum *= 26;\n        sum += (columnName[i] - 'A' + 1);\n    }\n\n    return sum;\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm To Solve 5 x 5 Number Game\r\n                \r\nI have been trying to create an algorithm to solve 5x5 Number Game(click for rules and scoring). However I have been stuck because I do not know how to figure out the best position to figure out where the number goes. So far I figured to calculate the score but cannot progress further. The crappy code I came up so far is:\n```\nimport numpy as np\nimport random\n\n# i could use an array to represent board but im more familiar with nested lists\n# when i get the vertical score i do have to represent it as a array to do that math\nboard = [[1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]\n\n# gets the score horizontally\ndef getHorizontalScore(board):\n  score = 0\n  # i know it is inefficient but this is what i came up with inorder to figure this out\n  for list in board:\n    i_zero = list.count(0)\n    i_one = list.count(1)\n    i_two = list.count(2)\n    i_three = list.count(3)\n    i_four = list.count(4)\n    i_five = list.count(5)\n    i_six = list.count(6)\n    i_seven = list.count(7)\n    i_eight = list.count(8)\n    i_nine = list.count(9)\n    i_ten = list.count(10)\n    if i_zero > 1:\n      score += 0 * i_zero\n    if i_one > 1:\n      score += i_one\n    if i_two > 1:\n      score += i_two * 2\n    if i_three > 1:\n      score += i_three * 3\n    if i_four > 1:\n      score += i_four * 4\n    if i_five > 1:\n      score += i_five * 5\n    if i_six > 1:\n      score += i_six * 6\n    if i_seven > 1:\n      score += i_seven * 7\n    if i_eight > 1:\n      score += i_eight * 8\n    if i_nine > 1:\n      score += i_nine * 9\n    if i_ten > 1:\n      score += i_ten * 10\n  return score\n\n# gets the score verticaly (hopefully)\ndef getVerticalScore(board):\n  # represent board as an array\n  board = np.asarray(board)\n  #score\n  score = 0\n  # i know it is inefficient but this is what i came up with inorder to figure this out\n  # board.T is so useful praise numpy for adding this feature\n  for column in board.T:\n    i_one = list(column).count(1)\n    i_two = list(column).count(2)\n    i_three = list(column).count(3)\n    i_four = list(column).count(4)\n    i_five = list(column).count(5)\n    i_six = list(column).count(6)\n    i_seven = list(column).count(7)\n    i_eight = list(column).count(8)\n    i_nine = list(column).count(9)\n    i_ten = list(column).count(10)\n    if i_one > 1:\n      score += i_one\n    if i_two > 1:\n      score += i_two * 2\n    if i_three > 1:\n      score += i_three * 3\n    if i_four > 1:\n      score += i_four * 4\n    if i_five > 1:\n      score += i_five * 5\n    if i_six > 1:\n      score += i_six * 6\n    if i_seven > 1:\n      score += i_seven * 7\n    if i_eight > 1:\n      score += i_eight * 8\n    if i_nine > 1:\n      score += i_nine * 9\n    if i_ten > 1:\n      score += i_ten * 10\n    return score\n\n\ndef getScore(board):\n  return getVerticalScore(board) + getHorizontalScore(board)\n  \ndef displayBoard(board):\n  for list in board:\n    print(list)\n```\n\nIf someone could help me figure out how to make the algorithm and compact my code a bit, please help me.\n    ", "Answer": "\r\nYour score calculation for row and column is off.\nLet's take this board as an example:\n```\nboard = [[7, 7, 2, 3, 7],     # 14\n         [6, 6, 2, 3, 3],     # 18\n         [2, 4, 2, 8, 8],     # 16\n         [1, 10, 9, 5, 8],    # 0\n         [10, 10, 10, 5, 8]]  # 30\n#          0  20  6  16  24\n# total score = 144\n```\n\nIf I use your ```\ngetScore()```\n function I get 89 instead of 144\nThe code you're using to get multiples doesn't consider if the numbers are adjacent to each other or not:\n```\nfor list in board:\n#   ...\n    i_seven = list.count(7) # this will return 3 although only 2 7's are adjacent\n```\n\nIn this case it is better for you to use indices to traverse through your board. See this answer about accessing elements in nested list.\n```\n# Getting each element per row\nfor row in board:\n   for pos in range(5):\n      row_num = row[pos]\n\n# Getting each element per column\nfor col in range(5):\n   for pos in range(5):\n      col_num = board[pos][col]\n```\n\nYou don't need to count the 0's as they indicate an empty field on your board. So your algorithm knows that it's legal to place a new number on a field.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Division and remainder algorithm in NTL\r\n                \r\nI try to find or learn what a division algorithm use NTL(Number Theory Library), and complexity of this algorithm. (need algorithms in GF2X module and ZZ)\nThe implementation of these functions is a lot of code that is difficult to understand what is going in the algorithm.\n\nHas anyone uses NTL? Maybe someone knows standart division and remainder algorithms and their comlexity from number theory and can help?\n\nI can copy-paste listing of some functions. \n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to check if a number if a perfect number\r\n                \r\nI am looking for an algorithm to find if a given number is a perfect number. \n\nThe most simple that comes to my mind is :\n\n\nFind all the factors of the number\nGet the prime factors [except the number itself, if it is prime] and add them up to check if it is a perfect number. \n\n\nIs there a better way to do this ?. \nOn searching, some Euclids work came up, but didnt find any good algorithm. Also this golfscript wasnt helpful: https://stackoverflow.com/questions/3472534/checking-whether-a-number-is-mathematically-a-perfect-number . \n\nThe numbers etc can be cached etc in real world usage [which I dont know where perfect nos are used :)]\nHowever, since this is being asked in interviews, I am assuming there should be a \"derivable\"  way of optimizing it.   \n\nThanks !\n    ", "Answer": "\r\nIf the input is even, see if it is of the form ```\n2^(p-1)*(2^p-1)```\n, with ```\np```\n and ```\n2^p-1```\n prime.\n\nIf the input is odd, return \"false\".  :-)\n\nSee the Wikipedia page for details.\n\n(Actually, since there are only 47 perfect numbers with fewer than 25 million digits, you might start with a simple table of those.  Ask the interviewer if you can assume you are using 64-bit numbers, for instance...)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Analyzing Iterative Algorithms : basic operations, number of basic operations executed and class O(...) algorithms belongs to?\r\n                \r\nCan someone please explain to me clearly how to answer this questions i've been straggling to understand it ?\n\nThe Question says:\n\nLet X and Y be two arrays of n numbers. The Algorithms below calculate various expressions on the arrays. Analyze the time complexity of each algorithm and find :\n\ni) What are the algorithm's basic operations ?\n\nii) How many times  are the basic operations executed ?\n\niii) what is the class O(..) the algorithm belongs to ?\n\n```\nX+Y\n\nALGORITHM addArrays(X[0..n-1],Y[0..n-1)\n\n//Input: Two arrays X and Y of n numbers\n\n//Output: Array S= X +Y\n\nFor i <--0 to n-1 do\n\n           S[i] <-- X[u] + Y[i]\nOutput S[0 . . n-1]\n```\n\n    ", "Answer": "\r\ni ) Adds the two input arrays and returns the sum array (```\nS```\n). That's the line inside the loop that adds each input array's entry on each iteration of the loop. \n\nii) n times as you only call upon the addition operation n times.. \n\niii) O(n) because you're only going through n elements in total (2n accesses but that's ```\nO(n)```\n).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "I need an algorithm to get the chromatic number of a graph\r\n                \r\nGiven the adjacency matrix of a graph, I need to obtain the chromatic number (minimum number of colours needed to paint every node of a graph so that adjacent nodes get different colours).\n\nPreferably it should be a java algorithm, and I don't care about performance. \n\nThanks.\n\nEdit:\nrecently introduced a fix so the answer is more accurately. now it will recheck his position with his previous positions.\n\nNow a new question comes up. Which will be better to raise his 'number-color'? the node in which i am standing, or the node i am visiting (asking if i am adjacent to it)?\n\n```\npublic class Modelacion {\n\n    public static void main(String args[]) throws IOException{\n\n    //  given the matrix ... which i have hidden the initialization here\n\n        int[][] matriz = new int[40][40];\n\n        int color[] = new int[40];\n\n        for (int i = 0 ; i<40;i++)\n            color[i]=1;\n\n        Cromatico c = new Cromatico(matriz, color);\n\n    }\n}\n\nimport java.io.IOException;\n\n\npublic class Cromatico {\n\nCromatico(int[][]matriz, int[] color, int fila) throws IOException{\n\n        for (int i = 0; i<fila;i++){\n            for (int j = 0 ; j<fila;j++){\n                if (matriz[i][j] == 1 && color[i] == color [j]){\n                    if (j<i)\n                        color [i] ++;\n                    else\n                        color [j] ++;\n                }\n            }\n        }\n\n        int numeroCromatico = 1;\n        for (int k = 0; k<fila;k++){\n            System.out.print(\".\");\n            numeroCromatico = Math.max(numeroCromatico, color[k]);  \n        }\n\n        System.out.println();\n        System.out.println(\"el numero cromatico del grafo es: \" + numeroCromatico);\n\n    }\n}\n```\n\n    ", "Answer": "\r\nFinding the chromatic number of a graph is NP-Complete (see Graph Coloring). It is NP-Complete even to determine if a given graph is 3-colorable (and also to find a coloring). \n\nThe wiki page linked to in the previous paragraph has some algorithms descriptions which you can probably use.\n\nbtw, since it is NP-Complete and you don't really care about performance, why don't you try using brute force?\n\nGuess a chromatic number k, try all possibilities of vertex colouring (max k^n possibilities), if it is not colorable, new guess for chromatic number = min{n,2k}. If it is k-colorable, new guess for chromatic number = max{k/2,1}. Repeat, following the pattern used by binary search and find the optimal k.\n\nGood luck!\n\nAnd to answer your edit.\n\nNeither option of incrementing the color will work. Also, your algorithm is O(n^2). That itself is enough to tell it is highly likely that your algorithm is wrong, even without looking for counterexamples. This problem is NP-Complete!\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Mergesort Implementation.. Counting number of inversions in an array\r\n                \r\nI'm taking an online class on Algorithms and trying to implement a mergesort implementation of finding the number of inversions in a list of numbers. But, I cant figure what Im doing wrong with my implementation as the number of inversions returned is significantly lower than the number I get while doing a brute force approach. Ive placed my implementation of the mergesort approach below\n\n```\n /**\n   * \n  */\n\n package com.JavaReference;\n\n import java.io.BufferedReader;\nimport java.io.FileReader;\n import java.io.IOException;\n\npublic class ReadFile {\n\n\npublic static void main(String args[]){\n    int count=0;\n    Integer n[];\n\n\nint i=0;\n    try{\n    n=OpenFile();\n    int num[] = new int[n.length];\n\n    for (i=0;i<n.length;i++){\n        num[i]=n[i].intValue();\n    //  System.out.println( \"Num\"+num[i]);\n    }\n    count=countInversions(num);\n\n\n    }\n    catch(IOException e){\n        e.printStackTrace();\n    }\n\n    System.out.println(\" The number of inversions\"+count);\n\n\n}\n\n\n\n\n public static Integer[] OpenFile()throws IOException{\n\n    FileReader fr=new FileReader(\"C:/IntegerArray.txt\");// to put in file name.\n\nBufferedReader textR= new BufferedReader(fr);\nint nLines=readLines();\nSystem.out.println(\"Number of lines\"+nLines);\n\nInteger[] nData=new Integer[nLines];\nfor (int i=0; i < nLines; i++) {\n    nData[ i ] = Integer.parseInt((textR.readLine()));\n\n    }\ntextR.close();\n\nreturn nData;\n\n\n}\n\npublic static int readLines() throws IOException{\n\n\nFileReader fr=new FileReader(\"C:/IntegerArray.txt\");\nBufferedReader br=new BufferedReader(fr);\n\n\nint numLines=0;\n//String aLine;\n\nwhile(br.readLine()!=null){\n    numLines++;\n}\nSystem.out.println(\"Number of lines readLines\"+numLines);\nreturn numLines;\n\n}\n\npublic static int countInversions(int num[]){\n\nint countLeft,countRight,countMerge;\nint mid=num.length/2,k;\n\n\nif (num.length<=1){\n\n    return 0;// Number of inversions will be zero for an array of this size.\n}\n\nint left[]=new int[mid];\nint right[]=new int [num.length-mid];\n\n\nfor (k=0;k<mid;k++){\n    left[k]=num[k];\n}\n\nfor (k=0;k<mid;k++){\n    right[k]=num[mid+k];\n}\n\ncountLeft=countInversions(left);\ncountRight=countInversions(right);\n\nint[] result=new int[num.length];\ncountMerge=mergeAndCount(left,right,result);\n/*\n * Assign it back to original array.\n */\nfor (k=0;k<num.length;k++){\n    num[k]=result[k];\n}\n\nreturn(countLeft+countRight+countMerge);\n}\nprivate static int mergeAndCount(int left[],int right[],int result[]){\nint count=0;\nint a=0,b=0,i,k=0;\nwhile((a<left.length)&&(b<right.length)){\n\n    if(left[a]<right[b]){\n        result[k]=left[a++];// No inversions in this case.\n\n    }\n    else{// There are inversions.\n\n        result[k]=right[b++];\n        count+=left.length-a;\n    }\n    k++;\n\n    // When we finish iterating through a.\n\nif(a==left.length){\n    for (i=b;i<right.length;i++){\n        result[k++]=right[b];\n\n    }\n\n    }\nelse{\n    for (i=a;i<left.length;i++){\n\n    }\n}\n\n\n\n\n\n\n}\n\n\nreturn count;\n  }\n  }\n```\n\n\nI'm a beginner in Java and Algorithms so any insightful suggestions would be great!\n    ", "Answer": "\r\nI found two bugs:\n\n\nIn countInversions(), when ```\nnum```\n is split into ```\nleft```\n and ```\nright```\n you assume ```\nright```\n has ```\nm```\n elements. When ```\nnum.length```\n is odd, however, it will be ```\nm + 1```\n elements. The solution is to use ```\nright.length```\n instead of ```\nm```\n.\nIn mergeAndCount(), handling of the bit where one subarray is empty and the other one still has some elements is not done correctly.\n\n\nSide note:\nThere is absolutely no reason to use ```\nInteger```\n in your program, except for the ```\nInteger.parseInt()```\n method (which, by the way, returns an ```\nint```\n).\n\nCorrected code:\n\n```\n/**\n*\n*/\n\npackage com.JavaReference;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadFile {\n\n    public static void main(String args[]){\n        int count=0;\n        Integer n[];\n\n        int i=0;\n        try{\n            n=OpenFile();\n            int num[] = new int[n.length];\n\n            for (i=0;i<n.length;i++){\n                num[i]=n[i].intValue();\n                // System.out.println( \"Num\"+num[i]);\n            }\n            count=countInversions(num);\n\n        }\n        catch(IOException e){\n            e.printStackTrace();\n        }\n\n        System.out.println(\" The number of inversions\"+count);\n\n    }\n\n    public static Integer[] OpenFile()throws IOException{\n\n        FileReader fr=new FileReader(\"C:/IntegerArray.txt\");// to put in file name.\n\n        BufferedReader textR= new BufferedReader(fr);\n        int nLines=readLines();\n        System.out.println(\"Number of lines\"+nLines);\n\n        Integer[] nData=new Integer[nLines];\n        for (int i=0; i < nLines; i++) {\n            nData[ i ] = Integer.parseInt((textR.readLine()));\n\n        }\n        textR.close();\n\n        return nData;\n\n    }\n\n    public static int readLines() throws IOException{\n\n        FileReader fr=new FileReader(\"C:/IntegerArray.txt\");\n        BufferedReader br=new BufferedReader(fr);\n\n        int numLines=0;\n        //String aLine;\n\n        while(br.readLine()!=null){\n            numLines++;\n        }\n        System.out.println(\"Number of lines readLines\"+numLines);\n        return numLines;\n\n    }\n\n    public static int countInversions(int num[]){\n\n        int countLeft,countRight,countMerge;\n        int mid=num.length/2,k;\n\n        if (num.length<=1){\n\n            return 0;// Number of inversions will be zero for an array of this size.\n        }\n\n        int left[]=new int[mid];\n        int right[]=new int [num.length-mid];\n\n        for (k=0;k<mid;k++){\n            left[k]=num[k];\n        }\n\n        // BUG 1: you can't assume right.length == m\n        for (k=0;k<right.length;k++){\n            right[k]=num[mid+k];\n        }\n\n        countLeft=countInversions(left);\n        countRight=countInversions(right);\n\n        int[] result=new int[num.length];\n        countMerge=mergeAndCount(left,right,result);\n        /*\n        * Assign it back to original array.\n        */\n        for (k=0;k<num.length;k++){\n            num[k]=result[k];\n        }\n\n        return(countLeft+countRight+countMerge);\n    }\n    private static int mergeAndCount(int left[],int right[],int result[]){\n        int count=0;\n        int a=0,b=0,i,k=0;\n        while((a<left.length)&&(b<right.length)){\n\n            if(left[a]<right[b]){\n                result[k]=left[a++];// No inversions in this case.\n\n            }\n            else{// There are inversions.\n\n                result[k]=right[b++];\n                count+=left.length-a;\n            }\n            k++;\n        }\n\n        // BUG 2: Merging of leftovers should be done like this\n        while (a < left.length)\n        {\n            result[k++] = left[a++];\n        }\n        while (b < right.length)\n        {\n            result[k++] = right[b++];\n        }\n\n        return count;\n    }\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Huge Fibonacci Number\r\n                \r\nI just started learning algorithms and I am stuck with the problem of finding a huge Fibonacci number.  My example input is 5949.\nThe output should be calculated in less than 5 seconds.\n\nHere is my attempt:\n\n```\ndef calc_fib(n):\n    if n < 0:\n       print (\"Error. Bad input\")\n    elif n <= 2:\n        return 1\n    else:\n        F = []\n    for i in range (2,n):\n        F[i] = F[i-1]+F[i-2]\n    return F[n]\n\nn = int(input())\nprint(calc_fib(n))\n```\n\n\nBut I get an error on line with arrays: ```\nIndexError: list index out of range```\n\n    ", "Answer": "\r\nyou created a empty list and are indexing position in the list which do not exist.\nAlso use append as you are adding new elements\n\n```\ndef calc_fib(n):\n    if n < 0:\n       print (\"Error. Bad input\")\n    elif n <= 2:\n        return 1\n    else:\n        F = [0,1] # <- change\n    for i in range (2,n):\n        F.append(F[i-1]+F[i-2]) # <- change\n    return F[n]\n\nn = int(input())\nprint(calc_fib(n))\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Why can't I set the index value of the loop algorithm?\r\n                \r\nSo, basically I am practicing some algorithms. And I am trying to figure out why the following code is giving me an error when I try to set the value of number[i]? I know it is probably simple but I don't 'why' it does not work.\n\n```\npublic int SumOfRandomNumbersWithStrings(string randomness)\n{\n    //Get the value of each index in the array\n    string number = \"\";\n    for (int i = 0; i < randomness.Length; i++)\n    {\n        number[i] = randomness[i];\n    }\n    //temporarily one until I finish the algorithm\n    return 1;\n}\n```\n\n    ", "Answer": "\r\n\n  why the following code is giving me an error when I try to set the value of number[i]\n\n\nBecause strings in C# are immutable.\n\nArrays of characters are mutable, though, so you can do this:\n\n```\nchar number[] = new char[randomness.Length];\nfor (int i = 0; i < randomness.Length; i++)\n{\n     number[i] = randomness[i];\n}\nstring numStr = new string(number);\n//temporarily one until I finish the algorithm\nreturn 1;\n```\n\n\nThe most common way of building strings in C# is by using the ```\nStringBuilder```\n class. It lets you change the content of the string by appending, removing, or replacing characters inside the string.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Maximize size of bucket such that product is not cube [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 3 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nIn a given sequence of non- negative numbers,we have to put some numbers in a bucket, such that the product of any two distinct elements in bucket is not a cube and numbers in bucket is maximum. Find the maximum number of elements in bucket.\n\nIs there any algorithm to do such question?\n    ", "Answer": "\r\nfor any two positive integers m and n, m⋅n is a cube iff there are positive integers a and b such that:\n\n\n(m = a and n = a²), or\n(m = a²b and n = ab²), or\n(m = a³ and n = b³)\n\n\nIf you'll factor all inputs, you can check which pairs cannot be added together.\n\nThere are several other methods to check if a number is a perfect cube:\n\n\nTake the cube root from a value. Then round that outcome to get its integer value. Next, raise that rounded value to the third power. When that outcome matches the original number, that number is a perfect cube. (Note that this method subjects to rounding error for large integers). See here.\nThe digital root of a perfect cube is 1, 8, or 9 (0). See here.\nPre-construct a list of all the cubes in a given range. See here.\nBased on its binary representation (excellent for large integers): See here\n\n\nNext, you'll need to find the maximum cardinality subset that can be put together in the bucket.\n\nYou can build a graph, where each node represents an input number, and there is an edge between two nodes if the two numbers can be added together. Now, find a Maximum Clique (the size of a maximum clique is called the Clique Number of the graph).\n\nEquivalently, you can add an edge between two nodes if the two numbers cannot be added together. Now, find a Maximum Independent Vertex Set.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Humanized or natural number sorting of mixed word-and-number strings\r\n                \r\nFollowing up on this question by Sivaram Chintalapudi, I'm interested in whether it's practical in PostgreSQL to do natural - or \"humanized\" - sorting \" of strings that contain a mixture of multi-digit numbers and words/letters. There is no fixed pattern of words and numbers in the strings, and there may be more than one multi-digit number in a string.\n\nThe only place I've seen this done routinely is in the Mac OS's Finder, which sorts filenames containing mixed numbers and words naturally, placing \"20\" after \"3\", not before it.\n\nThe collation order desired would be produced by an algorithm that split each string into blocks at letter-number boundaries, then ordered each part, treating letter-blocks with normal collation and number-blocks as integers for collation purposes. So:\n\n```\n'AAA2fred'```\n would become ```\n('AAA',2,'fred')```\n and ```\n'AAA10bob'```\n would become ```\n('AAA',10,'bob')```\n. These can then be sorted as desired:\n\n```\nregress=# WITH dat AS ( VALUES ('AAA',2,'fred'), ('AAA',10,'bob') )\nregress-# SELECT dat FROM dat ORDER BY dat;\n     dat      \n--------------\n (AAA,2,fred)\n (AAA,10,bob)\n(2 rows)\n```\n\n\nas compared to the usual string collation ordering:\n\n```\nregress=# WITH dat AS ( VALUES ('AAA2fred'), ('AAA10bob') )\nregress-# SELECT dat FROM dat ORDER BY dat;\n    dat     \n------------\n (AAA10bob)\n (AAA2fred)\n(2 rows)\n```\n\n\nHowever, the record comparison approach doesn't generalize because Pg won't compare ROW(..) constructs or records of unequal numbers of entries.\n\nGiven the sample data in this SQLFiddle the default en_AU.UTF-8 collation produces the ordering:\n\n```\n1A, 10A, 2A, AAA10B, AAA11B, AAA1BB, AAA20B, AAA21B, X10C10, X10C2, X1C1, X1C10, X1C3, X1C30, X1C4, X2C1\n```\n\n\nbut I want:\n\n```\n1A, 2A, 10A, AAA1BB, AAA10B, AAA11B, AAA20B, AAA21B, X1C1, X1C3, X1C4, X1C10, X1C30, X2C1, X10C10, X10C2\n```\n\n\nI'm working with PostgreSQL 9.1 at the moment, but 9.2-only suggestions would be fine. I'm interested in advice on how to achieve an efficient string-splitting method, and how to then compare the resulting split data in the alternating string-then-number collation described. Or, of course, on entirely different and better approaches that don't require splitting strings.\n\nPostgreSQL doesn't seem to support comparator functions, otherwise this could be done fairly easily with a recursive comparator and something like ```\nORDER USING comparator_fn```\n and a ```\ncomparator(text,text)```\n function. Alas, that syntax is imaginary.\n\nUpdate: Blog post on the topic.\n    ", "Answer": "\r\nBuilding on your test data, but this works with arbitrary data. This works with any number of elements in the string.\n\nRegister a composite type made up of one ```\ntext```\n and one ```\ninteger```\n value once per database. I call it ```\nai```\n:\n\n```\nCREATE TYPE ai AS (a text, i int);```\n\n\nThe trick is to form an array of ```\nai```\n from each value in the column. \n\n```\nregexp_matches()```\n with the pattern ```\n(\\D*)(\\d*)```\n and the ```\ng```\n option returns one row for every combination of letters and numbers. Plus one irrelevant dangling  row with two empty strings ```\n'{\"\",\"\"}'```\n Filtering or suppressing it would just add cost. Aggregate this into an array, after replacing empty strings (```\n''```\n) with ```\n0```\n in the ```\ninteger```\n component (as ```\n''```\n cannot be cast to ```\ninteger```\n).\n\n```\nNULL```\n values sort first - or you have to special case them - or use the whole shebang in a ```\nSTRICT```\n function like @Craig proposes.\n\nPostgres 9.4 or later\n\n```\nSELECT data\nFROM   alnum\nORDER  BY ARRAY(SELECT ROW(x[1], CASE x[2] WHEN '' THEN '0' ELSE x[2] END)::ai\n                FROM regexp_matches(data, '(\\D*)(\\d*)', 'g') x)\n        , data;\n```\n\n\ndb<>fiddle here\n\nPostgres 9.1 (original answer)\n\nTested with PostgreSQL 9.1.5, where ```\nregexp_replace()```\n had a slightly different behavior.\n\n```\nSELECT data\nFROM  (\n    SELECT ctid, data, regexp_matches(data, '(\\D*)(\\d*)', 'g') AS x\n    FROM   alnum\n    ) x\nGROUP  BY ctid, data   -- ctid as stand-in for a missing pk\nORDER  BY regexp_replace (left(data, 1), '[0-9]', '0')\n        , array_agg(ROW(x[1], CASE x[2] WHEN '' THEN '0' ELSE x[2] END)::ai)\n        , data         -- for special case of trailing 0\n```\n\n\nAdd ```\nregexp_replace (left(data, 1), '[1-9]', '0')```\n as first ```\nORDER BY```\n item to take care of leading digits and empty strings.\n\nIf special characters like ```\n{}()\"',```\n can occur, you'd have to escape those accordingly.\n  @Craig's suggestion to use a ```\nROW```\n expression takes care of that.\n\n\nBTW, this won't execute in sqlfiddle, but it does in my db cluster. JDBC is not up to it. sqlfiddle complains:\n\n\n  Method org.postgresql.jdbc3.Jdbc3Array.getArrayImpl(long,int,Map) is\n  not yet implemented.\n  \n\n\nThis has since been fixed: http://sqlfiddle.com/#!17/fad6e/1\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Efficient algorithm for finding number of almost sorted intervals\r\n                \r\nIn a problem, I have to find the number of consecutive sub sequences of an array which have the following conditions satisfied(They are called almost sorted intervals)\n\n\nThe first number in the sequence is the smallest.\nThe last number is the largest.\n\n\nI wrote the following code, Which is giving me Time Limit Exceeded error. How can I optimize the algorithm and my code.\n\n```\nimport sys\n\n\ndef ans(values):  \n\ntotal=0;\nsmall=[]    # Taking a array which contains the smallest till that index\nsvar1,lvar2=values[0],values[0]\n\nfor i in range(len(values)):\n    if svar1<values[i]:\n        small.append(svar1)\n    elif svar1>=values[i]:   \n        svar1=values[i]\n        small.append(svar1)\n\nfor i in range(len(values)):   # for each value\n    k=i\n    highest=values[i]          # we consider the highest \n    lowest=values[i]           # we consider the lowest\n    flag=0\n    while k>=0:                # iterating back\n        if values[k]>highest: #if we encounter an element greater than the last element \n            break\n        if lowest>=values[k]:  #I try to maintain the lowest if I encounter one.\n            total+=1             # counting for the answer\n            lowest=values[k]     \n        if values[k]==small[k]:  #I use that array and try to break the loop if I found that the smallest till then and the lowest are same.\n            flag=1\n        if k>0 and flag==1:\n            if values[k-1]>small[k]:\n                break\n\n        k-=1\nreturn total\n\nif __name__==\"__main__\":\n    y=input()\n    values=map(int,sys.stdin.readline().split(\" \"))\n    print ans(values)\n```\n\n\nSorry for pasting the whole code. I hope it is understandable. Can I get a hint on how I can optimize it? The array length will be ```\n1<=N<=10^6```\n\n\nExample:\n\n```\n3 1 2 5 4 will give answer as 8\n```\n\n    ", "Answer": "\r\nget all subsequences where the first element ```\nele[0]```\n is the ```\nminimum```\n and the last element ```\nele[-1]```\n is the ```\nmax```\n\n\n```\nvalues = [3,1,2,5,5]\n\ndef conseq_sequences(li):\n    seq = []\n    for i in range(len(li) + 1):\n        seq += ([ele for ele in zip(*(li[i:] for i in range(i))) if ele[0] == min(ele) and ele[-1] == max(ele)])\n    return len(filter(None, seq)) # remove []\n\nIn [5]:  conseq_sequences(values)\nOut[5]: 11\n```\n\n\nWe use + 1 to include the full list in case if we had values like  ```\n[1,3,1,2,5,5]```\n. \n\n```\nfor i in range(len(li) + 1):\n```\n\n\nThen we go through each possible subsequence filtering out elements that don't match our condition.\n\n```\nseq += ([ele for ele in zip(*(li[i:] for i in range(i))) if ele[0] == min(ele) and ele[-1] == max(ele)])\n```\n\n\nFinally we return the len of the list filtering any empty lists []:\n\n```\n(filter(None, seq)) = [(3,), (1,), (2,), (5,), (5,), (1, 2), (2, 5), (5, 5), (1, 2, 5), (2, 5, 5), (1, 2, 5, 5)]\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Javascript multiply algorithm\r\n                \r\nI am trying to learn JavaScript arrays and algorithms and for loops.\nI am trying to make a function, that takes an array as a parameter, and has to multiply each number in the array with the next number.\nI can't seem to figure out what I am missing.\nIt just returns the array\n```\nfunction xNumbers (arr) {\n    for (let i = 0; i < arr.lenght-1; i++) {\n        var num1 = arr[i]\n        var num2 = arr[i+1]\n        var result;\n\n        try {\n            if (typeof (num1) == 'string' || typeof (num2) == 'string') {\n                throw num1, \"or\", num2, \"is not a number\";\n            } else if (num2 == 0) {\n                throw 'Cant multiply with 0'\n            } else {\n                result = num1*num2\n            }\n                \n            \n        } catch (error) {\n            console.log(error);\n            result = NaN;\n\n        } finally {\n            arr[i] = result\n        }\n        \n    }\n    return arr\n}\n\nconsole.log(xNumbers([2,3,4,5]));\n// expected output 6, 12, 20 - doesn't work\n```\n\n    ", "Answer": "\r\nyou can use the following code.\n\r\n\r\n```\nfunction xNumbers (arr) {\n    arr = arr.map(x => Number(x))\n    result = new Array(arr.length -1)\n    for (let i = 0; i < arr.length-1; i++) {\n        result[i] = arr[i] * arr[i + 1]\n    }\n    return result\n}\n\nconsole.log(xNumbers([2,3,4,5]));```\n\r\n\r\n\r\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Out of memory (allocated 908066816) (tried to allocate 805306376 bytes) PHP Error Message\r\n                \r\nI created a PHP Algorithm and the code for this algorithm which makes every permutation of letters and numbers is this:\n\n```\n    <?php\nset_time_limit(0);\nini_set('max_execution_time',-1);\nini_set('memory_limit', '-1'); \nfunction florg ($n, $elems) {\n    if($n > 0){\n        $tmp_set = array();\n        $res = florg($n-1, $elems);\n        foreach ($res as $ce) {\n            foreach ($elems as $e) {\n                array_push($tmp_set, $ce . $e);\n            }\n        }\n        return $tmp_set;\n    }\n    else{\n        return array('');\n    }\n}\n$elems = array('q','w','e','r','t','y','u','i','o','p','a','b','c','d','f','g','h','j','k','l','z','x','c','v','b','n','m','1','2','3','4','5','6','7','8','9','0');\n$v = FlOrG(7, $elems);\nforeach($v as $child) {\n    print $child . \"\\n\";\n}\n?>\n```\n\n\nBasically what it does, is to make a 7 character text using all possible combinations of letters and numbers on keyboard. \n\nSo because this program is a little bit huge, I added these 3 lines at the top of the page:\n\n```\nset_time_limit(0);\nini_set('max_execution_time',-1);\nini_set('memory_limit', '-1'); \n```\n\n\nNow whenever I run this program on XAMPP, I get this error message:\n\nFatal error: Out of memory (allocated 908066816) (tried to allocate 805306376 bytes) on line 11\n\nAnd here is line 11:\n\n\n  array_push($tmp_set, $ce . $e);\n\n\nSo I don't understand the relation between this error and this line! I also ran this program online on my web hosting service, but again got the same error message.\n\nI think the code looks fine, therefore my question is how can I run this program ? What is the problem with ```\narray_push()```\n in this code ? \n\nI would really appreciate any help or idea from you guys cause I've been had this problem for weeks...\n    ", "Answer": "\r\nYou could try to replace ```\narray_push($array, $value)```\n with same-effect-having ```\n$array[] = $value```\n notation like in your example:\n\n```\nforeach ($res as $ce) {\n    foreach ($elems as $e) {\n        $tmp_set[] = $ce . $e;\n    }\n}\n```\n\n\nand variable ```\n$v = florg(7, $elems);```\n\n\nin this 7 is a big so, and it is combining the values from each other so, first try to add small number than check one by one. like\n\n```\nflorg(1,$elems);\nflorg(2,$elems);\nflorg(3,$elems);\n```\n\n\nand so on. \n\nHope this will helps you\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Unicode unknown \"�\" character detection in PHP\r\n                \r\nIs there any way in PHP of detecting the following character ```\n�```\n?\n\nI'm currently fixing a number of UTF-8 encoding issues with a few different algorithms and need to be able to detect if ```\n�```\n is present in a string. How do I do so with ```\nstrpos```\n?\n\nSimply pasting the character into my codebase does not seem to work.\n\n```\nif (strpos($names['decode'], '?') !== false || strpos($names['decode'], '�') !== false)\n```\n\n    ", "Answer": "\r\nConverting a UTF-8 string into UTF-8 using ```\niconv()```\n using the ```\n//IGNORE```\n parameter produces a result where invalid UTF-8 characters are dropped.\n\nTherefore, you can detect a broken character by comparing the length of the string before and after the iconv operation. If they differ, they contained a broken character.\n\nTest case (make sure you save the file as UTF-8):\n\n```\n<?php\n\nheader(\"Content-type: text/html; charset=utf-8\");\n\n$teststring = \"Düsseldorf\";\n\n// Deliberately create broken string\n// by encoding the original string as ISO-8859-1\n$teststring_broken = utf8_decode($teststring); \n\necho \"Broken string: \".$teststring_broken ;\n\necho \"<br>\";\n\n$teststring_converted = iconv(\"UTF-8\", \"UTF-8//IGNORE\", $teststring_broken );\n\necho $teststring_converted;\n\necho \"<br>\";\n\nif (strlen($teststring_converted) != strlen($teststring_broken  ))\n echo \"The string contained an invalid character\";\n```\n\n\nin theory, you could drop ```\n//IGNORE```\n and simply test for a failed (empty) ```\niconv```\n operation, but there might be other reasons for a iconv to fail than just invalid characters... I don't know. I would use the comparison method.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Number Algorithm for Barcodes [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question is off-topic. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it's on-topic for Stack Overflow.\r\n                \r\n                    \r\n                        Closed 10 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI'm having these kind of serial codes that should print in a ID card as a barcode but the problem is barcode of these numbers is larger than the ID card width.\n\n\n9913010001CHEREV0215\n9913010002CHEREV0215\n9913010003CHEREV0215\n9913010004CHEREV0215\n\n\nIs there any possibility to reduce the number of the digits by using an algorithm to generate a fix number of digits, \n\nEx- for the above numbers there are 20 characters and using an algorithm it can be reduced in to 10 characters . \n\nnot only that I need to reverse the original code (20 characters ) from the above barcoded code(10 character code) .\n\nIs there any algorithm to achieve this from C#?\n    ", "Answer": "\r\nThere's not really an algorithm behind barcodes. Most barcodes are just a sequence of lines, where each couple of lines represents a character. Barcodes are often acquired by just printing the text in a special barcode font. \n\nPrinting smaller:\nYou can either print it smaller, or use a different type of barcode. Note however that not all types of barcodes support all those characters. Some support the entire alphabet, while others support only numbers. \n\nAlso, there's a limit of how small you can print it. For most barcodes there are official guidelines of minimum size, minimum printing resolution and minimum amount of whitespace that needs to be open around the barcode. \n\nDropping below those limits will affect the readability of your barcode, make it harder for the people using them. But you can get away by removing a millimeter or two of the height, and if your paper quality is good and the printing resolution is high enough, you may get away with a little smaller.\n\nReducing string length:\nReducing the length of the string is a possibility, but remember that you cannot shorten every 20 byte string to 10 bytes. If you got specific knowledge about the string, you could use that. For instance if 'CHEREV' is a constant part, one could wonder if it should be part of the barcode at all. [edit] Initially I overlooked the comment where you said it isn't constant.\n\nNumbers only:\nAlphabetic barcodes have more characters and therefor are usually wider. If you could change your batch code text to a number, then you could use a narrower numbers-only barcode.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Max number in array algorithm, when array's size is power of 2\r\n                \r\nI've found this algorithm and i have been asked what this algorithm does. \n\nGiven an array A with Integers, when the array size is power of 2. \nWhat does the algorithm returns? \n\n```\n1. k <- n\n2. while k>1 do:\n   2.1. k <- k/2\n   2.2. for i <- 1 to k do:\n      2.2.1. if A[i] < A[i+k]\n           2.2.1.1 swap A[i] and A[i+k]\n3. return A[1]\n```\n\n\nI'm almost sure this algorithm returns the largest number in the array. \n\nMy questions are:\n\n\nHow long the algorithm takes? I think O(n), but not sure.\nHow can I proof it returns the largest number?\n\n\nThanks a lot!\n    ", "Answer": "\r\nHow long the algorithm takes? I think O(n), but not sure.\n\n```\nO(n)```\n is correct. Note that on each iteration you are reducing the size of the array to be checked by half, so there will be exactly ```\nlog(n)```\n steps, since ```\nn```\n is a power of two. \n\nSo the final complexity is ```\nn/2 + n/4 + n/8 + ... + 1```\n, these are exactly ```\nlog(n)```\n terms. This is a geometric sequence whose summation is ```\nn-1```\n, which is ```\nO(n)```\n.\n\nHow can I proof it returns the largest number?\n\nIn each iteration ```\ni```\n, you have the largest element in the first ```\nn/2^i```\n elements of the array, so after ```\nlog(n)```\n steps the first element of the array is the largest number of the array.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for obtaining a sum with minimum number of terms\r\n                \r\nThe problem statement is following:\nGiven ```\nN```\n. We need to find ```\nx1```\n,```\nx2```\n,```\n..```\n,```\nxp```\n such that ```\nN = x1 + x2 + .. + xp```\n, p must be minimum(means number of terms in the sum) and we also must be able to get all the numbers from 1 to (N-1) from the sum of the subset of (x1,x2,x3..xp).And numbers in the set might be repeated also.\n\nFor example if N=7.\n\n```\n7 = 1+2+4```\n\nAnd ```\n6= (2,4)```\n , ```\n5= (4,1)```\n, ```\n4 = (4)```\n,```\n3=(1,2)```\n and so on.\n\nExample 2:\n```\n8 = 1+2+4+1```\n\n\nExample 3:(invalid)\n8 = 1+2+5\nBut we can't get 4 from the subset of (1,2,5).So (1,2,5) is not a valid combination\n\nMy approach is if 'N-1'can be written as sum of p terms than 'N' either have p or p+1 terms. But that approach will require to check all possible combinations which sums up to \"N-1\" and have \"p\" terms. Can anyone has better solution other than this?\n\nSolution:\nStep1:\nAssume that we got \"K\" entries in our set as our answer. Therefore we can obtain 2^K different numbers of sums from these numbers because each entry either will appear or not appear in the sum. And also if the the number is \"N\", we need to compute the sum for '1' to 'N'. Therefore  (2^K -1) = N K=log(N+1)\nStep2:\nAfter the step1, we know that our answer must include \"K\" entries but what these entries actual are? Assume that our entries are (a1,a2,a3...ak). So number P can be written as \nP = a1*b1 + a2*b2 + a3*b3....+ ak*bk. Where all b[i] = 0 or 1. Here, we can see P as a decimal representation of binary number (b1 b2 b3  bk), therefore we can take a[i] = 2^(i-1).\n    ", "Answer": "\r\nYou should take all numbers 1,2,4 ....2^k, N-(1+...+2^k). (The last one only if it doesn't equal to 0)\nProof\n\nFirst of all, if we only get ```\nk```\n numbers, we can get maximum ```\n2^k - 1```\n different sums except 0. So if ```\nN>=2^k```\n, We need at least ```\nk + 1```\n numbers. So you can see that if our group of numbers correct it's minimum by size(or one of the minimums)\n\nIt's easy to see that we can get any number from 0 to ```\n2^(k+1) - 1```\n using first numbers. What If we need more? We just get last number because it's less than ```\n2^(k + 1)```\n. And get difference using first elements\n\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Python Algorithm To Match Similar Numbers on Array\r\n                \r\nSo I am looking to create a python algorithm and need some guidance going the right path as I can't wrap my head around how to do this.\nSay I have an array that looks something like this:\n```\n[500, 300, 100, 200, 300,\n 600, 400, 200, 50, 100, \n 550, 350, 100, 100, 200]\n```\n\nWhat I want is for the algorithm to return the best possible combination of similar numbers and arrange them in a row, but here is the trick. The first number needs to stay the first, second second, and third through six get added to together to match the first two but can be moved individually. So the result should be something like this:\n```\n[500, 300, 100, 200, 100,\n600, 400, 200, 50, 300,\n550, 350, 100, 100, 200]\n```\n\nI don't even know if that's the best possible combination but it only required two moves. And the numbers (adding the last three together) are somewhat close:\n```\n[500, 300, 400,\n[600, 400, 550,\n550, 350, 400]\n```\n\nNo idea on how I can approach this? Any guidance?\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "An iterative algorithm for Fibonacci numbers\r\n                \r\nI am interested in an iterative algorithm for Fibonacci numbers, so I found the formula on wiki...it looks straight forward so I tried it in Python...it doesn't have a problem compiling  and formula looks right...not sure why its giving the wrong output...did I not implement it right ? \n\n```\ndef fib (n): \n    if( n == 0):\n        return 0\n    else:\n        x = 0\n        y = 1\n        for i in range(1,n):\n            z = (x + y)\n            x = y\n            y = z\n            return y\n\nfor i in range(10):\n    print (fib(i))\n```\n\n\noutput\n\n\n  0\n  None\n  1\n  1\n  1\n  1\n  1\n  1  \n\n    ", "Answer": "\r\nThe problem is that your ```\nreturn y```\n is within the loop of your function. So after the first iteration, it will already stop and return the first value: 1. Except when ```\nn```\n is 0, in which case the function is made to return ```\n0```\n itself, and in case ```\nn```\n is 1, when the for loop will not iterate even once, and no ```\nreturn```\n is being execute (hence the ```\nNone```\n return value).\n\nTo fix this, just move the ```\nreturn y```\n outside of the loop.\n\nAlternative implementation\n\nFollowing KebertX’s example, here is a solution I would personally make in Python. Of course, if you were to process many Fibonacci values, you might even want to combine those two solutions and create a cache for the numbers.\n\n```\ndef f(n):\n    a, b = 0, 1\n    for i in range(0, n):\n        a, b = b, a + b\n    return a\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "unsorted matrix search algorithm\r\n                \r\nis there a suitable algorithm that allows a program to search through an unsorted matrix in search of the biggest prime number within. The matrix is of size m*n and may be populated with other prime numbers and non-primes. The search must find the biggest prime.\n\nI have studied the divide and conquer algorithms, and binary trees, and step-wise searches, but all of these deal with sorted matrices. \n    ", "Answer": "\r\nFirst of all, it doesn't matter if you are using m * n matrix or vector with m * n elements. Generally speaking, you will have to visit each matrix element at least once, as it is not sorted. There are few hints to make process faster.\n\n\nIf it is big matrix, you should visit elements row by row (and not column by column) as matrix is stored that way in memory so that elements from the same row will likely be in the cache once you access one of them.\nTesting number's primeness is the most costly part of your task so if numbers in matrix are not too big, you can use Eratosthenes' sieve algorithm to make lookup of prime numbers in advance. https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\nIf you don't use Eratosthenes' sieve, maybe it will be beneficial if you sort your numbers before algorithm so that you can test numbers from the greatest to the smallest. In that case, your algorithm can stop once the first prime number is found. If you don't sort it, you will have to test all numbers, which is probably slowest method.\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Bell Numbers algorithm\r\n                \r\nI'm trying to write an algorithm for finding out the number of ways n numbers can be ordered. For example, two number say a and b can be ordered in 3 ways.. \n\nSimilarly, 3 numbers can be arranged in 13 ways. \n\nI found out that I can solve the problem using dynamic programming. And here's is what I'm thinking to have layers which represent different ordering. Ex. ```\na > b```\n have two layers and ```\na = b```\n has a single layer and so on. So that I can use it for later purposes as done in dynamic programming. But I'm not able to write a recurrence relation for the same. Can someone suggest me how can I write that? \n    ", "Answer": "\r\nAssume f(n,k) = number of possible ways by having k inequality (and so n-k-1 equality), so:\nassume you have n-1 number, now you want to add another number and calculate f(n,k), then we have two possibility:\n\n1) There are (k-1) inequalities in those (n-1) numbers, and there are (k+1)(f(n-1,k-1)) ways to add n'th number so that new inequality added.\n\n2) There are k inequalities in those (n-1) numbers, and there are (k+1)(f(n-1,k)) ways to add n'th number with no additional inequality.\n\n```\nf(n,k) = (k+1)(f(n-1,k-1) + f(n-1,k))\n```\n\n\nand what you want is sum of them (from zero to n-1), Bellow code is in c# (just tested for simple cases), in fact We just calculate number of possible ways not generating all ways..\n\n```\nclass EqualInequalPermutation\n{\n    public int OrderingsNumber(int n)\n    {\n        int[][] f = new int[n+1][];\n        for (int i = 0; i < n+1; i++)\n        {\n            f[i] = new int[n];\n            for (int j = 0; j < n; j++)\n                f[i][j] = 0;\n        }\n        f[1][0] = 1;\n        int factorial = 1;\n        for (int i = 1; i <= n; i++)\n        {\n            f[i][0] = 1;\n            factorial *= i;\n            f[i][i - 1] = factorial;\n            for (int k = 1; k < n; k++)\n            {\n                f[i][k] = (k + 1) * (f[i - 1][k - 1] + f[i - 1][k]);\n            }\n        }\n        int answer = 0;\n        for (int i = 0; i < n; i++)\n        {\n            answer += f[n][i];\n        }\n        return answer;\n    }\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Python: Find Prime Number Algorithm\r\n                \r\nRecently I was given a challenge to my coding skills by my teacher since he saw that I was already knowledgeable in what he was teaching. The question is as follows.\n\nCreate a program that prompts the user for 2 numbers. The program will then display all the prime numbers in between the two given numbers, including the given numbers. Note: You cannot assume the first input is bigger than the second input.\n\nSo I took this question and built a fairly simple algorithm and ran it and it worked. I opened it today to find out for some reason my output is occasionally wrong, for example when you input 8 and 29 I get 27. I am looking for HINTS as to what is wrong with my logic because I cannot for the life of me figure out what Im doing wrong. I dont want straight up fixes because I would like to learn as much from this and doing it as much as possible by myself.\n\n```\nnumbers = [int(input(\"First Number\")), int(input(\"Second Number\"))]\nnumbers.sort()\n\nnumList = []\n#Removing Even Numbers\nfor num in range(numbers[0],numbers[1] + 1):\n    if num % 2 != 0:\n        numList.append(num)\n\n#Checking For Prime Numbers\nfor currNum in numList:\n   #Set Start number to divide\n    i = 2\n    while i < currNum:\n        #Checks if the currNum can be divisble by i and is a whole number\n        if currNum % i != 0:\n          i = i + 1\n        else :\n          numList.remove(currNum)\n          break\n\nprint(numList)\n```\n\n\nFrom what I have learned from testing this out it seems like 27 is never checked during my for loop or while loop even though it is in the numList array.\n    ", "Answer": "\r\nNever remove items form a list you are iterating over.\nInstead create a new list:\n\n```\nnumbers = [int(input(\"First Number\")), int(input(\"Second Number\"))]\nnumbers.sort()\n\nprimes = []\nfor num in range(numbers[0], numbers[1] + 1):\n    #Set Start number to divide\n    i = 2\n    while i < num:\n        #Checks if the currNum can be divisble by i and is a whole number\n        if num % i == 0:\n            break\n        i += 1\n    else:\n        primes.append(num)\n\nprint(primes)\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "using a part of counting sort algorithm for returning the numbers of elements between a and b\r\n                \r\nI have found this question in the one site which was about counting sort algorithm and this question was an exercise ! I solved this and I want to know that is this correct?\n\nExercise:\nUse The idea of Counting Sort algorithm and provide an algorithm with n integer in the range 0 to k, in time O (1) replied that how many of these n elements are in the interval [a, b] ? Of course, your algorithm should process n elements that can help you take the numbers between a and b (0 ≤ a, b ≤ k) . This basic process should be in time Θ (n + k) .\n\nthis is my algorithm:\n\n```\nAlgorithm Range(A,k,a,b)\n{Consider C is the output array of PartOfCountingSort algorithm}\nC<--PartOfCountingSort(A,k)\n//finding the number of elements between a and b\nnumberOfElements<-- C[b]-C[a]+1\nreturn numberOfElements\n//end of the Range algorithm\n------------------------------------\nPartOfCountingSort(A,k)  // Theta(n+k)\nOutPut: array C is the output of this algorithm\n   for  i<-- 1 to k\n      C[i]<-- 0\n   for  j<-- 1 to A. length\n      C[A[j]]<--C[A[j]]+1\n   for  i<--2 to k\n      C[i]<--C[i]+C[i-1]\n```\n\n    ", "Answer": "\r\nIt should be \n\n```\nnumberOfElements<-- C[b]-C[a - 1]```\n\n\nRecall that ```\nC[i] = number of elements lower than or equal to i```\n. You don't want to subtract those equal to ```\na```\n.\n\nYou should also handle the cases where ```\na = 0```\n and maybe when ```\na = 1```\n too.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "number of executions in an algorithm\r\n                \r\nFor this algorithm:\n\n```\n       i = 1\n       while(i<=2n){\n       x = x + 1\n       i = i + 2\n       }\n```\n\n\ncan someone tell me how to find the formula for the number of times x = x + 1 is executed?\n    ", "Answer": "\r\n```\ni```\n goes from ```\n1```\n to ```\n2n```\n (inclusive), so first thought is ```\n2n```\n.\nBut we see that ```\ni```\n increments by two at a time instead of one, so it's half of that: ```\nn```\n.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Fastest algorithm to check if a number is pandigital?\r\n                \r\nPandigital number is a number that contains the digits 1..number length.\nFor example 123, 4312 and 967412385.\n\nI have solved many Project Euler problems, but the Pandigital problems always exceed the one minute rule.\n\nThis is my pandigital function:  \n\n```\nprivate boolean isPandigital(int n){\n    Set<Character> set= new TreeSet<Character>();   \n    String string = n+\"\";\n    for (char c:string.toCharArray()){\n        if (c=='0') return false;\n        set.add(c);\n    }\n    return set.size()==string.length();\n}\n```\n\n\nCreate your own function and test it with this method\n\n```\nint pans=0;\nfor (int i=123456789;i<=123987654;i++){\n    if (isPandigital(i)){\n         pans++;\n    }\n}\n```\n\n\nUsing this loop, you should get 720 pandigital numbers. My average time was 500 millisecond.\n\nI'm using Java, but the question is open to any language.\n\nUPDATE\n@andras answer has the best time so far, but @Sani Huttunen answer inspired me to add a new algorithm, which gets almost the same time as @andras.\n    ", "Answer": "\r\nC#, 17ms, if you really want a check.\n\n```\nclass Program\n{\n    static bool IsPandigital(int n)\n    {\n        int digits = 0; int count = 0; int tmp;\n\n        for (; n > 0; n /= 10, ++count)\n        {\n            if ((tmp = digits) == (digits |= 1 << (n - ((n / 10) * 10) - 1)))\n                return false;\n        }\n\n        return digits == (1 << count) - 1;\n    }\n\n    static void Main()\n    {\n        int pans = 0;\n        Stopwatch sw = new Stopwatch();\n        sw.Start();\n        for (int i = 123456789; i <= 123987654; i++)\n        {\n            if (IsPandigital(i))\n            {\n                pans++;\n            }\n        }\n        sw.Stop();\n        Console.WriteLine(\"{0}pcs, {1}ms\", pans, sw.ElapsedMilliseconds);\n        Console.ReadKey();\n    }\n}\n```\n\n\nFor a check that is consistent with the Wikipedia definition in base 10:\n\n```\nconst int min = 1023456789;\nconst int expected = 1023;\n\nstatic bool IsPandigital(int n)\n{\n    if (n >= min)\n    {\n        int digits = 0;\n\n        for (; n > 0; n /= 10)\n        {\n            digits |= 1 << (n - ((n / 10) * 10));\n        }\n\n        return digits == expected;\n    }\n    return false;\n}\n```\n\n\n\n\nTo enumerate numbers in the range you have given, generating permutations would suffice. \n\nThe following is not an answer to your question in the strict sense, since it does not implement a check. It uses a generic permutation implementation not optimized for this special case - it still generates the required 720 permutations in 13ms (line breaks might be messed up):\n\n```\nstatic partial class Permutation\n{\n    /// <summary>\n    /// Generates permutations.\n    /// </summary>\n    /// <typeparam name=\"T\">Type of items to permute.</typeparam>\n    /// <param name=\"items\">Array of items. Will not be modified.</param>\n    /// <param name=\"comparer\">Optional comparer to use.\n    /// If a <paramref name=\"comparer\"/> is supplied, \n    /// permutations will be ordered according to the \n    /// <paramref name=\"comparer\"/>\n    /// </param>\n    /// <returns>Permutations of input items.</returns>\n    public static IEnumerable<IEnumerable<T>> Permute<T>(T[] items, IComparer<T> comparer)\n    {\n        int length = items.Length;\n        IntPair[] transform = new IntPair[length];\n        if (comparer == null)\n        {\n            //No comparer. Start with an identity transform.\n            for (int i = 0; i < length; i++)\n            {\n                transform[i] = new IntPair(i, i);\n            };\n        }\n        else\n        {\n            //Figure out where we are in the sequence of all permutations\n            int[] initialorder = new int[length];\n            for (int i = 0; i < length; i++)\n            {\n                initialorder[i] = i;\n            }\n            Array.Sort(initialorder, delegate(int x, int y)\n            {\n                return comparer.Compare(items[x], items[y]);\n            });\n            for (int i = 0; i < length; i++)\n            {\n                transform[i] = new IntPair(initialorder[i], i);\n            }\n            //Handle duplicates\n            for (int i = 1; i < length; i++)\n            {\n                if (comparer.Compare(\n                    items[transform[i - 1].Second], \n                    items[transform[i].Second]) == 0)\n                {\n                    transform[i].First = transform[i - 1].First;\n                }\n            }\n        }\n\n        yield return ApplyTransform(items, transform);\n\n        while (true)\n        {\n            //Ref: E. W. Dijkstra, A Discipline of Programming, Prentice-Hall, 1997\n            //Find the largest partition from the back that is in decreasing (non-icreasing) order\n            int decreasingpart = length - 2;\n            for (;decreasingpart >= 0 && \n                transform[decreasingpart].First >= transform[decreasingpart + 1].First;\n                --decreasingpart) ;\n            //The whole sequence is in decreasing order, finished\n            if (decreasingpart < 0) yield break;\n            //Find the smallest element in the decreasing partition that is \n            //greater than (or equal to) the item in front of the decreasing partition\n            int greater = length - 1;\n            for (;greater > decreasingpart && \n                transform[decreasingpart].First >= transform[greater].First; \n                greater--) ;\n            //Swap the two\n            Swap(ref transform[decreasingpart], ref transform[greater]);\n            //Reverse the decreasing partition\n            Array.Reverse(transform, decreasingpart + 1, length - decreasingpart - 1);\n            yield return ApplyTransform(items, transform);\n        }\n    }\n\n    #region Overloads\n\n    public static IEnumerable<IEnumerable<T>> Permute<T>(T[] items)\n    {\n        return Permute(items, null);\n    }\n\n    public static IEnumerable<IEnumerable<T>> Permute<T>(IEnumerable<T> items, IComparer<T> comparer)\n    {\n        List<T> list = new List<T>(items);\n        return Permute(list.ToArray(), comparer);\n    }\n\n    public static IEnumerable<IEnumerable<T>> Permute<T>(IEnumerable<T> items)\n    {\n        return Permute(items, null);\n    }\n\n    #endregion Overloads\n\n    #region Utility\n\n    public static IEnumerable<T> ApplyTransform<T>(\n        T[] items, \n        IntPair[] transform)\n    {\n        for (int i = 0; i < transform.Length; i++)\n        {\n            yield return items[transform[i].Second];\n        }\n    }\n\n    public static void Swap<T>(ref T x, ref T y)\n    {\n        T tmp = x;\n        x = y;\n        y = tmp;\n    }\n\n    public struct IntPair\n    {\n        public IntPair(int first, int second)\n        {\n            this.First = first;\n            this.Second = second;\n        }\n        public int First;\n        public int Second;\n    }\n\n    #endregion\n}\n\nclass Program\n{\n\n    static void Main()\n    {\n        int pans = 0;\n        int[] digits = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n        Stopwatch sw = new Stopwatch();\n        sw.Start();\n        foreach (var p in Permutation.Permute(digits))\n        {\n            pans++;\n            if (pans == 720) break;\n        }\n        sw.Stop();\n        Console.WriteLine(\"{0}pcs, {1}ms\", pans, sw.ElapsedMilliseconds);\n        Console.ReadKey();\n    }\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Java algorithm to create own unique key\r\n                \r\nI want to create an own unique key which is 6 characters long and includes the following regex characters and numbers: [a-z][0-9]\ne.g.: 00000A, 00000B, ... 00000Z, 00001A, 00001B,...\nI don't know how to create this algorithm of these regex formation.\nHas someone an idea, how to create this algorithm?\n    ", "Answer": "\r\nFirst, your regexp does not match the numbers you're showing as examples. So you'd need to make up your mind there :)\nSecond, you can simply use a base-36 number probably, and somehow keep track of the last number generated (e.g. using a properties file or database field) in a synchronized singleton.\nThen create a simple method that turns the number into a String and left pad that number with zeros until you reach the desired length.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "sort array to k sorted parts of unsorted element\r\n                \r\nI need an algorithm that, given an array and an int k, returns an array that is k \"parts\" of numbers and:\n\n\nThe \"parts\" are ordered. meaning that if a number is in \"part\" j, it is smaller than every number in \"part\" i for i > j.\nThe elements in a \"part\" are not necessarily ordered.\n\n\nFYI, this is NOT a k-sorted problem! I can't find anything about it. Every search returns only k-sorted algorithms and discussions.\n    ", "Answer": "\r\nOne answer would be to simply sort the array and then split it into chunks, e.g. in psuedocode:\n\n```\nsorted_arr = sorted(arr)\nnew_arr = []\narr_len = size(arr)\nchunk_len = max(1, floor(arr_len / k))\nfor (i = 0; i < arr_len; i += chunk_size) {\n    new_arr.push(sorted_arr.slice(i, i + chunk_len));\n}\n```\n\n\nBut I'm guessing you're looking for a solution faster than actually just sorting the array first and then chunking.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Reverse a number algorithm\r\n                \r\nI was thinking of ways to reverse an integer and I came up with this one:\n\n```\nnum = 123456\npower = len(str(num))\nresult = 0\nfor i in range(1, power):\n    result += (num % 10) * 10**(power - i)\n    num = int(num / 10)\nresult += num\n\nprint(result)\n```\n\n\nI was going through algorithms of other people and I haven't seen anyone using this method with exponents. \n\nFor example his one is not mine:\n\n```\npublic long  reverse(long x)\n    {\n        long result = 0;\n        while (x != 0)\n        {\n            result = result * 10 + x % 10;\n            x = x / 10;\n        }\n        return result;\n    }\n```\n\n\nIs my algorithm inferior? Like, will it take more time to calculate the reversed number because of the exponent part?\n    ", "Answer": "\r\nThe ```\nwhile```\n and ```\nfor```\n loops go through the same number of iterations in both solutions. So it is not inferior in that sense.\n\nYour solution contains a conversion from a numeric to a string so yes that can be avoided. But since Python allows you do such conversions easily and if that improves the readability of your code then that doesn't make your code inferior in my opinion. Although, having said that consider the solution proposed in the comments to the question :)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm in SecureRandom number\r\n                \r\nI am getting a random number in My android client as well as Server(Servlet). I am using the same SecureRandom algorithm(\"SHA1PRNG\") in both client and server. My seed value is same for both. But the output number I am getting is different in both client as well as Server. What could be the reason for it? Here is my code:\n\n```\nSecureRandom random = new SecureRandom();\ntry {\n    random.getInstance(\"SHA1PRNG\");\n} catch (Exception e) {\n    // ...\n}\n;\nrandom.setSeed(1097327);\nbyte[] b1 = new byte[3];\nrandom.nextBytes(b1);\nlong value = 0;\nfor (int i = 0; i < b1.length; i++) {\n    value += (b1[i] & 0xff) << (8 * i);\n    Toast.makeText(getApplicationContext(), Long.toString(value),\n            Toast.LENGTH_LONG).show();\n}\n```\n\n    ", "Answer": "\r\nThe javadoc of SecureRandom says:\n\n\n  Many SecureRandom implementations are in the form of a pseudo-random\n  number generator (PRNG), which means they use a deterministic\n  algorithm to produce a pseudo-random sequence from a true random seed.\n  Other implementations may produce true random numbers, and yet others\n  may use a combination of both techniques.\n\n\nMaybe the algorithm uses another randomness source to produce its random numbers. Doing it would not break the contract of the SecureRandom class. It would even satisfy it even more, since the goal of a secure random generator is to produce random numbers, and not a predictable sequence of numbers.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Comparing Greedy, Pricing Algorithm, and LP-based Rounding for Vertex Cover Problem [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 3 months ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI am working on the Vertex Cover problem and trying to compare the performance of three different algorithms: Greedy (GRY), Pricing Algorithm (PA), and LP-based Rounding (LR). Specifically, I want to compare them over randomly generated instances with two parameters: n denoting the number of nodes taking values among {100, 120, 140, 160, 180, 200}, and p ∈ {0.1, 0.2, 0.3, 0.4, 0.5} representing the uniform probability of an edge existing among each pair of nodes.\nFor each given pair (n, p), I want to do the following sequentially:\n\nGenerate M = 100 random graphs with each vertex cost uniformly sampled from [0, 1].\nFor each randomly generated instance, implement the three algorithms and compute the ratio of the total cost on the vertex cover returned by the algorithm to that on the optimal, which can be obtained by solving an Integral Program (IP).\nCompute the average ratio over the M = 100 randomly generated instances for each of the three algorithms, denoted as τg(n, p), τp(n, p) and τl(n, p), which represent the performance of GRY, PA, and LR, respectively.\nHowever, I'm having trouble computing the ratios and comparing the performance of the algorithms.\n\nHow can I improve my implementation and comparison of the algorithms?\n```\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nimport pulp\n\n\ndef generate_random_graph(n, p):\n    adj_matrix = [[0 for _ in range(n)] for _ in range(n)]\n    costs = [random.random() for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if random.random() < p:\n                adj_matrix[i][j] = 1\n                adj_matrix[j][i] = 1\n\n    return adj_matrix, costs\n\ndef greedy_vc(adj_matrix, costs):\n    n = len(adj_matrix)\n    covered_edges = set()\n    vertex_cover = set()\n\n    while True:\n        uncovered_edges = [(i, j) for i in range(n) for j in range(i + 1, n) if adj_matrix[i][j] == 1 and (i, j) not in covered_edges]\n\n        if not uncovered_edges:\n            break\n\n        cost_ratio = [(i, costs[i] / sum(adj_matrix[i])) for i in range(n) if sum(adj_matrix[i]) > 0]\n        selected_vertex = min(cost_ratio, key=lambda x: x[1])[0]\n\n        vertex_cover.add(selected_vertex)\n        for j in range(n):\n            if adj_matrix[selected_vertex][j] == 1:\n                covered_edges.add((min(selected_vertex, j), max(selected_vertex, j)))\n\n    return vertex_cover\n\ndef pricing_algorithm_vc(adj_matrix, costs):\n    n = len(adj_matrix)\n    remaining_edges = {(i, j) for i in range(n) for j in range(i + 1, n) if adj_matrix[i][j] == 1}\n    vertex_cover = set()\n\n    while remaining_edges:\n        edge = remaining_edges.pop()\n        u, v = edge\n        if costs[u] < costs[v]:\n            vertex_cover.add(u)\n            for j in range(n):\n                if adj_matrix[u][j] == 1:\n                    remaining_edges.discard((min(u, j), max(u, j)))\n        else:\n            vertex_cover.add(v)\n            for j in range(n):\n                if adj_matrix[v][j] == 1:\n                    remaining_edges.discard((min(v, j), max(v, j)))\n\n    return vertex_cover\n\ndef lp_rounding_vc(adj_matrix, costs):\n    n = len(adj_matrix)\n    prob = pulp.LpProblem(\"VertexCoverLP\", pulp.LpMinimize)\n    x_vars = [pulp.LpVariable(f\"x_{i}\", 0, 1, pulp.LpContinuous) for i in range(n)]\n\n    prob += pulp.lpSum(costs[i] * x_vars[i] for i in range(n))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if adj_matrix[i][j] == 1:\n                prob += x_vars[i] + x_vars[j] >= 1\n\n    prob.solve()\n\n    vertex_cover = set(i for i in range(n) if x_vars[i].value() >= 0.5)\n\n    return vertex_cover\n\ndef optimal_vc(adj_matrix, costs):\n    n = len(adj_matrix)\n    prob = pulp.LpProblem(\"VertexCoverIP\", pulp.LpMinimize)\n    x_vars = [pulp.LpVariable(f\"x_{i}\", 0, 1, pulp.LpInteger) for i in range(n)]\n\n    prob += pulp.lpSum(costs[i] * x_vars[i] for i in range(n))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if adj_matrix[i][j] == 1:\n                prob += x_vars[i] + x_vars[j] >= 1\n    prob.solve()\n\n    vertex_cover = set(i for i in range(n) if x_vars[i].value() == 1)\n\n    return vertex_cover\n\n\ndef compare_algorithms(n_values, p_values):\n    champions = np.zeros((len(n_values), len(p_values)), dtype=int)\n\n    for n_idx, n in enumerate(n_values):\n        for p_idx, p in enumerate(p_values):\n            gry_ratios = []\n            pa_ratios = []\n            lr_ratios = []\n\n            for _ in range(10):\n                adj_matrix, costs = generate_random_graph(n, p)\n                gry_cover = greedy_vc(adj_matrix, costs)\n                pa_cover = pricing_algorithm_vc(adj_matrix, costs)\n                lr_cover = lp_rounding_vc(adj_matrix, costs)\n                opt_cover = optimal_vc(adj_matrix, costs)\n\n                if not opt_cover:\n                    continue\n\n                gry_ratios.append(\n                    sum(costs[v] for v in gry_cover) / sum(costs[v]\n                                                           for v in opt_cover))\n                pa_ratios.append(\n                    sum(costs[v] for v in pa_cover) / sum(costs[v]\n                                                          for v in opt_cover))\n                lr_ratios.append(\n                    sum(costs[v] for v in lr_cover) / sum(costs[v]\n                                                          for v in opt_cover))\n\n            avg_gry = np.mean(gry_ratios)\n            avg_pa = np.mean(pa_ratios)\n            avg_lr = np.mean(lr_ratios)\n\n            min_ratio = min(avg_gry, avg_pa, avg_lr)\n            if min_ratio == avg_gry:\n                champions[n_idx][p_idx] = 1\n            elif min_ratio == avg_pa:\n                champions[n_idx][p_idx] = 2\n            else:\n                champions[n_idx][p_idx] = 3\n\n    return champions\n\n\ndef plot_champions(champions, n_values, p_values):\n    colors = {1: 'red', 2: 'blue', 3: 'black'}\n    for i, n in enumerate(n_values):\n        for j, p in enumerate(p_values):\n            plt.scatter(n, p, color=colors[champions[i][j]], marker='s')\n    plt.xlabel('n')\n    plt.ylabel('p')\n    plt.show()\n\n\nn_values = [2,3]\np_values = [0.1, 0.2]\n\nchampions = compare_algorithms(n_values, p_values)\nplot_champions(champions, n_values, p_values)\n\n```\n\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "The algorithm inverse number [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs details or clarity. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Add details and clarify the problem by editing this post.\r\n                \r\n                    \r\n                        Closed 6 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nIs this a formula for the inverse number?\n\neg 123-321?\n\nNumber is K\n\ninv K= K%100 + K/10%10 * 10 + K % 10 *100\n\nI'm not sure I exactly wrote, and I need this right for the task at school for graphic algorithm\n\nEdit:Yes i'm stupid xD I'm Beginner xD\n    ", "Answer": "\r\nThis logic will help you. variable inverse is the output.\n\n```\n        int num = 123;\n        double inverse = 0;\n        while (num != 0)\n        {\n            inverse = inverse * 10;\n            inverse = inverse + num % 10;\n            num = num / 10;                \n        }\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Need help on calculating operational complexity of this algorithm\r\n                \r\nThe algorithm is taken from great \"Algorithms and Programming: Problems and Solutions\" by Alexander Shen (namely exercise 1.1.28). \n\nFollowing is my translation from Russian so excuse me for mistakes or ambiguity. Please correct me if you feel so.\n\nWhat should algorithm do\n\n\n  With given natural n algorithm calculates the number of solutions of\n  inequality\n\n```\nx*x + y*y < n \n```\n\n  \n  in natural (non-negative) numbers without using\n  manipulations on real numbers\n\n\nIn Pascal\n\n```\nk := 0; s := 0;\n\n{at this moment of execution\n (s) = number of solutions of inequality with\n x*x + y*y < n, x < k}\nwhile k*k < n do begin\n  l := 0; t := 0;\n\n  while k*k + l*l < n do begin\n    l := l + 1;\n    t := t + 1;\n  end;\n\n  {at this line \n   (t) = number of solutions of k*k + y*y < n\n   for given (k) with y>=0}\n  k := k + 1;\n  s := s + t;\nend;\n\n{k*k >= n, so s = number of solutions of inequality}\n```\n\n\n\n\nFurther in the text Shen says briefly that number of operations performed by this algorithm is \"proportional to n, as one can calculate\". So I ask you how one can calculate that with strict mathematics.\n    ", "Answer": "\r\nYou have two loops, one inside the other.\n\nThe external has this condition: ```\nk*k < n```\n so ```\nk```\n goes from ```\n0```\n up to ```\nSQRT(n)```\n\n\nand the internal loop has this condition: ```\nk*k + l*l < n```\n so ```\nl```\n goes from ```\n0```\n up to ```\nSQRT(n-k^2)```\n. But this is snaller than ```\nSQRT(n)```\n\n\nSo, the maximum iterations is less than ```\nSQRT(n) * SQRT(n)```\n which is ```\nn```\n and in every iteration a constant number of operations is done.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to Reverse a string with numbers, but don't reverse 1 and 0?\r\n                \r\nI am learning random algorithms, and I am currently stock in one, where I have to reverse a string that contains numbers, but I am not to reverse 1 and 0 in the string e.g, 2345678910 would be 1098765432.\n\nHere's what I've done so far:\n\n\r\n\r\n```\nfunction split(str) {\r\n  let temp = [];\r\n  temp = str.split('');\r\n  const backwards = [];\r\n  const totalItems = str.length - 1;\r\n  for (let i = totalItems; i >= 0; i--) {\r\n    backwards.push(temp[i]);\r\n\r\n  }\r\n  return backwards.join('').toString();\r\n\r\n}\r\nconsole.log(split(\"10 2 3 U S A\"));\r\nconsole.log(split(\"2345678910\"));```\n\r\n\r\n\r\n\n\nI am currently having the issue of not reversing the 10. \n\nWhat am I doing wrong?\n    ", "Answer": "\r\nYou can replace ```\n10```\n with a specified character which does not exist in the text, and after running the implemented algorithm replace it back with ```\n10```\n.\n\n\r\n\r\n```\nlet out_of_alphabet_character = '#';\r\nvar reg_for_the_alphabet = new RegExp(out_of_alphabet_character, \"g\");\r\n\r\nfunction specific_revert(str) {\r\n  str = str.replace(/(10)/g, out_of_alphabet_character);\r\n  let temp = [];\r\n  \r\n  temp = str.split('');\r\n  const backwards = [];\r\n  const totalItems = str.length - 1;\r\n  for (let i = totalItems; i >= 0; i--) {\r\n    backwards.push(temp[i]);\r\n  }\r\n  return backwards.join('').toString().replace(reg_for_the_alphabet, '10');\r\n}\r\nconsole.log(specific_revert(\"10 2 3 U S A\"));\r\nconsole.log(specific_revert(\"234567891010\"));```\n\r\n\r\n\r\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for 'good' number\r\n                \r\nA give number x is 'good' if the sum of any two consecutive digit of the number x are between k and 2k.\nI need to find an algorithm that for a given number k and a given number n, find how many 'good' n-digit numbers exist.\n\nI made an implementation for this in PHP, but the complexity is to big (i am searching for all those 'good' number and counting them, so the complexity is O(10^n)).\n\n```\n<?php\n    $n = 5;\n    $k = 5;\n\n    $min = $k*1;\n    $max = $k*2;\n    $counter = 0;\n\n    for ($i = pow(10, $n-1); $i<pow(10,$n); $i++)\n    {\n        $number = $i;\n        $prev = $number % 10;\n        $number = $number / 10;\n\n        while($number >= 10)\n        {\n            $crnt = $number % 10;\n            $number = $number / 10;\n            if ( ($crnt+$prev) > $min AND ($crnt+$prev) < $max ) {\n                echo \"good number: $i\\n\";\n                $counter++;\n            }\n            $prev = $crnt;\n        }\n    }\n\n    echo \"counter: \".$counter.\"\\n\";\n?>\n```\n\n\nCan someone confirm me if this can be the solution:\n\n```\nn=100 // given\nk=10  // given\n\ncounter = 0;\n\nfor(i=10; i<100; i++)\n{\n    if( (i/10)+(i%10) > k ) && ( (i/10)+(i%10) < 2*k )\n        counter++;\n}\n\ntotal = counter^(n-1)\n```\n\n    ", "Answer": "\r\nAll those calls to ```\npow```\n certainly won't be helping.\n\nWhat you can do is make a mapping of all the two-digit numbers that are 'good'.  Once you have your mapping, all you need to do is check that every pair of digits in your number is good.  You can do this by successive division by 10 and modulo 100.\n\nSomething like this would do the trick, provided you don't give it a negative number, and assuming you've set up your ```\n$good```\n array.\n\n```\nfunction isgood( $num ) {\n    while( $num >= 100 && $good[$num%100] ) {\n        $num /= 10;\n    }\n    return $good[$num%100];\n}\n```\n\n\nThe next most obvious thing to do is memoize larger sequences.  This is a dynamic programming principle.  We've already memoized small sequences by storing the 'goodness' of 2-digit sequences.  But you could easily use those to generate sequences of 3, 4, 5, 6 digits...  Whatever your available memory allows.  Use the memos you already have in order to generate the sequences with one extra digit.\n\nSo, if you built up memoisation for up to 5-digit numbers, then you divide by 1000 every time, and get a great speedup.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for incrementing numbers in each position in an array\r\n                \r\nI wonder if there is a formal name for this algorithm and what is an elegant way to solve this: the problem is -- given an array, say, ```\n[3, 6, 2]```\n, print out all the numbers starting with ```\n000```\n, ```\n100```\n, ```\n200```\n, ```\n300```\n, then the next number will \"carry over\" and become ```\n010```\n, and then ```\n110```\n.  It is like the odometer of a car, except it is fine to increase the digit at the other end instead.  The ```\n6```\n is the maximum number for the second digit.  The ```\n2```\n is the maximum number for the third digit.  So the program should print out ```\n362```\n as the last number.\n\nI came up with the solution below, but it looks too messy.  So I wonder if there is an elegant solution, and does this problem and solution actually have a formal name and a known elegant solution for solving it?\n\nRecursion actually is possible, but I think if the recursion returns an array of all the numbers, the algorithm won't be able to handle it if the input array has 10 or 15 numbers in it, because the resulting array can grow exponentially and it can become really big and eat up a lot of memory.\n\n```\n# In Ruby\n\ndef print_all_numbers(arr_ranges)\n  arr = arr_ranges.map { 0 }   # convert it to [0, 0, 0]\n\n  while (true)\n    incrementer_index = 0\n    puts arr.join\n    arr[incrementer_index] += 1\n    while arr[incrementer_index] > arr_ranges[incrementer_index]\n      arr[incrementer_index] = 0\n      incrementer_index += 1\n      return if incrementer_index >= arr.length \n      arr[incrementer_index] += 1\n    end\n  end\nend\n\nprint_all_numbers([3, 6, 2])\n```\n\n    ", "Answer": "\r\nRecursion is simpler, in my opinion.  Make the function take the list of digit maxima and a suffix containing the digits computed so far.  If the list is empty. the suffix is the number to print.  Otherwise, peel the last maximum off the list and iterate, calling yourself recursively.  I don't know Ruby.  Here's a (tested) Python solution:\n\n```\n#!/usr/bin/python\n\ndef printNumbers(digitMaxima, suffix=''):\n    if len(digitMaxima) == 0:\n        print suffix\n        return\n\n    thisDigitMaximum = digitMaxima[-1]\n    remainingDigitMaxima = digitMaxima[:-1]\n    for d in range(0, thisDigitMaximum+1):\n        digitAsString = '%d' % d\n        printNumbers(remainingDigitMaxima, digitAsString + suffix)\n\nprintNumbers([3, 6, 2])\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Number Aligning Algorithm\r\n                \r\nIs there an algorithm that will take two columns of numbers and determine if they have a value in common?\n\nTwo columns:\n\nOne increases by .3 with each value.  The other increases erratically.  I want to determine if the two columns have a value in common.\n\n```\n.3  .1\n.6  .2\n.9  .4\n1.2  .5\n1.5  .9\n1.8  .13\n```\n\n    ", "Answer": "\r\nIf both series are increasing (or sorted1 in general), there is an ```\nO(n)```\n solution. You can't do any better than that, because you need to look at every element in the erratically-increasing list at least once in the worst case.\n\nSimply traverse both at the same time in a zipper-like fashion: Always get the next element from the list, that currently has a smaller element than the other one.\n\n```\n> .3   .1 < | > .3   .1   | > .3   .1   |   .3   .1   |   .3   .1   |   .3   .1   \n  .6   .2   |   .6   .2 < |   .6   .2   | > .6   .2   | > .6   .2   | > .6   .2   \n  .9   .4   |   .9   .4   |   .9   .4 < |   .9   .4 < |   .9   .4   |   .9   .4   \n  .12  .5   |   .12  .5   |   .12  .5   |   .12  .5   |   .12  .5 < |   .12  .5   \n  .15  .9   |   .15  .9   |   .15  .9   |   .15  .9   |   .15  .9   |   .15  .9 < \n  .18  .13  |   .18  .13  |   .18  .13  |   .18  .13  |   .18  .13  |   .18  .13  \n```\n\n\n\n\n1Where sorted means with respect to a total order.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for exclusion of numbers\r\n                \r\nYou are given a integer N which fits in long(less than 2^63-1) and 50 other integers. Your task is to find how many numbers from 1 to N contain none of the 50 numbers as its substring?\n\nThis question is from an interview.\n    ", "Answer": "\r\nYou didn't specify a base, but I'll assume decimal without loss of generality.\n\nFirst, recognize that this is a string problem, not a numeric one.\n\nBuild a finite automaton A to recognize the 50 integers as substrings of other strings. E.g., the two integers 44 and 3 are recognized as substrings by the RE\n\n```\n^.*(44|3).*$\n```\n\n\nBuild a finite automaton B to recognize all numbers less than N. E.g., to recognize 1 through 27 (inclusive) in decimal, that can be achieved by compiling the RE\n\n```\n^([1-9]|1[0-9]|2[0-7])$\n```\n\n\nCompute the intersection C of the automata A and B, which is in turn an FA.\n\nUse a dynamic programming algorithm to compute the size of the language recognized by C. Subtract that from the size of the language recognized by A, computed by the same algorithm.\n\n(I am not claiming that this is asymptotically optimal, but it was a fast enough to solve lots of Project Euler problems :)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How is a CRC32 checksum calculated?\r\n                \r\nMaybe I'm just not seeing it, but CRC32 seems either needlessly complicated, or insufficiently explained anywhere I could find on the web.\n\nI understand that it is the remainder from a non-carry-based arithmetic division of the message value, divided by the (generator) polynomial, but the actual implementation of it escapes me.\n\nI've read A Painless Guide To CRC Error Detection Algorithms, and I must say it was not painless. It goes over the theory rather well, but the author never gets to a simple \"this is it.\" He does say what the parameters are for the standard CRC32 algorithm, but he neglects to lay out clearly how you get to it.\n\nThe part that gets me is when he says \"this is it\" and then adds on, \"oh by the way, it can be reversed or started with different initial conditions,\" and doesn't give a clear answer of what the final way of calculating a CRC32 checksum given all of the changes he just added.\n\n\nIs there a simpler explanation of how CRC32 is calculated?\n\n\nI attempted to code in C how the table is formed:\n\n```\nfor (i = 0; i < 256; i++)\n{\n    temp = i;\n\n    for (j = 0; j < 8; j++)\n    {\n        if (temp & 1)\n        {\n            temp >>= 1;\n            temp ^= 0xEDB88320;\n        }\n        else {temp >>= 1;}\n    }\n    testcrc[i] = temp;\n}\n```\n\n\nbut this seems to generate values inconsistent with values I have found elsewhere on the Internet. I could use the values I found online, but I want to understand how they were created.\n\nAny help in clearing up these incredibly confusing numbers would be very appreciated.\n    ", "Answer": "\r\nThe polynomial for CRC32 is:\n\n\n  x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1\n\n\n\nWikipedia\nCRC calculation\n\n\nOr in hex and binary:\n\n\n  0x 01 04 C1 1D B7\n  1 0000 0100 1100 0001 0001 1101 1011 0111\n\n\nThe highest term (x32) is usually not explicitly written, so it can instead be represented in hex just as\n\n\n  0x 04 C1 1D B7\n\n\nFeel free to count the 1s and 0s, but you'll find they match up with the polynomial, where ```\n1```\n is bit 0 (or the first bit) and ```\nx```\n is bit 1 (or the second bit).\n\nWhy this polynomial? Because there needs to be a standard given polynomial and the standard was set by IEEE 802.3. Also it is extremely difficult to find a polynomial that detects different bit errors effectively.\n\nYou can think of the CRC-32 as a series of \"Binary Arithmetic with No Carries\", or basically \"XOR and shift operations\". This is technically called Polynomial Arithmetic.\n\n\nCRC primer, Chapter 5\n\n\nTo better understand it, think of this multiplication:\n\n```\n(x^3 + x^2 + x^0)(x^3 + x^1 + x^0)\n= (x^6 + x^4 + x^3\n + x^5 + x^3 + x^2\n + x^3 + x^1 + x^0)\n= x^6 + x^5 + x^4 + 3*x^3 + x^2 + x^1 + x^0\n```\n\n\nIf we assume x is base 2 then we get:\n\n```\nx^7 + x^3 + x^2 + x^1 + x^0\n```\n\n\n\nCRC primer Chp.5\n\n\nWhy? Because 3x^3 is 11x^11 (but we need only 1 or 0 pre digit) so we carry over:\n\n```\n=1x^110 + 1x^101 + 1x^100          + 11x^11 + 1x^10 + 1x^1 + x^0\n=1x^110 + 1x^101 + 1x^100 + 1x^100 + 1x^11 + 1x^10 + 1x^1 + x^0\n=1x^110 + 1x^101 + 1x^101          + 1x^11 + 1x^10 + 1x^1 + x^0\n=1x^110 + 1x^110                   + 1x^11 + 1x^10 + 1x^1 + x^0\n=1x^111                            + 1x^11 + 1x^10 + 1x^1 + x^0\n```\n\n\nBut mathematicians changed the rules so that it is mod 2. So basically any binary polynomial mod 2 is just addition without carry or XORs. So our original equation looks like:\n\n```\n=( 1x^110 + 1x^101 + 1x^100 + 11x^11 + 1x^10 + 1x^1 + x^0 ) MOD 2\n=( 1x^110 + 1x^101 + 1x^100 +  1x^11 + 1x^10 + 1x^1 + x^0 )\n= x^6 + x^5 + x^4 + 3*x^3 + x^2 + x^1 + x^0 (or that original number we had)\n```\n\n\nI know this is a leap of faith but this is beyond my capability as a line-programmer. If you are a hard-core CS-student or engineer I challenge to break this down. Everyone will benefit from this analysis.\n\nSo to work out a full example:\n\n```\n   Original message                : 1101011011\n   Polynomial of (W)idth 4         :      10011\n   Message after appending W zeros : 11010110110000\n```\n\n\nNow we divide the augmented Message by the Poly using CRC arithmetic. This is the same division as before:\n\n```\n            1100001010 = Quotient (nobody cares about the quotient)\n       _______________\n10011 ) 11010110110000 = Augmented message (1101011011 + 0000)\n=Poly   10011,,.,,....\n        -----,,.,,....\n         10011,.,,....\n         10011,.,,....\n         -----,.,,....\n          00001.,,....\n          00000.,,....\n          -----.,,....\n           00010,,....\n           00000,,....\n           -----,,....\n            00101,....\n            00000,....\n            -----,....\n             01011....\n             00000....\n             -----....\n              10110...\n              10011...\n              -----...\n               01010..\n               00000..\n               -----..\n                10100.\n                10011.\n                -----.\n                 01110\n                 00000\n                 -----\n                  1110 = Remainder = THE CHECKSUM!!!!\n```\n\n\nThe division yields a quotient, which we throw away, and a remainder, which is the calculated checksum. This ends the calculation. Usually, the checksum is then appended to the message and the result transmitted. In this case the transmission would be: 11010110111110.\n\n\nCRC primer, Chapter 7\n\n\nOnly use a 32-bit number as your divisor and use your entire stream as your dividend. Throw out the quotient and keep the remainder. Tack the remainder on the end of your message and you have a CRC32.\n\nAverage guy review:\n\n```\n         QUOTIENT\n        ----------\nDIVISOR ) DIVIDEND\n                 = REMAINDER\n```\n\n\n\nTake the first 32 bits.\nShift bits\nIf 32 bits are less than DIVISOR, go to step 2.\nXOR 32 bits by DIVISOR. Go to step 2.\n\n\n(Note that the stream has to be dividable by 32 bits or it should be padded. For example, an 8-bit ANSI stream would have to be padded. Also at the end of the stream, the division is halted.)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to calculate the number of 1s for a range of numbers in binary\r\n                \r\nSo I just got back for the ACM Programing competition and did pretty well but there was one problem that not one team got.\n\nThe Problem.\n\n\n  Start with an integer N0 which is greater than 0. Let N1 be the number of ones in the binary representation of N0. So, if ```\nN0 = 27```\n, ```\nN1 = 4```\n. For all ```\ni > 0```\n, let Ni be the number of ones in the binary representation of ```\nNi-1```\n. This sequence will always converge to one. For any starting number, N0, let K be the minimum value of i >= 0 for which N1 = 1. For example, if N0 = 31, then N1 = 5, N2 = 2, N3 = 1, so K = 3.\n  \n  Given a range of consecutive numbers and a value of X how many numbers in the range have a K value equal to X?\n  \n  Input\n  There will be several test cases in the input. Each test case will consist of three integers on a single line: \n  ```\nLO HI X```\n\n  Where ```\nLO```\n and ```\nHI```\n (1 <= ```\nLO```\n <= ```\nHI```\n <= 10^18) are the lower and upper limits of a range of integers, and ```\nX```\n (0 <= ```\nX```\n <= 10) is the target value for K. The input will end with a line of three 0s.\n  \n  Output\n  For each test case output a single integer, representing the number of integers in the range from ```\nLO```\n to ```\nHI```\n (inclusive) which have a K value equal to X in the input. Print each Integer on its own line with no spaces. Do not print any blank lines between answers.\n\n\nSample Input\n\n```\n31 31 3\n31 31 1\n27 31 1\n27 31 2\n1023 1025 1\n1023 1025 2\n0 0 0\n```\n\n\nSample Output\n\n```\n1\n0\n0\n3\n1\n1\n```\n\n\n\n\nIf you guys want I can include our answer or our problem, because finding for a small range is easy but I will give you a hint first your program needs to run in seconds not minutes.  We had a successful solution but not an efficient algorithm to use a range similar to \n\n```\n48238 10^18 9\n```\n\n\nAnyway good luck and if the community likes these we had some more we could not solve that could be some good brain teasers for you guys. The competition allows you to use Python, C++, or Java—all three are acceptable in an answer.\n\n\n\nSo as a hint my coach said to think of how binary numbers count rather than checking every bit.  I think that gets us a lot closer.\n    ", "Answer": "\r\nI think a key is first understanding the pattern of K values and how rapidly it grows.  Basically, you have:\n\n```\nK(1) = 0\nK(X) = K(bitcount(X))+1 for X > 1\n```\n\n\nSo finding the smallest X values for a given K we see\n\n```\nK(1) = 0\nK(2) = 1\nK(3) = 2\nK(7) = 3\nK(127) = 4\nK(170141183460469231731687303715884105727) = 5\n```\n\n\nSo for an example like ```\n48238 10^18 9```\n the answer is trivially 0.  K=0 only for 1, and K=1 only for powers of 2, so in the range of interest, we'll pretty much only see K values of 2, 3 or 4, and never see K >= 5\n\nedit\n\nOk, so we're looking for an algorithm to count the number of values with K=2,3,4 in a range of value LO..HI without iterating over the entire range.  So the first step is to find the number of values in the range with bitcount(x)==i for i = 1..59 (since we only care about values up to 10^18 and 10^18 < 2^60).  So break down the range lo..hi into subranges that are a power of 2 size and differ only in their lower n bits -- a range of the form x*(2^n)..(x+1)*(2^n)-1.  We can break down the arbitray lo..hi range into such subranges easily.  For each such subrange there will be choose(n, i) values with i+bitcount(x) set bits.\nSo we just add all the subranges together to get a vector of counts for 1..59, which we then iterate over, adding together those elements with the same K value to get our answer.\n\nedit (fixed again to be be C89 compatible and work for lo=1/k=0)\n\nHere's a C program to do what I previously described:\n\n```\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\nint bitcount(long long x) {\n    int rv = 0;\n    while(x) { rv++; x &= x-1; }\n    return rv; }\n\nlong long choose(long long m, long long n) {\n    long long rv = 1;\n    int i;\n    for (i = 0; i < n; i++) {\n        rv *= m-i;\n        rv /= i+1; }\n    return rv; }\n\nvoid bitcounts_p2range(long long *counts, long long base, int l2range) {\n    int i;\n    assert((base & ((1LL << l2range) - 1)) == 0);\n    counts += bitcount(base);\n    for (i = 0; i <= l2range; i++)\n        counts[i] += choose(l2range, i); }\n\nvoid bitcounts_range(long long *counts, long long lo, long long hi) {\n    int l2range = 0;\n    while (lo + (1LL << l2range) - 1 <= hi) {\n        if (lo & (1LL << l2range)) {\n            bitcounts_p2range(counts, lo, l2range);\n            lo += 1LL << l2range; }\n        l2range++; }\n    while (l2range >= 0) {\n        if (lo + (1LL << l2range) - 1 <= hi) {\n            bitcounts_p2range(counts, lo, l2range);\n            lo += 1LL << l2range; }\n        l2range--; }\n    assert(lo == hi+1); }\n\nint K(int x) {\n    int rv = 0;\n    while(x > 1) {\n        x = bitcount(x);\n        rv++; }\n    return rv; }\n\nint main() {\n    long long counts[64];\n    long long lo, hi, total;\n    int i, k;\n    while (scanf(\"%lld%lld%d\", &lo, &hi, &k) == 3) {\n        if (lo < 1 || lo > hi || k < 0) break;\n        if (lo == 0 || hi == 0 || k == 0) break;\n        total = 0;\n        if (lo == 1) {\n            lo++;\n            if (k == 0) total++; }\n        memset(counts, 0, sizeof(counts));\n        bitcounts_range(counts, lo, hi);\n        for (i = 1; i < 64; i++)\n            if (K(i)+1 == k)\n                total += counts[i];\n        printf(\"%lld\\n\", total); }\n    return 0; }\n```\n\n\nwhich runs just fine for values up to 2^63-1 (LONGLONG_MAX).\nFor ```\n48238 1000000000000000000 3```\n it gives ```\n513162479025364957```\n, which certainly seems plausible\n\nedit\n\ngiving the inputs of\n\n```\n48238 1000000000000000000 1\n48238 1000000000000000000 2\n48238 1000000000000000000 3\n48238 1000000000000000000 4\n```\n\n\ngives outputs of\n\n```\n44\n87878254941659920\n513162479025364957\n398959266032926842\n```\n\n\nThose add up to 999999999999951763 which is correct.  The value for k=1 is correct (there are 44 powers of two in that range 2^16 up to 2^59).  So while I'm not sure the other 3 values are correct, they're certainly plausible.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Optimal bubble sorting algorithm for an array of arrays of numbers\r\n                \r\nFix positive integers ```\nn```\n and ```\nk```\n.\n\nLet ```\nA```\n be an array of length ```\nn```\n with ```\nA[i]```\n an array of length ```\nk```\n where every entry is ```\nn-i```\n. For example, with ```\nn=5```\n and ```\nk=1```\n, this is just\n\n```\n[ [5] , [4] , [3] , [2] , [1] ]\n```\n\n\nand for ```\nn=5```\n and ```\nk=2```\n, this is\n\n```\n[ [5,5] , [4,4] , [3,3] , [2,2] , [1,1] ]\n```\n\n\nThe goal is to bubble sort this array of arrays by swapping numbers in adjacent arrays (e.g. swap ```\nA[i][j1]```\n with ```\nA[i+1][j2]```\n) until every entry of ```\nA[i]```\n is ```\ni+1```\n for every ```\ni```\n. \n\nThe question is: how many swaps are necessary and what's an optimal algorithm?\n\nNOTE: There are many, many better sorting algorithms to use. However, for this question, I am only interested in applying a bubble sort as described above. I can only interchange entries from adjacent arrays, and I am only interested in the minimum number of such interchanges necessary. I do appreciate all the suggestions for other sorting algorithms, but this is the problem that I am trying to understand.\n\nEXAMPLES:\n\nFor ```\nk=1```\n, this is well known. The number of swaps is the inversion number of ```\nA```\n regarded as a permutation, and so the minimum number of swaps is the binomial coefficient ```\n(n choose 2) = n(n-1)/2```\n and this can be attained by swapping any out of order pair: ```\nA[i] > A[j]```\n. For the first example, here's an optimal bubble sort:\n\n```\n[ [5] , [4] , [3] , [2] , [1] ]\n[ [4] , [5] , [3] , [2] , [1] ]\n[ [4] , [5] , [2] , [3] , [1] ]\n[ [4] , [2] , [5] , [3] , [1] ]\n[ [4] , [2] , [5] , [1] , [3] ]\n[ [4] , [2] , [1] , [5] , [3] ]\n[ [4] , [1] , [2] , [5] , [3] ]\n[ [1] , [4] , [2] , [5] , [3] ]\n[ [1] , [4] , [2] , [3] , [5] ]\n[ [1] , [2] , [4] , [3] , [5] ]\n[ [1] , [2] , [3] , [4] , [5] ]\n```\n\n\nFor ```\nk=2```\n, using the same strategy would give a bound of ```\n2 (n choose 2)```\n swaps needed. For the example above, that means ```\n20```\n swaps. But there is a solution that uses only ```\n15```\n swaps:\n\n```\n[ [5,5] , [4,4] , [3,3] , [2,2] , [1,1] ]\n[ [5,4] , [5,4] , [3,3] , [2,2] , [1,1] ]\n[ [5,4] , [3,4] , [5,3] , [2,2] , [1,1] ]\n[ [5,4] , [3,4] , [2,3] , [5,2] , [1,1] ]\n[ [5,4] , [3,4] , [2,3] , [1,2] , [5,1] ]\n[ [5,4] , [3,4] , [2,1] , [3,2] , [5,1] ]\n[ [5,4] , [3,1] , [2,4] , [3,2] , [5,1] ]\n[ [1,4] , [3,5] , [2,4] , [3,2] , [5,1] ]\n[ [1,4] , [3,2] , [5,4] , [3,2] , [5,1] ]\n[ [1,4] , [3,2] , [2,4] , [3,5] , [5,1] ]\n[ [1,4] , [3,2] , [2,4] , [3,1] , [5,5] ]\n[ [1,4] , [3,2] , [2,1] , [3,4] , [5,5] ]\n[ [1,4] , [1,2] , [2,3] , [3,4] , [5,5] ]\n[ [1,1] , [4,2] , [2,3] , [3,4] , [5,5] ]\n[ [1,1] , [2,2] , [4,3] , [3,4] , [5,5] ]\n[ [1,1] , [2,2] , [3,3] , [4,4] , [5,5] ]\n```\n\n\nThis solution is optimal for ```\nn=5```\n and ```\nk=2```\n (proof by brute force to find all solutions). For ```\nn=6```\n, the best solution takes ```\n22```\n swaps, but the solution doesn't look as nice as the one for ```\nn=5```\n (follow the 5 right, then the 1 left, then the 5 right, etc), so I still don't know an optimal strategy, much less a formula or better bound for the number of swaps.\n\nI've been thinking about this for a couple of days now and haven't come up with anything enlightening. If anyone has any thoughts on this problem, then please share them. I'd be thrilled with knowing more about the ```\nk=2```\n case. Even better for any thoughts on the general case. \n\nEDIT: I apologize if I cannot motivate this problem to your liking, but here's an attempt: the number of bubble sorts needed to sort a permutation is a very important statistic in combinatorics and number theory, called the inversion number of the permutation. You can sort an out of order permutation using much better algorithms, but this is the one that gives you the algebraic meaning. If that doesn't help, perhaps this related SO post may: What is a bubble sort good for?\n\n\n\nUPDATE: The oldest answer below gives a lower (and upper) bound for the number of swaps. The second oldest answer gives an algorithm that comes really close to this lower bound (often attaining it). It would be fantastic if someone could improve the bound, or, even better, prove that the algorithm given below is optimal.\n    ", "Answer": "\r\nThis is not an optimal answer, but i would like to share my attempt as someone may improve it.  I did not thought about finding a formula to calculate the minimum number of swaps but rather on the optimal algorithm.  The algorithm is based on k = 2.\n\nThe basic idea is based on information gain. Let us assume that A = {[i,j] : 1<=i<=n, 1<=j<=n} represents a configuration. In each step, we have 4 * (n-1) possible swapping to move from one configuration to another configuration. For example if n = 2 (i.e. A = [ {2,2}, {1,1} ] ), then we have 4 possible swapping A[0][0] <-> A[1][0], A[0][0] <-> A[1][1], A[0][1] <-> A[1][0], and A[0][1] <-> A[1][1].  Thus, our objective is to select the swap that has high information gain when we need to move from one configuration to another configuration.\n\nThe tricky part will be \"how to calculate the information gain\".  In my solution (below), the information gain is based on the distance of a value from its correct position. Let me show you my code (written in C++) to understand what i am trying to say:\n\n```\nconst int n = 5;\nconst int k = 2;\n\nint gain(int item, int from, int to)\n{\n    if (to > from)\n        return item - to;\n    else\n        return to - item ;\n}\n\nvoid swap(int &x, int &y)\n{\n    int temp = x;\n    x = y;\n    y = temp;\n}\n\nvoid print_config (int A[][k])\n{\n    cout << \"[\";\n    for (int i=0; i<n; i++) {\n        cout << \" [\";\n        for (int j=0; j<k; j++) {\n            cout << A[i][j] << \", \";\n        }\n        cout << \"\\b\\b], \";\n    }\n    cout << \"\\b\\b ]\" << endl;\n}\n\nvoid compute (int A[][k], int G[][4])\n{\n    for (int i=0; i<n-1; i++)\n    {\n        G[i][0] = gain(A[i][0], i+1, i+2) + gain(A[i+1][0], i+2, i+1);\n        G[i][1] = gain(A[i][0], i+1, i+2) + gain(A[i+1][1], i+2, i+1);\n        G[i][2] = gain(A[i][1], i+1, i+2) + gain(A[i+1][0], i+2, i+1);\n        G[i][3] = gain(A[i][1], i+1, i+2) + gain(A[i+1][1], i+2, i+1);\n    }\n}\n\nint main()\n{\n    int A[n][k];\n    int G[n-1][k*k];\n\n    // construct initial configuration\n    for (int i=0; i<n; i++)\n        for (int j=0; j<k; j++)\n            A[i][j] = n-i;\n\n    print_config(A);\n\n    int num_swaps = 0;\n    int r, c;\n    int max_gain;\n\n    do {\n        compute (A, G);\n\n        // which swap has high info gain\n        max_gain = -1;\n        for (int i=0; i<n-1; i++)\n            for (int j=0; j<k*k; j++)\n                if (G[i][j] > max_gain) {\n                   r = i;\n                   c = j;\n                   max_gain = G[i][j];\n                }\n\n        // Did we gain more information. If not terminate\n        if (max_gain < 0) break;\n\n        switch (c)\n        {\n            case 0: swap(A[r][0], A[r+1][0]); break;\n            case 1: swap(A[r][0], A[r+1][1]); break;\n            case 2: swap(A[r][1], A[r+1][0]); break;\n            case 3: swap(A[r][1], A[r+1][1]); break;\n        }\n\n        print_config(A);\n        num_swaps++;\n\n    } while (1);\n    cout << \"Number of swaps is \" << num_swaps << endl;\n}\n```\n\n\nI ran the above code for cases n=1,2,... and 7.  Here are the answers (number of swaps) respectively: 0, 2, 5, 10, 15, 23 (very close), and 31.  I think that the function gain() does not work well when n is even.  Can you confirm that by validating the number of swaps when n = 7. The lower bound of your equation is 31 so this is the optimal number of swaps when n = 7. \n\nI am printing here the output when n = 5 (since you are looking for a pattern):\n\n```\n[ [5, 5],  [4, 4],  [3, 3],  [2, 2],  [1, 1] ]\n[ [4, 5],  [5, 4],  [3, 3],  [2, 2],  [1, 1] ]\n[ [4, 5],  [3, 4],  [5, 3],  [2, 2],  [1, 1] ]\n[ [4, 5],  [3, 4],  [2, 3],  [5, 2],  [1, 1] ]\n[ [4, 5],  [3, 4],  [2, 3],  [1, 2],  [5, 1] ]\n[ [4, 3],  [5, 4],  [2, 3],  [1, 2],  [5, 1] ]\n[ [4, 3],  [2, 4],  [5, 3],  [1, 2],  [5, 1] ]\n[ [4, 3],  [2, 4],  [1, 3],  [5, 2],  [5, 1] ]\n[ [4, 3],  [2, 4],  [1, 3],  [1, 2],  [5, 5] ]\n[ [4, 3],  [2, 1],  [4, 3],  [1, 2],  [5, 5] ]\n[ [1, 3],  [2, 4],  [4, 3],  [1, 2],  [5, 5] ]\n[ [1, 3],  [2, 4],  [1, 3],  [4, 2],  [5, 5] ]\n[ [1, 3],  [2, 1],  [4, 3],  [4, 2],  [5, 5] ]\n[ [1, 1],  [2, 3],  [4, 3],  [4, 2],  [5, 5] ]\n[ [1, 1],  [2, 3],  [2, 3],  [4, 4],  [5, 5] ]\n[ [1, 1],  [2, 2],  [3, 3],  [4, 4],  [5, 5] ]\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Smallest number -- Algorithm [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                    \r\n                        \r\n                    \r\n                \r\n                    \r\n                            \r\n                                This question is unlikely to help any future visitors; it is only relevant to a small geographic area, a specific moment in time,  or an extraordinarily narrow situation that is not generally applicable to the worldwide audience of the internet. For help making  this question more broadly applicable, visit the help center.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                Closed 11 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nThis may sound really noobish, and I'm probably missing something really stupid.. But, I'm trying to calculate the differences between matrices, and the one with the smallest value (result) is the matching number.. But, for some reason my algorithm seems to be missing the smallest number and I can't figure out why..\n\nHere is the code:\n\n```\nint min_val = 0;\ndouble comp = 0;\nconst int ROW_BOUNDS(mat1Rows-mat2Rows+1);\nconst int COL_BOUNDS(mat1Cols-mat2Cols+1);\n\nfor(int i=0; (i < ROW_BOUNDS); i++) {\n    for(int j=0; (j < COL_BOUNDS); j++) {\n        m3.clear();\n        for (int row(0); row < mat2Rows; row++){\n            for (int col(0); col < mat2Cols; col++){\n                //cout << matrix1[i*mat1Cols+row*mat1Cols+col+j] << ' ';\n                m3.push_back( matrix1[i*mat1Cols+row*mat1Cols+col+j] );\n                currentRow = i;\n                currentCol = j;\n            }\n        }\n        comp = compMatrix1(matrix2, m3);\n        //printMatrix(m3, 2, 2);\n        //cout << endl << \" = \" << comp << endl; \n\n        if(comp < min_val)\n        {\n            minRow = currentRow;\n            minCol = currentCol;\n            m4 = m3;\n            min_val = comp;\n            cout << min_val;\n        }\n    }\n}    \n//printMatrix(m4, 2, 2);\n```\n\n\nAnd here is the output:\n\n```\n0 0 \n0 0 \n    = 2\n0 1 \n0 1 \n    = 4\n1 0 \n1 0 \n    = 0\n0 0 \n1 1 \n    = 2\n0 1 \n1 1 \n    = 3\n1 0 \n1 0 \n    = 0\n1 1 \n0 1 \n    = 3\n1 1 \n1 0 \n    = 1\n1 0 \n0 0 \n    = 1\n```\n\n\nIt prints:\n\n```\n  0 0 \n  0 0\n```\n\n\nWhen the actual result should be:\n\n```\n1 0 \n1 0\n```\n\n\nCould anyone offer any help please?\n    ", "Answer": "\r\nfew questions:\n\n```\ncomp = compMatrix1(matrix2, m3); \n```\n\n\nwhat does compMatrix1 look like? What is matrix2?\n\nAlso can you explain what the following code does?\n\n```\nm3.push_back( matrix1[i*mat1Cols+row*mat1Cols+col+j] );\n```\n\n\nYou may just be comparing matrices improperly or not filling m3 correctly. Also,\n\n```\nint min_val = 0;\n```\n\n\nInitializes the minimum value to be a lower than some values. What happens when the lowest value is actually 2? Then no matrix will have the min_val.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for finding smallest number with given number of factors\r\n                \r\nWhat's the most efficient algorithm anyone can think of that, given a natural number n, returns the least natural number x with n positive divisors (including 1 and x)? For example, given 4 the algorithm should result in 6 (divisors: 1,2,3,6); i.e. 6 is the smallest number having 4 distinct factors. Similarly, given 6, the algorithm should result in 12 (divisors: 1,2,3,4,6,12); i.e. 12 is the smallest number having 6 distinct factors\n\nIn terms of real-world performance, I'm looking for a scalable algorithm which can give answers of the order of 1020 within 2 seconds on a machine which can do 107 computations per second.\n    ", "Answer": "\r\nhttp://www.primepuzzles.net/problems/prob_019.htm\n\n\n  b) Jud McCranie, T.W.A. Baumann & Enoch Haga sent basically the same\n  procedure to find N(d) for a given d:\n  \n  \n  Factorize d as a product of his prime divisors: d = p1a1 * p2a2 *p3a3 *...\n  convert this factorization in another arithmetically equivalent factorization, composed of non-powered monotonically decreasing and not\n  necesarilly prime factors... (uf!...) d = p1a1 * p2a2 *p3a3 *... =\n  b1 * b2 * b3... such that b1 ≥ b2 ≥ b3...\n  You must realize that for every given ```\nd```\n, there are several\n  arithmetically equivalent factorizations that can be done: by example:\n  if d = 16 = 24 then there are 5 equivalent factorizations: \n  d = 2*2*2*2 = 4*2*2 = 4*4 = 8*2 = 16\n  N is the minimal number resulting of computing 2b1-1 * 3b2-1 * 5b3-1 * ... for all the equivalent factorizations of d. Working the same example:\n  N(16) = the minimal of these {2 * 3 * 5 * 7, 23 * 3 * 5, 23 * 33, 27 * 3, 215} = 23 * 3 * 5 = 120\n  \n\n\nUpdate: With numbers around 1020, pay attention to the notes by Christian Bau quoted on the same page.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "RSA Encryption safety\r\n                \r\nIm alittle confused about RSA safety.\nIve been google'ing for rsa algorithms and have found alot but they keys seems to be small numbers all the time.\n\nThis is so far the easiest algorithm i found:\n\n```\nvoid RSAEncDec(BYTE* pBuff, int iLen)\n{\n    for (long i = 0; i < iLen; i++)\n    {\n        pBuff[i] = (long)pow(pBuff[i], key) % modl;\n    }\n}\n```\n\n\nWith a key generation algorithm:\n\n```\nrsacrypto::rsacrypto()\n{\n    long p1,p2; //Prime numbers\n    long n = 0; //Modulus\n    long phi =0; //Totient value.\n\n    long e = 0; //Public key exponent.\n    long d = 0; //Private key exponent.\n\n    p1 = genrndprimes(100,900);\n    Sleep(1000);\n    p1 = genrndprimes(100,900);\n\n    n = p1*p2;\n    phi = totient(n);\n\n    e = genrndnum(2,(phi-1));\n\n    while(gcd(e,phi)!=1)\n    {\n        e = genrndnum(2,(phi-1));\n    }\n\n    d = (1/e)%phi; //Modular Multiplicative Inverse.\n\n    privatekey = e;\n    publickey = d;\n    modl = n;\n\n\n}\n```\n\n\nI am concerned about the \"genrndprimes(100,900)\", 100 between 900 is a small numbers while i learned the key sizes need to be above 512bits, its way above 900.\nAm i getting something wrong here?\n\nThanks alot.\n    ", "Answer": "\r\nThat is not safe at all and can be brute-forced quite fast. It would take at most 900 divisions to find the private key from the public key (assuming ```\ngenrndprimes```\n takes actual min and max values instead number of bits). So this would take less than a second.\n\nYou need to either write your own multiple precision code or simply use existing ones like GMP. Then you could represent big integers. Today a good starting value for n is a 2048-bit integer.\n\nFurthermore a modular multiplicative inverse is not an actual division operation, because there cannot be any fractions. Everything must be done in modular arithmetic. The modular multiplicative inverse requires for example the use of the extended euclidean algorithm to find it.\n\nBut to make RSA actually usable in the real-world, you would also need to implement a padding scheme such as PKCS#1 v2.0 (OAEP).\n\nThen you need to look into hybrid encryption if you want to encrypt data that is bigger than n (the padding must be also accounted for). In this case you would generate a random AES key, encrypt your data with AES and then encrypt the generated AES key with RSA, because AES keys are small enough to be encrypted.\n\nAfter you've done all that, you will find that your code has bugs and is vulnerable to various side-channel attacks. You will use your favorite search engine to find an existing widely known and tested library that does all this for your, because never roll your own crypto.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Removing duplicates using collections in Java when merging two sorted arrays\r\n                \r\nI am trying to learn some Algorithms and I want to remove the duplicates using Set. I am merging two sorted arrays using my small algorithm which checks if the number from array A is small than B store in C, then later adds the remaining arrays\n\nI have tried but keeps getting confused\n\n```\n    //arrays must be sorted\n    int a [] = {1,3,4,5};\n    int b [] = {5,6,8,9,10};\n\n    System.out.println(Arrays.toString(combineArray(a,b,3,4)));\n\n}\n\nprivate static int[] combineArray(int[] A, int[] B, int m, int n) {\n\n    // TODO Auto-generated method stub\n\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int c [] = new int[9];\n    while(i <= m && j <= n) {\n\n        if(A[i] < B[j]) {\n\n            c[k++] = A[i++];\n\n        }else {\n            c[k++] = B[j++];\n        }\n\n    }\n\n    for(; i <=m; i++) {\n        c[k++] = A[i];\n    }\n\n    for(; j <=n ; j++) {\n        c[k++] = B[j];\n    }\n\n\n\n\n    return c;\n}\n```\n\n\nNo error just wants some help with removing the duplicates.\n    ", "Answer": "\r\nYou do not need to use an own algorithm, Java 8+ can do this nice and clean:\n\n```\nint[] array1 = {1, 2, 65, 4, 8, 5, 7, 18, 6, 0};\n    int[] array2 = {0, 2, 11, 12, 5, 6, 8};\n    int[] merged = IntStream.concat(IntStream.of(array1), IntStream.of(array2))\n        .distinct()\n        .sorted()\n        .toArray();\n```\n\n\nEdit\n\nIt seems that calling ```\ndistinct()```\n after ```\nsorted()```\n is faster.\nSee here:\nJava Streams: How to do an efficient \"distinct and sort\"?  \n\nSo it is probably better to do:  \n\n```\nint[] array1 = {1, 2, 65, 4, 8, 5, 7, 18, 6, 0};\n    int[] array2 = {0, 2, 11, 12, 5, 6, 8};\n    int[] merged = IntStream.concat(IntStream.of(array1), IntStream.of(array2))\n        .sorted()\n        .distinct()\n        .toArray();\n\nTo your posted algorithm:\n```\n\n\nI debugged your programm to the following state: \n\n```\ni=3, j=0 k=3.\n\nThe output of c is then: 1,3,4,0...\n```\n\n\nIn this step, you did the follwing compare: ```\nA[3] < B[0]```\n  , which is ```\n5<5```\n which is ```\nfalse```\n, so the ```\nelse```\n enters. There, the ```\n5```\n of ```\nB[]```\n is added.\nIn the next step, weve got ```\ni=3 (nothing changed because the first if was not entered!), j=1 and k=4```\n, so we are checking: ```\nA[3] < B[1]```\n which evaluates to ```\ntrue```\n, because ```\n5<6```\n, so ```\nA[i++]```\n will be added, that is ```\nA[4]```\n which is ```\n5```\n. That is where the doubled five comes from. Now how to solve this?\n\nI hope you are clear that the if-statements are your problem where you are checking for smaller-or-equal, which means in fact that it is \"allowed\" to enter a condition twice: one time when the first operand is smaller than the second one and the second time when both are equal. Since you have got this case in if-statements for both arrays, you will have duplicates. Only one if-condition is allowed to check for smaller-or-equal. So if you change your code:  \n\nprivate static int[] combineArray(int[] A, int[] B, int m, int n) {\n\n```\nint i = 0;\nint j = 0;\nint k = 0;\nint c[] = new int[9];\nwhile (i < m && j < n) {\n\n    if (A[i] < B[j]) {\n\n        c[k++] = A[i++];\n\n    } else {\n        c[k++] = B[j++];\n    }\n\n}\n\n\nfor (; i < m; i++) {\n    c[k++] = A[i];\n}\n\nfor (; j <= n; j++) {\n    c[k++] = B[j];\n}\n\n\nreturn c;\n```\n\n\n}\n\nIt will not enter twice and won't add duplicated numbers twice. For your example, the output is:\n```\n[1, 3, 4, 5, 6, 8, 9, 10, 0]```\n  \n\nSince duplicates are removed, there is one ```\n0```\n.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "The odd number algorithm\r\n                \r\nI am practicing on some algorithm problems and I have faced a problem which I can't understand clearly.\nThe problem is a string with N natural numbers, I need to search in this string for K distinct and disjoint sequences, containing in total a number L of elements, so that there is an odd number of odd numbers among the L elements. I want calculate the largest sum that can be obtained with these L numbers.\n\nInput:\n8 3 5 <-- natural numbers N, K and L.\n\n1 2 3 4 5 6 7 8 <--- N natural numbers representing the numbers in the string\n\nSubsequent {2}, {4}, {6,7,8} have an odd number of odd elements (one odd element, 7), their sum is 27 and is the maximum that can be obtained with 5 numbers that meet the required property.\n\nOutput:\n\n27 <--- a single number representing the maximum amount by applying the rules.\n\nMy question is, how did he obtain that output?\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Quicksort sorts larger numbers faster?\r\n                \r\nI was messing around with Python trying to practice my sorting algorithms and found out something interesting.\n\nI have three different pieces of data:  \n\n\nx = number of numbers to sort  \ny = range the numbers are in (all random generated ints)  \nz = total time taken to sort  \n\n\nWhen:\nx = 100000 and\ny = (0,100000) then\nz =  0.94182094911 sec\n\nWhen:\nx = 100000 and\ny = (0,100) then\nz = 12.4218382537 sec\n\nWhen:\nx = 100000 and\ny = (0,10) then\nz =  110.267447809 sec\n\nAny ideas?\n\nCode:\n\n```\nimport time\nimport random\nimport sys\n\n#-----Function definitions\n\ndef quickSort(array): #random pivot location quicksort. uses extra memory.\n    smaller = []\n    greater = []\n    if len(array) <= 1:\n        return array\n    pivotVal = array[random.randint(0, len(array)-1)]\n    array.remove(pivotVal)\n    for items in array:\n        if items <= pivotVal:\n            smaller.append(items)\n        else:\n            greater.append(items)\n    return concat(quickSort(smaller), pivotVal, quickSort(greater))\n\ndef concat(before, pivot, after):\n    new = []\n    for items in before:\n        new.append(items)\n    new.append(pivot)\n    for things in after:\n        new.append(things)\n    return new\n\n#-----Variable definitions\nlist = []\niter = 0\nsys.setrecursionlimit(20000)\nstart = time.clock() #start the clock\n\n#-----Generate the list of numbers to sort\nwhile(iter < 100000):\n    list.append(random.randint(0,10))  #modify this to change sorting speed\n    iter = iter + 1\ntimetogenerate = time.clock() - start #current timer - last timer snapshot\n\n#-----Sort the list of numbers\nlist = quickSort(list)\ntimetosort = time.clock() - timetogenerate #current timer - last timer snapshot\n\n#-----Write the list of numbers\nfile = open(\"C:\\output.txt\", 'w')\nfor items in list:\n    file.write(str(items))\n    file.write(\"\\n\")\nfile.close()\ntimetowrite = time.clock() - timetosort #current timer - last timer snapshot\n\n#-----Print info\nprint \"time to start: \" + str(start)\nprint \"time to generate: \" + str(timetogenerate)\nprint \"time to sort: \" + str(timetosort)\nprint \"time to write: \" + str(timetowrite)\ntotaltime = timetogenerate + timetosort + start\nprint \"total time: \" + str(totaltime)\n```\n\n\n-------------------revised NEW code----------------------------  \n\n```\ndef quickSort(array): #random pivot location quicksort. uses extra memory.\n    smaller = []\n    greater = []\n    equal = []\n    if len(array) <= 1:\n        return array\n    pivotVal = array[random.randint(0, len(array)-1)]\n    array.remove(pivotVal)\n    equal.append(pivotVal)\n    for items in array:\n        if items < pivotVal:\n            smaller.append(items)\n        elif items > pivotVal:\n            greater.append(items)\n        else:\n            equal.append(items)\n    return concat(quickSort(smaller), equal, quickSort(greater))\n\ndef concat(before, equal, after):\n    new = []\n    for items in before:\n        new.append(items)\n    for items in equal:\n        new.append(items)\n    for items in after:\n        new.append(items)\n    return new\n```\n\n    ", "Answer": "\r\nI think this has to do with the choice of a pivot.  Depending on how your partition step works, if you have a lot of duplicate values, your algorithm can degenerate to quadratic behavior when confronted with many duplicates.  For example, suppose that you're trying to quicksort this stream:\n\n```\n [0 0 0 0 0 0 0 0 0 0 0 0 0]\n```\n\n\nIf you aren't careful with how you do the partitioning step, this can degenerate quickly.  For example, suppose you pick your pivot as the first 0, leaving you with the array\n\n```\n [0 0 0 0 0 0 0 0 0 0 0 0]\n```\n\n\nto partition.  Your algorithm might say that the smaller values are the array\n\n```\n [0 0 0 0 0 0 0 0 0 0 0 0]\n```\n\n\nAnd the larger values are the array\n\n```\n []\n```\n\n\nThis is the case that causes quicksort to degenerate to O(n2), since each recursive call is only shrinking the size of the input by one (namely, by pulling off the pivot element).\n\nI noticed that in your code, your partitioning step does indeed do this:\n\n```\nfor items in array:\n    if items <= pivotVal:\n        smaller.append(items)\n    else:\n        greater.append(items)\n```\n\n\nGiven a stream that's a whole bunch of copies of the same element, this will put all of them into one array to recursively sort.\n\nOf course, this seems like a ridiculous case - how is this at all connected to reducing the number of values in the array? - but it actually does come up when you're sorting lots of elements that aren't distinct.  In particular, after a few passes of the partitioning, you're likely to group together all equal elements, which will bring you into this case.\n\nFor a discussion of how to prevent this from happening, there's a really great talk by Bob Sedgewick and Jon Bentley about how to modify the partition step to work quickly when in the presence of duplicate elements.  It's connected to Dijkstra's Dutch national flag problem, and their solutions are really clever.\n\nOne option that works is to partition the input into three groups - less, equal, and greater.  Once you've broken the input up this way, you only need to sort the less and greater groups; the equal groups are already sorted.  The above link to the talk shows how to do this more or less in-place, but since you're already using an out-of-place quicksort the fix should be easy.  Here's my attempt at it:\n\n```\nfor items in array:\n    if items < pivotVal:\n        smaller.append(items)\n    elif items == pivotVal:\n        equal.append(items)\n    else:\n        greater.append(items)\n```\n\n\nI've never written a line of Python in my life, BTW, so this may be totally illegal syntax.  But I hope the idea is clear!  :-)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "recursion don´t go to the step back when finishing the last step\r\n                \r\nI'm working on a program that can solve algorithms, and I am using recursion to do so, but when it is checking if it can place a number and it can't it will just end the program, and no looking back to change the number before, can anyone help me. Here is my code:\n\n```\npublic static void dfs(int x, int y, int value )\n\n{\n    if(matriz[x][y]==0)\n    {\n        SudokuSolved[x][y]=value;\n    }\n    boolean br= breakrule(x,y);\n    if (br==false)\n    {\n        sol = solved();\n    }\n    if(solved()==false&&br==false)\n    {\n        f++;\n        if (f>=9)\n        {\n            f=0;\n            c++;\n        }\n        for (int num=1;num<10;num++)\n        {               \n            dfs(f,c,num);\n        }\n    }\n    if(solved()==true&&br==false)\n    {\n        for (int i=0; i<9;i++)\n        {\n            System.out.println(\"-------------------\");\n            System.out.print('|');\n            for (int j=0; j<9;j++)\n            {\n                System.out.print(SudokuSolved[i][j]);\n                System.out.print('|');\n            }\n            System.out.println();\n        }\n        System.out.println(\"-------------------\");\n    }\n}\n```\n\n\nany tip or suggestion is well appreciated\n    ", "Answer": "\r\nIt's difficult to diagnose from the code you've supplied but it looks as though you are misunderstanding the way backtracking works. In pseudocode your algorithm should be something like:\n\n```\ntest value:\n    change state to include value\n    if state is legal\n        if state is complete\n            use completed state\n        else\n            test all possible values in next step\n    change state to remove value\n```\n\n\nTry changing your code to match that pattern.\n\nAs an example, if you have well encapsulated classes to represent a Sudoko board then the code to solve might be:\n\n```\nprivate void solve(Board board, CellValue value) {\n    board.add(value);\n    if (board.isLegal()) {\n        if (board.isComplete()) {\n            useSolution(board);\n        } else {\n            Cell cell = board.firstEmptyCell();\n            for (Value value: Value.values())\n                solve(board, new CellValue(cell, value));\n        }\n    }\n    board.remove(value);\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Specific algorithm sorting n elements with m distinct values\r\n                \r\nI am going through exercies for an exam in algorithm analysis and this is one of them:\n\n\n  Present an algorithm that takes as input a list of n elements (that\n  are comparable) and sorts them in O(n log m) time, where m is the\n  number of distinct values in the input list.\n\n\nI have read about the common sorting algorithms and I really can't come up with a solution.\n\nThanks for your help\n    ", "Answer": "\r\nYou can build an augmented balanced binary search tree on the ```\nn```\n elements. The augmented info stored at each node would be it's frequency. You build this structure with ```\nn```\n insertions into the tree, the time to do this would be ```\nO(n lg m)```\n, since there would be only ```\nm```\n nodes. Then you do a in-order traversal of this tree: visit the left subtree, then print the element stored at the root ```\nf```\n times where ```\nf```\n is it's frequency (this was the augmented info) and finally visit the right subtree. This traversal would take time ```\nO(n + m)```\n. So, the running time of this simple procedure would be ```\nO(n lg m + n + m) = O(n lg m)```\n since ```\nm <= n```\n.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Recursive algorithm to select ascending noncontiguous numbers from a list\r\n                \r\nI need to write a function which finds the longest, not necessarily contiguous, ascending sub-sequence in a list of numbers. The function needs to be recursive.\n\nI have a problem with my algorithm and I cannot figure out how to fix it. Here's an example starting list:\n\n\n  [88, 1, 22, 3, 34, 6, 54, 9, 19]\n\n\nThe correct result is:\n\n\n  [1, 3, 6, 9, 19]\n\n\nand I want to print on the screen the length of this sub-sequence, in this case, 5.\n\nMy function:\n\n```\nint subseires(int arraysub[], int small, int i, int j, int coun){\n    if( i==size ) return 0;\n\n    if( arraysub[i]>arraysub[j] )\n        subseires(arraysub, small, i+1, j+1, coun);\n\n    if( arraysub[i]<arraysub[j] )\n        subseires(arraysub, small, i, j+1, coun+1);\n\n    return coun;\n}\n```\n\n\nCan anyone help by pointing out the problems with my procedure?\n    ", "Answer": "\r\nYour algorithm is probablly wrong.\n\nWhat you need to do is for each member of the aray-if you can select it(it's not less than the previous one you have selected) then check two options recursivelly: to select it or not to select it. This way you go until the end of the array and return the total length. In the end you print the longest length.\n\nTry to implement this algorithm in a C function.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Random numbers algorithm\r\n                \r\nI need to generate random numbers in groups: 100, 500, 1000 and 10000 numbers uniforms and gaussians. This is necessary for create some histograms and other statistic stuff.\n\nThe condition is not to use python's native random function, so I was thinking to use this method (linear congruential generator): ```\nXn+1 ≡ (aXn + c) mod m```\n. Here I need 4 variables.\nCan someone please tell me how can i implement this algorithm? I assume that the m variable the first time is 100\n    ", "Answer": "\r\nYou already know that this is Linear congruential generator, so what is so hard to read it up?\n\nIt tells you the formula you already know  and an explanation how you should select them:\n\n\n  The period of a general LCG is at most m, and for some choices of\n  factor a much less than that. Provided that the offset c is nonzero,\n  the LCG will have a full period for all seed values if and only if:\n  \n  1) c and m are relatively prime\n  \n  2) a - 1 is divisible by all prime factors of m\n  \n  3) a - 1 is a multiple of 4 if m is a multiple of 4.\n\n\nThey even give you some examples of these values in the table below. This is more than enough to implement a simple function:\n\n```\ndef LCG(seed, n, a=1664525, c=1013904223, m=2**32):\n    numbers = []\n    for i in xrange(n):\n        seed = (a * seed + c) % m\n        numbers.append(seed)\n\n    return numbers\n\nprint LCG(3, 5)\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm translate a number to String [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question is opinion-based. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it can be answered with facts and citations by editing this post.\r\n                \r\n                    \r\n                        Closed 6 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI need to design an algorithm where each number is encoded to an alphabet, for example:\n\n1=A, 2=B, 3=C...26=Z\n\nGiven a set of numbers, I have to translate them to a combination of strings. For example:\n\n123 can be translated to - ABC(123), AW(1 23) and LC(12 3)\n\nWrite an algorithm to find the combinations for number - 123123123.\nNow here is what I wrote and I find it inefficient because of multiple \"for\" loops. Is there any better way I can rewrite this algorithm?\n```\npublic class ValidCombinations {\n    Map<Integer, String> mapping = new HashMap<Integer, String>();\n\n    public void run() {\n            String s = \"123123123\";\n\n            /*Convert String to int[]*/\n            char[] cArray = s.toCharArray();\n            int[] input = new int[cArray.length];\n\n            for (int i=0; i<cArray.length; i++) {\n                    input[i] = Character.getNumericValue(cArray[i]);\n            }\n\n            Set<String> output = new HashSet<String>();\n\n            for (int i='A'; i<='Z'; i++) {\n                    mapping.put(i - 'A' + 1, String.valueOf((char)i));\n            }\n\n            for (int i=0; i<input.length; i++) {\n                    if (mapping.containsKey(input[i])) {\n                            output.add(precombine(i, input) + mapping.get(input[i]) + postcombine(i, input));\n                            if (i+1<input.length) {\n                                    if (mapping.containsKey(input[i]*10 + input[i+1])) {\n                                            output.add(precombine(i, input) + mapping.get(input[i]*10 + input[i+1]) + postcombine(i+1, input));\n                                    }\n                            }\n                    }\n            }\n\n            System.out.println(output);\n    }\n\n    public String precombine(int i, int[] input) {\n            String residue=\"\";\n\n            for (int m=0; m<i; m++) {\n                    residue += mapping.get(input[m]);\n            }\n\n            return residue;\n    }\n\n    public String postcombine(int i, int[] input) {\n            String residue=\"\";\n\n            for (int k=i+1; k<input.length; k++) {\n                    residue += mapping.get(input[k]);\n            }\n\n            return residue;\n    }\n\n    public static void main(String[] args) {\n            ValidCombinations v = new ValidCombinations();\n            v.run();\n    }\n```\n\n}\n\nFor '123' - [ABC, AW, LC]\nFor '123123123' - [LCABCABC, AWABCABC, ABCAWABC, ABCLCABC, ABCABCLC, ABCABCABC, ABCABCAW]\n\n    ", "Answer": "\r\nThis problem is crying out for recursion. Here's a quick and dirty implementation that takes the input \"number\" in as a string and uses ```\nsubstring()```\n to consume the digits. You could adapt it to use numerical methods to get the first (or first two) decimal digits from an integer if you prefer. \n\nIf you choose to work directly from an ```\nint```\n, it would probably be easier to start at the end (working with the least-significant-digits) than at the beginning -- ```\nlastDigit = number % 10; otherDigits = number / 10```\n\n\n```\npublic List<String> encodings(String number) {\n    List<String> out = new ArrayList<>();\n    addEncodings(\"\", number, out);\n    return out;\n}\n\nprivate void addEncodings(String prefix, String number, List<String> out) {\n    if (number.length() == 0) {\n        out.add(prefix);\n    } else {\n        addParsingNDigits(1, prefix, number, out);\n        addParsingNDigits(2, prefix, number, out);\n    }\n\n}\n\nprivate void addParsingNDigits(int digits, String prefix, String number, List<String> out) {\n    if (number.length() >= digits) {\n        char encodedChar = parseChars(number, digits);\n        if (encodedChar >= 'A' && encodedChar <= 'Z') {\n            addEncodings(prefix + encodedChar, number.substring(digits), out);\n        }\n    }\n}\n\nprivate char parseChars(String number, int length) {\n    int intVal = Integer.parseInt(number.substring(0, length));\n    return (char) ('A' + intVal - 1);\n}\n```\n\n\nI don't think your solution will find all possible encodings -- I think you need some sort of stack to solve it. The solution above implicitly uses the execution stack, because of recursive method calls. Another solution could explicitly place objects representing \"todo\" calculations onto a stack data structure in the heap:\n\n```\nprivate static class StackItem {\n\n    public StackItem(String prefix, String number) {\n        this.prefix = prefix;\n        this.number = number;\n    }\n\n    public String prefix;\n    public String number;\n}\n\npublic List<String> encodings(String number) {\n    List<String> results = new ArrayList<>();\n    Stack<StackItem> stack = new Stack<>();\n    stack.push(new StackItem(\"\", number));\n    while (!stack.isEmpty()) {\n        StackItem current = stack.pop();\n        if (current.number.equals(\"\")) {\n            results.add(current.prefix);\n        } else {\n            addToStackTakingNChars(2, current, stack);\n            addToStackTakingNChars(1, current, stack);\n        }\n    }\n    return results;\n}\n\nprivate void addToStackTakingNChars(int n, StackItem current, Stack<StackItem> stack) {\n    if (current.number.length() >= n) {\n        char c = parseChars(current.number, n);\n        if (c >= 'A' && c <= 'Z') {\n            stack.push(new StackItem(current.prefix + c, current.number.substring(n)));\n        }\n    }\n}\n```\n\n\nAlthough \"println debugging\" is generally a bad habit, it would probably be a good learning exercise to run these examples with some ```\nprintln()```\ns to observe how it works.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "JavaScript - Improving algorithm for finding square roots of perfect squares without Math.sqrt\r\n                \r\nI'm trying to learn algorithms and coding stuff by scratch. I wrote a function that will find square roots of square numbers only, but I need to know how to improve its performance and possibly return square roots of non square numbers\n\n```\nfunction squareroot(number) {\n    var number;\n    for (var i = number; i >= 1; i--) {\n        if (i * i === number) {\n            number = i;\n            break;\n       }\n   }\n   return number;\n}\n\n alert(squareroot(64))\n```\n\n\nWill return 8\n\nMost importantly I need to know how to improve this performance. I don't really care about its limited functionality yet\n    ", "Answer": "\r\nHere is a small improvement I can suggest. First - start iterating from 0. Second - exit loop when the square of root candidate exceeds the ```\nnumber```\n.\n\n```\nfunction squareroot(number) {\n    for (var i = 0; i * i <= number; i++) {\n        if (i * i === number)\n            return i;\n   }\n   return number; // don't know if you should have this line in case nothing found\n}\n```\n\n\nThis algo will work in O(√number) time comparing to initial O(n) which is indeed performance improvement that you asked.\n\nEdit #1\n\nJust even more efficient solution would be to binary search the answer as @Spektre suggested. It is known that x2 is increasing function. \n\n```\nfunction squareroot(number) {\n    var lo = 0, hi = number;\n    while(lo <= hi) {\n         var mid = Math.floor((lo + hi) / 2);\n         if(mid * mid > number) hi = mid - 1;\n         else lo = mid + 1;\n    }\n    return hi;\n}\n```\n\n\nThis algo has O(log(number)) running time complexity.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Compression algorithms for numbers only\r\n                \r\nI am to compress location data (latitude,longitude, date,time). All the numbers are in fixed format. 2 of them (latitude,longitude) are with decimal format. Other 2 are integers.\n\nNow these numbers are in fixed format string. \n\nWhat are the algorithms for compressing numbers in fixed format? \nIs number only compressions (if there any) better than string compression? \nShould I directly compress string without converting it to numbers and then compress?\n\nThanks in advance.\n    ", "Answer": "\r\nThis is one of these places where a little theory is helpful.  You need to think about several things:\n\n\nwhat is the resolution of your measurements: 0.1° or 0.001°?  1 second or one microsecond?\nare the measurements associated and in some order, or tossed together randomly?\n\n\nLet's say, just for example, that the resolution is 0.01°.  Them you know that your values range from -180° to +180°, or 35900 different values.  Lg(35900) ≈ 16 so you need 16 bits; 14 bits for -90°–+90°.  Clearly, if you're storing this kind of value as floating-point, you can compress the data by half immediately.\n\nSimilarly with date time, what's the range; how many bits must you have?\n\nNow, if the data is in some order (like, samples taken sequentially aboard a single ship) then all you need is a start value and a delta; that can make a big difference.  With a ship traveling at 30 knots, the position can't change any more that about 0.03 degrees an hour or about 0.0000083 degrees a second.  Those deltas are going to be very small values, so you can store them in a very few bits. \n\nThe point is that there are a number of things you can do, but you have to know more about the data than we do to make a recommendation. \n\n\n\nUpdate: Oh, wait, fixed point strings?!\n\nOkay, this is (relatively) easy.  Just to start with, yes, you want to convert your strings into some binary representation.  Just making up a data item, you might have\n\n```\n040.00105.0020090518212100Z\n```\n\n\nwhich you could convert to\n\n\n|  4000            | short int, 16 bits |  \n| 10500            | short int, 16 bits |  \n| 20090518212100Z  | 64 bits            |\n\n\nSo that's 96 bits, 12 bytes versus 26 bytes.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Freecodecamp - Counting Cards\r\n                \r\nI know there are a number of ways to complete this challenge and I can simply  a different approach to pass the requirement however I am struggling to understand what's wrong with my code. \n\nChallenge - https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-javascript/counting-cards/\n\nAny help would be much appreciated.\n\n```\n    var count = 0;\n\n    function cc(card) {\n      // Only change code below this line\n\n      if (card < 7){\n        count++;\n      } else if (card < 10){\n        count+=0;\n      } else (count--;)\n\n      if (count > 0){\n        return count + \" Bet\";\n      } else (\n        return count + \" Hold\";\n      )\n      // Only change code above this line\n    }\n\n    // Add/remove calls to test your function.\n    // Note: Only the last will display\n    cc(2); cc(3); cc(7); cc('K'); cc('A');\n```\n\n    ", "Answer": "\r\nFirstly, when you try to execute your code, you should be seeing a Syntax Error, pointing to the semicolon in ```\n(count--;)```\n. The reason for this is: ```\nelse```\n expects a statements, if it sees a parenthesis it means the statement is an expression, and in an expression, semicolons can't appear inside parentheses (this is rather simplified). The correct way to write it is either without parentheses (generally frowned upon) as ```\nelse count--;```\n, or with curly braces: ```\nelse { count--; }```\n.\n\nWhen you fix that error, there will be another one of the same kind, as you seem to systematically use parentheses instead of curly braces after ```\nelse```\n.\n\nAfter that, your code kind of works. There's questionable comparisons of ```\ncard```\n, that can be a letter or a number, with an integer, but it coincidentally works the way you hope it does (because ```\n'K'```\n, ```\n'Q'```\n and ```\n'J'```\n happen to be evaluated as greater than ```\n7```\n and ```\n10```\n.) It would be better to not rely on such magic, and have a translation table between letters and values - or at least, if you're going to rely on magic, comment so that readers are aware you are aware of the magic. Also, ```\ncount+=0```\n is a void statement, it does nothing, and could have been left out. That leaves you with an empty ```\nelse if```\n, but that's not an error. However, it would probably be much more readable if you had ```\nif (card < 7) { count--; } else if (card >= 10) { count++; }```\n.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Why this simple algorithm for finding the maximum number (among 3 numbers) can't print out the result? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs debugging details. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     Edit the question to include desired behavior, a specific problem or error, and the shortest code necessary to reproduce the problem. This will help others answer the question.\r\n                \r\n                    \r\n                        Closed 8 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nMy very simple program should sort out the maximum one among 3 numbers. I have used a static method for algorithm and called that into the main method. User should enter 3 floating numbers by using a space. afetr pressing enter the program should print out the biggest floating number. But it doen't. It just shows a bunch of errors. The attachment shows what error I have:\n\n\n\nMaximumFinder.java:\n\n```\n    package maximumfinder;\n\nimport java.util.Scanner;\n\npublic class MaximumFinder {\n\n    public static void main(String[] args) {\n\n        Scanner inScanner = new Scanner(System.in);\n        System.out.println(\"Enter 3 floating-pont value separated by space:\");\n        double num1 = inScanner.nextDouble();\n        double num2 = inScanner.nextDouble();\n        double num3 = inScanner.nextDouble();\n        double result = maximum(num1, num2, num3);\n        System.out.println(\"Maximum number is: \"+result);\n    }\n\n    public static double maximum(double x, double y, double z) {\n        double maximumValue = x;\n        if (y > maximumValue) \n            maximumValue = y;\n            //statement\n\n\n        if (z > maximumValue) \n            //statement  \n            maximumValue = z;\n\n\n\n        return maximumValue;\n\n    }\n}\n```\n\n    ", "Answer": "\r\nIf I exclude the package declaration it is working perfectly fine for me\nJust make sure that the class is in the right package.\n\nNote : compile & run from command line.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "randomized quick sort [crashes on some inputs]\r\n                \r\nI removed the codes because it's homework. If you actually needs the help, you can either look at the discussion I had with George B (below), or PM me.\n\n\n\nHi guys. This is a homework assignment. I have tested it against other sorting algorithms, and Q.S. is the only one that is crashing on some random inputs.\n\nThe program is quit long (with other stuff), but input is randomly generated....\n\nI spent a few hours tracing the codes and still couldn't figure out any error.... \nQ.S. is probably very easy for the professionals, so I hope to receive advices on this implementation....\n\nAny input is appreciated!\n\n\n\nQ: What is \"random\"?\n\nA: A portion of generation is included.\n\n```\nvoid randomArray(unsigned long*& A, unsigned long size)\n{\n //Note that RAND_MAX is a little small for some compilers (2^16-1).\n //In order to test our algorithms on large arrays without huge\n //numbers of duplicates, we'll set the high-order and low-order\n //parts of the return value with two random values.\n A = new unsigned long[size];\n for(unsigned long i=0; i<size; i++)\n  A[i] = (rand()<<16) | (rand());\n\n //Another note:  initially, if you want to test your program out with smaller\n //arrays and small numbers, just reduce A[i] mod k for some small value k as in the following:\n //A[i] = rand() % 16;\n //this may help you debug at first.\n}\n```\n\n\nQ: What kind of error?\n\nWell, I am not getting compilation error. Without Q.S., I can ran other four sorting algorithm without problems (I can continuously running the sorting). When Q.S is activated, after running the program one or two or three times, or even at the first time of running, the program ends (I am using Eclipse, so the consoles ends). \n\n\n  enter the number of elements, or a\n  negative number to quit: 5 {some\n  arrays}\n  \n  selection sort took 0 seconds. merge\n  sort took 0 seconds. quick sort took 0\n  seconds. heap sort took 0 seconds.\n  bucket sort took 0 seconds. {output of\n  5 sorted arrays}\n  \n  enter the number of elements, or a\n  negative number to quit: 6 {some\n  arrays}\n  \n  selection sort took 0 seconds. merge\n  sort took 0 seconds. quick sort took 0\n  seconds. heap sort took 0 seconds.\n  bucket sort took 0 seconds.\n  \n  {output of 5 sorted arrays}\n  \n  enter the number of elements, or a\n  negative number to quit: 8 {arrays}\n  --- console ends---\n\n\nAgain, the problem is that it crashes quite often, so this suggests that there is a high possibility of access violation,,, but doing 10+ tracings I don't see the problem.... (maybe I overloaded my brain stack -_- )\n\nThanks.\n    ", "Answer": "\r\nHint:\n\n```\nq is unsigned (the result of the partition function)\nso, q-1 is also unsigned\nwhat if q is zero?\n```\n\n\n(It is homework so you have to figure it out I guess :) )\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Compression algorithms for numbers only\r\n                \r\nI am to compress location data (latitude,longitude, date,time). All the numbers are in fixed format. 2 of them (latitude,longitude) are with decimal format. Other 2 are integers.\n\nNow these numbers are in fixed format string. \n\nWhat are the algorithms for compressing numbers in fixed format? \nIs number only compressions (if there any) better than string compression? \nShould I directly compress string without converting it to numbers and then compress?\n\nThanks in advance.\n    ", "Answer": "\r\nThis is one of these places where a little theory is helpful.  You need to think about several things:\n\n\nwhat is the resolution of your measurements: 0.1° or 0.001°?  1 second or one microsecond?\nare the measurements associated and in some order, or tossed together randomly?\n\n\nLet's say, just for example, that the resolution is 0.01°.  Them you know that your values range from -180° to +180°, or 35900 different values.  Lg(35900) ≈ 16 so you need 16 bits; 14 bits for -90°–+90°.  Clearly, if you're storing this kind of value as floating-point, you can compress the data by half immediately.\n\nSimilarly with date time, what's the range; how many bits must you have?\n\nNow, if the data is in some order (like, samples taken sequentially aboard a single ship) then all you need is a start value and a delta; that can make a big difference.  With a ship traveling at 30 knots, the position can't change any more that about 0.03 degrees an hour or about 0.0000083 degrees a second.  Those deltas are going to be very small values, so you can store them in a very few bits. \n\nThe point is that there are a number of things you can do, but you have to know more about the data than we do to make a recommendation. \n\n\n\nUpdate: Oh, wait, fixed point strings?!\n\nOkay, this is (relatively) easy.  Just to start with, yes, you want to convert your strings into some binary representation.  Just making up a data item, you might have\n\n```\n040.00105.0020090518212100Z\n```\n\n\nwhich you could convert to\n\n\n|  4000            | short int, 16 bits |  \n| 10500            | short int, 16 bits |  \n| 20090518212100Z  | 64 bits            |\n\n\nSo that's 96 bits, 12 bytes versus 26 bytes.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm about number theory\r\n                \r\nGive two positive integer a,b (1<=a<=30, 1<=b<=10000000) ,and define two unrepeatable set L and R,\n\n```\nL = {x * y | 1 <= x <= a, 1 <= y <= b, x,y is integer}\n\nR = {x ^ y | 1 <= x <= a, 1 <= y <= b, x,y is integer},\n```\n\n\n^ is XOR operate\n\nFor any two integer: A∈L, B∈R, we format B to n+1(n is the decimal digit number of b) decimal digit(fill 0 in front of B),and then joint B to the end of A and get a new integer AB.\n\nCompute the sum of all generated integer AB (In case the sum exceed, just return  \"sum mod 1000000007\", mod means modular operation)\n\nNote: the time of your algorithm is no more than 3 seconds\n\nMy algorithm is very simple:we can easily get the max number in set R, and the element in R is 0,1,2,3...maxXor,(the element max(a,b) may be not in R), using a hash table the compute set L. But the algorithm consume 4 seconds when a = 30, b = 100000.\n\n\n\nGive an example:\n\n```\na = 2, b = 4, so\n\nL = {1 * 1, 1 * 2, 1 * 3, 1 * 4, 2 * 1, 2 * 2, 2 * 3, 2 * 4} =  {1, 2, 3, 4, 6, 8}\n\nR =  {1^1,1^2,1^3,1^4,2^1,2^2,2^3,2^4} =  {0, 1, 2, 3, 5, 6}\n```\n\n\nAll generated integer AB is:\n\n```\n{\n\n100, 101, 102, 103, 105, 106,\n\n200, 201, 202, 203, 205, 206,\n\n300, 301, 302, 303, 305, 306,\n\n400, 401, 402, 403, 405, 406,\n\n600, 601, 602, 603, 605, 606,\n\n800, 801, 802, 803, 805, 806\n\n}\n```\n\n\nThe sum of all AB is ```\n14502```\n\n    ", "Answer": "\r\nSo the number AB can be written as ```\n10^(n+1) A + B```\n. Which means that summing over all ```\nA, B```\n, the total is equal to\n\n```\n|R| 10^(n+1) Sum(A in L) + |L| Sum(B in R)\n```\n\n\nIn your example, \n\n```\n|L| = 6\n|R| = 6\nSum(A in L) = 24\nSum(B in R) = 17\nn = 3\n```\n\n\nwhich when plugged into the above formula gives 14,502.\n\nThis reduces the runtime in the size of the sets from quadratic to linear, so you should see quite a huge improvement.\n\nThe next bits I haven't fleshed out fully because I don't have the time to, but they feel like they should work:\n\n\nFirst, notice that ```\nSum(A in L)```\n would be trivial to calculate using \n\n```\n1 + 2 + .. + n = n(n-1)/2\n```\n\n\nif there wasn't the constraint that ```\nL```\n doesn't contain repeats. You can get around this though by exploiting the fact that ```\na```\n is very small: iteratively calculate the sums ```\n1, .., a```\n using the triangular number formula and use that information to avoid counting a product more than once. \nFor ```\nSum(B in R)```\n, notice that when you compare ```\ny```\n and ```\nx^y```\n, at most the first ```\nlg(a)```\n bits have changed. So you can split a sum of ```\nx^y```\ns into two sums: one which deals with the bits from ```\nlg(a)+1```\n upwards and which depends only on ```\nb```\n, and a second, more complex sum which deals with the bits from ```\nlg(a)```\n downwards and which depends on ```\na```\n and ```\nb```\n.\n\n\nEdit: The OP's asked me to expand on how to quickly compute ```\nSum(A in L)```\n. There was a lottt of stuff in this section in previous edits, but I've actually sat down and worked through it now rather than haphazardly batting it around in my head. It also turned out to be more complicated than I expected, so my apologies for not sitting down and working through it sooner @tenos.\n\nSo what we want to do is take the sum of all distinct products ```\nx*y```\n such that ```\n1 <= x <= a```\n and ```\n1 <= y <= b```\n. Well, that turns out to be pretty hard so let's start with a simpler problem: given two integers ```\nx1, x2```\n with ```\nx1 < x2```\n, how can we compute the sum of all distinct products ```\nx1*y```\n or ```\nx2*y```\n where ```\n1 <= y <= b```\n?\n\nIf we dropped the distinctness criterion, this'd be easy: it'd simply be\n\n```\nx1*Sum(b) + x2*Sum(b)\n```\n\n\nwhere ```\nSum(j)```\n denotes the sum of integers ```\n1```\n through ```\nj```\n inclusive, and can be calculated using Gauss's formula for the triangular numbers. So again we can reduce the problem into something simpler: how can we find the sum of all products that appear in both the left and right terms?\n\nWell, two products are equal if\n\n```\nx1*y1 == x2*y2\n```\n\n\nThis happens exactly when ```\nx1*y1 == x2*y2 == k*LCM(x1, x2)```\n, where ```\nLCM```\n is the lowest common multiple and ```\nk```\n is some integer. \n\nThe sum of this over all ```\nk```\n such that ```\n1 <= k*LCM(x1, x2) <= x1*b```\n is\n\n```\nR(x1, x2) = LCM(x1, x2) * Sum(x1*b/LCM(x1, x2))\n```\n\n\nwhere ```\nR```\n stands for \"repeats\". Which means that our sum of all distinct products ```\nx1*y```\n or ```\nx2*y```\n where ```\n1 <= y <= b```\n is\n\n```\nx1*Sum(b) + x2*Sum(b) - R(x1, x2)\n```\n\n\nNext, let's extend the definition of ```\nR```\n to be defined on three variables ```\nx1 < x2 < x3```\n as\n\n```\nR(x1, x2, x3) = LCM(x1, x2, x3) * Sum(x1*b/LCM(x1, x2, x3))\n```\n\n\nand similarly for 4 variables, 5 variables, etc. Then the sum of distinct products for three ```\nx1 < x2 < x3```\n is\n\n```\nx1*Sum(b) + x2*Sum(b) + x3*Sum(b) - R(x1, x2) - R(x1, x3) - R(x2, x3) + R(x1, x2, x3)\n```\n\n\nby the inclusion-exclusion principle.\n\nSo, let's make use of this. Define\n\n```\nSum for x = 1: 1*Sum(b)\nSum for x = 2: 2*Sum(b) - R(2, 1)\nSum for x = 3: 3*Sum(b) - R(3, 2) - R(3, 1) + R(3, 2, 1)\n```\n\n\nEtc. Then the sum of all these sums up to ```\nx = a```\n is the sum of all distinct products.\n\nEdit: @tenos turned this into a useful solution. He noticed that since i*Sum(b) contains many repeats, we can replace by i*sum(k...b), k = max(b/minPrimeFactor(i) + 1, i).\n\nFurther, when using inclusion-exclusion principle, many unnecessary computations can be pruned. For instance, if R(1,2) = NULL, there is no need to compute R(1,2,3), R(1,2,4).., etc. In fact, when b is very big, there are many R(i,..j) = NULL.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to find minimal number of subsets of a set of given conditions\r\n                \r\nFor a given set of numbers ```\n{12,13,15,21,22,26,6,14,27,28,29,30,39,40,4,17,25}```\n i want to find the minimum number of subsets which satisfies the two condition.\n\n\nnumber of elements in each set is a constant i.e say for above\nexample it is ```\n5```\n.\nIn a subset any of the two elements satisfy the condition:\n```\n(num1-num2)% d != 0```\n. ```\nnum1>num2```\n and Where d is constant difference\nbetween two numbers.\n\n\nfor the example above: if ```\nd=4```\n and number of elements in subset is ```\n5```\n then one of the subset would be: ```\n{12,13,15,22,17}```\n\n\nI am looking for an algorithm to find the minimum number of subsets that satisfies the conditions.\n    ", "Answer": "\r\nOkay, so it's not really 100% about programming. It's a standard discrete math exercise. \n\nLet's do it in steps:\n\n\nAmount of combinations of all possible subsets: n! where n is amount of elements in the first set. I'm assuming here that we're not allowed to repeat selected elements in a subset. And that the order of elements in subsets don't matter (otherwise we'd need to use Combinations instead of Permutations)\nNow We're selecting only r elements, not all n of them, so now it's n!/(n-r)! Where r is the amount of elements in the subset.\nThe hardest part is finished. Now we need to add a condition, for which you can only take the previous n!/(n-r)! and substract amount of \"bad\" pairs of elements. Basically, excluding any permutations starting with forbidden values. Let's find all the forbidden values:\nTwo simple nested loops, checking the (num1-num2)% d != 0 for each pair, which will take around n*(n-1)/2 iterations. Or just n^2 iterations without dynamic changing the iterator in the nested loop.\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Genetic Algorithm with numbers\r\n                \r\nI must solve this problem: find all of the numbers between 0 and 255 that have a binary representation with the same number of 0s and 1s. For example, 240 is 11110000 and 153 is 10011001. I need to use genetic algorithms.\n\nI have the codification, in a set of 8 bits [0,0,0,0,0,0,0,0] and the quality function (number of 1s in X is similar to the number of 0s).\n\nMy problem is, which functions should I use as Genetic Operators? I had been thinking about that but I cant't find a function that fits well in this problem.\n\nAnd another thing: will this be enough or do I need something more?\n\nAm I targeting my problem okay? Or I must change the other functions that I have defined?\n\nThanks for your time!\n    ", "Answer": "\r\nIf by Genetic Operator you mean the crossover function, I see nothing wrong to start with a\nvery basic crossover.\n\nFirst, take two parents:\n\n```\nparent1 = [0 0 0 1 1 1 1 1]\nparent2 = [1 1 1 0 0 0 0 0]\n```\n\n\nThen get a random cut point, say 3. Cut parents at this point:\n\n```\nparent1 = [0 0 0]  [1 1 1 1 1]\nparent2 = [1 1 1]  [0 0 0 0 0]\n```\n\n\nAnd now recombine the two parents to get two new childs. First part of parent1 with last\npart of parent2 (and so on...):\n\n```\nchild1 = [0 0 0 0 0 0 0 0]\nchild2 = [1 1 1 1 1 1 1 1]\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Definition of Two's complement in a simple language\r\n                \r\nI have been searching online but can't find a simple definition of Two's complement without the use of algorithms and math so just to to confirm that:\n\nTwo's complement is basically reverting the sign of a number in binary so if I have ```\n2```\n then turn it to ```\n-2```\n and if I got ```\n-2```\n then turn it to ```\n2```\n. Is that it?\n    ", "Answer": "\r\nTwo's complement of a fixed-width binary number X is a binary number that you get by inverting X's binary digits and adding one, discarding possible overflow.\n\n```\ntwos_compl(X){ return ~X+1; }\n```\n\n\nE.g., for 4-bit wide numbers:\n\n```\nX       ~X      ~X+1\n0000    1111    0000\n0001    1110    1111\n0010    1101    1110\n0011    1100    1101\n```\n\n\nIf a computer architectures uses two's complement to represent mathematically negated signed numbers, i.e., if ```\ntwos_compl(X) == -X```\n, then certain math operations become easy to implement.\n\n(In such a representation of a signed number the highest bit then means ```\n-pow(2,bit_index_from_the_right)```\n rather than the usual (usual for unsigned numbers and for every other bit in a signed two's complement representation) ```\n+pow(2,bit_index_from_the_right)```\n.)\n\nFor example, addition (or subtraction) on an architecture that uses two's complement representation for negative numbers will use the same instruction as the corresponding unsigned addition (or subtraction respectively), and it will work regardless of the sign of the operands.\n\nIn C on a two's complement platform:\n\n```\nint sadd(int A, int B) { return A+B; }\nunsigned uadd(unsigned A, unsigned B) { return A+B; }\n```\n\n\nwill compile to the same instruction.\n\nAnd by definition of two's complement, so will:\n\n```\nint neg(int A) { return -A; }\n```\n\n\nand\n\n```\nint neg2(int A) { return ~A+1; }\n```\n\n\nSo to summarize, two's complement isn't necessarily mathematical negation—it is a transformation of the binary representation of a number that a computer architecture may interpret as negation and if it does, it simplifies math on that computer architecture.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "finding the gcd without lists code not returning the desired output\r\n                \r\nI have been trying to learn algorithms and i have to do a basic program to find gcd of two numbers using python\nso i wrote this code\n```\ndef gcd_better(m, n):\n    i = min(m, m)\n\n    while i:\n        if (m % i) == 0 and (n % i) == 0:\n            return i\n        else:\n            i = i - 1\n\n\n\nif __name__ == \"__main__\":\n    gcd_better(4, 20)\n```\n\nhere I want to return i but the code is not doin that\ncan anyone please help me understand is there anything wrong in my code\n    ", "Answer": "\r\nEither ```\nprint```\n the answer in ```\ngcd```\n or ```\nreturn```\n a value, assign it to a variable in ```\nmain```\n, and print that\nSince you're returning a value (```\ni```\n), do ```\nprint(gcd_better(4, 20))```\n to see what is being returned.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Hex to number algorithm\r\n                \r\nWithout using a python builtin, I'd like to write a basic routine to find the numeric value given a hex string. (In other words, I don't want to use ```\nint('8c', 16)```\n) -- this is for learning purposes).\n\nHere is what I have so far:\n\n```\ndef hex_to_number(hex_string, num=0):\n    number_map = {'0':0,'1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    for char in hex_string:\n        num = num << 4\n        num += number_map[char]\n    return num\n```\n\n\nIs it possible to to this conversion without the number map at the top or is that necessary to do the hex conversion? If not, how else might an algorithm (or even one-liner) be constructed to do this?\n    ", "Answer": "\r\nYou can use ```\nord(char)```\n. Quick example without validity check (for example, it is possible to add ```\na-f```\n treatment)\n\n```\nfor char in hex_string:\n    num = (num << 4) + (ord(char) - ord(\"0\") if char < \"A\" else 10 + ord(char) - ord(\"A\"))\n```\n\n\nExplanation:\n\nDigit \"0\" has code 0x30 (48), other digits have the next codes in sequence, so to get numeric value of digit, we have to subtract \"base\" value. The same is true for \"A\"-\"F\" range (code of \"A\" is 0x41 (65)).\n\nASCII table\n\nAnother trick to treat also small letters (not an example of good code ;):\n\n```\nshifts = [48, 55, 87]\nfor char in hex_string:\n    num = (num << 4) + (ord(char) - shifts[(ord(char) // 32) - 1])\n```\n\n\n```\nord(char) // 32```\n gives results 1,2,3 for ranges of digits, large and small letters. Then we subtract corresponding base value (```\nshifts```\n)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to sort pairs of numbers\r\n                \r\nI am stuck with a problem and I need some help from bright minds of SO.\nI have N pairs of unsigned integerers. I need to sort them. The ending vector of pairs should be sorted nondecreasingly by the first number in each pair and nonincreasingly by the second in each pair. Each pair can have the first and second elements swapped with each other.  Sometimes there is no solution, so I need to throw an exception then.\n\nExample:\n\n```\nin pairs:\n1 5\n7 1\n3 8\n5 6\n\nout pairs:\n1 7     <-- swapped\n1 5     \n6 5     <-- swapped\n8 3     <-- swapped\n```\n\n\n^^ Without swapping pairs it is impossible to build the solution. So we swap pairs (7, 1), (3, 8) and (5, 6) and build the result.\nor\n\n```\nin pairs:\n1 5\n6 9\n\nout:\nnot possible\n```\n\n\nOne more example that shows how 'sorting pairs' first isn't the solution.\n\n```\nin pairs:\n1 4\n2 5\nout pairs:\n1 4\n5 2\n```\n\n\nThanks\n    ", "Answer": "\r\nO( n log n ) solution\n\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for Number similarity [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     Questions asking for code must demonstrate a minimal understanding of the problem being solved. Include attempted solutions, why they didn't work, and the expected results. See also: Stack Overflow question checklist\r\n                \r\n                    \r\n                        Closed 9 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI'm looking for implementing an algorithm that can calculate the similarity of several numbers (0-100%). \n\nThis is one scenario for a movie database:\nA user profile contains information about the user's movie preferences. That is stored using three attributes (How much I like Action, Drama or Cartoon) containing values between 1-10 (10 is that I like it a lot). On each movie you will find similar values (I.e. Terminator Action=10, Drama=5, Cartoon=1).\n\nNow I would like to calculate how how much a user's preferences matches a movies preferences. What are your suggestions? (This is made in C#)\n\nRegards\n    ", "Answer": "\r\n```\npublic static double SingleSimilarity(double x, double y)\n{\n    return (10.0 - Math.Abs(x - y)) * 10.0;\n}\n\n// 3 values of user preferences, 3 values of movie assessment\npublic static double Similarity(Tuple<double, double, double> user, Tuple<double, double, double> movie)\n{\n    return (SingleSimilarity(user.Item1, movie.Item1) + SingleSimilarity(user.Item2, movie.Item2) + SingleSimilarity(user.Item3, movie.Item3)) / 3.0;\n}\n```\n\n\nExample:\n\n```\nvar similarity = Similarity(Tuple.Create(10.0, 0.0, 5.0), Tuple.Create(0.0, 10.0, 5.0));\n```\n\n\nOr more generic method:\n\n```\n// 3 items (Action, Drama, Cartoon) each of which contain a value for user and movie\npublic static double Similarity(IEnumerable<Tuple<double, double>> list)\n{\n    return list.Sum(t => SingleSimilarity(t.Item1, t.Item2)) / list.Count();\n}\n```\n\n\nAnd example:\n\n```\nvar similarity = Similarity(new[] { Tuple.Create(10.0, 0.0), Tuple.Create(0.0, 10.0), Tuple.Create(5.0, 5.0) });\n```\n\n\nIn such case the result will be 33.(3) and seems to be practice.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "screen scrape alphanumeric chars from picture [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 2 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI'm trying to find a way to screen scrape the letters and numbers (mainly numbers) from the attached picture.\nexample picture\nIn previous attempts, I've used pyocr and many other variations.\nMy question is, has any body found a way to scrape off numbers? Or how to train the pyocr algorithm to use custom data?\nThanks in advance!\n    ", "Answer": "\r\nThe folks at PyImageSearch have a TON of info about processing images in Python with OpenCV.\nThey even have a free blog post about using Tesseract OCR.  Though Tesseract can be a bit fussy about fonts, the good news is it looks like your text in the image should always be the same font, and perfectly aligned horizontally and vertically.\n(disclaimer: I'm a student of theirs; but I don't work for them)\nhttps://www.pyimagesearch.com/2018/09/17/opencv-ocr-and-text-recognition-with-tesseract/\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Fastest way to find the nearest element in the array of real numbers\r\n                \r\nFor a given array of real numbers for each element, find the number of elements which is less than current element by no more than ```\n0.5```\n and write to new array.\n\nFor example:\n\nOriginal array:\n\n```\n[0.1, 0.7, 0.8, 0.85, 0.9, 1.5, 1.7]\n```\n\n\nResult array:\n\n```\n[0,   0,   1,   2,    3,   0,   1]\n```\n\n\nWhat are the algorithms and approaches to solve this problem?\n\nIt is important that the neighborhood of the points is chosen only in the negative direction, which makes it impossible to use the ```\nKdtree```\n or ```\nBalltree```\n algorithms.\n\nAll of my problem is here with my try of code it.\n    ", "Answer": "\r\nAlthough the method below uses simple logic and is easy to write, it is slow. We can speed it up by using a decorated Numba function. This will speed up simple looping tasks to near assembly language speeds.\n\nInstall Numba with ```\npip install numba```\n.\n\n```\nfrom numba import jit\nimport numpy as np\n\n# Create a numpy array of length 10000 with float values between 0 and 10\nrandom_values = np.random.uniform(0.0,10.0,size=(100*100,))\n\n@jit(nopython=True, nogil=True)\ndef find_nearest(input):\n  result = []\n  for e in input:\n    counter = 0\n    for j in input:\n      if j >= (e-0.5) and j < e:\n        counter += 1\n    result.append(counter)\n  return result\n\nresult = find_nearest(random_values)\n```\n\n\nNote that the intended result is returned for the test case:\n\n```\ntest = [0.1, 0.7, 0.8, 0.85, 0.9, 1.5, 1.7]\nresult = find_nearest(test)\nprint result\n```\n\n\nReturns:\n\n```\n[0, 0, 1, 2, 3, 0, 1]\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "GnuPlot chart drawing for each text file\r\n                \r\nI compare four kind of sorting algorithms, and their inversions and comparisions for each algorithm are stored in a file. What I need now is to draw a scatter with markers ```\n(x,y)```\n for each file where \n\n```\nx -> number of inversions\ny -> number of comparisions\n```\n\n\nand scale it to the numbers, so for example we have ```\nIS10.txt```\n which stands for ```\nInsertionSort```\n and it has 300 lines with x's and y's. \n\nSample data\n\n```\nline 1: 20 33\nline 2: 18 27\n...\nline 300: 21 24\n```\n\n\nThe key is to be able to generate diagrams for comparison.\n    ", "Answer": "\r\nPlotting a single file is straightforward, just use\n\n```\nplot 'IS10.txt' using 1:2 title 'InsertionSort'\n```\n\n\nIf you want to plot all files, you can do it as follows:\n\n```\nlist = system('ls -1 *.txt | tr \"\\n\" \" \"')\nset key out\nplot for [file in list] file using 1:2 title file\n```\n\n\nHere, I assumed, that all ```\n.txt```\n files in the current directory should be plotted. You could of course also generate the ```\nlist```\n manually. It should contain all file names, delimited by a space (e.g. ```\nlist = \"IS10.txt HS10.txt ...\"```\n).\n\nThat plots all data points of one file with the same ```\nlinetype```\n. The first file uses ```\nlinetype 1```\n, the second one ```\nlinetype 2```\n etc. Type ```\ntest```\n to see how the points and colors of these default ```\nlinetype```\n look like.\n\nYou can use something like ```\nset linetype 1 linecolor rgb 'blue' pointtype 7```\n to change these settings in order to get ```\n20```\n well-distinguishable point styles.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How modern X86 processors actually compute multiplications?\r\n                \r\nI was watching some lecture on algorithms, and the professor used multiplication as an example of how naive algorithms can be improved...\n\nIt made me realize that multiplication is not that obvious, although when I am coding I just consider it a simple atomic operation, multiplication requires a algorithm to run, it does not work like summing numbers.\n\nSo I wonder, what algorithm modern desktop processors actually use? I guess they don't rely on logarithm tables, and don't make loops with thousands of sums...\n    ", "Answer": "\r\nMitch Alsup (who worked on Motorola 88K, Ross SPARC, AMD x86, etc.) has stated on the comp.arch newsgroup:\n\n\n  All modern multiplier designers use the Dadda method for building the tree.\n\n\n(Message-ID: <c45d9d2e-039d-4085-a617-d90f7a3b1f93@googlegroups.com> — 14 December 2018)\n\nand (with respect to availability of recent references for what multiplication mechanisms are used by AMD/Intel/NVIDIA):\n\n\n  Only in the patent office.\n\n\n(Message-ID: <d92d1961-a3e4-441e-8b3d-b9ce6bd24b58@googlegroups.com> — 14 January 2020)\n\nSee Wikipedia for information on Dadda tree multipliers.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Number increment algorithm efficiency [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs details or clarity. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Add details and clarify the problem by editing this post.\r\n                \r\n                    \r\n                        Closed 8 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI'm stuck on optimising an algorithm; the algorithm works as such. Say we have an expression ```\na+b+c+d```\n and the algorithm was to attain every combination of numbers possible up to a number; let's say, ```\nn= 10```\n.\nSo the algorithm would be outputting this;\n\n```\n1+1+1+1\n1+1+1+2\n1+1+1+3\n..............\n1+1+1+10\n1+1+2+1\n```\n\n\nAnd so on, until it reaches the end which would be\n\n```\n10+10+10+10\n```\n\n\nHowever the problem I'm having is the runtime of the algorithm increases rapidly as ```\nn```\n(max number) increases. \n\nAre there any ways of cutting the runtime when ```\nn```\n increases. I'm seriously stumped.\n\nCan't post source code ATM as I'm not at home, but it was done in c++.\n    ", "Answer": "\r\nFor the combination part, if \"a+b+c+d\" equals \"a+b+d+c\", then you can save some time by write the loop as \n\n```\nfor (int i = 0; i < n; ++i) {\n    for (int j = i; j < n; ++j {\n        // etc.\n    }\n}\n```\n\n\nbut O(n^4) is needed.\n\nOtherwise, if the problem is exactly \"attain every combination of numbers possible up to a number\", there should be a closed form solution from 4 to 4*n.\n\nyou don't need to attain every combination. just calc the result. Or I misunderstanding the question.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Genetic Algorithm in R: Specify number of 1s in binary chromosomes\r\n                \r\nI am using the rbga function, but my question still stands for other genetic algorithm implementations in R. Is there a way to specify the number of 1s in binary chromosomes?\nI have the following example provided by the library documentation.\n```\ndata(iris)\nlibrary(MASS)\nX <- as.data.frame(cbind(scale(iris[,1:4]), matrix(rnorm(36*150), 150, 36)))\nY <- iris[,5]\n\niris.evaluate <- function(indices) {\n    print(\"Chromosome\")\n    print(indices)\n    print(\"================================\")\n    result = 1\n    if (sum(indices) > 2) {\n        huhn <- lda(X[,indices==1], Y, CV=TRUE)$posterior\n        result = sum(Y != dimnames(huhn)[[2]][apply(huhn, 1,\n                                                    function(x)\n                                                        which(x == max(x)))]) / length(Y)\n    }\n    result\n}\n\nmonitor <- function(obj) {\n    minEval = min(obj$evaluations);\n    plot(obj, type=\"hist\");\n}\n\nwoppa <- rbga.bin(size=40, mutationChance=0.05, zeroToOneRatio=10,\n                  evalFunc=iris.evaluate, showSettings=TRUE, verbose=TRUE)\n```\n\nHere are some of the chromosomes.\n```\n\"Chromosome\"\n 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0\n\"================================\"\n\"Chromosome\"\n 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0\n\"================================\"\n\"Chromosome\"\n 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0\n\"================================\"\n\"Chromosome\"\n 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0\n\"================================\"\n```\n\nThe 1s (i.e., the chosen characteristics) are 5, 8, 5 and 4 respectively.\nI am trying to follow the technique specified in a paper and they claim that they apply a genetic algorithm and in the end they pick a specific number of characteristics.\n\nIs it possible to specify in a genetic algorithm the number of characteristics that I want my solution(s)/chromosome(s) to have?\n\nCould this be done on the final solution/chromosome and if yes how?\n\n\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm of checking if the number is prime [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Which is the fastest algorithm to find prime numbers?\r\n                            \r\n                                (20 answers)\r\n                            \r\n                    \r\n                Closed 3 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nHello everyone!\n\nI came to this algorithm on how to check if number is prime and probably it's fine for me but I want to find out if it can be improved\n\n```\nbool isPrime(int num)\n{\n    bool isPrime = 1;\n    if (num <= 0)\n    {\n        return 0;\n    }\n    if (num == 1)\n    {\n        return 0;\n    }\n    for (int i = 2; i <= sqrt(num); ++i)\n    {\n        if (num % i == 0)\n        {\n            isPrime = 0;\n        }\n    }\n\n    return isPrime;\n}\n```\n\n\nThanks in advance\n    ", "Answer": "\r\nThe algorithm can be improved further by observing that all primes are of the form 6k ± 1, with the exception of 2 and 3. This is because all integers can be expressed as (6k + i) for some integer k and for i = -1, 0, 1, 2, 3, or 4; 2 divides (6k + 0), (6k + 2), (6k + 4); and 3 divides (6k + 3). So a more efficient method is to test if n is divisible by 2 or 3, then to check through all the numbers of form 6k ± 1\n\nImplementation of the above:\n\n```\n#include <iostream>\n\nbool isPrime(int n) {\n    // Corner cases\n    if(n <= 1) return false;\n    if(n <= 3) return true;\n\n    // This is checked so that we can skip\n    // middle five numbers in below loop\n    if(n % 2 == 0 || n % 3 == 0) return false;\n\n    for(int i = 5; i * i <= n; i = i + 6)\n        if(n % i == 0 || n % (i + 2) == 0) return false;\n\n    return true;\n}\n\n// Driver Program to test above function\nint main() {\n    std::cout << std::boolalpha\n        << isPrime(11) << '\\n'\n        << isPrime(15) << '\\n';\n}\n\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "algorithm that receives a number and a digit and checks how many times the digit is inside the number\r\n                \r\nEDITed: works now\n\nI have just started my first year at college, and we got some homework to do.\n\nWe were asked to create a function that receives a number and a digit from the user and print how many times the digit is in that number.\nIn addition, we are supposed to used const integers that are mentioned at the top of my algorithm- and return NEGATIVE_INPUT_NUMBER in case the number is negative or ILLEGAL_DIGIT in case the digit is negative or more than 9.\nI wonder what is wrong with my program?It doesn't work for some reason.Can someone explain me why?\n\nThanks a lot \n\nThere it is: \n\n```\n    #include <iostream>\n    using namespace std;\n    const int NEGATIVE_INPUT_NUMBER = -1;\n    const int ILLEGAL_DIGIT = -2;\n    int digitInNumber(int number, int digit);\n\n    void main()\n    {\n        int digit,number;\n        cout<< \"Please insert a number and then a digit\" << endl;\n        cin>> number >>digit;\n        cout << digitInNumber(number, digit) << endl;\n    }\n    int digitInNumber(int number,int digit)\n    {\n        int lastDig;\n        int counter = 0;\n        if (number < 0)\n            return NEGATIVE_INPUT_NUMBER;\n        if (digit > 9 || digit < 0)\n            return ILLEGAL_DIGIT;\n        while (number>0)\n        {\n            lastDig = number % 10;\n            if (lastDig == digit)\n                counter++;\n            number = number / 10;\n        }\n        return counter;\n```\n\n    ", "Answer": "\r\nIn function ```\ndigitInNumber```\n, you register the result of the modulo operation in number while you should save it in an other variable:\n\n```\nint digitInNumber(int number,int digit)\n{\n    int counter = 0;\n    int lastDigit = 0;\n    if (number < 0)\n        return NEGATIVE_INPUT_NUMBER;\n    if (digit > 9 || digit < 1)\n        return ILLEGAL_DIGIT;\n    while (number>0)\n    {\n        lastDigit = number % 10;\n        if (lastDigit == digit)\n            counter++;\n        number = number / 10;\n    }\n    return counter;\n}\n```\n\n\nYour version was \"forgetting\" the value of number after the first iteration of the loop.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Sparse matrix multiplication complexity\r\n                \r\nI want to express the computational complexity fo two algorithms: the sparse-matrix sparse-vector multiplication and the sparse-matrix sparse-matrix multiplication, as implemented in Eigen or Cusparse, using CSR representation.\n\nI know that it depends on several parameters, especially the number of non-zero values in each elements.\n\nHowever, I'm not able to find to find publications which details the complexity of such algorithms and expresses it using the O( ) notation.\n    ", "Answer": "\r\nSay you are multiplying ```\nA*B```\n with ```\nA```\n a ```\nm*k```\n matrix with ```\na```\n non-zeros per column, and ```\nB```\n a ```\nk*n```\n matrix with ```\nb```\n non-zeros per column. Then, the number of operations (* and +) is:\n\n```\n2*n*b*a\n```\n\n\nbecause for each of the ```\nn```\n columns of ```\nB```\n we have to loop through the ```\nb```\n columns of ```\nA```\n for which the corresponding elements of ```\nB```\n are non-zeros, and then multiply-accumulate the respective ```\na```\n non-zeros. If properly implemented, as in Eigen or Cusparse, we have three nested loops with exactly ```\nn```\n, ```\nb```\n, and ```\na```\n iterations, the complexity is thus ```\nO(a*b*n)```\n.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "algorithms: how do divide-and-conquer and time complexity O(nlogn) relate?\r\n                \r\nIn my Algorithms and Data Structures class a first ```\ndivide-and-conquer algorithm```\n namely ```\nmerge sort```\n was introduced. \n\nWhile implementing an algorithm for an assignment a few questions came to my mind. \n\n\nDoes any algorithm that is implemented with the use of the divide and conquer paradigm has time complexity of O(nlogn)? \nIs it that the recursion part in the approach has the power to condense an algorithm that runs in O(n^2) to O(nlogn)?\nWhat makes such an algorithm run in O(nlogn) in the first place? \n\n\nFor (3) I assume that this has something to do with recursion trees and the possible number of recursions. Could someone probably show with a simple divide-and-conquer algorithm that runs in O(nlogn), how the complexity is actually computed? \n\nCheers,\nAndrew\n    ", "Answer": "\r\nI think all the answers to your question might come from the Master Theorem It kind of tell you what would be your complexity for almost any divide and conquer solution you have, and yes, it has to do everything with recursion trees, by playing with the parameters you will find that some divide and conquer solutions won't have O(nlogn) complexity, in fact there are divide and conquer algorithms that have O(n) complexity.\n\nJust regarding question 2, it is not possible always, in fact, there are some problems that are believed to be impossible to solve faster than O(n^2), it dependes on the nature of the problem.\n\nAn example of an algorithm that runs in O(nlogn) and that I think has a very simple, clear and educational run time analysis is MergeSort. It can be grasped from the following picture:\n\nSo each recursive step the input is split into two parts, then the conquer part takes O(n), so each level of the tree costs O(n), the tricky part might be how is it possible that the number of recursive levels (tree height) is logn. That is more or less simple. So at each step we divide the input in 2 parts of n/2 elements each, and repeat recursively, until we have some constant size input. So at the first level we divide n/2, on the next n/4, then n/8, until we reach a constant size input that will be a leaf of the tree, and the last recursive step.\n\nSo at the i-th recursive step we divide n/2^i, so lets find the value for i at the last step. We need that n/2^i = O(1), this is achieved when 2^i = cn, for some constant c, so we take the base 2 logarithm from both sides and get that i = clogn. So the last recursive step will be the clogn-th step, and thus the tree has clogn height.\n\nThus the total cost of MergeSort will be cn for each of the clogn recursive (tree) levels, which gives the O(nlogn) complexity.\n\nIn general, you can be confident that your algorithm will have O(nlogn) complexity as long as the recursive step has O(n) complexity, and yo divde into b problems of size n/b, or even more general, if the parts are linear fractions of n which adds up to n. In a different situation it is very likely that you will have a different runtime.\n\nReturning to question 2, in the case of QuickSort one might get from O(n^2) to \\Theta(nlogn) precisely because the average random case achieves a nice partition, though the runtime analysis is even more complex than that.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Random number generation algorithm\r\n                \r\nI encountered a naive algorithm for random number generation that produce a series of numbers as follows:\n\n```\nfor (int i = 0; i < MAX; i++)\n   if (rand.nextInt(100) >= 100 - probability) // probability is between 0 and 100\n       randomNumbersList.add(i);\n```\n\n\nI was wondering if there's a way to achieve statistically equivalent results without iterating through each number between 0 and MAX.\n    ", "Answer": "\r\nLet's denote ```\np=probability/100```\n and ```\nq=1-p```\n.\n\nConsider what will be the first number to be added. With probability ```\nq```\n it is 0; with probability ```\n(1-q)*q```\n it is 1, with probability ```\n(1-q)^2*q```\n it is 2 and so on. This is the geometric distribution. You can easily generate a random number distributed according to geometric distribution using the following approach: generate a random number ```\nu```\n uniformly distributed in [0,1] and calculate ```\nx=⌊ln(u)/ln(q)⌋```\n — this ```\nx```\n will have geometric distribution (see this question).\n\nSo this is how you can calculate the first number to add. \n\nNow consider the difference between the second and the first numbers. It will also be distributed geometrically (only starting at 1, not at 0), so you can calculate this difference the same way and thus obtain the second number, and so on.\n\nA pseudocode will be something like\n\n```\ncur = -1\nlnq = ln(q)\nwhile true\n    u = random(0,1)   // float!\n    cur = cur + 1 + floor(ln(u)/lnq)\n    if cur >= MAX\n        break\n    randomNumbersList.add(cur);\n```\n\n\nCorresponding Java code by @traveh\n\n```\nList<Integer> randomNumbersList = new LinkedList<Integer>();\nint cur = -1;\ndouble p = probability / 100;\ndouble q = 1 - p;\ndouble lnq = Math.log(q);\nRandom random = new Random();\nwhile (true) {\n    double u = random.nextDouble();\n    cur = cur + 1 + (int)Math.floor(Math.log(u) / lnq);\n    if (cur >= MAX)\n        break;\n    randomNumbersList.add(cur);\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Is my declared array size interring with my search?\r\n                \r\nI have a program utilize swing GUI and new sort algorithms and searches. My sorts work fine however when trying to search for numbers I have it give a message whether it has been found or not. However rather saying its found when the number exists, it says its not found.Also for some reason it only says that 0 is found at index 4.\n\n```\nstatic int Numbers[]=new int[0];\n\nprivate static class ButtonHandler implements ActionListener\n {\n     public void actionPerformed(ActionEvent e)\n     {\n            //get data\n            String data = txtInput.getText();\n\n            //parse for numerical value\n           int  numGenerate = Integer.parseInt(data); \n           int Numbers[]=new int[numGenerate];\n           String command = e.getActionCommand(); \n         if (command.equals(\"Sort\"))\n         { \n\n           String unSortedData=\"\";\n\n           //ouput unsoted data\n           for (int x=0;x<=Numbers.length-1;x++)\n           {\n               Numbers[x]=(int)(Math.random()*2001)-1000;\n               unSortedData+=(Numbers[x]+\",\");\n\n           }\n            txtUnsorted.setText(unSortedData);\n\n\n\n\n             if (btnQuickSort.isSelected())\n            {\n                QuickSort(Numbers,0,Numbers.length-1);\n            }\n             if (btnMergeSort.isSelected())\n            {\n                MergeSort(Numbers,0,Numbers.length-1);\n            } \n            if (btnInsertionSort.isSelected())\n            {\n                InsertionSort(Numbers);\n            } \n            if (btnSelectionSort.isSelected())\n            {\n                SelectionSort(Numbers);\n            } \n            if (btnShellSort.isSelected())\n            {\n                ShellSort(Numbers);\n            } \n            if (btnShakerSort.isSelected())\n            {\n                 ShakerSort(Numbers);\n            }\n            generated=true;\n\n\n\n\n         }\n               if (command.equals(\"Search\"))\n         {\n                //get data\n                String data2 = txtSearch.getText();\n                //parse for numerical value\n                int  FindNum = Integer.parseInt(data2);\n\n                if (generated==true)\n                {\n                            int counter=0;\n\n                            for (int x=0;x<Numbers.length;x++)\n                            {\n                              if (Numbers[x]==FindNum)\n                              {\n                                lblSearch.setText(\"Status: Found \"+ FindNum+ \"at index \"+ counter );\n                              }\n                             counter++;   \n                            }\n\n                }\n                else\n                {\n\n                    lblSearch.setText(\"Status:Error! Enter or sort a number\");\n                }\n         }\n\n\n\n     }\n } \n\n```\n\n    ", "Answer": "\r\nAt the moment you are only populating the array with random numbers if you run the 'search' component. I suggest splitting the generation and the two operations into separate methods:\n\n```\nprivate int[] randomNumbers(int size) {\n    Random random = new Random();\n    int[] numbers = new int[size];\n    for (int i = 0; i < numbers.length; i++)\n        numbers[i] = random.nextInt(2000) - 1000;\n    unsortedData = Arrays.toString(numbers);\n}\n\npublic void actionPerformed(ActionEvent e) {\n    int[] numbers = randomNumbers(Integer.valueOf(txtInput.getText());\n    switch(e.getActionCommand()) {\n        case \"sort\":\n            ...\n            break;\n        case \"search\":\n            ...\n            break;\n    }\n}\n```\n\n\nNote that there is a simpler way of getting an array of random integers:\n\n```\nint[] numbers = random.ints(size, -2000, 2000).toArray();\n```\n\n\nBut I'm assuming you're not using streams yet.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Sum All Numbers in a Range\r\n                \r\nfreecodecamp algorithm challenge. I can't determine at which point in my function I am returning more than one value. The correct return value should be 10. The console.log I print out in this function shows three values, with the one in the middle being the correct one. How do I target this specific value and ignore the other ones?\nhttps://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-numbers-in-a-range\n```\nfunction sumAll(arr) {\n    for (let i = 0; i < arr.length; i++){\n      if (arr[i] != arr[arr.length -1]){\n        let num = arr[i] + 1;\n        arr.splice(arr[i], 0, num);\n          console.log(arr.reduce(function(sum, value) {\n            return sum + value;\n          }, 0));\n      }\n    }\n}\n\nsumAll([1, 4]);\n\n```\n\n    ", "Answer": "\r\nIf you extract a range utility function you can do this a lot easier. Without the imperitiveness\n```\nconst range = (a,b) => Array(Math.abs(a-b)+1).fill(0).map((_,i) => i+Math.min(a,b))\nconst sumAll = ([a,b]) => range(a,b).reduce((c,d) => c+d,0)\n```\n\nto diagnose exactly what is wrong with your code, A good start is that it isn't returning anything, it is console.logging, so if you replace ```\nconsole.log```\n with ```\nreturn```\n.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "I need help solving this javascript challenge\r\n                \r\nIn this challenge i have to Use arrow function syntax to compute the square of only the positive integers (decimal numbers are not integers) in the array realNumberArray and store the new array in the variable squared Integers .\nhttps://learn.freecodecamp.org/javascript-algorithms-and-data-structures/es6/write-higher-order-arrow-functions\n\nmy code so far. \n\n```\nconst realNumberArray = [4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2];    \nconst squareList = (arr) => {    \n  \"use strict\";    \n  realNumberArray.filter((arr) => arr !== null && parseInt())    \n  const squaredIntegers = arr;   \n  return squaredIntegers;    \n};    \n\nconst squaredIntegers = squareList(realNumberArray);    \nconsole.log(squaredIntegers);\n```\n\n    ", "Answer": "\r\nYou could take three steps:\n\n\nFilter intger only numbers with ```\nNumber.isInteger```\n.\nFilter only positive values.\nMap squared values.\n\n\n\r\n\r\n```\nconst isPositive = v => v > 0;\r\n\r\nconst squareList = (arr) => {    \r\n  \"use strict\";    \r\n  return realNumberArray\r\n      .filter(Number.isInteger)\r\n      .filter(isPositive)\r\n      .map(v => v * v);\r\n};    \r\n\r\nconst realNumberArray = [4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2];    \r\nconst squaredIntegers = squareList(realNumberArray);    \r\nconsole.log(squaredIntegers);```\n\r\n\r\n\r\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for finding coefficients in linear combination of two numbers which is equal to their gcd\r\n                \r\nCould someone, please, help me to come up with the algorithm for finding coefficients in linear combination of two numbers which is equal to their gcd?\n\nI know the idea behind it. I should proceed with the Euclidian algorithm and find gcd and then I should go back substituting values, while I won't get a representation of my gcd.\n\nI do not need an idea (in case it is not different from mine, which was described above) and I do not need implementation (I will do it myself). But what I need are details. I can not figure out how I can store values from the Euclidian algorithm and then go through all of them  and represent the gcd as a linear combination at the end. Should I use an array or are there some better recommendations?\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What does Logn actually mean?\r\n                \r\nI am just studying for my class in Algorithms and have been looking over QuickSort. I understand the algorithm and how it works, but not how to get the number of comparisons it does, or what logn actually means, at the end of the day.\n\nI understand the basics, to the extent of :\n\n```\nx=logb(Y) then\nb^x = Y\n```\n\n\nBut what does this mean in terms of algorithm performance? It's the number of comparisons you need to do, I understand that...the whole idea just seems so unintelligible though. Like, for QuickSort, each level K invocation involves ```\n2^k```\n invocations each involving sublists of length ```\nn/2^K.```\n\n\nSo, summing to find the number of comparisons :\n\n```\nlog n\nΣ 2^k. 2(n/2^k) = 2n(1+logn)\nk=0\n```\n\n\nWhy are we summing up to log n ? Where did 2n(1+logn) come from? Sorry for the vagueness of my descriptions, I am just so confused.\n    ", "Answer": "\r\nIf you consider a full, balanced binary tree, then layer by layer you have 1 + 2 + 4 + 8 + ... vertices.  If the total number of vertices in the tree is 2^n - 1 then you have 1 + 2 + 4 + 8 + ... + 2^(n-1) vertices, counting layer by layer.  Now, let N = 2^n (the size of the tree), then the height of the tree is n, and n = log2(N) (the height of the tree).  That's what the log(n) means in these Big O expressions.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Count number of comparisons of a sorting algorithm and add it to an array list in java\r\n                \r\nHi I have a generic bubble sort algorithm which I am using and I want to track the number of comparisons that occur before the array is sorted. The number of comparisons must be stored in an array list. I am not too sure how to do this so I was wondering if anyone can help. Thanks\n\n```\nprotected static ArrayList<Integer> noOfComparisons = new ArrayList<Integer>();\n\npublic static <E extends Comparable<? super E>> void bubbleSort(E[] comparable) {\nboolean changed = false;\ndo {\n    changed = false;\n    for (int a = 0; a < comparable.length - 1; a++) {\n        if (comparable[a].compareTo(comparable[a + 1]) > 0) {\n            E tmp = comparable[a];\n            comparable[a] = comparable[a + 1];\n            comparable[a + 1] = tmp;\n            changed = true;\n        }\n    }\n} while (changed);\n}\n```\n\n    ", "Answer": "\r\nYou will need to keep track of the number of comparisons every time you sort an array. To do so, create an ```\nint```\n initialized at zero at the beginning of the bubbleSort method, and then increase that number whenever a comparison is performed. At the end of your bubbleSort method, add that int to the list.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What does Logn actually mean?\r\n                \r\nI am just studying for my class in Algorithms and have been looking over QuickSort. I understand the algorithm and how it works, but not how to get the number of comparisons it does, or what logn actually means, at the end of the day.\n\nI understand the basics, to the extent of :\n\n```\nx=logb(Y) then\nb^x = Y\n```\n\n\nBut what does this mean in terms of algorithm performance? It's the number of comparisons you need to do, I understand that...the whole idea just seems so unintelligible though. Like, for QuickSort, each level K invocation involves ```\n2^k```\n invocations each involving sublists of length ```\nn/2^K.```\n\n\nSo, summing to find the number of comparisons :\n\n```\nlog n\nΣ 2^k. 2(n/2^k) = 2n(1+logn)\nk=0\n```\n\n\nWhy are we summing up to log n ? Where did 2n(1+logn) come from? Sorry for the vagueness of my descriptions, I am just so confused.\n    ", "Answer": "\r\nIf you consider a full, balanced binary tree, then layer by layer you have 1 + 2 + 4 + 8 + ... vertices.  If the total number of vertices in the tree is 2^n - 1 then you have 1 + 2 + 4 + 8 + ... + 2^(n-1) vertices, counting layer by layer.  Now, let N = 2^n (the size of the tree), then the height of the tree is n, and n = log2(N) (the height of the tree).  That's what the log(n) means in these Big O expressions.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Can Flex 4 or Actionscript access shared C or C++ library?\r\n                \r\nI'm having a Flex4/Actionscript application developed for access in a web browser. I need it to perform some math involving imaginary numbers (e.g. sqrt(-1)). I don't believe either Flex or Actionscript supports this. \n\nHowever, I can put all of the math algorithms in a shared C or C++ library (as created by Matlab). Can Flex or Actionscript  access these algorithms (and run them on the client)? Any better way to accomplish this?\n    ", "Answer": "\r\n```\nCan Flex or Actionscript access these algorithms (and run them on the client)?\n```\n\n\nSort of.  You can use Alchemy to use C/C++ libraries in the Flash Player.  I'm not sure exactly how it works.  The project is experimental, but Adobe has announced they have a new version coming and that they will \"commercialize\" it.  I assume that means tools will be rolled into Flash Pro or Flash Builder.\n\nThis was the technology behind the 2011 Adobe Max Keynote that displayed a game made with the Unreal engine running a browser.  \n\nSome quick searching came up with this AS2 library which may help without going the C route.  ( Source ).  You'd probably want to convert it to AS3, but I would expect that to be minimal.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to find the next number in a sequence of numbers?\r\n                \r\nI have the following sequence of numbers:\n\n```\n2 5 6 20 18 80 54 320 162 1280\n```\n\n\nI'm just not able to find the next following number or the algorithm to calculate it.\n\nAny hints?\n    ", "Answer": "\r\nThe next number is ```\n486```\n.\n\nThe sequence is *3, *4.\n\nEvery odd index is multiplied by 4:\n\n```\n5 20 80 320 1280\n```\n\n\nEvery even index is multiplied by 3:\n\n```\n2 6 18 54 162\n```\n\n\nThus, ```\n486```\n is the next number. :-)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Coalesce columns in spark dataframe\r\n                \r\nI did an algorithm and I got a lot of columns with the name logic and number suffix, I need to do ```\ncoalesce```\n but I don't know how to apply ```\ncoalesce```\n with different amount of columns.\n\nExample:\n\n```\n|id|logic_01|logic_02|logic_03|\n|1 |  null  |a       |null    |  \n|2 |  null  |b       |null    |   \n|3 |   c    | null   |null    |   \n|4 |  null  | null   |d       |\n```\n\n\nResponse:\n\n```\n|id|logic|\n|1 |  a  |  \n|2 |  b  |   \n|3 |  c  |   \n|4 |  d  | \n```\n\n\nAnother example:\n\n```\n|id|logic_01|logic_02|logic_03|logic_04|\n|1 |  null  |a       |null    |null    |  \n|2 |  null  | null   |null    |b       |   \n|3 |   c    | null   |null    |null    |    \n|4 |  null  | null   |d       |null    |\n```\n\n\nResponse:\n\n```\n|id|logic|\n|1 |  a  |  \n|2 |  b  |   \n|3 |  c  |   \n|4 |  d  | \n```\n\n\nThanks for your help.\n    ", "Answer": "\r\nFirst find all columns that you want to use in the ```\ncoalesce```\n:\n\n```\nval cols = df.columns.filter(_.startsWith(\"logic\")).map(col(_))\n```\n\n\nThen perform the actual ```\ncoalesce```\n:\n\n```\ndf.select($\"id\", coalesce(cols: _*).as(\"logic\"))\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Generating a 10 digit security token\r\n                \r\nI'm look at algorithms and ways to generating a 10 digit security token. I've tried the following: \n\n```\n        RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();\n        var buffer = new byte[4];\n        rng.GetBytes(buffer);\n        int result = BitConverter.ToInt32(buffer, 0);\n        var token = Math.Abs(result).ToString();\n```\n\n\nThe problem is RNGCryptoServiceProvider seems to return around 9 to 10 digits. I've consider add an extra random numbers if it contains less than 10 digits however I not convinced this is the best approach. \n\nappreciate any advice or recommendations. \n    ", "Answer": "\r\nJust pad the result with zeros to get 10 digits. Also, you should rather use a ```\nulong```\n to get the full range of 10 digits.\n\n```\nvar buffer = new byte[8]; // 8 bytes for a long\nrng.GetBytes(buffer);\nulong result = BitConverter.ToUInt64(buffer, 0); // unsigned to avoid having to use Abs\nvar token = result.ToString(\"D10\"); // pads the result to 10 digits\ntoken = token.Substring(token.Length - 10); // strip out extra digits, if any\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Show a GUID in 36 letters format\r\n                \r\nGUID is big random number show in a HEX basis. I want to show this number in a shorter format, lets say that based on the all letters and numbers. That is a 36 basis. \n\nLets say that: ```\n2f1e4fc0-81fd-11da-9156-00036a0f876a```\n will become as ```\n3jEl9x6eZi```\n.\n\nIs there any 'ready' algorithm for this in .Net?\n\nit need to be bidirectional.\n\nEdit: using Base64 is even better solution. The only problem is Base64  contains ```\n/```\n char which is not compatible to use in URI.\n    ", "Answer": "\r\nMaybe this is what you need: ShortGuid - A shorter and url friendly GUID class in C# \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Weekly group assignment algorithm with odd number of participants\r\n                \r\nThere is a round-robin solution to a question I asked before. It works great with even number of people but none of the suggestions seem to work once you implement the algorithm and try them out. I've tried many variations and (grouping the last one with a whole bunch of other people, the second group the last group, different combinations, the 2 and 4 to the last of the bottom row, I thought this would give me the most optimal solution but still many duplicates). Can someone suggest a way to go, or a proof that there cannot be a solution without 2 people working together more than once so I can stop trying to make it work. If you want the algorithm in java I can post it so you can play with it.\n\nThanks. \n    ", "Answer": "\r\n14 weeks for 23 students in groups of 2 and one 3 is sufficiently undemanding that local search is able to find a solution.\n\n```\n 18  1 11|  3  4|  5  7|  9  6|  0 17|  2 12| 10 19| 15 16| 21  8| 14 20| 13 22|\n  6 13 18| 17  4|  5  0| 20  1| 12 11| 10  9|  2 14| 15  7|  3  8| 19 16| 21 22|\n 21 17  7| 19 22|  3  1|  2  8|  0 10| 14 12| 13 11|  6 16|  5 15| 18 20|  9  4|\n  8  1 13| 18  2|  6 11| 20  0| 12 10| 14 15|  5 17|  9 21|  4 19|  3 22| 16  7|\n  0  4 16| 17 20| 21  3|  7 18| 13 19|  1  5|  9 11| 15  2| 14  8| 10  6| 12 22|\n 12  1 17| 15  4|  8  6| 16 18|  9  0| 11 22|  5 14|  3  2|  7 13| 19 20| 21 10|\n  4  1 22| 12  8| 15  6|  7  0|  9 17| 11  3| 13  2|  5 18| 10 14| 19 21| 20 16|\n  0  1  6| 13 21| 15 12| 17  8| 20 10| 11  4|  3 14|  5 16|  7  2| 19  9| 18 22|\n 13 16  3|  2  9| 11 20|  6 17| 22 10|  5 12|  0 14| 15  1|  8 18| 19  7| 21  4|\n 14  1  7|  2  4|  5  9|  3  6|  8 10| 13 12| 21  0| 17 16| 22 20| 19 18| 11 15|\n 14 18 21| 12  4|  5  6|  2 19|  8 20|  1  9| 13  0| 11 16| 17 15|  3 10|  7 22|\n 21  6  2|  3 20|  5 13| 16  8| 18 17|  0 12| 22 14| 10  1|  9 15|  7  4| 11 19|\n  0 11  2|  6  4| 16 14|  7  8| 17 10|  1 19| 13  9|  3 18| 21 12| 20  5| 15 22|\n  1 16  2| 14 13|  3  7|  8  4| 11 10|  9 12|  0 18| 15 19| 17 22|  6 20| 21  5|\n```\n\n\nHere's the Java code that made it.\n\n```\npublic class Schedule {\n  private final int weekCount;\n  private final int groupCount;\n  private final int personCount;\n  private final int groupFirstSlot[];\n  private final int weekSlotPerson[][];\n\n  public Schedule(int weekCount, int groupCount, int personCount) {\n    this.weekCount = weekCount;\n    this.groupCount = groupCount;\n    this.personCount = personCount;\n    int remainingPersonCount = personCount;\n    this.groupFirstSlot = new int[groupCount + 1];\n    for (int remainingGroupCount = groupCount;\n         remainingGroupCount > 0;\n         remainingGroupCount--) {\n      groupFirstSlot[remainingGroupCount] = remainingPersonCount;\n      remainingPersonCount -= remainingPersonCount / remainingGroupCount;\n    }\n    this.weekSlotPerson = new int[weekCount][personCount];\n    for (int week = 0; week < weekCount; week++) {\n      for (int person = 0; person < personCount; person++) {\n        weekSlotPerson[week][person] = person;\n      }\n    }\n  }\n\n  public int getWeekCount() {\n    return weekCount;\n  }\n\n  public int getGroupCount() {\n    return groupCount;\n  }\n\n  public int getPersonCount() {\n    return personCount;\n  }\n\n  public int getGroupFirstSlot(int group) {\n    return groupFirstSlot[group];\n  }\n\n  public int getWeekSlotPerson(int week, int slot) {\n    return weekSlotPerson[week][slot];\n  }\n\n  public void swapWeekSlotPerson(int week, int slotOne, int slotTwo) {\n    int temp = weekSlotPerson[week][slotOne];\n    weekSlotPerson[week][slotOne] = weekSlotPerson[week][slotTwo];\n    weekSlotPerson[week][slotTwo] = temp;\n  }\n\n  public int getConflictCount() {\n    int pairCount[][] = new int[personCount][personCount];\n    for (int week = 0; week < weekCount; week++) {\n      for (int group = 0; group < groupCount; group++) {\n        for (int slotOne = groupFirstSlot[group];\n             slotOne < groupFirstSlot[group + 1];\n             slotOne++) {\n          int personOne = weekSlotPerson[week][slotOne];\n          for (int slotTwo = groupFirstSlot[group];\n               slotTwo < groupFirstSlot[group + 1];\n               slotTwo++) {\n            int personTwo = weekSlotPerson[week][slotTwo];\n            pairCount[personOne][personTwo]++;\n          }\n        }\n      }\n    }\n    int conflictCount = 0;\n    for (int personOne = 0; personOne < personCount; personOne++) {\n      for (int personTwo = personOne + 1;\n           personTwo < personCount;\n           personTwo++) {\n        int pc = pairCount[personOne][personTwo];\n        conflictCount += pc * (pc - 1) / 2;\n      }\n    }\n    return conflictCount;\n  }\n\n  public static void main(String[] args) {\n    Schedule sched = new Schedule(14, 11, 23);\n    java.util.Random rand = new java.util.Random();\n    int oldCc = sched.getConflictCount();\n    while (oldCc > 0) {\n      int week = rand.nextInt(sched.getWeekCount());\n      int slotOne = rand.nextInt(sched.getPersonCount());\n      int slotTwo = rand.nextInt(sched.getPersonCount());\n      sched.swapWeekSlotPerson(week, slotOne, slotTwo);\n      int newCc = sched.getConflictCount();\n      if (newCc < oldCc) {\n        oldCc = newCc;\n      } else {\n        sched.swapWeekSlotPerson(week, slotOne, slotTwo);\n      }\n    }\n    for (int week = 0; week < sched.getWeekCount(); week++) {\n      for (int group = 0; group < sched.getGroupCount(); group++) {\n        for (int slot = sched.getGroupFirstSlot(group);\n             slot < sched.getGroupFirstSlot(group + 1);\n             slot++) {\n          System.out.printf(\"%3d\",\n                            sched.getWeekSlotPerson(week, slot));\n        }\n        System.out.print('|');\n      }\n      System.out.println();\n    }\n  }\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Floating Point Number parsing: Is there a Catch All algorithm?\r\n                \r\nOne of the fun parts of multi-cultural programming is number formats.\n\n\nAmericans use 10,000.50\nGermans use 10.000,50\nFrench use 10 000,50\n\n\nMy first approach would be to take the string, parse it backwards until I encounter a separator and use this as my decimal separator. There is an obvious flaw with that: 10.000 would be interpreted as 10.\n\nAnother approach: if the string contains 2 different non-numeric characters, use the last one as the decimal separator and discard the others. If I only have one, check if it occurs more than once and discards it if it does. If it only appears once, check if it has 3 digits after it. If yes, discard it, otherwise, use it as decimal separator.\n\nThe obvious \"best solution\" would be to detect the User's culture or Browser, but that does not work if you have a Frenchman using an en-US Windows/Browser.\n\nDoes the .net Framework contain some mythical black magic floating point parser that is better than ```\nDouble.(Try)Parse()```\n in trying to auto-detect the number format?\n    ", "Answer": "\r\nI think the best you can do in this case is to take their input and then show them what you think they meant. If they disagree, show them the format you're expecting and get them to enter it again.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "JAVA: Havel-Hakimi algorithm (Algorithm for determing whether the sequence of numbers can represent degrees of vertices in a graph)\r\n                \r\nI want to write a code in java that helps you determin whether the numbers can represent degrees of vertices in a graph. We were told in the algorithmic graph theory class that there's a simple way to solve that with an algorithm that works like this:\n\n\nYou put the numbers in descending order\n\n```\n3,3,2,1\n```\n\nThen you take the biggest one (in this case it's 3), 'erase it' (set it to zero in an array, I guess) and then from n-following numbers subtract 1 (n equals the value of this biggest number, in this case you subtract one from the following 3 numbers)\n\n```\n0,2,1,0\n```\n\n\n\nIf needed, put the numbers in descending order once again and repeat the algorithm, erase the biggest number and subtract 1 from n-following numbers. \n\nDo this until you either:\n\na) come across negative number(s), in which case it means that your sequence of numbers cannot represent degrees of vertices in a graph or\n\nb) you are at the end of your algorithm and all the numbers are zeroes which means that these numbers can represent degrees of vertices in a graph\n\nFor these particular numbers it should go like this\n\n```\n3,3,2,1\n0,2,1,0\n0,0,0,-1\n```\n\n\nAnd as there's -1, it means that this sequence of numbers couldn't represent degrees of vertices in a graph.\n\nSo far my code for the algorithm and checking whether it is done looks like this (I already have the main method with scanner in it so the user can write down how many vertices and what degrees he wants to find out about, this is just where I don't know what to do next): \n\n```\npublic void alg() {\n\n        int size = this.vertices.length;\n        do  {\n            this.check();\n\n            for (int i = 0; i < size; i++) {\n                int biggest = i;\n                int max = this.vertices[biggest];\n                this.vertices[biggest] = 0; \n\n                for (int j = 0; j <= max + 1; j++) {\n                    this.vertices[j+1]--;\n                    System.out.println(Arrays.toString(this.vertices)); \n                    biggest++;\n                } \n\n            }         \n        } while (this.finished != true);\n    }    \n\n    public void check() {\n        Integer[] zeroes = new Integer[this.vertices.length];\n        Arrays.fill(zeroes, 0); //this probably isn't necessary\n        int count = 0;\n        for (int i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] < 0) {\n                this.finished = true;\n                System.out.println(\"not a graph\");\n            } \n            if(this.vertices[i] == 0) {\n                count++;\n            }\n        }\n        if (Arrays.equals(this.vertices, zeroes)) {\n            System.out.println(\"a graph\");\n        }\n    }\n```\n\n\nSo if the user's sequence of numbers is 3,3,2,1, the programme will print out only this and won't continue\n\n```\n[3, 3, 2, 1]\n[0, 2, 2, 1]\n[0, 2, 1, 1]\n[0, 2, 1, 0]\n```\n\n\nI guess I'm missing something in the loops but I can't figure out what. Thanks for the help in advance!\n    ", "Answer": "\r\nThe problem seems to be in your inner ```\nfor```\n loop. In your example it runs from ```\nj = 0```\n to ```\nj = 4```\n. \n\nInside the loop you try to access ```\nthis.vertices[j+1]```\n which would be at the end of this loop the 5th entry of this array. You should get an exception by the Java Runtime here.\n\nThe second problem is, that you always start at the first index of you array.\n\nTry changing this for loop to \n\n```\nfor (int j = i+1; j <= max + i ; j++) {\n        this.vertices[j]--;\n        System.out.println(Arrays.toString(this.vertices)); \n        biggest++;\n} \n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for generating a random number\r\n                \r\nI'm looking to generate a random number and issue it to a table in a database for a particular user_id. The catch is, the same number can't be used twice. There's a million ways to do this, but I'm hoping someone very keen on algorithms has a clever way of solving the problem in an elegant solution in that the following criteria is met:\n\n1) The least amount of queries to the database are made.\n2) The least amount of crawling through a data structure in memory is made.\n\nEssentially the idea is to do the following\n\n1) Create a random number from 0 to 9999999\n2) Check the database to see if the number exists\n    OR\n2) Query the database for all numbers\n3) See if the returned result matches whatever came from the db\n4) If it matches, repeat step 1, if not, problem is solved.  \n\nThanks.\n    ", "Answer": "\r\nNo your algorithm is not scalable. What I've done before is to issue numbers serially (+1 each time) and then pass them through an XOR operation to jumble the bits thus giving me a seemingly random numbers. Of course they aren't really random, but they look so to users eyes.\n\n\n\n[Edit] Additional information\n\nThis algorithm's logic goes like this you use a known sequence to \ngenerate unique numbers and then you deterministically manipulate them, \nso they don't look serial anymore. The general solution is to use \nsome form of encryption, which in my case was an XOR flipflop, because\nits as fast as it can get, and it fulfills the guarantee that numbers\nwill never collide.\n\nHowever you can use other forms of encryption, if you want prefer even more \nrandom looking numbers, over speed (say you don't need to generate many \nids at a time). Now the important point in choosing an encryption algorithm\nis \"the guarantee that numbers will never collide\". And a way to prove if an encryption algorithm can fulfill \nthis guarantee is to check if both the original number and the result of \nthe encryption have the same number of bits, and that the the algorithm is\nreversible (bijection).\n\n[Thanks to Adam Liss & CesarB for exapanding on the solution]\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How should I hash this data in C#?\r\n                \r\nI have a string data field which is 12 characters, alphanumeric (letters and numbers). I need to perform a one-way hash on this field for security reasons. What algorithm should I use to avoid collisions (different values hashed to same value) for accurate reporting? Would this be do the trick?\n\n```\nEdit: Here is the code based on suggestions in comments so far:\n\npublic static string GetHashedValue(string Input)\n{\n    byte[] bytes = System.Text.Encoding.Unicode.GetBytes(Input);\n    bytes = new System.Security.Cryptography.SHA512Managed().ComputeHash(bytes);\n    String output = Convert.ToBase64String(bytes);\n    return output;\n}\n```\n\n    ", "Answer": "\r\nI suggest you should get a base64 string to prevent loss of data, so you can avoid getting a high collision chance. ie:\n\n```\npublic static string GetHashedValue(string Input)\n{\n    byte[] bytes = System.Text.Encoding.Unicode.GetBytes(Input);\n    bytes = new System.Security.Cryptography.SHA512Managed().ComputeHash(bytes);\n    string output = Convert.ToBase64String(bytes);\n    return output;\n}\n```\n\n\nEDIT: Hash is one way and is ideal for say storing passwords. If you want the original value back with a key then use a symmetric algorithm.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "brute force password with words and numbers\r\n                \r\nI am doing this science fair project for school: http://www.sciencebuddies.org/science-fair-projects/project_ideas/CompSci_p046.shtml#summary\n\nThe project gives you base program that guesses the passwords that you input into the program and uses a different methods to guess it. Part of the project is to come up with new algorithms to add to the program. One of the methods is using long list of common passwords to match the given password and another is a simple lock-dial simulation of numbers up to 8 digits. I was wondering if there was a way two combine those to so it checks a word in the list plus the number dial behind the word. How to write a simple code to do that?\n\nWhat I'm really asking for is for someone to help me write a new method that goes through the word list and add a number dial (brute force with numbers) after the word, then check to see if that's the password inputed.\n\nOriginal program and word list can be downloaded here: http://www.sciencebuddies.org/science-fair-projects/project_ideas/CompSci_p046.shtml#materials\n\nThis is the number dial simulation the program uses\n\n```\ndef search_method_1(num_digits):\n    global totalguesses\n    result = False\n    a=0\n    #num_digits = 3    # How many digits to try. 1 = 0 to 9, 2 = 00 to 99, etc.\n    starttime = time.time()\n    tests = 0\n    still_searching = True\n    print(\"Using method 1 and searching for \"+str(num_digits)+\" digit numbers.\")\n    while still_searching and a<(10**num_digits):\n        ourguess = leading_zeroes(a,num_digits)\n        tests = tests + 1\n        totalguesses = totalguesses + 1\n        if (check_userpass(which_password, ourguess)):\n            print (\"Success! Password \"+str(which_password)+\" is \" + ourguess)\n            still_searching = False   # we can stop now - we found it!\n            result = True\n        else:\n            print (\"Darn. \" + ourguess + \" is NOT the password.\")\n        a=a+1\n\n    seconds = time.time()-starttime\n    report_search_time(tests, seconds)\n    return result\n```\n\n\nThis is the code that runs through the word list:\n\n```\ndef search_method_3(file_name):\n    global totalguesses\n    result = False\n\n# Start by reading the list of words into a Python list\nf = open(file_name)\nwords = f.readlines()\nf.close\n# We need to know how many there are\nnumber_of_words = len(words)\nprint(\"Using method 3 with \"+str(number_of_words)+\" in the list\")\n\n## Depending on the file system, there may be extra characters before\n## or after the words. \nfor i in range(0, number_of_words):\n    words[i] = cleanup(words[i])\n\n# Let's try each one as the password and see what happens\nstarttime = time.time()\ntests = 0\nstill_searching = True\nword1count = 0           # Which word we'll try next\n\nwhile still_searching:\n    ourguess_pass = words[word1count]\n    #print(\"Guessing: \"+ourguess_pass)\n    # Try it the way it is in the word list\n    if (check_userpass(which_password, ourguess_pass)):\n        print (\"Success! Password \"+str(which_password)+\" is \" + ourguess_pass)\n        still_searching = False   # we can stop now - we found it!\n        result = True\n    #else:\n        #print (\"Darn. \" + ourguess_pass + \" is NOT the password.\")\n    tests = tests + 1\n    totalguesses = totalguesses + 1\n    # Now let's try it with the first letter capitalized\n    if still_searching:\n        ourguess_pass = Cap(ourguess_pass)\n        #print(\"Guessing: \"+ourguess_pass)\n        if (check_userpass(which_password, ourguess_pass)):\n            print (\"Success! Password \"+str(which_password)+\" is \" + ourguess_pass)\n            still_searching = False   # we can stop now - we found it!\n            result = True\n        #else:\n            #print (\"Darn. \" + ourguess_pass + \" is NOT the password.\")\n        tests = tests + 1\n        totalguesses = totalguesses + 1\n\n    word1count = word1count + 1\n    if (word1count >=  number_of_words):\n        still_searching = False\n\nseconds = time.time()-starttime\nreport_search_time(tests, seconds)\nreturn result\n```\n\n    ", "Answer": "\r\nI interpret your question to mean that you want to interlace the numeric guesses with the alphabetic guesses.\n\nOne problem you are facing is that the logic that keeps time and the logic that checks if the password is correct is mixed in with the logic that generates guesses. You might want to use generators to break out the \"guess generation\" into separate functions.\n\n```\nfrom itertools import izip\n\ndef numerical_guess():\n    current_guess = 0\n    while True:\n        yield current_guess\n        current_guess += 1\n\ndef dictionary_guess():\n     for word in {'apple', 'banana', 'orange'}:\n          yield word\n\nfor guess in izip(numerical_guess(), dictionary_guess()):\n    if guess == password:\n         print \"Got it!\"\n    else:\n         print \"Not it!\"\n```\n\n\nThere are some things you will have to think about, such as what if one generator runs out before the other one.  \n\nYou mention that you don't know enough to understand this level of code, but I don't see anything so complicated with the code. Your posted code only uses the most basic control structures of python so I wonder if this post will even be helpful for you. Maybe you could go through the code line by line and mention any part of the code that is confusing for you.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How should I hash this data in C#?\r\n                \r\nI have a string data field which is 12 characters, alphanumeric (letters and numbers). I need to perform a one-way hash on this field for security reasons. What algorithm should I use to avoid collisions (different values hashed to same value) for accurate reporting? Would this be do the trick?\n\n```\nEdit: Here is the code based on suggestions in comments so far:\n\npublic static string GetHashedValue(string Input)\n{\n    byte[] bytes = System.Text.Encoding.Unicode.GetBytes(Input);\n    bytes = new System.Security.Cryptography.SHA512Managed().ComputeHash(bytes);\n    String output = Convert.ToBase64String(bytes);\n    return output;\n}\n```\n\n    ", "Answer": "\r\nI suggest you should get a base64 string to prevent loss of data, so you can avoid getting a high collision chance. ie:\n\n```\npublic static string GetHashedValue(string Input)\n{\n    byte[] bytes = System.Text.Encoding.Unicode.GetBytes(Input);\n    bytes = new System.Security.Cryptography.SHA512Managed().ComputeHash(bytes);\n    string output = Convert.ToBase64String(bytes);\n    return output;\n}\n```\n\n\nEDIT: Hash is one way and is ideal for say storing passwords. If you want the original value back with a key then use a symmetric algorithm.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Objects and arrays addition\r\n                \r\nCan anyone explain to me how the results of the following was evaluated?\n\n```\n{} + {} // NaN\n[] + {} // \"[object Object]\"\n{} + [] // 0\n[] + [] // \"\"\n```\n\n    ", "Answer": "\r\nHere is a full explanation of this, check it.\nAnd note ```\n{} + {}```\n be ```\nNaN```\n if you execute it directly in the console because ```\n{}```\n is thought of a block rather than an object.\n```\n({}+{})```\n should be ```\n'[object Object][object Object]'```\n\nThe real result is:\n```\nconsole.log({}+{}) // '[object Object][object Object]'\nconsole.log([]+{}) // '[object Object]'\nconsole.log({}+[]) // '[object Object]'\nconsole.log([]+[]) // ''\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Need an algorithm to print a list of unique words and number of occurences\r\n                \r\nI need to create a program that inputs an English language text file and outputs a list of words contained in the file and the number of occurrences. I need to make one using a brute force method and one with divide and conquer.\nI will code it myself so please don't give me code, but I need help figuring out how to go about doing it - basically what is the algorithm behind each method, especially the divide and conquer? Pseudo code would be great\n    ", "Answer": "\r\nUsing a brute force method:\n\nCreate a list that stores word (say, ```\nkey```\n) and corresponding counter for their occurrences(say ```\ncnt```\n). Traverse through the file and :\n\n\nif the word is not present, append it in the list and start the counter as ```\ncnt = 1```\n.\nif the word is present, do ```\ncnt++```\n.\n\n\nUsing divide and conquer:\n\n\nUse separate list for each starting alphabet (a to z). So there would be at most 26 separate lists.\nTraverse through the list. For each word, pick up the starting character and choose the corresponding list to search the word. Then, perform the search and update method used in brute force method.\n\n\nNote: None of them are optimized. They perform poorly against hashmap implementation.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Iterating through list with count resetting on 0\r\n                \r\nSo I am working on algorithms and I have this section where I can't figure out.\nGiven a list of numbers, get the sum of consecutive values over 0 and add to new list.\nExpected result:\n```\n[1, 2, 3, 0, 1, 1, 1, 0, 2, 2, 2] == [6, 3, 6]\n```\n\nI have tried:\n```\n    for i in splitlist2:   \n    if i == 0:\n        resultlist.append((count2))\n        count2 = 0\n    else:\n        count2 += i\n```\n\nProduces [6, 3]. I don't get why the last value is not appearing. Can someone please explain?\n    ", "Answer": "\r\n```\nfrom itertools import groupby\n\nlist1 = [1, 2, 3, 0, 1, 1, 1, 0, 2, 2, 2]\nans = []\nreturn [sum(list(v)) for k,v in groupby(list1, key = lambda x: x != 0) if k != 0]\n```\n\nOutput :\n```\n[6,3,6]\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "General approach to developing an image classification algorithm for Dilbert cartoons\r\n                \r\nAs a self-development exercise, I want to develop a simple classification algorithm that, given a particular cell of a Dilbert cartoon, is able to identify which characters are present in the cartoon (Dilbert, PHB, Ratbert etc.). \n\nI assume the best way to do this is to (1) apply some algorithm to the image, which converts it into a set of features, and (2) use a training set and one of many possible machine learning algorithms to correlate the presence/absence of certain features with a particular character being present in the cell.\n\nSo my questions are - (a) is this the correct approach, (b) since there's a number of classification algorithms and ML algorithms to test, what is a good methodology for finding the right one, and (c) which algorithms would you start with, given that we're essentially conducting a classification exercise on a cartoon.\n    ", "Answer": "\r\nSo i think you are on the right track w/r/t your step 1 (apply some algorithm to the image, which converts it into a set of features). \n\nThis project is more challenging that most ML problems because here you will actually have to create your training data set from the raw data (the individual frames comprising the cartoons). For instance, grab a frame, identify two characters in that frame, Dilbert and the character with horns (Dilbert's boss i believe, don't know his name), extract those two characters from that frame and append to each the appropriate class label (e.g., \"1\" for Dlibert).\n\nStep 1\n\nTo extract the individual characters from each of the frames comprising the a Dilbert cartoon, i would suggest  a spectral decomposition of each frame. If you are not familiar with this technique, at its core, it's just an eigenvector decomp. \n\nIf you like python (or R, given that you can use python-to-R bindings like RPy) then i would strongly encourage you to look at sklearn. In particular, this excellent library (which was originally developed under the SciPy scikits project umbrella, and therefore uses NumPy + SciPy for matrix computation) has several algorithms for image segmentation, one of which is based on spectral clustering. For this step in your Project, you would most likely want to look at these two scikits.learn modules\n\n\nsklearn.feature_extraction (esp. the image sub-module)\nsklearn.cluster.spectral_clustering\n\n\nIncluded with these two modules are two good example scripts, one segmenting a digital photograph and the other segmenting an image comprised of three partially super-imposed circles with minimal contrast w/r/t each other and w/r/t the background--both, i suspect are more difficult problems that the decompositions you will need to perform. In other words, sklearn has two complete, well-documented example scripts included in the source distribution, both of which process data similar to yours. Either or both would be an excellent template for this step.\n\n\nStep 2\n\nSo that's the first step; here's the second: sort all of the components of the decomposed images into groups, one group for each Dilbert character. Next, assign a class label to each Group, e.g., if there are four characters from your decomposition step, then a decent choice for class labels is \"0\", \"1\", \"2\", and \"3.\" Append those class labels to the component matrices (the decomposition products from step 1) so each character matrix is mapped to its corresponding class (Dilbert character).\n\n\nStep 3\n\nSelect a suitable ML technique. You have many choices for this step; the only criteria are that the technique is in the supervised category (because you have assigned class labels to your data) and that it function as a classifier (i.e., it returns a class label, versus a regressor which outputs a numerical value). Given this is a personal project, i would chose the one that seems most interesting to you. A few that satisfy the criteria i just mentioned are: multi-layer perceptron (neural network), support vector machine (SVM), and k-nearest neighbors (kNN).\n\n\nStep 4\n\ntrain, validate, and test your classifier\n\nAlternative Technique: Template Matching\n\nOnce Step 1 is completed (each image is decomposed into a set of objects, some of which will no doubt represent the characters) you can manually sift through these decomposition products and collect exemplars for each character in the cartoon. The are the templates.\n\nNext you compare objects segmented from an image with this set of unique templates. In scikit-image, another scipy scikit, you can use the method match_template, to which you pass in a template image and a candidate image, and this method returns a 2D array showing the pixel-by-pixel correlation (between -1 and 1).  \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Random data generator applet returns `0x6F00`\r\n                \r\nI wrote the below program to generate random numbers of different lengths, using two different algorithms (```\nALG_SECURE_RANDOM```\n and ```\nALG_PSEUDO_RANDOM```\n).\n\n```\nP1```\n and ```\nP2```\n in the APDU command specify the algorithm and the random length in order.\n\n\n```\nP1 = 0X01```\n : ALG_SECURE_RANDOM\n```\nP1 = 0X02```\n : ALG_PSEUDO_RANDOM\n```\nP2```\n = Random number length\n\npublic class RandGen extends Applet {\n\n```\nbyte[] generatedArray;\nbyte[] generatedRandom;\n\nRandomData randomDataSecure = RandomData\n        .getInstance(RandomData.ALG_SECURE_RANDOM);\nRandomData randomDataPseudo = RandomData\n        .getInstance(RandomData.ALG_PSEUDO_RANDOM);\n\nprivate RandGen() {\n}\n\npublic static void install(byte bArray[], short bOffset, byte bLength)\n        throws ISOException {\n    new RandGen().register();\n}\n\npublic void process(APDU apdu) throws ISOException {\n\n    if (selectingApplet()) {\n        return;\n    }\n\n    byte[] buffer = apdu.getBuffer();\n\n    generatedArray = JCSystem.makeTransientByteArray(\n            (short) buffer[ISO7816.OFFSET_P2], JCSystem.CLEAR_ON_DESELECT);\n\n    switch (buffer[ISO7816.OFFSET_P1]) {\n    case (0x01):\n        generatedRandom = secureRandomGenerator(apdu);\n        break;\n\n    case (0x02):\n        generatedRandom = pseudoRandomGenerator(apdu);\n        break;\n\n    default:\n        return;\n    }\n\n    Util.arrayCopyNonAtomic(generatedRandom, (short) 0, buffer, (short) 0,\n            (short) ISO7816.OFFSET_P2);\n    apdu.setOutgoingAndSend((short) 0, (short) ISO7816.OFFSET_P2);\n}\n\npublic byte[] secureRandomGenerator(APDU apdu) {\n    byte[] buffer = apdu.getBuffer();\n    randomDataSecure.generateData(generatedArray, (short) 0,\n            (short) buffer[ISO7816.OFFSET_P2]);\n    return generatedArray;\n}\n\npublic byte[] pseudoRandomGenerator(APDU apdu) {\n    byte[] buffer = apdu.getBuffer();\n    randomDataPseudo.generateData(generatedArray, (short) 0,\n            (short) buffer[ISO7816.OFFSET_P2]);\n    return generatedArray;\n}\n```\n\n\n}\n\n\nThe CAP file generated and uploaded on the card successfully, but when I send APDU commands to the card, I receive the ```\n0X6F00```\n status word :\n\n```\nOSC: opensc-tool.exe -s 00a404000b0102030405060708090000 -s 00000202\nUsing reader with a card: ACS CCID USB Reader 0\nSending: 00 A4 04 00 0B 01 02 03 04 05 06 07 08 09 00 00\nReceived (SW1=0x90, SW2=0x00)\nSending: 00 00 02 02\nReceived (SW1=0x90, SW2=0x00)\n\nOSC: opensc-tool.exe -s 00a404000b0102030405060708090000 -s 00000102\nUsing reader with a card: ACS CCID USB Reader 0\nSending: 00 A4 04 00 0B 01 02 03 04 05 06 07 08 09 00 00\nReceived (SW1=0x90, SW2=0x00)\nSending: 00 00 01 02\nReceived (SW1=0x6F, SW2=0x00) \n```\n\n\nIs there something wrong in my applet?\n\n\n\nUpdate:\n\nBased on dear @Vojta's answer, I replace \n\n```\nUtil.arrayCopyNonAtomic(generatedRandom, (short) 0, buffer, (short) 0,\n        (short) ISO7816.OFFSET_P2);\napdu.setOutgoingAndSend((short) 0, (short) ISO7816.OFFSET_P2);\n```\n\n\nWith following lines in ```\nprocess()```\n method : \n\n```\n    Util.arrayCopyNonAtomic(generatedRandom, (short) 0, buffer, (short) 0,\n            (short) buffer[ISO7816.OFFSET_P2]);\n    apdu.setOutgoingAndSend((short) 0, (short) buffer[ISO7816.OFFSET_P2]);\n```\n\n\nNow I have a weird output in OpenSC-Tool output :\n\nSecure random generator : \n\n```\nOSC: opensc-tool.exe -s 00a404000b0102030405060708090000 -s 00000110\nUsing reader with a card: ACS CCID USB Reader 0\nSending: 00 A4 04 00 0B 01 02 03 04 05 06 07 08 09 00 00\nReceived (SW1=0x90, SW2=0x00)\nSending: 00 00 01 10\nReceived (SW1=0x90, SW2=0x00):\nB8 1F 80 25 A2 8E 25 30 F8 22 F8 40 0F AE B0 6C ...%..%0.\".@...l\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n00 00 00 00 00                                  .....\n\nOSC: opensc-tool.exe -s 00a404000b0102030405060708090000 -s 00000110\nUsing reader with a card: ACS CCID USB Reader 0\nSending: 00 A4 04 00 0B 01 02 03 04 05 06 07 08 09 00 00\nReceived (SW1=0x90, SW2=0x00)\nSending: 00 00 01 10\nReceived (SW1=0x6F, SW2=0x00)\n\nOSC: opensc-tool.exe -s 00a404000b0102030405060708090000 -s 00000110\nUsing reader with a card: ACS CCID USB Reader 0\nSending: 00 A4 04 00 0B 01 02 03 04 05 06 07 08 09 00 00\nReceived (SW1=0x90, SW2=0x00)\nSending: 00 00 01 10\nReceived (SW1=0x90, SW2=0x00):\nF6 45 A9 0C 0C 3B 3A 5A 5F DC A8 36 .E...;:Z_..6\n```\n\n\nPseudo random generator :\n\n```\nOSC: opensc-tool.exe -s 00a404000b0102030405060708090000 -s 00000210\nUsing reader with a card: ACS CCID USB Reader 0\nSending: 00 A4 04 00 0B 01 02 03 04 05 06 07 08 09 00 00\nReceived (SW1=0x90, SW2=0x00)\nSending: 00 00 02 10\nReceived (SW1=0x90, SW2=0x00):\n37 FD FC 67 EB 9E 21 00 6B E9 44 A7 21 3F 31 9A 7..g..!.k.D.!?1.\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n00 00 00 00 00 00 00                            .......\n\nOSC: opensc-tool.exe -s 00a404000b0102030405060708090000 -s 00000210\nUsing reader with a card: ACS CCID USB Reader 0\nSending: 00 A4 04 00 0B 01 02 03 04 05 06 07 08 09 00 00\nReceived (SW1=0x90, SW2=0x00)\nSending: 00 00 02 10\nReceived (SW1=0x6F, SW2=0x00)\n\nOSC: opensc-tool.exe -s 00a404000b0102030405060708090000 -s 00000210\nUsing reader with a card: ACS CCID USB Reader 0\nSending: 00 A4 04 00 0B 01 02 03 04 05 06 07 08 09 00 00\nReceived (SW1=0x90, SW2=0x00)\nSending: 00 00 02 10\nReceived (SW1=0x90, SW2=0x00):\n72 FE 48 1B 9A A0 BD 2D DF F9 E7 F8 58 CF B7 C0 r.H....-....X...\n00 00 00 00 00 00 00 00 00 00 00                ...........\n```\n\n\nWhy I have different output for a single command?\n    ", "Answer": "\r\nThere is a little bug in your code. You want\n\n```\nUtil.arrayCopyNonAtomic(generatedRandom, (short) 0, buffer, (short) 0,\n            (short) buffer[ISO7816.OFFSET_P2]);\n```\n\n\ninstead of\n\n```\nUtil.arrayCopyNonAtomic(generatedRandom, (short) 0, buffer, (short) 0,\n            (short) ISO7816.OFFSET_P2);\n```\n\n\nGeneral rule: ALWAYS surround the content of your ```\nprocess```\n method with a try-catch block and set status words according to the type and reason of the exception. Otherwise you get only ```\n6F00```\n and you do not know what really happened. If you followed this rule, you would know that ```\nArrayIndexOutOfBoundsException```\n was thrown.\n\nAnswer to update:\n\nWeird output is caused by the fact, that\n\n```\nUtil.arrayCopyNonAtomic(generatedRandom, (short) 0, buffer, (short) 0,\n            (short) buffer[ISO7816.OFFSET_P2]);\napdu.setOutgoingAndSend((short) 0, (short) buffer[ISO7816.OFFSET_P2]);\n```\n\n\noverwrites the ```\nbuffer[ISO7816.OFFSET_P2]```\n with some random value and then this value is used on the next line. You should store ```\nbuffer[ISO7816.OFFSET_P2]```\n in RAM in the beginning of the ```\nprocess```\n method:\n\n```\nfinal byte p2 = buffer[ISO7816.OFFSET_P2];\n```\n\n\nAnswer to comment below:\n\nYou have troubles for P2 >= 0x80, because of casting ```\nbyte```\n to ```\nshort```\n. Unfortunately, JavaCard handles byte as signed, that is why your length for P2 >= 0x80 is negative. You could easily avoid this by:\n\n```\nfinal short outputLen = (short) (buffer[ISO7816.OFFSET_P2] & 0xFF);\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Next prime number algorithm\r\n                \r\ni want to know if there is a easy way to find the prime number next to X.\n\nFor example, if X=2, the next prime will be 3. The algorithm that i have would be ok, if i wanted to know little numbers but i want to calculate like X=3 million.\n\nI found a algorithm to calculate primes, but it takes a lot of time to calculate them, since it calculates all primes from 0 to X... For example for 1 million, it takes almost 2 minutes.\n\nQuestion is... How can i find the next prime number? Is there an efficient algorithm? Best solution i found is to check if X+1 is prime and increase until one is found...\n    ", "Answer": "\r\nWhat you need is to test for primality each number beginning at X.  You can find such tests implemented in the GMP library or you can look at the snippet for Miller-Rabin algorithm in Rosetta code.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Can I separately train a classifier (e.g. SVM) with two different types of features and combine the results later?\r\n                \r\nI am a student and working on my first simple machine learning project. The project is about classifying articles into fake and true. I want to use SVM as classification algorithm and two different types of features:\n\nTF-IDF\nLexical Features like the count of exclamation marks and numbers\n\nI have figured out how to use the lexical features and TF-IDF as a features separately. However, I have not managed to figure out, how to combine them.\nIs it possible, to train and test two separate learning algorithms (one with TF-IDF and the other one with lexical features) and later combine the results?\nFor example, can I calculate Accuracy, Precision and Recall for both separately and then take the average?\n    ", "Answer": "\r\nOne way of combining two models is called model stacking. The idea behind it is, that you take the predictions of both models and feed them into a third model (called meta-model) which is then trained to make predictions given the output of the first two models. There is also another version of model stacking where you aditionally feed the original features into the meta-model.\nHowever, in your case another way to combine both approaches would be to simply feed both the TF-IDF and the lexical features into one model and see how that performs.\n\nFor example, can I calculate Accuracy, Precision and Recall for both separately and then take the average?\n\nThis would unfortunately not work, because there is no combined model making those predictions for which your calculated metrics would be true.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Masking and unmasking a string in Python\r\n                \r\nI have Python code to generate SQL queries from English queries. But while predicting, I might have to send sensitive data in my English query to the model. I want to mask sensitive information like nouns and numbers in my English query. When I receive the predicted query, I want to unmask that data again.\nIn short, I need a python program that can mask nouns and numbers in my string and then unmask them whenever I want them to. We can replace it with anything you  suggest.\nSample English Query:\n```\nHow many Chocolate Orders for a customer with ID 123456?\n```\n\nMasking Expected Output:\n```\nHow many xxxxxxxxxx Orders for a customer with ID xxxxxxxxx? \n```\n\nMy algorithm with create the query like:\n```\nSelect count(1) from `sample-bucket` as d where d.Type ='xxxxxxxx' and d.CustId = 'xxxxxxx'\n```\n\nNow I need the unmasked query like below:\n```\nSelect count(1) from `sample-bucket` as d where d.Type ='Chocolate' and d.CustId = '123456'\n```\n\n    ", "Answer": "\r\nYou can use below code for the masking and unmasking a string. This way you can retain the words in the dictionary and can use them later on when you want to unmask the string. I think this code can be very helpful for the people using third party tools.\n```\nimport base64 \nimport nltk\n\nnltk.download('averaged_perceptron_tagger')\n\ndef base_64_encoding(text):\n    return str(base64.b64encode(text.encode(\"utf-8\")).decode(\"utf-8\"))\n\ndef base_64_decoding(text):\n    return str(base64.b64decode(text.encode('utf-8')).decode('utf-8'))\n\nmasked_element = {}\nenglish_query = \"How many Chocolate Orders for a customer with ID 123456?\"\nprint(\"English Query: \", english_query)\nfor word in english_query.split(\" \"):\n    ans = nltk.pos_tag([word])\n    val = ans[0][1]\n    if val == 'NN' or val == 'NNS' or val == 'NNPS' or val == 'NNP':\n        masked_element[word] = base_64_encoding(word)\n        english_query = english_query.replace(word, base_64_encoding(word))\n    if word.isdigit():\n        masked_element[word] = base_64_encoding(word)\n        english_query = english_query.replace(word, base_64_encoding(word))\nprint(\"Masked Query: \", english_query)\n\nfor key, val in masked_element.items():\n    if val in english_query:\n        english_query = english_query.replace(val, key)\nprint(\"Unmasked English Query: \", english_query)\n```\n\nBelow is the output of above program:\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "A algorithm to track the status of a number\r\n                \r\nTo design a API, \n\n\n  \n  ```\nget()```\n, it will return the random number, also the number should not duplicate, means it always be unique.\n  ```\nput(randomvalue)```\n, it will put back the generated random number from ```\nget()```\n, if put back, ```\nget()```\n function can reuse this number as output.\n  \n\n\nIt has to be efficient, no too much resource is highly used. \n\nIs there any way to implement this algorithm? It is not recommended to use hashmap, because if this API generate for billions of requests, saving the generated the random number still use too much space. \n\nI could no work out this algorithm, please help give a clue, thanks in advance!\n    ", "Answer": "\r\nI cannot think of any solution without extra space. With space, one option could be to use TreeMap, firstly add all the elements in treeMap with as false. When element is accessed, mark as true. Similarly for put, change the value to false.\nCode snippet below...\n\n```\npublic class RandomNumber {\n\npublic static final int SIZE = 100000;\npublic static Random rand;\npublic static TreeMap<Integer, Boolean> treeMap;\n\npublic RandomNumber() {\n    rand = new Random();\n    treeMap = new TreeMap<>();\n}\n\nstatic public int getRandom() {\n    while (true) {\n        int random = rand.nextInt(SIZE);\n        if (!treeMap.get(random)) {\n            treeMap.put(random, true);\n            return random;\n        }\n    }\n}\n\nstatic public void putRandom(int number) {\n    treeMap.put(number, false);\n}\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Improve number compression algorithm?\r\n                \r\nI have many unique numbers, all positive and the order doesn't matter, ```\n0 < num < 2^32```\n.\nExample: ```\n23 56 24 26```\n\n\nThe biggest, ```\n56```\n, needs ```\n6 bits```\n space. So, I need: ```\n4*6 = 24 bits```\n in total.\n\nI do the following to save space:\nI sort them first: ```\n23 24 26 56```\n (because the order doesn't matter)\nNow I get the difference of each from the previous: ```\n23 1 2 30```\n\n\nThe biggest, ```\n30```\n, needs ```\n5 bits```\n space.\nAfter this I store all the numbers in ```\n4*5 bits = 20 bits```\n space.\n\nQuestion: how to further improve this algorithm?\n\nMore information: Since requested, the numbers are mostly on the range of ```\n2.000-4.000```\n. Numbers less than ```\n300```\n are pretty rare. Numbers more than ```\n16.000```\n are pretty rare also. Generally speaking, all the numbers will be close. For example, they may be all in the ```\n1.000-2.000```\n range or they may all be in the ```\n16.000-20.000```\n range. The total number of numbers will be something in the range of ```\n500-5.000```\n.\n    ", "Answer": "\r\nYour first step is good one to take because sorting reduces the differences to least. Here is a way to improve your algorithm: \n\n\nsort and calculate differences as you have done.\nUse Huffman coding on it.\n\n\nUse of Huffman coding is more important then your step; I'll show you why:\n\nconsider the following data: \n\n```\n1 2 3 4 5 6 7 4294967295\n```\n\n\nwhere 4294967295 = 2^32-1. Using your algorithm:\n\n```\n1 1 1 1 1 1 1 4294967288\n```\n\n\ntotal bits needed is still 32*8\n\nUsing Huffman coding, the frequencies are:\n\n```\n1 => 7\n4294967288 => 1\n```\n\n\nHuffman codes are ```\n1 => 0```\n and ```\n4294967288 => 1```\n\n\nTotal bits needed = 7*1 + 1 = 8 bits\n\nHuffman coding reduces size by 32*8/8 = 32 times\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Unique random number algorithm\r\n                \r\nI would like an algorithm/function that, given a number N, generates random numbers from 0 to N - 1 in constant time.  After the Nth call, the function may do as it pleases.  Also, it is important that the algorithm generates the numbers when requested rather than using shuffling, because I may (and in the average case do) not need the full list of numbers.  What is the best approach to take?\n\n(optional to read) I thought of having a hash set of numbers, and pulling the numbers out one at a time, but this would require inserting all elements (which I often do not need) into the hash set first... this will not work... Argh\n\nThanks for any help in advance.\n    ", "Answer": "\r\nModify the Fisher–Yates shuffle by replacing the array with a map that stores only the elements that have been moved. In Python:\n\n```\nimport random\nclass Shuffle:\n    def __init__(self, n):\n        self.d = {}\n        self.n = n\n    def generate(self):\n        i = random.randrange(self.n)\n        self.n -= 1\n        di = self.d[i] if i in self.d else i  # idiomatically, self.d.get(i, i)\n        dn = self.d[self.n] if self.n in self.d else self.n\n        self.d[i] = dn\n        self.d[self.n] = di\n        return di\n```\n\n\nThe space usage and amortized expected running time is O(1) words per element actually generated. Up to log factors, this is optimal.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How can I improve my Countdown Numbers Solver algorithm to find more solutions?\r\n                \r\nAs my school Project, I need to build a solver for Countdown Numbers & Letters rounds. I wanted to develop a structure which I can use to build both solvers, and I first developed a Numbers solver. However, before using this solution for Letters, I need to improve my current algorithm. I think I'm wrong somewhere, because I don't get the same results with other tools I am using to compare my program. Here is program for my solver;\n\n```\n/// numbers_game_solver.dart\n\nimport 'dart:collection';\n\nimport 'package:trotter/trotter.dart';\n\n/* Import statements was package-based, I turned them into relative paths for question. */\nimport 'number_generator.dart';\nimport 'operation.dart';\nimport 'solution.dart';\nimport 'solutions.dart';\n\n\n/* Will try to combine numbers with operations, as shown below;\n * List<List<Operation>> operations = <Operations>[a, ,b, ,c, ,d, ,e, ,f\n *                                                   +   -   +   *   /  ]\n * Then if last operations result is equal to target, will result it.\n * If not will show closest result.\n */\n\nconst List<String> kOperators = const <String>[kOpAdd, kOpDiv, kOpMul, kOpSub];\n\n\nclass NumbersGameSolver {\n  NumbersGameSolver()\n    : this.solutions = Solutions(_expectedResult);\n\n  /* TODO: Do tests with smaller numbers and targets. */\n  final List<int> _numbers = const <int>[1, 2, 3, 4]; // NumberGenerator.numbers;\n  static final int _expectedResult = 15; //NumberGenerator.expectedResult;\n\n  final Solutions solutions;\n\n  void solve() {\n    /* All permutations of operators with replacement, which will be inserted between numbers. */\n    final Set<List<String>> amalgamsOperators = Amalgams<String>(_numbers.length - 1, kOperators)().toSet();\n\n    /* There may duplicates occur in numbers list, because of this, numbers will be mapped\n      using permutations of indices. */\n    final List<int> indices = List<int>.generate(_numbers.length, (int index) => index);\n    final Iterable<List<int>> permutationsIndices = Permutations<int>(indices.length, indices)();\n    final Set<List<int>>\n        permutationsNumbers = permutationsIndices.map(\n                                (List<int> listPerm) => listPerm.map(\n                                  (int index) => _numbers[index]\n                                ).toList()\n                              ).toSet();\n\n\n    for (final List<int> numbers in permutationsNumbers) {\n      for (final List<String> operators in amalgamsOperators) {\n        Queue<int> stackNums = Queue<int>.from(numbers);    \n        Queue<String> stackOprts = Queue<String>.from(operators);\n\n        Solution tempSolution = Solution(_expectedResult);\n\n        do {\n          int left = stackNums.removeFirst(), right = stackNums.removeFirst();\n\n          Operation tempOperation = Operation(stackOprts.removeFirst(), left, right);\n\n          /* Record solutions current state. */\n          SolutionState solutionState = tempSolution.addOperation(tempOperation);\n\n          if (solutionState == SolutionState.currentlyValid) {\n            /* If valid, add result to the current numbers stack. */\n            stackNums.addFirst(tempOperation.result);\n          } else if (solutionState == SolutionState.lastOperationRedundant) {\n            /* If operation is redundant, dispose it and continue. */\n            continue;\n          } else if (solutionState == SolutionState.lastResultInvalid) {\n            /* If results is invalid at any stage, dispose whole solution. */\n            break;\n          }\n\n          if (solutions.addSolution(tempSolution) == true) break;\n        } while (stackNums.length > 1);\n      }\n    }\n\n    /* Will show only accurate solutions.\n     * If there is no accurate solutions, will show solutions which results\n     * are closest to the expected result.\n     */\n    solutions.showSolutions();\n  }\n}\n```\n\n\nThere are 5 classes, to shorten the question I added them in this Gist.\n\nMy algorithm is as follows;\n\n\n  \n  Rules for this Project are; program must randomly generate 5 single digit number and 1 two digit number where ```\ntwoDigitNumber % 10 == 0```\n and a three digit number as target.\n  I get permutations of 4 operators and numbers that will be used in operations (Using trotter package.)\n  For each permutation of numbers, I apply each permutation of operators; using ```\nOperation```\n class and add them into a ```\nSolution```\n instance for each permutation.\n  I pass some redundant operations in each iteration, and if there is an invalid result at any stage, I dispose that solution and continue. (I'm taking this DataGenetics blog about this topic as a reference.)  \n  \n\n\nTo test my algorithm I used numbers ```\n1, 2, 3, 4```\n and set target as ```\n15```\n. The results from dcode.fr Solver are as is;\n\n```\n15 (2 op.)\n    4 + 1 = 5\n    5 x 3 = 15\n\n15 (3 op.)\n    4 + 3 = 7\n    7 x 2 = 14\n    14 + 1 = 15\n\n15 (3 op.)\n    4 x 3 = 12\n    12 + 2 = 14\n    14 + 1 = 15\n\n15 (3 op.)\n    4 x 3 = 12\n    2 + 1 = 3\n    12 + 3 = 15\n\n15 (3 op.)\n    3 + 2 = 5\n    4 - 1 = 3\n    5 x 3 = 15\n\n15 (3 op.)\n    4 x 3 = 12\n    12 + 1 = 13\n    13 + 2 = 15\n\n15 (3 op.)\n    4 - 1 = 3\n    3 + 2 = 5\n    5 x 3 = 15\n\n15 (3 op.)\n    4 + 2 = 6\n    6 - 1 = 5\n    5 x 3 = 15\n\n15 (3 op.)\n    2 + 1 = 3\n    4 x 3 = 12\n    12 + 3 = 15\n\n15 (3 op.)\n    2 - 1 = 1\n    4 + 1 = 5\n    5 x 3 = 15\n\n(A total of 10 solutions.)\n```\n\n\nand the solutions my program found are as is;\n\n```\n> SOLUTION 1 ~\n    4 - 1 = 3\n    3 + 2 = 5\n    5 x 3 = 15\n\n> SOLUTION 2 ~\n    4 + 1 = 5\n    5 x 3 = 15\n\n(A total of 2 solutions.)\n```\n\n\n\n\nCan you tell me what am I thinking wrongly; Why can't I find all solutions? What are alternative approaches I can take to solve this problem? Is there anything I'm missing?\n\nTY for taking time.\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Sort numbers by sum algorithm\r\n                \r\nI have a language-agnostic question about an algorithm.\n\nThis comes from a (probably simple) programming challenge I read. The problem is, I'm too stupid to figure it out, and curious enough that it is bugging me.\n\nThe goal is to sort a list of integers to ascending order by swapping the positions of numbers in the list. Each time you swap two numbers, you have to add their sum to a running total. The challenge is to produce the sorted list with the smallest possible running total.\nExamples:\n\n```\n3 2 1 - 4\n1 8 9 7 6 - 41\n8 4 5 3 2 7 - 34\n```\n\n\nThough you are free to just give the answer if you want, if you'd rather offer a \"hint\" in the right direction (if such a thing is possible), I would prefer that.\n    ", "Answer": "\r\nOnly read the first two paragraph is you just want a hint. There is a an efficient solution to this (unless I made a mistake of course). First sort the list. Now we can write the original list as a list of products of disjoint cycles.\n\nFor example 5,3,4,2,1 has two cycles, (5,1) and (3,4,2). The cycle can be thought of as starting at 3, 4 is in 3's spot, 2 is in 4's spot, and 4 is in 3's. spot. The end goal is 1,2,3,4,5 or (1)(2)(3)(4)(5), five disjoint cycles.\n\nIf we switch two elements from different cycles, say 1 and 3 then we get: 5,1,4,2,3 and in cycle notation (1,5,3,4,2). The two cycles are joined into one cycle, this is the opposite of what we want to do.\n\nIf we switch two elements from the same cycle, say 3 and 4 then we get: 5,4,3,2,1 in cycle notation (5,1)(2,4)(3). The one cycle is split into two smaller cycles. This gets us closer to the goal of all cycles of length 1. Notice that any switch of two elements in the same cycle splits the cycle into two cycles.\n\nIf we can figure out the optimal algorithm for switching one cycle we can apply that for all cycles and get an optimal algorithm for the entire sort. One algorithm is to take the minimum element in the cycle and switch it with the the whose position it is in. So for (3,4,2) we would switch 2 with 4. This leaves us with a cycle of length 1 (the element just switched into the correct position) and a cycle of size one smaller than before. We can then apply the rule again. This algorithm switches the smallest element cycle length -1 times and every other element once.  \n\nTo transform a cycle of length n into cycles of length 1 takes n - 1 operations. Each element must be operated on at least once (think about each element to be sorted, it has to be moved to its correct position). The algorithm I proposed operates on each element once, which all algorithms must do, then every other operation was done on the minimal element. No algorithm can do better.\n\nThis algorithm takes O(n log n) to sort then O(n) to mess with cycles. Solving one cycle takes O(cycle length), the total length of all cycles is n so cost of the cycle operations is O(n). The final run time is O(n log n).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What counts as an operation in algorithms?\r\n                \r\nSo I've just started learning algorithms and data structures, and I've read about Big O and how it portrays complexity of algorithms based on how the number of operations required scales\nBut what actually counts as an operation? In this bubble sort, does each iteration of the ```\nfor```\n loop count as an operation, or only when an if statement is triggered, or all of them?\nAnd since there are so many different algorithms of all kinds, how do you immediately identify what would count as an \"operation\" happening in the algorithm's code?\n```\nfunction bubbleSort(array) {\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array.length; j++) {\n            if (array[j + 1] < array[j]) {\n                let tmp = array[j]\n                array[j] = array[j+1]\n                array[j+1] = tmp\n            }\n        }\n    }\n    return array\n}\n```\n\n    ", "Answer": "\r\nYou can count anything as an operation that will execute within a constant amount of time, independent of input. In other words, operations that have a constant time complexity.\nIf we assume your input consists of fixed-size integers (like 32-bit, 64 bit), then all of the following can be considered such elementary operations:\n```\ni++\nj < array.length\narray[j + 1] < array[j]\nlet tmp = array[j]\n...\n```\n\nBut that also means you can take several of such operations together and still consider them an elementary operation. So this is also an elementary operation:\n```\nif (array[j + 1] < array[j]) {\n    let tmp = array[j]\n    array[j] = array[j+1]\n    array[j+1] = tmp\n}\n```\n\nSo, don't concentrate on breaking down operations into smaller operations, and those again into even smaller operations, when you are already certain that the larger operation is O(1).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Greedy Algorithm Number List\r\n                \r\nI am working at c++ and I need to find a greedy algorithm that given an array of positive integers, determines which pairs of summed even equal numbers have to the right of the array some odd number greater than that sum. Returning all possibilities. I have thought about creating a list of pair numbers and its position, so I could go from this position to the end. But these substructure gives me the answer, so it's not a greedy algorithm, adding that it's criteria is not correct. Can someone help me?\n```\nExample:\n[4,5,9,4,0,11,6,6,8,8,91,73,7,69]\n\nOutput:\n[4,4,11,91,73,69]\n[6,6,91,73,69]\n[8,8,11,91,73,69]\n```\n\nThanks :)\n    ", "Answer": "\r\nThe solution is not very tidy. I hope someone can elaborate this, if need be.\nSuppose the largest number in the given array (call it A) is M. Create another array B[M+1][2] and init B[x][y]=-1. Traverse through A. If B[A[x]][0]==-1, make it x. If it is not -1 and B[A[x]][1]=-1, make B[A[x]][1] = x (Else, do not interfere). This way you can fill up B with the first two positions of every element x of A. This can be done in O(N).\n```\nRun a loop i through B : \n  if B[i][1] != -1 : \n    run a loop j though A from j=B[i][1]+1 :\n      print if A[j] > 2*i and A[j] is odd\n```\n\nThis second part can be done in O(N^2) which accounts to a total complexity (time) of O(N^2).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Building a number compression algorithm\r\n                \r\nI am trying to solve this problem:\nConsider a simple number compression algorithm that works as follows:\n```\n111155522500 -> [('1', 4), ('5', 3), ('2', 2), ('5', 1), ('O', 2)]\n```\n\nThe algorithm goes from left to right through each digit and returns a list of two-element tuples. Each tuple consists of a digit and the number of repetitions of a given\ndigit until the next, different digit in the number is encountered.\nImplement a function called compress () that compresses number as described above.\nExamples:\n```\n[IN]: compress(lll)\n[OUT]: [('l', 3)]\n[IN]: conpress(1000000)\n[OUT]: [('1', 1), ('O', 6)]\n[IN]: conpress(10005000)\n[OUT]: [('1', 1), ('O', 3), ('5', 1), ('O', 3)]\n```\n\nMy code:\n```\n#para funcionar, é e necessário acrescentar um caracter que não  existe ao final da string!\ndef compress(elemento):\n    elemento = str(elemento)\n    elemento = elemento +\"§\"# the code only works if I add some char not in the string\n    saida = []\n    #cont = 0\n    contagem = []\n    \n    for index,ele in enumerate(elemento):\n        ele = str(ele)\n        #print(f\"contagem: {contagem}\")\n        if len(contagem) == 0 or ele in contagem:\n            contagem.append(ele)\n       \n        if ele not in contagem :\n            saida.append((elemento[index-1],len(contagem)) )\n            contagem = []\n            contagem.append(ele)                      \n        \n    return saida\n\n\n\ncompress('1000500011')\n```\n\nOUT:\n```\n[('1', 1), ('0', 3), ('5', 1), ('0', 3), ('1', 2)]\n```\n\nThe problem: The code only works if I add some char not in the string as \"§\"\nCould someone help to solve this problem  using the itertools built-in module and the groupby and without this modules?\n    ", "Answer": "\r\nPretty straight forward with ```\nitertools```\n.\n```\ndef compress(number):\n    return [\n        (c, sum(1 for _ in g))\n        for c, g in itertools.groupby(str(number))\n    ]\n```\n\ndemo:\n```\n>>> compress(10005000)\n[('1', 1), ('0', 3), ('5', 1), ('0', 3)]\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Improve number compression algorithm?\r\n                \r\nI have many unique numbers, all positive and the order doesn't matter, ```\n0 < num < 2^32```\n.\nExample: ```\n23 56 24 26```\n\n\nThe biggest, ```\n56```\n, needs ```\n6 bits```\n space. So, I need: ```\n4*6 = 24 bits```\n in total.\n\nI do the following to save space:\nI sort them first: ```\n23 24 26 56```\n (because the order doesn't matter)\nNow I get the difference of each from the previous: ```\n23 1 2 30```\n\n\nThe biggest, ```\n30```\n, needs ```\n5 bits```\n space.\nAfter this I store all the numbers in ```\n4*5 bits = 20 bits```\n space.\n\nQuestion: how to further improve this algorithm?\n\nMore information: Since requested, the numbers are mostly on the range of ```\n2.000-4.000```\n. Numbers less than ```\n300```\n are pretty rare. Numbers more than ```\n16.000```\n are pretty rare also. Generally speaking, all the numbers will be close. For example, they may be all in the ```\n1.000-2.000```\n range or they may all be in the ```\n16.000-20.000```\n range. The total number of numbers will be something in the range of ```\n500-5.000```\n.\n    ", "Answer": "\r\nYour first step is good one to take because sorting reduces the differences to least. Here is a way to improve your algorithm: \n\n\nsort and calculate differences as you have done.\nUse Huffman coding on it.\n\n\nUse of Huffman coding is more important then your step; I'll show you why:\n\nconsider the following data: \n\n```\n1 2 3 4 5 6 7 4294967295\n```\n\n\nwhere 4294967295 = 2^32-1. Using your algorithm:\n\n```\n1 1 1 1 1 1 1 4294967288\n```\n\n\ntotal bits needed is still 32*8\n\nUsing Huffman coding, the frequencies are:\n\n```\n1 => 7\n4294967288 => 1\n```\n\n\nHuffman codes are ```\n1 => 0```\n and ```\n4294967288 => 1```\n\n\nTotal bits needed = 7*1 + 1 = 8 bits\n\nHuffman coding reduces size by 32*8/8 = 32 times\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "prime numbers algorithm efficiency\r\n                \r\nI have a question about prime numbers algorithm.\n\nwhy in the following pseudo code i increases by 6 and not by 2 every iteration?\n\n```\nfunction is_prime(n)\nif n ≤ 1\n    return false\nelse if n ≤ 3\n    return true\nelse if n mod 2 = 0 or n mod 3 = 0\n    return false\nlet i ← 5\nwhile i * i ≤ n\n    if n mod i = 0 or n mod (i + 2) = 0\n        return false\n    i ← i + 6\nreturn true\n```\n\n\nThanks!\n    ", "Answer": "\r\nIf it increased by 2 it would be testing almost everything twice, that wouldn't make any sense. So I assume you mean: how can it get away with not testing every odd number?\n\nThis is because every prime p greater than 3 is of the form 6n±1. Proof:\nConsider the remainder r = p mod 6. Obviously r must be odd. Notice also that r cannot be 3, because then p would be divisible by 3, making it not a prime. This leaves only the possibilities 1 and 5, which correspond p being of the form 6n+1 or the form 6n-1 respectively.\n\nThe effect is that it avoid testing multiples of 3. Dividing by a multiple of 3 is redundant, because we already know that ```\nn```\n is not a multiple of 3, so it cannot be the multiple of a multiple of 3 either.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Optimal algorithm for happy numbers\r\n                \r\nGiven number is n digits find 2n digits numbers \nthat, for example\n\ngiven number is 3 then 6n numbers are from 100000 -999999  \n\nthen find count of those numbers that for example \n\n```\n       123213\n1 + 2 + 3 = 2 + 1 + 3\n        6 = 6 \n```\n\n\nI found and wrote a program for calculating little numbers, but I need the fastest algorithm to find those numbers. Ideas?\n\nmy program :\n\n```\nScanner scan = new Scanner(System.in);\n\nSystem.out.println(\"enter  n \");\n\nint say = scan.nextInt();\n\nsay *= 2;\n\nint low = (int) Math.pow(10, say - 1);\nint max = (int) Math.pow(10, say) - 1;\n\nint counter = 0;\n\nint first = 0;\nint last = 0;\n\nfor (int i = low; i <= max; i++) {\n\n    int number = i;\n    first = 0;\n    last = 0;\n\n    for (int j = 0; j < say / 2; j++) {\n\n        int k = number % 10;\n        first += k;\n        number /= 10;\n    }\n\n    for (int j = 0; j < say / 2; j++) {\n\n        int k = number % 10;\n        last += k;\n        number /= 10;\n    }\n\n    if (first == last) {\n        //  System.out.println(i);\n        counter++;\n    }\n}\nSystem.out.println(counter);\n```\n\n    ", "Answer": "\r\nThe numbers are called lucky tickets in Russian (a link to ru.wikipedia.org). Yet, I don't seem to find a good explanation in English besides these slides.\n\nBasically, let us say we have ```\n2n```\n digits, and we want the sum of first ```\nn```\n be equal to the sum of last ```\nn```\n. We first count ```\nc(d,s)```\n: the number of sequences of ```\nd```\n digits which have sum ```\ns```\n. Here, ```\n0 <= d <= n```\n and ```\n0 <= s <= 9n```\n. This can be done by dynamic programming: ```\nc(0,0)=1```\n, and for ```\nd > 0```\n, ```\nc(d,s) = c(d-1,s-0) + c(d-1,s-1) + c(d-1,s-2) + ... + c(d-1,s-9)```\n since we can take any sequence of ```\nd-1```\n digits and write another digit from ```\n0```\n to ```\n9```\n.\n\nNow, the total number of lucky tickets is the sum for different ```\ns```\n of the numbers of lucky tickets where the sum of the first ```\nn```\n digits is ```\ns```\n and the sum of the last ```\nn```\n digits is ```\ns```\n. When ```\ns```\n is fixed, this number is equal to ```\nc(n,s) * c(n,s)```\n: there are exactly ```\nc(n,s)```\n ways to choose the first half, and equally many to choose the second one.\n\nThus the answer is ```\nsum[s=0..9n] c(n,s)^2```\n.\n\nThere are other solutions as well involving advanced maths, but for a programmer's assignment, this would suffice. Once again, I can't find a proper source in English — sorry! Here are a few popular articles in Russian, for what it's worth.\n\nEdit: If you in fact need to account for numbers 100000 to 999999, not 000000 to 999999, a patch would be to calculate ```\nsum[s=0..9n] (c'(n,s) * c(n,s))```\n, where ```\nc'(n,s)```\n is the same table but calculated with disabled addition of zero digit when adding the first digit.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Count number of operations in algorithm\r\n                \r\nI have to count exact number of operations that algorithm performs:\n\n```\ncount = 0\nfor( i=0 ; i<=10 ; i++ ) \n    for( i=0 ; i<=10 ; i++ ) \n            count += (i + 10) / 2\n```\n\n\nI understand that its complexity is ```\nO(1)```\n. Exact number of CPU operations equals to:\n```\n10 * 10 (outer and inner cycle)  + 100 (s += i + 10) + 100 (sum/2) + 1 (declaration of count variable)```\n? Or I am wrong? \n\nHow can I count them?\n    ", "Answer": "\r\nUm... Did you deliberately use ```\ni```\n for both loops?  (making the outer loop pointless)?\n\nAssuming you meant to use different variables:\n\n\nin the first ```\nfor()```\n loop, we have one assignment, 11 comparisons and 11 increments (and yes, 0 to 10 is 11)  For a total of 23 \"operations\".\nIn the second ```\nfor()```\n loop, we have the same 23 operation, performed 11 times each, for 253 operations.\nin the body, we have two addition, a divison and an assignment, for 4 operation repeated 121 times, for a total of 484.\n\n23 + 253 + 484 = 760 \"operations\".\n\n\nUPDATE:\n Now, working with the idea the using the same variable was intentional:\n\n\nin the first ```\nfor()```\n loop, we have one assignment, one comparison and one increment, for a total of 3 \"operations\".\nIn the second ```\nfor()```\n loop, we have the same 23 operation (see above), performed once.\nin the body, we have two addition, a divison and an assignment, for 4 operation repeated 11 times, for a total of 44.\n\n3 + 23 + 44 = 70\n\n\nNote, however, all operations are not equal.  A divison will take much longer than an increment.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Array with Consecutive numbers - Algorithm\r\n                \r\nI am trying to answer the following question: given a sorted array with some sequenced numbers and some non-sequenced numbers, write an algorithm that obtains a pair {start, end} for each group of consecutive numbers. Consecutive numbers have difference of 1 only.\n\nSo far, I can think of the brute force method only:\n\n```\npublic static void main(String[] args) {\n    int[] array = { 4, 5, 6, 7, 8, 9, 12, 15, 16, 17, 18, 20, 22, 23, 24, 27 };\n    Map<Integer, Integer> list = new HashMap<Integer, Integer>();\n\n    list = findIndex(array);\n}\n\n// Bruteforce\nprivate static Map<Integer, Integer> findIndex(int[] array) {\n    Map<Integer, Integer> list = new HashMap<Integer, Integer>();\n\n    int x = -1, y = -1;\n\n    int end = array.length;\n    for (int i = 0; i < end; i++) {\n        x = i;\n        while (i < end - 1) {\n\n            if (array[i] + 1 == array[i + 1]) {\n                i++;\n                y = i;\n            } else {\n                if (x != y && x >= 0) {\n                    list.put(x, y);\n                    System.out.println(\"i = \" + x + \" to j = \" + y);\n                    i = i + 1;\n                    break;\n                }\n            }\n        }\n\n    }\n    return list;\n}\n```\n\n\nOutput :\n\n```\ni = 0 to j = 5\ni = 7 to j = 10\ni = 12 to j = 14\n```\n\n\nIt works fine, but how do I improve time complexity?\n    ", "Answer": "\r\nYou don't need to nest loops for this:\n\n```\nint end = array.length;\nif (end > 0) {\n    int start = 0;\n    for (int i = 1; i < end; i++) {\n        if (array[i] != array[i - 1] + 1) {\n            if (i - start > 1) {\n                list.put(start, i - 1);\n                System.out.println(\"i = \" + start + \" to j = \" + (i - 1));\n            }\n            start = i;\n        } \n    }\n    if (end - start > 1) {\n        list.put(start, end - 1);\n        System.out.println(\"i = \" + start + \" to j = \" + (end - 1));\n    }\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Separating numbers and alphabets in an array [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Separate the alphabet and digit such that their relative order remains the same in O(n) time and O(1) space\r\n                            \r\n                                (2 answers)\r\n                            \r\n                    \r\n                    \r\n                        Stable separation for two classes of elements in an array\r\n                            \r\n                                (3 answers)\r\n                            \r\n                    \r\n                Closed 9 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\n\n  Given an array that contains alphabets and numbers, provide an algorithm to move the numbers to the front of the array and alphabets to the end of the array without changing their order in the given array.\n  \n  Expected Space complexity: In place\n  Expected Time complexity: O(n)\n  \n  E.g:\n\n```\nInput:\n{1,2,a,3,b,c,4,d,5,e}\n\nOutput:\n{1,2,3,4,5,a,b,c,d,e}\n```\n\n\n\nI came across this question in a website and couldn't figure out an algorithm that satisfies the space and time requirements. Can anyone please tell if it is possible to solve it inplace in O(n) time with the algorithm?\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for grouping consecutive numbers\r\n                \r\nI am trying to build an efficient algorithm that can process thousands of rows of data that contains zip codes of customers. I would then want to cross check those zip codes against a grouping of around 1000 zip codes, but I have about 100 columns of 1000 zip codes. A lot of these zip codes are consecutive numbers, but there is also a lot of random zip codes thrown in there. So what I would like to do is group consecutive zip codes together that I can then just check to see if the zip code falls within that range instead of checking it against every single zip code.\n\nSample data -\n\n```\n90001\n90002\n90003\n90004\n90005\n90006\n90007\n90008\n90009\n90010\n90012\n90022\n90031\n90032\n90033\n90034\n90041\n```\n\n\nThis should be grouped as follows:\n\n```\n{ 90001-90010, 90012, 90022, 90031-90034, 90041 }\n```\n\n\nHere's my idea for the algorithm:\n\n```\npublic struct gRange {\n   public int start, end;\n\n   public gRange(int a, int b) {\n      start = a;\n      if(b != null) end = b;\n      else end = a;\n   }\n}\n\nfunction groupZips(string[] zips){\n    List<gRange> zipList = new List<gRange>();\n    int currZip, prevZip, startRange, endRange;\n    startRange = 0;\n\n    bool inRange = false;\n\n    for(int i = 1; i < zips.length; i++) {\n        currZip = Convert.ToInt32(zips[i]);\n        prevZip = Convert.ToInt32(zips[i-1]);\n\n        if(currZip - prevZip == 1 && inRange == false) {\n            inRange = true;\n            startRange = prevZip;\n            continue;\n        }\n        else if(currZip - prevZip == 1 && inRange == true) continue;\n        else if(currZip - prevZip != 1 && inRange == true) {\n            inRange = false;\n            endRange = prevZip;\n            zipList.add(new gRange(startRange, endRange));\n            continue;\n        }\n        else if(currZip - prevZip != 1 && inRange == false) {\n            zipList.add(new gRange(prevZip, prevZip));\n        }\n        //not sure how to handle the last case when i == zips.length-1\n    }\n}\n```\n\n\nSo as of now, I am unsure of how to handle the last case, but looking at this algorithm, it doesn't strike me as efficient. Is there a better/easier way to be sorting a group of numbers like this?\n    ", "Answer": "\r\nHere is a ```\nO(n)```\n solution even if your zip codes are not guaranteed to be in order.\n\nIf you need the output groupings to be sorted, you can't do any better than ```\nO(n*log(n))```\n because somewhere you'll have to sort something, but if grouping the zip codes is your only concern and sorting the groups isn't required then I'd use an algorithm like this.  It makes good use of a ```\nHashSet```\n, a Dictionary, and a DoublyLinkedList.  To my knowledge this algorithm is ```\nO(n)```\n, because I believe that a ```\nHashSet.Add()```\n and ```\nHashSet.Contains()```\n are performed in constant time.\n\nHere is a working dotnetfiddle\n\n```\n// I'm assuming zipcodes are ints... convert if desired\n// jumbled up your sample data to show that the code would still work\nvar zipcodes = new List<int>\n{\n    90012,\n    90033,\n    90009,\n    90001,\n    90005,\n    90004,\n    90041,\n    90008,\n    90007,\n    90031,\n    90010,\n    90002,\n    90003,\n    90034,\n    90032,\n    90006,\n    90022,\n};\n\n// facilitate constant-time lookups of whether zipcodes are in your set\nvar zipHashSet = new HashSet<int>();\n\n// lookup zipcode -> linked list node to remove item in constant time from the linked list\nvar nodeDictionary = new Dictionary<int, DoublyLinkedListNode<int>>();\n\n// linked list for iterating and grouping your zip codes in linear time\nvar zipLinkedList = new DoublyLinkedList<int>();\n\n// initialize our datastructures from the initial list\nforeach (int zipcode in zipcodes)\n{\n    zipLinkedList.Add(zipcode);\n    zipHashSet.Add(zipcode);\n    nodeDictionary[zipcode] = zipLinkedList.Last;\n}\n\n// object to store the groupings (ex: \"90001-90010\", \"90022\")\nvar groupings = new HashSet<string>();\n\n// iterate through the linked list, but skip nodes if we group it with a zip code\n// that we found on a previous iteration of the loop\nvar node = zipLinkedList.First;\nwhile (node != null)\n{\n    var bottomZipCode = node.Element;\n    var topZipCode = bottomZipCode;\n\n    // find the lowest zip code in this group\n    while (zipHashSet.Contains(bottomZipCode - 1))\n    {\n        var nodeToDel = nodeDictionary[bottomZipCode - 1];\n\n        // delete node from linked list so we don't observe any node more than once\n        if (nodeToDel.Previous != null)\n        {\n            nodeToDel.Previous.Next = nodeToDel.Next;\n        }\n        if (nodeToDel.Next != null)\n        {\n            nodeToDel.Next.Previous = nodeToDel.Previous;\n        }\n        // see if previous zip code is in our group, too\n        bottomZipCode--;\n    }\n    // get string version zip code bottom of the range\n    var bottom = bottomZipCode.ToString();\n\n    // find the highest zip code in this group\n    while (zipHashSet.Contains(topZipCode + 1))\n    {\n        var nodeToDel = nodeDictionary[topZipCode + 1];\n\n        // delete node from linked list so we don't observe any node more than once\n        if (nodeToDel.Previous != null)\n        {\n            nodeToDel.Previous.Next = nodeToDel.Next;\n        }\n        if (nodeToDel.Next != null)\n        {\n            nodeToDel.Next.Previous = nodeToDel.Previous;\n        }\n\n        // see if next zip code is in our group, too\n        topZipCode++;\n    }\n\n    // get string version zip code top of the range\n    var top = topZipCode.ToString();\n\n    // add grouping in correct format\n    if (top == bottom)\n    {\n        groupings.Add(bottom);\n    }\n    else\n    {\n        groupings.Add(bottom + \"-\" + top);\n    }\n\n    // onward!\n    node = node.Next;\n}\n\n\n// print results\nforeach (var grouping in groupings)\n{\n    Console.WriteLine(grouping);\n}\n```\n\n\n** a small refactoring of the common linked list node deletion logic is in order\n\nIf Sorting is Required\n\nA ```\nO(n*log(n))```\n algorithm is much simpler, because once you sort your input list the groups can be formed in one iteration of the list with no additional data structures.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Compute average for numbers from a to b using repetition\r\n                \r\nI am new to programming and i am currently learning algorithms and flowcharts. \n\nI know how to write an algorithm for finding the inclusive sum between two integers with incrementation, but how can you calculate the average between two integers (input by user). \n\nSo  for example, if you have input a= 3 and b=6, the algorithm should increment a until a<=b and output avg=(3+4+5+6)/4. \n\nBut how do you write the division number / how would the program know with what number to divide the sum?\n    ", "Answer": "\r\n\nGet numbers ```\na```\n and ```\nb```\n from user.\nIf ```\na > b```\n, swap them.\nCreate a counter, ```\nc```\n, and initialise it to zero.\nCreate a sum variable, ```\ns```\n, and initialise that to zero.\nLoop from ```\na```\n to ```\nb```\n, counting the number of loop iterations while summing up the integers that you loop through. This means adding 1 to ```\nc```\n and adding the integer that you're currently at to ```\ns```\n, in each iteration.\nOutput the sum ```\ns```\n divided by the counter ```\nc```\n.\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to partition a number\r\n                \r\nGiven a positive integer ```\nX```\n, how can one partition it into ```\nN```\n parts, each between ```\nA```\n and ```\nB```\n where ```\nA <= B```\n are also positive integers? That is, write \n\n```\nX = X_1 + X_2 + ... + X_N\n```\n\n\nwhere ```\nA <= X_i <= B```\n and the order of the ```\nX_i```\ns doesn't matter?\n    ", "Answer": "\r\nIf you want to know the number of ways to do this, then you can use generating functions.\n\nEssentially, you are interested in integer partitions. An integer partition of ```\nX```\n is a way to write ```\nX```\n as a sum of positive integers. Let ```\np(n)```\n be the number of integer partitions of ```\nn```\n. For example, if ```\nn=5```\n then ```\np(n)=7```\n corresponding to the partitions:\n\n```\n5\n4,1\n3,2\n3,1,1\n2,2,1\n2,1,1,1\n1,1,1,1,1\n```\n\n\nThe the generating function for ```\np(n)```\n is\n\n```\nsum_{n >= 0} p(n) z^n = Prod_{i >= 1} ( 1 / (1 - z^i) )\n```\n\n\nWhat does this do for you? By expanding the right hand side and taking the coefficient of ```\nz^n```\n you can recover ```\np(n)```\n. Don't worry that the product is infinite since you'll only ever be taking finitely many terms to compute ```\np(n)```\n. In fact, if that's all you want, then just truncate the product and stop at ```\ni=n```\n.\n\nWhy does this work? Remember that\n\n```\n1 / (1 - z^i) = 1 + z^i + z^{2i} + z^{3i} + ...\n```\n\n\nSo the coefficient of ```\nz^n```\n is the number of ways to write\n\nn = 1*a_1 + 2*a_2 + 3*a_3 +...\n\nwhere now I'm thinking of ```\na_i```\n as the number of times ```\ni```\n appears in the partition of ```\nn```\n.\n\nHow does this generalize? Easily, as it turns out. From the description above, if you only want the parts of the partition to be in a given set ```\nA```\n, then instead of taking the product over all ```\ni >= 1```\n, take the product over only ```\ni in A```\n. Let ```\np_A(n)```\n be the number of integer partitions of ```\nn```\n whose parts come from the set ```\nA```\n. Then\n\n```\nsum_{n >= 0} p_A(n) z^n = Prod_{i in A} ( 1 / (1 - z^i) )\n```\n\n\nAgain, taking the coefficient of ```\nz^n```\n in this expansion solves your problem. But we can go further and track the number of parts of the partition. To do this, add in another place holder ```\nq```\n to keep track of how many parts we're using. Let ```\np_A(n,k)```\n be the number of integer partitions of ```\nn```\n into ```\nk```\n parts where the parts come from the set ```\nA```\n. Then\n\n```\nsum_{n >= 0} sum_{k >= 0} p_A(n,k) q^k z^n = Prod_{i in A} ( 1 / (1 - q*z^i) )\n```\n\n\nso taking the coefficient of ```\nq^k z^n```\n gives the number of integer partitions of ```\nn```\n into ```\nk```\n parts where the parts come from the set ```\nA```\n.\n\nHow can you code this? The generating function approach actually gives you an algorithm for generating all of the solutions to the problem as well as a way to uniformly sample from the set of solutions. Once ```\nn```\n and ```\nk```\n are chosen, the product on the right is finite.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for subtraction of binary numbers\r\n                \r\nI am doing a project in C++ and I'm having hard time with substraction of binary numbers. It's easy doing it on paper but in code it's a bit hard for me. \nCan someone please give me the algorithm for the subtraction of two binary numbers? It's supposed to be done WITHOUT conversion to the decimal system.\nThanks!\n    ", "Answer": "\r\n```\nint subtractBinaries(int x, int y) {\n    while (y != 0) {\n        int borrow = (~x) & y;\n        x = x ^ y;\n        y = borrow << 1;\n    }\n    return x;\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Collect Lowest Numbers Algorithm\r\n                \r\nI'm looking for an algorithm (or PHP code, I suppose) to end up with the 10 lowest numbers from a group of numbers. I was thinking of making a ten item array, checking to see if the current number is lower than one of the numbers in the array, and if so, finding the highest number in the array and replacing it with the current number. \n\nHowever, I'm planning on finding the lowest 10 numbers from thousands, and was thinking there might be a faster way to do it. I plan on implementing this in PHP, so any native PHP functions are usable.\n    ", "Answer": "\r\nSort the array and use the ten first/last entries.\n\nHonestly: sorting an array with a thousand entries costs less time than it takes you to blink.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for dividing very large numbers\r\n                \r\nI need to write an algorithm(I cannot use any 3rd party library, because this is an assignment) to divide(integer division, floating parts are not important) very large numbers  like 100 - 1000 digits. I found http://en.wikipedia.org/wiki/Fourier_division algorithm but I don't know if it's the right way to go. Do you have any suggestions?\n\n```\n1) check divisior < dividend, otherwise it's zero (because it will be an int division)\n2) start from the left\n3) get equal portion of digits from the dividend\n4) if it's divisor portion is still bigger, increment digits of dividend portion by 1\n5) multiply divisor by 1-9 through the loop\n6) when it exceeds the dividend portion, previous multiplier is the answer\n7) repeat steps 3 to 5 until reaching to the end\n```\n\n    ", "Answer": "\r\nI'd imagine that dividing the 'long' way like in grade school would be a potential route. I'm assuming you are receiving the original number as a string, so what you do is parse each digit. Example:\n\nStep 0:\n\n```\n   /-----------------\n13 | 453453453435....\n```\n\n\nStep 1: \"How many times does 13 go into 4? 0\n\n```\n     0\n   /-----------------\n13 | 453453453435....\n```\n\n\nStep 2: \"How many times does 13 go into 45? 3\n\n```\n     03\n   /-----------------\n13 | 453453453435....\n   - 39\n     --\n      6\n```\n\n\nStep 3: \"How many times does 13 go into 63? 4\n\netc etc. With this strategy, you can have any number length and only really have to hold enough digits in memory for an int (divisor) and double (dividend). (Assuming I got those terms right). You store the result as the last digit in your result string.\n\nWhen you hit a point where no digits remain and the calculation wont go in 1 or more times, you return your result, which is already formatted as a string (because it could be potentially larger than an int).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to count natural numbers\r\n                \r\nI am creating an algorithm to count natural numbers however the output is a long number:\n```\n1532752%  \n```\n\nHere is what I have tried:\n```\n#include <stdio.h>\n#include <stdlib.h>\n\nint sumN(int N){\n    int S = 0;\n    int I = 1;\n    int *p = &I;\n    for(int i = *p; i < N; i++){\n        S += S + i;\n        I += i + 1;\n\n        if( i <= N){\n            continue;\n        }\n    }\n    return S;\n}\n\nint main(void){\n    int N = 15;\n    printf(\"%i\", sumN(N));\n    return EXIT_SUCCESS;\n}\n```\n\nI am new to C and would appreciate feedback because I am likely missing much technical information.\n    ", "Answer": "\r\nSimple version\n```\n int sum =0;\n For (int i =1; i<=N; i++){\n     sum += i;\n  }\n```\n\nThis ignores the even simpler n*(n+1)/2 formula\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How accurate is Google's libphonenumber?\r\n                \r\nI'm wanting to incorporate Google's libphonenumber library into a CRM solution that I'm working on, to identify things such as:\n\n\nWhether a phone number is mobile or landline\nGeo-location of the number\n\n\nI've done some searching online, and can't seem to find anything discussing what algorithms the library is using to determine this information, and how reliable those methods are.\n\nIs there any such documentation (ie, details of the these algorithms and their respective reliability)? Or really, anything to help me understand what happens under-the-covers for this library?\n    ", "Answer": "\r\nIt's an Open Source library, so you can see exactly how it works :)\n\n```\nsvn checkout http://code.google.com/p/libphonenumber/source/checkout\n```\n\n\nI've had a quick look at the source, and it seems to work by testing the phone number with a series of regular expressions. Big regex files are defined for various countries, which define the regular expressions that will tell you the type of phone number (for example, in the UK, all mobiles start with \"07\", so there will be a regex based on that).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Better algorithm on prime numbers\r\n                \r\nI'm working on a program which will found the ```\nn```\nth. prime number. For example, By listing the first six prime numbers: ```\n2, 3, 5, 7, 11```\n and ```\n13```\n, we can see that the 6th prime is ```\n13```\n. I'm trying to making an algorithm, like, if I want to see 50th prime, I will add ```\n1```\n to ends of the ```\nrange()```\n function. I'm using this algorithm to find primes at the moment;\n\n```\ncnt = 1\nprint (2)\nfor x in range(3,40,2):\n    div = False\n    for y in range(2,round(x**0.5)+1):\n        if x%y == 0:\n            div = True\n    if div == False:\n        print (x)\n        cnt += 1\n\nprint (\"\\nThere is {} prime numbers.\".format(cnt))\n```\n\n\nYou see that, I put ```\n40```\n. But I want to put ```\nn```\n there, so for example, untill reaching the 50th prime, add +1 to ```\nn```\n. But it's not going to like that, if I tried something like;\n\n```\ncnt = 1\nn = 40 #example\nwhile cnt<50:\n    for x in range(3,n,2):\n        #codes\n    if div == False:\n        n += 1\n```\n\n\nI thought when the program finds a prime, it will add +1 to ```\nn```\n and ```\nwhile```\n loop will process untill find the 50th prime. But it didn't, primes are wrong if I use this one also, nothing relevant what I want to do.\n\n\nHow to make this algorithm, obviously changing the last element of ```\nrange()```\n function does not working.\nIs there better/elegant algorithm/way? If I want to find ```\n200.000th```\n prime, I need faster codes. \n\n\nEdit: I was working with lists first but, I got MemoryError all the time when working with big numbers. So I pass that and using a variable that counting how much primes are there ```\ncnt```\n.\n    ", "Answer": "\r\nHere is a much faster version\n\n```\nprimes = []\nprimecount = 0\n\ncandidate = 2\nwhile primecount<50:\n    is_prime = True\n    for prime in primes:\n        if candidate%prime == 0:\n            is_prime = False\n            break\n        elif candidate < prime**2:\n            break\n    if is_prime:\n        primes.append(candidate)\n        primecount += 1\n\n    candidate += 1\nprint primes[-1]\n```\n\n\nnote small edit adding the ```\ncandidate<prime**2```\n test that OP included but I neglected initially.\n\nYour code is going to be very slow for several reasons.  If 2 divides a number you know it's not prime, but you're still checking whether 3 or 4 or 5... divides it.  So you can break out as soon as you know it's not prime.  Another major issue is that if 2 does not divide a number, there's no reason to check if 4 divides it as well.  So you can restrict your attention to just checking if the primes coming before it divide it.\n\nIn terms of run time:\n\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Get missing number from array with an efficient algorithm?‽? [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Quickest way to find missing number in an array of numbers\r\n                            \r\n                                (31 answers)\r\n                            \r\n                    \r\n                Closed 3 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI am doing the following programming exercise: Number Zoo Patrol. The statement is:\n\n\n  Background:\n  \n  You're working in a number zoo, and it seems that one of the numbers\n  has gone missing!\n  \n  Zoo workers have no idea what number is missing, and are too\n  incompetent to figure it out, so they're hiring you to do it for them.\n  \n  In case the zoo loses another number, they want your program to work\n  regardless of how many numbers there are in total. Task:\n  \n  Write a function that takes a shuffled array of unique numbers from 1\n  to n with one element missing (which can be any number including n).\n  Return this missing number. Examples:\n  \n  findNumber([1, 3, 4]) should be 2 findNumber([1, 2, 3]) should be 4\n  findNumber([4, 2, 3]) should be 1\n\n\nI have difficulties because of it is the first exercise where the time complexity is being tested. There is a test which checks that your algorithm executes in less than one second for huge arrays. The following is the test I am writting about:\n\n```\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.Timeout;\n\npublic class NumberZooPatrolSampleTest {\n\n    @Rule\n    public Timeout globalTimeout = new Timeout(1, TimeUnit.SECONDS);\n\n    @Test\n    public void testDescriptionExamples() {\n        assertEquals(2, findMissingNumber(1, 3));\n        assertEquals(1, findMissingNumber(2, 3, 4));\n        assertEquals(12, findMissingNumber(13, 11, 10, 3, 2, 1, 4, 5, 6, 9, 7, 8));\n    }\n\n    @Test\n    public void testPerformanceIsLinear() {\n        // Solutions with linear runtime should finish in about 200 to 300 ms.\n        // 1. Generate an array with 999,999 numbers with increasing and\n        //    decreasing values interleaved so sorting algorithms which\n        //    are able detect pre-sorted arrays would still need\n        //    at least loglinear time.\n        // 2. Find the missing number 100 times.\n        int[] numbers = generateNumbers(1_000_000, 66_667);\n        for (int i = 0; i < 249_999; i++) {\n            int temp = numbers[i * 2];\n            numbers[i * 2] = numbers[999_997 - i * 2];\n            numbers[999_997 - i * 2] = temp;\n        }\n        for (int i = 0; i < 100; i++)\n            findMissingNumber(numbers.clone());\n    }\n\n    private static int findMissingNumber(int ... numbers) {\n        return NumberZooPatrol.findMissingNumber(numbers);\n    }\n\n    private static int[] generateNumbers(int bound, int missingNumber) {\n        if (missingNumber < 1 || missingNumber > bound)\n            throw new IllegalArgumentException(\"Missing number is not in allowed range\");\n        int[] numbers = new int[bound - 1];\n        int pos = 0;\n        for (int i = 1; i <= bound; i++)\n            if (i != missingNumber)\n                numbers[pos++] = i;\n        return numbers;\n    }\n\n}\n```\n\n\nMy first aproach was to compare number by number in the array with the one there should be in that position:\n\n```\nimport java.util.*;\nimport java.util.stream.*;\npublic class NumberZooPatrol {\n  public static int findMissingNumber(int[] numbers) {\n    int[] clone = numbers.clone();\n    Arrays.sort(clone);\n    int i = 0;\n    for(; i < clone.length; i++){\n      if(clone[i] != i+1){\n        break;\n      }\n    }\n    return i+1;\n  }\n}\n```\n\n\nHowever it does not pass the time complexity test.\n\nBesides I used another approach where we get the difference between the sum of the range and the current array sum:\n\n```\nimport java.util.*;\nimport java.util.stream.*;\npublic class NumberZooPatrol {\n  public static int findMissingNumber(int[] numbers) {\n    if(numbers.length == 0) return 1;\n    int[] clone = numbers.clone();\n    Arrays.sort(clone);\n    int range = IntStream.rangeClosed(1,clone[clone.length-1]).sum();\n    int sum = IntStream.of(clone).sum();\n    return range - sum == 0 ? clone.length + 1 : range - sum;\n  }\n}\n```\n\n\nAnd it also times out when we execute the time complexity test.\n\nIn addition I have read:\n\n\nHow can I generate a list or array of sequential integers in Java?\nHow to sum a list of integers with java streams?\nMake copy of an array\n\n\nHow could we get the missing number from array with an efficient algorithm?‽?\n    ", "Answer": "\r\nYou can do it in O(n) time complexity using two approaches:\n\n\nYou can find the sum of numbers using n(n+1)/2 formula and subtract the actual sum to get the missing number.\nYou can also XOR all the numbers in the range 1 to n and also the numbers in the input. The result will be the missing number. This works because, XOR of a number with itself is zero and 0 XOR any number is the number itself.\n\n\neg:\nIf input is [1, 3, 4] and missing number is 2.\n\n```\n(1 XOR 2 XOR 3 XOR 4) XOR (1 XOR 3 XOR 4) = \n(1 XOR 1) XOR (3 XOR 3) XOR (4 XOR 4) XOR 2 =\n0 XOR 0 XOR 0 XOR 2 = \n0 XOR 2 =\n2\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Run two <algorithm>s side by side on the same input iterator range\r\n                \r\nIf I want to calculate the sum of a bunch of numbers retrieved from an ```\nstd::istream```\n, I can do the following:\n\n```\n// std::istream & is = ...\nint total = std::accumulate(std::istream_iterator<int>(is),\n                            std::istream_iterator<int>(),\n                            0);\n```\n\n\nHowever, if I want to calculate their average, I need to accumulate two different results:\n\n\nthe total sum (```\nstd::accumulate```\n)\nthe total count (```\nstd::distance```\n)\n\n\nIs there any way to \"merge\" these two algorithms and run them \"side by side\" in a single pass of an iterator range? I would like to do something like:\n\n```\nusing std::placeholders;\nint total, count;\nstd::tie(total, count) = merge_somehow(std::istream_iterator<int>(is),\n                                       std::istream_iterator<int>(),\n                                       std::bind(std::accumulate, _1, _2, 0),\n                                       std::distance);\ndouble average = (double)total / count;\n```\n\n\nIs this possible?\n    ", "Answer": "\r\nA ready-made solution for this sort of single-pass accumulation is implemented by Boost.Accumulators. You make a single accumulator, say for sum, count and average, populate it, and then extract all three results at the end.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "heterogeneous data logging and analysis\r\n                \r\nI'm using python to prototype the algorithms of a computer vision system I'm creating. I would like to be able to easily log heterogeneous data, for example: images, numpy arrays, matplotlib plots, etc, from within the algorithms, and do that using two keys, one for the current frame number and another to describe the logged object. Then I would like to be able to browse all the data from a web browser. Finally, I would like to be able to easily process the logs to generate summaries, for example retrieve the key \"points\" for all the frame numbers and calculate some statistics on them. My intention is to use this logging subsystem to facilitate debugging the behaviour of the algorithms and produce summaries for benchmarking. \n\nI'm set to create this subsystem myself but I thought to ask first if someone has already done something similar. Does anybody know of any python package that I can use to do what I ask?\notherwise, does anybody have any advice on which tools to use to create this myself?\n    ", "Answer": "\r\nAnother option for storage could be using hdf5 or pytables. Depending on how you structure the data, with pytables you can query the data at key \"points\". As noted in comments, I dont think an off the shelf solution exists.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for random numbers generation\r\n                \r\nI don't know which algorithm should I use. If it's necessary the platform is ```\nNode.js```\n. \n\n```\nVolume = 100; Range = 5...15; N = 10.\n```\n\n\nI need to generate ```\nN```\n numbers from Range that in sum will give Volume. What is the best way to do it?\n    ", "Answer": "\r\nHere's a quick, naive implementation.\n\nThere might be a numerical trick that allows making this faster, but this works. :)\n\nNote that it's of course possible to pass in a combination of parameters that makes this function never complete, but for ```\ntotal = 100, min = 5, max = 15, n = 10```\n it does find solutions, e.g.\n\n```\n[ 14, 5, 11, 6, 10, 13, 9, 13, 14, 5 ]\n[ 15, 13, 14, 10, 9, 8, 10, 8, 6, 7 ]\n[ 8, 11, 11, 9, 12, 15, 5, 9, 6, 14 ]\n[ 9, 12, 11, 6, 14, 12, 10, 7, 11, 8 ]\n[ 9, 8, 9, 10, 11, 10, 12, 7, 14, 10 ]\n[ 9, 9, 5, 14, 10, 13, 11, 13, 9, 7 ]\n```\n\n\n\n\n```\nfunction generateNumbers(total, min, max, n) {\n  while (true) {\n    const numbers = [];\n    let sum = 0;\n    while (true) {\n      let num;\n      if (numbers.length === n - 1) {\n        // Fill in the last number with the remainder to satisfy the problem\n        num = total - sum;\n        if (num < min || num === 0 || num > max) {\n          // Out of bounds, this solution is invalid\n          break; // Try again.\n        }\n      } else {\n        num = Math.floor(min + Math.random() * (max + 1 - min));\n      }\n      numbers.push(num);\n      sum += num;\n      if (numbers.length === n && sum === total) {\n        // Solution found.\n        return numbers;\n      }\n      if (sum > total) {\n        // Overshot, retry.\n        break;\n      }\n    }\n  }\n}\n\nconsole.log(generateNumbers(100, 5, 15, 10));\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "how to find a name from a phonebook string in O(logn)\r\n                \r\nI got this question from an interview, I think I need to run a binary search, however, I can't figure out the implementation, can you please help me out.\nThe questions were, given a file, which has names and phone numbers.\nThese names and numbers are formated:\n\nname and number is split by space\ndifferent name is split by ```\n\\n```\n\n\nAlso, the names are sorted.\nThe question is, given a name, output it's number if exists.\ne.g.\n```\na 123\\nb 234\\nd 987\\n```\n\nfind the number of ```\nb```\n,\nThe output should be ```\n234```\n\nThe algorithm should be O(logN) of time complexity.\nEdit\nThe given function signature is\n```\nfunc findNumber(phonebook string) string```\n\n    ", "Answer": "\r\nThe next implementation of binary search assumes that there are ```\nN```\n pairs of names and phone numbers stored in a list:\n```\ndef search(lines, name):\n    l = 0\n    r = len(lines)\n    while l + 1 < r:\n        m = (l + r) // 2\n        if lines[m][0] <= name:\n            l = m\n        else:\n            r = m\n    return lines[l][1] if lines[l][0] == name else None\n\nprint(search([(\"a\", \"123\"), (\"b\", \"234\"), (\"c\", \"987\")], \"b\")) # returned value \"234\"\nprint(search([(\"a\", \"123\"), (\"b\", \"234\"), (\"c\", \"987\")], \"d\")) # returned value None\n```\n\nIt returns the phone number if its user is available. The running time is O(MlogN) where M is length of ```\nname```\n and N the size of the ```\nlines```\n list. You can argue that names have an upper limit in terms of length, let's say 100000000 characters :-P, so actual running time is O(logN).\nAbout the code:\nThe range of consideration is ```\n[l, r)```\n, i.e, inclusive on the left side and exclusive on the right side.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Random Number Generator Algorithm\r\n                \r\nWhat algorithm is used by banks for generating random numbers like(credit cards/debit cards numbers) ?\n\nSuppose i maintain all the numbers in DB and If i try the below approach,\n\n\nGenerate a random number.\nVerify whether the number has been already assigned.\nIf yes goto step 1.\nIf no create a record in DB for the new number and output the result.\n\n\nIt will ask for more db hits when the card volume increases.\n\nAny other take on this ?? Please help.\n    ", "Answer": "\r\nThere are three general solutions to the non-duplicate random number problem:\n\n\nIf you want a few numbers from a large range then pick one and reject it if it is a duplicate.  If the range is large, then this won't cause too many repeated attempts.  This is what you mention above.\nIf you want a lot of numbers from a small range, then set out all the numbers in an array and shuffle the array.  The Fisher-Yates algorithm is standard for array shuffling.  Take the random numbers in sequence from the shuffled array.\nIf you want a lot of numbers from a large range then use an appropriately sized encryption algorithm.  E.g. for 64 bit numbers use DES and encrypt 0, 1, 2, 3, ... in sequence.  The output is guaranteed unique because encryption is reversible.  The Hasty Pudding Cipher can be set for any convenient range of numbers.\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Uniformly distribute N items into C bins\r\n                \r\nI have a number of items N and I want to uniformly distribute them among a number of C bins. My first though was to generate a random double number between 0 and 1 and then multiply it with the number N but it's not working as i expected. We are currently working on a Java project but a general algorithm would be fine.\n\nBins have no specific capacity and numbers don't have weights\n    ", "Answer": "\r\nYou have not specified what you mean by \"uniformly distribute \".\n\nThere are M=CN variants of distribution of N items into C bins. So you can random integer in range 0..M-1 and represent it in C-ary numeral system to get random combination.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "A number in the mirror algorithm in C++ [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs debugging details. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     Edit the question to include desired behavior, a specific problem or error, and the shortest code necessary to reproduce the problem. This will help others answer the question.\r\n                \r\n                    \r\n                        Closed 8 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI am trying to write an algorithm which can show me the number I enter in the mirror. I mean, if I enter 173, it should show me that the number in the mirror is 371. I wrote the code, but something it's not working and I can't figure what. Thanks a lot !\n\n```\n#include <iostream>\n\nusing namespace std;\n\nvoid Citire(int &n)\n{\n    cout  << \"\\nda numarul:\";\n    cin   >> n;\n    while (n <= 0)\n    {\n        cout << \"ai gresit, da natural:\";\n        cin >> n;\n    }\n}\n\nint Oglinda(int &n)\n{\n    int Og = 0;\n    int UltCif;\n\n    while (n > 0)\n    {\n        UltCif = n % 10;\n        Og = Og * 10 + UltCif;\n        n = n / 10;\n\n\n    }\n    return Og;\n}\n\nint main()\n{\n    int n;\n    int Og;\n\n    Citire(n);\n    Oglinda(Og);\n\n    cout << endl << Og << \" este oglinda numarului \" << n << endl;\n    return 0;\n}\n```\n\n    ", "Answer": "\r\nI think you mean:\n\n```\nOg = Oglinda(n);\n```\n\n\nAnd that function's signature should be:\n\n```\nint Oglinda(int n);\n```\n\n\nOtherwise, you're modifying ```\nn```\n in the function - which you don't want to do since you want to print its original value at the end.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Latex: Change the numbering style for algorithms [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     This question does not appear to be about a specific programming problem, a software algorithm, or software tools primarily used by programmers. If you believe the question would be on-topic on another Stack Exchange site, you can leave a comment to explain where the question may be able to be answered.\r\n                \r\n                    \r\n                        Closed 3 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nMy problem is that I do not know how to change the numbering style for algorithms. I have created an algoritm and its number is \"Algorithm 1\", but I want to have \"Algorithm N.1\", where N is the number of current chapter.\n\nLet assume I have something like below\n\n```\n\\begin{algorithm}\n    \\begin{algorithmic}\n        \\FOR{$i = 1$ till end}\n            \\STATE do something\n        \\ENDFOR\n     \\end{algorithmic}\n     \\label{aForLoop}\n     \\caption{some caption}\n \\end{algorithm}\n```\n\n\nAny help will appreciated.\n    ", "Answer": "\r\nAs in the documentation: \n\n\n  The numbering of algorithms can be influenced by providing the name of the document component within which numbering should be recommenced. The legal values for this option are: part, chapter, section, subsection, subsubsection or nothing. The default value is nothing which causes algorithms to be numbered sequentially throughout the document.\n\n\nSo, I think it will be enough determining the ```\nsection```\n value, like that: \n\n```\n\\begin{algorithm}[section]\n...\n```\n\n\nDidn't test, but should work. \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to check sequence numbers\r\n                \r\nI need an algorithm to verify that the password is a sequence of numbers, tried a few, but I did not succeed. Is there any method ready for this?\n\nEDITED: First I received this code in Java, and tried convert it to objective-c:\n\n```\npublic static boolean hasSequence(String value) {\n    boolean result = true;\n    char[] chars = value.toCharArray()\n            ;\n    for (int i = 1; i < chars.length; i++) {\n        if(chars[i] - chars[i - 1] != 1) { // sequence is broken\n            result = false;\n            break;\n        }\n    }\n\n    return result;\n}\n```\n\n    ", "Answer": "\r\nYou can do a straightforward conversion of the Jvaa code to Objective-C - drop conversion to ```\nchar[]```\n, and use ```\ncharacterAtIndex:```\n method instead:\n\n```\nBOOL hasSequence(NSString value) {\n    for (int i = 1; i < value.length; i++) {\n        if([value characterAtIndex:i] - [value characterAtIndex:i - 1] != 1) {\n            return NO;\n        }\n    }\n    return YES;\n}\n```\n\n\nNote that your Java code does not care if the characters are digits or not: any sequence of consecutive character code points, such as ```\n\"ABCDEFG\"```\n, would be accepted.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Armstrong Numbers Algorithm in Java\r\n                \r\nI am new to java programming ,please tell me what is wrong with this implementation of the Armstrong's Number Algorithm. \n\nIt's printing \"1\" infinite times.\n\nAn Armstrong number of three digits is an integer such that the sum of the cubes of its digits is equal to the number itself. For example, 371 is an Armstrong number since 3**3 + 7**3 + 1**3 = 371.\n\nReference: https://pages.mtu.edu/~shene/COURSES/cs201/NOTES/chap04/arms.html\n\nCode is here:   \n\n```\nimport java.util.Scanner;\npublic class Program {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        System.out.println(\"Enter range:\");\n\n        int num =s.nextInt();\n        int range = s.nextInt();\n        int rem,temp;\n        int sum;\n\n        System.out.println(num+\" \"+range);\n\n        while(num<=range) {\n             sum=0;\n            temp=num;\n            while(temp>0) {\n                rem=temp%10;\n                sum=sum+(rem*rem*rem);\n                temp=temp/10;\n            }\n            if(sum==num)\n                System.out.println(sum);\n\n            num++;\n        }\n     }\n}\n```\n\n    ", "Answer": "\r\n```\nnum = num / 10;\n```\n\n\nYou are reassigning your counter variable.\n\nLet the variable num be 1, and range be 10.\n\nWhen we get to ```\nnum = num / 10;```\n, you are setting num to 0. Thus, num will always be less than range (which is 10) causing your program to fall into an infinite loop.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to fill array with random numbers in Counting Sort Algorithm in C++\r\n                \r\n```\n#include iostream\n\nusing namespace std;\n\nint k=0;    \n\nvoid sort_func(int A[],int B[],int n)    \n{\n    int count[k+1],t;\n    for(int i=0;i<=k;i++)\n    {\n        count[i] = 0;\n    }\n    for(int i=0;i<n;i++)\n    {\n        t = A[i];\n        count[t]++;         \n    }\n    for(int i=1;i<=k;i++)\n    {\n        count[i] = count[i]+count[i-1];            \n    }\n    for(int i=0;i<n;i++)\n    {\n        t = A[i];\n        B[count[t]] = t;          \n        count[t]=count[t]-1;        \n    }\n}\n\nint main()\n{\n    int n;\n    cout<<\"Enter the size of the array :\";\n    cin>>n;\n    int A[n],B[n]; \n    cout<<\"Enter the array elements: \";\n    for(int i=0;i<n;i++)        \n    {\n        cin>>A[i];\n        if(A[i]>k)\n        {\n            k = A[i];              \n        }\n    }\n    sort_func(A,B,n);        \n    for(int i=1;i<=n;i++)       \n    {\n        cout<<B[i]<<\" \";\n    }\n    cout<<\"\\n\";\n    return 0;\n}\n```\n\nThis is the C++ code for Counting Sort Algorithm and i can not change the code to create random array without entering values one by one\nedit:Yes i meant to create random values in array A by using rand() function.\n    ", "Answer": "\r\nYou have different options for filling an array with random elements. Just to name a few:\n\n```\nrand()```\n without a seed: pseudo-random number generator; and you get the same sequence of numbers every time you run the program. Demo\n\n```\nstd::generate(A, A + n, []() { return std::rand() % 101; });\n```\n\n\n```\nrand()```\n with a seed: pseudo-random number generator; depending on the seed you use, you can get a new sequence of numbers every time you run the program; for example, if you use ```\ntime(NULL)```\n as seed, which returns the current time in seconds since a given date, you would get a new sequence of numbers whenever you get a new output from ```\ntime```\n. Demo\n\n```\nstd::srand(static_cast<unsigned int>(std::time(NULL)));\nstd::generate(A, A + n, []() { return std::rand() % 101; });\n```\n\n\n```\ndefault_random_engine```\n with a seed from ```\nrandom_device```\n, for generating random numbers, and ```\nuniform_int_distribution```\n, for distributing those random numbers uniformly in a given range: non-deterministic number generator or, in case a non-deterministic source is not available to the implementation, a pseudo-random number generator. Demo\n\nAs @NO_NAME pointed out in one of their comments, ```\nrandom_device()```\n can throw. If you use this option, you can fall back to a ```\nrand()```\n solution if you catch an exception. Demo\n```\nusing random_generator = std::function<int()>;\nrandom_generator rg{};\ntry\n{\n    std::default_random_engine random_engine{ std::random_device{}() };\n    std::uniform_int_distribution<int> uniform_dist{0, 100};\n    rg = [&uniform_dist, &random_engine]() { return uniform_dist(random_engine); };\n}\ncatch (const std::exception& ex)\n{\n    std::srand(static_cast<unsigned int>(std::time(NULL)));\n    rg = []() { return std::rand() % 101; };\n}\nstd::generate(A, A + n, rg);\n```\n\nAs an aside note, you could use ```\nmax_element```\n to calculate ```\nk```\n in your code:\n```\nk = *std::max_element(A, A + n);\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to find nth root of a number\r\n                \r\nI am looking for an efficient algorithm to find nth root of a number. The answer must be an integer. I have found that newtons method and bisection method are popular methods. Are there any efficient and simple methods for integer output?\n    ", "Answer": "\r\n```\n#include <math.h>\ninline int root(int input, int n)\n{\n  return round(pow(input, 1./n));\n}\n```\n\n\nThis works for pretty much the whole integer range (as IEEE754 8-byte ```\ndouble```\ns can represent the whole 32-bit ```\nint```\n range exactly, which are the representations and sizes that are used on pretty much every system). And I doubt any integer based algorithm is faster on non-ancient hardware. Including ARM. Embedded controllers (the microwave washing machine kind) might not have floating point hardware though. But that part of the question was underspecified.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Happy number algorithm in Python\r\n                \r\nI'm solving Happy number algorithm problem\n\nhttps://leetcode.com/problems/happy-number/\n\nhere is my code.\n\n```\nclass Solution:\ndef isHappy(self, n):\n    nums = str(n)\n    while len(nums)!=1:\n        result = 0\n        for num in nums:\n            result += int(num) * int(num)\n        nums = str(result)\n    if (nums == '1'): print(\"True\")\n    else: print(\"False\")\n```\n\n\nif the total number of 1 is seven in input, it has an error. \nlike [\"1111111, 10111111\", \"11101111\", \"11011111\"]\n\nthese numbers have to be True but results are False. \n\nI know it needs to repeat one more while loop but every time I try to fix my code, I got more errors...\n\nI don't have no clue how to fix this code. could you give me a hint?\n    ", "Answer": "\r\nYou'll need to use a list to save the numbers you've already been through, if you happen to fall into one of them again, you'll know you are in a cycle.\n\nTo stop the problem you're having, you should exit the while when one of the following conditions happen:\n\n1-The result is exactly 1.\n\n2-You find your result in the list of already checked.\n\nGiven this, here's how to fix your code, but I recommend you to try before checking the solution:\n\n```\ndef isHappy(self, n):\n    checked = []\n    nums = str(n)\n    while nums != '1' and not (nums in checked):\n        checked.append(nums)\n        result = 0\n        for num in nums:\n            result += int(num) * int(num)\n        nums = str(result)\n    if (nums == '1'): print(\"True\")\n    else: print(\"False\")\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What is the Search/Prediction Time Complexity of Logistic Regression?\r\n                \r\nI am looking into the time complexities of Machine Learning Algorithms and I cannot find what is the time complexity of Logistic Regression for predicting a new input. I have read that for Classification is O(c*d) c-beeing the number of classes, d-beeing the number of dimensions and I know that for the Linear Regression the search/prediction time complexity is O(d). Could you maybe explain what is the search/predict time complexity of Logistic Regression?\nThank you in advance\n\nExample For The other Machine Learning Problems: \nhttps://www.thekerneltrip.com/machine/learning/computational-complexity-learning-algorithms/\n    ", "Answer": "\r\nComplexity of training for logistic regression methods with gradient based optimization: O((f+1)csE), where:\n\n\nf - number of features (+1 because of bias). Multiplication of each feature times it's weight (```\nf```\n operations, ```\n+1```\n for bias). Another ```\nf + 1```\n operations for summing all of them (obtaining prediction). Using gradient method to improve weights counts for the same number of operations, so in total we get 4* (f+1) (two for forward pass, two for backward), which is simply O(f+1).\nc - number of classes (possible outputs) in your logistic regression. For binary classification it's one, so this term cancels out. Each class has it's corresponding set of weights.\ns - number of samples in your dataset, this one is quite intuitive I think.\nE - number of epochs you are willing to run the gradient descent (whole passes through dataset)\n\n\nNote: this complexity can change based on things like regularization (another c operations), but the idea standing behind it goes like this.\n\nComplexity of predictions for one sample: O((f+1)c)\n\n\nf + 1 - you simply multiply each weight by the value of feature, add bias and sum all of it together in the end.\nc - you do it for every class, 1 for binary predictions.\n\n\nComplexity of predictions for many samples: O((f+1)cs)\n\n\n(f+1)c - see complexity for one sample\ns - number of samples\n\n\nDifference between logistic and linear regression in terms of complexity: activation function.\n\nFor multiclass logistic regression it will be softmax, while linear regression, as the name suggests, has linear activation (effectively no activation). It does not change the complexity using big O notation, but it's another c*f operations during the training (didn't want to clutter the picture further) multiplied by 2 for backprop.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "In a NxN matrix, what algorithm finds the shortest path between two nodes?\r\n                \r\nBeing new to algorithms and having searched all over the web, including some answers on stackoverflow, I still find myself asking how I find the distance between those nodes in a simple matrix.\n\nFirst of all, the simple matrix: \n\n```\npublic class MatrixRoutes {\n\n int[][] position;   // matrix\n int size;  \n\n MatrixRoutes(int dimentions) {\n  posicion = new int[dimentions][dimentions];\n  size= dimensiones; \n\n   } \n}\n```\n\n\nI set the size of the matrix with a simple \n\n```\n MatrixRoutes r = new MatrixRoutes(5);\n```\n\n\nCool! I have my empty grid! \n\nPopulating it with the most simple of data, distances: \n\n```\n    r.position[0][1] = 1;\n    r.position[1][1] = 0;\n    r.position[0][2] = 2;\n    r.position[2][2] = 0;\n    r.position[0][3] = 3;\n    r.position[3][3] = 0;\n    r.position[0][4] = 4;\n    r.position[4][4] = 0;\n    r.position[0][5] = 5;\n    r.position[5][5] = 0;\n```\n\n\nThere's my test distance matrix, all ready to be tested.\n\nAlright, got my nodes with distances. Now it's a matter of finding the shortest distance. I've been reading about different algorithms and their implementations with Java. \n\nI've wanted to implement Dijkstra's algorithm, but it seems to only accept one starting number, used as a distance variable? That's not what I need when I need the distance between two variables. \n\nHere's my attempt at implementing the algorithm:\n\n```\nprivate static int buscarRutaMasRapida(MatrixRoutes g, int nodeOrigin, int nodeDestiny) \n{\nint[] found = new int[g.position.length];\nboolean[] visitedNode = new boolean[g.position.length];\nint max = 999;\nfor (int i = 0; i < g.position.length; i++)\n{\n    mejor[i] = max;\n    visitedNode [i] = false;\n}\n\nfound[nodeOrigin+ nodeDestiny] = nodeOrigin + nodeDestiny;\n\nfor(int i = 0; i < g.position.length; i++)\n{\n    int min = max;\n    int nodoNow = nodeOrigin;\n    for (int j = 0; j < g.position.length; j++)\n    {\n        if (!visitedNode [j] && found [j] < min)\n        {\n            nodoNow = j;\n            min = found [j];\n        }\n    }\n    visitedNode [nodoNow ] = true;\n    for (int j = 0; j < g.position.length; j++)\n    {\n        if (g.position[nodoNow ][j] < max && found[nodoNow ] +   g.position[nodoNow ][j] < found [j])\n        {\n            found[j] = found [nodoNow ] + g.position[nodoNow ][j];\n        }\n    }\n}\n        return found [g.position.length - 2];\n}\n```\n\n\nAll I'm asking is someone who would know of an algorithm which would find the shortest distance between two nodes in either a normal adjacency matrix or distance matrix.\n    ", "Answer": "\r\nDijkstra's is the (my) preferred route. It takes in one node and finds the shortest path to all other nodes. Usually for distance between two nodes one would create a check inside Dijkstra's to return when the desired \"end\" node is reached.\n\nIn fact, Wikipedia has very nice psuedocode for you to use.\n\nSo for instance in the first step of Dijkstra's, you need to find the distance from the origin point S, you would look at all distances from S to other nodes and put this into your priority queue:\n\n```\nqueue.add(position[S][x]); //Do this for all x adjacent to S\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "pygmo2 archipelago using simulated_annealing only evolves the initial champion\r\n                \r\nIn using the ```\npygmo2```\n ```\nsimulated_annealing()```\n algorithm in an ```\narchipelago```\n, I found that only the initial champion seems to be evolved and all the other islands stay the same. \n\nConsider the following test case:\n\n```\narchi=pg.archipelago(n=1,algo=pg.de(),pop_size=10,prob=pg.rosenbrock(10),seed=32)\narchi[0].get_population().get_f()\narray([[ 1444075.45],\n   [  769751.435],\n   [ 1539132.29],\n   [  867545.07],\n   [ 1139524.14],\n   [ 1294374.29],\n   [ 1313308.78],\n   [ 1402739.85],\n   [ 1734627.42],\n   [ 1329435.20]])\n\narchi.evolve(); archi.wait()\narchi[0].get_population().get_f()\narray([[ 1444075.45],\n   [  754109.13],\n   [  946288.71],\n   [  409444.50],\n   [ 1139524.14],\n   [ 1216399.25],\n   [ 1313308.78],\n   [ 1402739.85],\n   [  834097.30],\n   [  173612.94]])\n```\n\n\nBut if I run the same using ```\nalgo=pg.simulated_annealing()```\n, then an initial population_f of\n\n```\narray([[ 1408097.05],\n   [ 1765715.34],\n   [ 1547757.08],\n   [ 1851529.02],\n   [  440838.40],\n   [ 1673630.76],\n   [  867374.45],\n   [ 2636693.48],\n   [ 1809012.67],\n   [  650619.19]])\n```\n\n\nbecomes, after one call to ```\nevolve()```\n, \n\n```\narray([[  1408097.05],\n   [  1765715.34],\n   [  1547757.08],\n   [  1851529.02],\n   [  2.15709202],\n   [  1673630.76],\n   [  867374.45],\n   [  2636693.48],\n   [  1809012.67],\n   [  650619.19]])\n```\n\n\nNotice that only the island with the smallest fitness at the start is the only island to have been evolved. This happens with different problems, different algorithms, and different numbers of islands. Seems like a bug?\n    ", "Answer": "\r\nGot this from the developers:\n\nNothing odd here. All is intended behavior.\n\nThere several problems with the use of the archipelago and the algorithm detailed above.\n\nIf you use the archipelago with pg.de and pop_size=1 the \"error occurred\" is to be expected as de is a population based algorithm and needs at least a population of size 4.\n\nWhen an archipelago raises error in the islands, you can inspect those exceptions by calling the wait_check method. See https://esa.github.io/pagmo2/docs/python/tutorials/using_archipelago.html#managing-exceptions. If you do so you will see that the exeption is likely to be \"de needs at least 4 individuals ....\"\n\nSimulated annealing is not population based and, as documented, only evolves one selected individual in the population. Which is what the code above shows.\n\n\"Notice that only the island with the smallest fitness\" should be \"Notice that only the chromosome with the smallest fitness\" -> Which is what sa is supposed to do.\n\n\"most of the fitness vectors change using pg.de()\" -> again thats intended behaviour of de. Since the user only evolves for one generation (use of default parameters)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "O(n) algorithm to find the median of n² implicit numbers\r\n                \r\nProblem: input is a (not necessarily sorted) sequence S = k1, k2, ..., kn of n arbitrary numbers. Consider the collection C of n² numbers of the form min{ki,kj}, for 1 <=i, j<=n. Present an ```\nO(n)```\n time and ```\nO(n)```\n space algorithm to find the median of C.\n\nSo far I've found by examining C for different sets S that the number of instances of the smallest number in S in C is equal to (2n-1), the next smallest number: (2n-3) and so on until you only have one instance of the largest number. \n\nIs there a way to use this information to find the median of C?\n    ", "Answer": "\r\nThere are a number of possibilities. One I like is Hoare's ```\nSelect```\n algorithm. The basic idea is similar to a Quicksort, except that when you recurse, you only recurse into the partition that will hold the number(s) you're looking for.\n\nFor example, if you want the median of 100 numbers, you'd start by partitioning the array, just like in Quicksort. You'd get two partitions -- one of which contains the 50th element. Recursively carry out your selection in that partition. Continue until your partition contains only one element, which will be the median (and note that you can do the same for another element of your choice).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to represent a sequence of numbers\r\n                \r\nI have a sequence of numbers to generate, and I want to generate it using some sort of algorithm (iterative or recursive, doesn't matter).\n\nContextualizing: This numbers are indexes to iterative over a list of lists. I need to do a permutation (combination, i don't know exactly), but I need to generate all combinations of all positions of that list of lists.\n\nThe sequence and the output I am trying to get is:\n\n```\n1 1\n2 1\n3 1\n4 1\n5 1\n\n1 2\n2 1\n3 1\n4 1\n5 1\n\n1 3\n2 1\n3 1\n4 1\n5 1\n\n1 4\n2 1\n3 1\n4 1\n5 1\n\n1 5\n2 1\n3 1\n4 1\n5 1\n\n1 1\n2 2\n3 1\n4 1\n5 1\n\n1 2\n2 2\n3 1\n4 1\n5 1\n\n1 3\n2 2\n3 1\n4 1\n5 1\n\n1 4\n2 2\n3 1\n4 1\n5 1\n\n1 5\n2 2\n3 1\n4 1\n5 1\n\n1 1\n2 3\n3 1\n4 1\n5 1\n\n1 2\n2 3\n3 1\n4 1\n5 1\n\n1 3\n2 3\n3 1\n4 1\n5 1\n\n1 4\n2 3\n3 1\n4 1\n5 1\n\n1 5\n2 3\n3 1\n4 1\n5 1\n\n1 1\n2 4\n3 1\n4 1\n5 1\n```\n\n\nand so on... the last state is:\n\n```\n1 5\n2 5\n3 5\n4 5\n5 5\n```\n\n\nNote that at each line break is a step of iteration or recursion. The algorithm must be generic. This code that i wrote can help, but it isn't what I want. :(\n\n```\nList<List<int>> lstDays = new List<List<int>>\n{\n    new List<int>{1,2,3,4,5}, //day 18\n    new List<int>{1,2,3,4,5}, //day 19\n    new List<int>{1,2,3,4,5}, //day 22\n    new List<int>{1,2,3,4,5}, //day 23\n    new List<int>{1,2,3,4,5}, //day 24\n};\n\nfor(int i=0;i<lstDays.Count;i++)\n{\n    for(int j=0;j<lstDays[i].Count;j++)\n    {\n        for(int k=0;k<lstDays.Count;k++)\n        {\n            Console.Write(k+1);\n\n            //Console.Write(j+1);\n\n            Console.Write('\\n');\n        }\n        Console.Write('\\n');\n    }\n}\n```\n\n\nI hope that you can help me ! (:\n    ", "Answer": "\r\nYou can do it like this:\n\n```\nint[] second = new[] {0,0,0,0,0};\nbool finish = false;\nwhile (true) {\n    for (int i = 0 ; i != 5 ; i++) {\n        Console.WriteLine(\"{0} {1}\", i+1, second[i]+1);\n    }\n    Console.WriteLine();\n    int p = 0;\n    do {\n        second[p]++;\n        if (second[p] == 5) {\n            second[p] = 0;\n            p++;\n        } else {\n            break;\n        }\n    } while (p != 5);\n    if (p == 5) break;\n}\n```\n\n\nThe sequence of the second digits is stored in the array \"creatively\" named ```\nsecond```\n. The ```\ndo```\n/```\nwhile```\n loop \"increments\" this array as if it were a base-5 number stored as five separate digits.\n\nHere is a demo on ideone.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "algorithm to calculate number pair sequence\r\n                \r\nI need to calculate a sequence of numbers (similar to Sudoku) to match teams to play each other. \n\nI need to create a matrix for 8 and 9 teams and can't figure out the formula.  I have to believe this is really simple, but I have no idea what to search for to find it.\n\nHere is a working version for 7 teams:\n\nteam      |1  2   3   4   5   6   7 \n ====================\nweek 1  |      7   6   5   4   3   2\nweek 2  | 7    5   6   3   4   1\nweek 3  | 6 5      7   2   1   4\nweek 4  | 5 6   7      1   2   3\nweek 5  | 4 3   2   1      7   6\nweek 6  | 3 4   1   2   7      5\nweek 7  | 2 1   4   3   6   5     \n\nSo for the first week, team 1 doesn't play (no available partner), team 2 plays team 7, team 3 plays team 6, etc.\nFor week 2, team 1 plays team 7, etc.\n\nNo team may play the other team.  The event continues for as many weeks as we have teams, so 8 teams would play for 8 weeks.\n\nEach team should play another team once and only once.  They can't play themselves (hence the blank entry in each row.\n\nNote that the upper right triangle is a mirror of the bottom left triangle, but that still didn't help me determine the formula.  \n\nMy guess is that if I spent enough hours, I could figure out the formula.  But since this has to have been done a few million times by people over the ages, I am guessing that it's a well known algorithm and I just need to find someone who knows the name (so I can look it up) or can tell me what it is so I can create this for a friend who needs it.\n\nThanks!\n    ", "Answer": "\r\nThe best answer so far is from Dennis Meng (I can't comment, so I have to use an answer).  That link pointed me to a question where the answer worked, sort of.  I don't have an algorithym yet, but the methodology worked adequately.  I have my rows and columns.  It doesn't provide me with a \"mirror\" image the way the example does.  But it does give me a unique team for each week.  I am hoping that will be enough.\n\nI just used excel to lay it out as that was faster than trying to figure out the logic, write the code, and get a nice formatted result - especially since I only seem to need to do it once.  \n\nBut if it turns out I need to do it again, I will write a simple application and post it here.  \n\nOf course, it would be great if I could get the routine that generated the above matrix....\n\nOf course, that also leads me to another issue.  How can I mark Dennis' comment as the answer???? He deserves the credit (unless someone chimes in with the mirror solution....)\n\nOh well, thanks Dennis!\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Unique Number Generation Algorithm\r\n                \r\nI need to generate unique numbers for my Java application meeting the below requirements -\n\n\n9 digit hexadecimal \nAbout 600,000 numbers to be generated everyday\nThe numbers must remain unique for a minimum period of 7 days; not a problem if they repeat beyond 7 days period. \nDuring peak loads, about 800 unique numbers need to be generated every second for about 15 seconds.\n\n\nUnsuccessful solution -\n\n```\n    public static String getUniqueId() {\n        String uniqueTime = Long.toHexString(System.nanoTime());\n        String uniqueId = uniqueTime.substring(uniqueTime.length() - 9);\n\n        return uniqueId;\n    }\n```\n\n\nA 12 digit hexadecimal number is generated by using the nanoTime. I truncate the 3 left characters. nanoTime helps is handling the peak load.\n\nI believe this is not correct and it may result in duplicates.\n\nCan anyone provide a good quick algorithm please?\n    ", "Answer": "\r\nIf only one thread is used to generate the numbers:\n\n```\nlong nextId = counter % MAX_VALUE;\ncounter++;\nreturn convertToHex(nextId);\n```\n\n\nIf multiple threads:\n\n```\nlong nextId = atomicLongCounter.getAndIncrement() % MAX_VALUE;\nreturn convertToHex(nextId);\n```\n\n\nNote: given @Gumbo's computation, it would need 313 years to reach the max value, so you can even drop the modulo.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Transform string from a1b2c3d4 to abcd1234\r\n                \r\nI am given a string which has numbers and letters.Numbers occupy ```\nall odd positions and letters even positions```\n.I need to transform this string such that all letters move to front of array,and all numbers at the end.\n\nThe relative order of the letters and numbers needs to be preserved\n\n```\nI need to do this in O(n) time and O(1) space.```\n\n\neg: ```\na1b2c3d4 -> abcd1234 , x3y4z6 -> xyz346```\n\n\nThis ```\nprevious question```\n has an explanation algorithm, but no matter how hard i try,i cant get a hold of it.\n\nI hope someone can explain me this with a example test case .\n    ", "Answer": "\r\nThe key is to think of the input array as a matrix like this:\n\n```\na 1\nb 2\nc 3\nd 4\n```\n\n\nand realize that you want the transpose of this matrix\n\n```\na b c d\n1 2 3 4\n```\n\n\nRemember, multi-dimensional arrays are really just single-dimensional arrays in disguise so you can do this.\nBut you need to do this in-place to satisfy the ```\nO(1)```\n space requirement. Fortunately, this is a well-known problem complete with several possible approaches.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "An algorithm computing the number of vertices\r\n                \r\nLet CH1 and CH2 be two convex polygons. Give an algorithm computing, in time linear with the number of vertices, the convex hull of their union justifying that it works in all the different possible cases of mutual relations between the two polygons.\n\nis there any way to do this?\n    ", "Answer": "\r\nRotating calipers is powerful instrument for such problems.\n\nLook at part 2.6 ```\nThe Convex Hull of Two Convex Polygons```\n of this article\n\nTo comment: I am sure this is very simple algorithm. \n\n\nStart with vertical line. \nFind the leftmost points of both polygons. Choose the most left one of them. It belongs to hull.   \nFix the line in this point.  \nRotate the line about this point until it touches next point (from both polygons) (note that you need only forward search, so overall time is O(m+n)) \nAdd this point to the hull, fix line.\nRepeat.\n\n\nLook article (and other rot.cal. descriptions) for details.\n\nNote that this algorithm resembles gift wrapping\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "inserter iterator to insert in different container depending on predicate\r\n                \r\nLets say I have a vector of numbers and I want to create two vectors to separate the numbers on odd and even ones. Easily with a simple for:\n\n```\nstd::vector<int> odds;\nstd::vector<int> evens;\nstd::vector<int> numbers;\nfor (int number : numbers) {\n    if isOdd(number)\n        odds.push_back(number);\n    else\n        evens.push_back(number);\n}\n```\n\n\nI would like to know if there any kind of inserter_iterator that can manage to do this so i can write something like\n\n```\nstd::vector<int> odds;\nstd::vector<int> evens;\nstd::vector<int> numbers;\n\nauto pred = [](int i) { return isOdd(i) ? True : False;};\nauto identity = [](int i) {return i;};\nstd::transform(std::begin(numbers), std::end(numbers), some_inserter(odd, evens, pred), identity);\n```\n\n\nThis is just out of curiosity, I'm trying to learn how algorithms and iterators work. A solution based on ranges is also valid.\n    ", "Answer": "\r\nYou can use ```\nstd::partition_copy```\n algorithm, as follows https://en.cppreference.com/w/cpp/algorithm/partition_copy\n\n```\nint main() {\n    std::vector vec = {1, 2, 3, 4, 5, 6};//the vector to be partitioned\n    std::vector<int> odds(vec.size());//will hold odds (to have the sam size as the original (the maximum case) )\n    std::vector<int> evens(vec.size());//will hold evens\n\n    auto [oddsEnd, evensEnd] =\n            std::partition_copy(vec.begin(), vec.end(), odds.begin(), evens.begin(), [](int i){return i%2!=0;});//will copy at the front (won't insert at the back)\n    odds.erase(oddsEnd, odds.end());//to erase the undesired excess\n    evens.erase(evensEnd, evens.end());//to erase the undesired excess\n\n}\n```\n\n\nOR use ```\nstd::back_inserter```\n  https://en.cppreference.com/w/cpp/iterator/back_inserter (See the comments)\n\n```\nint main() {\n    std::vector vec = {1, 2, 3, 4, 5, 6};//the vector to be partitioned\n    std::vector<int> odds;//will hold odds\n    std::vector<int> evens;//will hold evens\n\n    std::partition_copy(vec.begin(), vec.end(), std::back_inserter(odds), std::back_inserter(evens), [](int i){return i%2!=0;});//will insert\n\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How do I use jest to make sure I am only using two arguments?\r\n                \r\nI'm challenging myself to create my own tests for problems in freeCodeCamp. Currently stuck on the second requirement for 'Subtract One Number from Another with JavaScript'. Here are the requirements.\n```\nvar difference = 45 - 0;\n\n//The variable difference should be equal to 12.\n   \n //You should only subtract one number from 45.\n```\n\nHow could I write my own test to make sure I am only using two arguments?\n(freeCodeCamp problem can be found here:https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/subtract-one-number-from-another-with-javascript)\n    ", "Answer": "\r\nIf you were testing this as part of an application, you wouldn't necessarily be testing the expression itself but rather some function that contains this expression. To organize that code example in a testable way, you could write a function like this:\n\r\n\r\n```\nfunction getDifference(numberToSubtract) {\n  const difference = 45 - numberToSubtract;\n  \n  return difference;\n}```\n\r\n\r\n\r\n\nThen you could use Jest to assert the return value is 12 and that you've only used a single argument like this:\n```\nexpect(getDifference(33)).toBe(12);```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Fedex checksum algorithm for tracking numbers?\r\n                \r\nHow do I validate potential Fedex tracking numbers, without hitting a web service?  I've heard Fedex employs a modified version of the Luhn algorithm.\n    ", "Answer": "\r\nCheck the google answer. There are different algorithm for ground and express.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Fedex checksum algorithm for tracking numbers?\r\n                \r\nHow do I validate potential Fedex tracking numbers, without hitting a web service?  I've heard Fedex employs a modified version of the Luhn algorithm.\n    ", "Answer": "\r\nCheck the google answer. There are different algorithm for ground and express.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Fast algorithm to count the number of 1 for binary number [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Count the number of set bits in a 32-bit integer\r\n                            \r\n                                (65 answers)\r\n                            \r\n                    \r\n                Closed 9 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\n\nIf I have binary number  0111000111111,\nIs there any fast algorithm to count the number of 1 ?\nIf 0111000111111 is a string(e.g \"0111000111111\")\nIs there any fast algorithm to count the number of 1 in the string?\n\n    ", "Answer": "\r\nA relatively fast way is to precompute a table of the bit counts for all byte values and to sum for the four bytes of the (unsigned) integer.\n\n```\nbyte NB[256]= { 0, 1, 1, 2, 1, 2, 2, 3, 1, 1, ... };\n\nN= NB[U & 255] + NB[(U >> 8) & 255] + NB[(U >> 16) & 255] + NB[(U >> 24) & 255];\n```\n\n\nYou can adapt this for different numbers of bits per slice.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Keep statistic about sorting algorithms\r\n                \r\nI have a homework about object oriented programming in c#. a part of my homework, I need to make 2 different sorting algorithms and putting the random numbers into them and observing statistic about 2 different algorithms. \nabout that my teaches said me in e-mail \"Non static sorting class can keep statistic about sorting how many numbers, how fast, min, max, average..\"\n\nSo there are my sorting algorithms which Insertion and Count Sortings. Please tell me how can i keep statistic about sorting.\n\nDon't forget main subject of my homework is OOP.\n\n```\nclass InsertionSorting : Sort    \n{\n    public override List<int> Sorting(List<int> SortList)\n    {\n\n        for ( int i=0; i<SortList.Count-1; i++)\n        {\n            for (int j= i+1; j>0; j--)\n            {\n                if (SortList[j-1] > SortList [j])\n                {\n                    int temp = SortList[j - 1];\n                    SortList[j - 1] = SortList[j];\n                    SortList[j] = temp;\n                }\n            }                                \n        }\n        return SortList;\n    }\n}\n\n\n\nclass CountSorting : Sort\n{\n    public override List<int> Sorting(List<int> SortList)\n    {\n        int n = SortList.Count;\n        List<int> output = new List<int>();\n        List<int> count = new List<int>();\n\n        for (int i = 0; i < 1000; ++i)\n        {\n            count.Add(0);\n            output.Add(0);                \n        }\n\n        for (int i = 0; i < n; ++i)\n            ++count[SortList[i]];\n\n        for (int i = 1; i <= 999; ++i)\n            count[i] += count[i - 1];\n\n        for (int i = 0; i < n; ++i)\n        {\n            output[count[SortList[i]] - 1] = SortList[i];\n            --count[SortList[i]];\n        }\n\n        for (int i = 0; i < SortList.Count; i++)\n            SortList[i] = output[i];\n\n        return SortList;\n    }\n}\n```\n\n    ", "Answer": "\r\nYour sorting is being done in two classes - InsertionSorting & CountSorting.\n\nIf you want keep track of the statistics declare a variable in the class and increment it every iteration etc etc. Then you can see which one is more effective.\n\nE.g\n\n```\nclass InsertionSorting : Sort    \n{\n    private int iterations = 0\n    ...\n        for (int j= i+1; j>0; j--)\n        {\n            if (SortList[j-1] > SortList [j])\n            {\n                iterations++\n                ...\n```\n\n\nYou could also declare a startTime and endTime allowing to you determine the time the sort took. At the start of \"Sorting\" record the start time and just before you return record the end time. Write a method to report the difference.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Credit Card number Validation algorithm\r\n                \r\nIs there any other algorithm apart from Luhn's algorithm which is used for validation of credit card number as Visa card numbers are not passing the criteria of Luhn's algorithm.\n    ", "Answer": "\r\nCredit cards are now online validated.\n\nThere is no more criterion to validate a credit card else than directly querying the VISA service, which also validates the card against currently available plafond.\n\nIn a few words, today it's all online.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Number of Communities in Leiden Algorithm\r\n                \r\nTo approach a combinatorial problem I use communities detection and need to pre select the number of communities. This is possible in Louvain Method in communities package\n```\n# ! pip install communities\n\nimport numpy as np\nfrom communities.algorithms import louvain_method\n\nA = np.array([[1, 1, 0, 0, 0, 0, 1, 0], \n              [1, 0, 0, 1, 0, 0, 0, 0], \n              [0, 1, 1, 0, 0, 1, 0, 0],\n              [0, 0, 1, 1, 0, 0, 0, 0],\n              [0, 1, 0, 0, 0, 1, 0, 0], \n              [0, 0, 1, 0, 1, 0, 0, 0],\n              [0, 1, 0, 1, 0, 0, 1, 0], \n              [0, 1, 0, 1, 1, 0, 1, 1], \n              [1, 0, 0, 0, 0, 0, 0, 1], \n              [0, 1, 0, 0, 1, 0, 0, 0]])\n\nA_sq = np.matmul(A,A.transpose())\n\nnbr_communities = 3\ncommunities, _ = louvain_method(A_sq, nbr_communities)\n\n\nprint(\"len communities = \", len(communities), \"nbr_communities=\", nbr_communities)\nprint(communities,\"\\n\")\nfor com in communities:\n  print(A[list(com)], \"\\n\")\n\n```\n\nI couldn't find such a parameter for Leiden Algorithm in cdlib, or networkx. Is there an implementation of Leiden that lets select it, or another way to achieve this?\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Inversion's Number On Mergesort Algorithm\r\n                \r\nI have applied mergesort algorithm to an array in JAVA but I need to print the number of inversions realized.\nI have drawed a diagram of how I think the inversions are count (I don't undestand it very well).\nI counted 18 inversions.\nAny idea of how to get the inversion's number?\n\n```\npublic class MergesortAlgorithm{\n\n    public static void main(String[] args) {\n        int[] array = {1, 5, 4, 8, 10, 2, 6, 9, 12, 11, 3, 7};\n\n        System.out.println(\"Original array:\");\n        printArray(array);\n        mergesort(array);\n\n        System.out.println(\"\\nOrdered array:\");\n        printArray(array);\n\n        System.out.println(\"\\nNumber of inversions: ?\");\n    }\n    \n    public static void mergesort (int[] array){\n        // I got it to return the sorted array but I don't know how to get the number of inversions by now\n        // I am having trouble locating them\n\n        int inputLength = array.length;\n\n        // If the array have less than 2 elementos, it will be ordered\n        if (inputLength <2){\n            return;\n        }\n\n        // It obtains the median of the array\n        int midIndex = array.length / 2;\n\n        // It creates the two empty sub-arrays\n        int[] leftHalf = new int [midIndex]; // From 0 to mid\n        int[] rightHalf = new int [inputLength - midIndex]; // From midIndex+1 to inputLength\n\n        // It fills the leftHalf array from the original one\n        for (int i = 0; i < midIndex; i++) {\n            leftHalf[i] = array[i];\n        }\n\n        // It fills the rightHalf array from the original one\n        for (int i = midIndex; i < array.length; i++) {\n            rightHalf[i-midIndex] = array[i];   // \"i-midIndex\" because if i put \"i\" it starts in midIndex (in the new array)\n        }        \n        \n        //It runs recursively until I have less than two elements on the arrays\n        mergesort(leftHalf);\n        mergesort(rightHalf);\n\n        merge(array, leftHalf, rightHalf);\n    }\n\n    public static void merge (int[] array, int[] leftHalf, int[] rightHalf){\n\n        int leftSize = leftHalf.length;\n        int rightSize = rightHalf.length;\n\n        int i = 0;  // \"i\" will run through the leftHalf\n        int j = 0;  // \"j\" will run through the rightHalf\n        int k = 0;  // \"k\" will run throught the merged array (final array)\n\n        while (i < leftSize && j < rightSize) {  // It loops until we run out of elements in one of the two arrays\n            if (leftHalf[i] <= rightHalf[j]) {  // If element in leftHalf is smaller, we put it on the merged array\n                array[k] = leftHalf[i];\n                i++;\n            }\n            else {  // Otherwise, we put the element of rightHalf on the merged array\n                array[k] = rightHalf[j];\n                j++;\n            }\n            k++;\n        }\n\n        // At this point, maybe one of the arrays could have \"unrevised elements\" because of an odd initial array (I think)\n        // These two loops adds to the merged array the remaining items\n        while (i < leftSize) {\n            array[k] = leftHalf[i];\n            i++;\n            k++;\n        }\n\n        while (j < rightSize) {\n            array[k] = rightHalf[j];\n            j++;\n            k++;\n        }\n    }\n\n    public static void printArray (int[] array) {\n        System.out.printf(\"[ \");\n\n        for (int i = 0; i < array.length; i++) {\n            System.out.printf(\"%d \", array[i]);\n        }\n\n        System.out.println(\"]\");\n    }\n}\n```\n\nI don't exactly know how to count the inversions, but, In which part of the could I established a counter and when increase it?\n    ", "Answer": "\r\nYou can return an inversion count in both the ```\nmergesort```\n and ```\nmerge```\n functions. Then, ```\nmergesort```\n essentially returns the sum of the inversions from sorting both sides of the array and the number of inversions from merging.\nThe key here is that during the merging step, when you take an element from the right side, you essentially swap with every remaining element in the left side, so the number of inversions caused by that is the length of the left array minus the index of the current element reached in the left half.\nHere is a modified version of your code that handles counting inversions:\n```\npublic static long mergesort(int[] array) {\n    int inputLength = array.length;\n    if (inputLength < 2)\n        return 0;\n    int midIndex = array.length / 2;\n    int[] leftHalf = new int[midIndex];\n    int[] rightHalf = new int[inputLength - midIndex];\n    for (int i = 0; i < midIndex; i++) {\n        leftHalf[i] = array[i];\n    }\n    for (int i = midIndex; i < array.length; i++) {\n        rightHalf[i - midIndex] = array[i];\n    }\n    return mergesort(leftHalf) + mergesort(rightHalf) + merge(array, leftHalf, rightHalf);\n}\n\npublic static long merge(int[] array, int[] leftHalf, int[] rightHalf) {\n    int leftSize = leftHalf.length;\n    int rightSize = rightHalf.length;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    long inversions = 0;\n    while (i < leftSize && j < rightSize) {\n        if (leftHalf[i] <= rightHalf[j]) {\n            array[k] = leftHalf[i];\n            i++;\n        } else {\n            array[k] = rightHalf[j];\n            inversions += leftSize - i;\n            j++;\n        }\n        k++;\n    }\n    while (i < leftSize) {\n        array[k] = leftHalf[i];\n        i++;\n        k++;\n    }\n    while (j < rightSize) {\n        array[k] = rightHalf[j];\n        j++;\n        k++;\n    }\n    return inversions;\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "An algorithm to find number of numbers in a given limit 'l' (0 <= l <= 10^16) with atleast one occurence of a single digit number 'n'?\r\n                \r\nFirst of all, this is not a homework question. I was going through some combinatorial problems to solve algorithmically and I really just need to get a start towards solving this problem.\n\nMy initial thought was to declare an array of size 17 initialize it and run a loop to find the occurrence of a number, say '5' using a simple search. But the solution looks tedious and ugly. \n\n\nAny thoughts on how to represent a big number (10^16)?\nIs there a simple combinatorics formula/algorithm to solve this kind of problem?\n\n\nThanks.\n    ", "Answer": "\r\nAssuming you mean 0 <= l < 10^16 (not <= 10^16), all integers in this range have 10 digits (allowing for leading 0s).  There are 10^16 total values in this range.  I'd write the problem as:\n\nNumber with digit n = 10^16 - number WITHOUT digit n.\n\nSo how many ways can we not choose n in the 1's place?  9 ways.  How many ways can we not put an 'n' in the 10s OR 1's place?  9*9.  Following this logic, there are 9^16 ways of not putting an n in any of the 16 possible slots.\n\nSo your answer is 10^16 - 9^16.\n\nIf you actually meant 0 <= l <= 16, that range has only one more number, namely 10^16.  The leading digit of this number is 1, so if n = 1 you have exactly 10^16 - 9^16 + 1 values with a 1 in it.  If n != 1 then the previous answer holds.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Generalizng the Babylonian Square Root Algorithm to nth roots\r\n                \r\nI have been looking for root algorithms, and came across the Babylonian Algorithm. I really like it since it is simple and easy to understand. But the problem is that it only takes square roots, when I am making a function that can take the root of a number with any power. I am just trying it take take positive integer.\n\nHere is the function:\n\n```\ndouble functions::rot(double x, double y) {\n    double z = x;\n    double w = 1;\n    double e = 0.000001; \n    while (z - w > e){\n        z = (z + w) / 2;\n        w = x / z;\n    }\n    return z;\n}\n```\n\n\ny is the power. Does anyone have a way to change this algorithm so y is the power of the root? For example, if y = 3, it takes the cubed root.\n    ", "Answer": "\r\nThe comment that says to change ```\nw = x / z```\n to ```\nw = x / z*z```\n is only ```\n1/3```\n (pun intended) correct. You also need two more changes, which I think are obvious from this Python code:\n\n```\ndef rot(x, y): # \n    z = x\n    w = 1\n    e = 0.000001\n    while (z - w > e):\n        z = ((y - 1) * z + w) / y\n        w = x / (z ** (y - 1)) # a ** b is a to the power of b in Python\n                               # you might want to use modular exponentiation in C++\n                               # (or not if y is double...)\n    return z\n\n\nprint(rot(64, 3)) # prints 4\nprint(rot(59, 6)) # prints 1.9730678338673044\n```\n\n\nSee here for a reference. I suggest you read it, as it gives more in depth explanations.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Consecutive Negative Number Algorithm\r\n                \r\nFor the life of me I am stuck on how to keep track of the maximum number of consecutive negative numbers.\n\nI have a list of numbers that gets feed in to a class method during every iteration of a for loop. These numbers can ether be positive or negative and there are no clear way of knowing what will follow what. I need an algorithm so that it can calculate in real time (during loop execution) continuous the consecutive negative number. So at the end of the loop iteration the number stored in ```\nconsecutiveNegative```\nwill be an integer showing the largest consecutive times a negative number was followed by another negative number.\n\nThe below is what I've tried but it doesn't work...\n\n```\nclass Temp\n{\n    public int consecutiveNegative = 0;\n    private bool previousNegative = false;\n\n\n    public void iterCall(int x)\n    {\n        if(x > 0)\n        {\n            if(previousNegative == true)\n            {\n                consecutiveNegative = 0;\n            }\n            previousNegative = false;\n\n        }\n        else if (x < 0)\n        {\n            if (previousNegative == false)\n            {\n                consecutiveNegative = consecutiveNegative + 1;\n            }\n            previousNegative = true;\n        }\n    }\n\n\n}\n```\n\n\nAny pointers?\n\n\n\nBelow is some code to get people started messing around. \n\n```\nTemp classTmp = new Temp();\nList<int> nums = new List<int>();\nnums.Add(1);\nnums.Add(-1);\nnums.Add(1);\nnums.Add(-1);\nnums.Add(-1);\nnums.Add(-1);\nnums.Add(1);\nnums.Add(-1);\nnums.Add(-1);\nnums.Add(1);\n\nfor(int i = 0; i < nums.Count;i++)\n{\n    classTmp.iterCall(nums[i]);\n}\n```\n\n\n```\nclassTmp.consecutiveNegative```\n should be 3 after it finishes the loop.\n    ", "Answer": "\r\nTo my understanding, the code should be modified as follows. There was no variable to keep track of the maximum sequence, and the negativity of the last input does not need to be stored. At any time, the desired result can be obtained by evaluating\n\n```\nMath.Max(ConsecutiveNegative,CurrentConsecutiveNegative)\n```\n\n\nas the sequence might not be terminated.\n\n```\nclass Temp\n{\n    public int CurrentCosecutiveNegative = 0;\n    public int ConsecutiveNegative = 0;\n\n    public void iterCall(int x)\n    {\n        if(x >= 0)\n        {\n            ConsecutiveNegative\n              = Math.Max(ConsecutiveNegative,CurrentConsecutiveNegative);\n            CurrentConsecutiveNegative = 0;\n        }\n        else\n        {\n            CurrentConsecutiveNegative++;\n        }\n    }\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm: Factorialize a Number Douts\r\n                \r\nI'm doing the factorialize algorithm challenge on FCC and I would really appreciate if someone with a greater knowledge than me would explain me what's wrong in the thinking process of my code\n\nIm following these steps to factorialize a number:\n\n\nCreate a function with a parameter (num).\nI create an if statement to accomplish the next task: factorialize(0) should return 1. If (num === 0) {return 1;}\nCreate an array inside the function.\nCreate a loop to iterate through num-1 numbers and push them into the array. So we add the current number + all the previous values to the array. Example: If our number is 5 we add 5, 4, 3, 2, 1.\nUse the reduce method into the array to multiply the values of each number in the array (factorialize).\nReturn the given value.                                                                                               \n\n\nMy code:\n\n```\n    function factorialize(num) {\n\n      if (num === 0) { return 1; }\n\n      else {var array = [];\n\n          for(i = num; i >= 1; i--){\n              var newArray = array.push[i];\n              newArray.reduce(function(previousVal, currentVal){\n              return previousVal * currentVal;\n              });\n          }\n      }\n    }\n\n    factorialize(5);\n```\n\n\nI am mainly getting 2 douts now. This way to solve the algorithm might not be the most efficient one okay but:\n\n\nIs this a viable way to solve it?\nWhy am I getting \"cannot read property 'reduce' of undefined\".\n\n\nLink to the challenge:\nhttps://www.freecodecamp.org/challenges/factorialize-a-number\n    ", "Answer": "\r\nYou can simply try this:\n\n```\n  function factorialize(num) {\n\n      if (num === 0) { return 1; }\n\n      else {\n        for (var i = num - 1; i >= 1; i--) {\n          num *= i;\n        }\n          return num;\n      }\n    }\n\nfactorialize(5);\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm Number of Inversions (Python)\r\n                \r\nI'm attempting to complete a code assignment for the Algorithmic Toolbox offered by UC San Diego on Coursera.  The assignment requires that you count the number of inversions in a sequence of numbers using a variation of the merge-sort algorithm.  For a better description of the problem:\n\nhttps://i.stack.imgur.com/CCBU8.jpg\n\nI've used a variation of a merge-sort algorithm but am getting an incorrect answer and am frankly stuck.\n\nOf note is that before explaining what I've attempted is that this code involves recursion which I admit I'm finding tricky to understand.\n\nMostly beyond the usual debugging I've tried to compare my code to known solutions to see where I may be going wrong.  I could submit those as my solution but as far as I'm concerned that would be a cheat and I'd like to know where I've gone wrong with my code (and it's quite honestly driving me nuts).\n\n```\n#Uses python3\nimport sys\n\ndef merge_sort(A):\n    if len(A) <= 1:\n        return A, 0    \n    else:\n        middle = (len(A)//2)\n        left, count_left = merge_sort(A[:middle])\n        right, count_right = merge_sort(A[middle:])\n        result, count_result = merge(left,right)\n        return result, (count_left + count_right + count_result)\n\ndef merge(a,b):\n    result = []\n    count = 0\n    while len(a) > 0 and len(b) > 0:\n        if a[0] < b[0]:\n            result.append(a[0])\n            a.remove(a[0])\n        else:\n            #count = count + (len(a) - 1)\n            result.append(b[0])\n            b.remove(b[0])\n            count += (len(a) - 1) #this is the important line\n    if len(a) == 0:\n        result = result + b\n    else:\n        result = result + a\n    return result, count \n\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    n, *a = list(map(int, input.split()))\n    c = n * [0]\n    array, inversion = merge_sort(a)\n    print(array)\n    print(inversion)\n```\n\n\nListed below are two sample inputs I have been using in my testing:\n\n```\n# ex 1:\n3\n3 1 2\n```\n\n\nNote that the first digit is the number of values in the sequence (required for the grader).  Expected answer for inversions is 2.  I'm getting 0 with my code.\n\n```\n# ex 2:\n6\n3 1 9 3 2 1\n```\n\n\nExpected answer for inversions is 9.  I'm getting 4.\n    ", "Answer": "\r\nTwo corrections: \n\n```\nif a[0] <= b[0]:```\n (note that a lot of internet examples and courses ignore ```\nor equal```\n case, destroying intrinsic algorithm stability, this case also is important for correct inv. counting)  \n\nand ```\ncount += len(a)```\n - we need to account that all items in ```\na```\n form inversions with current ```\nb```\n item\n\n```\ndef merge(a,b):\n    result = []\n    count = 0\n    while len(a) > 0 and len(b) > 0:\n        if a[0] <= b[0]:   \n            result.append(a[0])\n            a.remove(a[0])\n        else:\n            result.append(b[0])\n            b.remove(b[0])\n            count += len(a)\n    if len(a) == 0:\n        result = result + b\n    else:\n        result = result + a\n    return result, count\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "modulo algorithm for prime numbers\r\n                \r\nI'm trying to get a program to get me the prime numbers from a certain range (user inputs the maximum number) and this variable called ```\nmaxNumber```\n will be used to stop the while loop. The control variable used starts at the first prime number 2 and is called ```\ni```\n and will be used to print out the prime numbers (when found) and natural numbers, respectively.\n\nMy problem is that I'm not really sure if my algorithm inside the main method and mutator method are both correct and I have a problem where I am putting the user input (the max number) but nothing is happening at all after that -- basically, it is compiling and running but not responding when inputting the first variable.\n\nHelp would very much be appreciated !\n\n```\nimport java.util.*;\npublic class PrimeCalculator {\n\n    private static int maxNumber;\n    private static int divisibleCount;\n\npublic static void main(String[] args){\n    Scanner scanner = new Scanner(System.in);\n    int i = 2;\n\n    System.out.println(\"Enter the maximum amount of numbers you want to find prime numbers within: \");\n    maxNumber = scanner.nextInt();\n\n    while(i <= maxNumber)\n        isPrime(i);\n            if(divisibleCount < 2)\n        System.out.println(i + \" is a prime number\");\n            if(divisibleCount > 2)\n        System.out.println(i + \" is not a prime number.\");\n            divisibleCount = 0;\n            i++;\n    }\n\npublic static void isPrime(int n) {\n    divisibleCount = 0;\n    for(int x = 1; x <= maxNumber; x++ )\n         if(n%x == 0)\n             divisibleCount++;\n             }\n\n}\n```\n\n    ", "Answer": "\r\nAlthough I do not think it is clear what you're asking, I will make a few suggestions.\n\n\nFirst of all, at your main method, change ```\nif(divisibleCount < 2)```\n to ```\nif(divisibleCount <= 2)```\n because primes are divided by 1 and themselves (so, \"divisibleCount\" is 2).\nAlso, in your while loop, you should check if ```\ni```\n equals one and say that it is not a prime.\nAs said in the comments, at the isPrime method , you can change the loop to ```\nfor(int x = 1; x <=```\n```\nn```\n```\n; x++ )```\n as it is impossible for a number to be perfectly divided by soomething greater (i.e. 6 divided by 10 cannot have modulo 0) \n\nEDIT: As dcsohl suggested, it is even better to have ```\nfor(int x = 1; x <= Math.sqrt(n); x++)```\n (see comment)\nCheck your syntax. At the while loop, you do not open and close brackets, so only ```\nisPrime(i)```\n gets executed in the loop. Imagine\n\n```\nwhile(i <= maxNumber){\n    isPrime(i);\n}\nif(divisibleCount < 2) // ....etc\n```\n\n\nAnd since i is never incremented in the loop, it it always 2, so ... we have got an infinite loop! \n(General improvement) Surround the ```\nmaxNumber = scanner.nextInt();```\n in a try-catch block to avoid crashing when entering say, a string instead of an int.\n\n\nThese are the problems I found, hope I helped you. \n\n\n\nPS. If you have any other question like this (i.e. general code checking), you should ask them at Code Review rather than Stack Overflow\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "arrange numbers to form largest number - proof of algorithm\r\n                \r\nThere is well known algorithmic problem, given array of numbers e.g. ```\n[1, 20, 3, 14]```\n arrange numbers in such a way that they form biggest number possible, in this case ```\n320141```\n.\n\nThere is plenty of solutions on SO and other sites, using the following algorithm:\n\n```\nString[] strs = new String[nums.length];\nfor(int i=0; i<nums.length; i++){\n    strs[i] = String.valueOf(nums[i]);\n}\n\nArrays.sort(strs, new Comparator<String>(){\n    public int compare(String s1, String s2){\n        String leftRight = s1+s2;\n        String rightLeft = s2+s1;\n        return -leftRight.compareTo(rightLeft);\n\n    }\n});\n\nStringBuilder sb = new StringBuilder();\nfor(String s: strs){\n    sb.append(s);\n}\n\nreturn sb.toString();\n```\n\n\nIt certainly works, but I cannot find a formal proof of this algorithm. There is one answer on quora, but I wouldn't call it a formal proof.\n\nDoes anyone can give me a sketch of proof or reference some book or article? How one can get on this solution from the original problem? \n\nPS I tried to solve original problem but my solution was wrong, I couldn't get it right, and now I could not fully understand solution.\n    ", "Answer": "\r\nRegarding notation: I will use pipes to separate the numbers so it's\neasier to see the sequence of numbers and the resulting number at the\nsame time:  3|20|14|1 \n\nLet us assume for the moment that the relation -- let's call it R\nrepresented by the ```\n<=```\n operator -- that is defined by the compare\nfunction is a total order. It is determined by the expression\n\n```\n-(a+b).compareTo(b+a)\n```\n\n\nIntuitively it says that if we have two numbers a and b and b|a is\nlarger than a|b, b should get a higher rank than a, i.e. it should\noccur left of a in the solution. If a|b is larger than b|a, it's the other way\nround. If a|b = b|a, the order does not matter.\n\nOne important thing to note is that this relation not only affects two\nnumbers a and b considered in isolation but also tells us something\nabout the resulting number the two numbers are embedded in:\n\nIf a<=b, then x|a|b|y <= x|b|a|y\n\nwith x and y being numbers of\narbitrary lengths. In other words: If we have a sequence of numbers\nand we swap two adjacent numbers a and b with a<=b, the resulting\nnumber will be greater or equal afterwards.\n\nExample: 3|14|20|1 <= 3|20|14|1 because 14 <= 20\n\nWe can now lead the assumption that the solution is not the one\nimplied by our relation R to a contradiction: Let's assume the\nsolution is some specific sequence not conforming to R. Since R is a\ntotal order, we can rearrange the numbers to match R by swapping\nadjacent elements until the order conforms to R. This reordering can\nbe compared to a bubble sort. However, in each swap operation that\nleads us to the new order, the resulting number increases! This is\nclearly a contradiction, so the original order cannot be the the\nsolution.\n\nAll that is left to show is that R is a total order, i.e. it is\ntransitive, antisymmetric and total. Since you asked for a sketch of\nthe proof, I'll omit this part. The essential part is proving\ntransitivity, i.e. that\n\na <= b and b <= c implies a <= c.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Enumerating all strings meeting given restrictions\r\n                \r\nI'm looking for the name of the following class of problem, so that I can google for effective algorithms and more information.\n\nI have an alphabet with three characters {-1, 0, 1}.\n\nI need to effectively generate all strings of length 24 which are mostly {0} but have zero to eight {1,-1} characters distributed in certain patterns.  (The patterns involve restrictions on the number and pairings of {-1}).  The total number strings that meet my criteria are quite modest: about 128,000.\n\nSo what is the name for this class of problem/algorithm?  \n    ", "Answer": "\r\nI'm not sure there's a well-defined \"algorithm class\" for this this; it's just an exercise in combinatorics. You can do the generation in three steps:\n\n\nGenerate all 24-bit numbers with 8 or fewer bits set (you may be able to speed this up a bit if you precompute some lookup tables)\nFor each 24-bit number with n bits set, iterate over all n-bit numbers\nIf the kth bit of the n-bit number is 0, then the kth set bit of the 24-bit number prints as -1, otherwise it prints as 1\n\n\nTo explain steps 2-3 a bit better say your 24-bit number has 4 bits set and looks like\n\n```\n0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0\n```\n\n\nThen, we iterate over all 16 4-bit numbers from ```\n0 0 0 0```\n to ```\n1 1 1 1```\n, and, for example:\n\n```\n0 0 0 0 gives the string  0 0 0 -1 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 0 -1 0 0 0 0\n0 1 1 0 gives the string  0 0 0 -1 0 0 0 0 0 0 0 0  1  1 0 0 0 0 0 -1 0 0 0 0\n0 1 0 0 gives the string  0 0 0 -1 0 0 0 0 0 0 0 0  1 -1 0 0 0 0 0 -1 0 0 0 0\n1 1 1 1 gives the string  0 0 0  1 0 0 0 0 0 0 0 0  1  1 0 0 0 0 0  1 0 0 0 0\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "void function bubble_sort doesn't sort arrays\r\n                \r\nA am trying an implementation of some sorting algorithms and I have to calculate how much time they spend. This is the function I wrote:\n\n```\nvoid bubble_sort(int A[], int len) {\nbool ord = false;\n    for (int i=0; i<len-1 && ord==false; i++) {\n        ord = true;\n        for (int j=len-1; j>i; j--) {\n            if (A[j]-1>A[j]) {\n                ord = false;\n                swap(A[j]-1, A[j]);\n            }\n        }\n    }\n}\n```\n\n\nAnd of course here there is a typical ```\nswap()```\n function:\n\n```\nvoid swap(int x, int y) {\n    int d;\n    d = x;\n    x = y;\n    y = d;\n}\n```\n\n\nI am not having troubles with Insertion Sort, Selection Sort and Merge Sort. By the way ```\nbubble_sort```\n is not sorting the numbers in my array.\n\nI cannot find what's wrong. Do you have any ideas?\n    ", "Answer": "\r\nIn C, function parameters are passed by value, not by reference.\nyour ```\nswap()```\n function does nothing (it doesn't even return... didn't your compiler complain?)\n\nTo actually sort, you have to change ```\nswap()```\n to\n\n```\nvoid swap(int *x, int *y) {\n    int d = *x;\n    *x = *y;\n    *y = d;\n    return;\n}\n```\n\n\nand invoke it with\n\n```\nswap(&A[j-1], &A[j]);\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "merge sort algorithm - counting inversions\r\n                \r\nUnderstandably there are multiple threads created for merge sort algorithms and counting inversions. While this is a homework problem for a course on coursera, I am having difficulty in understanding where my implementation is going wrong in counting number of inversions.  I seem to be getting very unrealistically low values for few test examples as compared to others taking the course. \nBelow is my code:\n\n```\ncount = 0\ndef sort_list(unsortedlist):\n\n    m = len(unsortedlist)\n\n    A_list = unsortedlist[:m/2]\n    B_list = unsortedlist[m/2:]\n\n\n    if len(A_list) > 1: # if the list is longer thn 2 items, break it up\n        A_list = sort_list(A_list)\n\n\n    if len(B_list) > 1: # breaking and sorting second part\n        B_list = sort_list(B_list)\n\n    return merge_sort(A_list,B_list) # merge the smaller lists to return either a-list/b_list or full_list        \n\ndef merge_sort(a_list,b_list):\n\n    initiallist = a_list+b_list\n    final_list = []\n    i = 0\n    j = 0\n    global count\n\n    while len(final_list) < (len(initiallist)):\n\n        if len(a_list) != 0 and len(b_list) != 0:\n            if  a_list[i] < b_list[j]:\n                final_list.append(a_list.pop(i))\n\n            elif a_list[i] > b_list[j]:\n                final_list.append(b_list.pop(j))\n                count += 1\n\n            elif a_list[i] == b_list[j]:\n                final_list.append(a_list[i])\n                final_list.append(b_list[j])\n\n\n        elif len(b_list) == 0 :\n            final_list+=a_list\n\n\n        elif len(a_list) == 0 :\n            final_list+=b_list\n\n    print count\n\n    return final_list\n```\n\n    ", "Answer": "\r\nThe Problem is, that you are counting only 1 inversion, if ```\na_list[i] > b_list[j]```\n is true.  \n\nBut since both lists are sorted at this point, it means you get an inversion for every element that is in ```\na_list```\n. So you have to use ```\ncount += len(a_list)```\n instead of ```\ncount += 1```\n.\n\nExample:\n\n```\na_list = [5,6,7,8]```\n and ```\nb_list = [1,2,3,4]```\n\n\n\n```\n5 > 1```\n\n\n\n```\nfinal_list = [1]```\n\nyou get four inversions: (5,1), (6,1), (7,1), (8,1)\n\n```\n5 > 2```\n\n\n\n```\nfinal_list = [1,2]```\n\nyou get four inversions: (5,2), (6,2), (7,2), (8,2)\n\n```\n5 > 3```\n\n\n\n```\nfinal_list = [1,2,3]```\n\nyou get four inversions: (5,3), (6,3), (7,3), (8,3)\n\n```\n5 > 4```\n\n\n\n```\nfinal_list = [1,2,3,4]```\n\nyou get four inversions: (5,4), (6,4), (7,4), (8,4)\n\n```\nb_list```\n is empty\n\n\nappend ```\na_list```\n to ```\nfinal_list```\n and get ```\nfinal_list = [1,2,3,4,5,6,7,8]```\n\nno more inversions \n\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "void function bubble_sort doesn't sort arrays\r\n                \r\nA am trying an implementation of some sorting algorithms and I have to calculate how much time they spend. This is the function I wrote:\n\n```\nvoid bubble_sort(int A[], int len) {\nbool ord = false;\n    for (int i=0; i<len-1 && ord==false; i++) {\n        ord = true;\n        for (int j=len-1; j>i; j--) {\n            if (A[j]-1>A[j]) {\n                ord = false;\n                swap(A[j]-1, A[j]);\n            }\n        }\n    }\n}\n```\n\n\nAnd of course here there is a typical ```\nswap()```\n function:\n\n```\nvoid swap(int x, int y) {\n    int d;\n    d = x;\n    x = y;\n    y = d;\n}\n```\n\n\nI am not having troubles with Insertion Sort, Selection Sort and Merge Sort. By the way ```\nbubble_sort```\n is not sorting the numbers in my array.\n\nI cannot find what's wrong. Do you have any ideas?\n    ", "Answer": "\r\nIn C, function parameters are passed by value, not by reference.\nyour ```\nswap()```\n function does nothing (it doesn't even return... didn't your compiler complain?)\n\nTo actually sort, you have to change ```\nswap()```\n to\n\n```\nvoid swap(int *x, int *y) {\n    int d = *x;\n    *x = *y;\n    *y = d;\n    return;\n}\n```\n\n\nand invoke it with\n\n```\nswap(&A[j-1], &A[j]);\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Karatsuba algorithm working for small numbers but not for big ones, can't see why\r\n                \r\nI am relatively new to programming and am not looking to be particularly efficient with this algorithm regarding running time but only trying to replicate the Karatsuba algorithm and make it work.\n\nI have tried it with many numbers and small numbers (like y = 40004009343254,\nx = 40004001343234) work fine and when the numbers increase in size (like y = 4000400934325423423, x = 4000400134323432423), the algorithm stops working correctly and returns similar but incorrect answers.\n\nAny clue about what could be wrong would be very much appreciated!\n\nNOTE: This thread is not about efficiency but about getting the correct result. That said, comments about efficiency will be taken into account and appreciated too.\n\nCODE:\n\n```\ny = 4000400934325423423\nx = 4000400134323432423\n\ndef firsthalf(array):\n    firsthalf = array[:len(array)/2]\n    return firsthalf\ndef secondhalf(array):\n    secondhalf = array[len(array)/2:]\n    return secondhalf\ndef arrayjoint(array):\n    jointarray = long(''.join(map(str,array)))\n    return jointarray\ndef karatsuba(x,y):\n    if len(str(x)) == 0 or len(str(y)) == 0:\n        return \"Can't multiply by a NULL value!\"\n    if x < 10 or y < 10:\n        return x * y\n    x_array = [long(i) for i in str(x)]\n    y_array = [long(i) for i in str(y)]\n    firsthalf_xarray = firsthalf(x_array)\n    secondhalf_xarray = secondhalf(x_array)\n    firsthalf_yarray = firsthalf(y_array)\n    secondhalf_yarray = secondhalf(y_array)\n    half_size = max(len(secondhalf_yarray), len(secondhalf_xarray))\n    firsthalf_x = arrayjoint(firsthalf_xarray)\n    secondhalf_x = arrayjoint(secondhalf_xarray)\n    firsthalf_y = arrayjoint(firsthalf_yarray)\n    secondhalf_y = arrayjoint(secondhalf_yarray)\n    sum_x = firsthalf_x + secondhalf_x\n    sum_y = firsthalf_y + secondhalf_y\n    first = karatsuba(firsthalf_x,firsthalf_y)\n    second = karatsuba(sum_x, sum_y)\n    third = karatsuba(secondhalf_x,secondhalf_y)\n    return first * 10 ** (2 * half_size) + ((second - first - third) * (10 ** half_size)) + third\n\nresult = karatsuba(x,y)\nresult_correct = x*y\nresult = str(result)\nresult_correct = str(result_correct)\nfile = open(\"result.txt\", \"w\")\nfile.write(str(result)  + \"\\n\" + str(result_correct))\nfile.close\n```\n\n    ", "Answer": "\r\nIt's not an issue with floats, because Python has bignums.\n\nThe issue is that, when the inputs have disparate lengths, you split them in different places, which defeats the algebra underlying Karatsuba's algorithm. By splitting at index ```\n-half_size```\n (i.e., the second half has ```\nhalf_size```\n digits), we ensure that ```\n10**half_size```\n is the proper base. Try this:\n\n```\ndef digits_to_long(x_array):\n    return long(''.join(x_array)) if x_array else 0L\n\n\ndef karatsuba(x, y):\n    if x < 10 or y < 10:\n        return x * y\n    x_array = str(x)\n    y_array = str(y)\n    half_size = max(len(x_array), len(y_array)) // 2\n    firsthalf_x = digits_to_long(x_array[:-half_size])\n    secondhalf_x = digits_to_long(x_array[-half_size:])\n    firsthalf_y = digits_to_long(y_array[:-half_size])\n    secondhalf_y = digits_to_long(y_array[-half_size:])\n    sum_x = firsthalf_x + secondhalf_x\n    sum_y = firsthalf_y + secondhalf_y\n    first = karatsuba(firsthalf_x, firsthalf_y)\n    second = karatsuba(sum_x, sum_y)\n    third = karatsuba(secondhalf_x, secondhalf_y)\n    return first * 10**(2 * half_size) + (\n        (second - first - third) * (10**half_size)) + third\n\n\nimport random\nfor i in range(10000):\n    x = random.randrange(10**18)\n    y = random.randrange(10**18)\n    assert karatsuba(x, y) == x * y\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What is the complexity of 2 loops with the inside loop starting at the first ones actual index?\r\n                \r\npeople of the internet,\nI am studying algorithms and their complexity and I wrote a \"naive\" code for finding the number of inversions in an Array. First, it seemed easy and then I started wondering if that j=i+i changes the second loop's complexity from O(n) in a worst-case scenario to something lower ?\nHere is my code written in java :\n```\npublic static void naiveInversionCount(int[] T){\n    int count = 0;\n    for(int i = 0; i < T.length -1; i++){ // O(n)\n        for(int j = i+1; j < T.length; j++){ // O(n) ???\n            if(T[i]> T[j]) count++; // O(1)\n        }\n    }\n    System.out.println(\"Naive method returns : \" + count);\n}\n```\n\nThank you very much\n    ", "Answer": "\r\nThe outer loop runs exactly n times.\nThe inner loop runs n−1, n−2, …, 0 times per outer loop. That is, on average, n/2 times.\nAnd ```\ncount++```\n runs exactly once per loop.\nThus the nested loop runs 1·n(n/2) times, which is in 𝑂(n²).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Luhn algorithm id number\r\n                \r\nI'm using the Luhn algorithm to find ids check number.\nfor Example - input - 12345678 , output - 2.\nI'm trying to do it in the most efficient way possible, as well as in the fewest lines possible.\nSo far I wrote this :\n```\nID = input(\"Enter your first 8 digits of your id : \")\nprint(10 - sum(map(lambda a: a if a <= 9 else int(str(a)[0]) + int(str(a)[1]), [int(ID[i]) if i % 2 \n== 0 else int(ID[i]) * 2 for i in range(8)])) % 10) # if digit is 0 prints 10\n```\n\nI'm not satisfied with the int string conversions.\nBut I'm Looking for any improvement.\n    ", "Answer": "\r\nand welcome to StackOverflow!\nSuper short, but with a dependency\nIf you can rely on external dependencies, take a look at the ```\nluhn```\n package. You can install it with ```\npip install luhn```\n, and then your program becomes:\n```\nfrom luhn import generate\n\nID = input(\"Enter your first 8 digits of your id : \")\nprint(generate(ID))\n```\n\nCan't get much cleaner than this.\nChanging your code\nBut let's suppose you don't want to use a third-party package. Let us first put your code in a function and format it:\n```\ndef luhn(number):\n    return (\n        10 - sum(\n            map(\n                lambda a: a if a <= 9 else int(str(a)[0]) + int(str(a)[1]),\n                [\n                    int(number[i])\n                    if i % 2 == 0\n                    else int(number[i]) * 2\n                    for i in range(8)\n                ]\n            )\n        ) % 10\n    )\n```\n\nStep 1: ```\nlist```\n to generator\nYou can simply replace your list comprehension with a generator expression to make it a bit faster since you don't need to build the whole list first:\n```\ndef luhn(number):\n    return (\n        10 - sum(\n            map(\n                lambda a: a if a <= 9 else int(str(a)[0]) + int(str(a)[1]),\n                ( # <--- changed this\n                    int(number[i])\n                    if i % 2 == 0\n                    else int(number[i]) * 2\n                    for i in range(8)\n                ) # <--- changed this\n            )\n        ) % 10\n    )\n```\n\nStep 2: Get rid of ```\nmap```\n\nI personally don't like using ```\nmap```\n when you have to write a lambda as well. It just kills the two purposes of ```\nmap```\n: simpler code and fast, C-speed execution.\nFor instance, ```\nmap(int, myseq)```\n is great, extremely fast and clean. But ```\nmap(lambda x: int(x), myseq)```\n is cumbersome (you have to give a name ```\nx```\n to ```\nmyseq```\n items) and slow (because lambdas don't benefit from the C-like speed of builtin functions). In this case, I would say that ```\nint(x) for x in myseq```\n reads much nicer.\nApplying that to the previous function:\n```\ndef luhn(number):\n    return (\n        10 - sum(\n            a if a <= 9 else int(str(a)[0]) + int(str(a)[1])\n            for a in (\n                int(number[i])\n                if i % 2 == 0\n                else int(number[i]) * 2\n                for i in range(8)\n            ) # bonus: we have one less indentation level!\n        ) % 10\n    )\n```\n\nStep 3: Get rid of one ```\nif-else```\n\nIn the second ```\nfor```\n loop, we have ```\nx if i % 2 == 0 else x * 2```\n where ```\nx = int(number[i])```\n. But since ```\ni % 2```\n is either ```\n0```\n or ```\n1```\n, you can benefit from this and write ```\nx * (1 + i%2)```\n. So our function becomes:\n```\ndef luhn(number):\n    return (\n        10 - sum(\n            a if a <= 9 else int(str(a)[0]) + int(str(a)[1])\n            for a in (int(number[i]) * (1 + i%2) for i in range(8))\n        ) % 10\n    )\n```\n\nGetting prettier, right?\nStep 4: Split \"even\" and \"odd\" characters\nNow think with me. When will ```\ni % 2```\n be equal to ```\n0```\n and when will it be ```\n1```\n? It is ```\n0```\n when ```\ni```\n is even, and ```\n1```\n when ```\ni```\n is odd. So, in the expression ```\nint(number[i]) * (1 + i%2)```\n, we will have ```\nint(number[i])```\n when ```\ni```\n is even, and ```\nint(number[i]) * 2```\n when ```\ni```\n is odd. Supposing that ```\nnumber```\n is ```\n314159```\n, then the \"even characters\" (characters in even positions) ```\n345```\n are returned as-is, and the \"odd characters\" ```\n119```\n are multiplied by ```\n2```\n.\nMoreover, the expression ```\na if a <= 9 else int(str(a)[0]) + int(str(a)[1])```\n is also trivial for even characters: since they are returned as-is, they obviously satisfy ```\na <= 9```\n, and then they are also returned as-is.\nNoting that even and odd characters can be obtained by slicing:\n```\ns = 314159\neven = s[::2] # 345\nodd = s[1::2] # 119\n```\n\nSo we can split our function into two parts. It gets bigger now, but afterwards it'll get better:\n```\ndef luhn(number):\n    evens = number[::2]\n    even_sum = sum(map(int, evens)) # sum even characters\n\n    odds = number[1::2]\n    odd_sum = sum(\n        a if a <= 9 else int(str(a)[0]) + int(str(a)[1])\n        for a in (int(odd) * 2 for odd in odds)\n    ) # sum odd characters\n\n    return (\n        10 - (even_sum + odd_sum) % 10\n    )\n```\n\nStep 5: More refactoring\nIn \"```\na if a <= 9 else int(str(a)[0]) + int(str(a)[1])```\n\", what this piece of code is saying is: sum the digits of ```\na```\n. Because, if ```\na```\n has only one digit (```\na <= 9```\n) we are just returning it; otherwise, we are summing its first and second digits.\nBut then, taking a closer look, we are summing this sum of digits for all numbers yielded by ```\nstr(int(odd) * 2) for odd in odds```\n! This means that we can first concatenate all the digits, and then sum them all:\n```\ndef luhn(number):\n    evens = number[::2]\n    even_sum = sum(map(int, evens)) # sums even characters\n\n    odds = number[1::2]\n    multiplied_by_two = (str(int(odd) * 2) for odd in odds)\n    all_digits = ''.join(multiplied_by_two)\n    odd_sum = sum(map(int, all_digits))\n\n    return (\n        10 - (even_sum + odd_sum) % 10\n    )\n```\n\nAnd we finally merge the two sums into one:\n```\ndef luhn(number):\n    evens = number[::2]\n\n    odds = number[1::2]\n    multiplied_by_two = (str(int(odd) * 2) for odd in odds)\n    all_digits = ''.join(multiplied_by_two)\n\n    total_sum = sum(map(int, evens + all_digits))\n\n    return (\n        10 - total_sum % 10\n    )\n```\n\nNow we just collapse into a single expression:\n```\ndef luhn(number):\n    return (\n        10 - sum(\n            map(\n                int,\n                number[::2] + ''.join(\n                    str(int(odd) * 2) for odd in number[1::2]\n                )\n            )\n        ) % 10\n    )\n```\n\nFinally, we make it a one-liner and finish your program:\n```\nID = input(\"Enter your first 8 digits of your id : \")\nprint(10 - sum(map(int, ID[::2] + ''.join(str(int(odd) * 2) for odd in ID[1::2]))) % 10)\n```\n\nSome metrics\nBy comparing our solutions:\n```\nimport timeit\n\nID = '12345678'\nprint(timeit.timeit(lambda: 10 - sum(map(lambda a: a if a <= 9 else int(str(a)[0]) + int(str(a)[1]), [int(ID[i]) if i % 2\n== 0 else int(ID[i]) * 2 for i in range(8)])) % 10, number=1000000))\nprint(timeit.timeit(lambda: 10 - sum(map(int, ID[::2] + ''.join(str(int(odd) * 2) for odd in ID[1::2]))) % 10, number=1000000))\n```\n\nyou can see that the latter is ~30% faster.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Understanding a median selection algorithm?\r\n                \r\nI'm currently learning algorithms in my spare time but have the following question while studying chapter 3 select() algorithms.\n\nI understand that I can use the select() algorithm to find the median number (n/2 th smallest number) if I was using a array from A to n numbers.\n\n1) but this is the bit I'm struggling to understand. A = [3, 7, 5, 1, 4, 2, 6, 2]. suppose that is the array. what is contents of the array after each call to Partition(), and the parameters in each recursive call of Select().\n\ncan some one explain how they are working this out please?\n\nbelow is the pseudo-code for the 2 algorithms.\n\n```\nSelect(A, p, r, k) {\n    /* return k-th smallest number in A[p..r] */\n    if (p==r) return A[p] /* base case */\n    q := Partition(A,p,r)\n    len := q – p + 1\n    if (k == len) return A[q]\n    else if (k<len) return Select(A,p,q-1,k)\n    else return Select(A,q+1,r,k-len)\n}\n```\n\n\nand the second code is\n\n```\nPartition(A, p, r) { /* partition A[p..r] */\n    x := A[r] /* pivot */\n    i := p-1\n    for j := p to r-1 {\n        if (A[j] <= x) {\n            i++\n            swap(A[i], A[j])\n        }\n    }\n    swap(A[i+1], A[r])\n    return i+1\n}\n```\n\n\nThe book I am using is called The Derivation of Algorithms by Anne Kaldewaij.\n    ", "Answer": "\r\nThis algorithm works in two steps.  The partitioning step works by picking some pivot element, then rearranging the elements of the array such that everything less than the pivot is to one side, everything greater than the pivot is to the other side, and the pivot is in the correct place.  For example, given the array\n\n```\n3  2  5  1  4\n```\n\n\nIf we pick a pivot of 3, then we might partition the array like this:\n\n```\n2  1  3  5  4\n+--+  ^  +--+\n ^    |    ^\n |    |    +--- Elements greater than 3\n |    +-------- 3, in the right place\n +------------- Elements less than 3\n```\n\n\nNotice that we haven't sorted the array; we've just made it closer to being sorted.  This is, incidentally, the first step in quicksort.\n\nThe algorithm then uses the following logic.  Suppose that we want to find the element that belongs at index k in sorted order (the kth smallest element).  Then, in relation to the pivot we picked, there are three options:\n\n\nThe pivot is at position k.  Then, since the pivot is in the right place, the value we're looking for must be the pivot.  We're done.\nThe pivot is at position greater than k.  Then the kth smallest element must be in the portion of the array before the pivot, so we can recursively search that portion of the array for the kth smallest element.\nThe pivot is at position smaller than k.  Then the kth smallest element must be somewhere in the upper region of the array, and we can recurse there.\n\n\nIn our case, suppose that we want the second-smallest element (the one at position 2).  Since the pivot ended up at position 3, this means that the second-smallest element must be somewhere in the first half of the array, so we would recurse on the subarray\n\n```\n2  1\n```\n\n\nIf we wanted the actual median element, since the pivot ended up smack in the middle of the array, we would just output that the median is 3 and be done.\n\nFinally, if we wanted something like the fourth-smallest element, then since the pivot is before position 4, we would recurse on the upper half of the array, namely\n\n```\n5  4\n```\n\n\nand would look for the first smallest element here, since there are three elements before this region.\n\nThe rest of the algorithm are the details of how to do the partitioning step (which is probably the most involved part of the algorithm) and how to do the three-way choice about whether to recurse or not (a bit less difficult).  Hopefully, though, this high-level structure helps the algorithm make more sense.\n\nHope this helps!\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Process allocation algorithm\r\n                \r\nI read some material on Algorithms, and ran into a problem.\n\nWe have n processes, each with a predetermined start and end time. We want to use the minimum number of processors in order to run all these processes.\n\nConsider the following algorithm:\n\n\n  In step i, select maximum number of currently unallocated processes that don't overlap, and allocate them to processor i.\n\n\nThis algorithm finishes when no processes remain unallocated. The maximum i is the output of this algorithm. What is the minimum value of n such that this algorithm does not produce an optimal answer?\n\nShort answer: n=5. I don't know how this answer is reached, though. Can you explain?\n    ", "Answer": "\r\nWhat you have here is a greedy algorithm. A greedy algorithm does the best it can at each step, in the hope that this will give an optimal solution overall. It usually gives a fast algorithm, and it sometimes, but not always, leads to an optimal solution.\n\nYour algorithm is a good example of a greedy algorithm that sometimes provides an optimal solution and sometimes doesn't. It has the advantage that it runs fast in giving an approximation to an optimal solution; that's sometimes better than a very slow algorithm that gives an optimal solution.\n\nThere's an important ambiguity in your question. You say that on step i you should choose the maximum number of the remaining processes that can be scheduled on processor i. Let's suppose that the maximum number of processes that can be scheduled at the moment is 2. What if there are lots of ways of choosing 2 non-overlapping processes? How do we decide which 2 processes?\n\nI'm going to resolve the ambiguity carefully, by side-stepping it. Let's say that the algorithm will non-deterministically choose a maximal set of processes to schedule on the current processor. That means that we can then turn your question into two different ones:\n\n\nWhat's the smallest n for which this algorithm might be sub-optimal? That is, let's suppose the algorithm is unlucky in its choice of maximal set. How quickly can things go wrong?\nWhat's the smallest n for which this algorithm is guaranteed to be sub-optimal? That is, let's suppose the algorithm is always lucky, and chooses the right maximal set if there is one. How quickly can things then go wrong?\n\n\nYour statement that n=4 tells me that you're interpreting it as the first question. I think the second question has an answer of n=7, though I'm not certain. This is an interesting enough issue that I think I will ask a follow-up question with my thoughts about that!\n\nHere's how to see that things can go wrong, if we're unlucky, with n=4. Let's talk in terms of time units. For this example, we'll say that there are four time units (four hours of the day, if you like, and each process takes a whole number of hours, starting and finishing on the hour). Let's suppose we have four processes we need to run:\n\n\n```\n[1]```\n (i.e., the process just takes the first time unit)\n```\n[2,3,4]```\n (i.e., the process needs time units 2 to 4)\n```\n[1,2,3]```\n (etc.)\n```\n[4]```\n\n\n\nNow, there's an allocation that works with just two processors. On the first processor we run ```\n[1]```\n and ```\n[2,3,4]```\n; on the second processor we run ```\n[1,2,3]```\n and ```\n[4]```\n. And our greedy algorithm might find this solution and give us something optimal. But it might schedule ```\n[1]```\n and ```\n[4]```\n to run on the first processor, since this is also a maximal set (it puts two processes onto the first processor). If it does so, then it's left with ```\n[1,2,3]```\n and ```\n[2,3,4]```\n, which can't be run together, so it'll end up using three processors.\n\nIt can go wrong, then, with n=4. Can it go wrong with n=3? I don't think so. There are three possibilities for what the optimal solution might look like: it needs only 1 processor, or 2 processors, or 3 processors. If the optimal solution requires only 1 processor, then that means all three processes can be scheduled at the first step, and our greedy algorithm will find this solution. If it takes 3 processors, then no two processes can be scheduled at the same time, so the greedy algorithm will schedule one at a time, and will again find the optimal (3 processor) solution. If it takes 2 processors, then it must be that two of the processes can be run together. If that's right, though, then the greedy algorithm will choose two processes at the first step. Whichever two it chooses, there will be only one left, and this will be scheduled at the second step. So the greedy algorithm will require 2 processors, which is again optimal.\n\nAs I say, I think the optimistic case is even more interesting: what's the smallest n for which this algorithm is guaranteed to be sub-optimal? I will ask a follow-up question about that, and link to this one!\n\n\n\nHere's the follow-up question.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "5 million records sort txt file (not using any technique)? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     Questions asking for code must demonstrate a minimal understanding of the problem being solved. Include attempted solutions, why they didn't work, and the expected results. See also: Stack Overflow question checklist\r\n                \r\n                    \r\n                        Closed 9 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI have a file with 5 million records which are include of numbers\nthat they are out of sequence (irregular)\nyou can find file structure below :\n\n```\n for instance          desired Result\n------------          ---------------      \n 723,80                1,4   \n 14,50                 1,5 \n 723,2                 10,8\n 1,5                   14,50 \n 10,8                  723,2 \n 1,4                   723,80      \n```\n\n\nThis structure displays bad condition and optimum condition and I\nexpect to reach the optimum\n\nThe most important (the main) tip :\nI didn't use any tecniques such as linq, ....\nI want to do it with available algorithms and arrange the file.\n\nfurthermore (more over) the time should be considered\nso, we need to use a proper algorithm to put the numbers in order\nunder a minute\n    ", "Answer": "\r\nYou have several possible reasonable answers.\n\nIf you have enough memory, you get bring everything into memory, using a standard collection class, write your own comparison function and call sort.\n\nIf you have don't, you can write a polyphase merge sort (look it up), or write an ad-hoc method based upon a deeper understanding of your data\n\nYou can use a database as a sort, i.e., bulk insert the parsed data with and retrieve it with with the appropriate order by clause.\n\nBuy or or download an existing sort that can handle this case.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Prime number algorithm not working\r\n                \r\n```\npackage coding;\npublic class Prob7 {\npublic static void main(String[] args) {\n    long flag=0;\n    long counter=0;\n    long prime;\n    for(prime=2;;prime++){\n        System.out.println(counter);\n        flag=0;\n        long check=2;\n        while(check<=prime/2){\n            if(prime%check==0){\n                flag=1;\n                break;\n            }\n        }\n        if(flag==0){\n            if(counter==10001){\n                System.out.println(prime);\n                break;\n            }\n            counter++;\n        }\n\n    }\n\n\n  }\n\n}\n```\n\n\nI want to find the 10001st prime number and I nested a while loop inside a for loop for finding if it is a prime number or not. I used flag to check outside the loop and break out of the while loop if necessary. But the console was not doing anything. So next line of the for loop, I put the ```\nSystem.out.println(counter);```\nfor checking what is happening. The counter prints out \n\n```\n0\n1\n2\n2\n```\n\n\nand stops. I tried debugging but I couldn't figure out the problem. \nI have not set a condition for the for loop as I have a break statement which will break out of the loop if the counter of prime numbers reaches 10001.\n\nPS: I know I can use isPrime(), but I just wanna practice these kinds of algorithms.\n    ", "Answer": "\r\nYou don't increment ```\ncheck```\n variable in the inner ```\nwhile```\n loop. Modify to:\n\n```\n    while(check<=prime/2){\n        if(prime%check==0){\n            flag=1;\n            break;\n        }\n        ++check;\n    }\n```\n\n\nIn general there are many ways how to improve the algorithm:\n\n\nyou can test 2 at the beginning and then just go over odd numbers (so ```\ncheck += 2```\n)\nYou may compute sqrt(prime) at the beginning and then only loop until the square root (as (sqrt(x)+1)^2 will be always higher then prime already.\nYou could consider completely different algorithm, remembering the primes which were already successfully tested and while testing another prime test already found primes only as a divisor. This is similar to Sieve of Eratosthenes.\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Optimizing DFS in python\r\n                \r\nI'm learning algorithms and was doing this problem which is finding the number of regions. I tried a depth first search approach using python but I am getting a call stack exceeded error. Can anyone tell me whats the flaw in my implementation and how to overcome it? The code is:\n\n```\ndef findCircleNum(A):\n\n    count = 0\n\n    def dfs(row, column):\n        if row < 0 or column >= len(A[0]) or row >= len(A) or column < 0:\n            return\n\n        if A[row][column] == 0:\n            return\n\n        A[row][column] = 0\n\n        for i in range(row-1, row+2):\n            if i >= 0 and i<len(A) and A[i][column] == 1:\n                dfs(i, column)\n        for i in range(column-1, column+2):\n            if i >= 0 and i<len(A[0]) and A[row][i] == 1:\n                dfs(row, i)\n\n\n\n\n    for row in range(len(A)):\n        for column in range(len(A[0])):\n            if A[row][column] == 1:\n                dfs(row, column)\n                count += 1\n\n\n    return count\n\n\nfindCircleNum(m)\n```\n\n\nThe input it fails on is a 100x100 matrix of all 1's\n\nThe error is get is :\n\n```\nRuntimeError: maximum recursion depth exceeded\n```\n\n\nThanks!\n    ", "Answer": "\r\nWhy not just do a standard DFS while tracking the visited vertices (students) with a set? The problem statement says that maximum size of matrix is 200x200 so you wouldn't have to worry about the recursion limit assuming it is 1000. Using a set for tracking would also make the code simpler:\n\n```\ndef findCircleNum(A):\n    count = 0\n    visited = set()\n\n    def dfs(student):\n        if student in visited:\n            return\n\n        visited.add(student)\n        for i, friend in enumerate(A[student]):\n            if friend:\n                dfs(i)\n\n    for student in range(len(A)):\n        # Note we want to track circles, student without any friend won't count\n        if student not in visited and any(A[student]):\n            dfs(student)\n            count += 1\n\n    return count\n```\n\n\nEDIT The code in question looks like it's considering edges as vertices while doing DFS. This would also explain the issue with recursion depth since undirected graph of 100 vertices with loops but no multiedges has maximum (100 * 101) / 2 = 5050 edges.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Why are the imported libraries in python so much faster than code manually written?\r\n                \r\nI have been playing around with square root algorithms, and I have noticed that no matter how efficient my function is, it is still orders of magnitude slower than the math.sqrt() function imported in pycharm. I assumed that I was simply inefficient with my code until I tested the math.sqrt() function against a function that simply did 1*1 one and the math.sqrt() function was still faster. I could not conceive of any algorithm to find the square root of a number that was faster than a single operation. This is my algorithm.\n```\nnumber = 1.2 * pow(2, math.floor(math.log(num, 2) / 2))\nfor i in range(5):\n  number = (number + num / number) / 2\n  return number\n```\n\n    ", "Answer": "\r\nI am just going to summarise the comments\nPython is an interpreted language, it runs line by line\nSome of the built-in functions are linked to C functions, not Python functions which are much faster at completing mathematical equations\nI would recommend using the built-in functions for performance but I used to write the functions myself while learning Python\nCheers,\nDaniel\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Out of curiosity: How are serial numbers generated? Hints, Algorithms? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                    \r\n                        \r\n                    \r\n                \r\n                    \r\n                            \r\n                                As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,  or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question  can be improved and possibly reopened, visit the help center for guidance.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                Closed 10 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI wondering about how serial number generators and validator work. My aim would be to generate a serial number with five parts consisting of numbers and letters only.\n\nI enjoy coding as a hobby and would not call myself a professional programmer. However, I am very interested in how those interesting functions work technically to broaden my mind.\n\nAny hints, experiences or written algorithms are appreciated.\n    ", "Answer": "\r\nBrandon Staggs wrote a good article on Implementing a Partial Serial Number Verification System.  The examples are written in Delphi, but could be converted to other languages.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Pretty number formatting algorithm\r\n                \r\nAlgorithm to convert an integer representing a number of bytes into an pretty format.\n3 digits max (not counting decimal) - for eg like linux command line.\nno leading or trailing zeroes\n1K is 1000 bytes\n\n```\nExamples:\nCorrect\n123B -> 123B\n12300B -> 12.3K\n1910000B -> 1.91M\n1000000000B -> 1G\n83123 = 83.1K (not 83K)\n\nIncorrect\n012K (should be 12K)\n8.20M (should be 8.2M)\n```\n\n\nI would like to know what did I do wrong or is there an easy better way to solve this problem or if there are any bugs in my code.\n\nBelow is my solution (it works but I was not selected so I have not idea of what I did wrong) -\n\n```\n/*\n   * @Description - Function takes integer as input and returns the number in\n   * pretty format(Gigabyte, Megabytes, KiloBytes, Bytes) with maximum of 3\n   * digits\n   * @param integer to convert to pretty format\n   * @Assumptions - As mentioned in the problem set, 1000bytes = 1KB\n   * Value is rounded to the nearest valid value\n   * In java leading 0 in number is considered Octal, this function does not \n   * take care of octal to decimal conversion\n   * As 1G = 1,000,000,000B the loop will run maximum 3 times in worst case \n   * Its requires constant space O(1) to store the result\n   */\n  static String fpretty(int num) {\n\n    int count = 0;\n    double div_result = (double) num;\n    String display = \"\";\n\n    /*\n     * Every time we divide by 1000 count is incremented from B->K->M->G\n     * Here two decimal places are preserved for cases like 1.05, 1.11\n     * The output result of this loop will have 1,2 or 3 digits with max\n     * two decimal places\n     */\n    while(div_result > 999.5) {\n      div_result = div_result / 1000;\n      div_result = Math.round(div_result * 100.0) / 100.0;\n      count++;\n    }\n\n    // Get suffix B, K, M or G\n    String measure = getUnit(count);\n\n    // If decimal places is all zeros OR result has 3 digits\n    if(div_result % 1 == 0 || div_result >= 100)\n      display = (int)div_result + measure;\n    // If result has 2 digits\n    else if (div_result >= 10) {\n      // Then fetch 1 decimal place as we have 2 digits\n      div_result = (Math.round(div_result * 10.0) / 10.0);\n      // If after rounding decimal places are .0 then truncate zeros \n      // eg. 99.97 rounded to -> 100.0 -> 100\n      if(div_result % 1 == 0)\n        display = (int)div_result + measure;\n      else\n        display = div_result + measure;\n    }\n    else\n      display = div_result + measure;\n\n    return display;\n  }\n```\n\n    ", "Answer": "\r\nThis can be done with much less effort using the DecimalFormat class. Let it do the rounding for you, which can be described in a pattern and choose the way of rounding by RoundingMode. It also takes care of the trailing zeros, which will be simply ignored.\n\n```\npublic String pretty(int num) {\n    DecimalFormat f = new DecimalFormat(\"###.##\");\n    f.setRoundingMode(RoundingMode.HALF_UP);\n    double prettyd = num;\n    int count = 0;\n    while (prettyd >= 1000.0) {\n        prettyd /= 1000.0;\n        count++;\n    }\n    return f.format(prettyd) + getUnit(count);\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "why are composite numbers bad for hashing by division?\r\n                \r\nThis is my first question on stackflow. As you can tell, I am new to learning algorithms and data structure. \n\nWhen using the division method for create a hash function (i.e. h(k) = k mod m), one is advised (e.g. by CLRS) to use a prime number not too close to a power of 2 for the divisor m. Could someone kindly explain to me why a choice of m to be a composite number is bad?\n    ", "Answer": "\r\nConsider the case if m is even and all the k values are all even. Then, the hash values will also all be even.\n\nFor example, consider the case m=6 hashing even values:\n\n```\nInput values:  0, 2, 4, 6, 8, 10, 12, 14, 16, ...\nHash values:   0, 2, 4, 0, 2,  4,  0,  2,  4, ...\n```\n\n\nIf you use these hash values as indices into a table, then half of the table will be unused. On the other hand, if m is a prime, you will get an even distribution of the hash values, even if the input values all have a common factor.\n\nConsider the same input values, but with m=7:\n\n```\nInput values:  0, 2, 4, 6, 8, 10, 12, 14, 16, ...\nHash values:   0, 2, 4, 6, 1,  3,  5,  0,  2, ...\n```\n\n\nDespite the fact that the input values are all even, the hash values are still uniformly distributed over [0..6].\n\nSo to summarize, if m is prime, then you'll still get an even distribution of hash values even if all input values are divisible a common prime factor (other than m).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to count the number of partitionings?\r\n                \r\nRecently, I ancountered the problem to evenly disperse different width-sized, small containers into huge width-sized containers horizontally. There are millions of huge containers with billions of small containers. I need to come up with an algorithm. I simplified the problem into the below question:\n\nLet's use \n```\nProcess(Number,Parts)```\n as an example:\n\nNumber ```\n4```\n can be split into ```\n2```\n parts in 3 ways (not including 0).  ```\nProcess(4,2)=3```\n:\n\n```\n1 + 3\n3 + 1\n2 + 2\n```\n\n\nLikewise, number ```\n4```\n can be split into ```\n3```\n parts in 2 ways ```\nProcess(4,3)=2```\n:\n\n```\n1 + 1 + 2\n2 + 1 + 1\n1 + 2 + 1\n```\n\n\nAnd obviously ```\nProcess(4,4)=1```\n \n\n(not including ```\nProcess(4,1)=1```\n, because it is ```\n4+0```\n, where ```\n0```\n shouldn't be taken into consideration)\n\nI wonder whether there is any way to calculate \n\n```\nSuperProcess(4)=Process(4,2)+Process(4,3)+Process(4,4)=7```\n\n\nwith less time complexity? Or with another word, faster!!\n\nEspecially when the request is to calculate: ```\nSuperProcess(1209)```\n\n\nIs there some mathematical method rather than a crude loop to perform this calculation?\n    ", "Answer": "\r\n```\nSuperProcess(n)```\n is known as the number of compositions of an integer rather than the number of partitions in which sums containing the same addends are considered identical independent of ordering.\n\nThere are exactly ```\n2**(n-1)-1```\n compositions for a positive integer ```\nn```\n excluding the sum with only one addend.\n\nTherefore the best algorithm to calculate ```\nSuperProcess(n)```\n is simply to evaluate the expression ```\n2**(n-1)-1```\n, which can be done in ```\nTheta(n)```\n time.\n\nIf you want to enumerate all combinations, this can be done with a recursive function taking every value ```\n1...n```\n for the integer ```\nm```\n in the current position in the sum and then recursively calling itself with ```\nn-m```\n for the next position, stopping on ```\n0```\n argument.\n\nThe enumeration algorithm will take ```\nTheta(n 2**n)```\n time and this is optimal, because it is the time required to save/print all the combinations explicitly.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to count the number of partitionings?\r\n                \r\nRecently, I ancountered the problem to evenly disperse different width-sized, small containers into huge width-sized containers horizontally. There are millions of huge containers with billions of small containers. I need to come up with an algorithm. I simplified the problem into the below question:\n\nLet's use \n```\nProcess(Number,Parts)```\n as an example:\n\nNumber ```\n4```\n can be split into ```\n2```\n parts in 3 ways (not including 0).  ```\nProcess(4,2)=3```\n:\n\n```\n1 + 3\n3 + 1\n2 + 2\n```\n\n\nLikewise, number ```\n4```\n can be split into ```\n3```\n parts in 2 ways ```\nProcess(4,3)=2```\n:\n\n```\n1 + 1 + 2\n2 + 1 + 1\n1 + 2 + 1\n```\n\n\nAnd obviously ```\nProcess(4,4)=1```\n \n\n(not including ```\nProcess(4,1)=1```\n, because it is ```\n4+0```\n, where ```\n0```\n shouldn't be taken into consideration)\n\nI wonder whether there is any way to calculate \n\n```\nSuperProcess(4)=Process(4,2)+Process(4,3)+Process(4,4)=7```\n\n\nwith less time complexity? Or with another word, faster!!\n\nEspecially when the request is to calculate: ```\nSuperProcess(1209)```\n\n\nIs there some mathematical method rather than a crude loop to perform this calculation?\n    ", "Answer": "\r\n```\nSuperProcess(n)```\n is known as the number of compositions of an integer rather than the number of partitions in which sums containing the same addends are considered identical independent of ordering.\n\nThere are exactly ```\n2**(n-1)-1```\n compositions for a positive integer ```\nn```\n excluding the sum with only one addend.\n\nTherefore the best algorithm to calculate ```\nSuperProcess(n)```\n is simply to evaluate the expression ```\n2**(n-1)-1```\n, which can be done in ```\nTheta(n)```\n time.\n\nIf you want to enumerate all combinations, this can be done with a recursive function taking every value ```\n1...n```\n for the integer ```\nm```\n in the current position in the sum and then recursively calling itself with ```\nn-m```\n for the next position, stopping on ```\n0```\n argument.\n\nThe enumeration algorithm will take ```\nTheta(n 2**n)```\n time and this is optimal, because it is the time required to save/print all the combinations explicitly.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Minimum number of training examples for Find-S/Candidate Elimination algorithms?\r\n                \r\nConsider the instance space consisting of integer points in the x, y plane, where 0 ≤ x, y ≤ 10, and the set of hypotheses consisting of rectangles (i.e. being of the form (a ≤ x ≤ b, c ≤ y ≤ d), where 0 ≤ a, b, c, d ≤ 10).\n\nWhat is the smallest number of training examples one needs to provide so that the Find-S algorithm perfectly learns a particular target concept (e.g. (2 ≤ x ≤ 4, 6 ≤ y ≤ 9))?\nWhen can we say that the target concept is exactly learned in the case of the Find-S algorithm, and what is the optimal query strategy?\n\nI'd also like to know the answer w.r.t Candidate Elimination.\n\nThanks in advance.\n    ", "Answer": "\r\nYou need two positive examples: (2,6)\n(2 <= x <= 2, 6 <= y <= 6)\nand then (4,9)\n(2 <= x <= 4, 6 <= y <= 9)\nThat is the S set done and this is the end of the answer to teaching/learning with FIND-S\n\nWith Candidate elimination, we need to give negative examples to build the G set.\nWe need four negative examples to define the four boundaries of the rectangle:\n\n\nG starts as (-Inf <= x <= Inf, -Inf <= y <= Inf)\n\n\nAdd (3,5)- and we get hypothesis:\n\n\n(-Inf <= x <= Inf, 6 <= y <= Inf)\n\n\nAdd (3,10)-\n\n\n(-Inf <= x <= Inf, 6 <= y <= 9)\n\n\nAdd (1,7)-\n\n\n(2 <= x <= Inf, 6 <= y <= 9)\n\n\nAdd (5,7)-\n\n\n(2 <= x <= 4, 6 <= y <= 9)\n\n\nSo now S=G={(2 <= x <= 4, 6 <= y <= 9)}. As S=G, it has perfectly learned the concept.\nI have seen this question in different formats. Replace -Inf with 0 and Inf with 10 if it specifies the problem domain as such.\n\nThis is the optimal order to feed in the training examples. The worst order is to do the G set first, as you will create four different candidate hypotheses, which will merge to three with the second example and then merge to one with the 3rd example. It is useful to illustrate C-E with a tree as in the Mitchell book, and perhaps sketch the hypothesis graph next to each.\n\nThis answer is confirmed here:\nhttp://ssdi.di.fct.unl.pt/scl/docs/exercises/Clemens%20Dubslaff%20hm4.pdf\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Should checking loop conditions be counted towards total number of comparisons?\r\n                \r\nI have implemented three different sorting algorithms and now I want to confirm that my approach of counting the total number of comparisons is correct. In my mind, the number of comparisons shouldn't be tied to the conditional branches because if the condition isn't met, the comparison was still made to compare the values. I also use this same thought process to add one to the comparison count for the exit loop conditions. \n\nThe implementations for my algorithms are below. Am I setting up the counter correctly in each scenario?\n\nInsertion Sort\n\n```\nint insertionSort(double* A, int arrayLength) {\n    int count = 1; // Initialized 1 to count for exit conditions of for loop\n    for (int j = 1; j < arrayLength; j++) {\n        count++;\n        double key = A[j];\n        int i = j - 1;\n\n        while (i > -1 && A[i] > key) {\n            count++;\n            A[i + 1] = A[i];\n            i = i - 1;\n        }\n\n        count+=2 // Plus 2 for the while loop exit condition\n\n        A[i + 1] = key;\n    }\n\nreturn count;\n}\n```\n\n\nHeap Sort\n\n```\nvoid heapSort(double* A, int arrayLength, int* c) {\n    int heapSize = 0;\n    buildMaxHeap(A, arrayLength, &heapSize, c);\n\n    for (int i = arrayLength - 1; i > 0; i--) {\n        swap(A[0], A[i]);\n        heapSize = heapSize - 1;\n        maxHeapify(A, 0, &heapSize, c);\n    }\n}\n\nvoid buildMaxHeap(double* A, int arrayLength, int* heapSize, int* c) {\n    *heapSize = arrayLength - 1;\n    *c = *c + 1; // Counts comparison of loop for exit condition\n    for (int i = floor((arrayLength)/ 2); i > -1; i--) {\n        *c = *c + 1;\n        maxHeapify(A, i, heapSize, c);\n    }\n}\nvoid maxHeapify(double* A, int i, int* heapSize, int* c) {\n    int l = (2 * i) + 1;\n    int r = (2 * i) + 2;\n    int largest;\n\n    if (l <= *heapSize && A[l] > A[i])\n        largest = l;\n    else largest = i;\n\n    if (r <= *heapSize && A[r] > A[largest])\n        largest = r;\n\n    if (largest != i) {\n        swap(A[i], A[largest]);\n        maxHeapify(A, largest, heapSize, c);\n    }\n\n    *c = *c + 5;\n}\n```\n\n\nQuick Sort\n\n```\nvoid quickSort(double* A, int p, int r, int* c) {\n\n    if (p < r) {\n        int q = partition(A, p, r, c);\n        quickSort(A, p, q - 1, c);\n        quickSort(A, q + 1, r, c);\n        }\n    *c = *c + 1;\n}\n\nint partition(double* A, int p, int r, int* c) {\n    double x = A[r];\n    int i = p - 1;\n\n    for (int j = p; j < r; j++) {\n        if (A[j] <= x) {\n            i = i + 1;\n            swap(A[i], A[j]);\n        }\n        *c = *c + 2;\n    }\n\n    *c = *c + 1 // Adding 1 for for loop exit condition\n\n    swap(A[i + 1], A[r]);\n    return i + 1;\n}\n```\n\n    ", "Answer": "\r\nIf you look at your inserstion sort\n\nAs you already put count =1 because as for exits on exit condition of for loop. \n\nfor same reason then it also make sense that when while loop cancels the count++ inside will not get executed but there was a comparison made. \nbut you do a count+=2. why 2?\nit makes sense because you added 2 as you do 2 comparisons in while loop \n\n```\n(i > -1 && A[i] > key)\n```\n\n\n\ni>-1\nA[i] > key\n\n\nbut then you need to increase counter by 2 inside while loop as everytime while is correct 2 comparisons are made. \n\n```\nint insertionSort(double* A, int arrayLength) {\n    int count = 1; // Initialized 1 to count for exit conditions of for loop\n    for (int j = 1; j < arrayLength; j++) {\n        count++;\n        double key = A[j];\n        int i = j - 1;\n\n        while (i > -1 && A[i] > key) {\n            count++;\n            A[i + 1] = A[i];\n            i = i - 1;\n        }\n\n        count+2 // Plus 2 for the while loop exit condition\n\n        A[i + 1] = key;\n    }\n\nreturn count;\n}\n```\n\n\nsame way you can check other algorithms also.\n\nstill for a better approach I will suggest you read some starting chapter in any book about analysis of algorithm. They usually explains about how to estimate running time of algorithm which will help you understand how to analyse better.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to solve recurrence number [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 6 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI need to find a \"lucky number\" which consists of same amount of 4 and 7 digits (ex. 4747, 4477, etc). Given an input n, i need to find the smallest \"lucky number\" that's bigger than, but closest to n (ex. if input is 6060, then the answer will be 7447). What is the best algorithm to solve this problem? Given that the input will be <= 10^100000. I thought about separate it into chars, and logically solve them, but there are cases which it's not easy to find out the answer. Could anyone tell me how to approach this problem?\n    ", "Answer": "\r\nThe below algorithm has worst-case linear time, which is optimal.\n\nIt's a bit complicated, though; it involves a lot of scanning one way and then the other way and then the first way again. There may be a simpler algorithm that is also optimal. (And a realistic implementation would add minor optimizations to improve the average case, and/or to improve worst-case performance by a constant factor.)\n\n\nStep #1: Handle the cases where the result will require more digits than the input.\n\n\n1a. If n (the length of the input) is odd, then the desired result is the '444…44777…77' with length n+1. Populate the output-buffer with that result, then return.\n1b. If the input is greater than the '777…77444…44' with length n, then the desired result is the '444…44777…77' with length n+2. Populate the output-buffer with that result, then return.\n\nStep #2: Copy the input into the output-buffer. (From here on out, we'll be operating directly on the output-buffer.)\nStep #3: Mutate the output-buffer to be the least integer consisting solely of 4s and 7s that is greater than or equal to its current value. (For example, if it's \"4723\", then we want \"4744\".) To do this, scan from left to right (most-significant-digit to least-significant-digit), seeking the first digit that is not 4 or 7. (If no such digit is found, proceed to step #4.) There are three cases, depending on the value of this digit:\n\n\nCase 0–3: If this digit is less than 4, then change it, and each digit to the right of it, to a 4.\nCase 5–6: If this digit is either 5 or 6, then change it to a 7, and change each digit to the right of it to a 4.\nCase 8–9: If this digit is either 8 or 9, then scan leftward again, finding the first 4. (We know there must be one, because otherwise we would have exited in step #1.) Change that 4 to a 7, and change each digit to the right of that formerly-4 to a 4.\n\nStep #4: Mutate the output-buffer to be the least integer consisting of equal counts of 4s and 7s that is greater than or equal to its current value. (For example, if it's \"4744\", then we want \"4747\".)\n\n\n4a: Count the 4s and 7s in the output-buffer.\n4b: If there are more 7s than 4s, then compute how many 7s would need to be changed to 4s in order for them to be balanced. Call this k. Proceed from right to left until you have \"encountered\" k+1 7s, then continue leftward until you encounter a 4. (We know there must be one, because otherwise we would have exited in step #1.) Change that 4 to a 7; then change each digit to the right of that formerly-4 to a 4. Afterward, re-count the 4s and 7s in the output-buffer. (Note: after this sub-step, there may be more 4s than 7s. For example, if we had \"4777\", then we now have \"7444\". The next sub-step will take care of this.)\n4c: If there are more 4s than 7s, then compute how many 7s would need to be changed to 4s in order for them to be balanced. Call this k. Proceed from right to left. As you come across 4s, change them to 7s, until you have changed k 4s to 7s.\n\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "O(n) algorithm to find the odd-number-out in array of consecutive integers from 1 to n(not odd numbers)\r\n                \r\nI'm having a great deal of trouble trying to figure this question out, and the root of that trouble is creating an algorithm of ```\nO(n)```\n complexity. Here's the question I'm struggling with:\n\nAn Array ```\nA```\n of length ```\nn```\n contains integers from the range ```\n[0, .., n - 1]```\n. However, it only contains ```\nn - 1```\n distinct numbers. So one of the numbers is missing and another number is duplicated. Write a Java method that takes ```\nA```\n as an input argument and returns the missing number; the method should run in ```\nO(n)```\n.\nFor example, when ```\nA = [0, 2, 1, 2, 4]```\n, ```\noddOneOut()```\n should return ```\n3```\n; when ```\nA = [3, 0, 0, 4, 2, 1]```\n, ```\noddOneOut()```\n should return ```\n5```\n.\n\nObviously this is an easy problem to solve with an ```\nO(n2)```\n algorithm, (and most likely ```\nO(n)```\n, I'm just not seeing it!). I've attempted to solve it using all manner of methods, but to no avail. I'm attempting to solve it in Java, but if you're more comfortable solving it Python, that would be fine as well.\nThank you in advance...\n    ", "Answer": "\r\nSuppose the number missing is ```\nx```\n and the duplicate is ```\ny```\n. If you add all numbers, the sum will be:\n\n```\n(n - 1) * n / 2 - x + y\n```\n\n\nFrom the above, you can find ```\n(x - y)```\n.....(1)\n\nSimilarly, sum the squares of the numbers. The sum will then be:\n\n\n  ```\n(n - 1) * n * (2 * n - 1) / 6 - x2 + y2```\n\n\n\nFrom the above you get ```\n(x2 - y2)```\n....(2)\n\n```\n(2) / (1) gives (x + y).....(3)\n```\n\n\n(1) + (3) gives ```\n2 * x```\n and you can thereby find ```\nx```\n and ```\ny```\n.\n\nNote that in this solution there is ```\nO(1)```\n extra storage and is ```\nO(n)```\n time complexity. The other solutions above are unnecessarily ```\nO(n)```\n extra storage.\n\nCode in mixed C/C++ for some more clarity:\n\n```\n#include <stdio.h>\n\nint findDup(int *arr, int n, int& dup, int& missing)\n{\n    int sum = 0;\n    int squares = 0;\n\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n        squares += arr[i] * arr[i];\n    }\n\n    sum = (n - 1) * n / 2 - sum; // x - y\n\n    squares = (n - 1) * n * (2 * (n - 1) + 1) / 6 - squares; // x^2 - y^2\n\n    if (sum == 0) {\n        // no duplicates\n        missing = dup = 0;\n        return -1;\n    }\n    missing = (squares / sum + sum) / 2; // ((x^2 - y^2) / (x - y) + (x - y)) / 2 = ((x + y) + (x - y)) / 2 = x\n\n    dup = missing - sum; // x - (x - y) = y\n\n    return 0;\n}\n\n\nint main(int argc, char *argv[])\n{\n    int dup = 0;\n    int missing = 0;\n\n    int a[] = {0, 2, 1, 2, 4};\n\n    findDup(a, sizeof(a) / sizeof(int), dup, missing);\n    printf(\"dup = [%d], missing = [%d]\\n\", dup, missing);\n\n    int b[] = {3, 0, 0, 4, 2, 1};\n    findDup(b, sizeof(b) / sizeof(int), dup, missing);\n    printf(\"dup = [%d], missing = [%d]\\n\", dup, missing);\n\n    return 0;\n}\n```\n\n\nOutput:\n\n```\ndup = [2], missing = [3]\ndup = [0], missing = [5]\n```\n\n\nSome python code:\n\n```\ndef finddup(lst):\n    sum = 0\n    sumsq = 0\n    missing = 0\n    dup = 0\n    for item in lst:\n        sum = sum + item\n        sumsq = sumsq + item * item\n    n = len(a)\n    sum = (n - 1) * n / 2 - sum\n    sumsq = (n - 1) * n * (2 * (n - 1) + 1) / 6 - sumsq\n    if sum == 0:\n        return [-1, missing, dup]\n    missing = ((sumsq / sum) + sum) / 2\n    dup = missing - sum\n    return [0, missing, dup]\n\nfound, missing, dup = finddup([0, 2, 1, 2, 4])\nif found != -1:\n    print \"dup = \" + str(dup) + \" missing = \" + str(missing)\n\nprint finddup([3, 0, 0, 4, 2, 1])\n```\n\n\nOutputs:\n\n```\ndup = 2 missing = 3\n[-1, 0, 0]\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Number Filtration Algorithm bug\r\n                \r\nSo I wrote this algorithm where given a set of integers it will remove all integers except 0 and 7 and then it will check if the remaining integers are in a certain order and then will return a boolean. Code below: \n\n```\ndef spy_game(nums):\n  for i in nums:\n    if i != 0:\n      if i == 7:\n        continue\n      else:\n        nums.remove(i)\n    else:\n      continue\n  stringlist = [str(o) for o in nums]\n  mystring = ''.join(stringlist)\n  return '007' in mystring\n\nspy_game([1,0,2,4,0,7,5])\n```\n\n\nNow the problem is that if I run\n(for example) ```\nspy_game([1,0,2,4,0,7,5])```\n it will not return ```\nTrue```\n regardless of the fact that the sequence of interest is present. After I decided to return the list per se after the filtration process, I found that all numbers except the ones in the middle got filtered out. So in this example, if I ```\nreturn nums```\n it will return ```\n[0, 4, 0, 7]```\n although the 4 should've been removed. I am aware that there are more optimal alternatives to this algorithm but I just want to understand why it doesn't work. Thank you. \n    ", "Answer": "\r\nInstead of modifying the list, use another list to keep track of the wanted numbers.\n\nYou should not modify the list while iterating on it.\n\nHere's a cleaned up version\n\n```\ndef spy_game(nums):\n    ans = []\n    for i in nums:\n        if i == 0 or i == 7:\n            ans.append(i)\n\n    stringlist = [str(o) for o in ans]\n    mystring = ''.join(stringlist)\n    return '007' in mystring\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Permutations of letters and numbers in a phone number\r\n                \r\nFor my computer science class, we need to write a program (in C++) that takes an input of characters and outputs the possible permutations of it according to the dial pad on a phone, leaving non-digit characters in place.\n\nFor example, inputing 2 outputs 2, A, B, C. Inputing 23 outputs 23, A3, B3, C3, 2D, 2E, 2F, AD, AE, AF, BD, BE, BF, etc...\n\nThe application provided for this program is finding permutations of \"vanity\" phone numbers for a given phone number.\n\nCurrently, the program I have written doesn't even compile, and I'm afraid the algorithm I'm using is incorrect:\n\n```\n#include <iostream>\n#include <multimap.h>\n#include <vector>\nusing namespace std;\n\n// Prototypes\nvoid initLetterMap(multimap<char,char> &lmap);\nvoid showPermutations(const vector<string> &perms);\nvector<string> getPermutations(const string &phoneNumber,const multimap<char,char> &lmap);\nvector<char> getLetters(char digit, const multimap<char,char> &lmap);\n\n\n// Declarations\nvoid initLetterMap(multimap<char,char> &lmap) {\n    lmap.insert(pair<char,char>('1','1'));\n    lmap.insert(pair<char,char>('2','2'));\n    lmap.insert(pair<char,char>('2','A'));\n    lmap.insert(pair<char,char>('2','B'));\n    lmap.insert(pair<char,char>('2','C'));\n    lmap.insert(pair<char,char>('3','3'));\n    lmap.insert(pair<char,char>('3','D'));\n    lmap.insert(pair<char,char>('3','E'));\n    lmap.insert(pair<char,char>('3','F'));\n    // ...\n}\n\nvector<char> getLetters(char digit, const multimap<char,char> &lmap) {\n    multimap<char,char>::iterator it;\n    pair<multimap<char,char>::iterator,multimap<char,char>::iterator> range;\n    vector<char> result;\n\n    if (isdigit(digit)) {\n        range = lmap.equal_range(digit);\n        for (it=range.first;it!=range.second;++it) {\n            result.push_back((*it).second);\n        }\n    } else {\n        result.insert(result.end(),digit);\n    }\n\n    return result;\n}\n\nvoid showPermutations(vector<string> &perms) {\n    vector<string>::iterator it;\n    for (it = perms.begin(); it != perms.end(); it++) {\n        cout << *it << endl;\n    }\n}\n\n\nvector<string> getPermutations(const string &phoneNumber,const multimap<char,char> &lmap) {\n    vector<string> results;\n\n    string number = phoneNumber;\n    vector<char>::iterator vcit;\n    vector<char> letters;\n    unsigned int i;\n\n    for (i=0;i<phoneNumber.length();i++) {\n        letters = getLetters(number[i],lmap);\n        for (vcit=letters.begin();vcit!=letters.end();vcit++) {\n            number[i] = *vcit;\n            results.push_back(number);\n        }\n    }\n\n\n    return results;\n}\n\nint main() {\n\n    multimap<char,char> lmap;\n    initLetterMap(lmap);\n\n    string input;\n\n    cout << \"Enter a phone number to get all possible vanity numbers\" << endl;\n    cout << \"> \"; getline(cin,input);\n\n    showPermutations(getPermutations(input,lmap));\n\n\n    return 0;\n}\n```\n\n\nI get a whole slew of build issues when I try to build this, and am not sure how to resolve most of them:\n\n```\nIn file included from /usr/include/c++/4.0.0/backward/multimap.h:59,\nfrom phone02.cpp:18:\n/usr/include/c++/4.0.0/backward/backward_warning.h:32:2: warning: #warning This file includes at least one deprecated or antiquated header. Please consider using one of the 32 headers found in section 17.4.1.2 of the C++ standard. Examples include substituting the <X> header for the <X.h> header for C++ includes, or <iostream> instead of the deprecated header <iostream.h>. To disable this warning use -Wno-deprecated.\n/usr/include/c++/4.0.0/bits/stl_pair.h: In constructor 'std::pair<_T1, _T2>::pair(const std::pair<_U1, _U2>&) [with _U1 = std::_Rb_tree_const_iterator<std::pair<const char, char> >, _U2 = std::_Rb_tree_const_iterator<std::pair<const char, char> >, _T1 = std::_Rb_tree_iterator<std::pair<const char, char> >, _T2 = std::_Rb_tree_iterator<std::pair<const char, char> >]':\nphone02.cpp:75: instantiated from here\n/usr/include/c++/4.0.0/bits/stl_pair.h:90: error: no matching function for call to 'std::_Rb_tree_iterator<std::pair<const char, char> >::_Rb_tree_iterator(const std::_Rb_tree_const_iterator<std::pair<const char, char> >&)'\n/usr/include/c++/4.0.0/bits/stl_tree.h:167: note: candidates are: std::_Rb_tree_iterator<_Tp>::_Rb_tree_iterator(std::_Rb_tree_node<_Tp>*) [with _Tp = std::pair<const char, char>]\n/usr/include/c++/4.0.0/bits/stl_tree.h:164: note: std::_Rb_tree_iterator<_Tp>::_Rb_tree_iterator() [with _Tp = std::pair<const char, char>]\n/usr/include/c++/4.0.0/bits/stl_tree.h:152: note: std::_Rb_tree_iterator<std::pair<const char, char> >::_Rb_tree_iterator(const std::_Rb_tree_iterator<std::pair<const char, char> >&)\n/usr/include/c++/4.0.0/bits/stl_pair.h:90: error: no matching function for call to 'std::_Rb_tree_iterator<std::pair<const char, char> >::_Rb_tree_iterator(const std::_Rb_tree_const_iterator<std::pair<const char, char> >&)'\n/usr/include/c++/4.0.0/bits/stl_tree.h:167: note: candidates are: std::_Rb_tree_iterator<_Tp>::_Rb_tree_iterator(std::_Rb_tree_node<_Tp>*) [with _Tp = std::pair<const char, char>]\n/usr/include/c++/4.0.0/bits/stl_tree.h:164: note: std::_Rb_tree_iterator<_Tp>::_Rb_tree_iterator() [with _Tp = std::pair<const char, char>]\n/usr/include/c++/4.0.0/bits/stl_tree.h:152: note: std::_Rb_tree_iterator<std::pair<const char, char> >::_Rb_tree_iterator(const std::_Rb_tree_iterator<std::pair<const char, char> >&)\nmake: *** [phone02.o] Error 1\n```\n\n\nThe line numbers are a bit off, but the important ones that I can see are the two about ```\nno matching function for call to 'std::_Rb_tree_iterator<std::pair<const char, char> >::_Rb_tree_iterator(const std::_Rb_tree_const_iterator<std::pair<const char, char> >&)'```\n\n\nBesides the errors, I also believe I am heading in the wrong direction with my algorithm.\n\nSo I have 2 questions here:\n\n\nWhy am I getting these build errors, and how do I fix them?\nHow would you suggest going about solving this problem? Am I on the right track or no?\n\n\nFor question #2, I would prefer to not get solutions, just advice or pointers in the right direction.\n\nThanks!\n\nPS: I am building this on Mac OS X 10.5.8 with gcc, using QtCreator 1.2.1\n\nUPDATE:\n\nI have successfully compiled a solution program. I will post the source code to those who are curious.\n\n```\n#include <iostream>\n#include <map>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvoid initLetterMap(map<char,string> &lmap);\nvector<string> getMapped(const string &phoneNumber, map<char,string> &lmap);\nvector<string> getPermutations(vector<string> number);\nunsigned long int countPermutations(vector<string> number);\n\nvoid initLetterMap(map<char,string> &lmap) {\n    lmap['0'] = \"0\";\n    lmap['1'] = \"1\";\n    lmap['2'] = \"2ABC\";\n    lmap['3'] = \"3DEF\";\n    lmap['4'] = \"4GHI\";\n    lmap['5'] = \"5JKL\";\n    lmap['6'] = \"6MNO\";\n    lmap['7'] = \"7PQRS\";\n    lmap['8'] = \"8TUV\";\n    lmap['9'] = \"9WXYZ\";\n}\n\nunsigned long int countPermutations(vector<string> number) {\n    long int fold = 1;\n    int vals = 0;\n    vector<string>::iterator it;\n    for (it=number.begin();it!=number.end();it++) {\n        vals = (*it).length();\n        fold *= vals;\n    }\n    return fold;\n}\n\nvector<string> getMapped(const string &phoneNumber, map<char,string> &lmap) {\n    unsigned int i;\n    vector<string> out;\n    char digit;\n    string temp;\n    for (i=0;i<phoneNumber.length();i++) {\n        digit = phoneNumber.at(i);\n        if (isdigit(digit)) {\n            out.push_back(lmap[digit]);\n        } else {\n            temp = string(1,digit);\n            out.push_back(temp);\n        }\n    }\n    return out;\n}\n\nvector<string> getPermutations(vector<string> number) {\n    vector<string> results;\n\n    unsigned long int i,j,k;\n    unsigned long int perms = countPermutations(number);\n\n    vector<string>::reverse_iterator numit;\n    string temp,temp2;\n\n\n    vector<int> state = vector<int>(number.size(), 0);\n    vector<int>::reverse_iterator stateit;\n\n    for (i=0;i<perms;i++) {\n        j=i;\n        temp = \"\";\n        for (stateit=state.rbegin(), numit=number.rbegin();stateit!=state.rend();stateit++, numit++) {\n            *stateit = j % (*numit).length();\n            j /= (*numit).length();\n            temp.insert(temp.begin(),(*numit)[*stateit]);\n        }\n        results.push_back(temp);\n    }\n\n\n    return results;\n}\n\nint main() {\n    map<char,string> lettermap;\n    initLetterMap(lettermap);\n\n    string input;\n\n    cout << \"> \"; getline(cin,input);\n\n    vector<string> perms = getPermutations(getMapped(input,lettermap));\n    vector<string>::iterator it;\n    for (it=perms.begin();it!=perms.end();it++) {\n        cout << *it << endl;\n    }\n}\n```\n\n\nThe code is probably more complicated than it has to be, but my goal was to just get it to work. It seems to run fairly quickly for 10 digit phone numbers, so I guess it's not too bad.\n\nThanks to Jacob and ShreevatsaR for getting me pointed in the right direction!\n    ", "Answer": "\r\nHow about the following:\n\n```\n#include <cstddef>\n#include <iostream>\n#include <iterator>\n#include <string>\n#include <algorithm>\n\ntemplate <typename Iterator>\nbool next_combination(const Iterator first, Iterator k, const Iterator last);\n\nint main()\n{\n   std::string phone_number = \"23\";\n\n   std::string number[] = {\n                            \"0\",   \"1\",  \"2abc\", \"3def\",  \"4ghi\",\n                            \"5jkl\",\"6mno\", \"7pqrs\", \"8tuv\",\"9wxyz\"\n                          };\n\n   std::string tmp_set;\n   std::string set;\n\n   for(std::size_t i = 0; i < phone_number.size(); ++i)\n   {\n      tmp_set += number[static_cast<std::size_t>(phone_number[i] - '0')];\n   }\n   std::sort(tmp_set.begin(),tmp_set.end());\n\n   std::unique_copy(tmp_set.begin(),\n                    tmp_set.end(),\n                    std::back_inserter(set));\n\n   std::string current_set;\n   current_set.reserve(phone_number.size());\n\n   do\n   {\n      std::copy(set.begin(),\n                set.begin() + phone_number.size(),\n                std::back_inserter(current_set));\n      do\n      {\n         std::cout << current_set << std::endl;\n      }\n      while (std::next_permutation(current_set.begin(),current_set.end()));\n      current_set.clear();\n   }\n   while(next_combination(set.begin(),\n                          set.begin() + phone_number.size(),\n                          set.end()));\n  return 0;\n}\n\n\n   template <typename Iterator>\n   inline bool next_combination(const Iterator first, Iterator k, const Iterator last)\n   {\n      /* Credits: Thomas Draper */\n      if ((first == last) || (first == k) || (last == k))\n         return false;\n      Iterator itr1 = first;\n      Iterator itr2 = last;\n      ++itr1;\n      if (last == itr1)\n         return false;\n      itr1 = last;\n      --itr1;\n      itr1 = k;\n      --itr2;\n      while (first != itr1)\n      {\n         if (*--itr1 < *itr2)\n         {\n            Iterator j = k;\n            while (!(*itr1 < *j)) ++j;\n            std::iter_swap(itr1,j);\n            ++itr1;\n            ++j;\n            itr2 = k;\n            std::rotate(itr1,j,last);\n            while (last != j)\n            {\n               ++j;\n               ++itr2;\n            }\n            std::rotate(k,itr2,last);\n            return true;\n         }\n      }\n      std::rotate(first,k,last);\n      return false;\n   }\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What sort of time complexity would be required to solve the RSA Factoring Challenge?\r\n                \r\nAlthough the challenge ended a long time ago, I'm kinda bored so I decided to try to factorise some of the numbers.\n\nI initially had an O(n) algorithm, but then, I decided to research big O notation.\n\nApparently (I could be wrong), O(n) algorithms and O(2n) algorithms basically have the same running time. So do O(n) and O(4n) algorithms. In fact, O(n) and O(cn) algorithms (where c is an integer) essentially have the same running time.\n\nSo now, I have an O(8n) algorithm, but it isn't quick enough for 77-bit numbers.\n\nWhat sort of time complexity would be required to factorise the first few RSA numbers (in under 5-ish minutes)?\n\nMy O(8n) algorithm:\n\n```\nimport math\n\nnum = int(input())\n\nsq = math.sqrt(num)\n\nif num % 2 == 0:\n  print(2, int(num / 2))\n\nelif sq % 1 == sq:\n  print(int(sq), int(sq))\n\nelse:\n\n  sq = round(sq)\n\n  a = 3\n  b = sq + (1 - (sq % 2))\n\n  c = ((b + 1) / 2)\n  d = ((b + 1) / 2)\n  c -= (1 - (c % 2))\n  d += (1 - (d % 2))\n\n  e = ((c + 1) / 2)\n  f = ((c + 1) / 2)\n  e -= (1 - (e % 2))\n  f += (1 - (f % 2))\n  g = ((d + 1) / 2) + d\n  h = ((d + 1) / 2) + d\n  g -= (1 - (g % 2))\n  h += (1 - (h % 2))\n\n\n  while a <= sq and num % a != 0 and b > 2 and num % b != 0 and c <= sq and num % c != 0 and d > 2 and num % d != 0 and e <= sq and num % e != 0 and f > 2 and num % f != 0 and g <= sq and num % g != 0 and h > 2 and num % h != 0:\n\n    a += 2\n    b -= 2\n    c += 2\n    d -= 2\n    e += 2\n    f -= 2\n    g += 2\n    h -= 2\n\n\n  if num % a == 0:\n    print(a, int(num / a))\n  elif num % b == 0:\n    print(b, int(num / b))\n  elif num % c == 0:\n    print(c, int(num / c))\n  elif num % d == 0:\n    print(d, int(num / d))\n  elif num % e == 0:\n    print(e, int(num / e))\n  elif num % f == 0:\n    print(f, int(num / f))\n  elif num % g == 0:\n    print(g, int(num / g))\n  elif num % h == 0:\n    print(h, int(num / h))\n```\n\n    ", "Answer": "\r\nYour algorithm is poorly-implemented trial division. Throw it away.\n\nHere is my basic prime-number library, using the Sieve of Eratosthenes to enumerate prime numbers, the Miller-Rabin algorithm to recognize primes, and wheel factorization followed by Pollard's rho algorithm to factor composites, which I leave to you to translate to Python:\n\n```\nfunction primes(n)\n    i, p, ps, m := 0, 3, [2], n // 2\n    sieve := makeArray(0..m-1, True)\n    while i < m\n        if sieve[i]\n            ps := p :: ps # insert at head of list\n            for j from (p*p-3)/2 to m step p\n                sieve[i] := False\n        i, p := i+1, p+2\n    return reverse(ps)\n\nfunction isPrime(n, k=5)\n    if n < 2 then return False\n    for p in [2,3,5,7,11,13,17,19,23,29]\n        if n % p == 0 then return n == p\n    s, d = 0, n-1\n    while d % 2 == 0\n        s, d = s+1, d/2\n    for i from 0 to k\n        x = powerMod(randint(2, n-1), d, n)\n        if x == 1 or x == n-1 then next i\n        for r from 1 to s\n            x = (x * x) % n\n            if x == 1 then return False\n            if x == n-1 then next i\n        return False\n    return True\n\nfunction factors(n, limit=10000)\n    wheel := [1,2,2,4,2,4,2,4,6,2,6]\n    w, f, fs := 0, 2, []\n    while f*f <= n and f < limit\n        while n % f == 0\n            fs, n := f :: fs, n / f\n        f, w := f + wheel[w], w+1\n        if w = 11 then w = 3\n    if n == 1 return fs\n    h, t, g, c := 1, 1, 1, 1\n    while not isPrime(n)\n        repeat\n            h := (h*h+c) % n # the hare runs\n            h := (h*h+c) % n # twice as fast\n            t := (t*t+c) % n # as the tortoise\n            g := gcd(t-h, n)\n        while g == 1\n        if isPrime(g)\n            while n % g == 0\n                fs, n := g :: fs, n / g\n        h, t, g, c := 1, 1, 1, c+1\n    return sort(n :: fs)\n\nfunction powerMod(b, e, m)\n    x := 1\n    while e > 0\n        if e%2 == 1\n            x, e := (x*b)%m, e-1\n        else b, e := (b*b)%m, e//2\n    return x\n\nfunction gcd(a, b)\n    if b == 0 then return a\n    return gcd(b, a % b)\n```\n\n\nProperly implemented, that algorithm should factor your 79-bit number nearly instantly.\n\nTo factor larger numbers, you will have to work harder. Look up \"elliptic curve factorization\" and \"self-initializing quadratic sieve\" to find factoring algorithms that you can implement yourself.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Functional algorithm to reverse a number\r\n                \r\nI've been playing with Clojure lately and I can't get this algorithm to work:\n\n```\n(defn reverse-number [number reversed]\n   (if (= number 0)\n     reversed\n     (reverse-number (/ number 10) \n                     (+ (rem number 10) (* reversed 10)))))\n```\n\n\nThis is how I should call it ```\n(reverse-number 123 0)```\n and the result I expect is: ```\n321```\n.\nWhen I run this, the REPL just hangs.  \n\nCan someone explain me, please, what is happening, what I did wrong and how to get this function working?\n\nNote: I know I can use string functions to reverse a number. Actually, I already did this, but I'm not interested in this solution. All I want is to make the leap to functional languages. That's why I try multiple approaches.\n\nUsing string functions:\n\n```\n(defn reverse-number [n]\n  (Integer. (clojure.string/reverse (str n))))\n\n(reverse-number 123)  ; --> 321\n```\n\n\nI don't like this version since it feels like cheating by using the string version of reverse.\n    ", "Answer": "\r\nYou should use quot instead of ```\n/```\n.  \n\n```\n/```\n in clojure will give you a fraction so ```\nnumber```\n will never be 0 (unless it's 0 from the beginning), while ```\nquot```\n will give you \"integer division\". \n\nExamples:\n\n```\nuser=> (/ 123 10)                  \n123/10\nuser=> (quot 123 10)\n12\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Number game algorithm\r\n                \r\nI am doing some research at the moment into creating a new maths game for primary school children where divs from 0-9 appear at random inside a container. \n\nA question is given at the beginning. Something like, multiples of 20. The user will then have to click on the correct ones, and they will then be counted at the end and a score will be given.\n\nSo at the moment I have the basic structure, divs pop up and you click them and it adds to the correct answer, meaning there is no wrong answer at this point in time.\n\nI want to know what the best way of determining the right and wrong answers is. Is there and algorithm that I can use that will work out whether the answers are right or wrong, and how would I link it to the divs?\n\n```\n<div id=\"container\">\n    <div id=\"char1\" class=\"character right1\" vaule=\"1\"></div>\n    <div id=\"char2\" class=\"character right2\" vaule=\"2\"></div>\n    <div id=\"char3\" class=\"character right3\" vaule=\"3\"></div>\n    <div id=\"char4\" class=\"character right4\" vaule=\"4\"></div>\n    <div id=\"char5\" class=\"character right5\" vaule=\"5\"></div>\n    <div id=\"char6\" class=\"character right6\" vaule=\"6\"></div>\n    <div id=\"char7\" class=\"character right7\" vaule=\"7\"></div>\n    <div id=\"char8\" class=\"character right8\" vaule=\"8\"></div>\n    <div id=\"char9\" class=\"character right9\" vaule=\"9\"></div>\n    <div id=\"char9\" class=\"character right0\" vaule=\"0\"></div>\n</div>\n```\n\n\nwrong answers will be given the class \".wrong\" as apposed to \".right\"\n\nFiddle: http://jsfiddle.net/SKB3Q/10/\n    ", "Answer": "\r\nThe first thing you need to do is come up with a question for any notion of right or wrong to make sense. \n\nFor example: \"Click all numbers that are greater than 20\"\n\nThe second thing you need to do is express this question as a boolean expression that evaluates to true or false.\n\n```\n(selection>20)\n```\n\n\nThen evaluate this expression for each selection to determine whether it is right or wrong.\n\nHere is an example of what I mean. Before the game starts, the script adds the appropriate class to each element. The question is \"Select all numbers greater than 5\"\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm of finding numbers\r\n                \r\nWrite a recursive algorithm which enumerates dominant primes. Your algorithm should print dominant primes as it finds them (rather than at the end).By default we limit the dominant primes we are looking for to a maximum value of  10^12, the expected run time should be around or less than a minute.\n\nThe following is my python code which doesn't work as expected:\n\n```\nimport math\ndef test_prime(n):\n    k = 2\n    maxk = int(math.sqrt(n))\n    while k <= maxk:\n        if n % k == 0:\n            return False\n        if k == 2:\n            k += 1\n        else:\n            k += 2\n    return (n is not 1)\n\n\ndef dominant_prime_finder(maxprime=10**12,n=1):\n    l = 1    #length of the current number\n    while n // 10 > 0:\n        l += 1\n        n //= 10\n    if test_prime(n) == True:\n        is_dominant_prime = True\n        index_smaller = n\n        while l > 1 and index_smaller > 9:\n            index_smaller //= 10\n            if test_prime(index_smaller) == False:\n                is_dominant_prime = False\n                break\n        for i in range(1,10):\n            if test_prime(i*10**l + n) == True:\n                is_dominant_prime = False\n                break\n        if is_dominant_prime == True:\n            print(n)\n    while n <= maxprime:\n        dominant_prime_finder()\n```\n\n    ", "Answer": "\r\nYou can solve the problem without enumerating all the numbers under 10^12 which is inefficient by doing a recursion on the length of the number. \n\nIt works the following way: \n\n\nThe prime number of length 1 are: 2,3,5,7.\nFor all these numbers check the third condition, for any digit  ```\ndn+1∈{1,…,9}```\n , ```\ndn+1dn…d0```\n  is not prime. For 2 it's okay. For 3 it fails (13 for instance). Store all the prime you find in a list L. Do this for all the prime of length 1. \nIn L you now have all the prime number of length 2 with a prime as first digit, thus you have all the candidates for dominant prime of length 2 \n\n\nDoing this recursively gets you all the dominant prime, in python: \n\n```\ndef test_prime(n):\n    k = 2\n    maxk = int(math.sqrt(n))\n    while k <= maxk:\n        if n % k == 0:\n            return False\n        if k == 2:\n            k += 1\n        else:\n            k += 2\n    return (n is not 1)\n\ndef check_add_digit(number,length):\n    res = []\n    for i in range(1,10):\n        if test_prime( i*10**(length) + number ):\n            res.append(i*10**(length) + number)\n    return res\n\ndef one_step(list_prime,length): \n    ## Under 10^12 \n    if length > 12:\n        return None\n\n    for prime in list_prime: \n\n        res = check_add_digit(prime,length)\n\n        if len(res) == 0:\n            #We have a dominant prime stop \n            print(prime)\n        else:\n            #We do not have a dominant prime but a list of candidates for length +1\n            one_step(res,length+1)\n\none_step([2,3,5,7], length=1)\n```\n\n\nThis works in under a minute on my machine. \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Efficient algorithm for finding the same number [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Algorithm to find duplicate in an array\r\n                            \r\n                                (6 answers)\r\n                            \r\n                    \r\n                    \r\n                        Algorithm to find two repeated numbers in an array, without sorting\r\n                            \r\n                                (25 answers)\r\n                            \r\n                    \r\n                Closed 9 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nThere are 1002 numbers in an array and two numbers are the same. How would you find the same number in this array efficiently or is there an efficient algorithm?\n\nHere is my algorithm:\n\n```\nfor i in range(0, 1002):\n    for j in range(i+1, 1002):\n        if(a[i]==a[j]):\n           return a[i]\n```\n\n    ", "Answer": "\r\nThis should work!\n\n```\n#include<stdio.h>\n#define RANGE 1000000001\nint main()\n{\n  int arr[1002];//your all numbers;\n  short int hash[RANGE];//Your range of numbers \n  long long int i;\n  for(i = 0; i < RANGE; i++)\n    hash[i] = 0;\n  for(i = 0; i < 1002; i++)\n    {\n      if(hash[arr[i]] != 0)\n    {\n      printf(\"Duplicate number is:%d\\n\",arr[i]);\n      break;\n    }\n      else\n    hash[arr[i]]++;\n    }\n  return 0;\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Is there a better algorithm to assign numbers to combinations?\r\n                \r\nIt is well known that Pascal's identity can be used to encode a combination of k elements out of n into a number from 0 to ```\n(n \\choose k) - 1```\n (let's call this number a combination index) using a combinatorial number system. Assuming constant time for arithmetic operations, this algorithm takes O(n) time.†\n\nI have an application where k ≪ n and an algorithm in O(n) time is infeasible. Is there an algorithm to bijectively assign a number between 0 and  ```\n(n \\choose k) - 1```\n to a combination of k elements out of n whose runtime is of order O(k) or similar? The algorithm does not need to compute the same mapping as the combinatorial number system, however, the inverse needs to be computable in a similar time complexity.\n\n\n\n† More specifically, the algorithm computing the combination from the combination index runs in O(n) time. Computing the combination index from the combination works in O(k) time if you pre-compute the binomial coefficients.\n    ", "Answer": "\r\nDescription of a comment.\n\nFor given combinatorial index (```\nN```\n), to find ```\nk'th```\n digit it is needed to find ```\nc_k```\n such that ```\n(c_k \\choose k) <= N```\n and ```\n((c_k+1) \\choose k) > N```\n.\n\nSet ```\nP(i,k) = i!/(i-k)!```\n.\n\n```\nP(i, k) = i * (i-1) * ... * (i-k+1)\nsubstitute x = i - (k-1)/2\n  = (x+(k-1)/2) * (x+(k-1)/2-1) * ... * (x-(k-1)/2+1) * (x-(k-1)/2)\n  = (x^2 - ((k-1)/2)^2) * (x^2 - ((k-1)/2-1)^2) * ...\n  = x^k - sum(((k-2i-1)/2)^2))*x^(k-2) + O(x^(k-4))\n  = x^k - O(x^(k-2))\nP(i, k) = (i - (k-1)/2)^k - O(i^(k-2))\n```\n\n\nFrom above inequality:\n\n```\n(c_k \\choose k) <= N\nP(c_k, k) <= N * k!\nc_k ~= (N * k!)^(1/k) + (k-1)/2\n```\n\n\nI am not sure how large is O(c_k^(k-2)) part. I suppose it doesn't influence too much. If it is of order ```\n(c_k+1)/(c_k-k+1)```\n than approximation is very good. That is due:\n\n```\n((c_k+1) \\choose k) = (c_k \\choose k) * (c_k + 1) / (c_k - k + 1)\n```\n\n\nI would try algorithm something like:\n\n```\nFor given k\nPrecalculate k!\n\nFor given N\nFor i in (k, ..., 0)\n  Calculate c_i with (N * i!)^(1/i) + (i-1)/2\n  (*) Check is P(c_i, k) <=> N * i!\n    If smaller check c_i+1\n    If larger check c_i-1\n    Repeat (*) until found P(c_i, i) <= N * i! < P(c_i+1, i)\n  N = N - P(c_i, i)\n```\n\n\nIf approximation is good, ```\nnumber of steps << k```\n, than finding one digit is O(k).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Calculating the position of QR Code alignment patterns\r\n                \r\nI need to know how to calculate the positions of the QR Code alignment patterns as defined in the table of ISO/IEC 18004:2000 Annex E.\n\nI don't understand how it's calculated. If you take the Version 16, for example, the positions are calculated using {6,26,50,74} and distance between the points are {20,24,24}. Why isn't it {6,28,52,74}, if the distances between the points, {22,24,22}, is distributed more equally?\n\nI would like to know how this can be generated procedurally.\n    ", "Answer": "\r\nWhile the specification does provide a table of the alignment, this is a reasonable question (and one I found myself with :-)) - the possibility of generating the positions procedurally has its merits (less typo-prone code, smaller code footprint, knowing pattern/properties of the positions).\n\nI'm happy to report that, yes, a procedure exists (and it is even fairly simple).\nThe specification itself says most of it:\n\n\n  [The alignment patterns] are spaced as evenly as possible between the Timing Pattern and the opposite side of the symbol, any uneven spacing being accommodated between the timing pattern and the first alignment pattern in the symbol interior.\n\n\nThat is, only the interval between the first and second coordinate may differ from the rest of the intervals. The rest must be equal.\nAnother important bit is of course that, for the APs to agree with the timing patterns, the intervals must be even.\nThe remaining tricky bit is just getting the rounding right.\n\nAnyway - here's code printing the alignment position table:\n\n```\ndef size_for_version(version):\n    return 17 + 4 * version\n\ndef alignment_coord_list(version):\n    if version == 1:\n        return []\n    divs = 2 + version // 7\n    size = size_for_version(version)\n    total_dist = size - 7 - 6\n    divisor = 2 * (divs - 1)\n    # Step must be even, for alignment patterns to agree with timing patterns\n    step = (total_dist + divisor // 2 + 1) // divisor * 2 # Get the rounding right\n    coords = [6]\n    for i in range(divs - 2, -1, -1): # divs-2 down to 0, inclusive\n        coords.append(size - 7 - i * step)\n    return coords\n\nfor version in range(1, 40 + 1): # 1 to 40 inclusive\n    print(\"V%d: %s\" % (version, alignment_coord_list(version)))\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Is there a limit for inserting number of images in google sheets\r\n                \r\nI have inserted over 10,060 images into my google sheet (mostly Rubik's cube algorithms and their cube diagram). They are 40-45BB PNG image, and I use the operation, ```\nInsert -> Image -> Image in cell```\n to insert the image.\nSuddenly after 2 years, and filling in over 10k images in one column I get this error message,\n\nIs there a limit on the number of images we can insert into one sheet?\n    ", "Answer": "\r\nactually, there is a limit of 100 MB and other sources indicate the limit depends on the pixel area\n\nhttps://spreadsheetpoint.com/google-sheets-limitations/\nhttps://tanaikech.github.io/2018/07/10/limitation-of-images-for-inserting-to-spreadsheet-using-google-apps-script/\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Need an algorithm to split a series of numbers\r\n                \r\nAfter a few busy nights my head isn't working so well, but this needs to be fixed yesterday, so I'm asking the more refreshed community of SO.\n\nI've got a series of numbers. For example:\n\n\n  1, 5, 7, 13, 3, 3, 4, 1, 8, 6, 6, 6\n\n\nI need to split this series into three parts so the sum of the numbers in all parts is as close as possible. The order of the numbers needs to be maintained, so the first part must consist of the first X numbers, the second - of the next Y numbers, and the third - of whatever is left.\n\nWhat would be the algorithm to do this?\n\n(Note: the actual problem is to arrange text paragraphs of differing heights into three columns. Paragraphs must maintain order (of course) and they may not be split in half. The columns should be as equal of height as possible.)\n    ", "Answer": "\r\nFirst, we'll need to define the goal better:\n\nSuppose the partial sums are A1,A2,A3, We are trying to minimize |A-A1|+|A-A2|+|A-A3|. A is the average: A=(A1+A2+A3)/3.\n\nTherefore, we are trying to minimize |A2+A3-2A1|+|A1+A3-2A2|+|A1+A2-2A3|.\n\nLet S denote the sum (which is constant): S=A1+A2+A3, so A3=S-A1-A2.\n\nWe're trying to minimize:\n\n|A2+S-A1-A2-2A1|+|A1+S-A1-A2-2A2|+|A1+A2-2S+2A1+2A2|=|S-3A1|+|S-3A2|+|3A1+SA2-2S|\n\nDenoting this function as f, we can do two loops O(n^2) and keep track of the minimum:\n\nSomething like:\n\n```\nfor (x=1; x<items; x++)\n{\n    A1= sum(Item[0]..Item[x-1])\n    for (y=x; y<items; y++)\n    {\n        A2= sum(Item[x]..Item[y-1])\n        calc f, if new minimum found -keep x,y\n    }\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to cover maximal number of points with one circle of given radius\r\n                \r\nLet's imagine we have a plane with some points on it.\nWe also have a circle of given radius.\n\nI need an algorithm that determines such position of the circle that it covers maximal possible number of points. Of course, there are many such positions, so the algorithm should return one of them.\nPrecision is not important and the algorithm may do small mistakes.\n\nHere is an example picture:\n\n\nInput:\n  ```\nint n```\n (n<=50) – number of points;\n  ```\nfloat x[n]```\n and ```\nfloat y[n]```\n – arrays with points' X and Y coordinates;\n  ```\nfloat r```\n – radius of the circle.\n\nOutput:\n  ```\nfloat cx```\n and ```\nfloat cy```\n – coordinates of the circle's center\n\nLightning speed of the algorithm is not required, but it shouldn't be too slow (because I know a few slow solutions for this situation).\n\nC++ code is preferred, but not obligatory.\n    ", "Answer": "\r\nEdited to better wording, as suggested :\n\nBasic observations :\n\n\nI assume the radius is one, since it doesn't change anything.\ngiven any two points, there exists at most two unit circles on which they lie.\ngiven a solution circle to your problem, you can move it until it contains two points of your set while keeping the same number of points of your set inside it.\n\n\nThe algorithm is then:\n\n\nFor each pair of points, if their distance is < 2, compute the two unit circles C1 and C2 that pass through them.\nCompute the number of points of your set inside C1 and C2\nTake the max.\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "A good algorithm for generating an order number\r\n                \r\nAs much as I like using GUIDs as the unique identifiers in my system, it is not very user-friendly for fields like an order number where a customer may have to repeat that to a customer service representative.\n\nWhat's a good algorithm to use to generate order number so that it is:\n\n\nUnique\nNot sequential (purely for optics)\nNumeric values only (so it can be easily read to a CSR over phone or keyed in)\n< 10 digits\nCan be generated in the middle tier without doing a round trip to the database.\n\n\nUPDATE (12/05/2009)\nAfter carefully reviewing each of the answers posted, we decided to randomize a 9-digit number in the middle tier to be saved in the DB.  In the case of a collision, we'll regenerate a new number.\n    ", "Answer": "\r\nIf the middle tier cannot check what \"order numbers\" already exists in the database, the best it can do will be the equivalent of generating a random number.  However, if you generate a random number that's constrained to be less than 1 billion, you should start worrying about accidental collisions at around ```\nsqrt(1 billion)```\n, i.e., after a few tens of thousand entries generated this way, the risk of collisions is material.  What if the order number is sequential  but in a disguised way, i.e. the next multiple of some large prime number modulo 1 billion -- would that meet your requirements?\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for checking if number is factorable into a set of prime numbers\r\n                \r\nI was wondering if there is an algorithm that checks wether a given number is factorable into a set of prime numbers and if no give out the nearest number.\nThe problem comes always up when I use the FFT.\n\nThanks a lot for your help guys.\n    ", "Answer": "\r\nIn general this looks like a hard problem, particularly finding the next largest integer that factors into your set of primes.  However, if your set of primes isn't too big, one approach would be to turn this into an integer optimization problem by taking the logs.  Here is how to find the smallest number > n that factors into a set of primes p_1...p_k\n\n```\nchoose integers x_1,...,x_k to minimize (x_1 log p_1 + ... + x_k log p_k - log n)\nSubject to:\n  x_1 log p_1 + ... + x_k log p_k >= log n\n  x_i >= 0 for all i\n```\n\n\nThe x_i will give you the exponents for the primes.  Here is an implementation in R using lpSolve:\n\n```\nminfact<-function(x,p){\n  sol<-lp(\"min\",log(p),t(log(p)),\">=\",log(x),all.int=T)\n  prod(p^sol$solution)\n}\n\n> p<-c(2,3,13,31)\n> x<-124363183\n> y<-minfact(x,p)\n> y\n[1] 124730112\n> factorize(y)\nBig Integer ('bigz') object of length 13:\n [1] 2  2  2  2  2  2  2  2  3  13 13 31 31\n> y-x\n[1] 366929\n> \n```\n\n\nUsing big integers, this works pretty well even for large numbers:\n\n```\n> p<-c(2,3,13,31,53,79)\n> x<-as.bigz(\"1243631831278461278641361\")\n> y<-minfact(x,p)\ny\n> \nBig Integer ('bigz') :\n[1] 1243634072805560436129792\n> factorize(y)\nBig Integer ('bigz') object of length 45:\n [1] 2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2 \n[26] 2  2  2  2  2  2  2  2  3  3  3  3  13 31 31 31 31 53 53 53\n> \n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Pyramid Number Algorithm\r\n                \r\nI want to generate a static pyramid like these:\n\n```\n1 2 4 8 16 32 64 128 64 32 16 8 4 2 1 \n    1 2 4 8 16 32 64 32 16 8 4 2 1 \n      1 2 4 8 16 32 16 8 4 2 1 \n         1 2 4 8 16 8 4 2 1 \n           1 2 4 8 4 2 1 \n             1 2 4 2 1 \n               1 2 1\n                 1\n```\n\n\nwith PHP, I already create this code :\n\n```\n<center>\n<?php\n    $x1 = 1; $x2 = 128;\n    $str_tmp = \"\";\n    $cek = 0;\n    $start = 0;\n    for($i=0;$i<=7;$i++){\n        for($j=$i;$j<=13;$j++){\n            for($z=$i;$z<$i;$z++){\n            $str_tmp.= (\"&nbsp\") ;          \n            }\n            if($x2==1){\n                $str_tmp.= $x2;\n                break;\n            }\n            if($cek==0){\n                $str_tmp.= $x1 . \" \";\n                $x1 = $x1 * 2;\n                if($x1==$x2){\n                    $cek = 1;\n                    $x2 = $x2/2;                        \n                }\n            }if($cek==1){\n                $str_tmp.= $x1 . \" \";\n                $x1 = $x1 /2;\n            }if($cek==1&&$x1<1){\n            break;\n            }\n        }\n        echo $str_tmp.\"</br>\";\n        $str_tmp = \"\";\n        $x1 = 1;\n        $cek = 0;       \n    }\n?>\n</center>\n```\n\n\nI think it's looks like too complicated. Do you guys have a better solution? I don't mind if you guys write the code with another language.\n\nThank You\n    ", "Answer": "\r\nSomething like this?\n\n```\necho \"<div style=\\\"text-align: center;\\\">\";\n\nfor ($l=7; $l>=0; $l--){\n\n  $str = \"\"; \n\n  for ($p=-$l; $p<=$l; $p++)\n    $str .= (1 << ($l - abs($p))) . \" \";\n\n  echo substr($str,0,-1) . ($l ? \"<br>\" : \"\");\n}\n\necho \"</div>\";\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "numbering issues of using Algorithms package\r\n                \r\nI am using algorithms package to writing my thesis, and having a question on numbering issue. The thesis is composed of several chapters, and each chapter may include a set of algorithms, procedures and heuristics, and each of which is presented using algorithms package.  \n\nAfter using \\floatname to customize the captions, I now have\nAlgorithm 1.1, Algorithm 1.2, Procedure 1.3 Procedure 1.4, Algorithm 2.1, Algorithm 2.2, Procedure 2.3 Procedure 2.4\n\nThis is not the numbering scheme what I want, which should look like\n\nAlgorithm 1.1, Algorithm 1.2, Procedure 1.1 Procedure 1.2, Algorithm 2.1, Algorithm 2.2, Procedure 2.1 Procedure 2.2 \n\nCan you let me know any hint for doing this? Thanks.\n    ", "Answer": "\r\nYou could try to define new environments for algorithms and procedures (and heuristics) alike, all calling the algorithms package and use custom counters on both. That way you could increase the two counters separately whenever either is used in your thesis.\n\nFor further help on setting custom counters read the advanced topics section of the wikibooks or the blog entry on latex matters covering counters.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Crossing number algorithm in android\r\n                \r\nI am building an asteroids-like game for Android. I am reading \"android game programming by example\". I am implementing the crossing number algorithm. The app is finished and it works, but I don't understand this part of the code:\n\n```\nif (((cp2.currentPoint.y > cp1.currentPoint.y) !=\n    (cp2.currentPoint2.y > cp1.currentPoint.y)) &&\n    (cp1.currentPoint.x < (cp2.currentPoint2.x - cp2.currentPoint2.x) *\n    (cp1.currentPoint.y - cp2.currentPoint.y) / (cp2.currentPoint2.y - cp2.currentPoint.y) + cp2.currentPoint.x))\n```\n\n\nWhere ```\ncp1.currentPoint```\n is the first object's first vertex (so it is a point), ```\ncp2.currentPoint```\n is the second object's first vertex and ```\ncp2.currentPoint2```\n is the second point.  These two points form our line. \n\nThis part I don't understand:\n\n```\n(cp2.currentPoint2.x - cp2.currentPoint2.x)\n```\n\n\nThe result of this is always 0, so why have I to do that?\n    ", "Answer": "\r\nAs you stated it being always zero, you don't need it. Maybe some other values were meant to be there but it was forgotten. So just take it out to clear your code.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Testing implementation details for automated assessment of sorting algorithms\r\n                \r\nI'm looking at automated assignments for an introductory algorithms and data structures course. Students submit code, I run boost tests on them, the number of passed tests gives a grade, easy. But I want to assess sorting algorithms, for example \"Implement bubble-, insertion-, selection- and merge-sort\". Is there a clever way to test the implementations of each to know they did in fact implement the algorithm requested?\nObviously I can check they sorted the inputs. But what I really want is something better than just comparing the timings for various inputs to check complexities.\n    ", "Answer": "\r\n\nIs there a clever way to test the implementations of each to know they\ndid in fact implement the algorithm requested?\n\nMake them write a generic sort that sorts (say) a ```\nstd::vector<T>```\n, and then in your unit test provide a class where you overload the comparison operator used by the sorting algorithm to log which objects it's sorting.  At the end your test can examine that log and determine if the right things were compared to one another in the right order.\nWhat distinguishes one sorting algorithm from another is ultimately the order in which elements are compared.\nEDIT: Here's a sample implementation.  Not the cleanest or prettiest thing in the world, but sufficient as a throwaway class used in a unit test.\n```\nstruct S\n{\n  static std::vector<std::pair<int, int>> * comparisonLog;\n\n  int x;\n\n  S(int t_x) : x(t_x) { }\n\n  bool operator <(const S & t_other) const\n  {\n      comparisonLog->push_back({x, t_other.x});\n      \n      return x < t_other.x;\n  }\n};\n\nstd::vector<std::pair<int, int>> * S::comparisonLog;\n```\n\nSample usage in a unit test:\n```\n    std::vector<std::pair<int, int>> referenceComparisons, studentComparisons;\n\n    const std::vector<S> values = { 1, 5, 4, 3, 2 };\n\n    S::comparisonLog = &referenceComparisons;\n    {\n      auto toSort = values;\n      std::sort(toSort.begin(), toSort.end());\n    }\n\n    S::comparisonLog = &studentComparisons;\n    {\n        auto toSort = values;\n        studentSort(toSort);\n        assert(std::is_sorted(toSort.begin(), toSort.end()));\n    }\n\n    assert(referenceComparisons == studentComparisons);\n```\n\nThis checks that ```\nstudentSort```\n implements the same sorting algorithm as ```\nstd::sort```\n. (Of course, what it doesn't check is that ```\nstudentSort```\n doesn't just forward to ```\nstd::sort```\n...)\nEDIT TO ADD: An alternative, which may generalize better to things other than sorting algorithms specifically, would be to make them write a generic sort taking begin and end iterators of a particular type and instrumenting the pointer arithmetic and dereferencing operators for the iterators you hand them.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Python algorithm for prime numbers\r\n                \r\nI'm trying to filter off the prime numbers from 1 to 100 and here is the codes. However, it turns out that there are many numbers missed in the output.\n\n```\ndef isnot_prime(x):\nif x == 1:\n    return True\nif x == 2:\n    return False\nfor i in range(2, int(x**0.5)+1):\n    if x % i == 0:\n        return True\n    else:\n        return False\n\nprint filter(isnot_prime, range(1,101))\n```\n\n\nThe output is [1, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100].\n\nThere must be something wrong with the algorithm. How can I improve it? \n\nThank you.\n    ", "Answer": "\r\nModify your ```\nfor```\n to this:\n\n```\nfor i in range(2, int(round(x**0.5 + 1))+1):\n    if x % i == 0:\n        return True\n```\n\n\nRemove the ```\nelse:```\n and remember that int(float) just takes the integral part (it does not round).\n\nAlso, keep in mind that there are faster algorithms to do this. For example the Sieve of Eratosthenes is a fast and simple algorithm.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for product of n numbers\r\n                \r\nI have a question about running time of an algorithm that express the product of n numbers.. I think the best solution is divide and conquer which is based on halving the n element by 2 recursively and multiply 2 elements. The confusing part is the number of simple operations. In case of Divide and Conquer  the complexity should be O(logn) So if we have 8 numbers to multiply we should end up with 3 basic steps E.g we have 8 numbers... we can halve 8 until we reach to 2 and start multiplying it.. (a1 a2 a3 a4 a5 a6 a7 a8) ... (a1*a2=b1) (a3*a4=b2) (a5*a6=b3) (a7*a8=b4) (b1*b2=c1) (b3*b4=c2) (c1*c2=final result)..However, in this result we need 7 simple multiplication. Can someone clarify this to me..?\n    ", "Answer": "\r\nDivide and conquer is for cases when you can divide your original set into multiple subsets which, after you've identified and created them, do not interact anymore (or only in a way that's neglectably cheap compared to the operation on each subset). In your case, you're violating the \"subsets do not interact after identifying them\" rule.\n\nAlso, O(x) does not mean the number of operations is less than x. It just means, that for any concrete data set of size x, there is a finite value d so that the number of operations needed is smaller than d*x. (My native language is german, i hope i didn't change the meaning when translating). So the fact that you need 8 operations on 8 data items does not, per se, mean the complexity is larger than O(log n).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Log-log plot/graph of algorithm time complexity [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question is opinion-based. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it can be answered with facts and citations by editing this post.\r\n                \r\n                    \r\n                        Closed 9 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI just wrote the quick and merge sort algorithms and I want to make a log-log plot of their run time vs size of array to sort. \n\nAs I have never done this my question is does it matter if I choose arbitrary numbers for the array length (size of input) or should I follow a pattern (something like 10^3, 10^4, 10^5, etc)?\n    ", "Answer": "\r\nIn general, you need to choose array lengths, for each method, that are large enough to display the expected o(n log n) or O(n^2) type behavior. \n\nIf your n is too small the run time may be dominated by other growth rates, for example an algorithm with run time = 1000000*n + n^2 will look to be ~O(n) for n < 1000. For most algorithms the small n behavior means that your log-log plot will initially be curved.\n\nOn the other hand, if your n is too large your algorithm may take too long to complete.\n\nThe best compromise may be to start with small n, and time for n, 2n, 4n,..., or n, 3n, 9n,... and keep increasing until you can clearly see the log log plots asymptoting to a straight lines.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to score similarness of sets of numbers\r\n                \r\nWhat is an algorithm to compare multiple sets of numbers against a target set to determine which ones are the most \"similar\"?\n\nOne use of this algorithm would be to compare today's hourly weather forecast against historical weather recordings to find a day that had similar weather.\n\nThe similarity of two sets is a bit subjective, so the algorithm really just needs to diferentiate between good matches and bad matches. We have a lot of historical data, so I would like to try to narrow down the amount of days the users need to look through by automatically throwing out sets that aren't close and trying to put the \"best\" matches at the top of the list.\n\nEdit:\nIdeally the result of the algorithm would be comparable to results using different data sets.  For example using the mean square error as suggested by Niles produces pretty good results, but the numbers generated when comparing the temperature can not be compared to numbers generated with other data such as Wind Speed or Precipitation because the scale of the data is different.  Some of the non-weather data being is very large, so the mean square error algorithm generates numbers in the hundreds of thousands compared to the tens or hundreds that is generated by using temperature.\n    ", "Answer": "\r\nI think the mean square error metric might work for applications such as weather compares. It's easy to calculate and gives numbers that do make sense.\n\nSince your want to compare measurements over time you can just leave out missing values from the calculation.\n\nFor values that are not time-bound or even unsorted, multi-dimensional scatter data it's a bit more difficult. Choosing a good distance metric becomes part of the art of analysing such data. \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "For a string that consists of a number algorithm\r\n                \r\nIf I want to make an algorithm that has the following rules:\n\n\n  Working from right to left,\n  \n  sum the digits in the odd-numbered positions (first, third, fifth,\n  etc.) and multiply the total by three;\n  \n  sum the digits in the even-numbered positions (second, fourth, sixth,\n  etc.);\n\n\nQuestion 1: How do I make int or double accept the number \"0\" in the beginning to prevent it from seeing that I am trying to use octal.\n\nQuestion 2: Specifically how to get the specific positions, I have thought of putting it into a string and trying to think of using sub string but I don't see how it would work. Though I have thought of something like \n\n```\n  String a = \"036000291452\";\nfor (int b = 0; a.length() > b; b + 2) {\n    String c = a.substring(b)\n//some converting * 3...\n}\n```\n\n\nto try to get the odd position (or even) and then converting it into int. But that doesn't print out one position. Thanks in advance for any help and any consideration.\n    ", "Answer": "\r\n\n  How do I make ```\nint```\n or ```\ndouble```\n accept the number \"0\" in the beginning to prevent it from seeing that I am trying to use octal?\n\n\nSince you are passing the number as a string, octal/decimal convention for integer literals does not apply in your situation. Generally, through, you remove leading zeros from your numeric constant.\n\n\n  Specifically how to get the specific positions\n\n\nSince you are working from right to left, start at ```\na.length()-1```\n, and go down by two, until you get to a negative index.\n\nTo get a digit from string ```\na```\n at position ```\ni```\n use ```\nCharacter.digit```\n, like this:\n\n```\nint digit = Character.digit(a.charAt(i), 10);\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for check a Civil Number\r\n                \r\nCan someone help me to write a Javascript/Algorithm function that check if the Unique citizenship number is correct or no?\n\nI want a Javascript function based on this logic\n\nhttps://en.wikipedia.org/wiki/Unique_citizenship_number\n\nWant to write a function that check and give follow values\n\nExample\n\n7523169263 — a male, born on 16 March 1875\n8032056031 — a female, born on 5 December 1880\n8001010008 — a male, born on 1 January 1980\n7501020018 — a female, born on 2 January 1975\n7552010005 — a male, born on 1 December 2075\n7542011030 — a female, born on 1 February 2075\n\nThanks\n\nThat is what i did\n\n```\nvar checkCivilNumber = function(number) {\n  var coef  = [2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2],\n      sum = 0;\n  for (var i = 0; i < number.length - 1; i++) {\n    sum += parseInt(number[i]) * coef[i];\n  }\n  return  (11 - (sum % 11) == number[number.length-1]);\n}\n```\n\n    ", "Answer": "\r\n```\nvar checkCivilNumber = function(number) {\n  var coef  = [2, 4, 8, 5, 10, 9, 7, 3, 6],\n      sum = 0;\n  for (var i = 0; i < number.length - 1; i++) {\n    sum += parseInt(number[i]) * coef[i];\n  }\n  return (((sum % 11) % 10) == number[number.length-1]);\n}\n```\n\n\n\nCoefficients were in reverse order\nAfter calculating the sum modulo 11, calculate the result modulo 10, so that 10 is changed to 0 as per the algorithm\n\n\nTesting:\n\n```\nconsole.log(checkCivilNumber(\"7523169263\"));\nconsole.log(checkCivilNumber(\"8032056031\"));\nconsole.log(checkCivilNumber(\"8001010008\"));\nconsole.log(checkCivilNumber(\"7501020018\"));\nconsole.log(checkCivilNumber(\"7552010005\"));\nconsole.log(checkCivilNumber(\"7542011030\"));\n```\n\n\nHere's a function for getting the details. The fields can be extracted using substring and then adjusted according to the rules. I'll leave it up to you to format the output correctly:\n\n```\nvar civilNumberDetails = function(number) {\n   var year = parseInt(number.substring(0,2)) + 1900;\n   var month = parseInt(number.substring(2,4));\n   var day = parseInt(number.substring(4,6));\n   if(month > 40) // years from 2000-2099 have 40 added to the month\n   {\n       month -= 40;\n       year += 100;\n   }\n   if(month > 20) // years from 1800-1899 have 20 added to the month\n   {\n       month -= 20;\n       year -= 100;\n   }\n   // check odd/even of 9th digit using bitwise operator:\n   var gender = (parseInt(number[8]) & 1) ? \"F\" : \"M\";\n   console.log(year + \"-\" + month + \"-\" + day + \" \" + gender);\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Comparing Numbers Algorithm\r\n                \r\nI'm trying to compare two sets of number. I'll be given the numbers in a random order. The objective is to take the numbers in the second list, and locate them in the first list. The numbers are the X Coordinates from a list of points that are given from a file for the first list, and then selected by a user by clicks on an image for the second list. For example X Coord Set 1: \n\n\n177\n150\n212\n45\n91\n330\n\n\nAnd then X Coord Set 2 (not always 3 points, could be 2, could be 5):\n\n\n212\n91\n150\n\n\nThis part is easy, since you just compare which ones in the second list are equal to the ones in the first. However it gets harder when the points are offset. For example in the image below, the original image in red is the default position, and the blue is a different image that is offset by +20px, which makes the the X points offset by +20px. I marked the original image points in red, the user clicks in blue, and finished off what the image should look like in black.\n\n\n\nMy question is what is the most effective way to find out which points have been clicked if there is an image offset like the one in the image. It won't always be 20px, and it won't always be a positive number. Maybe subtract the points and find the most common number?\n    ", "Answer": "\r\nAs I understand you always have a fixed offset in each run, but you don't know what is the offset, any greedy geometrical solution, like matching closest pairs together, may lead to a wrong answer.\n\nSort numbers in both lists, then find the one to one correspondence. Doesn't matter how the offset changes, in the sorted lists always numbers are in the correct place. To retrieve it in the original format you can do as follows (pseudo code):\n\n```\nstruct item \n{\nint value;\nint position;\n}\n\nList<item> inputs = new List<item>()\nList<item> original = new List<item>()\n\nfor i=1 ... n :\n\noriginal[i] = new item{lst1[i],i}\ninputs[i] = new item{lst2[i],i}\n\nSort inputs and originals w.r.t. their values,\n\nFor i=1...n\ninput[i].position = original[i].position;\n\nFor i=1..n\nlst2[inputs[i].position] = inputs[i].value;\n```\n\n\nNote that the above pseudo code works only if two list have the same size, for the case they have different sizes I'll update my answer later.\n\nConsider we have two sorted lists of different sizes: \n\nOriginal: 200 211 222 233 244 255 ..... 299\n\nand\n\nInput: 224, 257, 279\n\nFirst we assume 224 is corresponding to 200, then 257 should be corresponding to 257-24 = 223, but there is no 223 in the list, move the pointer forward, assume 224 corresponds to 211 then 257 should be correspond to the 257 - 13 = 244, we have 244 in the original list, then 279 should be corresponding to 279 - 13 = 256, but we don't have 256 in the original list, so move the pointer forward ... , we can see that 224 -> 244, 257->277, 279->299. Certainly there can be multiple correspondence in some circumstances but it's not possible to distinguish between them by the information that we have. Suppose the first list has size n and the second list has size m, the algorithm runs in time O(m.n), as usually the second list is small (user clicks) this is almost linear. On the other finding longest common subsequence is O(n^2) so the mentioned algorithm is reasonably good.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Openssl speed benchmark test\r\n                \r\nRecently I need to test openssl suite performance on my machine. I ran speed to get some performance numbers. However I wanted specific performance such as encrytion time and decrytion time but the data I got is in the form of \n\n```\nDoing aes-128 cbc for 3s on 16 size blocks: 24115540 aes-128 cbc's in 3.00s\n```\n\n\nI checked speed.c file and it was \n\n```\nif (doit[D_CBC_128_AES])\n        {\n        for (j=0; j<SIZE_NUM; j++)\n            {\n                        print_message(names[D_CBC_128_AES],c[D_CBC_128_AES][j],lengths[j]);\n            Time_F(START);\n            for (count=0,run=1; COND(c[D_CBC_128_AES][j]); count++)\n                AES_cbc_encrypt(buf,buf,\n                    (unsigned long)lengths[j],&aes_ks1,\n                    iv,AES_ENCRYPT);// :O only encryption\n            d=Time_F(STOP);\n                        print_result(D_CBC_128_AES,j,count,d);//xxxxx\n\n            }\n        }\n```\n\n\nSo it is only doing encryption, not decryption. \n\nWhy is it so?\nHow can I get encryption time, and decryption time of algorithms and their modes? \nDo I have to write code myself for all algorithms?\nHow can I get cpu cycles used in a particular algorithm?\n    ", "Answer": "\r\nAES encryption and decryption times are about the same.\n\nYes, you will need to write your own tests because the times are affected by the processor type, processor speed and implementation. I have seen differences of 1000 times in speed on the same device with different implementations.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Unexpected segmentation fault working with small numbers in an algorithm [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question is not reproducible or was caused by typos. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     This question was caused by a typo or a problem that can no longer be reproduced. While similar questions may be on-topic here, this one was resolved in a way less likely to help future readers.\r\n                \r\n                    \r\n                        Closed 5 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI'm working with a statistical algorithm and keep getting a segmentation fault, and  I just can't see it. I'm pretty sure I've calloc'd the memory correctly. I'm wondering if maybe it has something to do with underflowing, as I only get the fault after a few iterations of the loop. Code is below, along with my ```\nprintf```\n's for debugging. Sorry if the syntax is a bit confusing here, I'm following along from a journal publication.\n\n```\n// *** n and m defined previously\nfloat *aux_arr = calloc(n, sizeof(float));\nif (aux_arr == NULL) {\n    printf(\"calloc failed\");\n}\n\nint j;\nint j0 = 1;\nint j1 = 1;\naux_arr[1] = 1;\n\nfor (size_t i = 0; i < n - 1; i++) {\n    printf(\"\\nOUTER\\n\");\n    j1 += 1;\n    printf(\"i: %zu\\n\", i);\n    printf(\"j1: %i\\n\", j1);\n\n    for (j = j1; j >= j0; j--) {\n        printf(\"\\nINNER\\n\");\n        printf(\"j: %i\\n\", j);\n        printf(\"j1: %i\\n\", j1);\n        printf(\"j0: %i\\n\", j0);\n\n        // print first 5 elements of my aux_arr\n        for (int i = 0; i < 5; i++) {\n            printf(\"%f\\n\", aux_arr[i]);\n        }\n\n        aux_arr[j] = (j/m) * (aux_arr[j]) + (1 + (1/m) - (j/m)) * (aux_arr[j - 1]);\n\n\n        if (aux_arr[j] < (1.0 * pow(10, -20))) {\n            aux_arr = 0;\n            if (j == j1) {\n                j1 -= -1;\n            }\n            if (j == j0) {\n                j0 += 1;\n            }\n        }\n    }\n}\n```\n\n\nOutputs the following: \n\n```\nOUTER\ni: 0\nj1: 2\n\nINNER\nj: 2\nj1: 2\nj0: 1\n0.000000\n1.000000\n0.000000\n0.000000\n0.000000\n\nINNER\nj: 1\nj1: 2\nj0: 1\n0.000000\n1.000000\n1.000000\n0.000000\n0.000000\n\nOUTER\ni: 1\nj1: 3\n\nINNER\nj: 3\nj1: 3\nj0: 2\nSegmentation fault: 11\n```\n\n\nYou can see that the problem comes when I try to access my ```\naux_arr```\n for the third time. I'm not sure why it works fine the first two times though. \n\nThanks!\n    ", "Answer": "\r\n```\naux_arr = 0;\n```\n\n\nThat's your culprit. You are setting ```\naux_array```\n to be the null pointer, and the next access is hence invalid.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to extract sentences between point and brackets with R?\r\n                \r\nI Have:\n\n\n  Stringa=\" This is diﬀerent from primary data created speciﬁcally by researchers to reﬂect concepts that are higher-order and more abstract(Lee,1991;Walsham,1995).Given the major diﬀerences between big data and research-collected data, it is surprising how little discussion has arisen about how using big data should change the practice of theory-informed IS research. Some scholars have noted that the very nature of inquiry is likely to change, given that large data sets, advanced algorithms, and powerful computing capabilities can initiate and reﬁne questions without human intervention (Agarwal & Dhar, 2014). Other commentators argue that the scientiﬁc method is likely to become obsolete, as with the “availability of huge amounts of data, along with the statistical tools to crunch these numbers … science can advance even without coherent models, uniﬁed theories, or really any mechanistic explanation at all” (Anderson, 2008). Perhaps “scientists no longer have to make educated guesses, construct hypotheses and models, test them in data-based experiments andexamples. Instead, they canmine thecomplete setof data forpatterns that reveal eﬀects, producing scientiﬁcconclusions without further experimentation” (Prensky, 2009). \"\n\n\nDesidered Output:\n\n```\n[1]This is diﬀerent from primary data created speciﬁcally by researchers to reﬂect concepts that are higher-order and more abstract(Lee,1991;Walsham,1995).\n[2]Some scholars have noted that the very nature of inquiry is likely to change, given that large data sets, advanced algorithms, and powerful computing capabilities can initiate and reﬁne questions without human intervention (Agarwal & Dhar, 2014)\n[3] Other commentators argue that the scientiﬁc method is likely to become obsolete, as with the “availability of huge amounts of data, along with the statistical tools to crunch these numbers … science can advance even without coherent models, uniﬁed theories, or really any mechanistic explanation at all” (Anderson, 2008)\n[4]Instead, they canmine thecomplete setof data forpatterns that reveal eﬀects, producing scientiﬁc conclusions without further experimentation” (Prensky, 2009)\n```\n\n\nI use:```\nunlist(str_extract_all(string =Stringa, pattern =  \"\\\\. [A-Za-z][^()]+ \\\\(\"))```\n\nBut it doesn't work\n\nI don’t want extract ‘Given the major diﬀerences between big data and research-collected data, it is surprising how little discussion has arisen about how using big data should change the practice of theory-informed IS research. ‘ and ‘Perhaps “scientists no longer have to make educated guesses, construct hypotheses and models, test them in data-based experiments andexamples. ‘\n    ", "Answer": "\r\nIf there are no abbreviations in the text, you may use\n\n```\nregmatches(Stringa, gregexpr(\"[^.?!\\\\s][^.!?]*?\\\\([^()]*\\\\)\", Stringa, perl=TRUE))\n[[1]]\n[1] \"This is diﬀerent from primary data created speciﬁcally by researchers to reﬂect concepts that are higher-order and more abstract(Lee,1991;Walsham,1995)\"                                                                                                                                                                         \n[2] \"Some scholars have noted that the very nature of inquiry is likely to change, given that large data sets, advanced algorithms, and powerful computing capabilities can initiate and reﬁne questions without human intervention (Agarwal & Dhar, 2014)\"                                                                           \n[3] \"Other commentators argue that the scientiﬁc method is likely to become obsolete, as with the “availability of huge amounts of data, along with the statistical tools to crunch these numbers … science can advance even without coherent models, uniﬁed theories, or really any mechanistic explanation at all” (Anderson, 2008)\"\n[4] \"Instead, they canmine thecomplete setof data forpatterns that reveal eﬀects, producing scientiﬁcconclusions without further experimentation” (Prensky, 2009)\"                                                                                                                                                                    \n```\n\n\nSee the regex demo and the  R demo.\n\nDetails\n\n\n```\n[^.?!\\\\s]```\n - any char but ```\n.```\n, ```\n?```\n, ```\n!```\n and whitespace\n```\n[^.!?]*?```\n - any 0+ chars other than ```\n.```\n, ```\n?```\n, ```\n!```\n as few as possible\n```\n\\([^()]*\\)```\n - a ```\n(```\n, 0+ chars other than ```\n(```\n and ```\n)```\n and then a ```\n)```\n.\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Java Program runs infinitely with no cause- No StackOverflow but program never terminates - Sudoku generator\r\n                \r\nI am working on trying to build a basic Sudoku generator in java 9+.\n\nThe Code works seemingly fine until a random point wherein it stops returning a new number, however the function generating the random number does still produce the numbers as I tested with a log. But it reaches a certain digit and just stops printing. I cannot figure out why. I am very new to algorithms and backtracking so any insight you can provide is appreciated. \n\nCode below\n\n```\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\nclass Scratch_5\n{\n\n    static boolean safe = true;\n    static int[][] grid = new int[9][9];\n    public static void main(String[] args)\n    {\n        for(int i = 0; i < grid.length; i++)\n        {\n            for(int j = 0; j < grid[i].length; j++)\n            {\n                int temp = 0;\n                do\n                {\n                    temp = getNumber();\n                }while (!noConflict(grid, i, j, temp));\n                grid[i][j] = temp;\n                System.out.print(grid[i][j] + \" \");\n            }\n            System.out.println();\n        }\n\n    }\n\n    static int getNumber()\n    {\n        Random r = new Random();\n\n        int temp = 0;\n        temp = r.nextInt(10-0);\n        return temp;\n    }\n    public static boolean noConflict(int[][] array, int row, int col, int num) {\n\n        for (int i = 0; i < 9; i++) {\n            if (array[row][i] == num) {\n                return false;\n            }\n            if (array[i][col] == num) {\n                return false;\n            }\n        }\n\n        int gridRow = row - (row % 3);\n        int gridColumn = col - (col % 3);\n        for (int p = gridRow; p < gridRow + 3; p++) {\n            for (int q = gridColumn; q < gridColumn + 3; q++) {\n                if (array[p][q] == num) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n\n```\n\n\nThank you.\n    ", "Answer": "\r\nYour logic is flawed. You will create configurations that cannot be completed, so you will be stuck in the do while loop. Let me demonstrate this with a simple example:\n\n```\n1 2 3 4 5 6 7 8 9\n4 5 6 1 2 3 . . .\n```\n\n\nAny of the positions with a dot cannot be filled, because there is already a 7, 8 or 9 in the box.\n\nYou could write a sudoku solver, then you place random numbers in the grid and try to solve it. As soon as there is a unique solution (this can be checked by solving from the bottom, try 1 then 2 then 3 and so on and from the top try 9 first then 8 then 7 and so on, if the 2 solutions are matching it is unique), you have a sudoku (not a solved one as the one you are trying to generate).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "A* algorithm and games\r\n                \r\nI am trying to implement minesweeper solver in lisp. I know this is not rare problem but i didn't find any article that can help me with that. At start i have a minefield as input with numbers on uncovered fields. Algorithm should be finished when all mines are found. So, in every step i have to check what fields i can put in my list of mined fields and to choose one field from my list of not mined fields and open it. Later i will check is my list of mined fields completed and if yes algorithm is done. I would appreciate any help. I don't ask for source code, but i need good ideas. I am not experienced with this kind of problems.\n\n\n\nI HAVE to use A* algorithm. And i don't need to open all unopened fields...I need to find positions of all mined fields. And of course it has to be the SHORTEST path to do that. When i find positions of all mined fields algorithm is finished. So, once more, i need to find all mined fields with optimal number of opened fields. And of course i need a heuristic for my algorithm which will help to choose one of all safe unopened fields.\nAnd that list of safe unopened fields needs to be determined after every opening. So i need to call main function, that function will check did i find all mined fields, if not, then all safe adjacent unopened fields needs to be added to list of paths. And a path with best heuristic will be chosen\n    ", "Answer": "\r\nI did implement a minesweeper solver in my first year at the University so I can give you some tips. (This is not using A* algorithm)\n\n\nImportant - Not all positions are solvable.\nBacktracking of the whole mine field is a bit complicated for advanced difficulties (complicated=takes some time, consider all the possibilites to place 100 mines in a 30x30 field).\nYou can solve everything locally, in the same way a human solves the minesweeper. The potential of this is to give the users a hint how to continue instead of solving everything.\n\n\nExample: \n\n\nHave a separate mine field where you do the solving\nFind all the unsolved cells that have a solved (number/ known mine) cell close enough (2 cell distance)\nFor every such cell, take a 5x5 neighborhood with the cell in the center, find every possibility (backtracking) and check if the possibilites have something in common (mines/non-mines), if yes, you can check the mines and uncover the non-mines.\nRepeat while you can uncover something.\nWhen you cannot uncover anything and the number of remaining mines is small enough, you can try backtracking over the whole field.\n\n\nI hope I remember it correctly, I did some proofs why the 5x5 area is enough to check but it was almost 10 years ago.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Find next prime number algorithm\r\n                \r\nI am looking forward to improve my algorithm to find the next primenumber to the right to a given number.\nWhat I have so far is this:\n\n```\nint NextPrime(int a)\n{\n    int i, j, count, num;\n    for (i = a + 1; 1; i++)\n    {\n        for (j = 2, count = 0; j <= i; j++)\n        {\n            if (i%j == 0)\n            {\n                count++;\n            }\n        }\n        if (count == 1)\n        {\n            return i;\n            break;\n        }\n    }\n}\n```\n\n\nTho this algorithm is not that efficent when running often.\nCan someone give advices on how the algorithm could be speed up or improved.\n    ", "Answer": "\r\nSieve of Eratosthenes is not the best solution when only one prime number should be found. Here is the solution which is useful for that purpose. It is based on the idea that all prime numbers are in form of 6k+-1, so I'm only testing 2, 3 and numbers in form 6+-1. Of course, the loop quits when divisor breaches sqrt(a) because all such numbers have already been tested.\n\n```\nbool IsPrime(int number)\n{\n\n    if (number == 2 || number == 3)\n        return true;\n\n    if (number % 2 == 0 || number % 3 == 0)\n        return false;\n\n    int divisor = 6;\n    while (divisor * divisor - 2 * divisor + 1 <= number)\n    {\n\n        if (number % (divisor - 1) == 0)\n            return false;\n\n        if (number % (divisor + 1) == 0)\n            return false;\n\n        divisor += 6;\n\n    }\n\n    return true;\n\n}\n\nint NextPrime(int a)\n{\n\n    while (!IsPrime(++a)) \n    { }\n    return a;\n\n}\n```\n\n\nNet result is that this loop works very fast on a couple of large numbers I've tried.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Determining the number of steps in an algorithm\r\n                \r\nI was going through my Data Structures and Algorithms notes, and came across the following examples regarding Time Complexity and Big-O Notation:    The columns on the left count the number of operations carried out in each line. I didn't understand why almost all the lines in the first example have a multiple of 2 in front of them, whereas the other two examples don't. Obviously this doesn't affect the resulting O(n), but I would still like to know where the 2 came form.\n    ", "Answer": "\r\nI can only find one explanation for this: the sloppiness of the author of the slides.\n\nIn a proper analysis one have to explain what kind of operations are performed at which time for what input (like for example this book on page 21). Without this you can not even be sure whether we count multiplication of 2 numbers as 1 operation or 2 or something else?\n\nThese slides are inconsistent. For example:\n\nIn slide1 ```\ncurrentMax = A[0]```\n takes 2 operations. Kind of makes sense if you take finding 0-th element in array as 1 operation and assigning as another one. But in the slide3 ```\nn```\n iterations of ```\ns = s + X[i]```\n takes n operations. Which means that ```\ns = s + X[i]```\n takes 1 operation. Also kind of makes sense we just increase one counter.\n\nBut it is totally inconsistent with each other, because it doesn't makes sense that ```\na = X[0]```\n is 2 operations, and ```\na = a + X[0]```\n where you do more takes only 1.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm in C - playing with numbers - number with 3 in units place\r\n                \r\nI came across this question in an interview. \nAny number with 3 in its units position has at least one multiple containing all ones. For instance, a multiple of 3 is 111, a multiple of 13 is 111111. Given a number ending in 3, I was asked the best method to find its multiple containing all 1's.\nNow a straightforward approach is possible, where you do not consider space issues but as the number grows, and sometimes even if it doesn't, an int (or a long int at that!) in C cannot hold that multiple.\nWhat is the optimal way to implement such an algorithm in C? \n    ", "Answer": "\r\nUPDATE: Incorporating Ante's observations and making the answer community wiki.\n\nAs usual in this type of problems, coding any working brute-force algorithm is relatively easy, but the more math. you do with pencil and paper, the better (faster) algorithm you can get.\n\nLet's use a shorthand notation: let M(i) mean 1111...1 (i ones).\n\nGiven a number n (let's say n = 23), you want to find a number m such that M(m) is divisible by n.  A straightforward approach is to check 1, 11, 111, 1111, ... until we find a number divisible by n.  Note: there might exist a closed-form solution for finding m given n, so this approach is not necessarily optimal.\n\nWhen iterating over M(1), M(2), M(3), ..., the interesting part is, obviously, how to check whether a given number is divisible by n.  You could implement long division, but arbitrary-precision arithmetic is slow.  Instead, consider the following:\n\nAssume that you already know, from previous iterations, the value of ```\nM(i) mod n```\n.  If ```\nM(i) mod n = 0```\n, then you're done (```\nM(i)```\n is the answer), so let's assume it's not.  You want to find ```\nM(i+1) mod n```\n.  Since ```\nM(i+1) = 10 * M(i) + 1```\n, you can easily calculate ```\nM(i+1) mod n```\n, as it's ```\n(10 * (M(i) mod n) + 1) mod n```\n.  This can be calculated using fixed-precision arithmetic even for large values of n.\n\nHere's a function which calculates the smallest number of ones which are divisible by n (translated to C from Ante's Python answer):\n\n```\nint ones(int n) {\n        int i, m = 1;\n        /* Loop invariant: m = M(i) mod n, assuming n > 1 */\n        for (i = 1; i <= n; i++) {\n                if (m == 0)\n                        return i;  /* Solution found */\n                m = (10*m + 1) % n;\n        }\n        return -1;  /* No solution */\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Fibonacci numbers algorithm\r\n                \r\nThe most common recursive algorithm for Fibonacci sequences looks something like this:\n\n```\nunsigned int fib(unsigned int n){\n   return (n < 2) ? n : fib(n - 1) + fib(n - 2);\n}\n```\n\n\nWhat is the most efficient fibonacci algorithm in terms of time and space complexity?\n    ", "Answer": "\r\nThe formula Jan suggested is not very magical (and I can prove it here if you have a basic understanding linear algebra, and are interested). \n\nIt's also the fastest way. So resorting to JavaScript (I can do this in other languages you'd like it's simply:\n\n```\nvar sqrt5= Math.sqrt(5);\nvar phi = (1 + sqrt5) / 2;\n\nfunction fibonacci(n){\n     return (Math.pow(phi,n) - Math.pow(-phi,-n)) / sqrt5;\n}\n```\n\n\n\n\nIf for some reason you deeply want to avoid it - you can do ```\nO(n)```\n (rather than exponential time which you currently have) using a very basic form of dynamic programming. Instead of calculating the last two numbers every time - you remember them.\n\n```\nfunction fib(n){\n    var x=1,y=1,t;\n    for(var i=1;i<n;i++){ \n        t=x;\n        x+=y;\n        y=t;\n    }\n    return x;\n}\n```\n\n\nWhich returns ```\nfib(50)```\n almost instantly (the recursive approach takes a huge time here)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Manipulate a number algorithm\r\n                \r\nHow can I fix this algo?\n\n```\ndef change_num(n, direc, numMove):\n    if direc == 'back':\n        nums = range(10)\n        return nums[n-numMove]\n    elif direc == 'forward':\n        nums = range(10)\n        nums.reverse()\n        return nums[n-numMove]-1 \n```\n\n\nThis doesn't work for direc == 'back'\nhere are some sample expected returns:\n\n```\n0 1 2 3 4 5 6 7 8 9\n\nchange_num(1,'back', 5)  -> 6\nchange_num(5,'back', 1)  -> 4\nchange_num(7,'forward',5) -> 2\nchange_num(0,'forward',5) -> 5\n```\n\n\nDo you understand how the algo works? I'm just not implementing it right.\n    ", "Answer": "\r\nInstead of ```\n'back'```\n and ```\n'forward'```\n, it will be easier to pass ```\n+1```\n for forward and ```\n-1```\n for back.  Then your function simplifies to\n\n```\ndef change_num(n, direc, num_move):\n    return (n + direc * num_move) % 10\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What is the difference between LDA and NTM in Amazon Sagemaker for Topic Modeling?\r\n                \r\nI am looking for difference between LDA and NTM . What are some use case where you will use LDA over NTM?\n\nAs per AWS doc:\n\nLDA : The Amazon SageMaker Latent Dirichlet Allocation (LDA) algorithm is an unsupervised learning algorithm that attempts to describe a set of observations as a mixture of distinct categories. LDA is most commonly used to discover a user-specified number of topics shared by documents within a text corpus. \n\nAlthough you can use both the Amazon SageMaker NTM and LDA algorithms for topic modeling, they are distinct algorithms and can be expected to produce different results on the same input data. \n    ", "Answer": "\r\nLDA and NTM have different scientific logic:\n\nSageMaker LDA (Latent Dirichlet Allocation, not to be confused with Linear Discriminant Analysis) model works by assuming that documents are formed by sampling words from a finite set of topics. It is made of 2 moving parts: (1) the word composition per topic and (2) the topic composition per document\n\nSageMaker NTM on the other hand doesn't explicitly learn a word distribution per topic, it is a neural network that passes document through a bottleneck layer and tries to reproduce the input document (presumably a Variational Auto Encoder (VAE) according to AWS documentation). That means that the bottleneck layer ends up containing all necessary information to predict document composition and its coefficients can be considered as topics\n\nHere are considerations for choosing one or the other:\n\n\nVAE-based method such as SageMaker NTM may do a better job of discerning relevant topics than LDA, presumably because of their possibly deeper expressive power. A benchmark here (featuring a VAE-NTM that could be different that SageMaker NTM) shows that NTMs can beat LDA in both metrics of topic coherence and perplexity\nSo far there seems to be more community knowledge about LDA than about VAEs, NTMs and SageMaker NTM. That means a possibly easier learning and troubleshooting path if you play with LDAs. Things change fast though, so this point may be less and less relevant as DL knowledge grows\nSageMaker NTM has more flexible hardware options than SageMaker LDA and may scale better: SageMaker NTM can run on CPU, GPU, multi-GPUs instances and multi-instance context. For example, the official NTM demo uses an ephemeral cluster of 2 ```\nml.c4.xlarge```\n instances. SageMaker LDA currently only support single-instance CPU training.\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Finding number C of key comparisons and number M of moves\r\n                \r\nI'm reading N.Wirth - Algorithms and Data Structures now. (Oberon version: August 2004)\nThe Question: how did he count these C and M? There is no explanation of this process... (any help will be useful)\nLet me tell you what is the matter... I came across the following:\n\n2.2.1 Sorting by Straight Insertion\n... A good measure of efficiency is obtained by counting the numbers C of\nneeded key  comparisons and M of moves (transpositions) of items.\n\nHe describes how does this algorithm work:\n```\nPROCEDURE StraightInsertion; \n VAR i, j: INTEGER; x: Item; \nBEGIN \n FOR i := 1 TO n-1 DO \n x := a[i]; j := i; \n WHILE (j > 0) & (x < a[j-1] DO a[j] := a[j-1]; DEC(j) END ; \n a[j] := x \n END \nEND StraightInsertion\n```\n\n...and then he tells about C and M. But he doesn't explain the process of finding them --> he just shown the counted ```\nCmin```\n, ```\nMmax```\n... :\n\nAnalysis of straight insertion.  The number Ci of key comparisons in the i-th sift is at most i-1, at least 1, and --- assuming that all permutations of the n keys are equally probable --- i/2 in the average. The number Mi of moves (assignments of items) is Ci + 2 (including the sentinel). Therefore, the total numbers of comparisons and moves are:\n\n```\nCmin = n-1                   Mmin = 3*(n-1) \nCave = (n^2 + n - 2)/4       Mave = (n^2 + 9n - 10)/4 \nCmax = (n^2 + n - 4)/4       Mmax = (n^2 + 3n - 4)/2 \n```\n\nSo the question is:\nhow did he count these C and M? He doesn't explain the process of finding all of these numbers. Can you help me to understand how to find them? Any help will be good.\nPS\nI have been looking for the information on this subject, but with no result.\n\nAdditionally:\nHere is the process of insertion shown in an example of eight numbers chosen at random (if needed):\n```\nInitial Keys: 44 55 12 42 94 18 06 67\n                 v\n          i=1 44 55 12 42 94 18 06 67\n                    v\n              v-----<   \n          i=2 12 44 55 42 94 18 06 67 \n                       v\n                 v-----<   \n          i=3 12 42 44 55 94 18 06 67\n                          v\n          i=4 12 42 44 55 94 18 06 67\n                             v\n                 v-----------<    \n          i=5 12 18 42 44 55 94 06 67\n                                v\n              v-----------------<    \n          i=6 06 12 18 42 44 55 94 67\n                                   v\n                                v--<    \n          i=7 06 12 18 42 44 55 67 94\n```\n\n    ", "Answer": "\r\nC is the number of comparisons and M is the number of data items moved.  If we go by your example, on iteration 1, there is 1 comparison and no move.  On iteration 2, there are 2 comparisons and 2 moves.  And so on.  Now, let us consider kth iteration.  There will be k comparisons and assuming that your exact spot is halfway from 1 to k, there will be k/2 moves.\nThe number C and M are the sum of all comparisons and movements when k changes from 1 to n.  All you have to do is to add up the summations, varying k from 1 to n and you have the numbers.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Sort algorithm with fewest number of operations\r\n                \r\nWhat is the sort algorithm with fewest number of operations? I need to implement it in HLSL as part of a pixel shader effect v2.0 for WPF, so it needs to have a really small number of operations, considering Pixel Shader's limitations. I need to sort 9 values, specifically the current pixel and its neighbors.\n    ", "Answer": "\r\nYou either want to use Insertion sort or Radix sort. Here are some C++ implementations:\n\nRadix Sort\n\n```\nvoid radix (int byte, long N, long *source, long *dest)\n{\n  long count[256];\n  long index[256];\n  memset (count, 0, sizeof (count));\n  for ( int i=0; i<N; i++ )\n    count[((source[i])>>(byte*8))&0xff]++;\n\n  index[0]=0;\n  for ( i=1; i<256; i++ )\n    index[i]=index[i-1]+count[i-1];\n  for ( i=0; i<N; i++ )\n    dest[index[((source[i])>>(byte*8))&0xff]++] = source[i];\n}\n```\n\n\nYou need to call ```\nradix()```\n four times, as it only works on one column.\n\nInsertion Sort\n\n```\nvoid insertSort(int a[], int length)\n{    \n    int i, j, value;\n    for(i = 1; i < length; i++)\n    {\n        value = a[i];\n        for (j = i - 1; j >= 0 && a[j] > value; j--)\n            a[j + 1] = a[j];\n        a[j + 1] = value;\n    }\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Is there any other algorithms to find that a number is a prime number or not\r\n                \r\nI always use that code to control if a number is prime or not:\n\n```\n#include <stdio.h>\n\nint main() {\n    unsigned long long i, n;\n    int s;\n    printf(\"Enter the number: \");\n    scanf(\"%llu\", &n);\n\n    if (n != 2) {\n        for (i = 2; i < n; i++) {\n            if (n%i == 0) {\n                s = 0;\n                break;\n            }\n            else {\n                s = 1;\n            }\n        }\n    }\n    else {\n        s = 1;\n    }\n\n    if (s == 1) {\n        printf(\"Prime.\");\n    }\n    else {\n        printf(\"Not prime.\");\n    }\n\n    return 0;\n}\n```\n\n\nBut when i enter a very big number such as 1365165888711511, it takes very long time. (I'm waiting it for an hour. (CPU:2.90GHz*4,RAM:8GB))\n\nMy question; is there any other way to check numbers faster than the algorithm above?\n    ", "Answer": "\r\nThis should cut down the execution time to a matter of minutes rather than hours, at least for numbers that are prime:\n\n```\n for (i=3; i*i <= n; i += 2){\n    if (n % i == 0) {\n        s=0;\n        break;\n    }\n```\n\n\nThis is ```\nO(sqrt n)```\n no matter the primality of ```\nn```\n. Your code was ```\nO(n)```\n for prime ```\nn```\n. It's also about twice as fast in general, due to the ```\ni += 2```\n line.\n\nTo make it even faster than that, you'll need a probabilistic test, such as Miller-Rabin.:\n\n```\nInput: n > 3, an odd integer to be tested for primality;\nInput: k, a parameter that determines the accuracy of the test\nOutput: composite if n is composite, otherwise probably prime\nwrite n − 1 as 2^s·d with d odd by factoring powers of 2 from n − 1\nWitnessLoop: repeat k times:\n   pick a random integer a in the range [2, n − 2]\n   x ← a*d mod n\n   if x = 1 or x = n − 1 then do next WitnessLoop\n   repeat s − 1 times:\n      x ← x^2 mod n\n      if x = 1 then return composite\n      if x = n − 1 then do next WitnessLoop\n   return composite\nreturn probably prim\n```\n\n\nNote that this can be deterministic for a lot of values:\n\n\n  When the number n to be tested is small, trying all a < 2(ln n)^2 is not necessary, as much smaller sets of potential witnesses are known to suffice. For example, Pomerance, Selfridge and Wagstaff[8] and Jaeschke[9] have verified that\n\n\n```\nif n < 2,047, it is enough to test a = 2;\nif n < 1,373,653, it is enough to test a = 2 and 3;\nif n < 9,080,191, it is enough to test a = 31 and 73;\nif n < 25,326,001, it is enough to test a = 2, 3, and 5;\nif n < 4,759,123,141, it is enough to test a = 2, 7, and 61;\nif n < 1,122,004,669,633, it is enough to test a = 2, 13, 23, and 1662803;\nif n < 2,152,302,898,747, it is enough to test a = 2, 3, 5, 7, and 11;\nif n < 3,474,749,660,383, it is enough to test a = 2, 3, 5, 7, 11, and 13;\nif n < 341,550,071,728,321, it is enough to test a = 2, 3, 5, 7, 11, 13, and 17.\n```\n\n\n\n  Using the work of Feitsma and Galway enumerating all base 2 pseudoprimes in 2010, this was extended (see OEIS A014233), with the first result later shown using different methods in Jiang and Deng:[10]\n\n\n```\nif n < 3,825,123,056,546,413,051, it is enough to test a = 2, 3, 5, 7, 11, 13, 17, 19, and 23.\nif n < 2^64, it is enough to test a = 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, and 37.\n```\n\n\n\n  Sorenson and Webster[11] verify the above and calculate precise results for these larger than 64-bit results:\n\n\n```\nif n < 318,665,857,834,031,151,167,461, it is enough to test a = 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, and 37.\nif n < 3,317,044,064,679,887,385,961,981, it is enough to test a = 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, and 41.\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What is the difference between LDA and NTM in Amazon Sagemaker for Topic Modeling?\r\n                \r\nI am looking for difference between LDA and NTM . What are some use case where you will use LDA over NTM?\n\nAs per AWS doc:\n\nLDA : The Amazon SageMaker Latent Dirichlet Allocation (LDA) algorithm is an unsupervised learning algorithm that attempts to describe a set of observations as a mixture of distinct categories. LDA is most commonly used to discover a user-specified number of topics shared by documents within a text corpus. \n\nAlthough you can use both the Amazon SageMaker NTM and LDA algorithms for topic modeling, they are distinct algorithms and can be expected to produce different results on the same input data. \n    ", "Answer": "\r\nLDA and NTM have different scientific logic:\n\nSageMaker LDA (Latent Dirichlet Allocation, not to be confused with Linear Discriminant Analysis) model works by assuming that documents are formed by sampling words from a finite set of topics. It is made of 2 moving parts: (1) the word composition per topic and (2) the topic composition per document\n\nSageMaker NTM on the other hand doesn't explicitly learn a word distribution per topic, it is a neural network that passes document through a bottleneck layer and tries to reproduce the input document (presumably a Variational Auto Encoder (VAE) according to AWS documentation). That means that the bottleneck layer ends up containing all necessary information to predict document composition and its coefficients can be considered as topics\n\nHere are considerations for choosing one or the other:\n\n\nVAE-based method such as SageMaker NTM may do a better job of discerning relevant topics than LDA, presumably because of their possibly deeper expressive power. A benchmark here (featuring a VAE-NTM that could be different that SageMaker NTM) shows that NTMs can beat LDA in both metrics of topic coherence and perplexity\nSo far there seems to be more community knowledge about LDA than about VAEs, NTMs and SageMaker NTM. That means a possibly easier learning and troubleshooting path if you play with LDAs. Things change fast though, so this point may be less and less relevant as DL knowledge grows\nSageMaker NTM has more flexible hardware options than SageMaker LDA and may scale better: SageMaker NTM can run on CPU, GPU, multi-GPUs instances and multi-instance context. For example, the official NTM demo uses an ephemeral cluster of 2 ```\nml.c4.xlarge```\n instances. SageMaker LDA currently only support single-instance CPU training.\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Manipulate a number algorithm\r\n                \r\nHow can I fix this algo?\n\n```\ndef change_num(n, direc, numMove):\n    if direc == 'back':\n        nums = range(10)\n        return nums[n-numMove]\n    elif direc == 'forward':\n        nums = range(10)\n        nums.reverse()\n        return nums[n-numMove]-1 \n```\n\n\nThis doesn't work for direc == 'back'\nhere are some sample expected returns:\n\n```\n0 1 2 3 4 5 6 7 8 9\n\nchange_num(1,'back', 5)  -> 6\nchange_num(5,'back', 1)  -> 4\nchange_num(7,'forward',5) -> 2\nchange_num(0,'forward',5) -> 5\n```\n\n\nDo you understand how the algo works? I'm just not implementing it right.\n    ", "Answer": "\r\nInstead of ```\n'back'```\n and ```\n'forward'```\n, it will be easier to pass ```\n+1```\n for forward and ```\n-1```\n for back.  Then your function simplifies to\n\n```\ndef change_num(n, direc, num_move):\n    return (n + direc * num_move) % 10\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Sort algorithm with fewest number of operations\r\n                \r\nWhat is the sort algorithm with fewest number of operations? I need to implement it in HLSL as part of a pixel shader effect v2.0 for WPF, so it needs to have a really small number of operations, considering Pixel Shader's limitations. I need to sort 9 values, specifically the current pixel and its neighbors.\n    ", "Answer": "\r\nYou either want to use Insertion sort or Radix sort. Here are some C++ implementations:\n\nRadix Sort\n\n```\nvoid radix (int byte, long N, long *source, long *dest)\n{\n  long count[256];\n  long index[256];\n  memset (count, 0, sizeof (count));\n  for ( int i=0; i<N; i++ )\n    count[((source[i])>>(byte*8))&0xff]++;\n\n  index[0]=0;\n  for ( i=1; i<256; i++ )\n    index[i]=index[i-1]+count[i-1];\n  for ( i=0; i<N; i++ )\n    dest[index[((source[i])>>(byte*8))&0xff]++] = source[i];\n}\n```\n\n\nYou need to call ```\nradix()```\n four times, as it only works on one column.\n\nInsertion Sort\n\n```\nvoid insertSort(int a[], int length)\n{    \n    int i, j, value;\n    for(i = 1; i < length; i++)\n    {\n        value = a[i];\n        for (j = i - 1; j >= 0 && a[j] > value; j--)\n            a[j + 1] = a[j];\n        a[j + 1] = value;\n    }\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Optimization algorithm with numbers\r\n                \r\nGiven a list of numbers in increasing order and a certain sum, I'm trying to implement the optimal way of finding the sum. Using the biggest number first \n\n```\nA sample input would be:\n3\n1\n2\n5\n11 \n```\n\n\nwhere the first line the number of numbers we are using and the last line is the desired sum\n\n```\nthe output would be:\n1 x 1\n2 x 5\n```\n\n\nwhich equals 11\n\nI'm trying to interpret this https://www.classle.net/book/c-program-making-change-using-greedy-method using stdard input\n\nHere is what i got so far\n\n```\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n int sol = 0; int array[]; int m[10];\n\n while (!cin.eof())\n  {\n   cin >> array[i];  // add inputs to an array\n   i++;\n  }\n\n x = array[0]; // number of \n for (int i; i < x ; i++) {\n  while(sol<array[x+1]){\n     // try to check all multiplications of the largest number until its over the sum\n     // save the multiplication number into the m[] before it goes over the sum;\n     //then do the same with the second highest number and check if they can add up to sum\n\n     }\n  cout << m[//multiplication number] << \"x\" << array[//correct index]\n  return 0;\n} \n\n   if(sol!=array[x+1])\n {\n cout<<endl<<\"Not Possible!\";\n }\n```\n\n\n}\n\nFinding it hard to find an efficient way of doing this in terms of trying all possible combinations starting with the biggest number? Any suggestions would be greatly helpful, since i know im clearly off\n    ", "Answer": "\r\nThe problem is a variation of the subset sum problem, which is NP-Hard.\n\nAn NP-Hard problem is a problem that (among other things) - there is no known polynomial solution for it, thus the greedy approach of \"getting the highest first\" fails for it.\n\nHowever, for this NP-Hard problem, there is a pseudo-polynomial solution using dynamic programming. The problem where you can chose each number more then once is called the con change problem.\n\nThis page contains explanation and possible solutions for the problem.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to sort numbers\r\n                \r\nI have different numbers which needs to be sorted in ascending order by exchanging each number with 0.\n\nThe resultant number should be obtained only from exchanging each number with 0.\n\nfor eg, I have 3x3 matrix,\n\n```\n   3    4     1\n   2    5     0\n   6    8     7\n```\n\n\nIn above matrix, the number should be exchanged with 0 to make an ascending order. From above, only 5,7 and 1 are exchanged with 0 at first step. The final output should be like this\n\n```\n   1    2     3\n   4    5     6\n   7    8     0\n```\n\n\nWhat is an optimal solution to achieve this.\n\nThanks\n    ", "Answer": "\r\nThis is an easier version of the famous 15-puzzle.\n\nThe general way to approach such a problem is to model it as states graph, and run a shortest-path algorithm in order to find a path from the source (given board) to the target (sorted board).\n\nThe states graph is ```\nG=(V,E)```\n where: ```\nV= { all possible boards }```\n and E={(u,v) | can change board u to v with a single swap }`.\n\nYou can run BFS or bi-directional BFS (since you have one source and one target), or even A* Algorithm with an appropriate admissible heuristic function to find the path on the states graph, which represents a series of swaps that yield a solution.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Tau Numbers Algorithm\r\n                \r\nI am trying to make a program where a user enters 2 numbers, and then the program gives the tau numbers in this gap.\n\n\n\"Tau\" number is the number which can divided by its  total number of dividers.For example (1,2,3,4,6,8,12,24) all this numbers can divide 24. There is 8 numbers then 24 can divided by 8. So we can say 24 is a tau number.*\n\n\nThere is a mistake at second for loop I think but I cannot understand where is it.\n\n```\nimport java.util.Scanner;\n\npublic class tauNumber {\n\n    public static void main(String [] args){\n        int start=0,stop=0,count=0;\n        Scanner input =new Scanner(System.in);\n        System.out.println(\"Please enter first number: \");\n        start=input.nextInt();\n        System.out.println(\"Please enter last number: \");\n        stop=input.nextInt();\n\n        for(int i=0+start;i<=stop;i++){\n\n            for(int j=1;j<=start;j++){\n                if(i%j==0){\n                    count++;\n                }\n            }\n            if(start/count==0){\n                System.out.println(i+\" is a tau number\" );\n            }\n        }\n    }\n}\n```\n\n    ", "Answer": "\r\nInstead of saying \"tau number\" you should just refer to it as a refactorable number as @Tunaki pointed out. \n\nI would suggest that you split your code up into functions to get a better understanding on whats going on, I think this is what you're looking for:\n\n```\nimport java.util.Scanner;\n\nclass TauNumber {\n\n\n    public static void main(String[] args){\n\n        Scanner input =new Scanner(System.in);\n        System.out.println(\"Please enter first number: \");\n        int start=input.nextInt();\n        System.out.println(\"Please enter last number: \");\n        int stop=input.nextInt();\n\n        for(int i=start+1; i<stop; i++){\n            if(refractorable(i)){\n                System.out.println(\"Found tau number: \"+ i);\n                break;\n            }\n        }\n\n    }\n\n    public static boolean refractorable(int number){\n        if(sumDivisors(number) == 0) return false; \n\n        if(number % sumDivisors(number) == 0){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static int sumDivisors(int number){\n        int sum = 0;\n        for(int i=1; i<=number; i++){\n            if(number % i == 0){\n                sum++;\n            }\n        }\n        return sum;\n    }\n\n\n}\n```\n\n\nNote: I would also like to point out that when you specify \"gap\" what do you mean by it? I took it as ```\nstart < x < stop```\n, because that would be the gap but it could certainly be ```\nstart < x <= stop```\n.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "number combination algorithm\r\n                \r\nWrite a function that given a string of digits and a target value, prints where to put +'s and *'s between the digits so they combine exactly to the target value. Note there may be more than one answer, it doesn't matter which one you print.\n\nExamples:\n\n```\n\"1231231234\",11353 -> \"12*3+1+23*123*4\" \n\"3456237490\",1185  -> \"3*4*56+2+3*7+490\" \n\"3456237490\",9191  -> \"no solution\"\n```\n\n    ", "Answer": "\r\nIf you have an N digit value, there are N-1 possible slots for the + or * operators. So brute force, there are 3^(N-1) possibilities.  Testing all of these are inefficient.\n\nBUT\n\nYour examples are all 10 digits. 3^9 = 19683, so brute force is FINE! No need to get any fancier.\n\nSo all you need to do is iterate through all 19683 cases, each time building a string for that case, and evaluating the expression.  Evaluating the expression is a straightforward task. Iterating is straightforward (just use an incrementing value, you can read the state of the first slot by (i%3), which gives you \"no operator\" \"+\" or \"*\",  the state of the second slot is (i/3)%3,  the state of the third slot is (i/9)%3 and so on.)\n\nEven with crude parsing code, CPUs are fast.\n\nThe brute force option starts becoming ugly after about 20 digits, and you'd have to switch to be more clever.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Whats the faster algorithm to rearrange given array of numbers\r\n                \r\nThe question is from code fight which states: An infinite number of boxes are arranged in a row and numbered from left to right. The first box on the left is\nnumber 1, the next box is number 2, etc. n balls are placed in n of the boxes, and there can only be one ball per box.\nYou want to organize the balls, so you decide to arrange all the balls next to each other. They should occupy a\ncontiguous set of boxes. You can take one ball and move it into an empty box in one move.\n\nGiven an array balls that indicates the numbers of the boxes in which the balls are placed, find the minimum number of\nmoves needed to organize the balls.\n\nExample\n\nFor balls = [6, 4, 1, 7, 10], the output should be\nballsRearranging(balls) = 2.\n\nIn this example, the minimum number of moves needed to arrange the balls next to each other is 2. You could move the\nball in box 1 to box 5 and the ball in box 10 to box 8 (or to box 3).\n\nCurrently my code is:\n\n```\ndef ballsRearranging(balls):\n    ballsLength = len(balls)\n    partial = ballsLength//2 #INITIALLY SET TO HALF\n    setBalls = set(balls)\n    sortedBalls = sorted(balls)\n    minimum = 1000000\n\n    #####CHECK IF ITS ALREADY ORGANIZED\n    #####FIRST NUM PLUS LENGTH - 1 IS EQUAL TO THE LAST NUM\n    if sortedBalls[0]+ballsLength-1 == sortedBalls[-1]:\n        return 0\n\n    for i,num in enumerate(sortedBalls):\n        #####NO NEED TO GO PASS HALF WAY SINCE THAT AUTOMATICALLY MEANS HALF WILL BE OUT OF RANGE\n        #####THIS VALUE DYNAMICALLY CHANGES TO THE SMALLEST FRACTION OF OUT OF RANGE FOUND\n        if i >= partial:\n            break\n\n        #####IF WE TAKE THIS NUM AS THE BEGINNING, ORDERED BALLS WILL GO UP TO THE RANGE RNG\n        rng = range(num,num+ballsLength)\n        #####BALLS ALREADY IN THE RANGE RNG, WE WONT BE MOVING THESE BALLS\n        inRange = setBalls & set(rng)\n\n        #####BALLS NOT IN RANGE, EACH WILL BE REQUIRED TO MOVE\n        #####THE LENGTH OF THIS WILL BE THE NUMBER OF MOVES REQUIRED\n        outRange = setBalls - set(rng)\n\n        lenOutRange = len(outRange)\n        if lenOutRange < minimum:\n            minimum = lenOutRange\n            partial = 100*(lenOutRange/ballsLength) #UPDATE THE PARTIAL VALUE\n```\n\n\nThis works fine but currently times out with the time limit of 4s on the hidden tests.  Basically my algorithm goes from the smallest number to a specific partial (fraction) of the given array.  It checks where the original set intersects with the given range.  Whichever has the least amount of out of range items, will be the minimum number of changes/rearranging to be made.  Was wondering whats the better algorithm, preferably in python.\n    ", "Answer": "\r\nThis code is careful to compute the result in O(n log n) time. Or if the balls are already sorted, this runs in O(n) time.\n\nIt uses a caterpillar algorithm: for each j, indexed into the sorted array of balls, i is incremented until it contains the first ball within ```\nn-1```\n of the ball at index j. That makes it easy to count the number of balls in the range that ends with the j'th ball.\n\n```\ndef balls_rearranging(balls):\n    balls.sort()\n    best = 0\n    i = 0\n    for j in xrange(len(balls)):\n        while balls[i] <= balls[j] - len(balls):\n            i += 1\n        best = max(best, j - i + 1)\n    return len(balls) - best\n\nprint balls_rearranging(range(0, 10000000, 2))\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Quicksort went wrong (added some duplicates)\r\n                \r\nI'm new to sorting algorithms and can't seem to figure out what went wrong. With an unsorted array of  int [] uArr = {5,2, 10, 7, 6, 0, 8, 1, 9}, i'm given 0,1,2,5,5,6,8,10 (the nine in the org. array was replaced with a duplicate 5 and the 7 was lost). If I add duplicates to the array, I get more duplicates after the array is sorted and a few more missing numbers.\n```\n public static void main(String args[]){\n     int [] uArr = {5,2, 10, 7, 6, 0, 8, 1, 9};\n\n     qSort(uArr, 0, 8);\n     \n }\n\n public static void qSort(int [] A, int low, int high){\n    \n    if (low < high){\n   int pivotL = partition(A, low, high);\n   qSort(A, low, pivotL);\n qSort(A, pivotL+1, high);\n    }       \n}\npublic static int partition(int [] arr, int low, int high){\n int pivot = arr[low];\n int leftwall = low;\n for (int i = low + 1; i < high; i++){\nif (arr[i] < pivot){\n int temp = arr[i];\n arr[i] = arr[leftwall];\narr[leftwall] = temp;\nleftwall += 1;\n\n}  \n}\n\nint temp2 = pivot;\npivot = arr[leftwall];\narr[leftwall] = temp2;\nreturn leftwall;\n}\n}\n```\n\n    ", "Answer": "\r\nSo one thing you should seriously do is start writing documentation.  Even though this is a small program, you seem to have forgotten what you were doing as you were writing the code.\nFor example, there are 9 elements in the array, and you pass in the offsets to sort, inclusive, as 0 through 8:\n```\n  qSort( uArr, 0, 8 );\n```\n\nBut then in the partition routine you only sort elements less than the ```\nhigh```\n value:\n```\n for( int i = low + 1; i < high; i++ ) {\n```\n\nAnd unlike you the last value in the array, 9, is never touched for me and never sorted.  So that's an issue.  Figure out if you want your indexes to be inclusive or not.  For me writing documentation as I go helps me keep these ideas straight.\nI'm still looking for other problems like the duplication.\nUpdate: I'm going to just post these as I figure them out, as a sort of stream-of-consciousness of how I look for problems.  One thing I was taught early on is that adding print statements to your code can be faster than using a debugger.  So (after re-formatting your code, because the formatting you posted was frankly crap) I added this:\n```\n public static void qSort( int[] A, int low, int high ) {\n    System.out.println( Arrays.toString( A ) + \" low=\" + low + \" high=\" + high );\n```\n\nAnd got this output:\n```\nrun:\n[5, 2, 10, 7, 6, 0, 8, 1, 9] low=0 high=8\n[2, 0, 1, 5, 6, 5, 8, 10, 9] low=0 high=3\n[0, 1, 2, 5, 6, 5, 8, 10, 9] low=0 high=2\n[0, 1, 2, 5, 6, 5, 8, 10, 9] low=0 high=0\n[0, 1, 2, 5, 6, 5, 8, 10, 9] low=1 high=2\n[0, 1, 2, 5, 6, 5, 8, 10, 9] low=1 high=1\n[0, 1, 2, 5, 6, 5, 8, 10, 9] low=2 high=2\n[0, 1, 2, 5, 6, 5, 8, 10, 9] low=3 high=3\n[0, 1, 2, 5, 6, 5, 8, 10, 9] low=4 high=8\n[0, 1, 2, 5, 5, 6, 8, 10, 9] low=4 high=5\n[0, 1, 2, 5, 5, 6, 8, 10, 9] low=4 high=4\n[0, 1, 2, 5, 5, 6, 8, 10, 9] low=5 high=5\n[0, 1, 2, 5, 5, 6, 8, 10, 9] low=6 high=8\n[0, 1, 2, 5, 5, 6, 8, 10, 9] low=6 high=6\n[0, 1, 2, 5, 5, 6, 8, 10, 9] low=7 high=8\n[0, 1, 2, 5, 5, 6, 8, 10, 9] low=7 high=7\n[0, 1, 2, 5, 5, 6, 8, 10, 9] low=8 high=8\n[0, 1, 2, 5, 5, 6, 8, 10, 9]\nBUILD SUCCESSFUL (total time: 0 seconds)\n```\n\nI did have to stare at the output for a while, but what I noticed next was two things.  The 5 is duplicated almost immediately, and the 5 is also the first element, which means it's going to be chosen by your ```\npartition```\n code as the pivot.  So it looks as though you have problems re-merging the pivot with the array.\nUpdate 2: OK found another problem.  This one I found by writing your array out by hand and walking through each value of ```\ni```\n and ```\nleftwall```\n as it makes the first partition.  Problem here:\nWhen the pivot, 5, encounters the element ```\n0```\n in the array, the rest of the array has not been sorted.  The ```\n10```\n, ```\n7```\n, ```\n6```\n, etc. are not less than the pivot and have not be touched.  So when you make the swap, you sawp this:\n```\n[2, 5, 10, 7, 6, 0, 8, 1, 9]\n```\n\nfor this:\n```\n[2, 5, 0, 7, 6, 5, 8, 1, 9]\n```\n\nThis is because ```\nleftwall```\n was 1 (it had been swapped with the ```\n2```\n but not any other number, so it only had been incremented once) and there's the duplication and losing numbers too.  I'm going to stop there because you have some pretty big problems.\nWhat you need to do in this case is swap the ```\n10```\n, not the pivot, with the ```\n0```\n.  This is going to require one additional pointer at least.  Quicksort algorithms need to find the lowest and highest in the array and have two loops inside the outer ```\nfor```\n loop.  What you have here is a kind of weird recursive insert sort.  You'll need to think a bit more how to do this, but two more loops, nest inside the first, will be required.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Generalizing parallel algorithms on the number of threads\r\n                \r\nI have been reading the book The Art of Multiprocessor Programming and noticed that a lot of the algorithms mentioned assume a fixed number of threads (e.g. the combining tree algorithm).  Is there a straightforward way of generalizing such algorithms to a scenario where threads are created and destroyed in an unpredictable manner?\n    ", "Answer": "\r\nAs Zneak has said, there is no automatic way of determining the number of threads for an application. There are some patterns though that can help. The book may talk about some...here is an article that I was recently reading that I liked....hope it is useful for you too. Ref: Thread pools and Work queues\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for finding the maximum difference in an array of numbers\r\n                \r\nI have an array of a few million numbers.\n\n```\ndouble* const data = new double (3600000);\n```\n\n\nI need to iterate through the array and find the range (the largest value in the array minus the smallest value). However, there is a catch. I only want to find the range where the smallest and largest values are within 1,000 samples of each other.\n\nSo I need to find the maximum of: range(data + 0, data + 1000), range(data + 1, data + 1001), range(data + 2, data + 1002), ...., range(data + 3599000, data + 3600000).\n\nI hope that makes sense. Basically I could do it like above, but I'm looking for a more efficient algorithm if one exists. I think the above algorithm is O(n), but I feel that it's possible to optimize. An idea I'm playing with is to keep track of the most recent maximum and minimum and how far back they are, then only backtrack when necessary.\n\nI'll be coding this in C++, but a nice algorithm in pseudo code would be just fine. Also, if this number I'm trying to find has a name, I'd love to know what it is.\n\nThanks.\n    ", "Answer": "\r\nThis type of question belongs to a branch of algorithms called streaming algorithms. It is the study of problems which require not only an O(n) solution but also need to work in a single pass over the data. the data is inputted as a stream to the algorithm, the algorithm can't save all of the data and then and then it is lost forever. the algorithm needs to get some answer about the data, such as for instance the minimum or the median.\n\nSpecifically you are looking for a maximum (or more commonly in literature - minimum) in a window over a stream.\n\nHere's a presentation on an article that mentions this problem as a sub problem of what they are trying to get at. it might give you some ideas.\n\nI think the outline of the solution is something like that - maintain the window over the stream where in each step one element is inserted to the window and one is removed from the other side (a sliding window). The items you actually keep in memory aren't all of the 1000 items in the window but a selected representatives which are going to be good candidates for being the minimum (or maximum).\n\nread the article. it's abit complex but after 2-3 reads you can get the hang of it.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to represent a number\r\n                \r\nwant to save the number ```\nx```\n in more bits than the standard binary representation. The bitstring representation, which iam searching, must be unique for this number ```\nx```\n that i can map ```\nx```\n to this representation and back. Also on every bit position ```\n1 and 0```\n must be allowed.\n\nExists such a bitstring representation of number ```\nx```\n, or its not possible to create such representation?\n\nFor example the zeckendorf representation is unique but doesnt allow 2 consequtive ```\n1```\n. If iam cut out the ```\n0```\n after one ```\n1```\n the length of the resulting bistring is more or less equal to standard binary representation length, but not longer.\n    ", "Answer": "\r\nAdd a single bit that is the parity of the original number: XOR all of the bits together.  THe mapping is deterministic, unique, and trivially reversible.\n\nIn general, any error detection/correction addition will satisfy your posted requirements.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for Number series row and column\r\n                \r\nI am trying to create a simple Algorithm in Dart but I think the programming language doesn't matter it is more about the Algorithm:\nI am trying to make 2 lists of pairs of numbers depending on \"row\" and \"column\" for example:\n\n\n\n\ncol_1\ncol_2\n\n\n\n\n1\n2\n\n\n3\n4\n\n\n5\n6\n\n\n7\n8\n\n\n9\n10\n\n\n\n\n=> I need a Algorithm that makes me 2 lists of numbers:\nfirst list: 2,3,6,7,10...\nsecond list: 4,5,8,9...\nBut this must also work when the \"columns\" change like that:\n\n\n\n\ncol_1\ncol_2\ncol_3\n\n\n\n\n1\n2\n3\n\n\n4\n5\n6\n\n\n7\n8\n9\n\n\n\n\nthis time the first list must be:\n3,4,9...\nthe second list:\n6,7 ...\nanyone has an Idea on how I could achieve this with a simple calculation? or algorithm depending on the \"Maximum\" amount of numbers?\n    ", "Answer": "\r\nYou're probably looking for the modulo operator ```\n%```\n\nDirectly, it can create a repeating series based upon the remainder of dividing by the value\nFor example, you could place your values into the Nth list in a list of lists (whew)\n```\n>>> cols = [[],[],[]]\n>>> for x in range(12):\n...     cols[x % 3].append(x)\n...\n>>> cols\n[[0, 3, 6, 9], [1, 4, 7, 10], [2, 5, 8, 11]]\n```\n\n```\n0%5   -->  0\n1%5   -->  1\n...\n11%5  -->  1\n```\n\nTo massage values when you have (for example) some increment of 1, you can do a little math\n```\n>>> for x in range(12):\n...     print(\"x={} is in column {}\".format(x + 1, (x % 3) + 1 ))\n...\nx=1 is in column 1\nx=2 is in column 2\nx=3 is in column 3\nx=4 is in column 1\nx=5 is in column 2\nx=6 is in column 3\nx=7 is in column 1\nx=8 is in column 2\nx=9 is in column 3\nx=10 is in column 1\nx=11 is in column 2\nx=12 is in column 3\n```\n\nNote you may need to do some extra work to either\n\nknow how many values you need to fill all the columns\ncount and stop when you have enough rows\n\nExamples are in Python because I'm most familiar with it\nNote that work like ```\n[[],[],[]]```\n should largely be avoided if a better collection is available (perhaps a ```\ndict```\n of ```\nlist```\ns with column-name keys or Pandas DataFrame), but it makes for a good illustration\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "An algorithm for converting a base-10 number to a base-N number\r\n                \r\nI am looking for a way to convert a base-10 number into a base-N number where N can be large. Specifically i am looking at converting to base-85 and back again. Does anyone know a simple algorithm to perform the conversion? Ideally it would provide something like:\n\n```\nto_radix(83992, 85) -> [11, 53, 12]\n```\n\n\nAny ideas are appreciated!\n\nRoja\n    ", "Answer": "\r\nThat was kind of an interesting question, so I went a little overboard:\n\n```\nclass Integer\n  def to_base(base=10)\n    return [0] if zero?\n    raise ArgumentError, 'base must be greater than zero' unless base > 0\n    num = abs\n    return [1] * num if base == 1\n    [].tap do |digits|\n      while num > 0\n        digits.unshift num % base\n        num /= base\n      end\n    end\n  end\nend\n```\n\n\nThis works for arbitrary bases. It only works for integers, although there is no reason why it couldn't be extended to work with any arbitrary number. Also, it ignores the sign of the number. Again, there is no reason why it must do that, but mainly I didn't want to have to come up with a convention for returning the sign in the return value.\n\n```\nclass Integer\n  old_to_s = instance_method(:to_s)\n  define_method :to_s do |base=10, mapping=nil, sep=''|\n    return old_to_s.bind(self).(base) unless mapping || base > 36\n    mapping ||= '0123456789abcdefghijklmnopqrstuvwxyz'\n    return to_base(base).map {|digit| mapping[digit].to_s }.join(sep)\n  end\nend\n\n[Fixnum, Bignum].each do |klass|\n  old_to_s = klass.instance_method(:to_s)\n  klass.send :define_method, :to_s do |base=10, mapping=nil, sep=''|\n    return old_to_s.bind(self).(base) unless mapping || base > 36\n    return super(base, mapping, sep) if mapping\n    return super(base)\n  end\nend\n```\n\n\nI also extended the ```\nto_s```\n method so that it works with bases greater than 36. If you want to use a base greater than 36, you have to pass in a mapping object which maps the \"digits\" to strings. (Well, actually, all that is required is that you provide an object that responds to ```\n[]```\n and returns something which responds to ```\nto_s```\n. So, a string is perfect, but e.g. an array of integers also works.)\n\nIt also accepts an optional separator, which is used to separate the digits.\n\nFor example, this allows you to format an IPv4 address by treating it as a base-256 number and using the identity for the mapping and ```\n'.'```\n as the separator:\n\n```\n2_078_934_278.to_s(256, Array.new(256) {|i| i }, '.') # => '123.234.5.6'\n```\n\n\nHere's an (incomplete) testsuite:\n\n```\nrequire 'test/unit'\nclass TestBaseConversion < Test::Unit::TestCase\n  def test_that_83992_in_base_85_is_11_53_12\n    assert_equal [11, 53, 12], 83992.to_base(85)\n  end\n  def test_that_83992_in_base_37_is_1_24_13_2\n    assert_equal [1, 24, 13, 2], 83992.to_base(37)\n  end\n  def test_that_84026_in_base_37_is_1_24_13_36\n    assert_equal [1, 24, 13, 36], 84026.to_base(37)\n  end\n  def test_that_0_in_any_base_is_0\n    100.times do |base|\n      assert_equal [0], 0.to_base(base)\n      assert_equal [0], 0.to_base(1 << base)\n      assert_equal [0], 0.to_base(base << base)\n    end\n  end\n  def test_that_84026_in_base_37_prints_1od_\n    assert_equal '1od_', 84026.to_s(37, '0123456789abcdefghijklmnopqrstuvwxyz_')\n  end\n  def test_that_ip_address_formatting_works\n    addr = 2_078_934_278\n    assert_equal '123.234.5.6', addr.to_s(256, (0..255).to_a, '.')\n    assert_equal '123.234.5.6', addr.to_s(256, Array.new(256) {|i| i}, '.')\n  end\n  def test_that_old_to_s_still_works\n    assert_equal '84026', 84026.to_s\n    assert_equal '1su2', 84026.to_s(36)\n  end\nend\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to evaluate an infix expression in just one scan using stacks?\r\n                \r\nI want to know if there is a way to solve infix expressions in a single pass using 2 stacks?\nThe stacks can be one for operator and the other for operands...\n\nThe standard way to solve by shunt-yard algorithm is to convert the infix expression to postfix(reverse polish) and then solve. I don't want to convert the expression first to postfix.\n\nIf the expression is like ```\n2*3-(6+5)+8```\n, how to solve?\n    ", "Answer": "\r\nQuite late, but here is the answer. \n\nTake two stacks:\n\n\n```\noperator stack```\n { for operators and parentheses }.\n```\noperand stack```\n.\n\n\nAlgorithm\n\nIf character exists to be read:\n\n\nIf character is ```\noperand```\n push on the ```\noperand stack```\n, if character is ```\n(```\n, push on the ```\noperator stack```\n.\nElse if character is ```\noperator```\n\n\n\nWhile the top of the ```\noperator stack```\n is not of smaller precedence than this character.\nPop ```\noperator```\n from ```\noperator stack```\n.\nPop two ```\noperands```\n (```\nop1```\n and ```\nop2```\n) from ```\noperand stack```\n.\nStore ```\nop1 op op2```\n on the ```\noperand stack```\n back to 2.1.\n\nElse if character is ```\n)```\n, do the same as 2.2 - 2.4 till you encounter ```\n(```\n.\n\n\nElse (no more character left to read):\n\n\nPop operators untill ```\noperator stack```\n is not empty.\nPop top 2 ```\noperands```\n and ```\npush op1 op op2```\n on the ```\noperand stack```\n.\n\n\nreturn the top value from ```\noperand stack```\n.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Compression of small string\r\n                \r\nI have data 0f 340 bytes in string mostly consists of signs and numbers like \"føàA¹º@ƒUë5§Ž§\"\nI want to compress into 250 or less bytes to save it on my RFID card.\nAs this data is related to finger print temp. I want lossless compression.\nSo is there any algorithm which i can implement in C# to compress it?\n    ", "Answer": "\r\nIf the data is strictly numbers and signs, I highly recommend changing the numbers into int based values. eg:\n\n+12939272-23923+927392\n\ncan be compress into 3 piece of 32-bit integers, which is 22 bytes => 16 bytes. Picking the right integer size (whether 32-bit, 24-bit, 16-bit) should help.\n\nIf the integer size varies greatly, you could possibly use 8-bit to begin and use the value 255 to specify that the next 8-bit becomes the 8 more significant bits of the integer, making it 15-bit.\n\nalternatively, you could identify the most significant character and assign 0 for it. the second most significant character gets 10, and the third 110. This is a very crude compression, but if you data is very limited, this might just do the job for you.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Number encryption algorithm [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 5 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI have a list of numbers. I will be calling a service(let's say accountant service) which is going to perform some operation on these list of numbers and will return me the final result.\n\nI don't want to pass my data in plain format. I want to encrypt numbers in such a way if service performs any arithmetic operation and return me the result, I will be able to decrypt it back with actual result.\n    ", "Answer": "\r\nYes. You can use something called Homomorphic encryption, which \"is a form of encryption that allows computation on ciphertexts, generating an encrypted result which, when decrypted, matches the result of the operations as if they had been performed on the plaintext.\" With this type of encryption, they can be Partially homomorphic or Fully homomorphic. A fully homomorphic encryption can support arbitrary computation (also called \"bignum arithmetic\" or \"Arbitrary-precision arithmetic\"), whereas partially homomorphic algorithms cannot. As stated on the cryptography stack exchange by user ```\nmikeazo```\n in this thread,\n\n\n  ElGamal is a semantically secure, multiplicativey homomorphic cipher. Paillier is a semantically secure, additively homomorphic cipher.\n\n\nThe user also elaborates further and mentions a significant downside of this form of encryption:\n\n\n  Homomorphic ciphers typically do not, in and of themselves, do not provide verifiable computing. In words, you encrypt your data, send it to the cloud and let the cloud compute on it for you. How do you know the cloud performed the correct computation? To get this sort of guarantee, other machinery is needed.\n\n\nIn your case, you would be sending it through an (I am assuming) reputable API, so this may not be a concern of yours. \n\nFrom my research, your best bet will probably be Gentry's cryptosystem. To use this (in a program), HElib should work fine. \n\nIn the future, crypto.stackexchange.com would probably be a better place for this type of question\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for random numbers\r\n                \r\nI have to implement an algorithm for a raffle. The problem is that i would like that some of the participant to have more chances, because they have more points. How can i do that?\nI thounght to simply put them many times in the raffle, but doesn't seems legit.\nDo you know any algorithms that can do that?\n\nThanks\n    ", "Answer": "\r\nPseudo algorithm:\n\n```\nwinnerTicket <- a random number between zero and sum ticket count - 1\ncurrentTicket <- 0\nFor each participant in participants ordered by id\n    If winnerTicket - currentTicket > participant.ticketCount\n        currentTicket += participant.ticketCount\n    Else\n        return participant \n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Encrypt in Coldfusion and decrypt in C#\r\n                \r\nHere is the code used to encrypt in coldfusion \n\n```\n<cfset strBase64Value = encrypt(strValue,24 character key,AES) />\n```\n\n\nIt is generating encrypted values like ```\n714FEA9A9A2184769CA49D5133F08580```\n which seems odd to me considering it is only uppercase and numbers. \n\nWhat C# library should I use to properly decrypt it ?\n\nAlso looking at this information, it seems that by default it uses the UUEncode algorithm to encode. \n\nShould I ask the encrypter to use Base64 as encoding parameter ? \n    ", "Answer": "\r\n\n  It is generating encrypted values like ```\n714FEA9A9A2184769CA49D5133F08580```\n\n\n\nThen they are using \"Hex\", not the default \"UUEncode\". Either \"hex\" or \"base64\" is fine. As long as you both agree upon the encoding, it does not really matter.\n\nYou can use RijndaelManaged to decrypt the strings. However, the default encryption settings for ColdFusion and C# differ slightly. With the encrypt function:\n\n\n\"AES\" is short for \"AES/ECB/PKCS5Padding\" \n\"ECB\" mode does not use an IV\nKey strings are always base64 encoded\n\n\nNB: Despite the name difference, for the SUN provider, ```\nPKCS5Padding```\n (CF/Java) corresponds to ```\nPaddingMode.PKCS7```\n (C#). As mentioned in this thread, the \"... SUN provider in Java indicate[s] PKCS#5 where PKCS#7 should be used - \"PKCS5Padding\" should have been \"PKCS7Padding\". This is a legacy from the time that only 8 byte block ciphers such as (triple) DES symmetric cipher were available.\"\n\nSo you need to ensure your C# settings are adjusted to match. With that in mind, just decode the encrypted text from hex and the key string from base64. Using the slightly ugly example in the API, just adjust the algorithm settings to match those used by the encrypt() function:\n\nEncrypt with ColdFusion\n\n```\n<cfscript>\n    plainText     = \"Nothing to see\";\n    // 128 bit key base64 encoded\n    keyInBase64   = \"Y25Aju8H2P5DR8mY6B0ezg==\";\n    // \"AES\" is short for \"AES/ECB/PKCS5Padding\"\n    encryptedText = encrypt(plainText, keyInBase64, \"AES\", \"hex\");\n    WriteDump( encryptedText );\n    // result: 8889EDF02F181158AAD902AB86C63951 \n</cfscript>\n```\n\n\nDecrypt with C#\n\n```\nbyte[] bytes = SomeMethodToConvertHexToBytes( encryptedText );\nbyte[] key = Convert.FromBase64String( keyInBase64 );\n\nstring decryptedText = null;\n\nusing (RijndaelManaged algorithm = new RijndaelManaged())\n{\n\n    // initialize settings to match those used by CF\n    algorithm.Mode = CipherMode.ECB;\n    algorithm.Padding = PaddingMode.PKCS7;\n    algorithm.BlockSize = 128;\n    algorithm.KeySize = 128;\n    algorithm.Key = key;\n\n    ICryptoTransform decryptor = algorithm.CreateDecryptor();\n\n    using (MemoryStream msDecrypt = new MemoryStream(bytes))\n    {\n        using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n        {\n           using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n           {\n\n               decryptedText = srDecrypt.ReadToEnd();\n           }\n        }\n    }\n}\n\nConsole.WriteLine(\"Encrypted String: {0}\", encryptedText);\nConsole.WriteLine(\"Decrypted String: {0}\", decryptedText);\n```\n\n\nKeep in mind you can (and probably should) adjust the settings, such as using the more secure ```\nCBC```\n mode instead of ```\nECB```\n. You just need to coordinate those changes with the CF developer. \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to represent a number\r\n                \r\nwant to save the number ```\nx```\n in more bits than the standard binary representation. The bitstring representation, which iam searching, must be unique for this number ```\nx```\n that i can map ```\nx```\n to this representation and back. Also on every bit position ```\n1 and 0```\n must be allowed.\n\nExists such a bitstring representation of number ```\nx```\n, or its not possible to create such representation?\n\nFor example the zeckendorf representation is unique but doesnt allow 2 consequtive ```\n1```\n. If iam cut out the ```\n0```\n after one ```\n1```\n the length of the resulting bistring is more or less equal to standard binary representation length, but not longer.\n    ", "Answer": "\r\nAdd a single bit that is the parity of the original number: XOR all of the bits together.  THe mapping is deterministic, unique, and trivially reversible.\n\nIn general, any error detection/correction addition will satisfy your posted requirements.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Best way to perform UInt32 additions in VB.NET that are supposed to overflow\r\n                \r\nWhile trying to write the ARX part of the ChaCha20 encryption algorithm in VB.NET, I run in to the issue of overflow exceptions during the addition part.\nThere are many additions of UInt32 numbers in the algorithm, and numbers are supposed to overflow during addition, but in other parts of my code I want to catch these exceptions.\nOne way of dealing with this and avoid overflow exceptions completely is to interim-convert to UInt64 and then do the additions this way:\na = (a + b) mod 2^32\nI won't get any overflows but this doesn't work with the circular bit rotations needed for an ARX algorithm as I'm now pushing bits in to the empty 32 bits in the 64 bits UInt.\nThis converting back and forth is making the algorithm slower, and per 512 bits data block we are going through 20 rounds of a set of calculations so performance of this part of the code is pretty important.\nIs there a more elegant way to deal with this in VB.NET?\nMore info about the algorithm:\nhttps://en.wikipedia.org/wiki/Salsa20\nThank you for sharing your insights!\n    ", "Answer": "\r\nYou can turn overflow checking off per compiled assembly:\n\nSo it means you can have a DLL where you do all your overflowing math, and that DLL project has this tickbox checked (overflow checking is off)..\n..but your main project that needs to do math with overflowing ON, does NOT have this option set in its own compilation settings\nHere my OverflowOff project is a DLL that has \"remove checks\" enabled. A method has provided int maxvalue overflowed to int minvalue, then the forms project that uses the DLL has crashed with overflow because its own compile settings are set to perform overflow checks:\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Reverse the number algorithm\r\n                \r\n```\ncout<<\"enter a number n\"<<endl;\nint n{0};\ncin>>n;\nint lastDig{0};\nint revNum{0};\n\nwhile(n>0)\n{\n\n    lastDig= n%10;\n    n=n/10;\n    revNum = revNum*10+lastDig;\n}\ncout<< revNum <<endl;\n```\n\nThis works just fine in reversing the number. But inside the while loop, if I write the third line as ```\nint revNum = revNum*10+lastDig;```\n it gives the output as 0.\n    ", "Answer": "\r\nIf you change the third line in your loop to:\n```\nint revNum = revNum*10+lastDig;\n```\n\nThen you are declaring a new variable ```\nrevNum```\n each time through the loop. And your original ```\nrevNum```\n variable will not change (will stay zero).\nYou should not include the ```\nint```\n and then the code within the loop uses your existing variable.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to remove duplicates from a file?\r\n                \r\nHow to remove duplicates from a large file of large numbers ? This is an interview question about algorithms and data structures rather than ```\nsort -u```\n and stuff like that.\n\nI assume there that the file does not fit in memory and the numbers range is large enough so I cannot use in-memory count/bucket sort.\n\nThe only option is see is to sort the file (e.g. ```\nmerge sort```\n) and pass the sorted file again to filter out duplicates.\n\nDoes it make sense. Are there other options?  \n    ", "Answer": "\r\nYou won't even need separate pass over sorted data if you use a duplicates-removing variant of \"merge\" (a.k.a. \"union\") in your mergesort. Hash table should be empty-ish to perform well, i.e. be even bigger than the file itself - and we're told that the file itself is big. \n\nLook up multi-way merge (e.g. here) and external sorting.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Fast algorithm for finding prime numbers? [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Which is the fastest algorithm to find prime numbers?\r\n                            \r\n                                (20 answers)\r\n                            \r\n                    \r\n                Closed 10 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nFirst of all - I checked a lot in this forum and I haven't found something fast enough.\nI try to make a function that returns me the prime numbers in a specified range.\nFor example I did this function (in C#) using the sieve of Eratosthenes. I tried also Atkin's sieve but the Eratosthenes one runs faster (in my implementation):\n\n```\npublic static void SetPrimesSieve(int Range)\n    {\n        Primes = new List<uint>();\n        Primes.Add(2);\n        int Half = (Range - 1) >> 1;\n        BitArray Nums = new BitArray(Half, false);\n        int Sqrt = (int)Math.Sqrt(Range);\n        for (int i = 3, j; i <= Sqrt; )\n        {\n            for (j = ((i * i) >> 1) - 1; j < Half; j += i)\n                Nums[j] = true;\n            do\n                i += 2;\n            while (i <= Sqrt && Nums[(i >> 1) - 1]);\n        }\n        for (int i = 0; i < Half; ++i)\n           if (!Nums[i])\n                Primes.Add((uint)(i << 1) + 3);\n    }\n```\n\n\nIt runs about twice faster than codes & algorithms I found...\nThere's should be a faster way to find prime numbers, could you help me?\n    ", "Answer": "\r\nWhen searching around for algorithms on this topic (for project Euler) I don't remember finding anything faster. If speed is really the concern, have you thought about just storing the primes so you simply need to look it up?\n\nEDIT: quick google search found this, confirming that the fastest method would be just to page the results and look them up as needed. \n\nOne more edit - you may find more information here, essentially a duplicate of this topic. Top post there states that atkin's sieve was faster than eras' as far as generating on the fly.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How can I change my reduce() to sum numbers until I get the number which was asked for?\r\n                \r\nhttps://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-odd-fibonacci-numbers\n\nI need to complete theses task, so I have made a function to sum Fibonacci series. But I need to sum until I get the number which is asked for by the program. Can you make any suggestions? Please, correct my english if it is necessary and help me to get the answer for my code.\n\nsumFibs(1000) should return 1785.\nsumFibs(4000000) should return 4613732.\nsumFibs(75024) should return 60696.\nsumFibs(75025) should return 135721.\n\n```\nfunction sumFibs(num) {\n\nlet numArr=[];\n\nfor(let i=0;i<=num;i++){\n\n   numArr.push(i)\n\n   }  \nconsole.log()\nlet oddNumArr=numArr.filter(numbers=>numbers % 2 !== 0) \n\noddNumArr.unshift(1)\n\nlet reducedArr=oddNumArr.reduce((a, b) => a + b, 0)\n\nreturn reducedArr;\nconsole.log(reducedArr)\n\n```\n\n    ", "Answer": "\r\nHere is the optimized code that you want finally.\n\n\r\n\r\n```\nfunction sumFibs(num) {\r\n  let m = 0;\r\n  let n = 1;\r\n  let count = 0;\r\n\r\n  while (n < num) {\r\n    [n, m] = [n+m, n];\r\n\r\n    if (m%2 !== 0) {\r\n      count+=m;\r\n    }\r\n  }\r\n  return count;\r\n}\r\nconsole.log(sumFibs(1000));\r\nconsole.log(sumFibs(4000000));\r\nconsole.log(sumFibs(75024));\r\nconsole.log(sumFibs(75025));```\n\r\n\r\n\r\n\n\nIf you are in need of reduce function, you should go through a little bit more lines down in your code.\n\nHere is the code that uses reduce function\n\r\n\r\n```\nfunction sumFibs(num) {\r\n  let lastFib=0;\r\n  let fibonacci=[0,1]; \r\n  let i=0;\r\n  while(lastFib<num){\r\n      lastFib=fibonacci[i]+fibonacci[i+1];\r\n      fibonacci.push(lastFib);\r\n      i++;\r\n  }  \r\n  fibonacci.pop();\r\n  return fibonacci.filter(x=>x%2!==0).reduce((a,b)=>a+b);\r\n}\r\n\r\nconsole.log(sumFibs(1000));\r\nconsole.log(sumFibs(4000000));\r\nconsole.log(sumFibs(75024));\r\nconsole.log(sumFibs(75025));```\n\r\n\r\n\r\n\n\nHopefully, this would be helpful, please comment down below if you have any questions!\nThanks.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "An algorithm with time complexity O(nlogr) to find first kj (1 ≤ j ≤ r) smallest numbers in a set S\r\n                \r\nConsidering the multiple select problem. There is a set S which has n elements. And there is another set K which has r numbers of k1, k2, ... kr. Please find the first k1, k2, ... kr small numbers in the set S.\n\nFor example,K = {2,7,9,50}, that is, from the n elements, you need to find the 2nd, 7th, 9th, 50th smallest elements.\n\nThe ordinary solution is to run SELECT algorithm for each kj (1 ≤ j ≤ r) to find the first kj small element, then the total time complexity is Θ(r⋅n), please give an algorithm with time complexity O(nlogr) to solve this problem.\n\nProve the time complexity is O(nlogr).    \n\n\n\nIt's my 1st time to use StackOverflow. \n\nMy first thought was to modify the SELECT algorithm by adding a tag to mark if A[i] (A[i] is an element of set S) has been confirmed at its location. \n\nFor example, in the former access, I have confirmed A[5] and A[18] (then A[5] is the 5th smallest number, A[18] is the 19th smallest number, and numbers between A[5] and A[18] are just between index 5 and index 18). \n\nIf I need to find the 9th smllest number now. I just need to SELECT (A, 9, 5, 18) instead of SELECT(A, 9, 1, n). \n\nAm I right? I don't how to calculate the time complexity under this complex circumstance.\n    ", "Answer": "\r\nOne way to do this:\n\nIn the discussion below, ```\nk```\n is the length of the array ```\nK```\n, and ```\ns```\n is the length of the array ```\nS```\n.\n\n\nScan ```\nK```\n to get the maximum number. Call this ```\nr```\n. Complexity: O(k).\nCall Quickselect on ```\nS```\n to select the ```\nr```\n smallest numbers. Complexity: O(s).\nBuild a binary min heap from the result of #2. Call this heap ```\nrSmallest```\n. Complexity: O(r)\nCreate a set from ```\nK```\n. Basically, a data structure that will tell, in O(1) time, if an item exists in the set. Call this ```\nkSet```\n. Complexity: O(k).\n\n\nWhat you have now is a set that contains the item numbers you want, and a binary heap that has the the ```\nk```\n smallest values in the array. Then:\n\n```\ni = 0;\nwhile (!kSmallest.isEmpty())\n{\n    ++i;\n    item = kSmallest.pop()  // O(log r)\n    if (R.Contains(i))      // O(1)\n    {\n        output item\n    }\n}\n```\n\n\nThe loop is O(r log r).\n\nSo the total complexity is O(k) + O(s) + O(r) + O(k) + O(r log r), which is the same order of O(s log r), because ```\nr <= s```\n.\n\nAn alternative to step 2 is to use a min-heap selection algorithm, which would be O(s log r). That would save you having to include step 3, but it wouldn't improve the complexity.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Testing sorting algorithms with different sizes of number sets\r\n                \r\nI have a C code which implements firstly a bubble sort algorithm, and then AVL Sort to different sizes of number sets. I have 4 different .txt file which include different sizes of number sets (10000 - 100000 - 1000000 - 10000000). When I try both algorithms with more little number sets, or even trying them on only one number set, both algorithms work fine and give true outputs. But when I call them sequentially in the ```\nmain```\n function, the console program is being interrupted and stopping to work. Here are my calls in the main function;\n\n```\nint main()\n{\n\n    test(\"10000.txt\", 10000);\n    test(\"100000.txt\", 100000);\n    test(\"1000000.txt\", 1000000);\n    test(\"10000000.txt\", 10000000);\n\n\n    return 0;\n}\n```\n\n\nHere, what ```\ntest()```\n function doing is, reading all of the lines from .txt files and both inserting them into a AVL Tree and in an unsorted array. Then AVL Sort and Bubble Sort algorithms works, the elapsed time is recorded and printed on the console. Even though I comment out the codes about AVL Sort, and only run Bubble Sort, it is being interrupted when I call the ```\ntest()```\n function sequentially in the main. Here is my bubble sort function;\n\n```\nvoid bubblesort(unsigned long long *arr, int n)\n{\n\n    int i, j;\n    unsigned long long temp = 0;\n\n    for(i = 0; i<n; i++)\n    {\n\n       for(j = 0; j<n-i-1; j++)\n       {\n\n            if( arr[j] > arr[j+1])\n            {\n                temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n\n}\n```\n\n\nThis is the console output when I call test() sequentially, as you can see only the first .txt file with 10000 elements tested and then program got interrupted;\n\n\n\nSo, are there anyone who can explain me what the problem is here ? Thanks for help.\n\nEdit: For the ones who wanted me to share test() function, I removed the lines about AVL Tree and simplified it with only showing the Bubble Sort part. It is simply not crushing when the bubble sort is alone, it sorts 10.000 elements in 0 seconds, 100.000 elements in 44 seconds, but when it comes to 1.000.000 elements, it simply waits too long, maybe more than 10 minutes but still can't give any output. Is that normal for a bubble sort to spend too much time on sorting that number of elements?\n\n```\nvoid test(char *fname, int n)\n{\n    time_t start, end;\n    FILE *fp;\n    int i = 0;\n    unsigned long long number;\n    unsigned long long *unsorted = (unsigned long long  *)malloc(sizeof(unsigned long long)*n);\n\n    fp = fopen(fname, \"r+\");\n    for(i = 0; i<n; i++)\n    {\n        fscanf(fp, \"%llu\\n\", &number);\n        unsorted[i] = number;\n    }\n    fclose(fp);\n\n    time(&start);\n    bubblesort(unsorted, n);\n    time(&end);\n    printf(\"bubblesort function's time spent is %ld second for %d number of elements.\\n\", (end - start), n);\n    free(unsorted);    \n}\n```\n\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm of number conversion？\r\n                \r\n```\npublic static String DeciToBin(int i)\n{\n    String zero=\"0\";\n    String one=\"1\";\n    String str = \"\";\n    if(i==0)\n    {\n        return zero;\n    }\n    if(i==1)\n    {\n        return one;\n    }\n    for(;i<2;i/=2)\n    {\n        if(i%2==1)\n        {\n            str= one+str;\n        }\n        if(i%2==0)\n        {\n            str=zero+str;\n        }\n    }\n    return str;\n}\n```\n\n\nIt turned out nothing when i is bigger than 1. There's no error or caution in these lines. What did I miss?\n    ", "Answer": "\r\nYou need to test whether ```\ni>0```\n or not not stop if you get a number of 2 or more.\n\nYou can simplify this a lot.\n\n```\npublic static String deciToBin(int i) {\n    String str = \"\";\n    do {\n        str = (i & 1) + str;\n        i >>>= 1;\n    } while (i != 0);\n    return str;\n}\n```\n\n\nEven better would be to use StringBuilder\n\n```\npublic static String deciToBin(int i) {\n    StringBuilder str = new StringBuilder();\n    do {\n        str.append(i & 1);\n        i >>>= 1;\n    } while (i != 0);\n    return str.reverse().toString();\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How can I change my reduce() to sum numbers until I get the number which was asked for?\r\n                \r\nhttps://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-odd-fibonacci-numbers\n\nI need to complete theses task, so I have made a function to sum Fibonacci series. But I need to sum until I get the number which is asked for by the program. Can you make any suggestions? Please, correct my english if it is necessary and help me to get the answer for my code.\n\nsumFibs(1000) should return 1785.\nsumFibs(4000000) should return 4613732.\nsumFibs(75024) should return 60696.\nsumFibs(75025) should return 135721.\n\n```\nfunction sumFibs(num) {\n\nlet numArr=[];\n\nfor(let i=0;i<=num;i++){\n\n   numArr.push(i)\n\n   }  \nconsole.log()\nlet oddNumArr=numArr.filter(numbers=>numbers % 2 !== 0) \n\noddNumArr.unshift(1)\n\nlet reducedArr=oddNumArr.reduce((a, b) => a + b, 0)\n\nreturn reducedArr;\nconsole.log(reducedArr)\n\n```\n\n    ", "Answer": "\r\nHere is the optimized code that you want finally.\n\n\r\n\r\n```\nfunction sumFibs(num) {\r\n  let m = 0;\r\n  let n = 1;\r\n  let count = 0;\r\n\r\n  while (n < num) {\r\n    [n, m] = [n+m, n];\r\n\r\n    if (m%2 !== 0) {\r\n      count+=m;\r\n    }\r\n  }\r\n  return count;\r\n}\r\nconsole.log(sumFibs(1000));\r\nconsole.log(sumFibs(4000000));\r\nconsole.log(sumFibs(75024));\r\nconsole.log(sumFibs(75025));```\n\r\n\r\n\r\n\n\nIf you are in need of reduce function, you should go through a little bit more lines down in your code.\n\nHere is the code that uses reduce function\n\r\n\r\n```\nfunction sumFibs(num) {\r\n  let lastFib=0;\r\n  let fibonacci=[0,1]; \r\n  let i=0;\r\n  while(lastFib<num){\r\n      lastFib=fibonacci[i]+fibonacci[i+1];\r\n      fibonacci.push(lastFib);\r\n      i++;\r\n  }  \r\n  fibonacci.pop();\r\n  return fibonacci.filter(x=>x%2!==0).reduce((a,b)=>a+b);\r\n}\r\n\r\nconsole.log(sumFibs(1000));\r\nconsole.log(sumFibs(4000000));\r\nconsole.log(sumFibs(75024));\r\nconsole.log(sumFibs(75025));```\n\r\n\r\n\r\n\n\nHopefully, this would be helpful, please comment down below if you have any questions!\nThanks.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Random Number Algorithm - Implementation in Java\r\n                \r\nCan anyone please suggest me a random number algorithm that I can use for implementation in java? I don't want to use the Math.random() function.\n\nNote: I want to write my own random number generation function in java; therefore for I am looking for an algorithm that I can use.\n    ", "Answer": "\r\nI think your question actually language-agnostic, and shouldn't be specifically java. Also, I think it's very easy to find information on things like this. Look at the wiki pages for Pseudorandom number generator and Random number generation. If you're looking for something simple (relatively) look at the XORshift RNG\n\n```\nuint32_t xor128(void) { //A C version from wiki\n  static uint32_t x = 123456789;\n  static uint32_t y = 362436069;\n  static uint32_t z = 521288629;\n  static uint32_t w = 88675123;\n  uint32_t t;\n\n  t = x ^ (x << 11);\n  x = y; y = z; z = w;\n  return w = w ^ (w >> 19) ^ (t ^ (t >> 8));\n}\n```\n\n\nOr in Java:\n\n```\npublic class IsNotFour {\n    int x = 123456789;\n    int y = 362436069;\n    int z = 521288629;\n    int w = 88675123;\n\n    int xor128() { // A converted C version from wiki\n        int t = x ^ (x << 11);\n        x = y;\n        y = z;\n        z = w;\n        w = w ^ (w >>> 19) ^ (t ^ (t >>> 8));\n        return w; \n    }\n}\n```\n\n\nNote that ```\nx```\n, ```\ny```\n, ```\nz```\n and ```\nw```\n together make the seed.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to find 2 consecutive numbers\r\n                \r\nConsider a list of unsorted numbers, think about an algorithm to test all the items in the list to check whether there are any two consecutive numbers (even if they are not adjacent) or not.\n\nFor example 1: List A = [10,7,23,18,45,24]-> output: true\n\nthe output is True becasue 23 and 24 are consecutive numbers (even not adjacent)\n\n\nFor example 2: List B = [24,15,18,18,42,22]-> output: false\n\nthe output of example 2 is False because there isn't any consecutive numbers.\n\n\n\nNow, answer the following questions:\n\nWrite an algorithm to solve the above problem?\n\n    ", "Answer": "\r\nI have implement this with Go language. find full code here and run\n```\nfunc isConsecutiveAvailable(arr []int) bool{\n    // sort the array in increasing order\n    sort.Ints(arr)\n    \n    // loop the array and find if there is a consecutive\n    for i:=0; i < len(arr) -1; i++ {\n        if arr[i] + 1 == arr[i+1]{\n            return true\n        }\n    }\n    \n    // return false if loop cant find any consecutive\n    return false\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "What is an efficient algorithm for counting the number of triangles in a graph? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question is opinion-based. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it can be answered with facts and citations by editing this post.\r\n                \r\n                    \r\n                        Closed 4 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nWhat is an efficient algorithm for counting the number of triangles in an undirected graph )(where a graph is a set of vertices and edges)? I've been searching Google and reading through my shelf of textbooks for a few hours each day for three days in a row. \n\nThis is for a homework assignment where I need such an algorithm, but developing it doesn't count for anything on the assignment. It is expected that we can simply find such an algorithm from outside resources, but I'm at the end of my rope.\n\nFor clarification, a triangle in a graph is a a cycle of length three. The trick is that it needs to work on vertex sets with at most 10,000 nodes.\n\nI'm currently working in C#, but care more about the general approach towards solving this problem than code to copy and paste.\n\nAt the high level, my attempts thus far included:\n\n\nA breadth first search that tracked all unique cycles of length three. This seemed like a fine idea to me, but I couldn't get it functional\nA loop over all the nodes in the graph to see if three vertices shared an edge. This has far too slow of a running time for the larger data sets. O(n^3).\n\n\nThe algorithm itself is part of calculating the clustering coefficient.\n    ", "Answer": "\r\nYou will need depth first search. The algorithm will be:\n\n1) For the current node ask all unvisited adjacent nodes\n\n2) for each of those nodes run depth two check to see if a node at depth 2 is your current node from step one\n\n3) mark current node as visited\n\n4) on make each unvisited adjacent node your current node (1 by 1) and run the same algorithm\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Extract algorithm from number distribution\r\n                \r\nI was wondering if there are neural networks or genetic algorithms which could approximate a random number generation sequence?\n\n```\nExample - Input:\n5 5 6 6 1 1 3 3 6 1 1 1 3 2 3 5 1 1 4 5 8 9 8 9 3 1 4 3 1 3 5 5 4 9 9 4 9 4 6 1 3 1 \n\nSimulation - Output:\n5 5 8 6 1 5 3 3 1 1 1 5 3 2 1 5 1 1 3 5 8 0 8 9 3 1 4 2 1 3 5 5 4 9 5 4 9 4 2 1 3 1 \n```\n\n    ", "Answer": "\r\nI think what you are looking for is a Time Series Analysis.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Count elements using std::accumulate algorithm and lambda expressions\r\n                \r\nHere's is my problem: \n\nI need to count the total number of elements of several std::vector contained into a std::map of type std::map>;\n\nTo count the total number of elements I use the following code:\n\n```\nstd::map<int, std::vector<float>>::iterator vertex_It = myMap.begin();\nuint32_t total_byte_size = 0;\n\nfor (; vertex_It != myMap.end(); ++vertex_It)\n    total_byte_size += vertex_It->second.size() * sizeof(float);\n```\n\n\nI tried to use std::accumulate algorithm and lambda expressions like below:\n\n```\nuint32_t total_byte_size = 0;\n\nstd::accumulate(myMap.begin(), myMap.end(),\n    [&total_byte_size](const uint32_t &vertex_type, const std::vector<float> &vertex_attribute) -> bool{\n        total_byte_size += vertex_attribute.size();\n        return (true);\n});\n```\n\n\nBut this code does not compile. I tried different combinations of code without success.\n\nDoes it exist a way to use std::accumulate and lambda expressions for this simple problem ?\n\nThanks a lot in advance for your help!\n    ", "Answer": "\r\nThere are several ways of accumulating using ```\nstd::accumulate```\n on a map. You could potentially shoehorn something that accumulates in a by-reference variable while returning a boolean, but a better approach is to use accumulate that computes and returns the result to you:\n\n```\nauto res = accumulate(myMap.begin(), myMap.end(), (size_t)0,\n    [](size_t prior, const pair<int, std::vector<float> >& p) -> size_t {\n        return prior + p.second.size();\n    }\n);\n```\n\n\nNote that the third parameter is the initial value for the accumulate. Also note that the lambda is not capturing a \"side\" variable by reference, but gets the prior value in its first parameter. Finally note that the second parameter of lambda corresponds to what you get through map's iterators - a pair of key and value types, passed by constant reference.\n\nDemo.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for \"pick the number up game\"\r\n                \r\nI'm struggling to get some solution, but I have no idea for that.\n\nRobotA and RobotB who choose a permutation of the N numbers to begin with. RobotA picks first, and they pick alternately. Each turn, robots only can pick any one remaining number from the permutation. When the remaining numbers form an increasing sequence, the game finishes. The robot who picked the last turn (after which the sequence becomes increasing) wins the game.\n\nAssuming both play optimally , who wins?\n\nExample 1:\n\n```\n The original sequence is 1 7 3. \n RobotA wins by picking 7, after which the sequence is increasing 1 3.\n```\n\n\nExample 2:\n\n```\n The original sequence is 8 5 3 1 2.\n RobotB wins by selecting the 2, preventing any increasing sequence.\n```\n\n\nIs there any known algorithm to solve that? Please give me any tips or ideas of where to look at would be really thankful!\n    ", "Answer": "\r\nGiven a sequence ```\nw```\n of distinct numbers, let ```\nN(w)```\n be the length of ```\nw```\n and let ```\nL(w)```\n be the length of the longest increasing subsequence in ```\nw```\n. For example, if\n\n```\nw = 3 5 8 1 4\n```\n\n\nthen ```\nN(w) = 5```\n and ```\nL(w) = 3```\n.\n\nThe game ends when ```\nL(w) = N(w)```\n, or, equivalently, ```\nN(w) - L(w) = 0```\n. \n\nWorking the game backwards, if on RobotX's turn ```\nN(w) - L(w) = 1```\n, then the optimal play is to remove the unique letter not in a longest increasing subsequence, thereby winning the game. \n\nFor example, if ```\nw = 1 7 3```\n, then ```\nN(w) = 3```\n and ```\nL(w) = 2```\n with a longest increasing subsequence being ```\n1 3```\n. Removing the ```\n7```\n results in an increasing sequence, ensuring that the player who removed the ```\n7```\n wins.\n\nGoing back to the previous example, ```\nw = 3 5 8 1 4```\n, if either ```\n1```\n or ```\n4```\n is removed, then for the resulting permutation ```\nu```\n we have ```\nN(u) - L(u) = 1```\n, so the player who removed the ```\n1```\n or ```\n4```\n will certainly lose to a competent opponent. However, any other play results in a victory since it forces the next player to move to a losing position. Here, the optimal play is to remove any of ```\n3```\n, ```\n5```\n, or ```\n8```\n, after which ```\nN(u) - L(u) = 2```\n, but after the next move ```\nN(v) - L(v) = 1```\n. \n\nFurther analysis along these lines should lead to an optimal strategy for either player.\n\n\n\nThe nearest mathematical game that I do know is the Monotone Sequence Game. In a monotonic sequence game, two players alternately choose elements of a sequence from some fixed ordered set (e.g. ```\n1,2,...,N```\n). The game ends when the resulting sequence contains either an ascending subsequence of length ```\nA```\n or a descending one of length ```\nD```\n. This game has its origins with a theorem of Erdos and Szekeres, and a nice exposition can be found in MONOTONIC SEQUENCE GAMES, and this slide presentation by Bruce Sagan is also a good reference.\n\nIf you want to know more about game theory in general, or these sorts of games in particular, then I strong recommend Winning Ways for Your Mathematical Plays by Berlekamp, Conway and Guy. Volume 3, I believe, addresses these sorts of games.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to find all combinations of numbers summing up to a certain number?\r\n                \r\nA sum is given, for example 25, and numbers are given, for example 2, 5, 10\nYou need to find all the combinations for choosing this amount.\nThat is, the program should output 5 + 5 + 5 + 5 + 5, 5 + 5 + 5 + 10, 5 + 10 + 10, 2 + 2 + 2 + 2 + 2 + 10 + 5 and so on.\n\nWhat algorithms / methods / libraries do you recommend using?\n    ", "Answer": "\r\nYou can use ```\nitertools```\n to get all the combinations, then keep only those that sum up to 25. I used ```\nwith_replacement```\n because the same value can come twice. Also, I used the flooring division because no number can come more often than the smallest one.\n\n```\nfrom itertools import combinations_with_replacement\n\ncandidates = list()\n\nfor i in range(25//2):  # floor division of largest by smallest\n    candidates.extend(list(combinations_with_replacement([2, 5, 10], i)))\n\npositive_cases = [i for i in candidates if sum(i) == 25]\n```\n\n\n```\n[(5, 10, 10), (5, 5, 5, 10), \n (5, 5, 5, 5, 5), (2, 2, 2, 2, 2, 5, 10), \n (2, 2, 2, 2, 2, 5, 5, 5), \n (2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5)]\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to find a common multiplier to convert decimal numbers to whole numbers\r\n                \r\nI have an array of numbers that potentially have up to 8 decimal places and I need to find the smallest common number I can multiply them by so that they are all whole numbers. I need this so all the original numbers can all be multiplied out to the same scale and be processed by a sealed system that will only deal with whole numbers, then I can retrieve the results and divide them by the common multiplier to get my relative results.\n\nCurrently we do a few checks on the numbers and multiply by 100 or 1,000,000, but the processing done by the *sealed system can get quite expensive when dealing with large numbers so multiplying everything by a million just for the sake of it isn’t really a great option. As an approximation lets say that the sealed algorithm gets 10 times more expensive every time you multiply by a factor of 10.\n\nWhat is the most efficient algorithm, that will also give the best possible result, to accomplish what I need and is there a mathematical name and/or formula for what I’m need?\n\n*The sealed system isn’t really sealed. I own/maintain the source code for it but its 100,000 odd lines of proprietary magic and it has been thoroughly bug and performance tested, altering it to deal with floats is not an option for many reasons. It is a system that creates a grid of X by Y cells, then rects that are X by Y are dropped into the grid, “proprietary magic” occurs and results are spat out – obviously this is an extremely simplified version of reality, but it’s a good enough approximation.\n\nSo far there are quiet a few good answers and I wondered how I should go about choosing the ‘correct’ one. To begin with I figured the only fair way was to create each solution and performance test it, but I later realised that pure speed wasn’t the only relevant factor – an more accurate solution is also very relevant. I wrote the performance tests anyway, but currently the I’m choosing the correct answer based on speed as well accuracy using a ‘gut feel’ formula.\n\nMy performance tests process 1000 different sets of 100 randomly generated numbers. \nEach algorithm is tested using the same set of random numbers.\nAlgorithms are written in .Net 3.5 (although thus far would be 2.0 compatible)\nI tried pretty hard to make the tests as fair as possible.\n\n\nGreg – Multiply by large number\nand then divide by GCD – 63\nmilliseconds\nAndy – String Parsing\n– 199 milliseconds \nEric – Decimal.GetBits – 160 milliseconds\nEric – Binary search – 32\nmilliseconds \nIma – sorry I couldn’t\nfigure out a how to implement your\nsolution easily in .Net (I didn’t\nwant to spend too long on it) \nBill – I figure your answer was pretty\nclose to Greg’s so didn’t implement\nit. I’m sure it’d be a smidge faster\nbut potentially less accurate.\n\n\nSo Greg’s Multiply by large number and then divide by GCD” solution was the second fastest algorithm and it gave the most accurate results so for now I’m calling it correct.\n\nI really wanted the Decimal.GetBits solution to be the fastest, but it was very slow, I’m unsure if this is due to the conversion of a Double to a Decimal or the Bit masking and shifting. There should be a \nsimilar usable solution for a straight Double using the BitConverter.GetBytes and some knowledge contained here: http://blogs.msdn.com/bclteam/archive/2007/05/29/bcl-refresher-floating-point-types-the-good-the-bad-and-the-ugly-inbar-gazit-matthew-greig.aspx but my eyes just kept glazing over every time I read that article and I eventually ran out of time to try to implement a solution.\n\nI’m always open to other solutions if anyone can think of something better.\n    ", "Answer": "\r\nI'd multiply by something sufficiently large (100,000,000 for 8 decimal places), then divide by the GCD of the resulting numbers. You'll end up with a pile of smallest integers that you can feed to the other algorithm. After getting the result, reverse the process to recover your original range.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Genetic Algorithm Framework in .NET (GAF) - Connection between population and number of entries in the fitness function\r\n                \r\n```\nprivate static int generation = 0;\nprivate static int numInGeneration = 0;\n\n\npublic static void Calculate()\n{\n    const double crossoverProbability = 0.65; \n    const double mutationProbability = 0.08; \n    const int elitismPercentage = 5;\n    ...\n    var population = new Population(100, 40, false, false, ParentSelectionMethod.FitnessProportionateSelection);\n\n\n\nprivate static double EvaluateFitness(Chromosome chromosome)\n{\n    numInGeneration++; // incrementing evaluation number in the same generation\n\n    // save to DB chromosome, fitness, generation, numInGeneration ...\n\n\n\nprivate static bool TerminateAlgorithm(Population population, int currentGeneration, long currentEvaluation)\n{\n    numInGeneration = 0; // reseting number in generation\n```\n\n\nNumInGeneration represents number of entries inside of fitness function. When I grouped results for each generation I've got following results:\n\n```\nGeneration  NumInGeneration\n    0           289\n    1           186\n    2           188\n    3           182\n    4           190\n    5           189\n    6           184\n    7           184\n    8           185\n```\n\n\nWhy there are no 100 evaluations, 100 entries to the fitness function. In this case in 0th generation it is 289 times?\n\nI was expecting to see 100 chromosomes generated for each generation, which was implying to have 100 evaluations (100 entries to the fitness function).\n\nWhen I grouped chromosomes in the 0th generation I've got repeating for evaluations of the same chromosomes:\n\n```\nChromosome                                  Repeating\n0001001110101011101110111011101011101011    12\n0010000111110011110100011011101110101100    8\n0010111011001000001110011000110001010010    5\n0011100011110010100010001100001101111001    5\n0000011011001111101000001101011111111111    4\n0010011010100110001001110101001101111101    4\n0001101110101101110100001000110000001000    3\n0100011001110010100001010111000011111011    3\n1110100110001010000101010110111100000101    2\n0100010110100111010100100100110110111111    2\n0100101111011000000000111100100000011100    2\n1111001111101100011101100000101101101001    2\n1100000100110000001010110110110001010000    2\n0110010101110011000101001111011010111011    2\n1100101011010001010011100101101110011100    2\n0010000110101011110010111010110100000010    2\n0100000000000101101011111011111011111100    2\n0100110011000001010000011110001110010110    2\n0111101101000111111011111011111011100100    2\n0111110010011110010010000000100011010010    2\n0111111011110101111111000001101011011111    1\n0111111100101001110011111110110100010010    1\n1000001001101011100010001011011110100110    1\n```\n\n\nAnother question is why is fitness function called more times for the same chromosome. In this example it's possible to see that 12 times the same calculation has been made?\nIs there some internal caching that has to be setup?\n\nProbably I've got wrong idea how GAF should work. In that case please explain what is connection between population number and number of entries to the fitness function. How to setup and control number of entries to the fitness function. \nIn case when fitness function is to heavy there is waste of resources when evaluation is made for the same chromosome more than once. In that case I don't see a problem to make an \"external\" caching if needed.\n    ", "Answer": "\r\nThe number of evaluations is based on the number of the population in relation to the number of operators. If all chromosomes were evaluated for each generation, then you would see 300 evaluations per generation. However, this number is reduced based on the parameters specified. For example crossover ReEvaluateAll is set to false. This means that the GAF will not re-evaluate anything it already has a fitness for. Elite is set to 5% which means that these will not be evaluated for each operator/generation. Crossover probabilty is set fairly low at 0.65 which means that there is a significant chance that crossover will not occur in many cases thereby reducing the number of evaluations still further.\n\nParent selection is determined in part by current fitness, therefore, the process of evaluation is to undertake an initial evaluation of the population before starting the first generation and then evaluating as described above for each operator in each generation. Therefore it is quite normal that the first generation will have more evaluations than subsequent ones. The results of the initial evaluation are available by hooking up to the OnInitialEvaluationComplete event. If you have a population of 100, the number of evaluations at this point will be 100.\n\nFor the second part of your question ...why is fitness function called more times for the same chromosome? the answer is that it is not. What you have is 12 different chromosomes all with the same value. Checking the Chromosome.Id property (Guid) for each of the 'duplicates' should prove this. It is common to have duplicate values in a GA population due to the parent selection process often using the same or similar parents to create offspring.\n\nYour idea of cacheing fitness values for known chromosome values seems, on the face of it, a reasonable approach for chromosomes other than the object type. The product is open source (LGPL), you could always add this and create a pull request.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for Continuous Number arrangement - Javascript\r\n                \r\ni need number arrangement  algorithm or javascript code for following  case\n\n```\ninput :  [0,0,1,1,3,3,5,5,7,8,8,8,10]\n\noutput : [0,0,1,1,2,2,3,3,4,5,5,5,6]\n```\n\n\nThanks\ni try following snippets \n\n```\nvar array=[];\narray[0]=0;\narray[1]=0;\narray[2]=2;\narray[3]=2;\narray[4]=5;\narray[5]=5;\narray[6]=6;\n\n$.each(array,function(i,val){  \n   if(i==0){\n     prev=eval(val);\n   }else{\n     if(prev!=val){\n       if(val!=eval(prev)+1){          \n      array[i]=eval(prev+1);\n      prev=eval(prev+1);;\n       }else{\n          prev=val;\n       }\n     }\n   }\n});\n```\n\n    ", "Answer": "\r\nYou can use ```\nArray.prototype.map```\n for that:\n\n```\nvar c = 0,\n    array_in = [0,0,1,1,3,3,5,5,7,8,8,8,10],\n    array_out = [];\narray_out = array_in.map(function(a,i,arr){return (arr[i] > arr[i-1])?++c:c});\n\n// array_out == [0,0,1,1,2,2,3,3,4,5,5,5,6]\n```\n\n\nSee the example\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for distributing a number between certain number of chunks\r\n                \r\nI am looking for an algorithm to split up a number between a certain number of the chunk.\nThe real example is: assigning initial capacity to all the workers based on the total number of tasks.\n\ne.g If there are 3 persons and 6 tasks. Each will have an initial capacity \n         ```\n= 6 / 3 = 2```\n\n\nI come up with an implementation. But, I am not sure it is an optimal way to achieve it. \n\n```\ndef capacity_distribution(task_size, people_size):\n    \"\"\"\n    It distributes initial capacity to each person.\n    \"\"\"\n    div = task_size // people_size\n\n    remainder = task_size % people_size\n\n    first_chunk_size = people_size - remainder\n    second_chunk_size = people_size - first_chunk_size\n\n    first_capacity_list = []\n    second_capacity_list = []\n    first_capacity_list = [div for _ in range(first_chunk_size)]\n    second_capacity_list = [div + 1 for _ in range(second_chunk_size)]\n    first_capacity_list.extend(second_capacity_list)\n\n    return first_capacity_list\n\n\n\nprint(capacity_distribution(6, 2))\nprint(capacity_distribution(7, 3))\nprint(capacity_distribution(11, 3))\nprint(capacity_distribution(18, 5))\n```\n\n\nOutput :\n\n```\n[3, 3]\n[2, 2, 3]\n[3, 4, 4]\n[3, 3, 4, 4, 4]\n```\n\n\nIs there any other efficient way for this one?\n    ", "Answer": "\r\nMaybe:\n\n```\ndef capacity_distribution(task_size, people_size):\n    each = math.floor(task_size/people_size) # everyone gets this many\n    extra = task_size % people_size # this many get 1 extra\n\n    distribution = [each for x in range(people_size)]\n    for x in range(people_size):\n        if x < extra:\n            distribution[x] += 1\n\n    return distribution\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Garwick's algorithm for dealing with stack overflows?\r\n                \r\nGarwick's Algorithm is an algorithm for dealing with stack overflows. \n\nDoes anybody have ideas on how to modify Garwick's algorithm for dealing with stack overflows?\nThe question is about coming up with an algorithm to speed up Garwick's algorithm. In this case it would mean an algorithm that results with a smaller number of reallocations and a smaller number of cells moved?\n\nStandish (Data Structures, Algorithms, and Software Principles book) offers a table that gives the average number of reallocations and cells moved when dealing with 10 stacks and 1000 elements - elements are added by uniform distribution and a skewed distribution going with (1/2)^(-n), n = 1...10. \n\nOne suggested solution is to have even stacks grow in the left direction, and odd stacks in the right direction - I think this gave better results. \n\nHas anybody come accross algorithms that are faster than Garwick's algorithm ?\n    ", "Answer": "\r\nEven stacks growing in the left direction, and odd stacks in the right direction gives better results overall. \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "extended euclidean algorithm and the concept of multiplicative inverse\r\n                \r\nI have with python:\n\n```\ne*d == 1%etf\n```\n\n\nwe know (e) and (etf) and must discover (d) using the\nextended euclidean algorithm and the concept of \nmultiplicative inverse of modular arithmetic.\n\n```\nd = (1/e)%etf\n\nd = (e**-1)%etf\n```\n\n\ngenerate a global wrong number, please help me find\n(d) using the rules above explained.\n\nThe solution (Modular multiplicative inverse function in Python)\nillustrated below gives me wrong computational result\n\n```\ne*d == 1 (mod etf)\nd = (e**(etf-2)) % etf \nd = pow(e,etf-2,etf)\n```\n\n\nAm I making some mistake elsewhere? Is this calculation ok?\n    ", "Answer": "\r\nThe trick you list with ```\nd = (e**(etf-2)) % etf```\n will work only if etf is prime. If it's not, you have to use the EEA itself to find the modular multiplicative inverse.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Optimizing a Prime Number Factorization algorithm\r\n                \r\nThe following below is an algorithm that finds the prime factorization for a given number N.  I'm wondering if there are any ways to make this faster using HUGE numbers.  I'm talking like 20-35 digit numbers.  I wanna try and get these to go as fast as possible.  Any ideas?\n\n```\nimport time\n\ndef prime_factors(n):\n    \"\"\"Returns all the prime factors of a positive integer\"\"\"\n    factors = []\n    divisor = 2        \n    while n > 1:        \n        while n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor          \n        divisor = divisor + 1\n        if divisor*divisor > n:\n            if n > 1: \n                factors.append(n)\n            break\n    return factors\n\n#HUGE NUMBERS GO IN HERE!\nstart_time = time.time()\nmy_factors = prime_factors(15227063669158801)\nend_time = time.time()\nprint my_factors\nprint \"It took \", end_time-start_time, \" seconds.\"\n```\n\n    ", "Answer": "\r\nYour algorithm is trial division, which has time complexity O(sqrt(n)). You can improve your algorithm by using only 2 and the odd numbers as trial divisors, or even better by using only prime numbers as trial divisors, but the time complexity will remain O(sqrt(n)).\n\nTo go faster you need a better algorithm. Try this:\n\n```\ndef factor(n, c):\n    f = lambda(x): (x*x+c) % n\n    t, h, d = 2, 2, 1\n    while d == 1:\n        t = f(t); h = f(f(h)); d = gcd(t-h, n)\n    if d == n:\n        return factor(n, c+1)\n    return d\n```\n\n\nTo call it on your number, say\n\n```\nprint factor(15227063669158801, 1)\n```\n\n\nThat returns the (possibly composite) factor 2090327 virtually instantly. It uses an algorithm called the rho algorithm, invented by John Pollard in 1975. The rho algorithm has time complexity O(sqrt(sqrt(n))), so it's much faster than trial division.\n\nThere are many other algorithms for factoring integers. For numbers in the 20 to 35 digit range that interests you, the elliptic curve algorithm is well-suited. It should factor numbers of that size in no more than a few seconds. Another algorithm that is well-suited to such numbers, especially those that are semi-primes (have exactly two prime factors), is SQUFOF.\n\nIf you're interested in programming with prime numbers, I modestly recommend this essay on my blog. When you're finished with that, other entries on my blog talk about elliptic curve factorization, and SQUFOF, and various other even more-powerful methods of factoring ever-larger integers.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "When L1 misses are a lot different than L2 accesses... TLB related?\r\n                \r\nI have been running some benchmarks on some algorithms and profiling their memory usage and efficiency (L1/L2/TLB accesses and misses), and some of the results are quite intriguing for me. \n\nConsidering an inclusive cache hierarchy (L1 and L2 caches), shouldn't the number of L1 cache misses  coincide with the number of L2 cache accesses? One of the explanations I find would be TLB related: when a virtual address is not mapped in TLB, the system automatically skips searches in some cache levels. \nDoes this seem legitimate?\n    ", "Answer": "\r\nFirst, inclusive cache hierarchies may not be so common as you assume.  For example, I do not think any current Intel processors - not Nehalem, not Sandybridge, possibly Atoms - have an L1 that is included within the L2.  (Nehalem and probably Sandybridge do, however, have both L1 and L2 included within L3; using Intel's current terminology, FLC and MLC in LLC.)\n\nBut, this doesn't necessarily matter. In most cache hierarchies if you have an L1 cache miss, then that miss will probably be looked up in the L2.  Doesn't matter if it is inclusive or not. To do otherwise, you would have to have something that told you that the data you care about is (probably) not in the L2, you don't need to look.  Although I have designed protocols and memory types that do this - e.g. a memory type that cached only in the L1 but not the L2, useful for stuff like graphics where you get the benefits of combining in the L1, but where you are repeatedly scanning over a large array, so caching in the L2 not a good idea.  Bit I am not aware of anyone shipping them at the moment.\n\nAnyway, here are some reasons why the number of L1 cache misses may not be equal to the number of L2 cache accesses.\n\nYou don't say what systems you are working on - I know my answer is applicable to Intel x86s such as Nehalem and Sandybridge, whose EMON performance event monitoring allows you to count things such as L1 and L2 cache misses, etc. It will probably also apply to any modern microprocessor with hardware performance counters for cache misses, such as those on ARM and Power.\n\nMost modern microprocessors do not stop at the first cache miss, but keep going trying to do extra work. This is overall often called speculative execution.  Furthermore, the processor may be in-order or out-of-order, but although the latter may given you even greater differences between number of L1 misses and number of L2 accesses, it's not necessary - you can get this behavior even on in-order processors.\n\nShort answer: many of these speculative memory accesses will be to the same memory location.  They will be squashed and combined.\n\nThe performance event \"L1 cache misses\" is probably[*] counting the number of (speculative) instructions that missed the L1 cache. Which then allocate a hardware data structure, called at Intel a fill buffer, at some other places a miss status handling register. Subsequent cache misses that are to the same cache line will miss the L1 cache but hit the fill buffer, and will get squashed.  Only one of them, typically the first will get sent to the L2, and counted as an L2 access.)\n\nBy the way, there may be a performance event for this: Squashed_Cache_Misses.\n\nThere may also be a performance event L1_Cache_Misses_Retired. But this may undercount, since speculation may pull the data into the cache, and a cache miss at retirement may never occur. \n\n([*] By the way, when I say \"probably\" here I mean \"On the machines that I helped design\". Almost definitely.  I might have to check the definition, look at the RTL, but I would be immensely surprised if not.  It is almost guaranteed.)\n\nE.g. imagine that you are accessing bytes A[0], A[1], A[2], ... A[63], A[64], ...\n\nIf the address of A[0] is equal to zero modulo 64, then A[0]..A[63] will be in the same cache line, on a machine with 64 byte cache lines.  If the code that uses these is simple, it is quite possible that all of them can be issued speculatively. QED: 64 speculative memory access, 64 L1 cache misses, but only one L2 memory access.\n\n(By the way, don't expect the numbers to be quite so clean.  You might not get exactly 64 L1 accesses per L2 access.)\n\nSome more possibilities:\n\nIf the number of L2 accesses is greater than the number of L1 cache misses (I have almost never seen it, but it is possible) you may have a memory access pattern that is confusing a hardware prefetcher. The hardware prefetcher tries to predict which cache lines you are going to need.  If the prefetcher predicts badly, it may fetch cache lines that you don't actually need.  Oftentimes there is a performance evernt to count Prefetches_from_L2 or Prefetches_from_Memory.\n\nSome machines may cancel speculative accesses that have caused an L1 cache miss, before they are sent to the L2.  However, I don't know of Intel doing this.  \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "count number of 0 with floodfill algorithm\r\n                \r\nI wanted to count number of 0 and 1 from a 2d array with floodfill algorithm....But unfortunetly...it's showing the wrong result.\n\nI have a matrix like this\n\n```\n0,1,1,0,1\n\n1,0,1,1,0\n\n1,0,1,1,0\n\n1,0,1,1,0\n\n1,0,1,1,0\n```\n\n\nIt supposed to show number of 0 = 10 and 1 =15\n\nbut it showing number of 0 = 4 and 1 = 21\n\nhere is my code\n\n```\nint[][] input;\npublic static int[,] reult;\npublic static int count = 0,col,row;\npublic Form1()\n{\n    InitializeComponent();\n}\n\nprivate void button1_Click(object sender, EventArgs e)\n{\n    string path;\n    OpenFileDialog file = new OpenFileDialog();\n    if (file.ShowDialog() == DialogResult.OK)\n    {\n\n        input = File.ReadLines(file.FileName)\n                .Skip(0)\n                .Select(l => l.Split(',')\n                    .Select(n => int.Parse(n))\n                    .ToArray())\n                    .ToArray();\n\n    }\n\n    reult = JaggedToMultidimensional(input);\n\n    int p = reult.GetLength(0); \n    int q = reult.GetLength(1); \n    row = p-1;\n    col = q - 1;\n    int one = p * q;\n    int zero = apply(row, col);\n    label1.Text = \"\" + zero;\n    label2.Text = \"\" + (one - zero);\n\n}\n\npublic T[,] JaggedToMultidimensional<T>(T[][] jaggedArray)\n{\n    int rows = jaggedArray.Length;\n    int cols = jaggedArray.Max(subArray => subArray.Length);\n    T[,] array = new T[rows, cols];\n    for (int i = 0; i < rows; i++)\n    {\n        for (int j = 0; j < cols; j++)\n        {\n            array[i, j] = jaggedArray[i][j];\n        }\n    }\n    return array;\n}\n\nprivate static int apply(int x, int y)\n{\n    int currentColor = getValueAt(x, y);\n    if (currentColor == 0)\n    {\n        visit(x, y);\n        count++;\n\n        if (x < row) apply(x + 1, y);\n        if(y<col) apply(x, y + 1);\n       if(x>0) apply(x - 1, y);\n       if (y>0) apply(x, y - 1);\n    }\n    return count;\n}\n\nprivate static int getValueAt(int x, int y)\n{\n    if (x < 0 || y < 0 || x > row || y > col)\n    {\n        return -1;\n    }\n    else\n    {\n        return reult[x,y];\n    }\n}\n\nprivate static void visit(int x, int y)\n{\n    reult[x,y] = 1;\n}\n```\n\n    ", "Answer": "\r\n```\nint zero = apply(row, col);\n```\n\n\nIn your flood fill algorithm, you are only going in four direction and cover the area which match your criteria. And fortunately ```\n[row,col]```\n index has ```\n0```\n and it count all four 0 from ```\n[row, col]```\n. Now think what if ```\napply(row,col)```\n have ```\n1```\n on that ```\nrow, col```\n index.\n\nTo get this thing right, you need to loop through whole matrix and call ```\napply(i,j)```\n where ever you find an ```\narray[i,j]==0```\n\n\nChange this line \n\n```\nint zero = apply(row, col);\n```\n\n\nto \n\n```\nint zero = 0;\nfor(int i=0; i<=row; i++)\n{\n   for(int j=0; j<=col; j++)\n   {\n       if(array[i][j]==0)\n       {\n          count =0;\n          zero+= apply(row, col);\n       }\n   }\n}\n```\n\n\nHope this helps.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Recursive Algorithm to add consecutive numbers\r\n                \r\nI have the following algorithm that adds t consecutive numbers starting at s. \n\n```\nAddup (s,t)\n    Make result = s\n     For i from s to t-1\n          Result = Result + s + i\n    Return Result\n\nSo Addup (3,3) = 3+4+5 = 12 & Addup (4,5) = 4+5+6+7+8\n```\n\n\nHow can this be made recursive? \n\nQ\n    ", "Answer": "\r\nIn Python, for example:\n\n```\ndef Addup(s,t):\n    if t == 1:\n        return s\n    else:\n        return s + Addup(s+1, t-1)\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Reading and Writing Bits to Text Files in Java\r\n                \r\nI'm trying to implement some compression algorithms, and I need to deal with bits in Java.\n\nWhat I need to do is that when I write the value 1 then the value 2, those numbers are stored in the file as bits, so the file size will be 1 byte instead of 2, as 1 is stored in 1 bit and 2 is stored in 2 bits.\n\nIs it possible? Thanks very much\n    ", "Answer": "\r\nAll the I/O methods have a byte as the lowest granularity. You can write bits, but you have to pack them into bytes by yourself. Maybe a one-byte buffer that you write out to the file once it fills up would be appropriate.\n\nAlso note that there is no way to know the length of the file in bits (you do not know if the last byte was \"full\"). So your application needs to take care of that somehow.\n\nYou can also google for \"BitOutputStream\", of which there are a few, though not in libraries that are very common. Maybe just use one of those.\n\nFinally, the file you will be creating will not be a \"Text\" file, it will be very much binary (even more so than usual...)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Shortest Path algorithm in line follower robot (Maze solving)\r\n                \r\nHow graph algorithms can be used in line follower maze solving robot. I have solved grid using DFS search but do not know how to implement it actual line follower robot. my shortest path finding implements on a 20 by 20 grid . where s= start and g = destination and numbers denotes the position of each point inside the grid (row by row basis).\n    ", "Answer": "\r\n-If you are a beginner to microcontroller, then i would recommend you to first achieve in making your robot follow the line .\n\n-If robot performs well in line following then you should try it in making your robot pass the strips(junctions in the grid) and make your robot transverse complete grid(all co-ordinates of the grid), simultaneously you can make a count of number of strips the robot passed(you can use two dimensional array to store there co-ordinates).\n\n-If you can achieve the above two tasks then you are good to go for applying your logic in solving the maze inside the grid.  \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Python genetic algorithm for binary number\r\n                \r\nI'm asked to make a genetic algorithm with the goal to determine an 8 bit string with the the most 1's and 0's. The eval function should return the number of changes plus 1. So for example 00000000 returns 1, 00011100 returns 3, and 01100101 returns 6. This is what I have:\n\n```\ndef random_population():\n    from random import choice\n\n    pop = ''.join(choice(('0','1')) for _ in range(8))\n    return pop   \n\ndef mutate(dna):   \n    \"\"\"   For each gene in the DNA, there is a 1/mutation_chance chance \n    that it will be   switched out with a random character. This ensures \n    diversity in the   population, and ensures that is difficult to get stuck in \n    local minima.   \"\"\"   \n    dna_out = \"\"   \n    mutation_chance = 100   \n    for c in xrange(DNA_SIZE):\n        if int(random.random()*mutation_chance) == 1:\n            dna_out += random_char()\n        else:\n            dna_out += dna[c]   return dna_out\n\ndef crossover(dna1, dna2):   \n    \"\"\"   Slices both dna1 and dna2 into two parts at a random index within their   \n    length and merges them. Both keep their initial sublist up to the crossover   \n    index, but their ends are swapped.   \"\"\"   \n    pos = int(random.random()*DNA_SIZE)\n    return (dna1[:pos]+dna2[pos:], dna2[:pos]+dna1[pos:])\n\ndef eval(dna):\n    changes = 0\n    for index, bit in enumerate(dna):\n        if(index == 0):\n            prev = bit\n        else:\n            if(bit != prev):\n                changes += 1\n        prev = bit\n    return changes+1\n\n\n#============== End Functions =======================#\n\n\n#============== Main ================# changes = 0\n\nprev = 0\ndna = random_population()\nprint \"dna: \"\nprint dna\nprint eval(dna)\n```\n\n\nI am having trouble actually figuring out the genetic algorithm part (cross over / mutation). I should randomly pair the numbers and then randomly select a pair leaving one pair untouched and then cross over at a random point. Then it will end by randomly mutating one bit out of the entire population. The current code for crossover and mutate was just taken from a genetic algorithm example I found and was trying to understand. Any fhelp is welcome.\n    ", "Answer": "\r\nPart of what I would suggest:\n\nThe code is not working but maybe it transports information.\n\n```\n# a population consists of many individuals\ndef random_population(population_size = 10):\n    from random import choice\n\n    pop = [''.join(choice(('0','1')) for _ in range(8)) for i in range(population_size)]\n    return pop   \n\n# you need a fitness function\ndef fitness(individual):\n    return # a value from 0 up\n\ndef algorithm():\n    # a simple algorithm somehow alike\n    # create population\n    population = random_population()\n    # this loop must stop after some rounds because the best result may never be reached\n    while goal_not_reached(population) and not time_is_up():\n        # create the roulette wheel\n        roulette_wheel = map(fitness, population)\n        # highest value of roulette wheel\n        max_value = sum(roulette_wheel)\n        # the new generation\n        new_population = []\n        for i in range(len(population) - len(new_population)):\n             # create children from the population\n                 # choose 2 random values from 0 to max_value and find the individuals\n                 # for it in the roulette wheel, combine them to new individuals \n             new_population.append(new_individual)\n        # mutate the population\n        population = map(mutate, new_population)             # a new generation is created\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "javascript algorithm converting to roman numbers\r\n                \r\nThe following algorithm is to convert ordinal numbers into Roman numbers. It works for most of numbers, but for some of them still has problems. For example, the numbers 500 or 1000 dont work, and I dont know why. I know I am missing something; any help?\n\nThe code is:\n\n```\nfunction convertToRoman(num) {\n  //TABLE OF EQUIVALENCES\n  var arrConv=[{1:'I'},{2:'II'},{3:'III'},{4:'IV'},{5:'V'},{6:'VI'},{7:'VII'},{8:'VIII'},{9:'IX'},{10:'X'},{20:'XX'},{30:'XXX'},{40:'XL'},{50:'L'},{60:'LX'},{70:'LXX'},{80:'LXXX'},{90:'XC'},{100:'C'},{200:'CC'},{300:'CCC'},{400:'CD'},{500:'D'},{600:'DC'},{700:'DCC'},{800:'DCCC'},{900:'CM'},{1000:'M'},{2000:'MM'},{3000:'MMM'},{4000:'MMMM'},{5000:'MMMMM'},{6000:'MMMMMM'},{7000:'MMMMMMM'},{8000:'MMMMMMMM'},{9000:'MMMMMMMMM'}];\n\n  //First we break down the number into its units\n  //and create an array ex: 652 ==> [600, 50, 2]\n  var arr=[num.length];\n  arr=num.toString().split(\"\").reverse();\n  var i=1;\n  for (var k=0;k<arr.length;k++){\n    arr.splice(k,1,arr[k]*i);\n    i*=10;\n  }\n\n  //We make an array of objects with the number and the roman number equivalence\n var romansArray=[];\n  for (i=0;i<arr.length;i++){\n    var val=arrConv.filter(function(obj){\n       return obj[arr[i]];\n     })[0];\n    romansArray.push(val);\n  }\n\n  //I get rid of all the null values\n  var result=romansArray.filter(function(val){\n    return (val!=null);\n  });\n\n  //It returns the string with the roman number\n  return result.map(function(value,key){\n    return result[key][arr[key]];\n  }).reverse().join(\"\");\n\n}\n```\n\n    ", "Answer": "\r\nYou could change a bit\n\n\nAn object instead of an array of objects.\nThe access of the values.\nA default value for not known parts.\nThen you can omit the filtering for ```\nnull```\n values.\n\n\n\r\n\r\n```\nfunction convertToRoman(num) {\r\n    var arrConv = { 1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX', 10: 'X', 20: 'XX', 30: 'XXX', 40: 'XL', 50: 'L', 60: 'LX', 70: 'LXX', 80: 'LXXX', 90: 'XC', 100: 'C', 200: 'CC', 300: 'CCC', 400: 'CD', 500: 'D', 600: 'DC', 700: 'DCC', 800: 'DCCC', 900: 'CM', 1000: 'M', 2000: 'MM', 3000: 'MMM', 4000: 'MMMM', 5000: 'MMMMM', 6000: 'MMMMMM', 7000: 'MMMMMMM', 8000: 'MMMMMMMM', 9000: 'MMMMMMMMM' };\r\n\r\n    var arr = num.toString().split(\"\").reverse(),\r\n        i = 1, k;\r\n    for (k = 0; k < arr.length; k++) {\r\n        arr.splice(k, 1, arr[k] * i);\r\n        i *= 10;\r\n    }\r\n\r\n    var romansArray = [];\r\n    for (i = 0; i < arr.length; i++) {\r\n        romansArray.push(arrConv[arr[i]]||'');\r\n    }\r\n\r\n    //It returns the string with the roman number\r\n    return romansArray.reverse().join(\"\");\r\n}\r\n\r\nconsole.log(convertToRoman(1000));```\n\r\n\r\n\r\n\n\nYou could shorten it a bit more with a diffrent object for look up and for building of ```\narr```\n and ```\nromansArray```\n.\n\n\r\n\r\n```\nfunction convertToRoman(num) {\r\n    var arrConv = {\r\n            0: { 1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX' },\r\n            1: { 1: 'X', 2: 'XX', 3: 'XXX', 4: 'XL', 5: 'L', 6: 'LX', 7: 'LXX', 8: 'LXXX', 9: 'XC' },\r\n            2: { 1: 'C', 2: 'CC', 3: 'CCC', 4: 'CD', 5: 'D', 6: 'DC', 7: 'DCC', 8: 'DCCC', 9: 'CM' },\r\n            3: { 1: 'M', 2: 'MM', 3: 'MMM', 4: 'MMMM', 5: 'MMMMM', 6: 'MMMMMM', 7: 'MMMMMMM', 8: 'MMMMMMMM', 9: 'MMMMMMMMM' }\r\n        },\r\n        arr = num.toString().split(\"\").reverse(),\r\n        romansArray = arr.map(function (a, i) {\r\n            return arrConv[i][a] || '';\r\n        });\r\n\r\n    return romansArray.reverse().join(\"\");\r\n}\r\n\r\nconsole.log(convertToRoman(1234));```\n\r\n\r\n\r\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Backtracking algorithm that finds solutions for sudoku\r\n                \r\nI'm studying the theory of algorithms and their possible resolutions methods.In this case I have some problems with backtracking. I want to write a function that fill a sudoku. But it doesn't print anything. Where is the error?\nThe function defsett(i,j) take as input two numbers that are the coordinates of the number selected and set two integer (w and o) that are the starting points of the section 3x3 of the input number.\nInstead the sudoku function recursively tries to fill the matrix with the rules of sudoku.\n\n```\n# defsett = returns the coordinates of the first cell of the section 3x3 \n# where is the cell [i,j]\ndef defsett(i,j):\n    if(0<=i<=2):\n        if(0<=j<=2):\n            return (0,0)\n        elif(3<=j<=5):\n            return (0,3)\n        elif(6<=j<=8):\n            return (0,6)\n    elif(3<=i<=5):\n        if(0<=j<=2):\n            return (3,0)\n        elif(3<=j<=5):\n            return (3,3)\n        elif(6<=j<=8):\n            return (3,6)\n    else:\n        if(0<=j<=2):\n            return (6,0)\n        elif(3<=j<=5):\n            return (6,3)\n        elif(6<=j<=8):\n            return (6,6)\nM = [[5,3,0,0,7,0,0,0,0],\n     [6,0,0,1,9,5,0,0,0],\n     [0,9,8,0,0,0,0,6,0],\n     [8,0,0,0,6,0,0,0,3],\n     [4,0,0,8,0,3,0,0,1],\n     [7,0,0,0,2,0,0,0,6],\n     [0,6,0,0,0,0,2,8,0],\n     [0,0,0,4,1,9,0,0,5],\n     [0,0,0,0,8,0,0,7,9]]\n\n# n = matrix side\n# i = index of rows\n# j = index of cols\n\ndef sudoku(n,i,j,M):\n        if(i==n):\n            print(M)\n        elif(j==n):\n            j=0\n            i=i+1\n            sudoku(n,i,j,M)\n        else:\n            if(M[i][j]==0):\n                for number in range(1,n+1):\n\n                    xInRows = False\n                    xInCols = False\n                    xInSection = False\n\n   # checking if number already present in this row \n                    for k in range(n): \n                        if (number == M[i][k]):\n                            xInRows = True\n\n   # checking if number already present in this cols \n                    for k in range(n):\n                        if(number == M[k][j]):\n                            xInCols = True\n\n                    w,o=defsett(i,j) # first cell of this section\n\n   # checking if number already present in this section 3x3\n                    for t in range(w,w+3):\n                        for b in range(o,o+3):\n                            if(number == M[t][b]):\n                                xInSection = True\n\n                    if(not(xInRows) and not(xInCols) and not(xInSection)):\n                        M[i][j] = x\n                        sudoku(n,i,j+1,M)\n            else:\n                sudoku(n,i,j+1,M)\nsudoku(9,0,0,M)\n-----\nFor this input works:\nM = [[5,3,0,0,7,0,0,0,0],\n     [6,0,0,1,9,5,0,4,8],\n     [1,9,8,3,4,2,5,6,7],\n     [8,5,9,7,6,1,4,2,3],\n     [4,2,6,8,5,3,7,9,1],\n     [7,1,3,9,2,4,8,5,6],\n     [9,6,1,5,3,7,2,8,4],\n     [2,8,7,4,1,9,6,3,5],\n     [3,4,5,0,8,6,1,7,9]]\nFor this doesn't:\nM = [[5,3,0,0,7,0,0,0,0],\n     [6,0,0,1,9,5,0,0,8],\n     [1,9,8,3,4,2,5,6,7],\n     [8,5,9,7,6,1,4,2,3],\n     [4,2,6,8,5,3,7,9,1],\n     [7,1,3,9,2,4,8,5,6],\n     [9,6,1,5,3,7,2,8,4],\n     [2,8,7,4,1,9,6,3,5],\n     [3,4,5,0,8,6,1,7,9]]\n```\n\n    ", "Answer": "\r\nThe reason as to why nothing is printed is simple: ```\nsudoku()```\n failed to progress far enough that ```\ni == 9```\n ever yields ```\nTrue```\n. So lets analyse how that can happen...\n\n\n```\ni == 9```\n ⇒ exit with solution\n```\ni != 9 and j == 9```\n ⇒ recursion with next row; ```\nsudoku(9, i+1, 0, M)```\n\n```\ni != 9 and j != 9```\n\n\n\n```\nM[i][j] != 0```\n ⇒ recursion with next column ```\nsudoku(9, i, j+1, M)```\n\n```\nM[i][j] == 0```\n ⇒ try to fit in a number\n\n\nfound candidate ```\nnumber```\n ⇒ set ```\nM[i][j] = number```\n (not ```\nM[i][j] = x```\n) and go into recursion with next column ```\nsudoku(9, i, j+1, M)```\n\n\n\n\n\nAnd that's the entire decision making process. This is ```\nM```\n once ```\nsudoku()```\n exits:\n\n```\n[[5, 3, 2, 6, 7, 8, 9, 4, 0],\n [6, 0, 0, 1, 9, 5, 0, 0, 8],\n [1, 9, 8, 3, 4, 2, 5, 6, 7],\n [8, 5, 9, 7, 6, 1, 4, 2, 3],\n [4, 2, 6, 8, 5, 3, 7, 9, 1],\n [7, 1, 3, 9, 2, 4, 8, 5, 6],\n [9, 6, 1, 5, 3, 7, 2, 8, 4],\n [2, 8, 7, 4, 1, 9, 6, 3, 5],\n [3, 4, 5, 0, 8, 6, 1, 7, 9]]\n```\n\n\nIn order to understand what went wrong, imagine you're calling ```\nsudoku(9, 0, 8, M)```\n after 4 was placed in the eighth column...\n\n1 is the only number not yet placed in this row, but it is forbidden here, because it occures already in the fifth row (```\nM[4][8]```\n). ```\nsudoku(9, 0, 8, M)```\n quits, since there are no other numbers to try. From here control moves up in the call stack, because noone is able to place 1 anywhere else. Why is 1 so important? Because all other numbers have been put somewhere in this row already and that is not changed while ```\nsudko()```\n backtracks!\n\nThe fix is simple: Add a line after the recursion step where you had filled in a number, that undoes the change for proper backtracking.\n\n```\n(...)\n                    if(not(xInRows) and not(xInCols) and not(xInSection)):\n                        M[i][j] = x\n                        sudoku(n,i,j+1,M)\n                        M[i][j] = 0\n(...)\n```\n\n\nThat alone will make ```\nsudoku()```\n finish for the given ```\nM```\n. I won't guarantee that it will find a solution for any ```\nM```\n though. ;-)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to find k smallest numbers in array of n items\r\n                \r\nI'm trying to write an algorithm which can print the k smallest numbers in an n-size-array in O(n) time, but I cannot reduce the time complexity to n. How can I do this?\n    ", "Answer": "\r\nI've done this in an interview before, and one of the most elegant/efficient ways to do this is\n\n```\nO(n log k). \nwith space: O(k) (thanks, @Nzbuu)\n```\n\n\nBasically you're going to use a max-heap of size limited to k. For each item in the array, check to see if it's smaller than the max (only O(1)). If it is, remove the max and put that in the heap (O(log k)). If its bigger, go to the next item.\n\nOf course, the heap doesn't yield a sorted list of k items, but that can be done in O(k log k) which is easy.\n\nSimilarly, you can do the same for finding the largest k items, in which case you would use a min-heap.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "C++ algorithm to calculate least common multiple for multiple numbers\r\n                \r\nIs there a C++ algorithm to calculate the least common multiple for multiple numbers, like ```\nlcm(3,6,12)```\n or ```\nlcm(5,7,9,12)```\n?\n    ", "Answer": "\r\nYou can use std::accumulate and some helper functions:\n\n```\n#include <iostream>\n#include <numeric>\n\nint gcd(int a, int b)\n{\n    for (;;)\n    {\n        if (a == 0) return b;\n        b %= a;\n        if (b == 0) return a;\n        a %= b;\n    }\n}\n\nint lcm(int a, int b)\n{\n    int temp = gcd(a, b);\n\n    return temp ? (a / temp * b) : 0;\n}\n\nint main()\n{\n    int arr[] = { 5, 7, 9, 12 };\n\n    int result = std::accumulate(arr, arr + 4, 1, lcm);\n\n    std::cout << result << '\\n';\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "sorting algorithm where pairwise-comparison can return more information than -1, 0, +1\r\n                \r\nMost sort algorithms rely on a pairwise-comparison the determines whether A < B, A = B or A > B.\n\nI'm looking for algorithms (and for bonus points, code in Python) that take advantage of a pairwise-comparison function that can distinguish a lot less from a little less or a lot more from a little more. So perhaps instead of returning {-1, 0, 1} the comparison function returns {-2, -1, 0, 1, 2} or {-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5} or even a real number on the interval (-1, 1).\n\nFor some applications (such as near sorting or approximate sorting) this would enable a reasonable sort to be determined with less comparisons.\n    ", "Answer": "\r\nThe extra information can indeed be used to minimize the total number of comparisons.  Calls to the super_comparison function can be used to make deductions equivalent to a great number of calls to a regular comparsion function.   For example, ```\na much-less-than b```\n and ```\nc little-less-than b```\n implies ```\na < c < b```\n.\nThe deductions cans be organized into bins or partitions which can each be sorted separately.  Effectively, this is equivalent to QuickSort with n-way partition.  Here's an implementation in Python:\n```\nfrom collections import defaultdict\nfrom random import choice\n\ndef quicksort(seq, compare):\n    'Stable in-place sort using a 3-or-more-way comparison function'\n    # Make an n-way partition on a random pivot value\n    segments = defaultdict(list)\n    pivot = choice(seq)\n    for x in seq:\n        ranking = 0 if x is pivot else compare(x, pivot)\n        segments[ranking].append(x)\n    seq.clear()\n\n    # Recursively sort each segment and store it in the sequence\n    for ranking, segment in sorted(segments.items()):\n        if ranking and len(segment) > 1:\n            quicksort(segment, compare)\n        seq += segment\n\nif __name__ == '__main__':\n    from random import randrange\n    from math import log10\n\n    def super_compare(a, b):\n        'Compare with extra logarithmic near/far information'\n        c = -1 if a < b else 1 if a > b else 0\n        return c * (int(log10(max(abs(a - b), 1.0))) + 1)\n\n    n = 10000\n    data = [randrange(4*n) for i in range(n)]\n    goal = sorted(data)\n    quicksort(data, super_compare)\n    print(data == goal)\n```\n\nBy instrumenting this code with the trace module, it is possible to measure the performance gain.  In the above code, a regular three-way compare uses 133,000 comparisons while a super comparison function reduces the number of calls to 85,000.\nThe code also makes it easy to experiment with a variety comparison functions.  This will show that naïve n-way comparison functions do very little to help the sort.  For example, if the comparison function returns +/-2 for differences greater than four and +/-1 for differences four or less, there is only a modest 5% reduction in the number of comparisons.  The root cause is that the course grained partitions used in the beginning only have a handful of \"near matches\" and everything else falls in \"far matches\".\nAn improvement to the super comparison is to covers logarithmic ranges (i.e. +/-1 if within ten, +/-2 if within a hundred, +/- if within a thousand.\nAn ideal comparison function would be adaptive.  For any given sequence size, the comparison function should strive to subdivide the sequence into partitions of roughly equal size.  Information theory tells us that this will maximize the number of bits of information per comparison.\nThe adaptive approach makes good intuitive sense as well.  People should first be partitioned into love vs like before making more refined distinctions such as love-a-lot vs love-a-little.  Further partitioning passes should each make finer and finer distinctions.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Match schedule algorithm, each team play specific number of matches\r\n                \r\nI have a specific number of teams. I want every team to play exactly 4 matches with 4 different opponents at 4 specified times.\n\nThe complication arises from that no team can play 2 different matches at the same time.\nFor example if team 1 is playing like this\n\n\nteam1 vs team2, team1 vs team3, team1 vs team4, team1 vs team5\n\n\nthen team2 already has the first time slot occupied so team2 can play like this\n\n\n(team2 vs team1), team2 vs team3, team2 vs team4, team2 vs team5\n\n\nBut here the problem arises, team3 will play in the second time slot with team1 and team2 and this can not be done.\n\nI do not know what this algorithm can be called, but I am searching for algorithm to implement this.\n\nI made a search to find round-robin and other tournament like matching algorithm and also the marriage problem, but I think my problem is different. Please correct me if I am wrong.\n\nAny help is greatly appreciated.\n    ", "Answer": "\r\nI have concluded there is no solution if the number of teams is odd. Let N be the number of teams. We need a total of ```\nN*4/2```\n matches, four matches per team but each match counts for two teams. To do ```\nN*2```\n matches in four time slots we must average ```\nN/2```\n matches per slot. We can do at most ```\nfloor(N/2)```\n matches at a time. If N is odd, ```\nfloor(N/2) < N/2```\n.\n\nWould a solution that only works for even N, if it exists, be useful?\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How to convert a float number to a binary string and vice versa with Ruby?\r\n                \r\nI would like to know the best way to convert a float number to binary string and vice versa a binary string to float number.\n\nI'm working with genetics algorithms and I need to save the binary representation of a float number in the range [0-1], so additionally I need to know the number of bits that Ruby uses to save a float number in memory.\n\nI'm trying to solve this problem with String#Unpack method but I get a strange result:\n\n```\nbinary_string_number = \"0\" * 32\n=> \"00000000000000000000000000000000\" \nbinary_string_number.unpack(\"F\")\n=> [6.409690556097303e-10]\n```\n\n\nThe result should be 0.0 right?, I don't understand this behavior. \n\nThank you!\n    ", "Answer": "\r\nI think you need to pack your String before you try to unpack it to a Float.  What you've got is basically a String representing a series of bits, but not the actual bits you're trying to read (if I'm understanding your question correctly).\n\n```\n[\"0\" * 32].pack(\"b*\")                        # => \"\\x00\"\n[\"0\" * 32].pack(\"b*\").unpack(\"F\")            # => \"\\x00\".unpack(\"F\") => 0.0\n[\"11\".rjust(32, \"0\")].pack(\"b*\").unpack(\"F\") # => -2.0\n```\n\n\nI'm not much of an expert in this stuff, however.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Calculating the time complexity of nested loop\r\n                \r\nI'm practising with time complexity of algorithms and I came across the below code which confused me. Generally, I'm able to tell the complexity of an algorithm by looking at the number of loops, but the below code decays that hypothesis because there are two loops which I would normally assume the complexity is O(N^2) but in the second loop the N is squared. Which brings me to the conclusion that the complexity is O(N) * O(N^2) = O(N^3). Am I doing something wrong here?\n\n```\nfor (int i = 0; i*i < N; i++)\n   for (int j = 0; j*j < N*N; j++)\n```\n\n    ", "Answer": "\r\nThis has time complexity O(n sqrt(n)) = O(n^(3/2)).\n\n\nThe outer loop requires O(sqrt(n)) time. It finishes after ~sqrt(n) iterations since i grows as its square, whereas N only grows linearly.\n\n\nFor example, consider N = 100; i^2 takes on the values 1, 4, 9, 16, ..., 100, which is sqrt(N) distinct values. So this is O(sqrt(n)).\n\n\nThe inner loop requires O(n) time -- taking the square root of both ```\nj```\n and ```\nN```\n at each step should make it clear that this is a linear loop.\n\n\nFor example, consider N = 10; j^2 takes on the values 1, 4, 9, 16, ..., 100, which is N distinct values. So this is O(n).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "calculating the Strahler number (minimum # of registers) needed to evaluate an expression\r\n                \r\nIf I have an arbitrary expression consisting of primitive operations on registers, is there an easy way to calculate the Strahler number (minimum # of registers which must be allocated) for that calculation?\n\ne.g. f(a,b,c,d) = a*b + c*d - a*c - b*d\n\nI know how to do it by hand, but I'm trying to get a sense of how register allocation requirements correspond to particular sets of algorithms, and it would help to have a quick tool for calculating these numbers.\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for Adding/Subtracting numbers to find if number can be made?\r\n                \r\nI was wondering if there is an efficient premade algorithm for determining if the sum/difference of a group of numbers can equal a different number. Example:\n\n5, 8, 10, 2, using + or -, to equal 9. \n5 - 8 = -3 + 10 = 7 + 2 = 9\n\nIf there is a preexisting algorithm, what is it called. If not, I can figure out how to program it, though it may not be efficient.\n\nThank you!\n    ", "Answer": "\r\nYeah, this is basically knapsack problem, but it can be computed in pseudopolynomial time using dynamic programming.\n\nI did it few month ago, so maybe this java code can help you, if you want to implement it :\n\n```\npublic void solve() {\n    while (this.isEnd() == false) {\n        int priceSum = this.getItemsInstance().getTotalPrice()/divide;\n        int numOfItems = this.getItemsInstance().itemCount();\n        int maxWeight = this.getItemsInstance().getMaxWeight();\n\n        int[][] array = new int[numOfItems + 1][priceSum + 1];\n        boolean[][] arrayCounted = new boolean[numOfItems + 1][priceSum + 1];\n\n        for (int i = 0; i < numOfItems + 1; i++) {\n            array[i][0] = 0;\n            arrayCounted[i][0] = true;\n        }\n\n        int max = 0;\n        int price = 0;\n        for (int j = 1; j < priceSum + 1; j++) {\n            for (int i = 1; i < numOfItems + 1; i++) {\n                int temp = W(i, j, array, arrayCounted);\n                if (temp <= maxWeight) {\n                    max = temp;\n                    price = j;\n                }\n            }\n        }\n    }\n}\n\nprivate int W(int i, int c, int[][] array, boolean[][] arrayCounted) {\n    if (c < 0) {\n        return MAX_PRICE / divide;\n    }\n    if (i == 0) {\n        if (c == 0) {\n            return 0;\n        } else {\n            return MAX_PRICE / divide;\n        }\n    }\n\n    if (arrayCounted[i][c]) {\n        return array[i][c];\n    }\n\n    arrayCounted[i][c] = true;\n    array[i][c] = Math.min(W(i - 1, c, array, arrayCounted), W(i - 1, c - this.items[i - 1].price/divide, array, arrayCounted) + this.items[i - 1].weight);\n    return array[i][c];\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Prime Numbers Implementation\r\n                \r\nI started to learn algorithms and C++,and I thought to write a program which will check prime numbers.I know it's awful code,and I'm going to improve that,but firstly i need to know the problem.\n\nSo let's check for example number=25.When i=5,25%5=0,so why it gives me 'Yes'?\n\n```\n#include <iostream>\nusing namespace std;\nint main()\n{\nint number;\ncin >> number;\nif (number < 2) {\n    cout << \"No\";\n}\nelse if (number == 2) {\n    cout << \"Yes\";\n}\nelse {\n    for (int i = 2; i<number; i++) {\n        if ((number % i) != 0) {\n            cout << \"Yes\";\n        }\n    }\n}\n\nreturn 0;\n}\n```\n\n\n======================================================================\n\n```\n#include <iostream>\nusing namespace std;\nint main()\n{\nint number;\ncin >> number;\nif (number < 2) {\n    cout << \"No\";\n}\nelse if (number == 2) {\n    cout << \"Yes\";\n}\n    for (int i = 2; ((i < number) && (number%i==0)); i++) {\n        cout << \"No\";\n    }\nreturn 0;\n}\n```\n\n\nAlso I tried something like this above(but I'm not sure about this),but the problem with odd numbers with few dividers is still the same.\n    ", "Answer": "\r\nLet's step through the following code in detail, assuming that ```\nnumber == 25```\n:\n\n```\nfor (int i = 2; i<number; i++) {\n    if ((number % i) != 0) {\n        cout << \"Yes\";\n    }\n}\n```\n\n\n\n\nIn the first run of the loop, we have ```\nnumber == 25```\n and ```\ni == 2```\n.\n\n```\nif ((number % i) != 0) {\n    cout << \"Yes\";\n}\n```\n\n\nEvaluating ```\nnumber % i```\n yields ```\n25 % 2```\n, which is ```\n1```\n. ```\n1```\n is not equal to ```\n0```\n, so the body of the ```\nif```\n-statement is executed, and prints ```\n\"Yes\"```\n to that standard output.\n\n\n\nClearly, there are many numbers that don't evenly divide ```\n25```\n. To test whether ```\n25```\n is prime, we need to test that none of the numbers evenly divide ```\n25```\n.\n\nHere's one way you could do this:\n\n```\nfor (int i = 2; i<number; i++) {\n    // if `i` evenly divides `number`,\n    if ((number % i) == 0) {\n        // it is certainly not prime\n        cout << \"No\";\n        // stop searching and return\n        return 0;\n    }\n}\n// Otherwise, if this point is reached, nothing divides `number`\n// Thus, `number` must be prime\ncout << \"Yes\";\n```\n\n\n\n\nWith any good C++ compiler, you should be able to debug your program interactively, and step through the code line-by-line, watching values change, and seeing where your intuition and your code don't match. Debugging is a very valuable part of programming. How exactly it's done varies with your compiler, but if you simply google \"how to debug C++ using [my compiler]\", I expect you'll find many helpful resources.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "How can I choose 5 of my Twitter friends in a way that maximizes the number of distinct followers they have?\r\n                \r\nAssuming that I have an array of twitter users and their followers, and I want to identify 5 users who have the most number of unqiue followers such that if I ask them to retweet an advertisement for my product, it would reach the most number of users.\n\nI do not have formal programming or computer science training. However I do understand algorithms and basic CS concepts. It would be great if a solution can be provided in a way a layman could follow.\n    ", "Answer": "\r\nThis is the \"Maximum coverage problem\", which is a class of problems thought to be difficult to solve efficiently (so-called NP-hard problems). You can read about the problem on wikipedia: https://en.wikipedia.org/wiki/Maximum_coverage_problem\n\nA simple algorithm to solve it is to enumerate all subsets of size 5 of your friends, and measure the size of union of their followers. It is not an efficient solution, since if you've got n friends, then there's around n^5 subsets of size 5 (assuming n is large).\n\nIf you wanted a solution that's feasible to code and may be reasonably efficient in real-world cases, you might look at representing the problem as an \"integer linear program\" (ILP) and use a solver such as GLPK. The details of how to represent max-coverage as an ILP is given on the wikipedia page. Getting it working will require some effort though, and may still not work well if your problem is large.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Java Execution Run Time of Bubble vs Selection Sort\r\n                \r\nI am a novice programmer and am currently on break so I am just trying to polish up on my skills before I start school again. I have written some code that will create an array of 100 elements and populate all 100 indexes with a random number between 0 and 250.\n\nI have written code to sort this array using bubble sorting algorithm and also selection sorting algorithm (I plan to do all known array sorting algorithms and compare execution times.) I have notice that my run time for selection sorting is MUCH faster than bubble sort.\n\nExample run: Bubble sort time: 7.45 ms ------ Selection sort time: 0.15 ms\n\nSo my question is.. Have I messed something up or are these results normal?\n\nHere is my code:\n\n```\nimport java.util.*;\n\npublic class Bubble {\n\n        private static int[] myArray;\n        private static int[] myBubbleArray;\n        private static int[] mySelectionArray;\n\n\npublic static void main(String args[]){\n\n    createList();\n    fillArray();\n    print(\"Original Array: \", myArray);\n    long selectionStartTime = System.nanoTime();\n    selectionSortArray(mySelectionArray);\n    double selectionElapsedTime = (System.nanoTime() - selectionStartTime) / 1000000.0;     \n    print(\"Selection Sorted Array: \", mySelectionArray);\n    System.out.printf(\"Total execution time for selection sort is %.2f ms\\n\", selectionElapsedTime);\n    long bubbleStartTime = System.nanoTime();\n    bubbleSortArray(myBubbleArray);\n    double bubbleElapsedTime = (System.nanoTime() - bubbleStartTime) / 1000000.0;\n    print(\"Bubble Sorted Array: \", myBubbleArray);\n    System.out.printf(\"Total execution time for bubble sort is %.2f ms\\n\", bubbleElapsedTime);\n}\n\nprivate static int[] selectionSortArray(int[] array) {\n    int first;\n    int temp;\n    for(int i=array.length -1; i > 0; i--){\n        first = 0;\n        for(int j = 1; j <= i; j++){\n            if(array[j] > array[first]) first = j;\n        }\n        temp = array[first];\n        array[first] = array[i];\n        array[i] = temp;\n    }\n    return mySelectionArray;\n}\n\nprivate static int[] bubbleSortArray(int[] array) {\n    boolean swapped = true;\n    int temp;\n    while(swapped){\n        swapped = false;\n        for(int i = 0; i < array.length-1; i ++){\n            for(int j = 1; j < array.length - i; j++){\n                if(array[i] > array[i+1]){\n                    temp = array[i];\n                    array[i] = array[i+1];\n                    array[i+1] = temp;\n                    swapped = true;\n                }\n            }\n        }\n    }\n    return myBubbleArray;\n}\n\npublic static int[] createList(){\n    myArray = new int[100];\n    return myArray;\n}\n\npublic static void print(String n, int[] array){\n    System.out.print(n);\n    for(int i = 0; i < array.length; i ++){\n        System.out.print(array[i]+ \" \");\n    }\n    System.out.println();\n}\n\npublic static void fillArray(){\n    for(int i = 0; i < myArray.length-1; i ++){\n        Random rand = new Random();\n        myArray[i] = rand.nextInt(250);\n    }\n    myBubbleArray = Arrays.copyOf(myArray, myArray.length);\n    mySelectionArray = Arrays.copyOf(myArray, myArray.length);\n}\n}\n```\n\n    ", "Answer": "\r\nFor an in-depth answer, go here. The summary is specifically, Bubble sort requires, on average, n/4 swaps per entry (each entry is moved element-wise from its initial position to its final position, and each swap involves two entries), while Selection sort requires only 1 (once the minimum/maximum has been found, it is swapped once to the end of the array).\n\nIn terms of the number of comparisons, Bubble sort requires k×n comparisons, where k is the maximum distance between an entry's initial position and its final position, which is usually larger than n/2 for uniformly distributed initial values. Selection sort, however, always requires (n−1)×(n−2)/2 comparisons.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "I can't figure out a sum and numbers solution\r\n                \r\nI am not that skilled or advanced in C++ and I have trouble solving a problem.\nI know how to do it mathematically but I can't write the source code, my algorithm is wrong and messy.\n\nSo, the problem is that I have to write a code that reads a number ( n ) from the keyboard and then it has to find a sum that is equal to n squared ( n ^ 2 ) and the number of sum's elements has to be equal to n.\nFor example 3^2 = 9, 3^2 = 2 + 3 + 4, 3 elements and 3^2 is 9 = 2 + 3 + 4.\nI had several attempts but none of them were successful.\nI know I'm borderline stupid but at least I tried.\n\nIf anyone has the time to look over this problem and is willing to help me I'd be very thankful.\n\n1\n\n```\n#include <iostream>\n#include <list>\n#include <algorithm>\n\nusing namespace std;\n\nint main()\n{\n\n  //1,3,5,7,9,11,13,15,17,19,21,23,25,27..\n\n  int n;\n  list<int> l;\n\n  cin >> n;\n\n  if ( n % 2 == 0 ){\n      cout << \"Wrong.\" << endl;\n  }\n\n  for ( int i = 1; i <= 99;i+=2){\n      l.push_back(i);\n  }\n\n  //List is full with 1,3,5,7,9,11,13,15,17,19,21,23,25,27..\n\n  list<int>::iterator it = find(begin(l),end(l), n);\n\n}\n```\n\n\n2\n\n```\n#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n// 3^2 = 2 + 3 + 4\n// 7^2 = 4 + 5 + 6 + 7 + 8 + 9 + 10\n\nint n;\n\nint numbers[100];\n\nfor (int i = 0; i <= 100; i++){\n    numbers[i] = i;\n}\n\ncin >> n;\n\nint requiredSum;\n\nrequiredSum = n * n;\n\n//while(sum < requiredSum){\n//    for(int i = 1; i < requiredSum; i++){\n//        sum += i;\n//        sumnums.push_back(sum);\n//    }\n//}\n\nint sum = 0;\n\nstd::vector<int> sumnums;\n\nwhile(sum < requiredSum){\n    for(int i = 1; i < requiredSum; i++){\n        sum += i;\n        sumnums.push_back(sum);\n    }\n}\n\nfor(int i=0; i<sumnums.size(); ++i)\n    std::cout << sumnums[i] << ' ';\n\n}\n```\n\n\nUpdate:\n\nThe numbers of the sum have to be consecutive numbers.Like 3 * 3 has to be equal to 2 + 3 + 4 not 3 + 3 + 3.\n\nSo, my first try was that I found a rule for each sum.\nLike 3 * 3 = 2 + 3 + 4, 5 * 5 = 3 + 4 + 5 + 6 + 7, 7 * 7 = 4 + 5 + 6 + 7 + 8 + 9 + 10.\n\nEvery sum starts with the second element of the previous sum and continues for a number of elements equal to n - 1, like 3 * 3 = 2 + 3 + 4, 5 * 5 , the sum for 5 * 5 starts with 3 + another 4 elements.\n\nAnd another algorithm would be @molbdnilo 's, like 3 * 3 = 3 + 3 + 3 = 3 + 3 + 3 - 1 + 1, 3 * 3 = ( 3 - 1 ) + 3 + ( 3 + 1 ), but then 5 * 5 = (5 - 2) + ( 5 - 1 ) + 5 + 5 + 1 + 5 + 2\n    ", "Answer": "\r\nLet's do a few special cases by hand.\n(The division here is integer division.)\n\n```\n3^2: 9  \n 2 + 3 + 4 = 9\nx-1  x  x+1\n1 is 3/2\n\n5: 25\n 3 + 4 + 5 + 6 + 7 = 25\nx-2 x-1  x  x+1 x+2\n2 is 5/2\n\n7: 49\n 4 + 5 + 6 + 7 + 8 + 9 + 10\nx-3 x-2 x-1  x  x+1 x+2 x+3\n3 is 7/2\n```\n\n\nIt appears that we're looking for the sequence from ```\nn - n / 2```\n to ```\nn + n / 2```\n.\n(Or, equivalently, ```\nn / 2 + 1```\n to ```\nn / 2 + n```\n, but I like symmetry.)  \n\nAssuming that this is correct (the proof left as an exercise ;-):\n\n```\nint main()\n{\n    int n = 0;\n    std::cin >> n;\n    if (n % 2 == 0)\n    {\n        std::cout << \"Must be odd\\n\";\n        return -1;\n    }\n    int delta = n / 2;\n    for (int i = n - delta; i <= n + delta; i++)\n    {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n}\n```\n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Number of addition and multiplication operators in this algorithm\r\n                \r\nConsider the following algorithm:\n\n```\ni := 1\nt := 0\n    while i ≤ n\n       t := t + i\n       i := 2i\n```\n\n\nI'm interested in finding out how many addition and multiplication operations this algorithm executes; however, I'm running into trouble.  I understand that the value of i doubles after each iteration, but I don't know how to generalize the algorithm to give a correct number of operations up until the value of n.  If anyone can shed some light on the issue, I'd greatly appreciate it.\n\nThank you!\n    ", "Answer": "\r\nSince the value of ```\ni```\n doubles every loop and ```\ni <= n```\n\n\n```\ni*2^x <= n\n```\n\n\nand maximizing x gives the number of loops. Since i = 1\n\n```\n2^x = n\nx = floor log(n)\n```\n\n\nand we perform 1 addition and 1 multiplication per loop. I think you can take it from here :)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "analyze algorithm of finding maximum number in array with n number\r\n                \r\n```\ndef maximum(array):\n  max = array[0]\n  counter = 0\n\n  for i in array:\n      size +=1\n      if i>max:\n          max=i\n\n  return max\n```\n\nI need to analyze that algorithm which find maximum number in array with n numbers in it. the only thing I want to know how to get Recursive and General formula for Average case of this algorithm.\n    ", "Answer": "\r\nNot sure what you mean by \"Recursive and General formula for Average case of this algorithm\". Your algorithm is not recursive. So, how can it be \"recursive formula\"?\nRecursive way to find maximum in an array:\n```\ndef findMax(Array, n):\n    if (n == 1):\n        return A[0]\n    return max(Array[n - 1], findMax(Array, n - 1))\n```\n\nI guess you want Recurrence relation.\nLet ```\nT(n)```\n be time taken to find the maximum of ```\nn```\n elements. So, for above written code.\n```\nT(n) = T(n-1) + 1 .... Equation I\n```\n\nIn case you are interested to solve the recurrence relation:\n```\nT(n-1) = T((n-1)-1) + 1 = T(n-2) + 1 .... Equation II\n```\n\nIf you substitute value of ```\nT(n-1)```\n from Equation II into Equation I, you get:\n```\nT(n) = (T(n-2) + 1) + 1 = T(n-2) + 2\n```\n\nSimilarly,\n```\nT(n) = T(n-3) + 3\nT(n) = T(n-4) + 4\n```\n\nand so on..\nContinuing the above for ```\nk```\n times,\n```\nT(n) = T(n-k) + k\n```\n\nIf n-k = 0, means n = k. The equation then becomes\n```\nT(n) = T(0) + n = 1 + n\n```\n\nTherefore, the recursive algorithm we came up with has time complexity ```\nO(n)```\n.\nHope it helped.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Calculating Pi number with Chudnovsky algorithm\r\n                \r\nSo here is some C++ code for calculating Pi according to Chudnovsky algorithm:  \n\n```\n#include <iostream>\n#include <cmath>\n#include <iomanip>\n\nint fact(int digit)\n{\n    int result = 1;\n    for (int i=digit; i>1; i--)\n    {\n        result *= i;\n    }\n    return result;\n}\n\nint main()\n{\n    long double pi = 0.0;\n    int precision = 10;\n    for ( int k=0; k<=precision; k++)\n    {\n        pi += ( pow(-1, k)*fact((6*k))*(13591409+545140134*k))/(fact(3*k)*pow(fact(k),3)*pow(640320, (3*k+1.5)));\n    }\n    pi = 1.0/(12*pi);\n    std::cout<<std::setprecision(80)<<pi<<'\\n'<<M_PI<<'\\n';\n}  \n```\n\n\nThe problem is that this code returns only 15 right digits of PI number, another part of it is garbage... when precision variable is set to 12 or bigger it returns -nan. Can anybody help me with it? TIA\nEDIT: Ubuntu 12.10 x64, gcc 4.7.2\n    ", "Answer": "\r\nUse double for fact() return type as well as \"result\" variable inside fact(). \n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Some sort of number allocation algorithm\r\n                \r\nI am creating a booking system that allows a specific number of rooms/seats to be booked. Say a user can book seats/rooms numbered 1-100. My lecturer has suggested I use an algorithm that divides the reservation numbers economically so the seats left unsold are kept to a minimum. So for instance if there was 10 seats available:\n\nUser 1 books 4 seat. Given (no 1-4).\nUser 2 books 1 seat. Given (no 5).\nUser 3 books 4 seats. Given (no 6-9).\nUser 2 then cancels. Freeing up (no 5).\nUser 4 then wants to book 2 seats but the only seats available are 5 & 10 (Not together, so they do not book).\n\nMy lecturer said a common algorithm exists for this problem, but could not remember the name. I suppose it's like the algorithm used for data on a disk.\n\nAny ideas?\nMany thanks.\n    ", "Answer": "\r\nThere is no algorithm that guarantees optimality.\n\nTake your example. To make sure you get the best setup you need to know who will cancel to make sure they are next to the free space, so that free space is continuous (and you are able to book more). Only 2 reservations can be next to the free space. Unless you can look into the future and say which of the 3 bookings will not be cancelled, you are going run a chance of making a mistake and not having optimal allocation.\n\nYou can try something similar to allocation techniques (malloc) that try to fit new booking into the smallest available space. If you have some more info about the bookings (probability it will get cancelled) you can try and make smarter choices (like double booking, as they do on the airlines). \nFailing that you could still squeeze more out of the system if you are able to reassign bookings (that's what the java garbage collector does on a major compaction).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Understanding algorithm for finding a random number\r\n                \r\nI'm trying to find the best algorithm for finding a random number between 1-100 using the least number of steps. You can guess a number n using the function ```\nguess(n)```\n, and you will receive a boolean response true or false. The answer will always be less than the guess you entered into the function if the response is false; if the response is true, it needs to be larger or the guess itself. \n    ", "Answer": "\r\nThe basic idea: \n\nFirst guess(50). Depending on the answer, guess(25) or guess(75).\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm for prioritize list of number (balloting)\r\n                \r\nI am implementing an algorithm for prioritizing a list of number, and based on the reference code, the logic is,\n\nPrepare a list for assigning priority no. (e.g., 1, 2, 3, 4, 5)\nAssign random number using random number generator to the numbers above\nSort the list by the assigned random number (e.g. 3, 2, 5, 1, 4)\nThen from the reference sources, it assigns the priority no. to the list as\n\nindex = (random_number mod number_no_priority_count) + 1\nrandom_number - last output value of step (2)\nnumber_no_priority_count = Total number of records with no priority no. assigned\nthen assign the priority no. to the record with sorting index in (3) (e.g. if index = 3, assign priority no. = 1 to element 3, i.e. number 5)\nI have several reference codes have similar logic above, might anyone advise if step (4) is a standard algorithm?\n    ", "Answer": "", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to count the number of valid blocks in a permutation [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                Closed 12 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\n\n  Possible Duplicate:\n  Finding sorted sub-sequences in a permutation   \n\n\n\n\nGiven an array A which holds a permutation of 1,2,...,n. A sub-block A[i..j]\nof an array A is called a valid block if all the numbers appearing in A[i..j]\nare consecutive numbers (may not be in order）.  \n\nGiven an array A= [ 7 3 4 1 2 6 5 8] the valid blocks are [3 4], [1,2], [6,5],\n[3 4 1 2], [3 4 1 2 6 5], [7 3 4 1 2 6 5], [7 3 4 1 2 6 5 8]  \n\nSo the count for above permutation is 7.\n\nGive an O( n log n) algorithm to count the number of valid blocks.  \n    ", "Answer": "\r\nOk, I am down to 1 rep because I put 200 bounty on a related question: Finding sorted sub-sequences in a permutation\nso I cannot leave comments for a while.\n\nI have an idea:\n1) Locate all permutation groups. They are: (78), (34), (12), (65). Unlike in group theory, their order and position, and whether they are adjacent matters. So, a group (78) can be represented as a structure ```\n(7, 8, false)```\n, while (34) would be ```\n(3,4,true)```\n. I am using Python's notation for tuples, but it is actually might be better to use a whole class for the group. Here true or false means contiguous or not. Two groups are \"adjacent\" if ```\n(max(gp1) == min(gp2) + 1 or max(gp2) == min(gp1) + 1) and contigous(gp1) and contiguos(gp2)```\n. This is not the only condition, for ```\nunion(gp1, gp2)```\n to be contiguous, because ```\n(14)```\n and ```\n(23)```\n combine into ```\n(14)```\n nicely. This is a great question for algo class homework, but a terrible one for interview. I suspect this is homework.\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to find the factors of a given Number.. Shortest Method?\r\n                \r\nWhat could be the simplest and time efficient logic to find out the factors of a given Number.\nIs there any algorithm that exist, based on the same.\n\nActually, my real problem is to find out the no. of factors that exist for a given Number..\n\nSo Any algorithm, please let me know on this..\n\nThanks.\n    ", "Answer": "\r\n\n  Actually, my real problem is to find out the no. of factors that exist for a given Number..\n\n\nWell, this is different. Let ```\nn```\n be the given number.\n\nIf ```\nn = p1^e1 * p2^e2 * ... * pk^ek```\n, where each ```\np```\n is a prime number, then the number of factors of ```\nn```\n is ```\n(e1 + 1)*(e2 + 1)* ... *(ek + 1)```\n. More on this here.\n\nTherefore, it is enough to find the powers at which each prime factor appears. For example:\n\n```\nread given number in n\ninitial_n = n\nnum_factors = 1;\nfor (i = 2; i * i <= initial_n; ++i) // for each number i up until the square root of the given number\n{\n    power = 0; // suppose the power i appears at is 0\n    while (n % i == 0) // while we can divide n by i\n    {\n        n = n / i // divide it, thus ensuring we'll only check prime factors\n        ++power // increase the power i appears at\n    }\n    num_factors = num_factors * (power + 1) // apply the formula\n}\n\nif (n > 1) // will happen for example for 14 = 2 * 7\n{\n    num_factors = num_factors * 2 // n is prime, and its power can only be 1, so multiply the number of factors by 2\n}\n```\n\n\nFor example, take ```\n18```\n. ```\n18 = 2^1 * 3*2 => number of factors = (1 + 1)*(2 + 1) = 6```\n. Indeed, the ```\n6```\n factors of ```\n18```\n are ```\n1, 2, 3, 6, 9, 18```\n.  \n\nHere's a little benchmark between my method and the method described and posted by @Maciej. His has the advantage of being easier to implement, while mine has the advantage of being faster if change to only iterate over the prime numbers, as I have done for this test:\n\n```\n class Program\n{\n    static private List<int> primes = new List<int>();\n\n    private static void Sieve()\n    {\n        bool[] ok = new bool[2000];\n\n        for (int i = 2; i < 2000; ++i) // primes up to 2000 (only need up to sqrt of 1 000 000 actually)\n        {\n            if (!ok[i])\n            {\n                primes.Add(i);\n\n                for (int j = i; j < 2000; j += i)\n                    ok[j] = true;\n            }\n        }\n    }\n\n    private static int IVlad(int n)\n    {\n        int initial_n = n;\n        int factors = 1;\n\n        for (int i = 0; primes[i] * primes[i] <= n; ++i)\n        {\n            int power = 0;\n            while (initial_n % primes[i] == 0)\n            {\n                initial_n /= primes[i];\n                ++power;\n            }\n            factors *= power + 1;\n        }\n\n        if (initial_n > 1)\n        {\n            factors *= 2;\n        }\n\n        return factors;\n    }\n\n    private static int Maciej(int n)\n    {\n        int factors = 1;\n        int i = 2;\n        for (; i * i < n; ++i)\n        {\n            if (n % i == 0)\n            {\n                ++factors;\n            }\n        }\n\n        factors *= 2;\n\n        if (i * i == n)\n        {\n            ++factors;\n        }\n\n        return factors;\n    }\n\n    static void Main()\n    {\n        Sieve();\n\n\n        Console.WriteLine(\"Testing equivalence...\");\n\n        for (int i = 2; i < 1000000; ++i)\n        {\n            if (Maciej(i) != IVlad(i))\n            {\n                Console.WriteLine(\"Failed!\");\n                Environment.Exit(1);\n            }\n        }\n\n        Console.WriteLine(\"Equivalence confirmed!\");\n\n        Console.WriteLine(\"Timing IVlad...\");\n        Stopwatch t = new Stopwatch();\n\n        t.Start();\n        for (int i = 2; i < 1000000; ++i)\n        {\n            IVlad(i);\n        }\n\n        Console.WriteLine(\"Total milliseconds: {0}\", t.ElapsedMilliseconds);\n        Console.WriteLine(\"Timing Maciej...\");\n\n        t.Reset();\n        t.Start();\n        for (int i = 2; i < 1000000; ++i)\n        {\n            Maciej(i);\n        }\n\n\n        Console.WriteLine(\"Total milliseconds: {0}\", t.ElapsedMilliseconds);\n    }\n}\n```\n\n\nResults on my machine:\n\n\n  Testing equivalence...\n  Equivalence confirmed!\n  Timing IVlad...\n  Total milliseconds: 2448\n  Timing Maciej...\n  Total milliseconds: 3951\n  Press any key to continue . . .  \n\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
{"Question": "Algorithm to find a number and its square in an array\r\n                \r\nI have an array of integers, and I need an O(n) algorithm to find if the array contains a number and its square; one pair is sufficient.\n\nI tried to do it myself, but I have only managed to find a solution in O(n2).\n\nI thought about using counting sort, but the memory usage is too big.\n    ", "Answer": "\r\ncreate a new array twice the length of the input array. O(2N)\ncopy all of the numbers in O(N)\ncopy the squares of the numbers in O(N)\nradix sort (we can since they are all ints) O(N)\niterate over once to see if there are two numbers the same one after the other O(N)\nprofit! O(1)\n    ", "Knowledge_point": "Algorithms and Numbers", "Tag": "算法分析"}
