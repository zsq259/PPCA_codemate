{"Question": "Finding median of list in Python\r\n                \r\nHow do you find the median of a list in Python? The list can be of any size and the numbers are not guaranteed to be in any particular order.\n\nIf the list contains an even number of elements, the function should return the average of the middle two.\n\nHere are some examples (sorted for display purposes):\n\n```\nmedian([1]) == 1\nmedian([1, 1]) == 1\nmedian([1, 1, 2, 4]) == 1.5\nmedian([0, 2, 5, 6, 8, 9, 9]) == 6\nmedian([0, 0, 0, 0, 4, 4, 6, 8]) == 2\n```\n\n    ", "Answer": "\r\nPython 3.4 has ```\nstatistics.median```\n:\n\n\n  Return the median (middle value) of numeric data.\n  \n  When the number of data points is odd, return the middle data point.\n  When the number of data points is even, the median is interpolated by taking the average of the two middle values:\n\n```\n>>> median([1, 3, 5])\n3\n>>> median([1, 3, 5, 7])\n4.0\n```\n\n\n\nUsage:\n\n```\nimport statistics\n\nitems = [6, 1, 8, 2, 3]\n\nstatistics.median(items)\n#>>> 3\n```\n\n\nIt's pretty careful with types, too:\n\n```\nstatistics.median(map(float, items))\n#>>> 3.0\n\nfrom decimal import Decimal\nstatistics.median(map(Decimal, items))\n#>>> Decimal('3')\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Simple way to calculate median with MySQL\r\n                \r\nWhat's the simplest (and hopefully not too slow) way to calculate the median with MySQL? I've used ```\nAVG(x)```\n for finding the mean, but I'm having a hard time finding a simple way of calculating the median. For now, I'm returning all the rows to PHP, doing a sort, and then picking the middle row, but surely there must be some simple way of doing it in a single MySQL query.\n\nExample data:\n\n```\nid | val\n--------\n 1    4\n 2    7\n 3    2\n 4    2\n 5    9\n 6    8\n 7    3\n```\n\n\nSorting on ```\nval```\n gives ```\n2 2 3 4 7 8 9```\n, so the median should be ```\n4```\n, versus ```\nSELECT AVG(val)```\n which == ```\n5```\n.\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Function to Calculate Median in SQL Server\r\n                \r\nAccording to MSDN, Median is not available as an aggregate function in Transact-SQL. However, I would like to find out whether it is possible to create this functionality (using the Create Aggregate function, user defined function, or some other method). \n\nWhat would be the best way (if possible) to do this - allow for the calculation of a median value (assuming a numeric data type) in an aggregate query?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find running median from a stream of integers\r\n                \r\n\n  Possible Duplicate:\n  Rolling median algorithm in C  \n\n\n\n\n\n  Given that integers are read from a data stream. Find median of elements read so far in efficient way. \n\n\nSolution I have read: We can use a max heap on left side to represent elements that are less than the effective median, and a min heap on right side to represent elements that are greater than the effective median.\n\nAfter processing an incoming element, the number of elements in heaps differ at most by 1 element. When both heaps contain the same number of elements, we find the average of heap's root data as effective median. When the heaps are not balanced, we select the effective median from the root of heap containing more elements.\n\nBut how would we construct a max heap and min heap i.e. how would we know the effective median here? I think that we would insert 1 element in max-heap and then the next 1 element in min-heap, and so on for all the elements. Correct me If I am wrong here.\n    ", "Answer": "\r\nThere are a number of different solutions for finding running median from streamed data, I will briefly talk about them at the very end of the answer. \n\nThe question is about the details of the a specific solution (max heap/min heap solution), and how heap based solution works is explained below:\n\nFor the first two elements add smaller one to the maxHeap on the left, and bigger one to the minHeap on the right. Then process stream data one by one, \n\n```\nStep 1: Add next item to one of the heaps\n\n   if next item is smaller than maxHeap root add it to maxHeap,\n   else add it to minHeap\n\nStep 2: Balance the heaps (after this step heaps will be either balanced or\n   one of them will contain 1 more item)\n\n   if number of elements in one of the heaps is greater than the other by\n   more than 1, remove the root element from the one containing more elements and\n   add to the other one\n```\n\n\nThen at any given time you can calculate median like this:\n\n```\n   If the heaps contain equal amount of elements;\n     median = (root of maxHeap + root of minHeap)/2\n   Else\n     median = root of the heap with more elements\n```\n\n\nNow I will talk about the problem in general as promised in the beginning of the answer. Finding running median from a stream of data is a tough problem, and finding an exact solution with memory constraints efficiently is probably impossible for the general case. On the other hand, if the data has some characteristics we can exploit, we can develop efficient specialized solutions. For example, if we know that the data is an integral type, then we can use counting sort, which can give you a constant memory constant time algorithm. Heap based solution is a more general solution because it can be used for other data types (doubles) as well. And finally, if the exact median is not required and an approximation is enough, you can just try to estimate a probability density function for the data and estimate median using that.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate the median of a billion numbers\r\n                \r\nIf you have one billion numbers and one hundred computers, what is the best way to locate the median of these numbers?\nOne solution which I have is:\n\nSplit the set equally among the computers.\nSort them.\nFind the medians for each set.\nSort the sets on medians.\nMerge two sets at a time from the lowest to the highest median.\n\nIf we have ```\nm1 < m2 < m3 ...```\n then first merge ```\nSet1```\n and ```\nSet2```\n and in the resulting set we can discard all the numbers lower than the median of ```\nSet12```\n (merged). So at any point of time we have equal sized sets. By the way this cannot be done in a parallel manner. Any ideas?\n    ", "Answer": "\r\nAh, my brain has just kicked into gear, I have a sensible suggestion now. Probably too late if this had been an interview, but never mind:\n\nMachine 1 shall be called the \"control machine\", and for the sake of argument either it starts with all the data, and sends it in equal parcels to the other 99 machines, or else the data starts evenly distributed between the machines, and it sends 1/99 of its data to each of the others. The partitions do not have to be equal, just close.\n\nEach other machine sorts its data, and does so in a way which favours finding the lower values first. So for example a quicksort, always sorting the lower part of the partition first[*]. It writes its data back to the control machine in increasing order as soon as it can (using asynchronous IO so as to continue sorting, and probably with Nagle on: experiment a bit).\n\nThe control machine performs a 99-way merge on the data as it arrives, but discards the merged data, just keeping count of the number of values it has seen. It calculates the median as the mean of the 1/2 billionth and 1/2 billion plus oneth values.\n\nThis suffers from the \"slowest in the herd\" problem. The algorithm cannot complete until every value less than the median has been sent by a sorting machine. There's a reasonable chance that one such value will be quite high within its parcel of data. So once the initial partitioning of the data is complete, estimated running time is the combination of the time to sort 1/99th of the data and send it back to the control computer, and the time for the control to read 1/2 the data. The \"combination\" is somewhere between the maximum and the sum of those times, probably close to the max.\n\nMy instinct is that for sending data over a network to be faster than sorting it (let alone just selecting the median) it needs to be a pretty damn fast network. Might be a better prospect if the network can be presumed to be instantaneous, for example if you have 100 cores with equal access to RAM containing the data.\n\nSince network I/O is likely to be the bound, there might be some tricks you can play, at least for the data coming back to the control machine. For example, instead of sending \"1,2,3,.. 100\", perhaps a sorting machine could send a message meaning \"100 values less than 101\". The control machine could then perform a modified merge, in which it finds the least of all those top-of-a-range values, then tells all the sorting machines what it was, so that they can (a) tell the control machine how many values to \"count\" below that value, and (b) resume sending their sorted data from that point.\n\nMore generally, there's probably a clever challenge-response guessing game that the control machine can play with the 99 sorting machines.\n\nThis involves round-trips between the machines, though, which my simpler first version avoids. I don't really know how to blind-estimate their relative performance, and since the trade-offs are complex, I imagine there are much better solutions out there than anything I'll think of myself, assuming this is ever a real problem.\n\n[*] available stack permitting - your choice of which part to do first is constrained if you don't have O(N) extra space. But if you do have enough extra space, you can take your pick, and if you don't have enough space you can at least use what you do have to cut some corners, by doing the small part first for the first few partitions.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Rolling median algorithm in C\r\n                \r\nI am currently working on an algorithm to implement a rolling median filter (analogous to a rolling mean filter) in C. From my search of the literature, there appear to be two reasonably efficient ways to do it. The first is to sort the initial window of values, then perform a binary search to insert the new value and remove the existing one at each iteration.\n\nThe second (from Hardle and Steiger, 1995, JRSS-C, Algorithm 296) builds a double-ended heap structure, with a maxheap on one end, a minheap on the other, and the median in the middle. This yields a linear-time algorithm instead of one that is O(n log n).\n\nHere is my problem: implementing the former is doable, but I need to run this on millions of time series, so efficiency matters a lot. The latter is proving very difficult to implement. I found code in the Trunmed.c file of the code for the stats package of R, but it is rather indecipherable.\n\nDoes anyone know of a well-written C implementation for the linear time rolling median algorithm?\n\nEdit: Link to Trunmed.c code http://google.com/codesearch/p?hl=en&sa=N&cd=1&ct=rc#mYw3h_Lb_e0/R-2.2.0/src/library/stats/src/Trunmed.c\n    ", "Answer": "\r\nI have looked at R's ```\nsrc/library/stats/src/Trunmed.c```\n a few times as I wanted something similar too in a standalone C++ class / C subroutine. Note that this are actually two implementations in one, see ```\nsrc/library/stats/man/runmed.Rd```\n (the source of the help file) which says\n\n```\n\\details{\n  Apart from the end values, the result \\code{y = runmed(x, k)} simply has\n  \\code{y[j] = median(x[(j-k2):(j+k2)])} (k = 2*k2+1), computed very\n  efficiently.\n\n  The two algorithms are internally entirely different:\n  \\describe{\n    \\item{\"Turlach\"}{is the Härdle-Steiger\n      algorithm (see Ref.) as implemented by Berwin Turlach.\n      A tree algorithm is used, ensuring performance \\eqn{O(n \\log\n        k)}{O(n * log(k))} where \\code{n <- length(x)} which is\n      asymptotically optimal.}\n    \\item{\"Stuetzle\"}{is the (older) Stuetzle-Friedman implementation\n      which makes use of median \\emph{updating} when one observation\n      enters and one leaves the smoothing window.  While this performs as\n      \\eqn{O(n \\times k)}{O(n * k)} which is slower asymptotically, it is\n      considerably faster for small \\eqn{k} or \\eqn{n}.}\n  }\n}\n```\n\n\nIt would be nice to see this re-used in a more standalone fashion. Are you volunteering?  I can help with some of the R bits.\n\nEdit 1: Besides the link to the older version of Trunmed.c above, here are current SVN copies of\n\n\n```\nSrunmed.c```\n (for the Stuetzle version)\n```\nTrunmed.c```\n (for the Turlach version)\n```\nrunmed.R```\n for the R function calling these\n\n\nEdit 2: Ryan Tibshirani has some C and Fortran code on fast median binning which may be a suitable starting point for a windowed approach.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Understanding \"median of medians\" algorithm\r\n                \r\nI want to understand \"median of medians\" algorithm on the following example:\n\nWe have 45 distinct numbers divided into 9 group with 5 elements each.\n\n```\n48 43 38 33 28 23 18 13 8\n\n49 44 39 34 29 24 19 14 9 \n\n50 45 40 35 30 25 20 15 10\n\n51 46 41 36 31 26 21 16 53\n\n52 47 42 37 32 27 22 17 54\n```\n\n\n\nThe first step is sorting every group (in this case they are already sorted)\nSecond step recursively, ﬁnd the \"true\" median of the medians (```\n50 45 40 35 30 25 20 15 10```\n) i.e. the set will be divided into 2 groups:\n\n```\n50 25\n\n45 20 \n\n40 15\n\n35 10\n\n30\n```\n\n\nsorting these 2 groups\n\n```\n30 10\n\n35 15 \n\n40 20\n\n45 25\n\n50\n```\n\n\n\nthe medians is 40 and 15 (in case the numbers are even we took left median)\nso the returned value is 15 however \"true\" median of medians (```\n50 45 40 35 30 25 20 15 10```\n) is 30, moreover there are 5 elements less then 15 which are much less than 30% of 45 which are mentioned in wikipedia\n\nand so ```\nT(n) <= T(n/5) + T(7n/10) + O(n)```\n fails.\n\nBy the way in the Wikipedia example, I get result of recursion as 36. However, the true median is 47.\n\nSo, I think in some cases this recursion may not return true median of medians. I want to understand where is my mistake.     \n    ", "Answer": "\r\nThe problem is in the step where you say to find the true median of the medians. In your example, you had these medians:\n\n```\n50 45 40 35 30 25 20 15 10\n```\n\n\nThe true median of this data set is 30, not 15.  You don't find this median by splitting the groups into blocks of five and taking the median of those medians, but instead by recursively calling the selection algorithm on this smaller group.  The error in your logic is assuming that median of this group is found by splitting the above sequence into two blocks\n\n```\n50 45 40 35 30\n```\n\n\nand\n\n```\n25 20 15 10\n```\n\n\nthen finding the median of each block.  Instead, the median-of-medians algorithm will recursively call itself on the complete data set ```\n50 45 40 35 30 25 20 15 10```\n.  Internally, this will split the group into blocks of five and sort them, etc., but it does so to determine the partition point for the partitioning step, and it's in this partitioning step that the recursive call will find the true median of the medians, which in this case will be 30.  If you use 30 as the median as the partitioning step in the original algorithm, you do indeed get a very good split as required.\n\nHope this helps!\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate median in c#\r\n                \r\nI need to write function that will accept array of decimals and it will find the median.\n\nIs there a function in the .net Math library?\n    ", "Answer": "\r\nLooks like other answers are using sorting. That's not optimal from performance point of view because it takes ```\nO(n logn)```\n time. It is possible to calculate median in ```\nO(n)```\n time instead. The generalized version of this problem is known as \"n-order statistics\" which means finding an element K in a set such that we have n elements smaller or equal to K and rest are larger or equal K. So 0th order statistic would be minimal element in the set (Note: Some literature use index from 1 to N instead of 0 to N-1). Median is simply ```\n(Count-1)/2```\n-order statistic.\n\nBelow is the code adopted from Introduction to Algorithms by Cormen et al, 3rd Edition.\n\n```\n/// <summary>\n/// Partitions the given list around a pivot element such that all elements on left of pivot are <= pivot\n/// and the ones at thr right are > pivot. This method can be used for sorting, N-order statistics such as\n/// as median finding algorithms.\n/// Pivot is selected ranodmly if random number generator is supplied else its selected as last element in the list.\n/// Reference: Introduction to Algorithms 3rd Edition, Corman et al, pp 171\n/// </summary>\nprivate static int Partition<T>(this IList<T> list, int start, int end, Random rnd = null) where T : IComparable<T>\n{\n    if (rnd != null)\n        list.Swap(end, rnd.Next(start, end+1));\n\n    var pivot = list[end];\n    var lastLow = start - 1;\n    for (var i = start; i < end; i++)\n    {\n        if (list[i].CompareTo(pivot) <= 0)\n            list.Swap(i, ++lastLow);\n    }\n    list.Swap(end, ++lastLow);\n    return lastLow;\n}\n\n/// <summary>\n/// Returns Nth smallest element from the list. Here n starts from 0 so that n=0 returns minimum, n=1 returns 2nd smallest element etc.\n/// Note: specified list would be mutated in the process.\n/// Reference: Introduction to Algorithms 3rd Edition, Corman et al, pp 216\n/// </summary>\npublic static T NthOrderStatistic<T>(this IList<T> list, int n, Random rnd = null) where T : IComparable<T>\n{\n    return NthOrderStatistic(list, n, 0, list.Count - 1, rnd);\n}\nprivate static T NthOrderStatistic<T>(this IList<T> list, int n, int start, int end, Random rnd) where T : IComparable<T>\n{\n    while (true)\n    {\n        var pivotIndex = list.Partition(start, end, rnd);\n        if (pivotIndex == n)\n            return list[pivotIndex];\n\n        if (n < pivotIndex)\n            end = pivotIndex - 1;\n        else\n            start = pivotIndex + 1;\n    }\n}\n\npublic static void Swap<T>(this IList<T> list, int i, int j)\n{\n    if (i==j)   //This check is not required but Partition function may make many calls so its for perf reason\n        return;\n    var temp = list[i];\n    list[i] = list[j];\n    list[j] = temp;\n}\n\n/// <summary>\n/// Note: specified list would be mutated in the process.\n/// </summary>\npublic static T Median<T>(this IList<T> list) where T : IComparable<T>\n{\n    return list.NthOrderStatistic((list.Count - 1)/2);\n}\n\npublic static double Median<T>(this IEnumerable<T> sequence, Func<T, double> getValue)\n{\n    var list = sequence.Select(getValue).ToList();\n    var mid = (list.Count - 1) / 2;\n    return list.NthOrderStatistic(mid);\n}\n```\n\n\nFew notes:\n\n\nThis code replaces tail recursive code from the original version in book in to iterative loop.\nIt also eliminates unnecessary extra check from original version when start==end.\nI've provided two version of Median, one that accepts IEnumerable and then creates a list. If you use the version that accepts IList then keep in mind it modifies the order in list.\nAbove methods calculates median or any i-order statistics in ```\nO(n)```\n expected time. If you want ```\nO(n)```\n worse case time then there is technique to use median-of-median. While this would improve worse case performance, it degrades average case because constant in ```\nO(n)```\n is now larger. However if you would be calculating median mostly on very large data then its worth to look at.\nThe NthOrderStatistics method allows to pass random number generator which would be then used to choose random pivot during partition. This is generally not necessary unless you know your data has certain patterns so that last element won't be random enough or if somehow your code is exposed outside for targeted exploitation. \nDefinition of median is clear if you have odd number of elements. It's just the element with index ```\n(Count-1)/2```\n in sorted array. But when you even number of element ```\n(Count-1)/2```\n is not an integer anymore and you have two medians: Lower median ```\nMath.Floor((Count-1)/2)```\n and ```\nMath.Ceiling((Count-1)/2)```\n. Some textbooks use lower median as \"standard\" while others propose to use average of two. This question becomes particularly critical for set of 2 elements. Above code returns lower median. If you wanted instead average of lower and upper then you need to call above code twice. In that case make sure to measure performance for your data to decide if you should use above code VS just straight sorting.\nFor .net 4.5+ you can add ```\nMethodImplOptions.AggressiveInlining```\n attribute on ```\nSwap<T>```\n method for slightly improved performance.\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "scala median implementation\r\n                \r\nWhat's a fast implementation of median in scala?\n\nThis is what I found on rosetta code:\n\n```\n  def median(s: Seq[Double])  =\n  {\n    val (lower, upper) = s.sortWith(_<_).splitAt(s.size / 2)\n    if (s.size % 2 == 0) (lower.last + upper.head) / 2.0 else upper.head\n  }\n```\n\n\nI don't like it because it does a sort. I know there are ways to compute the median in linear time.\n\nEDIT:\n\nI would like to have a set of median functions that I can use in various scenarios:\n\n\nfast, in place median computation that can be done in linear time\nmedian that works on a stream that you can traverse multiple times, but you can only keep ```\nO(log n)```\n values in memory like this\nmedian that works on a stream, where you can hold at most ```\nO(log n)```\n values in memory, and you can traverse the stream at most once (is this even possible?)\n\n\nPlease only post code that compiles and correctly computes the median. For simplicity, you may assume that all inputs contain an odd number of values.\n    ", "Answer": "\r\nImmutable Algorithm\n\nThe first algorithm indicated by Taylor Leese is quadratic, but has linear average. That, however, depends on the pivot selection. So I'm providing here a version which has a pluggable pivot selection, and both the random pivot and the median of medians pivot (which guarantees linear time).\n\n```\nimport scala.annotation.tailrec\n\n@tailrec def findKMedian(arr: Array[Double], k: Int)(implicit choosePivot: Array[Double] => Double): Double = {\n    val a = choosePivot(arr)\n    val (s, b) = arr partition (a >)\n    if (s.size == k) a\n    // The following test is used to avoid infinite repetition\n    else if (s.isEmpty) {\n        val (s, b) = arr partition (a ==)\n        if (s.size > k) a\n        else findKMedian(b, k - s.size)\n    } else if (s.size < k) findKMedian(b, k - s.size)\n    else findKMedian(s, k)\n}\n\ndef findMedian(arr: Array[Double])(implicit choosePivot: Array[Double] => Double) = findKMedian(arr, (arr.size - 1) / 2)\n```\n\n\nRandom Pivot (quadratic, linear average), Immutable\n\nThis is the random pivot selection. Analysis of algorithms with random factors is trickier than normal, because it deals largely with probability and statistics.\n\n```\ndef chooseRandomPivot(arr: Array[Double]): Double = arr(scala.util.Random.nextInt(arr.size))\n```\n\n\nMedian of Medians (linear), Immutable\n\nThe median of medians method, which guarantees linear time when used with the algorithm above. First, and algorithm to compute the median of up to 5 numbers, which is the basis of the median of medians algorithm. This one was provided by Rex Kerr in this answer -- the algorithm depends a lot on the speed of it.\n\n```\ndef medianUpTo5(five: Array[Double]): Double = {\n  def order2(a: Array[Double], i: Int, j: Int) = {\n    if (a(i)>a(j)) { val t = a(i); a(i) = a(j); a(j) = t }\n  }\n\n  def pairs(a: Array[Double], i: Int, j: Int, k: Int, l: Int) = {\n    if (a(i)<a(k)) { order2(a,j,k); a(j) }\n    else { order2(a,i,l); a(i) }\n  }\n\n  if (five.length < 2) return five(0)\n  order2(five,0,1)\n  if (five.length < 4) return (\n    if (five.length==2 || five(2) < five(0)) five(0)\n    else if (five(2) > five(1)) five(1)\n    else five(2)\n  )\n  order2(five,2,3)\n  if (five.length < 5) pairs(five,0,1,2,3)\n  else if (five(0) < five(2)) { order2(five,1,4); pairs(five,1,4,2,3) }\n  else { order2(five,3,4); pairs(five,0,1,3,4) }\n}\n```\n\n\nAnd, then, the median of medians algorithm itself. Basically, it guarantees that the choosen pivot will be greater than at least 30% and smaller than other 30% of the list, which is enough to guarantee the linearity of the previous algorithm. Look up the wikipedia link provided in another answer for details.\n\n```\ndef medianOfMedians(arr: Array[Double]): Double = {\n    val medians = arr grouped 5 map medianUpTo5 toArray;\n    if (medians.size <= 5) medianUpTo5 (medians)\n    else medianOfMedians(medians)\n}\n```\n\n\nIn-place Algorithm\n\nSo, here's an in-place version of the algorithm. I'm using a class that implements a partition in-place, with a backing array, so that the changes to the algorithms are minimal. \n\n```\ncase class ArrayView(arr: Array[Double], from: Int, until: Int) {\n    def apply(n: Int) = \n        if (from + n < until) arr(from + n)\n        else throw new ArrayIndexOutOfBoundsException(n)\n\n    def partitionInPlace(p: Double => Boolean): (ArrayView, ArrayView) = {\n      var upper = until - 1\n      var lower = from\n      while (lower < upper) {\n        while (lower < until && p(arr(lower))) lower += 1\n        while (upper >= from && !p(arr(upper))) upper -= 1\n        if (lower < upper) { val tmp = arr(lower); arr(lower) = arr(upper); arr(upper) = tmp }\n      }\n      (copy(until = lower), copy(from = lower))\n    }\n\n    def size = until - from\n    def isEmpty = size <= 0\n\n    override def toString = arr mkString (\"ArraySize(\", \", \", \")\")\n}; object ArrayView {\n    def apply(arr: Array[Double]) = new ArrayView(arr, 0, arr.size)\n}\n\n@tailrec def findKMedianInPlace(arr: ArrayView, k: Int)(implicit choosePivot: ArrayView => Double): Double = {\n    val a = choosePivot(arr)\n    val (s, b) = arr partitionInPlace (a >)\n    if (s.size == k) a\n    // The following test is used to avoid infinite repetition\n    else if (s.isEmpty) {\n        val (s, b) = arr partitionInPlace (a ==)\n        if (s.size > k) a\n        else findKMedianInPlace(b, k - s.size)\n    } else if (s.size < k) findKMedianInPlace(b, k - s.size)\n    else findKMedianInPlace(s, k)\n}\n\ndef findMedianInPlace(arr: Array[Double])(implicit choosePivot: ArrayView => Double) = findKMedianInPlace(ArrayView(arr), (arr.size - 1) / 2)\n```\n\n\nRandom Pivot, In-place\n\nI'm only implementing the radom pivot for the in-place algorithms, as the median of medians would require more support than what is presently provided by the ```\nArrayView```\n class I defined.\n\n```\ndef chooseRandomPivotInPlace(arr: ArrayView): Double = arr(scala.util.Random.nextInt(arr.size))\n```\n\n\nHistogram Algorithm (O(log(n)) memory), Immutable\n\nSo, about streams. It is impossible to do anything less than ```\nO(n)```\n memory for a stream that can only be traversed once, unless you happen to know what the string length is (in which case it ceases to be a stream in my book).\n\nUsing buckets is also a bit problematic, but if we can traverse it multiple times, then we can know its size, maximum and minimum, and work from there. For example:\n\n```\ndef findMedianHistogram(s: Traversable[Double]) = {\n    def medianHistogram(s: Traversable[Double], discarded: Int, medianIndex: Int): Double = {\n        // The buckets\n        def numberOfBuckets = (math.log(s.size).toInt + 1) max 2\n        val buckets = new Array[Int](numberOfBuckets)\n\n        // The upper limit of each bucket\n        val max = s.max\n        val min = s.min\n        val increment = (max - min) / numberOfBuckets\n        val indices = (-numberOfBuckets + 1 to 0) map (max + increment * _)\n\n        // Return the bucket a number is supposed to be in\n        def bucketIndex(d: Double) = indices indexWhere (d <=)\n\n        // Compute how many in each bucket\n        s foreach { d => buckets(bucketIndex(d)) += 1 }\n\n        // Now make the buckets cumulative\n        val partialTotals = buckets.scanLeft(discarded)(_+_).drop(1)\n\n        // The bucket where our target is at\n        val medianBucket = partialTotals indexWhere (medianIndex <)\n\n        // Keep track of how many numbers there are that are less \n        // than the median bucket\n        val newDiscarded = if (medianBucket == 0) discarded else partialTotals(medianBucket - 1)\n\n        // Test whether a number is in the median bucket\n        def insideMedianBucket(d: Double) = bucketIndex(d) == medianBucket\n\n        // Get a view of the target bucket\n        val view = s.view filter insideMedianBucket\n\n        // If all numbers in the bucket are equal, return that\n        if (view forall (view.head ==)) view.head\n        // Otherwise, recurse on that bucket\n        else medianHistogram(view, newDiscarded, medianIndex)\n    }\n\n    medianHistogram(s, 0, (s.size - 1) / 2)\n}\n```\n\n\nTest and Benchmark\n\nTo test the algorithms, I'm using Scalacheck, and comparing the output of each algorithm to the output of a trivial implementation with sorting. That assumes the sorting version is correct, of course.\n\nI'm benchmarking each of the above algorithms with all provided pivot selections, plus a fixed pivot selection (halfway the array, round down). Each algorithm is tested with three different input array sizes, and for three times against each one.\n\nHere's the testing code:\n\n```\nimport org.scalacheck.{Prop, Pretty, Test}\nimport Prop._\nimport Pretty._\n\ndef test(algorithm: Array[Double] => Double, \n         reference: Array[Double] => Double): String = {\n    def prettyPrintArray(arr: Array[Double]) = arr mkString (\"Array(\", \", \", \")\")\n    val resultEqualsReference = forAll { (arr: Array[Double]) => \n        arr.nonEmpty ==> (algorithm(arr) == reference(arr)) :| prettyPrintArray(arr)\n    }\n    Test.check(Test.Params(), resultEqualsReference)(Pretty.Params(verbosity = 0))\n}\n\nimport java.lang.System.currentTimeMillis\n\ndef bench[A](n: Int)(body: => A): Long = {\n  val start = currentTimeMillis()\n  1 to n foreach { _ => body }\n  currentTimeMillis() - start\n}\n\nimport scala.util.Random.nextDouble\n\ndef benchmark(algorithm: Array[Double] => Double,\n              arraySizes: List[Int]): List[Iterable[Long]] = \n    for (size <- arraySizes)\n    yield for (iteration <- 1 to 3)\n        yield bench(50000)(algorithm(Array.fill(size)(nextDouble)))\n\ndef testAndBenchmark: String = {\n    val immutablePivotSelection: List[(String, Array[Double] => Double)] = List(\n        \"Random Pivot\"      -> chooseRandomPivot,\n        \"Median of Medians\" -> medianOfMedians,\n        \"Midpoint\"          -> ((arr: Array[Double]) => arr((arr.size - 1) / 2))\n    )\n    val inPlacePivotSelection: List[(String, ArrayView => Double)] = List(\n        \"Random Pivot (in-place)\" -> chooseRandomPivotInPlace,\n        \"Midpoint (in-place)\"     -> ((arr: ArrayView) => arr((arr.size - 1) / 2))\n    )\n    val immutableAlgorithms = for ((name, pivotSelection) <- immutablePivotSelection)\n        yield name -> (findMedian(_: Array[Double])(pivotSelection))\n    val inPlaceAlgorithms = for ((name, pivotSelection) <- inPlacePivotSelection)\n        yield name -> (findMedianInPlace(_: Array[Double])(pivotSelection))\n    val histogramAlgorithm = \"Histogram\" -> ((arr: Array[Double]) => findMedianHistogram(arr))\n    val sortingAlgorithm = \"Sorting\" -> ((arr: Array[Double]) => arr.sorted.apply((arr.size - 1) / 2))\n    val algorithms = sortingAlgorithm :: histogramAlgorithm :: immutableAlgorithms ::: inPlaceAlgorithms\n\n    val formattingString = \"%%-%ds  %%s\" format (algorithms map (_._1.length) max)\n\n    // Tests\n    val testResults = for ((name, algorithm) <- algorithms)\n        yield formattingString format (name, test(algorithm, sortingAlgorithm._2))\n\n    // Benchmarks\n    val arraySizes = List(100, 500, 1000)\n    def formatResults(results: List[Long]) = results map (\"%8d\" format _) mkString\n\n    val benchmarkResults: List[String] = for {\n        (name, algorithm) <- algorithms\n        results <- benchmark(algorithm, arraySizes).transpose\n    } yield formattingString format (name, formatResults(results))\n\n    val header = formattingString format (\"Algorithm\", formatResults(arraySizes.map(_.toLong)))\n\n    \"Tests\" :: \"*****\" :: testResults ::: \n    (\"\" :: \"Benchmark\" :: \"*********\" :: header :: benchmarkResults) mkString (\"\", \"\\n\", \"\\n\")\n}\n```\n\n\nResults\n\nTests:\n\n```\nTests\n*****\nSorting                OK, passed 100 tests.\nHistogram              OK, passed 100 tests.\nRandom Pivot           OK, passed 100 tests.\nMedian of Medians      OK, passed 100 tests.\nMidpoint               OK, passed 100 tests.\nRandom Pivot (in-place)OK, passed 100 tests.\nMidpoint (in-place)    OK, passed 100 tests.\n```\n\n\nBenchmarks:\n\n```\nBenchmark\n*********\nAlgorithm                   100     500    1000\nSorting                    1038    6230   14034\nSorting                    1037    6223   13777\nSorting                    1039    6220   13785\nHistogram                  2918   11065   21590\nHistogram                  2596   11046   21486\nHistogram                  2592   11044   21606\nRandom Pivot                904    4330    8622\nRandom Pivot                902    4323    8815\nRandom Pivot                896    4348    8767\nMedian of Medians          3591   16857   33307\nMedian of Medians          3530   16872   33321\nMedian of Medians          3517   16793   33358\nMidpoint                   1003    4672    9236\nMidpoint                   1010    4755    9157\nMidpoint                   1017    4663    9166\nRandom Pivot (in-place)     392    1746    3430\nRandom Pivot (in-place)     386    1747    3424\nRandom Pivot (in-place)     386    1751    3431\nMidpoint (in-place)         378    1735    3405\nMidpoint (in-place)         377    1740    3408\nMidpoint (in-place)         375    1736    3408\n```\n\n\nAnalysis\n\nAll algorithms (except the sorting version) have results that are compatible with average linear time complexity.\n\nThe median of medians, which guarantees linear time complexity in the worst case is much slower than the random pivot. \n\nThe fixed pivot selection is slightly worse than random pivot, but may have much worse performance on non-random inputs. \n\nThe in-place version is about 230% ~ 250% faster, but further tests (not shown) seem to indicate this advantage grows with the size of the array.\n\nI was very surprised by the histogram algorithm. It displayed linear time complexity average, and it's also 33% faster than the median of medians. However, the input is random. The worst case is quadratic -- I saw some examples of it while I was debugging the code.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating median - javascript\r\n                \r\nI've been trying to calculate median but still I've got some mathematical issues I guess as I couldn't get the correct median value and couldn't figure out why. Here's the code;\n\n```\nclass StatsCollector {\n\n    constructor() {\n        this.inputNumber = 0;\n        this.average = 0;\n\n        this.timeout = 19000;\n\n        this.frequencies = new Map();\n        for (let i of Array(this.timeout).keys()) {\n            this.frequencies.set(i, 0);\n        }\n    }\n\n    pushValue(responseTimeMs) {\n        let req = responseTimeMs;\n        if (req > this.timeout) {\n            req = this.timeout;\n        }\n\n        this.average = (this.average * this.inputNumber + req) / (this.inputNumber + 1);\n\n        console.log(responseTimeMs / 1000)\n        let groupIndex = Math.floor(responseTimeMs / 1000);\n        this.frequencies.set(groupIndex, this.frequencies.get(groupIndex) + 1);\n\n        this.inputNumber += 1;\n    }\n\n    getMedian() {\n        let medianElement = 0;\n        if (this.inputNumber <= 0) {\n            return 0;\n        }\n        if (this.inputNumber == 1) {\n            return this.average\n        }\n        if (this.inputNumber == 2) {\n            return this.average\n        }\n        if (this.inputNumber > 2) {\n            medianElement = this.inputNumber / 2;\n        }\n\n        let minCumulativeFreq = 0;\n        let maxCumulativeFreq = 0;\n        let cumulativeFreq = 0;\n        let freqGroup = 0;\n        for (let i of Array(20).keys()) {\n            if (medianElement <= cumulativeFreq + this.frequencies.get(i)) {\n                minCumulativeFreq = cumulativeFreq;\n                maxCumulativeFreq = cumulativeFreq + this.frequencies.get(i);\n                freqGroup = i;\n                break;\n            }\n            cumulativeFreq += this.frequencies.get(i);\n        }\n\n        return (((medianElement - minCumulativeFreq) / (maxCumulativeFreq - minCumulativeFreq)) + (freqGroup)) * 1000;\n    }\n\n    getAverage() {\n        return this.average;\n    }\n\n}\n```\n\n\nHere's the snapshot of the results when I enter the values of \n\n\n  342,654,987,1093,2234,6243,7087,20123\n\n\n\n\nThe correct result should be;\n\n\n  Median: 1663.5\n\n    ", "Answer": "\r\nChange your median method to this:\n```\nfunction median(values){\n  if(values.length ===0) throw new Error(\"No inputs\");\n\n  values.sort(function(a,b){\n    return a-b;\n  });\n\n  var half = Math.floor(values.length / 2);\n  \n  if (values.length % 2)\n    return values[half];\n  \n  return (values[half - 1] + values[half]) / 2.0;\n}\n```\n\nfiddle\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding the median of an unsorted array\r\n                \r\nTo find the median of an unsorted array, we can make a min-heap in O(nlogn) time for n elements, and then we can extract one by one n/2 elements to get the median. But this approach would take O(nlogn) time.\n\nCan we do the same by some method in O(n) time? If we can, then please tell or suggest some method.\n    ", "Answer": "\r\nYou can use the Median of Medians algorithm to find median of an unsorted array in linear time.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of Medians\r\n                \r\nI have read the order statistics to find the k-th smallest (or largest) element in an array of size n in linear time O(n).\n\nThere is one step that it needs to find the median of the medians.\n\n\nSplit the array into [n/5] parts. Each part has 5 elements.\nFind the median in each part. (We have [n/5] numbers now)\nRepeat step 1 and 2 until we only have the last number. (i.e. recursive)\n\n\nT(n) = T(n/5) + O(n)\nand we can get T(n) = O(n).\n\nBut, is it true that, the number we finally get is not the median of medians, but the median of medians of medians of medians of medians of medians, if we have a large array.\n\nPlease consider an array which has 125 elements.\n\nFirst, it is split into 25 parts and we find 25 medians.\nThen, we split these 25 numbers into 5 parts and find 5 medians,\nFinally, we obtain the number which is median of medians of medians. (Not median of medians)\n\nThe reason why I care about it is that, I can understand there are at most about [3/4]*n elements that are smaller (or larger) than the median of medians. But what if it is not the median of medians but the median of medians of medians? In worse case there must be less elements that are smaller (or larger) than the pivot, which means the pivot is closer to the bound of the array.\n\nIf we have a VERY large array, and we found its median of medians of medians of medians of medians of medians. In the worst case the pivot we found can still be very close to the bound and what is the time complexity in this case?\n\nI made up a dataset of 125 elements. Is the result 9?\n\n```\n0.8 0.9 1 inf inf\n1.8 1.9 2 inf inf\n6.8 6.9 7 inf inf\ninf inf inf inf inf\ninf inf inf inf inf\n\n2.8 2.9 3 inf inf\n3.8 3.9 4 inf inf\n7.8 7.9 8 inf inf\ninf inf inf inf inf\ninf inf inf inf inf\n\n4.8 4.9 5 inf inf\n5.8 5.9 6 inf inf\n8.8 8.9 9 inf inf\ninf inf inf inf inf\ninf inf inf inf inf\n\ninf inf inf inf inf\ninf inf inf inf inf\ninf inf inf inf inf\ninf inf inf inf inf\ninf inf inf inf inf\n\ninf inf inf inf inf\ninf inf inf inf inf\ninf inf inf inf inf\ninf inf inf inf inf\ninf inf inf inf inf\n```\n\n\nwhere inf means the number is large enough.\n    ", "Answer": "\r\nLet's denote your median of medians of medians of ... as [median of]* = M.\n\nFirst, I believe that median of medians algorithm (to select a good pivot) is not recursive. The algorithm goes as follows:\n\n\nSplit the elements in the groups of 5\nFind the median of each group\nFind the median of medians and use it as a pivot.\n\n\nMedian of medians will be smaller than 3n/10 elements and larger than another 3n/10 elements, not 3n/4. You have n/5 numbers after selecting medians. Median of median is greater/smaller than half of those numbers, which is n/10. Each of those numbers is a median itself, so it's greater/smaller than 2 numbers, giving you another 2n/10 numbers. Now in total, you get n/10 + 2n/10 = 3n/10 numbers.\n\nTo address your second question, after collecting the group of 5's in your example dataset and calculating their medians, we will have the following sequence:\n\n```\n1, 2, 7, inf, inf\n3, 4, 8, inf, inf\n5, 6, 9, inf, inf, \ninf, inf, inf, inf, inf, \ninf, inf, inf, inf, inf.\n```\n\n\nSo the median of medians would indeed be 9.\n\nYour proposed [median of]* algorithm's runtime will be:\n\n```\nT(n) = O(n * log(n))\n```\n\n\nNow let's try to analyze how many numbers we have less/greater than M.\nWe have the following groups:\n\n\ndepth 1: n/5 elements all medians\ndepth 2: n/25 elements all medians\n...\ndepth i: n/(5^i) elements all medians\n\n\nEach group is less/greater than 2 elements of the previous depth, which is less/greater than 2 elements of the previous depth, and so on:\n\nCalculating in total, we get that our M is greater/less than (n * (2^k) + k * n) /((2^k) * (5^k)). For depth = 1 you get median of medians, which is 3n/10.\n\nNow assuming your depth is [log_5 (n)], i.e. n = 5^k, we get:\n\n5^k * (k + 2^k)/(5^k * 2^k) which is -> 1.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating Median in Ruby\r\n                \r\nHow do I calculate the median of an array of numbers using Ruby?\nI am a beginner and am struggling with handling the cases of the array being of odd and even length.\n    ", "Answer": "\r\nHere is a solution that works on both even and odd length array and won't alter the array:\n```\ndef median(array)\n  return nil if array.empty?\n  sorted = array.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to calculate the median of an array?\r\n                \r\nI'm trying to calculate the total, mean and median of an array thats populated by input received by a textfield. I've managed to work out the total and the mean, I just can't get the median to work. I think the array needs to be sorted before I can do this, but I'm not sure how to do this. Is this the problem, or is there another one that I didn't find? Here is my code:\n\n```\nimport java.applet.Applet;\nimport java.awt.Graphics;\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class whileloopq extends Applet implements ActionListener\n{\n    Label label;\n    TextField input;\n    int num;\n    int index;\n    int[] numArray = new int[20];\n    int sum;\n    int total;\n    double avg;\n    int median;\n\n\n\n    public void init ()\n    {\n        label = new Label(\"Enter numbers\");\n        input = new TextField(5);\n        add(label);\n        add(input);\n        input.addActionListener(this);\n        index = 0;\n    }\n\n    public void actionPerformed (ActionEvent ev)\n    {\n        int num = Integer.parseInt(input.getText());\n        numArray[index] = num;\n        index++;\n        if (index == 20)\n        input.setEnabled(false);\n            input.setText(\"\");\n        sum = 0;\n        for (int i = 0; i < numArray.length; i++)\n        {\n            sum += numArray[i];\n        }\n        total = sum;\n        avg = total / index;\n\n        median = numArray[numArray.length/2];\n\n\n\n        repaint();\n\n    }\n\n\n\n    public void paint (Graphics graf)\n    {\n\n\n\n        graf.drawString(\"Total   = \" + Integer.toString(total), 25, 85);\n        graf.drawString(\"Average = \" + Double.toString(avg), 25, 100);\n        graf.drawString(\"Median = \" + Integer.toString(median), 25, 115);\n\n\n\n    }\n}\n```\n\n    ", "Answer": "\r\nThe Arrays class in Java has a static sort function, which you can invoke with ```\nArrays.sort(numArray)```\n.\n```\nArrays.sort(numArray);\ndouble median;\nif (numArray.length % 2 == 0)\n    median = ((double)numArray[numArray.length/2] + (double)numArray[numArray.length/2 - 1])/2;\nelse\n    median = (double) numArray[numArray.length/2];\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to implement a Median-heap\r\n                \r\nLike a Max-heap and Min-heap, I want to implement a Median-heap to keep track of the median of a given set of integers. The API should have the following three functions:\n\n```\ninsert(int)  // should take O(logN)\nint median() // will be the topmost element of the heap. O(1)\nint delmedian() // should take O(logN)\n```\n\n\nI want to use an array (a) implementation to implement the heap where the children of array index k are stored in array indices 2*k and 2*k + 1. For convenience, the array starts populating elements from index 1. \nThis is what I have so far:\nThe Median-heap will have two integers to keep track of number of integers inserted so far that are > current median (gcm) and < current median (lcm). \n\n```\nif abs(gcm-lcm) >= 2 and gcm > lcm we need to swap a[1] with one of its children. \nThe child chosen should be greater than a[1]. If both are greater, \nchoose the smaller of two.\n```\n\n\nSimilarly for the other case. I can't come up with an algorithm for how to sink and swim elements. I think it should take into consideration how close the number is to the median, so something like:\n\n```\nprivate void swim(int k) {\n    while (k > 1 && absless(k, k/2)) {   \n        exch(k, k/2);\n        k = k/2;\n    }\n}\n```\n\n\nI can't come up with the entire solution though. \n    ", "Answer": "\r\nYou need two heaps: one min-heap and one max-heap. Each heap contains about one half of the data. Every element in the min-heap is greater or equal to the median, and every element in the max-heap is less or equal to the median.\n\nWhen the min-heap contains one more element than the max-heap, the median is in the top of the min-heap. And when the max-heap contains one more element than the min-heap, the median is in the top of the max-heap.\n\nWhen both heaps contain the same number of elements, the total number of elements is even. \nIn this case you have to choose according your definition of median: a) the mean of the two middle elements; b) the greater of the two; c) the lesser; d) choose at random any of the two...\n\nEvery time you insert, compare the new element with those at the top of the heaps in order to decide where to insert it. If the new element is greater than the current median, it goes to the min-heap. If it is less than the current median, it goes to the max heap. Then you might need to rebalance. If the sizes of the heaps differ by more than one element, extract the min/max from the heap with more elements and insert it into the other heap.\n\nIn order to construct the median heap for a list of elements, we should first use a linear time algorithm and find the median. Once the median is known, we can simply add elements to the Min-heap and Max-heap based on the median value. Balancing the heaps isn't required because the median will split the input list of elements into equal halves.\n\nIf you extract an element you might need to compensate the size change by moving one element from one heap to another. This way you ensure that, at all times, both heaps have the same size or differ by just one element.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to find median and quantiles using Spark\r\n                \r\nHow can I find median of an ```\nRDD```\n of integers using a distributed method, IPython, and Spark? The ```\nRDD```\n is approximately 700,000 elements and therefore too large to collect and find the median.\n\nThis question is similar to this question. However, the answer to the question is using Scala, which I do not know.\n\nHow can I calculate exact median with Apache Spark?\n\nUsing the thinking for the Scala answer, I am trying to write a similar answer in Python.\n\nI know I first want to sort the ```\nRDD```\n. I do not know how. I see the ```\nsortBy```\n (Sorts this RDD by the given ```\nkeyfunc```\n) and ```\nsortByKey```\n (Sorts this ```\nRDD```\n, which is assumed to consist of (key, value) pairs.) methods. I think both use key value and my ```\nRDD```\n only has integer elements.\n\n\nFirst, I was thinking of doing ```\nmyrdd.sortBy(lambda x: x)```\n? \nNext I will find the length of the rdd (```\nrdd.count()```\n).\nFinally, I want to find the element or 2 elements at the center of the rdd. I need help with this method too.\n\n\nEDIT:\n\nI had an idea. Maybe I can index my ```\nRDD```\n and then key = index and value = element. And then I can try to sort by value? I don't know if this is possible because there is only a ```\nsortByKey```\n method.\n    ", "Answer": "\r\nOngoing work\n\nSPARK-30569 - Add DSL functions invoking percentile_approx\n\nSpark 2.0+:\n\nYou can use ```\napproxQuantile```\n method which implements Greenwald-Khanna algorithm:\n\nPython:\n\n```\ndf.approxQuantile(\"x\", [0.5], 0.25)\n```\n\n\nScala:\n\n```\ndf.stat.approxQuantile(\"x\", Array(0.5), 0.25)\n```\n\n\nwhere the last parameter is a relative error. The lower the number the more accurate results and more expensive computation.\n\nSince Spark 2.2 (SPARK-14352) it supports estimation on multiple columns:\n\n```\ndf.approxQuantile([\"x\", \"y\", \"z\"], [0.5], 0.25)\n```\n\n\nand \n\n```\ndf.approxQuantile(Array(\"x\", \"y\", \"z\"), Array(0.5), 0.25)\n```\n\n\nUnderlying methods can be also used in SQL aggregation (both global and groped) using ```\napprox_percentile```\n function:\n\n```\n> SELECT approx_percentile(10.0, array(0.5, 0.4, 0.1), 100);\n [10.0,10.0,10.0]\n> SELECT approx_percentile(10.0, 0.5, 100);\n 10.0\n```\n\n\nSpark < 2.0\n\nPython\n\nAs I've mentioned in the comments it is most likely not worth all the fuss. If data is relatively small like in your case then simply collect and compute median locally:\n\n```\nimport numpy as np\n\nnp.random.seed(323)\nrdd = sc.parallelize(np.random.randint(1000000, size=700000))\n\n%time np.median(rdd.collect())\nnp.array(rdd.collect()).nbytes\n```\n\n\nIt takes around 0.01 second on my few years old computer and around 5.5MB of memory.\n\nIf data is much larger sorting will be a limiting factor so instead of getting an exact value it is probably better to sample, collect, and compute locally. But if you really want a to use Spark something like this should do the trick (if I didn't mess up anything):\n\n```\nfrom numpy import floor\nimport time\n\ndef quantile(rdd, p, sample=None, seed=None):\n    \"\"\"Compute a quantile of order p ∈ [0, 1]\n    :rdd a numeric rdd\n    :p quantile(between 0 and 1)\n    :sample fraction of and rdd to use. If not provided we use a whole dataset\n    :seed random number generator seed to be used with sample\n    \"\"\"\n    assert 0 <= p <= 1\n    assert sample is None or 0 < sample <= 1\n\n    seed = seed if seed is not None else time.time()\n    rdd = rdd if sample is None else rdd.sample(False, sample, seed)\n\n    rddSortedWithIndex = (rdd.\n        sortBy(lambda x: x).\n        zipWithIndex().\n        map(lambda (x, i): (i, x)).\n        cache())\n\n    n = rddSortedWithIndex.count()\n    h = (n - 1) * p\n\n    rddX, rddXPlusOne = (\n        rddSortedWithIndex.lookup(x)[0]\n        for x in int(floor(h)) + np.array([0L, 1L]))\n\n    return rddX + (h - floor(h)) * (rddXPlusOne - rddX)\n```\n\n\nAnd some tests:\n\n```\nnp.median(rdd.collect()), quantile(rdd, 0.5)\n## (500184.5, 500184.5)\nnp.percentile(rdd.collect(), 25), quantile(rdd, 0.25)\n## (250506.75, 250506.75)\nnp.percentile(rdd.collect(), 75), quantile(rdd, 0.75)\n(750069.25, 750069.25)\n```\n\n\nFinally lets define median:\n\n```\nfrom functools import partial\nmedian = partial(quantile, p=0.5)\n```\n\n\nSo far so good but it takes 4.66 s in a local mode without any network communication. There is probably way to improve this, but why even bother?\n\nLanguage independent (Hive UDAF): \n\nIf you use ```\nHiveContext```\n you can also use Hive UDAFs. With integral values:\n\n```\nrdd.map(lambda x: (float(x), )).toDF([\"x\"]).registerTempTable(\"df\")\n\nsqlContext.sql(\"SELECT percentile_approx(x, 0.5) FROM df\")\n```\n\n\nWith continuous values:\n\n```\nsqlContext.sql(\"SELECT percentile(x, 0.5) FROM df\")\n```\n\n\nIn ```\npercentile_approx```\n you can pass an additional argument which determines a number of records to use.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Placement of median labels at median line\r\n                \r\nI'm unable to properly place median labels in a boxplot. I would like to place median values on every boxplot, at the median line.\n\nI've extensively googled labeling boxplots and can place one value when hue is not >1. When hue has more than 1 value, the medians are not properly placed and only one value is shown on graph.\n\n```\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport matplotlib.ticker as ticker\n\n#Create box plots with median values\ndims = (11.7, 8.27)\nfig, ax = plt.subplots(figsize=dims)\nsns.boxplot(x= \"inquiryReason\", y=\"Time(hr)\", data=yr1, hue=\"Country\",\n                  order=['Disease-Specific','Other'])\n#Calculate medians    \nmedians = yr1.groupby(['responseClass', 'Country']) \n       ['Time(hr)'].median().values\nmedian_labels = [str(np.round(s, 2)) for s in medians]\n\n#Place median values on plot\npos = range(len(medians))\nfor tick,label in zip(pos,ax.get_xticklabels()):\nax.text(pos[tick], medians[tick], median_labels[tick], \n        horizontalalignment='center', size='small', color='b', \n        weight='semibold')\n\n# rotate x-axis by 20 degrees\nax.set_xticklabels(ax.get_xticklabels(), rotation=20)\n```\n\n\ntimeVReason_Country\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding block median in median of medians algorithm\r\n                \r\nI know that formula for the median of medians algorithm is :\n```\nT(n)<= T(0.7n)+T(0.2n)+O(n)```\n and ```\nO(n)```\n came from finding median of each block(size of 5), and I'm wondering why It takes O(n) to find median of each block.. that sound like finding median of one block takes ```\nO(1)```\n. How is it possible?\n    ", "Answer": "\r\nSize of each block is constant (```\n5```\n). Hence, Finding the median of each block is in ```\nO(1)```\n (sort the block in ```\nO(1)```\n and take the mid index as a median). Therefore, finding the median of all blocks is in ```\nO(n)```\n. And after that find the median of the median of each block which is answered in your other question.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median in Prolog\r\n                \r\nI'm trying to write rules for prolog that define a median of a list by using a partitioning method.\n\n```\npartition([], V, [], []).\npartition([X | L], V, [X | A], B) :- (V > X), !, partition(L, V, A, B).\npartition([X | L], V, A, [X | B]) :- (V < X), !, partition(L, V, A, B).\npartition([X | L], V, A, B) :- (V =:= X), partition(L, V, A, B).\n\nmedian([A], A).\nmedian(L, M) :- partition(L, M, A, B), length(A, X), length(B, X).\n```\n\n\n```\npartition(L, V, A, B)```\n partitions list L into 2 sublists A and B with A having values less than V and B having values greater than V.\n\nThat part works fine, but when I try to write my median, I'm trying to say that it is a median when after partitioning, A and B are the same length.\n\nmedian works when I use concrete values, like ```\nmedian([1, 2, 3], 2)```\n\n\nbut when I try ```\nmedian([1, 2, 3], X).```\n\n\nit gives an error message ```\nERROR: >/2: Arguments are not sufficiently instantiated```\n.\n\nI was wondering how to fix that? Thanks!\n    ", "Answer": "\r\n```\n=:=```\n operator requires both its operands to be instantiated. When you ask for ```\nmedian([1, 2, 3], X)```\n, one of its operands becomes ```\nX```\n, which is not instantiated yet. The same problem is with other arithmetic operators like ```\n>```\n.\n\nTo correct it, you can either use constraints programming (which provides arithmetic operators that aren't so strict) or rework your program to only use arithmetic on list elements. For example, try a classical approach like: sort the list of numbers, then divide the list into three segments: list of length N, a single element, list of length N. Hint: you can do the part after sorting using just a single ```\nappend/3```\n and two ```\nlength/2```\n invocations.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "interviewstreet median challenge\r\n                \r\nProblem\nThe median of M numbers is defined as the \n1) if M is odd middle number after sorting them in order\n2) if M is even the average number of the middle 2 numbers (again after sorting) \nYou have an empty number list at first. Then you can add or remove some number from the list. For each add or remove operation, output the median of numbers in the list.\n\nExample : For a set of m = 5 numbers, { 9, 2, 8, 4, 1 } the median is the third number in sorted set { 1, 2, 4, 8, 9 } which is 4. Similarly for set of m = 4, { 5, 2, 10, 4 }, the median is the average of second and the third element in the sorted set { 2, 4, 5, 10 } which is (4+5)/2 = 4.5  \n\nMy approach\nI think the problem can be solved in this way..\nIdea is to use previous median value and pointer to find new median value instead of recalculating at every add or remove operation.\n\n1) Use multisets which always keep elements in order and allow duplicates. In other words maintain sorted list somehow.\n\n2) If the operation is add\n\n```\n2.1) Insert this element into set and then calculate the median\n\n2.2) if the size of set is 1 then first element will be the median\n\n2.3) if the size of set is even, then\n\n           if new element is larger then prev median, new median will be avg of prev median\n\n               and the next element in set.\n\n           else new median will be avg of prev median and previous of prev element in the set.\n\n2.4) if the size is odd, then\n\n          if new element is larger then prev median\n\n                 if also less then 2nd element of prev median ( 2nd element used to calculate avg\n\n                    of prev median) then this new element to be added will be new median\n\n                 else median will be 2nd element use to calculate the avg during last iteration prev\n\n                    median.\n\n          else\n\n                 new median will be previous of prev median element in the set\n```\n\n\n3) If the operation is remove\n\n```\n3.1) First calculate the new median\n\n3.2) If the size of set is 0 can't remove\n\n3.3) If the size is 1 if the first element is the element to be removed, remove it else can't remove.\n\n3.4) If the size of set is even, then\n\n           if the element to be deleted is greater than or equal to 2nd element of prev median, then\n\n               1st element of prev median will be new median\n\n          else 2nd element of prev median will be the new median\n\n3.5) If the size of set is odd, then\n\n           if the element to be deleted is the prev median then find the avg of its prev and  next element.\n\n           else if the element to be deleted is greater then prev median, new median will be avg of prev median and previous to prev median\n\n           else median will be avg of prev median and next element to prev median.\n\n3.6) Remove the element. \n```\n\n\nHere is the working code ...http://justprogrammng.blogspot.com/2012/06/interviewstreet-median-challenge.html. What are your views on this approach?\n    ", "Answer": "\r\nYour approach seems like it could work, but from the description and the code, you can tell that there is a lot of casework involved. I wouldn't like to be the one having to debug that! So let me give you an alternate solution that should involve less cases, and therefore be much simpler to get right.\n\nKeep two multisets (this algorithm also works with two priority queues, as we're only going to look at the extremes of each one). The first, ```\nminset```\n, is going to keep the smallest n/2 numbers, and the second, ```\nmaxset```\n, is going to store the last n/2 numbers.\n\nWhenever you add a number:\n\n\nIf it is greater than ```\nmax(minset)```\n, add it to ```\nmaxset```\n\nOtherwise, add it to ```\nminset```\n\n\n\nNote that this doesn't guarantee the n/2 condition. Therefore, we should add one extra \"fixing\" step:\n\n\nIf ```\nmaxset.size() > minset.size()```\n, remove the smallest element from ```\nmaxset```\n and insert it to ```\nminset```\n.\nIf ```\nminset.size() > minset.size() + 1```\n, remove the biggest element from ```\nminset```\n and insert it to ```\nmaxset```\n.\n\n\nAfter this is done, we just have to get the median. This should be really easy to do with our data structure: depending on whether the current n is even or odd, it's either ```\nmax(minset)```\n or the average between ```\nmax(minset)```\n and ```\nmin(maxset)```\n.\n\nFor the removal operation, just try to remove it from any of the sets and do the fixing afterwards.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding median of a list using quick select and median-of-medians\r\n                \r\nSuppose A = [1, 2, 3, 4, 5, 6, 7, 8, 9]. I have to find the median here which is 5 and I am required to use the concept of quick select and median-of-medians. I have made the following code but for some reason, it outputs 4 which is wrong. Where could I have gone wrong?\nThe following are just some auxiliary functions needed for the latter functions.\n```\nint quick_select(int A[], int p, int r, int k);\n\nvoid swapElements(int* i, int* j)\n{\n    int temp;\n    temp = *i;\n    *i = *j;\n    *j = temp;\n}\nvoid insertion_sort(int A[], int from, int to)\n{\n    for(int i = from; i < to; i++) {\n        for(int j = i + 1; j > from && A[j] < A[j - 1]; j--) {\n            int temp = A[j - 1];\n            A[j - 1] = A[j];\n            A[j] = temp;\n        }\n    }\n}\n```\n\nFor the following, I made the code for median-of-medians. What this does is that it partitions the whole array into groups of 5 elements and at most 1 group containing less than 5 elements.\n```\nint median_of_medians(int A[], int p, int r){\n    int N = (r-p)+1;\n    int numberOfGroups = ceil((double)N/(double)5);\n    int groupsOf5 = floor((double)N/(double)5);\n    int lessThan5 = numberOfGroups - groupsOf5;\n    int *arrayofMedians = (int*)malloc(numberOfGroups*sizeof(int));\n    int rank = floor(((double)N+(double)1)/(double)2); //floor((N+1)/2)\n\n    //sort each groups\n    if(N>=5)\n    {\n        int ctrLeft = 0, ctrRight = 4;\n        for(int j=1; j<=numberOfGroups;j++)\n        {\n            insertion_sort(A,ctrLeft,ctrRight);\n            if(j<groupsOf5)\n            {\n                ctrLeft = ctrLeft + 5;\n                ctrRight = ctrRight + 5;\n            }\n            else if(lessThan5>0)\n            {\n                ctrLeft = ctrRight + 1;\n                ctrRight = N-1; //ctrRight+1+((N-1)%5);\n            }\n\n        }\n    }\n    else if(lessThan5!=0)\n    {\n        int ctrLeft = 0, ctrRight = N-1;\n        insertion_sort(A, ctrLeft, ctrRight);\n\n    }\n\n    //find median from each group then put each median to arrayofMedians\n    int ctr = 0;\n    for(int j=0; j<numberOfGroups; j++)\n    {\n        if(j<groupsOf5)\n        {\n            arrayofMedians[ctr] = A[2+(j*5)];\n            ctr++;\n        }\n        else\n        {\n            int rem = N % 5;\n            if((rem % 2)==0) //if even\n            {\n                arrayofMedians[ctr] = A[(5*groupsOf5) + ((rem/2) - 1)];\n            }\n            else //if odd\n            {\n                arrayofMedians[ctr] = A[(5*groupsOf5) + (((rem+1)/2)-1)];\n            }\n            ctr++;\n        }\n\n    }\n\n    //for(int i=0; i<=numberOfGroups-1; i++)\n        //printf(\"%d \", arrayofMedians[i]);\n    //Find median from arrayofMedians\n\n    int finalMedian = quick_select(arrayofMedians, 0, numberOfGroups-1,rank);\n\n    return finalMedian;\n}\n```\n\nThis is now the part where it partitions the array using the median found in median-of-medians\n```\nint median_partition(int A[], int p, int r){\n    int median = median_of_medians(A, p, r);\n    //find index ind of median\n    int ind;\n    for(int j=p; j<=r; j++)\n    {\n        if(A[j]==median)\n            ind = j; //we found the index\n    }\n\n    swapElements(A+ind, A+r); //then swap A[ind] with A[r]\n\n\n    int x = A[r];\n    int i = p-1;\n    for(int j=p; j<=r-1; j++)\n    {\n        if(A[j]<=x)\n        {\n            i++;\n            swapElements(A+i, A+j);\n        }\n    }\n    swapElements(A+(i+1), A+r);\n    return(i+1);\n}\n```\n\nThis is the function for quick_select\n```\nint quick_select(int A[], int p, int r, int rank){\n    if(p==r)\n        return A[p];\n    int q = median_partition(A, p, r); //median_partition(A, p, r)\n    int k = q-p+1;\n    if(rank==k)\n        return A[q];\n    else if(rank<k)\n        return quick_select(A, p, q-1, rank);\n    else\n        return quick_select(A, q+1, r, rank-k);\n}\n```\n\nthis is the function for the main()\n```\nint main(){\n    int T, M, *arr;\n    scanf(\"%d\", &T);\n    while(T > 0){\n        scanf(\"%d\", &M);\n        arr = (int*)malloc(M*sizeof(int));\n\n        //read the elements of the input array\n        for(int i=0; i<M; i++){\n            scanf(\"%d\",&arr[i]);\n        }\n\n        int median_index = ((M+1)/2);\n        printf(\"Median: %d\\n\", quick_select(arr, 0, M-1, median_index));\n        T--;\n    }\n}\n\n```\n\n    ", "Answer": "\r\n\n```\n    int finalMedian = quick_select(arrayofMedians, 0, numberOfGroups-1,rank);\n```\n\n\nHere ```\nrank```\n is wrong - it is set to the middle of array ```\nA```\n, but should rather be the middle of array ```\narrayofMedians```\n. Change to:\n```\n    int finalMedian = quick_select(arrayofMedians, 0, numberOfGroups-1, ctr/2);\n```\n\nAlso in the function ```\nint median_of_medians(int A[], int p, int r)```\n you're indexing array ```\nA```\n always from index 0 on, while indexing should rather start at ```\np```\n. To correct this, insert ```\nA += p;```\n near the start of the function.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Compute Median of Values Stored In Vector - C++?\r\n                \r\nI'm a programming student, and for a project I'm working on, on of the things I have to do is compute the median value of a vector of int values. I'm to do this using only the sort function from the STL and vector member functions such as ```\n.begin()```\n, ```\n.end()```\n, and ```\n.size()```\n.\nI'm also supposed to make sure I find the median whether the vector has an odd number of values or an even number of values.\nAnd I'm Stuck, below I have included my attempt. So where am I going wrong? I would appreciate if you would be willing to give me some pointers or resources to get going in the right direction.\nCode:\n```\nint CalcMHWScore(const vector<int>& hWScores)\n{\n     const int DIVISOR = 2;\n     double median;\n     sort(hWScores.begin(), hWScores.end());\n     if ((hWScores.size() % DIVISOR) == 0)\n     {\n         median = ((hWScores.begin() + hWScores.size()) + (hWScores.begin() + (hWScores.size() + 1))) / DIVISOR);\n     }\n     else \n     {\n       median = ((hWScores.begin() + hWScores.size()) / DIVISOR)\n     }\n\n    return median;\n}\n```\n\n    ", "Answer": "\r\nThere is no need to completely sort the vector: ```\nstd::nth_element```\n can do enough work to put the median in the correct position. See my answer to this question for an example.\n\nOf course, that doesn't help if your teacher forbids using the right tool for the job.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median of median  implementation\r\n                \r\nHere is pseudo code for implementation of median by dividing array into 5 groups\n\n```\nselect(int A[],int first, int last, int i) {\n    n = last - first + 1; /* n is the number elements to select from */\n    if (i > n) {return ERROR;} /* there is no ith smallest element */\n    if( n < = 100 ) {\n        /********************* For Small n *********************/\n        Run selection on A[first..last] taking at most n(n-1)/2 < 50n comparisons;\n        swap A[first+i-1] with A[first] /* put ith smallest in A[first] */\n    }\n    else /* n > 100 */ {\n        /********** main recursion *************************/\n        numGroups = n / 5; /* integer division, round down */\n        for group = 0 to numGroups-1 do {\n            shift = group*5;\n            /* A[first+shift] is the start of the group, A[first+shift+4] is end of group */\n            find median of A[first+shift .. first+shift+4] and swap it into A[first + group];\n        } /* for group */;\n        lastMedian = first+numGroups-1;\n        /* now the medians of the numGroups groups are all A[first .. lastMedian] */\n        /****** the first recursive call to find median of medians ******/\n        select(A, first, lastMedian, numGroups/2);\n        /* now median of medians is in slot A[first] */\n        /*********** partition array *********************/\n        k = partition(A,first, last); /* See partition on page 146 of text */\n        /* now k is the index where the median of median winds up, the smaller elements */\n        /* will be in A[first..k-1] and larger elements will be in A[k+1..last] */\n        /************ where is the ith smallest element? ********/\n        if (k == first + i -1) {\n            /* ith smallest is the median of medians in A[k] */\n            swap A[k] and A[first] and return\n        } else if (k > = first + i -1) {\n            /* second recursion to find ith smallest among the \"small\" keys in A[first..k-1] */\n            select(A, first, k-1, i);\n        } else /* k < first + i -1 */ {\n            /* second recursion to find the proper element among the \"large\" keys */\n            numSmaller = k-first+1; /* the number of \"smaller\" keys not recursed on */\n            newi = i - numSmaller;\n            /* the ith smallest of A[first..last] is the newi smallest of A[k+1..last] */\n            select(A, k+1, last, newi);\n            /* ith smallest now in A[k+1], put it in A[first] */\n            swap A[k+1] and A[first];\n        } /* if k - second else */\n    } /* if n - else part */\n} /*select */\n```\n\n\nI have two questions:\n\n\nfirst one is related to partition code, here we are given only array and its bounds, no pivot element is indicated, so how this partition code should look? We should choose pivot index and pivot element as:\n\n```\nint pivotindex=(end-begin)/2\nint pivot values=a[pivotindex];\n```\n\n\nor it should be random choice?\nhow to  output  selected  median?\n\n\nGenerally language does not matter, but it would  be great if example would be shown in C++.\n    ", "Answer": "\r\nExplanation of the median - of - medians algorithm to find the k-th largest integer out of n can be found here:\nhttp://cs.indstate.edu/~spitla/presentation.pdf\n\nImplementation in c++ is below:\n\n```\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint findMedian(vector<int> vec){\n//    Find median of a vector\n    int median;\n    size_t size = vec.size();\n    median = vec[(size/2)];\n    return median;\n}\n\nint findMedianOfMedians(vector<vector<int> > values){\n    vector<int> medians;\n\n    for (int i = 0; i < values.size(); i++) {\n        int m = findMedian(values[i]);\n        medians.push_back(m);\n    }\n\n    return findMedian(medians);\n}\n\nvoid selectionByMedianOfMedians(const vector<int> values, int k){\n//    Divide the list into n/5 lists of 5 elements each\n    vector<vector<int> > vec2D;\n\n    int count = 0;\n    while (count != values.size()) {\n        int countRow = 0;\n        vector<int> row;\n\n        while ((countRow < 5) && (count < values.size())) {\n            row.push_back(values[count]);\n            count++;\n            countRow++;\n        }\n        vec2D.push_back(row);\n    }\n\n    cout<<endl<<endl<<\"Printing 2D vector : \"<<endl;\n    for (int i = 0; i < vec2D.size(); i++) {\n        for (int j = 0; j < vec2D[i].size(); j++) {\n            cout<<vec2D[i][j]<<\" \";\n        }\n        cout<<endl;\n    }\n    cout<<endl;\n\n//    Calculating a new pivot for making splits\n    int m = findMedianOfMedians(vec2D);\n    cout<<\"Median of medians is : \"<<m<<endl;\n\n//    Partition the list into unique elements larger than 'm' (call this sublist L1) and\n//    those smaller them 'm' (call this sublist L2)\n    vector<int> L1, L2;\n\n    for (int i = 0; i < vec2D.size(); i++) {\n        for (int j = 0; j < vec2D[i].size(); j++) {\n            if (vec2D[i][j] > m) {\n                L1.push_back(vec2D[i][j]);\n            }else if (vec2D[i][j] < m){\n                L2.push_back(vec2D[i][j]);\n            }\n        }\n    }\n\n//    Checking the splits as per the new pivot 'm'\n    cout<<endl<<\"Printing L1 : \"<<endl;\n    for (int i = 0; i < L1.size(); i++) {\n        cout<<L1[i]<<\" \";\n    }\n\n    cout<<endl<<endl<<\"Printing L2 : \"<<endl;\n    for (int i = 0; i < L2.size(); i++) {\n        cout<<L2[i]<<\" \";\n    }\n\n//    Recursive calls\n    if ((k - 1) == L1.size()) {\n        cout<<endl<<endl<<\"Answer :\"<<m;\n    }else if (k <= L1.size()) {\n        return selectionByMedianOfMedians(L1, k);\n    }else if (k > (L1.size() + 1)){\n        return selectionByMedianOfMedians(L2, k-((int)L1.size())-1);\n    }\n\n}\n\nint main()\n{\n    int values[] = {2, 3, 5, 4, 1, 12, 11, 13, 16, 7, 8, 6, 10, 9, 17, 15, 19, 20, 18, 23, 21, 22, 25, 24, 14};\n\n    vector<int> vec(values, values + 25);\n\n    cout<<\"The given array is : \"<<endl;\n    for (int i = 0; i < vec.size(); i++) {\n        cout<<vec[i]<<\" \";\n    }\n\n    selectionByMedianOfMedians(vec, 8);\n\n    return 0;\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of medians is not the real median. Correct?\r\n                \r\nPersonally, I think the median of medians is not the real median. Correct?So if the above statement is true, why using the median of medians as the pivot to partition the array to find the Kth min elem's time complexity worst case is O(n)? The \"n\" is the num of elems.\n    ", "Answer": "\r\nMedian of medians is indeed only an approximation, not necessarily the actual median.\n\nIt is used as an optimization, to calculate the pivot for a partition of the array in algorithms like Quicksort or Quickselect, such that the worst case complexity of ```\nO(n^2)```\n is avoided.\n\nWikipedia article about it, saying:\n\n\n  Although this approach optimizes quite well, it is typically\n  outperformed in practice by instead choosing random pivots, which has\n  average linear time for selection and average linearithmic time for\n  sorting, and avoids the overhead of computing the pivot.\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "What is median split? Is it same as median?\r\n                \r\nIn one of the research paper I follow they have said \"Classes have been derived from scores with a median split\"\n\nCan anyone please explain if this median split is same as median? Thank you :)\n    ", "Answer": "\r\nA median split is when a set of elements is dichotomised (i.e. split into two) according to the statistical median (50th percentile). One group will contain all elements greater than the median and the other group will contain all elements less than the median.\n\nSo if you have a series of numbers (e.g. from 1 to 6) and you do a median split (with the median being 3.5 on this occasion) you will essentially split the series of numbers into two groups:\n\n```\nGroup a would be 1, 2, 3```\n\n\nand\n\n```\nGroup b would be 4, 5, 6```\n\n\nYou can see another example here:\n\n\n  For example, we administer a scale of Optimism, and then use a median-split to label the people above the median as Optimists, and those below the median as Pessimists.\n\n\nEssentially, the median split is not the median itself but it is a technique that uses the median to perform a split on a set of elements.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Explanation of the Median of Medians algorithm\r\n                \r\nThe ```\nMedian of medians```\n approach is very popular in ```\nquicksort```\n type partitioning algorithms to yield a fairly good pivot, such that it partitions the array uniformly. Its logic is given in Wikipedia as:\n\n\n  The chosen pivot is both less than and greater than half of the elements in the list of medians, which is around n/10 elements (1/2 * (n/5)) for each half. Each of these elements is a median of 5, making it less than 2 other elements and greater than 2 other elements outside the block. Hence, the pivot is less than 3(n/10) elements outside the block, and greater than another 3(n/10) elements outside the block. Thus the chosen median splits the elements somewhere between 30%/70% and 70%/30%, which assures worst-case linear behavior of the algorithm.\n\n\nCan somebody explain it a bit lucidly for me. I am finding it difficult to understand the logic.\n    ", "Answer": "\r\nThink of the following set of numbers:\n\n```\n5 2 6 3 1\n```\n\n\nThe median of these numbers is ```\n3```\n. Now if you have a number ```\nn```\n, if ```\nn > 3```\n, then it is bigger than at least half of the numbers above. If ```\nn < 3```\n, then it is smaller than at least half of the numbers above.\n\nSo that is the idea. That is, for each set of 5 numbers, you get their median. Now you have ```\nn / 5```\n numbers. This is obvious.\n\nNow if you get the median of those numbers (call it ```\nm```\n), it is bigger than half of them and smaller than the other half (by definition of median!). In other words, ```\nm```\n is bigger than ```\nn / 10```\n numbers (which themselves were medians of small 5 element groups) and bigger than another ```\nn / 10```\n numbers (which again were medians of small 5 element groups).\n\nIn the example above, we saw that if the median is ```\nk```\n and you have ```\nm > k```\n, then ```\nm```\n is also bigger than 2 other numbers (that were themselves smaller than ```\nk```\n). This means that for each of those smaller 5 element groups where ```\nm```\n was bigger than its median, ```\nm```\n is also bigger than two other numbers. This makes it at least 3 numbers (2 numbers + the median itself) in each of those ```\nn / 10```\n small 5 element groups, that are smaller than ```\nm```\n. Hence, ```\nm```\n is at least bigger than ```\n3n/10```\n numbers.\n\nSimilar logic for the number of elements ```\nm```\n is bigger than.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median select algorithm - does it find the absolute median, or a \"median of medians\" close to the absolute median?\r\n                \r\nSection 9.3 in CLRS 3rd edition \"Selection in worst-case linear time\" talks about the \"Select\"  algorithm (sometimes called the BFPRT algorithm due to Blum, Floyd, Pratt, Rivest, and Tarjan) for finding the median of a list in O(n) time at worst case. I got a little confused as I tried to run a sample on the whiteboard. I understand that a certain number of elements can be eliminated at each call to \"Select\" (I have read 30% are eliminated versus 70% that need to be  checked again), what I was confused about was which part of the array can be eliminated, i.e. if the array is visualized as a matrix with height 5 and width n/5, then which quadrant(s) do the eliminated elements rest in? I originally thought it was two diagonally adjacent quadrants but now I am thinking it is only one quadrant depending on what the median of medians is (see steps 5, 6, and 7 here).\n\nSo I went to wikipedia to see if there was a quick explanation with less analysis than CLRS (for the sake of understanding the algorithm before I jumped back to CLRS for the analysis). I came to this, particularly 'Finally, the \"median of medians' is chosen to be the pivot.\" from the sound of the description in wikipedia, \"Select\" does not find the true median rather a element that is median-enough for the purpose of choosing a pivot for quicksort.\n\nSo what does \"Select\" do in terms of the true median, and how does it do it? The phrase that comes to mind through all of this is \"partial hierarchy\", which as I understand, is the reason \"Select\" works, but by what logic can you eliminate elements from the list from being the median based on this partial hierarchy? \n    ", "Answer": "\r\nIt finds the absolute median.\n\nAs you said, \"Select\" does not find the true median rather a element that is median-enough for the purpose of choosing a pivot for quicksort.  In particular it is median enough that it is guaranteed to drop at least 30% of the dataset on every iteration.  Unfortunately it is also an expensive operation.\n\nThe key idea is that the median of medians is less than or equal to 3 out of every 5 elements whose median is less than or equal to it.  So it is less than or equal to 3 out of every 5 elements for half the groups of 5, so at least 30% of the set is less than or equal to it.  So it is in the largest 70% of the data set.\n\nSimilarly it is in the smallest 70% of the data set.\n\nThis guarantees that you avoid the potential pitfall of quickselect, which is picking pivot points that have extreme values.\n\nIf you wish to combine efficiency and a good worst case you can combine this with quickselect.  For instance 4 rounds of quickselect followed by one round of this followed by 4 rounds of quickselect, etc.  The expensive rounds of BFPRT guarantee ```\nO(n)```\n while the quickselect on average is going to be fast.  By putting off your first round of BFPRT until you've done several rounds of quickselect you can make the extra running time only a few percent more than quickselect on average.  (The worst case cost goes up by quite a bit, but we don't expect to encounter that.)\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of median algorithms understanding\r\n                \r\nI've searched around the web and visited the wiki page for the Median of median algorithm. But can't seem to find an explicit statement to my question:\n\nIf one has a very very large list of integers (TBs in size) and wants to find the median of this list in a distributed manner, would breaking the list up into sub lists of varying sizes (or equal doesn't really matter), then proceed to compute the medians of those smaller sub-lists, then compute the median of those medians result in the median of the original large list? \n\nFurthermore is this statement also correct for any of the kth statistics? I'd be interested in links to research etc in this area.\n    ", "Answer": "\r\nThe answer to your question is no. \n\nIf you want to understand how to actually select the k-th order statistics (including the median of course) in a parallel setting (distributed setting is of course not really different), take a look at this recent paper, in which I proposed a new algorithm improving the previous state of the art algorithm for parallel selection: \n\nDeterministic parallel selection algorithms on coarse-grained multicomputers\n\nHere, we use two weighted 3-medians as pivots, and partition around these pivots using five-way partitioning. We also implemented and tested the algorithm using MPI. Results are very good, taking into account that this is a deterministic algorithm exploiting the worst-case  O(n) selection algorithm. Using the randomized O(n) QuickSelect algorithm provides an extremely fast parallel algorithm.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of 5 sorted arrays\r\n                \r\nI am trying to find the solution for median of 5 sorted arrays. This was an interview questions. \n\nThe solution I could think of was merge the 5 arrays and then find the median [O(l+m+n+o+p)]. \n\nI know that for 2 sorted arrays of same size we can do it in log(2n). [by comparing the median of both arrays and then throwing out 1 half of each array and repeating the process]. .. Finding median can be constant time in sorted arrays .. so I think this is not log(n) ? .. what is the time complexity for this ?\n\n1] Is there a similar solution for 5 arrays . What if the arrays are of same size , is there a better solution then ?  \n\n2] I assume since this was asked for 5, there would be some solution for N sorted arrays ?\n\nThanks for any pointers. \n\nSome clarification/questions I asked back to the interviewer:\nAre the arrays of same length\n=> No\nI guess there would be an overlap in the values of arrays\n=> Yes\n\nAs an exercise, I think the logic for 2 arrays doesnt extend . Here is a try:\nApplying the above logic of 2 arrays to say 3 arrays:\n[3,7,9] [4,8,15] [2,3,9] ... medians 7,8,3\nthrow elements [3,7,9] [4,8] [3,9] .. medians 7,6,6\nthrow elements [3,7] [8] [9] ..medians 5,8,9 ...\nthrow elements [7] [8] [9] .. median = 8 ... This doesnt seem to be correct ?\n\nThe merge of sorted elements => [2,3,4,7,8,9,15] => expected median = 7\n    ", "Answer": "\r\n(This is a generalization of your idea for two arrays.)\n\nIf you start by looking at the five medians of the five arrays, obviously the overall median must be between the smallest and the largest of the five medians.\n\nProof goes something like this:  If a is the min of the medians, and b is the max of the medians, then each array has less than half of its elements less than a and less than half of its elements greater than b.  Result follows.\n\nSo in the array containing a, throw away numbers less than a; in the array containing b, throw away numbers greater than b...  But only throw away the same number of elements from both arrays.\n\nThat is, if a is j elements from the start of its array, and b is k elements from the end of its array, you throw away the first min(j,k) elements from a's array and the last min(j,k) elements from b's array.\n\nIterate until you are down to 1 or 2 elements total.\n\nEach of these operations (i.e., finding median of a sorted array and throwing away k elements from the start or end of an array) is constant time.  So each iteration is constant time.\n\nEach iteration throws away (more than) half the elements from at least one array, and you can only do that log(n) times for each of the five arrays...  So the overall algorithm is log(n).\n\n[Update]\n\nAs Himadri Choudhury points out in the comments, my solution is incomplete; there are a lot of details and corner cases to worry about.  So, to flesh things out a bit...\n\nFor each of the five arrays R, define its \"lower median\" as R[n/2-1] and its \"upper median\" as R[n/2], where n is the number of elements in the array (and arrays are indexed from 0, and division by 2 rounds down).\n\nLet \"a\" be the smallest of the lower medians, and \"b\" be the largest of the upper medians.  If there are multiple arrays with the smallest lower median and/or multiple arrays with the largest upper median, choose a and b from different arrays (this is one of those corner cases).\n\nNow, borrowing Himadri's suggestion:  Erase all elements up to and including a from its array, and all elements down to and including b from its array, taking care to remove the same number of elements from both arrays.  Note that a and b could be in the same array; but if so, they could not have the same value, because otherwise we would have been able to choose one of them from a different array.  So it is OK if this step winds up throwing away elements from the start and end of the same array.\n\nIterate as long as you have three or more arrays.  But once you are down to just one or two arrays, you have to change your strategy to be exclusive instead of inclusive; you only erase up to but not including a and down to but not including b.  Continue like this as long as both of the remaining one or two arrays has at least three elements (guaranteeing you make progress).\n\nFinally, you will reduce to a few cases, the trickiest of which is two arrays remaining, one of which has one or two elements.  Now, if I asked you:  \"Given a sorted array plus one or two additional elements, find the median of all elements\", I think you can do that in constant time.  (Again, there are a bunch of details to hammer out, but the basic idea is that adding one or two elements to an array does not \"push the median around\" very much.)\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median of two sorted arrays\r\n                \r\nMy question is with reference to Method 2 of this link. Here two equal length sorted arrays are given and we have to find the median of the two arrays merged. \n\n```\nAlgorithm:\n\n1) Calculate the medians m1 and m2 of the input arrays ar1[] \n   and ar2[] respectively.\n2) If m1 and m2 both are equal then we are done.\n     return m1 (or m2)\n3) If m1 is greater than m2, then median is present in one \n   of the below two subarrays.\n    a)  From first element of ar1 to m1 (ar1[0...|_n/2_|])\n    b)  From m2 to last element of ar2  (ar2[|_n/2_|...n-1])\n4) If m2 is greater than m1, then median is present in one    \n   of the below two subarrays.\n   a)  From m1 to last element of ar1  (ar1[|_n/2_|...n-1])\n   b)  From first element of ar2 to m2 (ar2[0...|_n/2_|])\n5) Repeat the above process until size of both the subarrays \n   becomes 2.\n6) If size of the two arrays is 2 then use below formula to get \n  the median.\n    Median = (max(ar1[0], ar2[0]) + min(ar1[1], ar2[1]))/2\n\nExample:\n\n   ar1[] = {1, 12, 15, 26, 38}\n   ar2[] = {2, 13, 17, 30, 45}\n\nFor above two arrays m1 = 15 and m2 = 17\n\nFor the above ar1[] and ar2[], m1 is smaller than m2. So median is present in one of the following two subarrays.\n\n   [15, 26, 38] and [2, 13, 17]\nLet us repeat the process for above two subarrays:\n\n    m1 = 26 m2 = 13.\nm1 is greater than m2. So the subarrays become\n\n  [15, 26] and [13, 17]\nNow size is 2, so median = (max(ar1[0], ar2[0]) + min(ar1[1], ar2[1]))/2\n                       = (max(15, 13) + min(26, 17))/2 \n                       = (15 + 17)/2\n                       = 16\n```\n\n\nI understand how they exclude halves of the arrays and say that the median element would be in particular halves of the arrays i.e. steps 1, 2, 3, 4, 5. \n\nBut what I can't fathom, how can they say that the median of the merged arrays would be the median of the merged arrays resulting after pruning the halves of the arrays i.e. the median of merge array of {1, 12, 15, 26, 38} and {2, 13, 17, 30, 45} would be the median of the merge array of {2,13,17} and {15, 26, 38}.\n\nPlease explain. Thanks in advance.\n    ", "Answer": "\r\nLet me help you visualize it. Lets say it is case 3, the same argument follows for the other case. That means we have identified the median is present in 1st half of ar1 or second half of ar2.  Now the question is why is the median of these halves same as the median of the original arrays, right.\n\nSo visualize putting just these relevant halves together in sorted order and finding its median. Now put the other left over halves back into this picture, where would they go. The first half of ar2, all n/2 elements have to go to the top of this new median and second half of arr1 all n/2 elements will have to go below this median (the exact locations is unimportant for median). So that means it will still be a median as equal number of elements are added above and below it. So the median of the two new halves is same as the median of the original set.\n\nTo be still more precise, let's see why first half of ar2 (a leftover half) has to go above the new median. That is the case because when we put all the elements together m2 has to go above the new median(since m2 < m1) which means all the first half of ar2 also have to go above the new median. In other words if m is the new median of the 2 selected halves, m2 <  m => all first half of ar2 < m. Similar argument for the lower half of ar1. This means the new median m will remain the median of the entire set.\n\nLooking more closely at your algo., though the approach is correct there might be a slight error in the algo while taking care of odd and even cases so beware while implementing.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to find Median [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Finding median of list in Python\r\n                            \r\n                                (28 answers)\r\n                            \r\n                    \r\n                Closed 6 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI have data like this.\n\n```\nRam,500\nSam,400\nTest,100\nRam,800\nSam,700\nTest,300\nRam,900\nSam,800\nTest,400\n```\n\n\nWhat is the shortest way to fine the \"median\" from above data.\nMy result should be something like...\n\nMedian = 1/2(n+1), where n is the number of data values in the sample.\n\n```\nTest 500\nSam 700\nRam 800\n```\n\n    ", "Answer": "\r\nPython 3.4 includes statistics built-in, so you can use the method ```\nstatistics.median```\n:\n\n```\n>>> from statistics import median\n>>> median([1, 3, 5])\n 3\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median VS survival median (from survfit)\r\n                \r\nThis may seem like a silly question, but I was wondering why the median from ```\nmedian```\n and the median from ```\nsurvfit```\n (\"survival package\") are different\nI tried to simulate the tutorial in sciencing.com:\n\nList the survival time of all the subjects in your sample. For\nexample, if you have five students (in a real study, you'd have more)\nand their times to graduation were 3 years, 4 years (so far), 4.5\nyears, 3.5 years and 7 years (so far), write down the times: 3, 4,\n4.5, 3.5, 7.\nPut a plus sign (or other mark) next to any times that are\nright-censored (that is, those that have not had the event happen\nyet). Your list would look like this: 3, 4+, 4.5, 3.5, 7+.\n\nSo I created a data.frame (```\nT```\n for dead and ```\nF```\n for alive):\n```\nsurvive <- data.frame(OS = c(3,4,4.5,3.5,7), status = c(T,F,T,T,F))\n```\n\nthe median is 4 as sciencing.com says:\n```\nmedian(survive$OS)\n[1] 4\n```\n\nbut when I do survival analysis with \"survival package\" I get this:\n```\nCall: survfit(formula = Surv(OS, status) ~ 1, data = survive)\n\n      n  events  median 0.95LCL 0.95UCL \n    5.0     3.0     4.5     3.5      NA\n```\n\nSo my question is why these two medians are different?\nthanks\n    ", "Answer": "\r\nRemember that the times you have are not survival times - they are follow up times. Two of the individuals are right-censored, meaning that we do not know what happened to them after their follow up time.\nSuppose we plot your survival curve:\n```\n plot(Surv(survive$OS, survive$status))\n```\n\n\nThis plot shows us the proportion of survivors among the people we are actively following up. It drops in steps as people die, but if we lose someone to follow up, the estimated survival does not change at that point (why should the fact that we lose someone to follow up change our estimated survival at that point?)\nNow let's use this plot to answer the question \"After how long does the observed survival rate fall below 50%?\" We can draw a horizontal line at y = 0.5 and see at what value this line crosses the survival curve:\n```\nabline(h = 0.5, lty = 2, col = \"red\")\nabline(v = 4.5, lty = 2, col = \"red\")\n```\n\n\nWe can see that the estimated survival falls below 50% at 4.5 years, so this is the median survival time. Count the individuals at each point and we can see this:\n\nTime = 0: We have 5 people in our sample, all of whom are alive (survival = 100%)\nTime = 3: We have 5 people in our sample, one of whom has died (survival = 80%)\nTime = 3.5: We have 5 people in our sample, two of whom have died (survival = 60%)\nTime = 4: We have 4 people in our sample, since we lost one to follow up. The fact that we lost this person to follow up cannot affect the estimated survival at that point, so survival remains at 60%. Note that if the person had died instead of being lost to follow up, survival would have dropped to 40% and the median survival would indeed have been 4 years.\nTime = 4.5: We have 4 people in our sample, and only one of them is alive (survival = 0.25)\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating the median\r\n                \r\nI have following (exponential) values and want to calculate their median using R:\n\n```\n1.0584e+00\n1.1618e+01\n4.9097e+00\n1.3595e+01\n4.2209e+01\n4.6901e-01\n2.4911e+00\n1.2441e+01\n6.8128e+00\n1.3581e+01\n1.4373e+01\n1.2828e+00\n7.7811e+00\n```\n\n\nHere is what I am doing:\n\n```\ndata <- read.table(\"path\")\nmedian(data[ ,1])\n```\n\n\nDue to values being in exponential, I am not getting the correct median. Alternatively, you may also suggest how can I change these values into normal floating point values.\n    ", "Answer": "\r\nWhat are you getting for the median. Seems to work for me. Maybe you have these as \"factor\"s and you need to convert with as.numeric(as.character())\n\n```\n> median(vec)\n[1] 7.7811\n> vec\n [1]  1.05840 11.61800  4.90970 13.59500 42.20900  0.46901  2.49110 12.44100  6.81280 13.58100\n[11] 14.37300  1.28280  7.78110\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Wrong Median Answer\r\n                \r\nProblem: I'm having an issue with counting the median value of my arrayList\n\nBackground: So my ArrayList gets randomly generated values and i have to calculate median of it; i believe my median formula is fine yet i'm getting wrong median answers for 3 values in an ArrayList. \n\nfor like three values, it's giving the wrong median. E.G:\nwhen the array list has the values:\n193.5, 200.5, 239.8\nthen the program is simply taking the average of first two values and giving the answer instead of going for 200.5\n\n```\npublic double getMedianB(){\n    Collections.sort(myDataB);\n    double middle = myDataB.size()/2;\n    if (myDataB.size()%2 == 1) {\n       middle = (myDataB.get(myDataB.size()/2) + myDataB.get(myDataB.size()/2 - 1))/2;\n    } else {\n        middle = myDataB.get(myDataB.size() / 2);\n    }\n    System.out.println(\"median:\" + middle);\n  return middle;\n}\n```\n\n    ", "Answer": "\r\nYou should flip your conditions:\n\nThe below condition checks if the number of terms is odd. In that case, you just want the single middle value.\n\n```\nif (myDataB.size()%2 == 1) {\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of medians - is this possible or is there a different way\r\n                \r\nCurrently i am aggregating big amount of data on a daily basis and for each day i am calculating a median of the current values. Now i need to aggregate all this daily results into a monthly basis and of course i need to calculate the median again.\n\nIs there a way to calculate a median of medians and have it statistically correct? I want to avoid to use the raw data again, because it is a huge amount of it :)\n\nAs a small proof of concept i made this javascript - maybe it helps to find a way:\n\n```\nvar aSortedNumberGroups = [];\nvar aSortedNumbers = [];\nvar aMedians = [];\n\nMath.median = function(aData)\n{\n    var fMedian = 0;\n    var iIndex = Math.floor(aData.length/2);\n    if (!(aData.length%2)) {\n        fMedian = (aData[iIndex-1]+aData[iIndex])/2;\n    } else {\n        fMedian = aData[iIndex];\n    }\n\n    return fMedian;\n};\n\nfor (var iCurrGroupNum = 0; iCurrGroupNum < 5; ++iCurrGroupNum) {\n    var aCurrNums = [];\n    for (var iCurrNum = 0; iCurrNum < 1000; ++iCurrNum) {\n        var iCurrRandomNumber = Math.floor(Math.random()*10001);\n        aCurrNums.push(iCurrRandomNumber);\n        aSortedNumbers.push(iCurrRandomNumber);\n    }\n    aCurrNums.sort(function(oCountA,oCountB) {\n        return (iNumA < iNumB) ? -1 : 1;\n    });\n    aSortedNumberGroups.push(aCurrNums);\n    aMedians.push(Math.median(aCurrNums));\n}\n\nconsole.log(\"Medians of each group: \"+JSON.stringify(aMedians, null, 4));\nconsole.log(\"Median of medians: \"+Math.median(aMedians));\nconsole.log(\"Median of all: \"+Math.median(aSortedNumbers));\n```\n\n\nAs you will see there is often a huge cap between the median of all raw numbers and the median of medians and i like to have it pretty close to each other.\n\nThanks alot!\n    ", "Answer": "\r\nyou don't actually \"calculate\" a median you \"discover\" it through redistribution into subsets, the only optimization for this is a reloadable \"tick chart\" or running tally: e.g. store each occurrence with the number of times it occurred this way you can recreate the distribution without actually having to reparse the raw data. This is only a small optimization, but depending on the repetition of the data set in question you could save yourself tons of MB and at the very least a bunch of processor cycles.\n\nthink of it in JSON: ```\n{ '1': 3, '5': 12, '7': 4 }```\n canonical: '1' has occurred 3 times, '5' has occurred 12 times, etc...\n\nthen persist those counts for the starting at the beginning of time period in which you want to get a median for.\n\nhope this helps -ck\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Tensorflow median value\r\n                \r\nHow can I calculate the median value of a list in tensorflow?\nLike \n\n```\nnode = tf.median(X)\n```\n\n\nX is the placeholder\nIn numpy, I can directly use np.median to get the median value. How can I use the numpy operation in tensorflow?\n    ", "Answer": "\r\nFor calculating median of an array with ```\ntensorflow```\n you can use the ```\npercentile```\n function, since the 50th percentile is the median.\n\n```\nimport tensorflow as tf\nimport tensorflow_probability as tfp\nimport numpy as np \n\nnp.random.seed(0)   \nx = np.random.normal(3.0, .1, 100)\n\nmedian = tfp.stats.percentile(x, 50.0, interpolation='midpoint')\n\ntf.Session().run(median)\n```\n\n\nThe code above is equivalent to ```\nnp.percentile```\n```\n(x, 50, interpolation='midpoint')```\n.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding the running median\r\n                \r\nI have to find the running median as per this problem:\nhttps://www.hackerrank.com/challenges/ctci-find-the-running-median\n\nI am trying to implement two heaps. A min heap which stores the elements lesser than the current median and a max heap which stores items greater than the current median.\n\nThe median keeps changing, and the difference in number of elements in both heaps does not exceed 1.\n\nMy code however is not being accepted. However it has passed test cases I could think of.\n\nPlease only read the main function and the update median function!\nAny help is appreciated. \n\n```\n#include<bits/stdc++.h>\n#define pb push_back\nusing namespace std;\n\nclass max_heap{\nprivate:\nvector<int> items;\nint size;\n\npublic:\nmax_heap(){\n    size=0;\n}\nint left(int parent){   return (parent*2 + 1);  }\nint right(int parent){  return (parent*2 + 2);  }\nint parent(int pos){    return pos<=0 ? 0 : (pos-1)/2;      }\nint getmax(){           return items[0];            }\nint peek(int pos){  return items[pos];}\nint length(){           return items.size();}\n\n\nvoid swap(int pos1, int pos2){\n    int tmp=items[pos1];\n    items[pos1]=items[pos2];\n    items[pos2]=tmp;\n    return;\n}\nvoid insert(int key)\n{\n\n    if(items.size()==size)\n        items.pb(key);\n    else\n        items[size]=key;\n\n    //fixing items property\n    int tmp=size;\n    while(items[0]!=key && items[parent(tmp)] < key ){\n        swap( parent(tmp), tmp);\n\n        tmp=parent(tmp);\n    }\n    size++;\n\n}\n\nint pop(){\n\n    if(size==0)\n        return 0;\n    int ans=getmax();\n    size--;\n    items[0]=items[size];\n\n    //fix items\n    int i=0;\n    while(i<size-1){\n        bool a = items[i] < items[right(i)];\n        bool b = items[i] < items[left(i)];\n\n        if( a && b)\n        {\n            if( items[left(i)] < items[right(i)] )\n                swap(i,left(i));\n            else swap(i,right(i));\n\n        }\n        else if(a)\n            swap(i,right(i));\n        else if(b)\n            swap(i,left(i));\n        else break;\n\n\n\n    }\n    return ans;\n}\n\nvoid print(){\n    for (int i = 0; i < items.size(); ++i)\n            cout<<items[i]<<\" \";\n    cout<<endl;\n}\n};\n\nclass min_heap{\nprivate:\nvector<int> items;\nint size;\n\npublic:\nmin_heap(){\n    size=0;\n}\nint left(int parent){   return (parent*2 + 1);  }\nint right(int parent){  return (parent*2 + 2);  }\nint parent(int pos){    return pos<=0 ? 0 : (pos-1)/2;      }\nint getmin(){           return items[0];            }\nint peek(int pos){  return items[pos];}\nint length(){           return items.size();}\n\n\nvoid swap(int pos1, int pos2){\n    int tmp=items[pos1];\n    items[pos1]=items[pos2];\n    items[pos2]=tmp;\n    return;\n}\nvoid insert(int key)\n{\n\n    if(items.size()==size)\n        items.pb(key);\n    else\n        items[size]=key;\n\n    //fixing items property\n    int tmp=size;\n    while(items[0]!=key && items[parent(tmp)] > key ){\n        swap( parent(tmp), tmp);\n\n        tmp=parent(tmp);\n    }\n    size++;\n\n}\n\nint pop(){\n\n    if(size==0)\n        return 0;\n    int ans=getmin();\n    size--;\n    items[0]=items[size];\n\n    //fix items\n    int i=0;\n    while(i<size-1){\n        bool a = items[i] > items[right(i)];\n        bool b = items[i] > items[left(i)];\n\n        if( a && b)\n        {\n            if( items[left(i)] < items[right(i)] )\n                swap(i,left(i));\n            else swap(i,right(i));\n\n        }\n        else if(a)\n            swap(i,right(i));\n        else if(b)\n            swap(i,left(i));\n        else break;\n\n\n\n    }\n    return ans;\n}\n\nvoid print(){\n    for (int i = 0; i < items.size(); ++i)\n            cout<<items[i]<<\" \";\n    cout<<endl;\n}\n};\n\ndouble update_median(int element, int median, min_heap &mn_heap, max_heap &mx_heap)\n{\n\nint path = mx_heap.length() - mn_heap.length();\n    double ans=0.0;\n\nswitch(path){\n\n    case 0:\n\n    if( element >  median ){\n        //push to right heap..ie the min heap\n        mn_heap.insert(element);\n        ans= mn_heap.getmin();\n    }\n    else\n    {\n        //push to left heap....ie max heap\n        mx_heap.insert(element);\n        ans= mx_heap.getmax();\n    }\n\n    break;\n\n    case 1:     //max heap is greater ie left\n\n    if( element >  median )\n    {   //push to right heap...min heap\n\n        mn_heap.insert(element);\n        ans=(mn_heap.getmin() + mx_heap.getmax()) / 2.0;\n\n    }\n\n    else\n    {\n        mn_heap.insert(mx_heap.pop());\n        mx_heap.insert(element);\n        ans= (mn_heap.getmin() + mx_heap.getmax()) / 2.0;\n    }\n\n    break;\n\n\n    case -1: // min heap greater ie right\n\n    if( element >  median )\n    {   //push to right heap...min heap\n\n        mx_heap.insert(mn_heap.pop());\n        mn_heap.insert(element);\n        ans=(mn_heap.getmin() + mx_heap.getmax()) / 2.0;\n\n    }\n\n    else\n    {\n\n        mx_heap.insert(element);\n        ans= (mn_heap.getmin() + mx_heap.getmax()) / 2.0;\n\n    }\n\n    break;\n\n\n\n\n}\n\nreturn ans;\n\n}\n\nint main(){\n\n    cout.sync_with_stdio(false);\n    int el;\n    cin>>el;\n\n    double median=0.0;\n\n    min_heap *a = new min_heap(); //items less than median\n    max_heap *b = new max_heap(); //items more than median\n\n\n    while(el--){\n        int element;\n        cin>>element;\n\n        median= update_median(element,median,*a,*b);\n\n        printf(\"%.1lf\\n\", median);\n    }\n}\n```\n\n    ", "Answer": "\r\nI think the problem is in the ```\npop```\n method of your ```\nmax_heap```\n implementation. You have:\n\n```\n    if( a && b)\n    {\n        if( items[left(i)] < items[right(i)] )\n            swap(i,left(i));\n        else swap(i,right(i));\n\n    }\n```\n\n\nThat always swaps the parent with the smaller of the two children. In a max heap you want to swap the parent with the larger of the two children. Your ```\nmin_heap```\n implementation also swaps the parent with the smaller of the two children, which is correct.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "What is the right approach when using STL container for median calculation?\r\n                \r\nLet's say I need to retrieve the median from a sequence of 1000000 random numeric values.\n\nIf using anything but ```\nstd::list```\n, I have no (built-in) way to sort sequence for median calculation. \n\nIf using ```\nstd::list```\n, I can't randomly access values to retrieve middle (median) of sorted sequence.\n\nIs it better to implement sorting myself and go with e.g. ```\nstd::vector```\n, or is it better to use ```\nstd::list```\n and use ```\nstd::list::iterator```\n to for-loop-walk to the median value? The latter seems less overheadish, but also feels more ugly..\n\nOr are there more and better alternatives for me?\n    ", "Answer": "\r\nAny random-access container (like ```\nstd::vector```\n) can be sorted with the standard ```\nstd::sort```\n algorithm, available in the ```\n<algorithm>```\n header.\n\nFor finding the median, it would be quicker to use ```\nstd::nth_element```\n; this does enough of a sort to put one chosen element in the correct position, but doesn't completely sort the container. So you could find the median like this:\n\n```\nint median(vector<int> &v)\n{\n    size_t n = v.size() / 2;\n    nth_element(v.begin(), v.begin()+n, v.end());\n    return v[n];\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median Filtering\r\n                \r\nI have below mentioned dataset and I am using \"runmed\" function to smooth it using median filtering. I can plot using runmed but cant see the resultant values of the function as I want to use the result later. As runmed is meant for scattered plot smoothing only, is there any other way to get a result of median filtering that can be saved to other vector for further processing ? Thanks \n\n```\n   runmed(x, k, endrule = c(\"median\", \"keep\", \"constant\"),\n   algorithm = NULL, print.level = 0)\n\n [1] 5.010650 5.010634 5.010668 5.010663 5.010671 5.010672 5.010674 5.010672 5.010676 5.010679 5.010681\n [12] 5.010687 5.010695 5.010705 5.010730 5.010716 5.010740 5.010751 5.010764 5.010771 5.010779 5.010777\n [23] 5.010775 5.010775 5.010780 5.010777 5.010777 5.010777 5.010783 5.010800 5.010810 5.010816 5.010828\n [34] 5.010835 5.010840 5.010838 5.010838 5.010837 5.010842 5.010842 5.010840 5.010842\n```\n\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Partitioned Median\r\n                \r\nI wonder if anyone can help I am trying to calculate a median which abides by the groupings in my view.\n\nI like the following code but it just gives me the over all median in each row. I think i need to use OVER(PARTITION BY()) but i just can’t make heads nor tails of it even after furious googling and reading renowned articles like this https://sqlperformance.com/2012/08/t-sql-queries/median\n\n```\n `SELECT\n YEAR(reportsubmitted) as “Year Submitted”,\n Month(reportsubmitted) as “Month Submitted”, COUNT (DISTINCT(propertyid)) as \n “Number of Reports Submitted”, SUM([report fee]) as “Total Report Fee”,\n\n(\n(SELECT MAX([days From Audit to Submission])\n\nFROM (SELECT TOP 50 PERCENT ([days From Audit to Submission] )\n\nFROM vwCMnAuditorsProcessLength WHERE ReportSubmitted > ‘2017-04-01’ ORDER BY \n[days From Audit to Submission] ) AS x)\n\n(SELECT MIN([days From Audit to Submission])\n\nFROM (SELECT TOP 50 PERCENT [days From Audit to Submission]\nFROM vwCMnAuditorsProcessLength WHERE ReportSubmitted > ‘2017-04-01’ ORDER BY \n[Report Fee] DESC) AS y)  \n) / 2.0 as “Median Days”\n\nFROM vwCMnAuditorsProcessLength\nWHERE reportsubmitted >= ‘2017-04-01’\n\nGROUP BY MONTH(reportsubmitted), YEAR(reportsubmitted)`\n```\n\n\nI did try the below as something different but it seems to be discounting a lot of data\n\n```\nSELECT\n\n[MMYYYY ReportSubmitted],\n\n[Total Report Fee],\n\n[Number of Reports Submitted],\n\nAVG([days from audit to submission]) as “Median days to Submission”\n\nFROM (\n\nSELECT [MMYYYY ReportSubmitted], [report fee], propertyid,\nCAST([days from audit to submission] as decimal(5,2)) [days from audit to submission],\n\nROW_NUMBER() OVER(\nPartition by [MMYYYY ReportSubmitted]\nOrder by [days from audit to submission] ASC) AS “RowASC”,\n\nROW_NUMBER() OVER(\nPartition by [MMYYYY ReportSubmitted]\nOrder by [days from audit to submission] DESC) AS “RowDESC”,\n\nSUM([report fee]) OVER(Partition by [MMYYYY ReportSubmitted] Order by [days from \n audit to submission]) AS “Total Report Fee”,\nCOUNT(propertyid) OVER(Partition by [MMYYYY ReportSubmitted] Order by [days from audit to submission]) AS “Number of Reports Submitted”\n\nFROM vwCMnAuditorsProcessLength) x\n\nWHERE RowASC in (RowDESC,RowDESC-1,RowDESC+1)\n\n Group by [MMYYYY ReportSubmitted], [Total Report Fee], [Number of Reports Submitted]\nOrder by [MMYYYY ReportSubmitted]\n```\n\n\nIf anyone has any ideas I would be really greatful\n    ", "Answer": "\r\nIf you don't care about performance then the simplest way is the best:\n\n```\nSELECT SalesPerson, Median = MAX(Median)\nFROM\n(\n   SELECT SalesPerson,Median = PERCENTILE_CONT(0.5) WITHIN GROUP \n     (ORDER BY Amount) OVER (PARTITION BY SalesPerson)\n   FROM dbo.Sales\n) \nAS x\nGROUP BY SalesPerson;\n```\n\n\nExample from: https://sqlperformance.com/2014/02/t-sql-queries/grouped-median\n\nIf you want even simpler method I recommend CRL function:\nhttps://stackoverflow.com/a/16719240/1903793\n\nIt lets you to calculate median like this:\n\n```\nSELECT dbo.Median(Field) FROM Table\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of medians java implementation\r\n                \r\nI implemented Median of medians selection algorithm based on algs4 quickselect using the Wikipedia article, but my code doesn't work well:\n\n1) it is said that median of medians finds kth largest element. However, my code finds kth smallest element.\n\n2) my implementation runs 1-20 times slower than quickselect, but the median of medians algorithm should be asymptotically faster.\n\nI've checked everything several times, but I cannot find the issue.\n\n```\npublic class MedianOfMedians {\n    public static Comparable medianOfMedians(Comparable[] nums, int k) {\n        return nums[select(nums, 0, nums.length - 1, k)];\n    }\n\n    private static int select(Comparable[] nums, int lo, int hi, int k) {\n        while (lo < hi) {\n            int pivotIndex = pivot(nums, lo, hi);\n            int j = partition(nums, lo, hi, pivotIndex);\n            if (j < k) {\n                lo = j + 1;\n            } else if (j > k) {\n                hi = j - 1;\n            } else {\n                return j;\n            }\n        }\n        return lo;\n    }\n\n    private static int pivot(Comparable[] list, int left, int right) {\n        // for 5 or less elements just get median\n        if (right - left < 5) {\n            return partition5(list, left, right);\n        }\n\n        // otherwise move the medians of five-element subgroups to the first n/5 positions\n        for (int i = left; i <= right; i += 5) {\n            // get the median of the i'th five-element subgroup\n            int subRight = i + 4;\n            if (subRight > right) {\n                subRight = right;\n            }\n\n            int median5 = partition5(list, i, subRight);\n\n            exch(list, median5, (int) (left + Math.floor((i - left) / 5d)));\n        }\n\n        // compute the median of the n/5 medians-of-five\n        return select(list,\n                left,\n                (int) (left + Math.ceil((right - left) / 5d) - 1),\n                (int) (left + (right - left) / 10d));\n    }\n\n    private static int partition5(Comparable[] list, int lo, int hi) {\n        for (int i = lo; i <= hi; i++) {\n            for (int j = i; j > lo; j--) {\n                if (less(list[j - 1], list[j])) {\n                    exch(list, j, j - 1);\n                }\n            }\n        }\n        return (hi + lo) / 2;\n    }\n\n    private static int partition(Comparable[] a, int lo, int hi, int pivotIndex) {\n        exch(a, lo, pivotIndex);\n        int i = lo;\n        int j = hi + 1;\n        Comparable v = a[lo];\n        while (true) {\n            while (less(a[++i], v) && i != hi) { }\n            while (less(v, a[--j]) && j != lo) { }\n            if (j <= i) break;\n            exch(a, i, j);\n        }\n        exch(a, j, lo);\n        return j;\n    }\n\n    private static void exch(Comparable[] nums, int i, int j) { }\n\n    private static boolean less(Comparable v, Comparable w) { }\n}\n```\n\n\nJUnit test:\n\n```\npublic class MedianOfMediansTest {\n    private final static int TESTS_COUNT = 100;\n\n    @org.junit.Test\n    public void test() {\n        // generate TESTS_COUNT arrays of 10000 entries from 0..Integer.MAX_VALUE\n        Integer[][] tests = generateTestComparables(TESTS_COUNT, 10000, 10000, 0, Integer.MAX_VALUE);\n\n        for (int i = 0; i < tests.length; i++) {\n            Integer[] array1 = Arrays.copyOf(tests[i], tests[i].length);\n            Integer[] array2 = Arrays.copyOf(tests[i], tests[i].length);\n            Integer[] array3 = Arrays.copyOf(tests[i], tests[i].length);\n\n            long time = System.nanoTime();\n            final int a = (Integer) MedianOfMedians.medianOfMedians(array1, 0);\n            long nanos_a = System.nanoTime() - time;\n\n            time = System.nanoTime();\n            final int b = (Integer) Quick.select(array2, 0);\n            long nanos_b = System.nanoTime() - time;\n\n            time = System.nanoTime();\n            Arrays.sort(array3);\n            final int c = array3[0];\n            long nanos_c = System.nanoTime() - time;\n\n            System.out.println(\"MedianOfMedians: \" + a + \" (\" + nanos_a + \") \" +\n                    \"QuickSelect: \" + b + \" (\" + nanos_b + \") \" +\n                    \"Arrays.sort: \" + c + \" (\" + nanos_c + \")\");\n\n            System.out.println(((double) nanos_a) / ((double) nanos_b));\n\n            Assert.assertEquals(c, a);\n            Assert.assertEquals(b, a);\n        }\n    }\n\n    public static Integer[][] generateTestComparables(int numberOfTests,\n                                                      int arraySizeMin, int arraySizeMax,\n                                                      int valueMin, int valueMax) {\n        Random rand = new Random(System.currentTimeMillis());\n        Integer[][] ans = new Integer[numberOfTests][];\n        for (int i = 0; i < ans.length; i++) {\n            ans[i] = new Integer[randInt(rand, arraySizeMin, arraySizeMax)];\n            for (int j = 0; j < ans[i].length; j++) {\n                ans[i][j] = randInt(rand, valueMin, valueMax);\n            }\n        }\n        return ans;\n    }\n\n    public static int randInt(Random rand, int min, int max) {\n        return (int) (min + (rand.nextDouble() * ((long) max - (long) min)));\n    }\n}\n```\n\n    ", "Answer": "\r\n\n  1) it is said that median of medians finds kth largest element.\n  However, my code finds kth smallest element.\n\n\nThis is not strictly true. Any selection algorithm can find either smallest or largest element because that's essentially the same task. It depends on how you compare elements and how you partition them (and you can always do something like ```\nlength - 1 - result```\n later). Your code indeed seems to find the kth smallest element, which is by the way the most typical and intuitive way of implementing a selection algorithm.\n\n\n  2) my implementation runs 1-20 times slower than quickselect, but the\n  median of medians algorithm should be asymptotically faster.\n\n\nNot just asymptotically faster. Asymptotically faster in the worst case. In the average case, both are linear, but MoM has higher constant factors. Since you generate your tests randomly, you are very unlikely to hit the worst case. If you used randomized quickselect, then for any input it's unlikely to hit the worst case, otherwise the probability will depend on the pivot selection algorithm used.\n\nWith that in mind, and the fact that median of medians has high constant factors, you should not expect it to perform better than quickselect! It might outperform sorting, though, but even then—those logarithmic factors in sorting aren't that large for small inputs (lg 10000 is about 13-14).\n\nTake my MoM solution for a LeetCode problem, for example. ```\nArrays.sort```\n sometimes outperforms MoM for arrays with 500 million elements. In the best case it runs about twice faster, though.\n\nTherefore, MoM is mostly of theoretical interest. I could imagine a practical use case when you need 100% guarantee of not exceeding some time limit. Say, some real-time system on an aircraft, or spacecraft, or nuclear reactor. The time limit is not very tight, but exceeding it even by one nanosecond is catastrophic. But it's an extremely contrived example, and I doubt that it's actually the way it works.\n\nEven if you can find a practical use case for MoM, you can probably use something like Introselect instead. It essentially starts with quickselect, and then switches to MoM if things don't look good. But testing it would be a nightmare—how would you come up with a test that actually forces the algorithm to switch (and therefore test the MoM part), especially if it's randomized?\n\nYour code looks fine overall, but I'd make some helper methods package-private or even moved them to another class to test separately because such things are very hard to get right. And you may not notice the effect if the result is right. I'm not sure that your groups-of-five code is 100% correct, for example. Sometimes you use ```\nright - left```\n where I'd expect to see element count, which should be ```\nright - left + 1```\n.\n\nAlso, I would replace those ceil/floor calls with pure integer arithmetic equivalents. That is, ```\nMath.floor((i - left) / 5d))```\n => ```\n(i - left) / 5```\n, ```\nMath.ceil((right - left) / 5d)```\n => ```\n(right - left + 4) / 5```\n (this is the part where I don't like the ```\nright - left```\n thing, by the way, but I'm not sure if it's wrong).\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Efficient algo for median of median\r\n                \r\nI have found so many articles regarding median of median but no where I find any satisfactory answer. My professor taught me regarding the topic in which he mentioned that we group the given array in size of 5 and find the medians of these groups . store them in another array and recursively do the previous step until we obtain a single group . The median of this group will be the median of the array and so it could be done in order of n time. \n\nBut I didn’t find the same in other text books and lectures .What is mentioned there is that the result divide the array into 30:70 ratio in worst case. \n    ", "Answer": "\r\nA nice paper explaining all you want to know and more about median of median and real life improvements, as median of ninthers, was written by Andrei Alexandrescu\n\nhttps://erdani.com/research/sea2017.pdf .\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Replace NA with the minimum of row median and column median\r\n                \r\nI have a dataset that looks like\n```\n    a1  a2  a3\nA    1   1   1\nB    2   NA  2\nC    1   1   1\n```\n\nI want to replace NA with the minimum of column median and row median. Since the row median (for row \"B\") is 2 and the column median (for column \"a2\") is 1, I want to replace NA with 1 and get\n```\n    a1  a2  a3\nA    1   1   1\nB    2   1   2\nC    1   1   1\n```\n\nI know how to replace NA with column median using dplyr:\n```\nmutate_if(is.numeric, ~replace_na(., median(., na.rm = TRUE)))\n```\n\nbut how to get what I really need?\n    ", "Answer": "\r\n\nI want to replace the NA with the minimum of column median and row median.\n\nLet your matrix be ```\nmat```\n. (If you have a data.frame ```\ndf```\n, extract its numeric columns and coerce them to a matrix using ```\nmat <- as.matrix(df[sapply(df, is.numeric)])```\n.)\nOne vectorized solution, reliable even if we have multiple ```\nNA```\ns in a row or column, is:\n```\n## you may need to install package \"matrixStats\" first\nrmed <- matrixStats::rowMedians(mat, na.rm = TRUE)\ncmed <- matrixStats::colMedians(mat, na.rm = TRUE)\nij <- which(is.na(mat), arr.ind = TRUE)\nmat[ij] <- pmin(rmed[ij[, 1]], cmed[ij[, 2]])\nmat\n```\n\n\nThe code gives expected result for your 3 x 3 toy example. And here is a more complicated one for testing:\n```\nmat <- structure(c(6L, 4L, NA, NA, 2L, 8L, 8L, NA, NA, 7L, 7L, 4L, 4L, \nNA, NA, NA, 5L, 8L, NA, 9L, 6L, NA, 5L, 5L, 10L, 5L, NA, 6L, \nNA, 9L, NA, 6L, 5L, 1L, 10L, 7L, 3L, 1L, 2L, NA, 7L, NA, 8L, \n1L, 10L, 8L, 2L, 1L, NA, NA, 2L, NA, NA, 2L, NA, 10L, 6L, 6L, \nNA, 9L, 10L, 1L, 5L, 10L), dim = c(8L, 8L))\n#     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n#[1,]    6   NA    5   10    5    7   NA    6\n#[2,]    4    7    8    5    1   NA   NA    6\n#[3,]   NA    7   NA   NA   10    8    2   NA\n#[4,]   NA    4    9    6    7    1   NA    9\n#[5,]    2    4    6   NA    3   10   NA   10\n#[6,]    8   NA   NA    9    1    8    2    1\n#[7,]    8   NA    5   NA    2    2   NA    5\n#[8,]   NA   NA    5    6   NA    1   10   10\n```\n\nThe processing result is:\n```\n#     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n#[1,]    6  5.5  5.0   10    5  7.0    2    6\n#[2,]    4  7.0  8.0    5    1  5.5    2    6\n#[3,]    6  7.0  5.5    6   10  8.0    2    6\n#[4,]    6  4.0  9.0    6    7  1.0    2    9\n#[5,]    2  4.0  6.0    5    3 10.0    2   10\n#[6,]    8  5.0  5.0    9    1  8.0    2    1\n#[7,]    8  5.0  5.0    5    2  2.0    2    5\n#[8,]    6  5.5  5.0    6    3  1.0   10   10\n```\n\nNote that the median of a vector ```\nx```\n can be a value not in ```\nx```\n. Say, ```\nmedian(1:6)```\n is 3.5.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Excel Median range\r\n                \r\nSearch column A for the first two cells in the column that display/have a number within the range of + or - .5A1…i.e. (A1-.5) & (A1+.5). Once found – Find the median of the 3 values & post the median to a new column. Search column A for the first two cells in the column that display/have a number within the range of + or - .5A2…i.e. (A2-.5) & (A2+.5). Once found – Find the median of the 3 values & post the median to a new column. Continue function through the entire list.\n\n```\nOUTPUT: Column C is the Medians\nCOLUMN B   Column C\n\n43         43\n\n42.9       \n\n43.93      43.93\n\n42.5       42.50\n\n44.55      44.55\n\n39         39\n\n39.97      \n41.5      \n39.25      \n38.95     \n38.27\n38.95\n38.27\n38.95\n39.42\n40.49      40.49\n40.43\n```\n\n\nI've tried \n\n```\n=MEDIAN(IF(AND(B2:B20>B2,B2:B20<B2+0.5,B2:B20<B2,B2:B20>B2-0.5),B2:B20))\n\n=MEDIAN(IF(AND(B4+0.5)<=B4:B52>=(B4-0.5),IF(B4:B52<=B4+0.5,B4:B52)))\n\n=MEDIAN(IF(SUBTOTAL(2,OFFSET(B17,ROW(B17:B115)-ROW(B17),0)),B17:B115))\n\n=MEDIAN(IF($B$2:$B$12=$E2,IF($C$2:$C$12=F$1,$B$2:$B$12)))\n```\n\n\nI've changed some of the above functions to try and get them to work, but have had no success.\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Replace NA with the minimum of row median and column median\r\n                \r\nI have a dataset that looks like\n```\n    a1  a2  a3\nA    1   1   1\nB    2   NA  2\nC    1   1   1\n```\n\nI want to replace NA with the minimum of column median and row median. Since the row median (for row \"B\") is 2 and the column median (for column \"a2\") is 1, I want to replace NA with 1 and get\n```\n    a1  a2  a3\nA    1   1   1\nB    2   1   2\nC    1   1   1\n```\n\nI know how to replace NA with column median using dplyr:\n```\nmutate_if(is.numeric, ~replace_na(., median(., na.rm = TRUE)))\n```\n\nbut how to get what I really need?\n    ", "Answer": "\r\n\nI want to replace the NA with the minimum of column median and row median.\n\nLet your matrix be ```\nmat```\n. (If you have a data.frame ```\ndf```\n, extract its numeric columns and coerce them to a matrix using ```\nmat <- as.matrix(df[sapply(df, is.numeric)])```\n.)\nOne vectorized solution, reliable even if we have multiple ```\nNA```\ns in a row or column, is:\n```\n## you may need to install package \"matrixStats\" first\nrmed <- matrixStats::rowMedians(mat, na.rm = TRUE)\ncmed <- matrixStats::colMedians(mat, na.rm = TRUE)\nij <- which(is.na(mat), arr.ind = TRUE)\nmat[ij] <- pmin(rmed[ij[, 1]], cmed[ij[, 2]])\nmat\n```\n\n\nThe code gives expected result for your 3 x 3 toy example. And here is a more complicated one for testing:\n```\nmat <- structure(c(6L, 4L, NA, NA, 2L, 8L, 8L, NA, NA, 7L, 7L, 4L, 4L, \nNA, NA, NA, 5L, 8L, NA, 9L, 6L, NA, 5L, 5L, 10L, 5L, NA, 6L, \nNA, 9L, NA, 6L, 5L, 1L, 10L, 7L, 3L, 1L, 2L, NA, 7L, NA, 8L, \n1L, 10L, 8L, 2L, 1L, NA, NA, 2L, NA, NA, 2L, NA, 10L, 6L, 6L, \nNA, 9L, 10L, 1L, 5L, 10L), dim = c(8L, 8L))\n#     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n#[1,]    6   NA    5   10    5    7   NA    6\n#[2,]    4    7    8    5    1   NA   NA    6\n#[3,]   NA    7   NA   NA   10    8    2   NA\n#[4,]   NA    4    9    6    7    1   NA    9\n#[5,]    2    4    6   NA    3   10   NA   10\n#[6,]    8   NA   NA    9    1    8    2    1\n#[7,]    8   NA    5   NA    2    2   NA    5\n#[8,]   NA   NA    5    6   NA    1   10   10\n```\n\nThe processing result is:\n```\n#     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n#[1,]    6  5.5  5.0   10    5  7.0    2    6\n#[2,]    4  7.0  8.0    5    1  5.5    2    6\n#[3,]    6  7.0  5.5    6   10  8.0    2    6\n#[4,]    6  4.0  9.0    6    7  1.0    2    9\n#[5,]    2  4.0  6.0    5    3 10.0    2   10\n#[6,]    8  5.0  5.0    9    1  8.0    2    1\n#[7,]    8  5.0  5.0    5    2  2.0    2    5\n#[8,]    6  5.5  5.0    6    3  1.0   10   10\n```\n\nNote that the median of a vector ```\nx```\n can be a value not in ```\nx```\n. Say, ```\nmedian(1:6)```\n is 3.5.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Labeling boxplot in seaborn with median value\r\n                \r\nHow can I label each boxplot in a seaborn plot with the median value?\n\nE.g.\n\n```\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\ntips = sns.load_dataset(\"tips\")\nax = sns.boxplot(x=\"day\", y=\"total_bill\", data=tips)\n```\n\n\nHow do I label each boxplot with the median or average value?\n    ", "Answer": "\r\nI love when people include sample datasets!\n\n```\nimport seaborn as sns\n\nsns.set_style(\"whitegrid\")\ntips = sns.load_dataset(\"tips\")\nbox_plot = sns.boxplot(x=\"day\",y=\"total_bill\",data=tips)\n\nmedians = tips.groupby(['day'])['total_bill'].median()\nvertical_offset = tips['total_bill'].median() * 0.05 # offset from median for display\n\nfor xtick in box_plot.get_xticks():\n    box_plot.text(xtick,medians[xtick] + vertical_offset,medians[xtick], \n            horizontalalignment='center',size='x-small',color='w',weight='semibold')\n```\n\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "geom_vline Median not consistant with True Median of Vector\r\n                \r\nI have a vector\n\n```\nvar = c(5, 3, 6, 0, 1, 1, 1, 0, 4, 2, 1, 3, 3, 6, 3, 15, 1, 0, 2, 3, \n1, 0, 0, 3, 2, 3, 2, 2, 2, 4, 4, 0, 1, 0, 2, 2, 5, 3, 3, 1, 0, \n1, 1, 6, 4, 3, 0, 7, 4, 2, 3, 3, 0, 1, 1, 3, 4, 5, 2, 1, 3, 10, \n13, 3, 1, 4, 5, 3, 1, 1, 5, 4, 2, 1, 6, 1, 2, 3, 5, 8, 3, 1, \n7, 4, 0, 1, 7, 1, 3, 4, 3, 5, 3, 2, 1, 1, 9, 2, 0, 4, 3, 5)\n```\n\n\nI am plotting the distribution of the histogram using ggplot and drawing a vertical line of the median. The median of var equals 3(doubled checked using python numpy)\n\n```\ngroupMedian <- median(var)\n\nprint(groupMedian)\n\ndf <- data.table(x = var)\n\ndf <- df[, .N, by=x]\n\ndf$x <- factor(df$x, levels=c(0:25))\n\np <- ggplot(df, aes(x=x, y=N)) +\n     geom_bar(stat=\"identity\", width=1.0, \n     colour = \"darkgreen\",\n     fill = 'lightslateblue')\n\np <- p + labs(title = \"Var Histogram\", \n          x = \"x\", \n          y = \"Frequency\") +\n   scale_x_discrete(drop=FALSE) +\n   geom_vline(xintercept=groupMedian, \n         colour = 'red', size = 2) \n\n p = p + coord_cartesian(ylim=c(0, 50)) + \n     scale_y_continuous(breaks=seq(0, 50, 2))\n\n p = p + theme(panel.grid.major = \n            element_line(colour = \"black\", linetype = \"dotted\") )\n\n\n ggsave(\"barplot.png\", p, width=8, height=4, dpi=120)\n\n print(p)\n```\n\n\nThe median is 3 but the line is placed at 2.\n\nI also tried using\n\n```\np = p+ geom_vline(data=var,\n          aes(xintercept = median),\n          colour = 'red', size = 2 )\n```\n\n    ", "Answer": "\r\nYou can let ggplot2 do the aggregation for you and just you ```\ngeom_histogram()```\n instead. This seems to provide the gist of what you're after:\n\n```\n#load data.table\nlibrary(data.table)\ndf <- data.table(x = var)\ngroupMedian <- median(var)\n\nggplot(df, aes(x)) +\n  geom_histogram(binwidth = 1,\n                 colour = \"darkgreen\",\n                 fill = \"lightslateblue\",\n                 origin = -0.5) + #this effectively centers the x-axis under the bins\n  geom_vline(xintercept = groupMedian,\n             colour = \"red\",\n             size = 2) +\n  scale_x_continuous(breaks = seq(0,25), \n                     limits = c(0,25))\n```\n\n\nGiving you something like this:\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "MEDIAN() in Vertica SQL\r\n                \r\nI have a Vertica table as:\n\n```\nmy_day, price\n'2016-10-01', 55\n...\n```\n\n\nBoth columns are encoded as VARCHAR.\n\nI need to find the median price per day, so I tried\n\n```\nselect distinct my_day, median(cast(price as numeric)) over (partition by my_day)  \nfrom schem01.my_test_table \nwhere  my_day between '2016-10-01' and '2016-10-10' \ngroup by my_day, cast(price as numeric);\n```\n\n\nHowever, this returns a very high value which is around 2-3x the actual median which I manually calculated and tested.\n\nAnyone know what's going on with the median here?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "MySQL median query that retrieves median for each grouped IDs\r\n                \r\nThe median query returns a result similar to the following:\n\nVendor_id | Median invoice_total\n97.............| 418\n\nI'd like the result of the median query to look similar to the following avg function query:\n\n```\nSELECT vendor_id, avg(invoice_total)\nFROM invoices\nGROUP BY vendor_id;\n```\n\n\nMedian query:\n\n```\nSELECT t3.vendor_id, AVG(middle_values) AS 'median'\nFROM (\n    SELECT t1.invoice_total AS 'middle_values', t1.vendor_id\n    FROM\n    (\n        SELECT @row:=@row+1 as `row`, iv.invoice_total, iv.vendor_id\n        FROM invoices AS iv, (SELECT @row:=0) AS r\n        WHERE iv.vendor_id = 97\n        ORDER BY iv.invoice_total\n    ) AS t1,\n    (\n        SELECT COUNT(*) as 'count'\n        FROM invoices iv\n        WHERE iv.vendor_id = 97\n    ) AS t2\n-- the following condition will return 1 record for odd number sets, or 2 records for even number sets.\nWHERE t1.row >= t2.count/2 and t1.row <= ((t2.count/2) +1)) AS t3\n```\n\n\nI believe the main crucial part is the 3rd (and nested) select statement.\n\n```\nSELECT @row:=@row+1 as `row`\nFROM (SELECT @row:=@row+1 as `row`, vendor_id, invoice_total\n      FROM invoices\n      ORDER BY vendor_id, invoice_total) t, invoices inv\nWHERE inv.vendor_id = t.vendor_id;\n```\n\n\nIf @row counter could be ressetted each time the query transitions on to a different vendor_id. That would be a huge step.\n\nTable:\n\n```\nCREATE TABLE IF NOT EXISTS `invoices` (\n  `invoice_id` int(11) NOT NULL AUTO_INCREMENT,\n  `vendor_id` int(11) NOT NULL,\n  `invoice_number` varchar(50) NOT NULL,\n  `invoice_date` date NOT NULL,\n  `invoice_total` decimal(9,2) NOT NULL,\n  `payment_total` decimal(9,2) NOT NULL DEFAULT '0.00',\n  `credit_total` decimal(9,2) NOT NULL DEFAULT '0.00',\n  `terms_id` int(11) NOT NULL,\n  `invoice_due_date` date NOT NULL,\n  `payment_date` date DEFAULT NULL,\n  PRIMARY KEY (`invoice_id`),\n  KEY `invoices_fk_vendors` (`vendor_id`),\n  KEY `invoices_fk_terms` (`terms_id`),\n  KEY `invoices_invoice_date_ix` (`invoice_date`),\n  CONSTRAINT `invoices_fk_terms` FOREIGN KEY (`terms_id`) REFERENCES `terms` (`terms_id`),\n  CONSTRAINT `invoices_fk_vendors` FOREIGN KEY (`vendor_id`) REFERENCES `vendors` (`vendor_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=119 DEFAULT CHARSET=latin1;\n```\n\n\nInserts:\n\n```\nINSERT INTO `invoices` VALUES (118, 97, '456792', '2011-08-03', 565.60, 0.00, 0.00, 2, '2011-09-02', NULL);\nINSERT INTO `invoices` VALUES (117, 97, '456791', '2011-08-03', 4390.00, 0.00, 0.00, 2, '2011-09-02', NULL);\nINSERT INTO `invoices` VALUES (116, 97, '456701', '2011-08-02', 270.50, 0.00, 0.00, 2, '2011-09-01', NULL);\nINSERT INTO `invoices` VALUES (115, 97, '456789', '2011-08-01', 8344.50, 0.00, 0.00, 2, '2011-08-31', NULL);\nINSERT INTO `invoices` VALUES (114, 123, '963253249', '2011-08-02', 127.75, 127.75, 0.00, 3, '2011-09-01', '2011-09-04');\nINSERT INTO `invoices` VALUES (113, 37, '547480102', '2011-08-01', 224.00, 0.00, 0.00, 3, '2011-08-31', NULL);\nINSERT INTO `invoices` VALUES (112, 110, '0-2436', '2011-07-31', 10976.06, 0.00, 0.00, 3, '2011-08-30', NULL);\nINSERT INTO `invoices` VALUES (111, 123, '263253257', '2011-07-30', 22.57, 22.57, 0.00, 3, '2011-08-29', '2011-09-03');\n```\n\n    ", "Answer": "\r\nTry this for assigning row number within vendor_ids\n\n```\nSELECT \n    t.*,\n    @rn:=IF(vendor_id = @prev_vid,\n        @rn + 1,\n        IF(@prev_vid:=vendor_id, 1, 1)) rn\nFROM\n    (SELECT \n        *\n    FROM\n        invoices\n    ORDER BY vendor_id , invoice_total) t\n        CROSS JOIN\n    (SELECT @rn:=0, @prev_vid:=- 1) t2;\n```\n\n\nWhich make your final query this:\n\n```\nSELECT \n    t1.vendor_id, AVG(t1.invoice_total) median\nFROM\n    (SELECT \n        t.*,\n            @rn:=IF(vendor_id = @prev_vid, @rn + 1, IF(@prev_vid:=vendor_id, 1, 1)) row\n    FROM\n        (SELECT \n        *\n    FROM\n        invoices\n    ORDER BY vendor_id , invoice_total) t\n    CROSS JOIN (SELECT @rn:=0, @prev_vid:=- 1) t2) AS t1\n        INNER JOIN\n    (SELECT \n        vendor_id, COUNT(*) cnt\n    FROM\n        invoices\n    GROUP BY vendor_id) AS t2 ON t1.vendor_id = t2.vendor_id\n        AND t1.row >= t2.cnt / 2\n        AND t1.row <= ((t2.cnt / 2) + 1)\nGROUP BY t1.vendor_id;\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "C++ calculate median with reference\r\n                \r\nI try to calculate the median of a vector called ```\nmedian```\n:\n\n```\nstd::nth_element(median.begin(), median.begin() + median.size() / 2, median.end());     \nmedianVal = median[median.size() / 2];  \ncout << \"The median is \" << medianVal << endl;\n```\n\n\nThis works fine. But I need to get the position of the median value in its original vector. How can I do this very fast?\n    ", "Answer": "\r\nI am assuming you do not want to reorder the original container.  If wrong, there are easier ways.\n\n```\nnth_element```\n takes a comparator.\n\nSo first create a vector of iterators into the original container, then write a comparator that takes 2 iterators, deferences them, amd compares the result.\n\n```\ntemplate<class C>\nauto median(C const& c){\n  using std::begin; using std::end;\n  auto start = begin(c);\n  auto finish = end(c);\n  using iterator = decltype(start);\n  std::vector<iterator> working;\n  for(auto it = start; it != finish; ++it)\n    working.push_back(it);\n  if (working.empty())\n      return start;\n  std::nth_element(\n      begin(working), begin(working) + working.size() / 2, end(working),\n      [](iterator lhs, iterator rhs){\n          return *lhs < *rhs;\n      }\n  );\n  return *(begin(working) + working.size() / 2);\n}\n```\n\n\nThis does rely on some C++14 (auto return type deduction), but every major compiler (except possibly icc?) has support for it now.\n\nIt is flexible enough to work on even C style arrays, and I think it even works with sentinels.\n\nDemo\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find the median of the sum of the arrays\r\n                \r\nTwo sorted arrays of length n are given and the question is to find, in O(n) time, the median of their sum array, which contains all the possible pairwise sums between every element of array A and every element of array B.\n\nFor instance: Let A[2,4,6] and B[1,3,5] be the two given arrays.\nThe sum array is ```\n[2+1,2+3,2+5,4+1,4+3,4+5,6+1,6+3,6+5]```\n. Find the median of this array in O(n).\n\nSolving the question in O(n^2) is pretty straight-forward but is there any O(n) solution to this problem?\n\nNote: This is an interview question asked to one of my friends and the interviewer was quite sure that it can be solved in O(n) time.\n    ", "Answer": "\r\nThe correct O(n) solution is quite complicated, and takes a significant amount of text, code and skill to explain and prove. More precisely, it takes 3 pages to do so convincingly, as can be seen in details here http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf (found by ```\nsimonzack```\n in the comments).\n\nIt is basically a clever divide-and-conquer algorithm that, among other things, takes advantage of the fact that in a sorted n-by-n matrix, one can find in ```\nO(n)```\n the amount of elements that are smaller/greater than a given number ```\nk```\n. It recursively breaks down the matrix into smaller submatrixes (by taking only the odd rows and columns, resulting in a submatrix that has ```\nn/2```\n colums and ```\nn/2```\n rows) which combined with the step above, results in a complexity of ```\nO(n) + O(n/2) + O(n/4)... = O(2*n) = O(n)```\n. It is crazy!\n\nI can't explain it better than the paper, which is why I'll explain a simpler, ```\nO(n logn)```\n solution instead :).\n\n\n\nO(n * logn) solution:\n\nIt's an interview! You can't get that ```\nO(n)```\n solution in time. So hey, why not provide a solution that, although not optimal, shows you can do better than the other obvious ```\nO(n²)```\n candidates?\n\nI'll make use of the ```\nO(n)```\n algorithm mentioned above, to find the amount of numbers that are smaller/greater than a given number ```\nk```\n in a sorted ```\nn-by-n```\n matrix. Keep in mind that we don't need an actual matrix! The Cartesian sum of two arrays of size ```\nn```\n, as described by the OP, results in a sorted ```\nn-by-n```\n matrix, which we can simulate by considering the elements of the array as follows:\n\n```\na[3] = {1, 5, 9};\nb[3] = {4, 6, 8};\n//a + b:\n{1+4, 1+6, 1+8,\n 5+4, 5+6, 5+8,\n 9+4, 9+6, 9+8}\n```\n\n\nThus each row contains non-decreasing numbers, and so does each column. Now, pretend you're given a number ```\nk```\n. We want to find in ```\nO(n)```\n how many of the numbers in this matrix are smaller than ```\nk```\n, and how many are greater. Clearly, if both values are less than ```\n(n²+1)/2```\n, that means ```\nk```\n is our median!\n\nThe algorithm is pretty simple:\n\n```\nint smaller_than_k(int k){\n    int x = 0, j = n-1;\n    for(int i = 0; i < n; ++i){\n        while(j >= 0 && k <= a[i]+b[j]){\n            --j;\n        }\n        x += j+1;\n    }\n    return x;\n}\n```\n\n\nThis basically counts how many elements fit the condition at each row. Since the rows and columns are already sorted as seen above, this will provide the correct result. And as both ```\ni```\n and ```\nj```\n iterate at most ```\nn```\n times each, the algorithm is ```\nO(n)```\n [Note that ```\nj```\n does not get reset within the ```\nfor```\n loop]. The ```\ngreater_than_k```\n algorithm is similar.\n\nNow, how do we choose ```\nk```\n? That is the ```\nlogn```\n part. Binary Search! As has been mentioned in other answers/comments, the median must be a value contained within this array:\n\n```\ncandidates[n] = {a[0]+b[n-1], a[1]+b[n-2],... a[n-1]+b[0]};```\n.\n\nSimply sort this array [also ```\nO(n*logn)```\n], and run the binary search on it. Since the array is now in non-decreasing order, it is straight-forward to notice that the amount of numbers smaller than each ```\ncandidate[i]```\n is also a non-decreasing value (monotonic function), which makes it suitable for the binary search. The largest number ```\nk = candidate[i]```\n whose result ```\nsmaller_than_k(k)```\n returns smaller than ```\n(n²+1)/2```\n is the answer, and is obtained in ```\nlog(n)```\n iterations:\n\n```\nint b_search(){\n    int lo = 0, hi = n, mid, n2 = (n²+1)/2;\n    while(hi-lo > 1){\n        mid = (hi+lo)/2;\n        if(smaller_than_k(candidate[mid]) < n2)\n            lo = mid;\n        else\n            hi = mid;\n    }\n    return candidate[lo]; // the median\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Algorithmic Reduction (Median of medians, quicksort)\r\n                \r\nI'm trying to better understand reduction, and I'm currently looking at the two algorithms, \"Median of medians\" and Quicksort.\n\nI understand that both algorithms use a similar (effectively identical) partition subroutine to help solve their problems, which ends up making them quite similar.\n\n```\nSelect(A[1...n],k):  // Pseudocode for median of medians\n  m = [n/5]\n  for i from 1 to m:\n    B[i] = Select(A[5i-4..5i],3)\n  mom = Select(B[1..m],m/2)\n\n  r = partition(A[1..n],mom)  // THIS IS THE SUBROUTINE\n\n  if k < r:\n    return Select(A[1..r-1],k)\n  else if k > r:\n    return Select(A[r+1..n],k-r)\n  else\n    return mom\n```\n\n\nSo does the term \"reduction\" make any sense in regards to these two algorithms?  Do any of the following make sense?\n\n\nMedian of Medians/Quicksort can be reduced to a partition subroutine\nMedian of medians reduces to quicksort\nQuicksort reduces to median of medians\n\n    ", "Answer": "\r\nThis really depends on your definition of \"reduction.\"\n\nThe standard type of reduction that's usually discussed is a mapping reduction (also called a many-one reduction). A mapping reduction from problem X to problem Y is the following:\n\n\n  Given an input IX to problem X, transform it into an input IY to problem Y. Then, run a solver for problem Y on IY and output that answer.\n\n\nIn a mapping reduction, you get to make exactly one call to a subroutine that solves problem Y and you have to output whatever answer you get back from that subroutine. For example, you can reduce the problem of \"is this number even?\" to the problem of \"is this number odd?\" by adding one to the number and outputting whether the resulting number is odd.\n\nAs a non-example of a mapping reduction, consider these two problems: first, the problem \"is every boolean in this list true?,\" and second, the problem \"is some boolean in this list false?\" If you have a solver for the second problem, you can use it to solve the first by running the solver for the second problem and outputting the opposite result: a list of booleans has some element that's false if and only if it's not the case that every element of the list is true. However, this reduction isn't a mapping reduction because we're flipping the result produced by the subroutine.\n\nA different type of reduction that's often used is the Turing reduction. A Turing reduction from problem X to problem Y is the following:\n\n\n  Build an algorithm that solves problem X assuming that there is a magic black box that always solves problem Y.\n\n\nAll mapping reductions are Turing reductions, but not the other way around. The above reduction from \"is everything true?\" to \"is something false\" is not a mapping reduction, but it is a Turing reduction because you can use the subroutine for \"is something false?\" to learn whether or not the list contains any false values, then can output the opposite.\n\nAnother major difference between mapping reductions and Turing reductions is that in a Turing reduction, you can make multiple calls to the subroutine that solves problem Y, not just one.\n\nYou can think of both quicksort and median-of-medians as algorithms that use partitioning as a subroutine. In quicksort, that subroutine does all the heavy lifting required to sort everything, and in median-of-medians it does one of the essential steps to shrink down the input. Since both algorithms make multiple calls to the subroutine, you can think of them as Turing-style reductions. Quicksort is a reduction from sorting to partitioning, while median-of-medians is a reduction from selection to partitioning.\n\nHope this helps!\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to calculate or approximate the median of a list without storing the list\r\n                \r\nI'm trying to calculate the median of a set of values, but I don't want to store all the values as that could blow memory requirements. Is there a way of calculating or approximating the median without storing and sorting all the individual values?\n\nIdeally I would like to write my code a bit like the following\n\n```\nvar medianCalculator = new MedianCalculator();\nforeach (var value in SourceData)\n{\n  medianCalculator.Add(value);\n}\nConsole.WriteLine(\"The median is: {0}\", medianCalculator.Median);\n```\n\n\nAll I need is the actual MedianCalculator code!\n\nUpdate: Some people have asked if the values I'm trying to calculate the median for have known properties. The answer is yes. One value is in 0.5 increments from about -25 to -0.5. The other is also in 0.5 increments from -120 to -60. I guess this means I can use some form of histogram for each value.\n\nThanks\n\nNick\n    ", "Answer": "\r\nIf the values are discrete and the number of distinct values isn't too high, you could just accumulate the number of times each value occurs in a histogram, then find the median from the histogram counts (just add up counts from the top and bottom of the histogram until you reach the middle). Or if they're continuous values, you could distribute them into bins - that wouldn't tell you the exact median but it would give you a range, and if you need to know more precisely you could iterate over the list again, examining only the elements in the central bin.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of pandas dataframe column\r\n                \r\nI have a DataFrame ```\ndf```\n:\n```\nname   count    \naaaa   2000    \nbbbb   1900    \ncccc    900    \ndddd    500    \neeee    100\n```\n\nI would like to look at the rows that are within a factor of 10 from the median of the ```\ncount```\n column.\nI tried ```\ndf['count'].median()```\n and got the median. But don't know how to proceed further. Can you suggest how I could use pandas/numpy for this.\nExpected Output :\n```\nname count distance from median\n\naaaa  2000   *****\n```\n\nI can use any measure as the distance from median (absolute deviation from median, quantiles etc.).\n    ", "Answer": "\r\nIf you're looking for how to calculate the Median Absolute Deviation -\n\n```\nIn [1]: df['dist'] = abs(df['count'] - df['count'].median())\n\nIn [2]: df\nOut[2]:\n   name  count  dist\n0  aaaa   2000  1100\n1  bbbb   1900  1000\n2  cccc    900     0\n3  dddd    500   400\n4  eeee    100   800\n\nIn [3]: df['dist'].median()\nOut[3]: 800.0\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate median [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Why double width = 50/110000; the output is 0.000000000000000?\r\n                            \r\n                                (3 answers)\r\n                            \r\n                    \r\n                Closed 9 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI can't figure out what is wrong, why doesnt my median work ? Everything works except my median and i have been sitting here for a while and looking at it and still don't understand why it doesnt work.\n\n```\nimport java.util.Arrays;\n\npublic class Stat{\n    private int[] värden = new int[100]; \n    public int count = 0;       // counter = 0\n\n\n    public int Värden(int värde){\n        värden[count++]=värde;\n        return värde;\n    }\n\n    public double medelv(){                 //medelvärde\n        double medelv = 0;\n        int total = 0;\n        for(int x = 0; x < count; x++){\n            total += värden[x];\n\n            medelv = (total/count);\n        }\n        return medelv;\n    }\n    public double medianen(){\n        Arrays.sort(värden);\n\n        double medianen = 0;\n\n        for(int x = 0; x < count; x++){\n\n        if (värden.length % 2 == 0)\n            medianen = ((double)värden[värden.length/2] + (double)värden[värden.length/2 - 1])/2;\n        else\n            medianen = (double) värden[värden.length/2];\n```\n\n    ", "Answer": "\r\nAs @zouzou says in the comments, an int divided by another int equals an int. Cast one of them, and it will work.\n\n```\nmedelv = ((double)total/count);\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding continuous median\r\n                \r\nHow would you compute the medians for a given input that updates every time a new input is added? For example:\n\n\n1 - Median is 1\n1,2 - Median is 3/2\n1,2,3 - Median is 2\n\n    ", "Answer": "\r\nYou can do it in O(logn) per element.\n\nBuild AVL tree (or RBT), set one pointer to median. And now augment AVL with full threads (both), parent pointer.\nInsert time is logarithmic, successor and predecessor is constant operation, thus updating median pointer is constant time operation.\n\nParent pointer plus threads might seem redundant, but this guarantees no traversal, median update is done in rotation phase.\n\nPros: only insertion time matters. Structure is dynamic, no need to reallocate array or move elements.\n\nCons: there is overhead in space and allocating nodes.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Help with median in ruby\r\n                \r\nI am writing a ruby script that will get numbers and output the median. This is my code\n\n```\nnumbers = Array.new    \nnumbers = [gets]     \ndef median(numbers)     \n    sorted = numbers.sort\n    mid = numbers.length/2 sorted[mid] \n    numbers.push mid    \nend \nend\n```\n\n\nWhen you run it, it asks for the numbers but won't give the median... \n    ", "Answer": "\r\n```\ndef median(array)\n  array.sort!\n  if array.length % 2 == 0\n    median_value = (array[array.length / 2] + array[array.length/2 - 1]) / 2.0\n  else\n    median_value = array[array.length / 2]\n  end\nend\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median method returning higher value median\r\n                \r\nSo im writing a method in which it finds the median of an n-numbered array. If the array has an odd number of elements it works fine, however if the array has an even number of elements, I want the program to output the higher of the 2 middle numbers rather than the lower of the 2. At the current moment, my code is outputting the lower number. This is the code:\n\n```\npublic Long getMedian() {\n\n    long median = 0;\n\n    Arrays.sort(elements);\n\n    if (length % 2 != 0) {\n        median = elements[length/2];\n    } if (length % 2 == 0) {\n        median = ((elements[length/2]) + (elements[(length/2) - 1])) / 2;\n        median++;\n    }\n\n    return median;\n}\n```\n\n\nFor example, if the array with numbers ```\n[30 41 45 50]```\n was inputted, the median would be 45, not 41. Please help!\n    ", "Answer": "\r\nSurprisingly it is most straightforward solution:\n\n```\npublic Long getMedian() {\n    Arrays.sort(elements);\n\n    return elements[elements.length / 2];\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median method returning higher value median\r\n                \r\nSo im writing a method in which it finds the median of an n-numbered array. If the array has an odd number of elements it works fine, however if the array has an even number of elements, I want the program to output the higher of the 2 middle numbers rather than the lower of the 2. At the current moment, my code is outputting the lower number. This is the code:\n\n```\npublic Long getMedian() {\n\n    long median = 0;\n\n    Arrays.sort(elements);\n\n    if (length % 2 != 0) {\n        median = elements[length/2];\n    } if (length % 2 == 0) {\n        median = ((elements[length/2]) + (elements[(length/2) - 1])) / 2;\n        median++;\n    }\n\n    return median;\n}\n```\n\n\nFor example, if the array with numbers ```\n[30 41 45 50]```\n was inputted, the median would be 45, not 41. Please help!\n    ", "Answer": "\r\nSurprisingly it is most straightforward solution:\n\n```\npublic Long getMedian() {\n    Arrays.sort(elements);\n\n    return elements[elements.length / 2];\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Dask DataFrame aggregate to median\r\n                \r\nI am trying to aggregate a dask dataframe to set of metrics, including median, but it looks like that median is not supported. Any chance to aggregate and get median?\n\n```\nst_agg = df.groupby(['start station id', 'end station id']).agg({'usertype':'count', 'tripduration':'median'})\n\n>>> ValueError: unknown aggregate median\n```\n\n    ", "Answer": "\r\nAs of October 6, 2021 there is not yet an implementation of this in Dask. There is an open Feature Request here.\nWorkaround for Specific Cases\nFrom that same issue, this code below works for specific use cases in which the data for each grouped column fits on exactly 1 partition:\n```\nddf = dask.datasets.timeseries()\nddf = ddf.set_index('id')\n\nmedian_fun = dd.Aggregation(\n    name=\"median\",\n    # this computes the median on each partition\n    chunk=lambda s: s.median(),\n    # this combines results across partitions; the input should just be a list of length 1\n    agg=lambda s0: s0.sum(),\n)\n\nmedian_ddf = ddf.groupby(\"id\")[\"x\"].agg(median_fun)\n```\n\nGeneral Solution\nFor larger datasets, you could construct a custom aggregation function that calculates the median (or the 50th percentile) using ``dd.groupby.Aggregation`. If you do this, consider submitting it as a PR to resolve the feature request listed above.\nSee docs here: https://docs.dask.org/en/stable/generated/dask.dataframe.groupby.Aggregation.html#dask-dataframe-groupby-aggregation\nMedian vs 50th Percentile\nNote that for most practical purposes, the 50th percentile and the median are equivalent when working with large datasets: https://math.stackexchange.com/questions/2048470/is-50th-percentile-equal-to-median\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "calculate in mysql the median\r\n                \r\nHow can I calculate the median of each year for each code.\nBelow is the mysql table:\n\n\n  tbl_sales:\n\n\n```\n+-----+------+------+------+\n| cod | cant | mont | year |\n+-----+------+------+------+\n| 432 |   1  |   10 | 2012 |\n| 432 |   2  |   10 | 2012 |\n| 432 |   4  |   10 | 2012 |\n| 432 |   2  |   3  | 2012 |\n| 432 |   3  |   2  | 2016 |\n| 432 |   2  |   1  | 2016 |\n| 432 |   8  |   8  | 2017 |\n+-----+------+------+------+\n```\n\n\n\n  Manual calculation of the median:\n\n\n```\n+------+---+---+---+---+---+---+---+---+---+----+----+----+-------+\n| year | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | TOTAL |\n+------+---+---+---+---+---+---+---+---+---+----+----+----+-------+\n| 2012 |   |   | 2 |   |   |   |   |   |   |  7 |    |    |   9   |\n| 2016 | 2 | 3 |   |   |   |   |   |   |   |    |    |    |   5   |\n| 2017 |   |   |   |   |   |   |   | 8 |   |    |    |    |   8   |\n+------+---+---+---+---+---+---+---+---+---+----+----+----+-------+\n\nMEDIAN (5,8,9) = 8\n```\n\n\nHow can I display in sql this way: 432 => 8\n\nThank you!\n    ", "Answer": "\r\nThe kernel of the query is (obviously?):\n\n```\nSELECT year,SUM(cant) total FROM my_table GROUP BY year ORDER BY year;\n```\n\n\nFrom here, I would handle the rest in application code. You can calculate medians in SQL, but not without further hits on the data base, which just seems tedious when you already have all the information needed to perform the calculation (the number of rows and the value of the middle row(s)) right here in this result.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding Median Mysql\r\n                \r\nTrying to find the median for an array in a MYSQL database.\n\nCurrently, I am grabbing my data like so:\n\n```\n$middleMonth = \"SELECT Day, COUNT(Day) AS totalNumber FROM finalbaby GROUP BY Day ORDER BY COUNT(Day) DESC LIMIT 1, 300\";\n$middleResult = mysql_query($middleMonth);\n```\n\n\nI am then putting it into an array like so.\n\n```\n$names=array();\nwhile($row = mysql_fetch_assoc($middleResult)) {\n$names[] = $row['Day'];\n```\n\n\nI am then trying to find the median of that array:\n\n```\n            sort($names);\n            $count = count($names);\n            $middleval = floor(($count-1)/2); \n                if($count % 2) { \n                    $median = $names[$middleval];\n                } else { \n                    $low = $names[$middleval];\n                    $high = $names[$middleval+1];\n                    $median = (($low+$high)/2);\n                }\n\n        return $median;\n\n        }\n\n        var_dump($names);\n```\n\n\nI am not getting any errors, but it crashes my application.\n\nAny suggestions on what I am doing wrong?\n    ", "Answer": "\r\n\n  are you closing the while in your second code black before your third code block?\n\n\nanswered:\n\n\n  I close the while in my last }\n\n\nFail... close while in second code block before running code in third code block... this will find the median only once instead of trying to find the median every time you set a name from a mysql returned row. The first time, the count of names would be 1 and then you subtract 1 = 0 and divide by two. This will give you 0. Then you try to get the remainder of 0 and 2. This throws off the rest of your code. Try this:\n\n```\n$middleMonth = \"SELECT Day, COUNT(Day) AS totalNumber FROM finalbaby GROUP BY Day ORDER BY COUNT(Day) DESC LIMIT 1, 300\";\n$middleResult = mysql_query($middleMonth);\n$names=array();\nwhile($row = mysql_fetch_assoc($middleResult)) {\n    $names[] = $row['Day'];\n}\nsort($names);\n$count = count($names);\n$middleval = floor(($count-1)/2); \nif($count % 2) { \n    $median = $names[$middleval];\n} else { \n    $low = $names[$middleval];\n    $high = $names[$middleval+1];\n    $median = (($low+$high)/2);\n}\necho $median;\nvar_dump($names);\n\n//previous code\n//if this code is inside function then return if not then print\n//return $median;\n//if this code is inside function then the return above will cancel this var_dump\n//var_dump($names);\n```\n\n\nAlso please remember\n\n\n  Warning! \n  This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information.\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating the Median with Mysql\r\n                \r\nI'm having trouble with calculating the median of a list of values, not the average.\n\nI found this article\nSimple way to calculate median with MySQL\n\nIt has a reference to the following query which I don't understand properly. \n\n```\nSELECT x.val from data x, data y\nGROUP BY x.val\nHAVING SUM(SIGN(1-SIGN(y.val-x.val))) = (COUNT(*)+1)/2\n```\n\n\nIf I have a ```\ntime```\n column and I want to calculate the median value, what do the ```\nx```\n and ```\ny```\n columns refer to? \n    ", "Answer": "\r\nI propose a faster way.\n\nGet the row count:\n\n```\nSELECT CEIL(COUNT(*)/2) FROM data;```\n\n\nThen take the middle value in a sorted subquery:\n\n```\nSELECT max(val) FROM (SELECT val FROM data ORDER BY val limit @middlevalue) x;```\n\n\nI tested this with a 5x10e6 dataset of random numbers and it will find the median in under 10 seconds.\n\nThis will find an arbitrary percentile by replacing the ```\nCOUNT(*)/2```\n with ```\nCOUNT(*)*n```\n where ```\nn```\n is the percentile (.5 for median, .75 for 75th percentile, etc).\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median Function In C\r\n                \r\n```\nint findMedian (int argc, char** argv){\n\n    int temp;\n    for(int i=0; i<argc; ++i) { /// bubble sort the array\n        for(int j=i+1; j<argc ; ++j) {\n            if(argv[i] > argv[j]) {\n                temp = atoi(argv[i]);\n                argv[i] = argv[j];\n                *argv[j] = temp;\n            }\n        }\n    }\n    int Median;\n    if(argc %2 == 0){///if is even amount of number, take the mean of middle two number\n\n        Median= ((atoi(argv[argc / 2 ])+ atoi(argv[argc / 2 + 1])) /2);\n    }\n    else{ /// if is odd amount of number, take the middle number.\n        Median = atoi(argv[argc / 2 + 1 ]);\n    }\n    return Median;\n}\n```\n\n\nMy median function will give me a median that is not sorted. anyone know why?\nThanks for the help.\n    ", "Answer": "\r\nFirst, you sort pointers to the string representations of numbers instead of numbers. Let's assume that your numbers are integer (since you use ```\natoi```\n and return an ```\nint```\n). You should allocate an array of integers of the appropriate length, convert the strings into integers with ```\nstrtol()```\n in a loop, and store the integers into the array. Now, the data are ready for sorting. \n\nNote 1: Do not use ```\natoi()```\n for conversion because it cannot tell a true 0 from a non-numeric string - unless you can guarantee that all the strings are valid representations of integer numbers. \n\nNote 2: Since your function is meant to calculate the median of an array of integer numbers, make it take an array of integer numbers as a parameter. Do the conversion elsewhere (in the caller).\n\nFinally, consider using ```\nqsort()```\n instead of manually sorting the array. ```\nqsort()```\n is known to work, unlike your code, and it is on average much faster.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median of column with awk\r\n                \r\nHow can I use AWK to compute the median of a column of numerical data?\n\nI can think of a simple algorithm but I can't seem to program it:\n\nWhat I have so far is:\n\n```\nsort | awk 'END{print NR}' \n```\n\n\nAnd this gives me the number of elements in the column. I'd like to use this to print a certain row ```\n(NR/2)```\n. If ```\nNR/2```\n is not an integer, then I round up to the nearest integer and that is the median, otherwise I take the average of ```\n(NR/2)+1```\n and ```\n(NR/2)-1```\n.\n    ", "Answer": "\r\nWith ```\nawk```\n you have to store the values in an array and compute the median at the end, assuming we look at the first column:\n\n```\nsort -n file | awk ' { a[i++]=$1; } END { print a[int(i/2)]; }'\n```\n\n\nSure, for real median computation do the rounding as described in the question:\n\n```\nsort -n file | awk ' { a[i++]=$1; }\n    END { x=int((i+1)/2); if (x < (i+1)/2) print (a[x-1]+a[x])/2; else print a[x-1]; }'\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "ggplot stat_summary median and boxplot median disagreement\r\n                \r\nI'm using this\n\n```\nggplot(dfmergedrearrangemelted, aes(x = Var2, y=value)) + geom_boxplot()+\nggtitle(\"Values and Medians\")+xlab(xlabel)+ylab(\"Magnitude (log10)\")+\nstat_summary(fun.y = median, geom = \"point\", position = position_dodge(width = .9),\nsize = 6, shape = 4, show_guide = F)+\ntheme(axis.text.x=element_text(angle=90))+\nscale_x_discrete(labels=namePosTargetGroupV2)+\nscale_y_log10()\n```\n\n\nto make a series of boxplots and I've separately labeled the medans with an x through stat_summary. The problem is that the median through stat_summary and the median which is the central line in the boxplot aren't agreeing in all cases. This tends to happen when the box of the boxplot is below 0.1 on a log10 scale. Any idea what the cause is? \n    ", "Answer": "\r\nMaybe you need to log10(median), since those are the values computed for the y-axis. At low values, those differences might be seen, but at higher values the log scale appears asymptotic for increasing X, which means - any delta X, will yield a very small delta y. \n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of Medians space complexity\r\n                \r\nI implemented an nth_number selection algorithm using Medians of Medians. \nOn wikipedia, it states that it's space complexity is O(1)\n\nI had to store the medians in a temporary array in order to find the median amongst those medians. How would you be able to do it without using any extra memory? If it does not count as increasing its space complexity, please explain.\n\n```\nfunction nth_number(v, n) {\n    var start = 0;\n    var end = v.length - 1;\n    var targetIndex = n - 1;\n\n    while(true) {\n\n        var medians = []; /* Extra memory. */\n\n        /* Divide our array into groups of 5s. Find a median within each */\n        for(var i = start; i <= end; i += 6) {\n            if(i + 5 < end)\n                medians.push(findMedian(v, i, i + 5));\n            else \n                medians.push(findMedian(v, i, end));\n        }\n\n        var median = findMedian(medians, 0, medians.length - 1); /* Find the median of all medians */\n\n        var index = partition(v, median, start, end);\n\n        if(index === targetIndex) {\n            console.log(median);\n            return median;\n        }\n        else {\n            if(index < targetIndex) {\n                start = index + 1;\n                targetIndex -= index;\n            }\n            else {\n                end = index - 1;\n            }\n        }\n    }\n}\n```\n\n    ", "Answer": "\r\nThe selection algorithm needs to rearrange the input vector, since it does a series of partitions. So it's reasonable to assume that it is possible to rearrange the input vector in order to find the median.\n\nOne simple possible strategy is to interleave the groups of five, instead of making them consecutive. So, if the vector has ```\nN == 5K```\n elements, the groups of five are:\n\n```\n(0,   k,    2k,   3k,   4k)\n(1,   k+1,  2k+1, 3k+1, 4k+1)\n(2,   k+2,  2k+2, 3k+2, 4k+2)\n...\n(k-1, 2k-1, 3k-1, 4k-1, 5k-1)\n```\n\n\nThen when you find the median of a group of five, you swap it with the first element in the group, which means that the vector of medians will end up being the first ```\nk```\n elements of the rearranged vector.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median Calculation in Access with SQL\r\n                \r\nI am having a little difficulty with the Access SQL Query below. It is returning -1 and 0. -1 tells me that there is a median. The zero is there is no median( that 0 is the correct value for that median).Any help with changing the query to show the actual median value. It would really help. Thanks. \n\n```\nSELECT (((Sum(IIf([CALCAULATION]<=[CALCULATION],1,0)))>=(Count(*)/2)) And ((Sum(IIf([CALCULATION]>=[CALCULATION],1,0)))>=(Count(*)/2))) AS Median, \nDatatable.Measure\nFROM Datatable\nWHERE (((Datatable.Date) Between #1/1/2014# And #1/31/2014#) AND ((Datatable.NAME)=\"Test\"))\nGROUP BY Datatable.Measure\nORDER BY Datatable.Measure;\n```\n\n    ", "Answer": "\r\nBecause  ```\n[CALCAULATION]=[CALCULATION]```\n will always be true\nand because (SUM( 1) always = COUNT(*)\n\nThis \n\n```\n      SELECT (((SUM( 1)\n               )>=(COUNT(*)/2\n               )\n```\n\n\nwill evaluate to true\n\nso          \n\n```\n      SELECT (((SUM( 1)\n               )>=(COUNT(*)/2\n               )\n         )\n         AND\n         ((SUM( 1\n              )\n           )>=(COUNT(*)/2)\n         )) AS Median       \n```\n\n\nis the same as ```\ntrue and true```\n which is ```\ntrue```\n ie 1.\n\nThis is clearly not what you had in mind.  \n\nHere's a google search to help\n\nof which I would recommend this link\n\nHere is you SQL reformatted\n\n```\n  SELECT (((SUM( IIF([CALCAULATION]<=[CALCULATION],1,0))\n           )>=(COUNT(*)/2\n               )\n         )\n         AND\n         ((SUM( IIF([CALCULATION]>=[CALCULATION],1,0)\n              )\n           )>=(COUNT(*)/2)\n         )) AS Median\n       , Datatable.Measure\n    FROM Datatable\n   WHERE (Datatable.Date BETWEEN #1/1/2014# AND #1/31/2014#\n          AND \n          Datatable.NAME=\"Test\"\n         )\nGROUP BY Datatable.Measure\nORDER BY Datatable.Measure;\n```\n\n\nPART 2\n\nHere's some SQL you have used to create a median (see NameNeededHereIThink and my comments).  You might also need to add a WHERE clause to limi the dates to one month as in your previous example.  NOTE the tables MUST be the same (or contain the same data!)\n\n```\n SELECT CALCULATION AS Median\n        -- #HARVEY  You might want to add the next lines\n        , a3.MEASURE\n        , a3.CALCULATION\n\n  FROM ( SELECT a1.MEASURE\n              , a1.CALCULATION\n              , COUNT(a1.CALCULATION) Rank\n           FROM Datatable_CALCULATION a1\n              , Datatable_CALCULATION a2   \n                --#HARVEy a1 and a2 MUST be the same table!\n          WHERE a1.CALCULATION < a2.CALCULATION\n             OR (a1.CALCULATION=a2.CALCULATION\n                 AND \n                 a1.MEASURE    <= a2.MEASURE)\n       GROUP BY a1.MEASURE\n              , a1.CALCULATION\n       --#HARVEY REMOVED NEXT LINE\n       -- as order by in sub query cannot be relied upon\n       -- and was only added here for testing purposes\n       -- ORDER BY a1.CALCULATION DESC\n       )\n       a3\n WHERE Rank =\n       -- as 99/2 = 45.5 you may need to round down \n       -- tot the  nearest integer\n       (SELECT cint( ((COUNT()) /2) ) AS NameNeededHereIThink\n       -- (SELECT ((COUNT()+1) /2) \n          FROM Datatable_CALCULATION\n       );\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Using MEDIAN with GROUP BY\r\n                \r\nAs of MariaDB 10.3.3 there exist ```\nMEDIAN```\n function.\nUnfortunately there is a little problem when I try to use it with ```\nGROUP BY```\n statement (currently using v10.3.9).\n\nGiven following table:\n\n```\nCREATE TABLE testmed\n  (\n     id       INT NOT NULL auto_increment,\n          PRIMARY KEY(id),\n     group_id INT NOT NULL DEFAULT 0,\n     score    INT NOT NULL DEFAULT 0\n  ); \n```\n\n\nFilling it up with some data:\n\n```\nINSERT INTO testmed (group_id, score) \nVALUES (1,1), (1,2), (1,2), (1,2), (1,3), (2,5), (2,7), (2,9), (2,11), (2,11);\n```\n\n\nNow I am getting different results with and without ```\nGROUP BY```\n in query:\n\nMariaDB [test]> SELECT group_id, score, MEDIAN(score) OVER (PARTITION BY group_id) FROM testmed;\n+----------+-------+--------------------------------------------+\n| group_id | score | MEDIAN(score) OVER (PARTITION BY group_id) |\n+----------+-------+--------------------------------------------+\n|        1 |     1 |                               2.0000000000 |\n|        1 |     2 |                               2.0000000000 |\n|        1 |     2 |                               2.0000000000 |\n|        1 |     2 |                               2.0000000000 |\n|        1 |     3 |                               2.0000000000 |\n|        2 |     5 |                               9.0000000000 |\n|        2 |     7 |                               9.0000000000 |\n|        2 |     9 |                               9.0000000000 |\n|        2 |    11 |                               9.0000000000 |\n|        2 |    11 |                               9.0000000000 |\n+----------+-------+--------------------------------------------+\n10 rows in set (0.000 sec)\n\nMariaDB [test]> SELECT group_id, score, MEDIAN(score) OVER (PARTITION BY group_id) FROM testmed GROUP BY group_id;\n+----------+-------+--------------------------------------------+\n| group_id | score | MEDIAN(score) OVER (PARTITION BY group_id) |\n+----------+-------+--------------------------------------------+\n|        1 |     1 |                               1.0000000000 |\n|        2 |     5 |                               5.0000000000 |\n+----------+-------+--------------------------------------------+\n\nFirst one is correct, but why it is not working properly with ```\nGROUP BY```\n.\nCurrently I am using query nesting like that:\n\nMariaDB [test]> SELECT * FROM (SELECT group_id, score, MEDIAN(score) OVER (PARTITION BY group_id) FROM testmed) t GROUP BY group_id;\n+----------+-------+--------------------------------------------+\n| group_id | score | MEDIAN(score) OVER (PARTITION BY group_id) |\n+----------+-------+--------------------------------------------+\n|        1 |     1 |                               2.0000000000 |\n|        2 |     5 |                               9.0000000000 |\n+----------+-------+--------------------------------------------+\n2 rows in set (0.000 sec)\n\nbut it feels so wrong doing it that way.\n\nWhat is right way to do it?\n    ", "Answer": "\r\nYour second query is technically invalid:\n\n```\nSELECT\n    group_id,\n    score,\n    MEDIAN(score) OVER (PARTITION BY group_id)\nFROM testmed\nGROUP BY group_id;\n```\n\n\nThe reason it is invalid is because you are selecting ```\nscore```\n which does not appear in the ```\nGROUP BY```\n clause.  The issue here is which value of ```\nscore```\n do you intend the database to use for each ```\ngroup_id```\n?  What appears to be happening here is that MariaDB is arbitrarily choosing the minimum value of ```\nscore```\n.  But since there is only a single ```\nscore```\n value, the median just returns that single value.\n\nKeep in mind that analytic functions are evaluated after the ```\nGROUP BY```\n aggregation takes place.  I think this is the query you were intending to run:\n\n```\nSELECT DISTINCT\n    group_id,\n    MEDIAN(score) OVER (PARTITION BY group_id) score_median\nFROM testmed;\n```\n\n\nIf this doesn't work, because MariaDB doesn't like using ```\nDISTINCT```\n with ```\nMEDIAN```\n, then you can try subquerying:\n\n```\nSELECT DISTINCT\n    group_id,\n    score_median\nFROM\n(\n    SELECT\n        group_id,\n        MEDIAN(score) OVER (PARTITION BY group_id) score_median\n    FROM testmed\n) t;\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of grouped data\r\n                \r\nI have a dataset containing the number of infants born per gestational week.\nI am trying to determine the median gestational age of delivery based on the frequency of infants born for this particular year\nFor example:\n\n\n\n\nGA\nnum_infants_born\n\n\n\n\n20 weeks\n16\n\n\n21 weeks\n22\n\n\n22 weeks\n34\n\n\n23 weeks\n45\n\n\n24 weeks\n60\n\n\n25 weeks\n67\n\n\n26 weeks\n94\n\n\n\n\nand onwards, until 41 weeks. The distribution is (not surprisingly) left skewed\nI also calculated cumulative frequencies using\n```\ndata$cumulative_freq = cumsum(data$num_infants_born) \n```\n\nDo I use the cumulative_freq column to calculate the median number of infants born that corresponds to a gestational week? Using\n```\nmedian(medianGA2001a$cumulative_freq)\n```\n\ngives me an unexpected number.\nI am expecting the median GA to be around 35 weeks, based on the distribution\n    ", "Answer": "\r\nIf I understood your question correctly you're going to want to do something like this:\n```\n# Your gestational data:\ngestational_data <- data.frame(GA_weeks = c(20:26),\n                               num_infants_born = c(16,22,34,45,60,67,94))\n\n# See the apply() documentation by running \n# ?apply\n\napply(gestational_data,\n      1,\n      function(x){\n        rep(x[1],x[2])\n      }) |>\n  unlist()|>\n  median()\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "a function median in Scheme\r\n                \r\nI am new to Scheme and I am using Dr.Racket to try to find the median of the list.\n\nIf the length of list L is odd, the function median returns the median element in the list. If the length of L is even, the function median returns 0. \nexample\n\n```\n(median ‘(1)) returns 1\n(median ‘(1 2)) returns 0\n(median ‘(1 2 3)) returns 2\n(median ‘( 1 2 3 4) returns 0\n```\n\n\ni am only allowed to use \n\n```\n- null?\n- car\n- cdr\n- else\n- = \n- +\n- median\n- cond\n- if\n- user defined names (for my variables)\n- integer literals\n- parentheses\n```\n\n\nAny ideas?\n    ", "Answer": "\r\nThis problem can be solved using the tortoise and hare algorithm, provided that a helper inner procedure is allowed - we need to pass two parameters for this to work. Other than that, all the restrictions are enforced:\n\n```\n(define (median lst)\n  (define (median tortoise hare)\n    (cond ((null? hare) 0)\n          ((null? (cdr hare)) (car tortoise))\n          (else (median (cdr tortoise) (cdr (cdr hare))))))\n  (median lst lst))\n```\n\n\nIt works as expected:\n\n```\n(median '(1))       ; returns 1\n(median '(1 2))     ; returns 0\n(median '(1 2 3))   ; returns 2\n(median '(1 2 3 4)) ; returns 0\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Pandas DataFrame Median Function\r\n                \r\nIf I have a Pandas DataFrame and want to calculate the median value for each column, it seems that the argument axis=1 should give the median by columns (according to the documentation). But in practice, axis=0 gives the column medians. Here is a simple replicable example:\n\n```\nimport pandas as pd\n\nmy_data = [[1.1, 2.2, 3.3], [1.2, 2.3, 3.4], [1.3, 2.4, 3.5]]\ndf = pd.DataFrame(my_data)\nprint(df.head())\n\nprint(\"\\nTry to calculate median with axis=1\\n\")\n\nprint(df.median(axis=1))\n```\n\n\nIt is showing the median by row. Changing it to axis=0 shows the median by column. Does this have to do with the way that the index is set for the DataFrame?\n    ", "Answer": "\r\nIt does what it is supposed to do, ```\naxis = 1```\n means to apply the function each row. You can see from this other example\n\n```\n>>> print(df.sum(axis = 1))\n0    6.6\n1    6.9\n2    7.2\ndtype: float64\n```\n\n\nOr equivalently\n\n```\n>>> print(df.apply(sum, axis = 1))\n0    6.6\n1    6.9\n2    7.2\ndtype: float64\n```\n\n\nand you can see in the documentation\n\n```\naxis : {0 or ‘index’, 1 or ‘columns’}, default 0\n\nAxis along which the function is applied:\n\n0 or ‘index’: apply function to each column.\n1 or ‘columns’: apply function to each row.\n```\n\n\nSo if you want to calculate the mean of each row column you should use ```\naxis = 0```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Help needed with Median If in Excel\r\n                \r\nI need to return a median of only a certain category on a spread sheet.  Example Below\n\n```\nAirline    5\nAuto       20\nAuto       3\nBike       12\nAirline    12\nAirline    39\n```\n\n\nect. \n\nHow can I write a formula to only return a median value of the Airline Categories.  Similar to Average if, only for median.  I cannot re-arrange the values.  Thank you!\n    ", "Answer": "\r\nAssuming your categories are in cells A1:A6 and the corresponding values are in B1:B6, you might try typing the formula ```\n=MEDIAN(IF($A$1:$A$6=\"Airline\",$B$1:$B$6,\"\"))```\n in another cell and then pressing ```\nCTRL+SHIFT+ENTER```\n.\n\nUsing ```\nCTRL+SHIFT+ENTER```\n tells Excel to treat the formula as an \"array formula\".  In this example, that means that the ```\nIF```\n statement returns an array of 6 values (one of each of the cells in the range ```\n$A$1:$A$6```\n) instead of a single value. The ```\nMEDIAN```\n function then returns the median of these values. See http://www.cpearson.com/excel/arrayformulas.aspx for a similar example using ```\nAVERAGE```\n instead of ```\nMEDIAN```\n.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of an Array\r\n                \r\nHey guys i am developing with Delphi 10 Seattle. And i actually need help at getting a Median of an Array eg :\n\n```\n allitems: array[1..500] of Double;\n```\n\n\nI gave the value of each arrayitem in the array in a procedure. So i got an array of 500 doubles with values in it and want to get the Median out of this 500 values. First of all i guess i have to sort the array from low to high values and after it getting the median. So How can i sort the array first and get the median after sorting ?\n    ", "Answer": "\r\nThe Median of an even number of elements is defined as the mean of the center elements: \n\n```\nvar\n  allitems : TArray<double>;\n\n  TArray.Sort<double>(allitems);\n  median := (allitems[249] + allitems[250]) / 2; // TArray<double> starts with index 0\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "a function median in Scheme\r\n                \r\nI am new to Scheme and I am using Dr.Racket to try to find the median of the list.\n\nIf the length of list L is odd, the function median returns the median element in the list. If the length of L is even, the function median returns 0. \nexample\n\n```\n(median ‘(1)) returns 1\n(median ‘(1 2)) returns 0\n(median ‘(1 2 3)) returns 2\n(median ‘( 1 2 3 4) returns 0\n```\n\n\ni am only allowed to use \n\n```\n- null?\n- car\n- cdr\n- else\n- = \n- +\n- median\n- cond\n- if\n- user defined names (for my variables)\n- integer literals\n- parentheses\n```\n\n\nAny ideas?\n    ", "Answer": "\r\nThis problem can be solved using the tortoise and hare algorithm, provided that a helper inner procedure is allowed - we need to pass two parameters for this to work. Other than that, all the restrictions are enforced:\n\n```\n(define (median lst)\n  (define (median tortoise hare)\n    (cond ((null? hare) 0)\n          ((null? (cdr hare)) (car tortoise))\n          (else (median (cdr tortoise) (cdr (cdr hare))))))\n  (median lst lst))\n```\n\n\nIt works as expected:\n\n```\n(median '(1))       ; returns 1\n(median '(1 2))     ; returns 0\n(median '(1 2 3))   ; returns 2\n(median '(1 2 3 4)) ; returns 0\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Help needed with Median If in Excel\r\n                \r\nI need to return a median of only a certain category on a spread sheet.  Example Below\n\n```\nAirline    5\nAuto       20\nAuto       3\nBike       12\nAirline    12\nAirline    39\n```\n\n\nect. \n\nHow can I write a formula to only return a median value of the Airline Categories.  Similar to Average if, only for median.  I cannot re-arrange the values.  Thank you!\n    ", "Answer": "\r\nAssuming your categories are in cells A1:A6 and the corresponding values are in B1:B6, you might try typing the formula ```\n=MEDIAN(IF($A$1:$A$6=\"Airline\",$B$1:$B$6,\"\"))```\n in another cell and then pressing ```\nCTRL+SHIFT+ENTER```\n.\n\nUsing ```\nCTRL+SHIFT+ENTER```\n tells Excel to treat the formula as an \"array formula\".  In this example, that means that the ```\nIF```\n statement returns an array of 6 values (one of each of the cells in the range ```\n$A$1:$A$6```\n) instead of a single value. The ```\nMEDIAN```\n function then returns the median of these values. See http://www.cpearson.com/excel/arrayformulas.aspx for a similar example using ```\nAVERAGE```\n instead of ```\nMEDIAN```\n.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding the median of medians of quicksort\r\n                \r\nI am working on quick-sort with median of medians algorithm. I normally use the selection-sort to get the median of the subarrays of 5 elements. However, if there are thousands of subarrays, it means that I have to find a median of thousand medians. I think I cannot use the selection-sort to find that median because it is not optimal. \n\nQuestion:\n\nCan anyone suggest me a better way to find that median?\nThanks in advance.\n    ", "Answer": "\r\nThe median-of-medians algorithm doesn't work by finding the median of each block of size 5 and then running a sorting algorithm on them to find the median.  Instead, you typically would sort each block, take the median of each, then recursively invoke the median-of-medians algorithm on these medians to get a good pivot.  It's very uncommon to see the median-of-medians algorithm used in quicksort, since the constant factor in the O(n) runtime of the median-of-medians algorithm is so large that it tends to noticeably degrade performance.\n\nThere are several possible improvements you can try over this original approach.  The simplest way to get a good pivot is just to pick a random element - this leads to Θ(n log n) runtime with very high probability.  If you're not comfortable using randomness, you can try using the introselect algorithm, which is a modification of the median-of-medians algorithm that tries to lower the constant factor by guessing an element that might be a good pivot and cutting off the recursion early if one is found.  You could also try writing introsort, which uses quicksort and switches to a different algorithm (usually heapsort) if it appears that the algorithm is degenerating.\n\nHope this helps!\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median Program in python\r\n                \r\nI'm trying to implement median in Python, but when I run the script, it doesn't work properly. But just stop, nothing else happens.\n\nMedian Program\n\n```\ndata = []\nvalue = input(\"Enter a value (blank line to quit): \")\n\nwhile value != \" \":\n     value = float(value)\n\ndata.append(value)\nvalue = input(\"Enter a value (blank line to quit): \")\ndata.sort()\n\nif len(data) == 0:\n    print(\"No values were entered: \")\nelif len(data) % 2 == 1:\n     median = data[len(data) // 2]\n     print(\"The median of those values is\", median)\nelse:\n    median = (data[len(data) // 2] + data[len(data) // 2 - 1]) / 2\n    print(\"The median of those values is\", median)\n```\n\n    ", "Answer": "\r\nThe code had two mistakes.\n\nFirst one, the code has a problem of indentation.\n\n```\nwhile value != \" \":\n     value = float(value)\n\ndata.append(value)\n```\n\n\nIn this code, value will never be appended in data, as this is outside of the while block. ```\nvalue != \" \"```\n will always be evaluated at ```\nTrue```\n as ```\nvalue```\n will never change.\n\nThe second one is that blank line is not ```\n\" \"```\n but ```\n\"\"```\n. So in the indentation-fixed code, it will result in an error. \n\n\n  cannot convert \" \" to float\n\n\nHere is the fixed code\n\n```\ndata = []\nvalue = input(\"Enter a value (blank line to quit): \")\n\nwhile value != \"\":\n    value = float(value)\n\n    data.append(value)\n    value = input(\"Enter a value (blank line to quit): \")\n    data.sort()\n\nif len(data) == 0:\n    print(\"No values were entered: \")\nelif len(data) % 2 == 1:\n     median = data[len(data) // 2]\n     print(\"The median of those values is\", median)\nelse:\n    median = (data[len(data) // 2] + data[len(data) // 2 - 1]) / 2\n    print(\"The median of those values is\", median)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median IF in excel\r\n                \r\nlooking for similar option for conditional average : =AVERAGEIF(A:A,A2,B:B) but this time for Median in excel. I want to generate Median per IDs in column 1 for large number of subjects\n\nthanks\n    ", "Answer": "\r\nTry this formula:\n\n```\n=MEDIAN(IF(A:A=A2,B:B))\n```\n\n\nThis is an array formula, which means you will have to enter it by pressing ```\nCtrl + Shift + Enter```\n.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Computing median in map reduce\r\n                \r\nCan someone example the computation of median/quantiles in map reduce? \n\nMy understanding of Datafu's median is that the 'n' mappers sort the \ndata and send the data to \"1\" reducer which is responsible for sorting \nall the data from n mappers and finding the median(middle value) \nIs my understanding correct?, \n\nif so, does this approach scale for \nmassive amounts of data as i can clearly see the one single reducer \nstruggling to do the final task. \nThanks \n    ", "Answer": "\r\nTrying to find the median (middle number) in a series is going to require that 1 reducer is passed the entire range of numbers to determine which is the 'middle' value.\n\nDepending on the range and uniqueness of values in your input set, you could introduce a combiner to output the frequency of each value - reducing the number of map outputs sent to your single reducer. Your reducer can then consume the sort value / frequency pairs to identify the median.\n\nAnother way you could scale this (again if you know the range and rough distribution of values) is to use a custom partitioner that distributes the keys by range buckets (0-99 go to reducer 0, 100-199 to reducer 2, and so on). This will however require some secondary job to examine the reducer outputs and perform the final median calculation (knowing for example the number of keys in each reducer, you can calculate which reducer output will contain the median, and at which offset)\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "What is the median value is decimal? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs details or clarity. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Add details and clarify the problem by editing this post.\r\n                \r\n                    \r\n                        Closed 3 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI'm writing a program to find the median of an array in CPP. I am not sure if I have a clear idea about what a median is. As far as I know, I've written my program to find median but when the array is even-numbered, I'm confused whether I should print the ceiling or ground value of division ofthe decimal output I get when I divide the middle two elements from the array.\n\n```\n\nusing namespace std;\n\nvoid findMedian(int sortedArray[], int N);\nint main()\n{\n    int ip[4] = {1, 2, 5, 8};\n    findMedian(ip, 4);\n}\n\nvoid findMedian(int sortedArray[], int N)\n{\n\n    int size = N;\n    int median;\n    if ((size % 2) != 0)\n    {\n        median = sortedArray[(size / 2)];\n    }\n    else\n    {\n        median = (sortedArray[(size / 2) - 1] + sortedArray[size / 2]) / 2;\n    }\n    cout << median;\n}\n```\n\n\nThanks in advance, also if anyone can give the literal purpose of finding a median, I'd appreciate and it'd help me not ask this question again when I have to deal with Median.\nPardon my English.\n    ", "Answer": "\r\non odd array the median is unique, but in a even array there are two medians: the lower median (the one in (n/2)th position) and the upper median (the one in (n/2+1) th position). I usually always see that the lower median is used as \"median\" for even arrays.\n\nIn this case you need only one formula for even and odd arrays:\n\n```\nmedianPosition = n/2; // integer division\nmedian = sortedArray[medianPosition];\n```\n\n\nNote that it is true only for array where indices starts with zero (like C/C++).\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Describe() and median() doesn't count the median\r\n                \r\nI have a dataframe with  numeric data (type is int32, checked): zeros and numbers.\nI call a function describe() and I receive the dataframe with zeros instead of medians.\nHowever. when I call a median it gives me it:\n```\ndf.columns.median()\n```\n\nWhat might be the reason?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of medians in Python doesn't run in O(n)\r\n                \r\nFor a project, I want to compare the runtime of different median finding algorithms. I started with the \"Medians of Medians\" and basically used the code I found by Geeks for Geeks.\nI tested it by comparing to the standard python method of calculating the median.\n```\nif __name__ == '__main__':\n    arr = random.sample(range(1, 10000000000), 10000001) \n    arr1=arr[:] # i copied the list to make sure they both have the same starting position \n  \n    t1=time.time()\n    print(\"std median\", statistics.median(arr))\n    t2 = time.time()\n    print(\"time std median:\",t2-t1)\n    t12 = time.time()\n    n = len(arr1)\n    k = n // 2 + 1 #median for odd number of elements\n    print(\"Med of Med:\", kthSmallest(arr1, 0, n - 1, k))\n    t21 = time.time()\n    print(\"time med of med:\", t21-t12)\n```\n\nFor an unknown reason my runtimes are way to high and just wrong. Finding the median in an array of ~10 Mio elements took the following time:\n```\nStandard Python method:                  13.28 seconds\nMy implementation of median of medians:  28.91 seconds\n```\n\nIs there something wrong with the implementation I found on Geek for Geeks? It should be the other way around. The standard Python method has a runtime of ```\nO(n log n)```\n and Median of Medians runs in ```\nO(n)```\n, so it should be faster!\nDoes anyone know what I did wrong and could give me a hint how to fix it?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of aggregated data\r\n                \r\nI have aggregated a dataframe like so:\n\n```\nx_mined_median = df[(df.Confirmed == True) & (df.Type == \"Mined\")].groupby(['dat']).median()```\n\n\nThe (shortened) result is this:\n\n```\n            Confirmed      Amount\ndat\n2017-09-01       True  836.202740\n2017-09-03       True  650.958904\n2017-09-04       True  150.076712\n2017-09-07       True  445.928767\n2017-09-08       True  382.439041\n2017-09-10       True  401.145205\n```\n\n\nIs there a way to get the median of the ```\nAmount```\n column? (A median of the median?)\n    ", "Answer": "\r\nSelect column ```\nAmount```\n and get ```\nmedian```\n:\n\n```\nx_mined_median = df[(df.Confirmed == True) & (df.Type == \"Mined\")].groupby(['dat']).median()\n\na = x_mined_median['Amount'].median()\n```\n\n\nAlternative solution:\n\n```\nx_mined_median = (df.loc[(df.Confirmed == True) & (df.Type == \"Mined\"), 'Amount']\n                   .groupby(df['dat']).median())\n\na = x_mined_median.median()\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Get corresponding index of median\r\n                \r\nI have a pandas dataframe with one column and I would like to know the index of the median. That is, I determine the median this way:\n\ndf.median()\n\nThis gives me the median value, but I would like to know the index of that row. Is it possible to determine this? For a list with uneven length I could search for the index with that value but for even list lengths this is not going to work. Can someone help?\n\nThis question was asked in another post, where the answer was basically to search for rows which have the same value as the median. But like I said, that will not work for a list of even length.\n\nBelow is a Min Example (I have included the suggestion by Wen below):\n\n```\ndf = pd.DataFrame(np.random.randn(6, 1), columns=list('A'))\ndf.median()\ndf.loc[df[0]==df[0].median()]\n\nOut[120]: \nEmpty DataFrame\nColumns: [0]\nIndex: []\n```\n\n    ", "Answer": "\r\nYou can use Wen's answer for dataframes of odd length. \n\nFor dataframes of even length, the question does not really make sense. As you have pointed out the median does not exist in the dataframe. However, you can sort the dataframe by your column of interest and then find the indices for the two \"median\" values.\n\n```\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randn(6, 1), columns=list('A'))\ndf.median()\n\ndf.loc[df['A']==df['A'].median()]\n\ndf.sort_values(by='A', inplace=True)\n\ndf[df['A'] > df['A'].median()].iloc[0]\ndf[df['A'] < df['A'].median()].iloc[-1]\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Minimum no. of comparisons to find median of 3 numbers\r\n                \r\nI was implementing quicksort and I wished to set the pivot to be the median or three numbers. The three numbers being the first element, the middle element, and the last element.\n\nCould I possibly find the median in less no. of comparisons? \n\n```\nmedian(int a[], int p, int r)\n{\n    int m = (p+r)/2;\n    if(a[p] < a[m])\n    {\n        if(a[p] >= a[r])\n            return a[p];\n        else if(a[m] < a[r])\n            return a[m];\n    }\n    else\n    {\n        if(a[p] < a[r])\n            return a[p];\n        else if(a[m] >= a[r])\n            return a[m];\n    }\n    return a[r];\n}\n```\n\n    ", "Answer": "\r\nIf the concern is only comparisons, then this should be used.\n\n```\nint getMedian(int a, int b , int c) {\n    int x = a-b;\n    int y = b-c;\n    int z = a-c;\n    if(x*y > 0) return b;\n    if(x*z > 0) return c;\n    return a;\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Time complexity for median of medians\r\n                \r\nIn several posts (e.g., https://cs.stackexchange.com/questions/125995/median-of-medians-proof-for-time-complexity) and articles on Google, I've seen the following time complexity recurrence written for the median of medians:\n```\nT(n) <= T(n/5) + T(7n / 10) + O(n)```\n\nBut I am confused as this recurrence seems to consider MoM as embedded into quick select and is therefore the recurrence formula for quick select to find an exact median while using MoM for finding an approximate pivot.\nIf we're simply finding to find an approximate median using MoM, then what is the recurrence?\nWould it just be\n```\nT(n) <= T(n/5) + O(n)```\n\n?\n    ", "Answer": "\r\nThe median-of-medians algorithm recursively calls the full quickselect at each level.\nIf you use \"plain\" m-o-m instead of quickselect to get your pivot for quicksort, you are only simplifying the top level quickselect.  All the lower-level calls remain, and so the complexity of the whole operation does not change.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding Median in C\r\n                \r\nI wrote this code to find mean and median but I always take these errors:\n\n\n  \"71 warning: passing argument 1 of 'median' makes pointer from integer without a cast\"\n\n\nand:\n\n\n  \"14 note: expected 'int *' but argument is of type 'int'\".\n\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nfloat mean(float x,int y)\n{\nfloat toplam = x;\nint adet=y;\n\nreturn toplam/adet;\n\n}\n\nint median(int AlinanSayilar[200],int adet)\n{\nint kacinci,kacinci2;\nint medyan=0;\n\nif(adet%2==1)\n{\n    kacinci=(adet/2)-1;\n    kacinci2=kacinci+1;\n    medyan=(AlinanSayilar[kacinci]+AlinanSayilar[kacinci2])/2;\n}\nelse\n{\n    kacinci=(adet/2)-0.5;\n    medyan=AlinanSayilar[kacinci];\n}\n\nprintf(\"%d\",medyan);\n\nreturn 0;\n}\n\nint main()\n{\nint sayilar[200];\nint i,k,j,holder;\nfloat sum=0;\n\nprintf(\"Welcome the calculator...\\n\\tThis calculator finds mean,median and \nmode of your numbers...\\n\");\nprintf(\"\\t\\tNOTE:Please enter only integer numbers...\\n\\n\");\n\nfor(i=0;true;i++)\n{\n    printf(\"Please enter a number(press -1 for exit): \");\n    scanf(\"%d\",&sayilar[i]);\n    printf(\"\\n\");\n\n    if(sayilar[i]==-1){\n        break;\n        }\n    sum +=sayilar[i];\n}\n\nfor(k=0;k<i-1;k++)\n{\n    for(j=k+1;j<i;j++)\n    {\n        if(sayilar[k]>sayilar[j])\n        {\n            holder=sayilar[k];\n            sayilar[k]=sayilar[j];\n            sayilar[j]=holder;\n        }\n    }\n}\n\nprintf(\"Mean:%.2f\",mean(sum,i));\nmedian(sayilar[i],i);\n\nsystem(\"pause\");\nreturn 0;\n}\n```\n\n\nWhat should I do?Thanks in advance for your helping.And if you know finding mode(most repetitive number) could you write its code?\n    ", "Answer": "\r\nYour median function takes an array and an integer, but in your main() function you called it with two ints. sayilar[i] is the i'th index of the sayilar array, so it is an int.\n\nYou can fix it by changing the line to\n\n```\nmedian(sayilar,i);\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate the median in MongoDB aggregation framework\r\n                \r\nIs there a way to calculate the median using the MongoDB aggregation framework?\n    ", "Answer": "\r\nThe median is somewhat tricky to compute in the general case, because it involves sorting the whole data set, or using a recursion with a depth that is also proportional to the data set size.  That's maybe the reason why many databases don't have a median operator out of the box (MySQL doesn't have one, either).\n\nThe simplest way to compute the median would be with these two statements (assuming the attribute on which we want to compute the median is called ```\na```\n and we want it over all documents in the collection, ```\ncoll```\n):\n\n```\ncount = db.coll.count();\ndb.coll.find().sort( {\"a\":1} ).skip(count / 2 - 1).limit(1);\n```\n\n\nThis is the equivalent to what people suggest for MySQL.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calc Median JavaScript\r\n                \r\nI need a \"median\" button that will calculate the median of the drawn numbers from the table.\n\n\r\n\r\n```\n<html>\r\n<head>\r\n<title> Numery losowania </title>\r\n<script>\r\n    var n1= Array.from({length: 9}, () => Math.floor(Math.random() * 70));\r\n \r\n    document.writeln(\"<table border = \\\"1\\\"\");\r\n\r\n    n1.sort((a,b) => a-b); // sort the array\r\n   \r\n    for(var i=0; i < n1.length;i++)\r\n    {\r\n        document.writeln(\"<tr><td>\" + n1[i] + \"</td></tr>\");\r\n    }\r\n    document.writeln(\"</table>\");\r\n</script>\r\n<form>\r\n<input type=\"button\" value=\"Odśwież\" onclick=\"location.reload()\">\r\n</form>\r\n</head>```\n\r\n\r\n\r\n\n    ", "Answer": "\r\nYou can use following method:\n\n```\nfunction median(numbers) {\n    var median = 0, count = numbers.length;\n    numbers.sort();\n\n    if (count % 2 === 0) {  // is even\n        median = (numbers[count / 2 - 1] + numbers[count / 2]) / 2;\n    } else { // is odd\n        median = numbers[(count - 1) / 2];\n    }\n\n    return median;\n}\n```\n\n\nUpdate 1:\nAs per your requirement\n\n```\n<script>\n    function median(numbers) {\n        var median = 0, count = numbers.length;\n        numbers.sort();\n\n        if (count % 2 === 0) {  // is even\n            median = (numbers[count / 2 - 1] + numbers[count / 2]) / 2;\n        } else { // is odd\n            median = numbers[(count - 1) / 2];\n        }\n\n        document.getElementById(\"median\").innerHTML = median;\n    }\n\n    var n1= Array.from({length: 9}, () => Math.floor(Math.random() * 70));\n    ...\n    ...\n    document.writeln(\"</table>\");\n    document.writeln(\"<button onclick=median(\"+n1+\")>Median</button>\");\n    document.writeln(\"<div id=\\\"median\\\"></div>\");\n\n</script>\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Rolling median in R\r\n                \r\nI need to calculate rolling median. And have following code\n```\ni <- 0\nmedian_roll<-c(\"\")\nx<-c(1:10)\nn<-2\ny<-as.data.frame(x)\n  while(i < length(x)-n){\n    median_roll[i] <- median(y[i:i+n,])\n    i <- i + 1  \n  }\n```\n\nWhich produce following reluts in median_roll\n```\n[1] \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"\n```\n\nWhat i need is\n```\n[1] \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"\n```\n\n    ", "Answer": "\r\nHere are three options.\nFirst the data.\n```\nx <- 1:10\ny <- data.frame(x)\nn <- 2L\n```\n\n1 Base R, ```\nfor```\n loop.\n```\nmedian_roll <- numeric(length(x) - n)\nfor(i in seq_along(median_roll)){\n  median_roll[i] <- median(y[i:(i+n), ])\n}\n\nmedian_roll\n#[1] 2 3 4 5 6 7 8 9\n```\n\n2 Base R, ```\nsapply```\n loop.\n```\nsapply(seq_along(median_roll), \\(i, n) median(y[i:(i+n), ]), n = 2L)\n#[1] 2 3 4 5 6 7 8 9\n```\n\n3 Package ```\nzoo```\n.\n```\nzoo::rollapplyr(y$x, width = 3L, FUN = median)\n#[1] 2 3 4 5 6 7 8 9\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Weighted Median bootstrap\r\n                \r\nCurrently I am obtaining 95% CI on the median by using this\n```\nx<-rnorm(100)\n        bootmed = apply(matrix(sample(x, rep=TRUE, 10^4*length(x)), nrow=10^4), 1, median)\n    quantile(bootmed, c(.025, 0.975))[1]->a1\n    quantile(bootmed, c(.025, 0.975))[2]->a2\n```\n\nthe problem now is that i need to do this for a weighted Median. I use the ```\nweightedMedian```\n function in the  ```\nmatrixStats```\n package: ```\nmatrixStats::weightedMedian```\n\nso I do not only have x with the numbers but also y with the weights ```\n(runif(100))```\n - so now I calculate\n```\nweightedMedian(x,runif(100))\n```\n\nbut how does the equivalent for the above bootstrap go?\n    ", "Answer": "\r\nThe ```\n...```\n argument of the ```\napply()```\n function allows you to pass optional arguments to your function. Alternatively, you can also define a custom function. Assuming that your median weights are identical for all rows, the answer to your question looks like this:\n\n```\nx <- rnorm(100)\ny <- rnorm(100)\nM <- matrix(sample(x, rep=TRUE, 10^4*length(x)), nrow=10^4)\n\nbootmed = apply(M, 1, weightedMedian, w=y)\n# Or, alternatively..\nbootmed = apply(M, 1, function(x) weightedMedian(x,y))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "R Estimating the population median value by combining sample medians\r\n                \r\nI need to calculate the population median for several time periods by combining the medians of 10 different samples in each period (dataset Median). Each of the sample median has been obtained by taking a different number of observations (dataset Observation). \n\nMedian - dataset\n\n```\n       Time1    Time2   Time3   Time4   Time5\nSample1 60000   71139   70000   75000   75000\nSample2 80000   88000   87750   88500   90000\nSample3 66000   73325   73000   78126   75000\nSample4 60000   74000   72000   75500   73000\nSample5 50500   60000   60000   66750   81500\nSample6 60000   70000   72000   78500   80000\nSample7 50000   60000   59999   63000   60000\nSample8 53000   55000   58300   59995   64500\nSample9 92529   111000  115000  120063  118000\nSample10 92500  115000  101000  104100  110075 \n```\n\n\nObservations - dataset\n\n```\nTime1   Time2   Time3   Time4   Time5\nSample1 159 202 174 134 172\nSample2 148 178 148 121 140\nSample3 563 680 652 513 678\nSample4 554 634 518 512 595\nSample5 343 415 347 270 390\nSample6 738 954 769 720 825\nSample7 704 949 863 648 762\nSample8 595 681 640 517 663\nSample9 517 782 610 504 472\nSample10    627 733 621 493 512\n```\n\n\nI am trying to generate a vector with the Median[1:1] repeated Observations[1:1] times, this vector need to be concatenate to another vector Median[1:2] repeated Observations[1:2] times, then concatenate the vector to another vector Median[1:3] repeated Observations[1:3] times , and so on... \n\nI aim to generate 5 vectors (as many as columns - periods) each of these vectors with a length equal to the aggregate number of sample observations in each time frame. \n\n```\n for (i in 1:ncol(Median))  {\n\n   for (j in 1:nrow(Median)) { \n\n  vector_median=(seq(as.numeric(Med[i,j]),as.numeric(Med   [i,j]),length.out=as.numeric(Observations[i,j])))\n\n }\n }\n```\n\n    ", "Answer": "\r\nConsider a nested ```\nmapply```\n (the multiple-input version of apply family) where you pass both Med and Observations columns in pairwise iteration and then pass each of the columns corresponding Sample values in a pairwise iteration into the ```\nrep()```\n function:\n\nData\n\n```\ntxt = \"       Time1    Time2   Time3   Time4   Time5\nSample1 60000   71139   70000   75000   75000\nSample2 80000   88000   87750   88500   90000\nSample3 66000   73325   73000   78126   75000\nSample4 60000   74000   72000   75500   73000\nSample5 50500   60000   60000   66750   81500\nSample6 60000   70000   72000   78500   80000\nSample7 50000   60000   59999   63000   60000\nSample8 53000   55000   58300   59995   64500\nSample9 92529   111000  115000  120063  118000\nSample10 92500  115000  101000  104100  110075 \"\n\nMed = read.table(text=txt, header=TRUE)\n\ntxt = \"Time1   Time2   Time3   Time4   Time5\nSample1 159 202 174 134 172\nSample2 148 178 148 121 140\nSample3 563 680 652 513 678\nSample4 554 634 518 512 595\nSample5 343 415 347 270 390\nSample6 738 954 769 720 825\nSample7 704 949 863 648 762\nSample8 595 681 640 517 663\nSample9 517 782 610 504 472\nSample10    627 733 621 493 512\"\n\nObs = read.table(text=txt, header=TRUE)\n```\n\n\nProcess \n\n```\nreplicate_medians <- function(m,o){      \n  mapply(function(m_sub, o_sub) rep(m_sub, times=o_sub), m, o)      \n}\n\noutput <- mapply(function(x,y) unlist(replicate_medians(x,y)), Med, Obs, SIMPLIFY=FALSE)    \n\n# EQUIVALENT WITH Map() WRAPPER\noutput <- Map(function(x,y) unlist(replicate_medians(x,y)), Med, Obs)\n```\n\n\nOutput (returns a list of 5 named numeric vectors)\n\n```\nstr(output)\n# List of 5\n#  $ Time1: int [1:4948] 60000 60000 60000 60000 60000 60000 60000 60000 60000 60000 ...\n#  $ Time2: int [1:6208] 71139 71139 71139 71139 71139 71139 71139 71139 71139 71139 ...\n#  $ Time3: int [1:5342] 70000 70000 70000 70000 70000 70000 70000 70000 70000 70000 ...\n#  $ Time4: int [1:4432] 75000 75000 75000 75000 75000 75000 75000 75000 75000 75000 ...\n#  $ Time5: int [1:5209] 75000 75000 75000 75000 75000 75000 75000 75000 75000 75000 ...\n\nlength(output$Time1[output$Time1==60000])\n#[1] 1451   <---- THREE SAMPLES WITH THIS MEDIAN: 159 + 554 + 738 = 1,451\n\nlength(output$Time1[output$Time1==80000])\n# [1] 148\n\nlength(output$Time1[output$Time1==66000])\n# [1] 563\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median of five points python\r\n                \r\nMy data frame (```\ndf```\n) has a list of numbers (total 1773) and I am trying to find a median for five numbers (e.g. the ```\nmedian of 3rd number = median (1st,2nd,3rd,4th,5th)```\n)\n\n```\nnum\n10\n20\n15\n34\n...\n...\n...\n\ndef median(a, b, c,d,e):\n    I=[a,b,c,d,e]\n    return I[2]\n\n\n\nnum_median = [num[0]]\n\nfor i in range(1, len(num)):\n    num_median = median(num[i - 1], num[i-2], num[i],num[i+1],num[i+2])\n\ndf['num_median']=num_median\n\n\nIndexError: index 1773 is out of bounds for axis 0 with size 1773\n```\n\n\nWhere did it go wrong and Is there any other method to compute the median?\n    ", "Answer": "\r\nAn example which will help:\n\n```\na = [0, 1, 2, 3]\nprint('Length={}'.format(len(a)))\nprint(a(4))\n```\n\n\nYou are trying the same thing. The actual index of an element is one lower than the place it is. Keep in mind your exception shows you exactly where your problem is.\n\nYou need to modify:\n\n```\nfor i in range(1, len(num) - 2):\n    num_median = median(num[i - 1], num[i-2], num[i],num[i+1],num[i+2])\n```\n\n\nSo that your last index check will not be too large. Otherwise, when you are at the end of your array (index = 1773) you will be trying to access an index which doesn't exist (1773 + 2).\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Get median of array\r\n                \r\nI have an array that looks like this:\n\n```\nlet arr = [1,2,3,4,5,6,7,8,9]\n```\n\n\nI know you can get ```\nmin```\n and ```\nmax```\n by:\n\n```\nlet min = arr.min()\nlet max = arr.max()\n```\n\n\nBut how do you get the median?\n    ", "Answer": "\r\nTo get the ```\nmedian```\n you can use the following:\n\n```\nlet median = arr.sorted(by: <)[arr.count / 2]\n```\n\n\nIn your case it will return ```\n5```\n.\n\nAs @Nirav pointed out ```\n[1,2,3,4,5,6,7,8]```\n will return ```\n5```\n but should return ```\n4.5```\n.\n\nUse this instead:\n\n```\nfunc calculateMedian(array: [Int]) -> Float {\n    let sorted = array.sorted()\n    if sorted.count % 2 == 0 {\n        return Float((sorted[(sorted.count / 2)] + sorted[(sorted.count / 2) - 1])) / 2\n    } else {\n        return Float(sorted[(sorted.count - 1) / 2])\n    }\n}\n```\n\n\nUsage:\n\n```\nlet array = [1,2,3,4,5,6,7,8]\nlet m2 = calculateMedian(array: array) // 4.5\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate SQL Median\r\n                \r\nI was trying to implement a median from this solution (among others, but this seemed the simplest Median code): Function to Calculate Median in Sql Server\n\nHowever, I'm having difficulty in its application.  This is my current SQL query.  My goal is to find the Median ```\nTotalTimeOnCall```\n for ```\nCallerComplaintTypeID```\n on a given Week, Month, and Department.  I think my biggest issue is that I'm just fundamentally not understanding how to apply this Median function to achieve my results.\n\nFor example, if I needed an Average, instead, I could just change that ```\nORDER BY```\n to a ```\nGROUP BY```\n and then slap an ```\nAVG(TotalTimeOnCall)```\n instead.  How do I accomplish this idea with this Median solution, instead?\n\nThis is the \"raw data\" query:\n\n```\nWITH rawData as (\nSELECT \n    DepartmentName\n    ,MONTH(PlacedOnLocal) AS MonthNumber\n    ,CASE \n    WHEN Datepart(day, PlacedOnLocal) < 8 THEN '1' \n    WHEN Datepart(day, PlacedOnLocal) < 15 THEN '2' \n    WHEN Datepart(day, PlacedOnLocal) < 22 THEN '3' \n    WHEN Datepart(day, PlacedOnLocal) < 29 THEN '4' \n    ELSE '5' \n    END AS WeekNumber\n    ,CallerComplaintTypeID\n    ,TotalTimeOnCall\nFROM [THE_RELEVANT_TABLE]\nWHERE PlacedOnLocal BETWEEN '2014-09-01' AND '2014-12-31'\n    AND CallerComplaintTypeID IN (5,89,9,31,203)\n    AND TotalTimeOnCall IS NOT NULL\n)\nSELECT \nDepartmentName,\nMonthNumber,\nWeekNumber,\nCallerComplaintTypeID,\nTotalTimeOnCall\nFROM\nrawData\nORDER BY DepartmentName, MonthNumber, WeekNumber, CallerComplaintTypeID\n```\n\n\nwith this sample output:\n\n```\nDepartmentName  MonthNumber WeekNumber  CallerComplaintTypeID   TotalTimeOnCall\nDept_01     9   1   5   654\nDept_01     9   1   5   156\nDept_01     9   1   5   21\nDept_01     9   1   5   67\nDept_01     9   1   5   13\nDept_01     9   1   5   97\nDept_01     9   1   5   87\nDept_01     9   1   5   16\n```\n\n\nthis is the Median solution from above:\n\n```\nSELECT\n(\n    (\n        SELECT MAX(TotalTimeOnCall)\n        FROM\n            (\n                SELECT TOP 50 PERCENT TotalTimeOnCall\n                FROM rawData\n                WHERE TotalTimeOnCall IS NOT NULL\n                ORDER BY TotalTimeOnCall\n            ) AS BottomHalf\n    )\n    +\n    (\n        SELECT MIN(TotalTimeOnCall)\n        FROM\n            (\n                SELECT TOP 50 PERCENT TotalTimeOnCall\n                FROM rawData\n                WHERE TotalTimeOnCall IS NOT NULL\n                ORDER BY TotalTimeOnCall DESC\n            ) AS TopHalf\n    )\n) / 2 AS Median\n```\n\n    ", "Answer": "\r\nHere is a simple median solution that allows you to get a median per group. \n\n```\n-- Example of how to get median from a set of data\n;with cte_my_query as (\n    -- this cte simulates the query that would return your data\n    select '2016-01-01' as dt, 1 as val\n    union \n    select '2016-01-01' as dt, 10 as val\n    union \n    select '2016-01-01' as dt, 7 as val\n    union \n    select '2016-01-01' as dt, 16 as val\n    union \n    select '2016-01-01' as dt, 11 as val\n    union \n    select '2016-01-01' as dt, 2 as val\n    union\n    select '2016-01-01' as dt, 5 as val\n    union \n    select '2016-01-02' as dt, 6 as val\n    union \n    select '2016-01-02' as dt, 13 as val\n    union \n    select '2016-01-02' as dt, 7 as val\n    union   \n    select '2016-01-02' as dt, 9 as val\n    union   \n    select '2016-01-02' as dt, 18 as val\n)\n,cte_dates as (\n    -- get the distinct key we want to get median for\n    select distinct dt from cte_my_query\n)\nselect  dt, median.val\nfrom    cte_dates\n    cross apply (\n        -- of the top 50% (below), take the top 1, desc, which is the median value\n        select top 1 val from (\n            -- for each date, get the top 50% of the values\n            select top 50 percent val\n            from cte_my_query\n            where cte_dates.dt = cte_my_query.dt\n            order by dt\n        ) as inner_median\n        order by inner_median.val desc\n    ) median\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median of three values strategy\r\n                \r\nWhat is the median of three strategy to select the pivot value in quick sort?\n\nI am reading it on the web, but I couldn't figure it out what exactly it is? And also how it is better than the randomized quick sort.\n    ", "Answer": "\r\nThe median of three has you look at the first, middle and last elements of the array, and choose the median of those three elements as the pivot.\n\nTo get the \"full effect\" of the median of three, it's also important to sort those three items, not just use the median as the pivot -- this doesn't affect what's chosen as the pivot in the current iteration, but can/will affect what's used as the pivot in the next recursive call, which helps to limit the bad behavior for a few initial orderings (one that turns out to be particularly bad in many cases is an array that's sorted, except for having the smallest element at the high end of the array (or largest element at the low end). For example:\n\nCompared to picking the pivot randomly:\n\n\nIt ensures that one common case (fully sorted data) remains optimal.\nIt's more difficult to manipulate into giving the worst case.\nA PRNG is often relatively slow.\n\n\nThat second point probably bears a bit more explanation. If you used the obvious (```\nrand()```\n) random number generator, it's fairly easy (for many cases, anyway) for somebody to arrange the elements so it'll continually choose poor pivots. This can be a serious concern for something like a web server that may be sorting data that's been entered by a potential attacker, who could mount a DoS attack by getting your server to waste a lot of time sorting the data. In a case like this, you could use a truly random seed, or you could include your own PRNG instead of using rand() -- or you use use Median of three, which also has the other advantages mentioned.\n\nOn the other hand, if you use a sufficiently random generator (e.g., a hardware generator or encryption in counter mode) it's probably more difficult to force a bad case than it is for a median of three selection. At the same time, achieving that level of randomness typically has quite a bit of overhead of its own, so unless you really expect to be attacked in this case, it's probably not worthwhile (and if you do, it's probably worth at least considering an alternative that guarantees O(N log N) worst case, such as a merge sort or heap sort.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Mdx Median query\r\n                \r\nCould really use a hand from someone on this mdx query. I am trying to produce a rolling median for the last 365 days on per user and per day basis. I need the median to be the median per user response days. It seems like a simple computation but I cannot see how to get it to work with the crossjoin in the mix. Any help would be so very appreciated! If you even have a suggestion on a direction to attack this from that would be great.\n\n```\nSET [2Years] AS\n'{[FirstOrderDate].[Full Date].&[2010-01-15T00:00:00]:[FirstOrderDate].[Full Date].[2012-08-20T00:00:00]}'\n\nMEMBER [Measures].[2YearMedianLag]\nAS\nmedian({[FirstOrderDate].[Full Date].currentmember.lag(365):[FirstOrderDate].[FullDate].currentmember} , [Measures].[Response Days])\n\nSELECT {[Measures].[Response Days], [Measures].[MedianLag]} ON 0,\nNonEmpty(crossjoin( [days],\n[User].[User ID].children),[Measures].[Response Days]) ON 1\nFROM [UserRevenue]\n```\n\n\nThank you in advance for your assistance. \n\nEDIT:\n\n```\nSampleData (UserName varchar(100) null, FirstOrderDate Datetime null, ResponseDays int null)\n('Jim', '2001-01-03', 10)\n('Fred', '2001-01-03', 80)\n('Frank', '2001-01-04', 30)\n('Sally', '2001-01-05', 18)\n('Joan', '2001-01-06', 26)\n('Bill', '2001-01-06', 15)\n('Ted', '2001-01-08', 29)\n('Sam', '2001-01-10', 9)\n('Jane', '2001-01-17', 200)\n\nSampleOutput (FirstOrderDate datetime null, MedianResponseDays int null)\n('2001-01-03', 45)\n('2001-01-04', 30)\n('2001-01-05', 24)\n('2001-01-06', 22)\n('2001-01-07', 22)\n('2001-01-08', 26)\n('2001-01-09', 26)\n('2001-01-10', 22)\n('2001-01-11', 22)\n('2001-01-12', 22)\n('2001-01-13', 22)\n('2001-01-14', 22)\n('2001-01-15', 22)\n('2001-01-16', 22)\n('2001-01-17', 26)\n```\n\n    ", "Answer": "\r\nIt's tricky because you need to work with a different set of rolling dates per day on rows. Are you sure you want 365 for the lag? That gives you 1 year plus 1 day. Anyway, this technique uses an inline named set to create a named set for each combination of user/date and assigns it a unique number, then you can pull that named set back out again in a StrToSet function to match up with the current row's user and dates. This version factors in each individual user:\n\n```\nwith \nset Users as [User].[User ID].Children\nset UsersDates as NonEmpty((Users, [FirstOrderDate].[Full Date].children), [Measures].[Response Days])\n\nset [Rolling Period] as \n\n    Generate(\n       UsersDates,\n          StrToSet(\n        \"{[FirstOrderDate].[Full Date].currentmember.lag(364): [FirstOrderDate].[Full Date].currentmember} as RP\" + CStr(UsersDates.CurrentOrdinal)\n          )\n    )\n\nmember [Measures].[Median Lag] as \nmedian(\n    StrToSet(\"RP\" + \n    CStr(Rank(([User].[User ID].CurrentMember, [FirstOrderDate].[Full Date].CurrentMember), UsersDates)))\n  , [Measures].[Response Days])\n\nselect\n{\n[measures].[Response Days]\n, [measures].[Median Lag]\n}\n\non columns,\nUsersDates\non rows\nfrom UserRevenue\n```\n\n\nUPDATE #1: This version ignores the individual user and instead uses the response for all users for the applicable set of dates:\n\n```\n with \n    set Users as [User].[User ID].Children\n    set Dates as NonEmpty([FirstOrderDate].[Full Date].children, [Measures].[Response Days])\n\n    set [Rolling Period] as \n\n        Generate(\n           Dates,\n              StrToSet(\n            \"{[FirstOrderDate].[Full Date].currentmember.lag(364): [FirstOrderDate].[Full Date].currentmember} as RP\" \n+ CStr(Dates.CurrentOrdinal)\n              )\n        )\n\n    member [Measures].[Median Lag] as \n    median(\n        StrToSet(\"RP\" + \n        CStr(Rank([FirstOrderDate].[Full Date].CurrentMember, Dates)))\n      , ([Measures].[Response Days], [User].[User ID].[All]))\n\n    select\n    {\n    [measures].[Response Days]\n    , [measures].[Median Lag]\n    }\n\n    on columns,\n    (Users, Dates)\n    on rows\n    from UserRevenue\n```\n\n\nUPDATE #2: Third time's a charm? Here's a query that gets me the results in your sample output. The key is that the set needs to generate a tuple for each date/user combination for the current date and store that as an inline named set, one per possible date which is uniquely identified by rank. So the first date (1/3) is rank 1, second date (1/4) is rank 2 etc when you look at the list of dates on rows. The first date 1/3/2001 has two items in the set - one with Jim for 1/3 and one with Fred for 1/3. So in the median calculation, the response days for each item in the related set need to be used. Because 1/3 is rank 1 in the list dates, the set called RP1 is retrieved, combined with response days for the items in the set (Jim and Fred) and the median is calculated.  Then the next date, 1/4, contains three items - the same as for 1/3 but now also Frank for 1/4, so that requires a recalculation of the median and so on.  \n\n```\nwith \n    set Users as [User].[User ID].Children\n    set Dates as [FirstOrderDate].[Full Date].children\n\n    set [Rolling Period] as \n        Generate(\n           Dates,\n              StrToSet(\n            \"NonEmpty(({[FirstOrderDate].[Full Date].currentmember.lag(364): [FirstOrderDate].[Full Date].currentmember} \n            , Users), [Measures].[Response Days]) as RP\" \n+ CStr(Dates.CurrentOrdinal)\n              )\n        )\n\n    member [Measures].[Median Lag] as \n\n    median(\n        StrToSet(\"RP\" + \n        CStr(Rank([FirstOrderDate].[Full Date].CurrentMember, Dates)))\n      , [Measures].[Response Days])\n\n\n    select\n    {[measures].[Median Lag]}\n\n    on columns,\n\n    Dates\n    on rows\n    from UserRevenue\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating median values in HIVE\r\n                \r\nI have the following table t1:\n\n```\nkey  value\n 1   38.76\n 1   41.19\n 1   42.22\n 2   29.35182\n 2   28.32192\n 3   33.66\n 3   33.47\n 3   33.35\n 3   33.47\n 3   33.11\n 3   32.98\n 3   32.5\n```\n\n\nI want to compute the median for each key group. According to the documentation, the percentile_approx function should work for this. The median values for each group are:\n\n```\n1  41.19\n2  28.83\n3  33.35\n```\n\n\nHowever, the percentile_approx function returns these:\n\n```\n1  39.974999999999994\n2  28.32192\n3  33.23.0000000000004\n```\n\n\nWhich clearly are not the median values. \n\nThis was the query I ran:\n\n```\nselect key, percentile_approx(value, 0.5, 10000) as median\nfrom t1\ngroup by key\n```\n\n\nIt seems to be not taking into account one value per group, resulting in a wrong median. Ordering does not affect the result. Any ideas?\n    ", "Answer": "\r\nIn Hive, median cannot be calculated directly by using available built-in functions. Below query is used to find the median.\n\n```\n    set hive.exec.parallel=true;\n    select temp1.key,temp2.value\n    from \n      (\n      select key,cast(sum(rank)/count(key) as int) as final_rank\n      from\n        (\n        select key,value,\n        row_number() over (partition by key order by value) as rank\n        from t1\n      ) temp\n      group by key )temp1\n    inner join\n    ( select key,value,row_number() over (partition by key order by value) as rank\n      from t1  )temp2\n       on \n       temp1.key=temp2.key and\n       temp1.final_rank=temp3.rank;\n```\n\n\nAbove query finds the row_number for each key by ordering the values for the key. Finally it will take the middle row_number of each key which gives the median value. Also I have added one more parameter \"hive.exec.parallel=true;\" which enables to run the independent tasks in parallel.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find Median in VBA\r\n                \r\nI'm having a little issue with finding a median out a range. Unfortunately I cannot use the built in function ```\nMedian```\n since there is not a set up range, but the variable are stored in a Dictionary. I found the following function online, which should return the median, but when I utilize I am getting a type mismatch \"Array or User defined type expected\". Here is the Function:\n\n```\nPrivate Function Median(x() As Double, n As Integer) As Double\n'this function calculates the median of a vector\n\n    'Determine Median\n    If n Mod 2 = 0 Then\n        Median = 0.5 * (x(n / 2) + x((n + 2) / 2))\n    Else\n        Median = x((n + 1) / 2)\n    End If\n\nEnd Function\n```\n\n\nI'm trying to call the function in such a way:\n\n```\nx = Median(v_Array(), dct(vAdd).Count)\n```\n\n\nWhere ```\nV_array```\n is an Array where I'd like to store the values, to be copied over from the dictionary. I think the issue here relates to the part ```\nx() as Double```\n. How can I insert an list of values if the value of ```\nx```\n is a double? Would I need to use a loop to loop through the values in the array?\n\nPs. If you know any other function/way to get to the median out of a list of values in a dictionary, I would appreciate any help!\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "writing a median function\r\n                \r\ni am trying to write a median function, currently i have one that takes a list and sorts it and then gives the median. but i am trying to rewrite it so that if the list has an even number of elements it doesnt print the median but rather the 2 numbers from the list that the median is between. heres my code\n\n```\ndef getMedian(A):\n    A=sorted(A)\n    n=len(A)\n    m=n-1\n    return (A[int(n/2)]+A[int(m/2)])/2\n\ndef main():\n    myList=[3,5,9,3,11]\n    print(getMedian(myList))\n    myList=[3,9,11,5]\n    print(getMedian(myList))\nmain()\n```\n\n\ncurrently it outputs 5 and then 7 but im trying to get it to output 5 and then 5,9 any advice?\n    ", "Answer": "\r\nimport statistics\n\nstatistics.median(data)\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Approximate median of an immutable array\r\n                \r\nI need to find a median value of an array of doubles (in Java) without modifying it (so selection is out) or allocating a lot of new memory. I also don't care to find the exact median, but within 10% is fine (so if median splits the sorted array 40%-60% it's fine).\n\nHow can I achieve this efficiently? \n\nTaking into account suggestions from rfreak, ILMTitan and Peter I wrote this code:\n\n```\npublic static double median(double[] array) {\n    final int smallArraySize = 5000;\n    final int bigArraySize = 100000;\n    if (array.length < smallArraySize + 2) { // small size, so can just sort\n        double[] arr = array.clone();\n        Arrays.sort(arr);\n        return arr[arr.length / 2];\n    } else if (array.length > bigArraySize) { // large size, don't want to make passes\n        double[] arr = new double[smallArraySize + 1];\n        int factor = array.length / arr.length;\n        for (int i = 0; i < arr.length; i++)\n            arr[i] = array[i * factor];\n        return median(arr);\n    } else { // average size, can sacrifice time for accuracy\n        final int buckets = 1000;\n        final double desiredPrecision = .005; // in percent\n        final int maxNumberOfPasses = 10; \n        int[] histogram = new int[buckets + 1];\n        int acceptableMin, acceptableMax;           \n        double min, max, range, scale,\n            medianMin = -Double.MAX_VALUE, medianMax = Double.MAX_VALUE;\n        int sum, numbers, bin, neighborhood = (int) (array.length * 2 * desiredPrecision);\n        for (int r = 0; r < maxNumberOfPasses; r ++) { // enter search for number around median\n            max = -Double.MAX_VALUE; min = Double.MAX_VALUE; \n            numbers = 0;\n            for (int i = 0; i < array.length; i ++)\n                if (array[i] > medianMin && array[i] < medianMax) {\n                    if (array[i] > max) max = array[i];\n                    if (array[i] < min) min = array[i];\n                    numbers ++;\n                }\n            if (min == max) return min;\n            if (numbers <= neighborhood) return (medianMin + medianMax) / 2;\n            acceptableMin = (int) (numbers * (50d - desiredPrecision) / 100);\n            acceptableMax = (int) (numbers * (50d + desiredPrecision) / 100);\n            range = max - min;\n            scale = range / buckets;\n            for (int i = 0; i < array.length; i ++)\n                histogram[(int) ((array[i] - min) / scale)] ++;\n            sum = 0;\n            for (bin = 0; bin <= buckets; bin ++) {\n                sum += histogram[bin];\n                if (sum > acceptableMin && sum < acceptableMax)\n                    return ((.5d + bin) * scale) + min;\n                if (sum > acceptableMax) break; // one bin has too many values\n            }\n            medianMin = ((bin - 1) * scale) + min;\n            medianMax = (bin * scale) + min;\n            for (int i = 0; i < histogram.length; i ++)\n                histogram[i] = 0;\n        }\n        return .5d * medianMin + .5d * medianMax;\n    }       \n}\n```\n\n\nHere I take into account the size of the array. If it's small, then just sort and get the true median. If it's very large, sample it and get the median of the samples, and otherwise iteratively bin the values and see if the median can be narrowed down to an acceptable range.\n\nI don't have any problems with this code. If someone sees something wrong with it, please let me know.\n\nThank you.\n    ", "Answer": "\r\nAssuming you mean median and not average. Also assuming you are working with fairly large double[], or memory wouldn't be an issue for sorting a copy and performing an exact median. ...\n\nWith minimal additional memory overhead you could probably run a O(n) algorithm that would get in the ballpark. I'd try this and see how accurate it is.\n\nTwo passes. \n\nFirst pass find the min and max. Create a set of buckets that represent evenly spaced number ranges between the min and max. Make a second pass and \"count\" how many numbers fall in each bin. You should then be able to make a reasonable estimate of the median. Using 1000 buckets would only cost 4k if you use int[] to store the buckets. The math should be fast.\n\nThe only question is accuracy, and I think you should be able to tune the number of buckets to get in the error range for your data sets.\n\nI'm sure someone with a better math/stats background than I could provide a precise size to get the error range you are looking for.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median code explanation\r\n                \r\nMy professor wrote this median function and I don't understand it very well. Can someone please explain the part about ```\ni = len(list)/2```\n and ```\nmedian = avg()```\n and the ```\nelse```\n statement?\n\n```\ndef avg_list(numbers):  \n    sum = 0 \n    for num in numbers:\n        sum += num\n\n    avg = float(sum)/len(numbers)\n    print avg\n\ndef median(list):            \n    list.sort()\n    if len(list)%2 == 0:\n        #have to take avg of middle two\n        i = len(list)/2\n        median = avg()\n    else:\n        #find the middle (remembering that lists start at 0)\n        i = len(list)/2\n        median = list        \n    return median\n```\n\n\nTo add from an example I saw, for even list length:\n\n```\ndef median(s):\n    i = len(s)\n    if not i%2:\n        return (s[(i/2)-1]+s[i/2])/2.0\n    return s[i/2]\n```\n\n\nThis works very well but I don't understand the last ```\nreturn s[i/2]```\n?\n\nFor odd list length:\n\n```\nx = [1,2,5,2,3,763,234,23,1,234,21,3,2134,23,54]\nmedian = sorted(x)[len(x)/2]\n```\n\n\nSince ```\nx```\n has a list length of odd, wouldn't the ```\n[len(x)/2]```\n be a floating number index? I'm not getting this all the way? Any explanation better than mine is much appreciated.\n    ", "Answer": "\r\nWhy this is is very wrong, line by line:\n\n```\ndef median(list):              # 1\n\n    list.sort()                # 2\n\n        if len(list)%2 == 0:   \n        #have to take avg of middle two\n            i = len(list)/2    # 3\n            median = avg()     # 4\n        else:\n            #find the middle (remembering that lists start at 0)\n            i = len(list)/2    # 5\n            median = list      # 6\n\n        return median\n```\n\n\n```\n#1```\n: It's a bad idea to give your variables the same name as data types, namely ```\nlist```\n.\n\n```\n#2```\n: ```\nlist.sort()```\n will modify the list that is being passed. One would expect a getter like ```\nmedian()```\n not to do that.\n\n```\n#4```\n It calls a function ```\navg()```\n with no arguments, which is completely meaningless, even if such a function was defined.\n\n```\n#3```\n and ```\n#5```\n are calculated the same way regardless of the ```\nif```\n branch taken. Regardless, ```\ni```\n is never used.\n\n```\n#6```\n It sets ```\nmedian```\n to the original ```\nlist```\n, which makes zero sense.\n\n\n\nHere's how I would rewrite this (while maintaining clarity):\n\n```\ndef median(alist):\n\n    srtd = sorted(alist) # returns a sorted copy\n    mid = len(alist)/2   # remember that integer division truncates\n\n    if len(alist) % 2 == 0:  # take the avg of middle two\n        return (srtd[mid-1] + srtd[mid]) / 2.0\n    else:\n        return srtd[mid]\n```\n\n\nAlso, the ```\navg_list()```\n function (which is not used nor could be used in ```\nmedian()```\n) could be rewritten as:\n\n```\ndef avg_list(numbers):  \n    return float(sum(numbers))/len(numbers)\n```\n\n\n```\nsum()```\n is a function that returns the sum of all elements in an iterable.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "running median of constant size array\r\n                \r\nI am trying to find median of constant size array. But array is always uptading. I mean new numbers are replaced with old numbers. I call this process running median, or we can say on the fly median.. Here is my code and inside the code, when rand() function generates 78, the code cannot find the correct median. (Before 78; 41, 67, 34, 0, 69, 24 was generated) \n\n```\n#include <iostream>\n#include <stdlib.h>\n#include <algorithm>\n\n#define MAX_SIZE 5\nusing namespace std;\nbool isOdd( int integer )\n{\n\n    if ( integer % 2 == 0 )\n        return false;\n    else\n        return true;\n}\n\n\nint main()\n{\n    int median;\n    int *minArray ;\n    int *maxArray ;\n    int myArray[MAX_SIZE];\n\n    for(int i=0; i<20; i++)\n    {\n        int v = rand() %100;\n        cout << v << endl;\n\n        myArray[i%MAX_SIZE] = v;\n            if(i==0)\n            {\n                median = v;\n            }\n\n            else if (v>median)\n            {\n                maxArray= new int [MAX_SIZE+1];\n                int n;\n                for(n=0; n<(MAX_SIZE+1); n++)\n                {\n                    if ((median<myArray[n])&&(myArray[n]<=v))\n                    {\n                        maxArray[n] = myArray[n];\n                        //cout<<\"asda\"<<maxArray[n]<<endl;\n                    }\n                    else\n                    {\n                        maxArray[n] = 200;\n                        //cout<<\"asda\"<<maxArray[n]<<endl;\n                    }\n\n                }\n                if(isOdd(i)&&(i<MAX_SIZE))\n                    median = (median+(*min_element(maxArray,maxArray+MAX_SIZE+1)))/2;\n                else median = (*min_element(maxArray,maxArray+MAX_SIZE+1));\n                //cout << ((*min_element(maxArray,maxArray+MAX_SIZE+1))) << endl;\n                delete [] maxArray;\n            }\n            else if (v<median)\n            {\n                minArray= new int [MAX_SIZE+1];\n                int n;\n                for(n=0; n<(MAX_SIZE+1); n++)\n                {\n                    if ((median>myArray[n])&&(myArray[n]>=v))\n                    {\n                        minArray[n] = myArray[n];\n                        //cout<<\"asda\"<<minArray[n]<<endl;\n                    }\n                    else\n                    {\n                        minArray[n] = 0;\n                        //cout<<\"asda\"<<minArray[n]<<endl;\n                    }\n                }\n\n                if(isOdd(i)&&(i<MAX_SIZE))\n                    median = (median+(*max_element(minArray,minArray+MAX_SIZE+1)))/2;\n                else median = (*max_element(minArray,minArray+MAX_SIZE+1));\n\n                delete [] minArray;\n\n            }\n\n            cout << \"median: \"<< median<<endl;\n        }\n    return 0;\n}\n```\n\n\nIf I made some mistakes about explaning my problem, excuse me cus I am so new here. \n    ", "Answer": "\r\nI think there might be an alternative way.\n\nSince you now the boundaries of your data set, as denoted by: ```\nint v = rand() %100;```\n you can also keep track of the number of occurrences of each number.\n\nYou will need to store the number of occurrences in an array which length 100. You'll also need to keep track of the number that's going 'out' to decrease that number of occurrences.\n\nIf you have that in place, just loop from 0... 100 if your occurrence count is bigger then MAX_SIZE/2 your there.\n\nThis would be a 0(n) operation but with significant overhead, especially because the numbers 0...100 has a much bigger range than the MAX_SIZE of 5 (the other way round would be better).\n\nAnyhow; I think if you apply this principle you also wont have a problem with your changing array.\n\nIf you want I can provide you with a quick example.\n\nEDIT\n\nThis sample is not working perfectly, but you can give it a try:\n\n```\n#include <iostream>\n#include <stdlib.h>\n#include <algorithm>\n\n#define MAX_ELEMENTS 5\n\n#define MAX_VALUE 100\n\nusing namespace std;\nbool isOdd( int integer )\n{\n\n    if ( integer % 2 == 0 )\n        return false;\n    else\n        return true;\n}\n\n\nint main()\n{\nint median;\n\nint numberOfElements = 0;\nint myValueArray[MAX_VALUE];\nint myArray[MAX_ELEMENTS];\n\n //quick n dirty init\n for (int c = 0; c < MAX_VALUE; c++)\n    myValueArray[c] = 0;\n\n for (int c = 0; c < MAX_ELEMENTS; c++)\n     myArray[c] = 0;\n\nfor(int i=0; i<20; i++)\n{\n    //generate random number 0...100\n    int v = rand() % MAX_VALUE;\n    cout << \"| \" << v << \" | \"; //incomming value\n\n    myValueArray[v]++;\n\n    int leavingValue = myArray[i%MAX_ELEMENTS]; \n    myArray[i%MAX_ELEMENTS] = v; // just to keep track of leaving value\n\n    if (numberOfElements < MAX_ELEMENTS)\n        numberOfElements++;\n\n    else //remove leaving value\n    {\n        myValueArray[leavingValue]--;\n        cout << \"| \" << leavingValue << \" | \"; //leaving value\n    }\n\n    for (int c = 0, occurances = 0; c < MAX_VALUE; c++)\n    {\n        occurances += myValueArray[c];\n\n        //(numberOfElements + 1) = dirty indexer correction, but you'll get the point\n        if (occurances >= (numberOfElements + 1) / 2)\n        {\n            if (isOdd(numberOfElements))\n                median = c;\n\n            else\n                cout << \"work to do here...\";\n\n            break;\n        }\n    }\n\n    cout << \"array: \";\n    //just print the array, to confirm\n    for (int c = 0, occurances = 0; c < MAX_VALUE; c++)\n    {\n        if (myValueArray[c] > 0)\n        {\n            for (int x = 0; x < myValueArray[c]; x++)\n                cout << \" {\" << c << \"}, \";\n        }\n    }\n\n        cout << \" >> median: \"<< median<<endl;\n    }\n   return 0;\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median code explanation\r\n                \r\nMy professor wrote this median function and I don't understand it very well. Can someone please explain the part about ```\ni = len(list)/2```\n and ```\nmedian = avg()```\n and the ```\nelse```\n statement?\n\n```\ndef avg_list(numbers):  \n    sum = 0 \n    for num in numbers:\n        sum += num\n\n    avg = float(sum)/len(numbers)\n    print avg\n\ndef median(list):            \n    list.sort()\n    if len(list)%2 == 0:\n        #have to take avg of middle two\n        i = len(list)/2\n        median = avg()\n    else:\n        #find the middle (remembering that lists start at 0)\n        i = len(list)/2\n        median = list        \n    return median\n```\n\n\nTo add from an example I saw, for even list length:\n\n```\ndef median(s):\n    i = len(s)\n    if not i%2:\n        return (s[(i/2)-1]+s[i/2])/2.0\n    return s[i/2]\n```\n\n\nThis works very well but I don't understand the last ```\nreturn s[i/2]```\n?\n\nFor odd list length:\n\n```\nx = [1,2,5,2,3,763,234,23,1,234,21,3,2134,23,54]\nmedian = sorted(x)[len(x)/2]\n```\n\n\nSince ```\nx```\n has a list length of odd, wouldn't the ```\n[len(x)/2]```\n be a floating number index? I'm not getting this all the way? Any explanation better than mine is much appreciated.\n    ", "Answer": "\r\nWhy this is is very wrong, line by line:\n\n```\ndef median(list):              # 1\n\n    list.sort()                # 2\n\n        if len(list)%2 == 0:   \n        #have to take avg of middle two\n            i = len(list)/2    # 3\n            median = avg()     # 4\n        else:\n            #find the middle (remembering that lists start at 0)\n            i = len(list)/2    # 5\n            median = list      # 6\n\n        return median\n```\n\n\n```\n#1```\n: It's a bad idea to give your variables the same name as data types, namely ```\nlist```\n.\n\n```\n#2```\n: ```\nlist.sort()```\n will modify the list that is being passed. One would expect a getter like ```\nmedian()```\n not to do that.\n\n```\n#4```\n It calls a function ```\navg()```\n with no arguments, which is completely meaningless, even if such a function was defined.\n\n```\n#3```\n and ```\n#5```\n are calculated the same way regardless of the ```\nif```\n branch taken. Regardless, ```\ni```\n is never used.\n\n```\n#6```\n It sets ```\nmedian```\n to the original ```\nlist```\n, which makes zero sense.\n\n\n\nHere's how I would rewrite this (while maintaining clarity):\n\n```\ndef median(alist):\n\n    srtd = sorted(alist) # returns a sorted copy\n    mid = len(alist)/2   # remember that integer division truncates\n\n    if len(alist) % 2 == 0:  # take the avg of middle two\n        return (srtd[mid-1] + srtd[mid]) / 2.0\n    else:\n        return srtd[mid]\n```\n\n\nAlso, the ```\navg_list()```\n function (which is not used nor could be used in ```\nmedian()```\n) could be rewritten as:\n\n```\ndef avg_list(numbers):  \n    return float(sum(numbers))/len(numbers)\n```\n\n\n```\nsum()```\n is a function that returns the sum of all elements in an iterable.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median of panda datetime64 column\r\n                \r\nIs there a way to compute and return in datetime format the median of a datetime column?\nI want to calculate the median of a column in python which is in datetime64[ns] format. Below is a sample to the column:\n\n```\ndf['date'].head()\n\n0   2017-05-08 13:25:13.342\n1   2017-05-08 16:37:45.545\n2   2017-01-12 11:08:04.021\n3   2016-12-01 09:06:29.912\n4   2016-06-08 03:16:40.422\n```\n\n\nName: recency, dtype: datetime64[ns]\n\nMy aim is to have the median in same datetime format as the date column above:\n\nTried converting to np.array:\n\n```\nmedian_ = np.median(np.array(df['date']))\n```\n\n\nBut that throws the error:\n\n```\nTypeError: ufunc add cannot use operands with types dtype('<M8[ns]') and dtype('<M8[ns]')\n```\n\n\nConverting to int64 and then calculating the median and attempt to the return format to datetime does not work\n\n```\ndf['date'].astype('int64').median().astype('datetime64[ns]')\n```\n\n    ", "Answer": "\r\nYou can also try ```\nquantile(0.5)```\n:\n```\ndf['date'].astype('datetime64[ns]').quantile(0.5, interpolation=\"midpoint\")\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of Medians in Java\r\n                \r\nI am trying to implement Median of Medians in Java for a method like this:\n\n```\nSelect(Comparable[] list, int pos, int colSize, int colMed)\n```\n\n\n\n```\nlist```\n is a list of values of which to find a specified position\n```\npos```\n is the specified position\n```\ncolSize```\n is the size of the columns that I create in the first stage\n```\ncolMed```\n is the position in those columns that I use as the medX\n\n\nI am not sure which sorting algorithm would be the best to use or how to implement this exactly..\n    ", "Answer": "\r\nI don't know if you still need this problem solved, but http://www.ics.uci.edu/~eppstein/161/960130.html has an algorithm:\n\n```\nselect(L,k)\n{\n    if (L has 10 or fewer elements)\n    {\n        sort L\n        return the element in the kth position\n    }\n\n    partition L into subsets S[i] of five elements each\n        (there will be n/5 subsets total).\n\n    for (i = 1 to n/5) do\n        x[i] = select(S[i],3)\n\n    M = select({x[i]}, n/10)\n\n    partition L into L1<M, L2=M, L3>M\n    if (k <= length(L1))\n        return select(L1,k)\n    else if (k > length(L1)+length(L2))\n        return select(L3,k-length(L1)-length(L2))\n    else return M\n}\n```\n\n\nGood luck!\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "ggplot median and percentile\r\n                \r\nI'm trying to replicate this image.\nI was able to plot a scatter plot and the median (but it's not continuous).\nI failed to plot the percentiles.\nThe median varies according to different spell length.\n```\nggplot(df,aes(x=Spell.Length,y=Growth.Rate)) +\ngeom_point() +\nstat_summary(fun = median, fun.min = median, fun.max = median,\n                 geom = \"crossbar\", width = 0.5,colour=\"red\")\n```\n\nWhat I'm trying to do\n\nWhat I got so far\n\n    ", "Answer": "\r\nUse dplyr::summarize to create a data frame of the values of percentiles also ```\ngroup_by(Spell.Length)```\n, then plot those using ```\ngeom_line()```\n.  Then the horizontal lines with geom_hline().\n```\ndf %>% group_by(Spell.Length) %>% \n       summarize(median = quantile(Growth.Rate, p = .5), q1 = quantile(Growth.Rate, p = .25)) %>%\n    ggplot(aes(x = Spell.Length, y = median) +\n    geom_line()  +\n    geom_line(aes(x = Spell.Length, y = q1)) +\n    geom_hline(yintercept = 3) \n\n```\n\nwould be the basic idea.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Add hline with population median for each facet\r\n                \r\nI'd like to plot a horizontal facet-wide line with the population median of that facet.\n\nI tried the approach without creating a dummy summary table with the following code:\n\n```\nrequire(ggplot2)\n\ndt = data.frame(gr = rep(1:2, each = 500),\n            id = rep(1:5, 2, each = 100), \n            y = c(rnorm(500, mean = 0, sd = 1), rnorm(500, mean = 1, sd = 2)))\n\n\nggplot(dt, aes(x = as.factor(id), y = y)) +\n  geom_boxplot() +\n  facet_wrap(~ gr) +\n  geom_hline(aes(yintercept = median(y), group = gr), colour = 'red')\n```\n\n\nHowever, the line is drawn for the median of the entire dataset instead of the median separately for each facet:\n\n\nIn the past, a solution has been suggested to use\n\n```\n  geom_line(stat = \"hline\", yintercept = \"median\")\n```\n\n\nbut it's been discontinued (produces the error \"No stat called StatHline\").\n\nAnother solution suggested \n\n```\n geom_errorbar(aes(ymax=..y.., ymin=..y.., y = mean))\n```\n\n\nbut it generates \n\n```\nError in data.frame(y = function (x, ...)  : \narguments imply differing number of rows: 0, 1000\n```\n\n\nFinally, there's a way to plot the median by creating a dummy table with the desired stats but I'd like to avoid it.\n    ", "Answer": "\r\nYou could create an extra column in ```\ndt```\n for median per facet.\n\n```\nlibrary(dplyr) # With dplyr for example\ndt <- dt %>% group_by(gr) %>%\n  mutate(med = median(y))\n\n# Rerun ggplot line with yintercept = med\nggplot(dt, aes(x = as.factor(id), y = y)) +\n  geom_boxplot() +\n  facet_wrap(~ gr) +\n  geom_hline(aes(yintercept = med, group = gr), colour = 'red')\n```\n\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Pandas Median on index not values\r\n                \r\nMy datas :\n\n```\nLogRatio    Strength\n 0.555         9.1\n 0.542         9.6\n 0.533         9.7\n 0.532         9.3\n 0.519         9.2\n 0.508         9.5\n```\n\n\nI want to have the point(LogRatio,Strength) that is the median position of my group indexA-indexB\n\n```\nindexA = 0\nindexB = 4\npoint_logRatio = df['LogRatio'][indexA:indexB].median()\npoint_Strength = df[df['LogRatio']==point_logRatio['Strength'].iloc[0]\n```\n\n\nBut I don't want to calcul the median with values, I just want the index of the row to get the LogRatio and the strength corresponding. Because point_logRatio calcul the median and don't give me just the row.\nThat's why my point_Strength doesn't work because the median calculated don't match with a value of the dataframe.\n\nSo, if you have an easier way to get the LogRatio and the Strength at the same time where LogRatio is at a median position in my dataframe between indexA and indexB, thank you.\n\nAt the end, I would like to have :\npoint = (0.533 , 9.7)\n\nBecause 0.533 is the logRatio at the median position between my index 0 and 4 in my dataframe and the strength corresponding is 9.7.\n    ", "Answer": "\r\nyou can try\n\n```\nmedian_position = (indexA+indexB)/2\npoint_logRatio  = df.iloc[median_position]['LogRatio']\npoint_Strength  = df.iloc[median_position]['Strength']\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to calculate median in postgres [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        How do I get min, median and max from my query in postgresql?\r\n                            \r\n                                (4 answers)\r\n                            \r\n                    \r\n                Closed 6 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI'm now stuck on calculation median on postgres because there is no function about calculation median in postgres. Following is my query and I want to get median value of that query. Please help me how to do it.\n\n```\nSELECT count, conversion, company_id FROM (SELECT count(ap.id), \n(count(ap.id)/cast(NULLIF(SUM(j.views), 0) as float) * 100) AS conversion, \nj.company_id FROM applications ap RIGHT JOIN jobs j ON ap.job_id = j.id GROUP BY j.company_id order by conversion) with_avg\n```\n\n    ", "Answer": "\r\nThere is a function for calculating the median. The median is the 50% percentile, you could use percentile_disc, I think: https://www.postgresql.org/docs/9.6/static/functions-aggregate.html\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "running median excluding zeros\r\n                \r\nI borrowed some code to calculate the running median of an array. But for each running array, I want to exclude the zero values. Below is the code:\n\n```\ndef RunningMedian(seq, M):\n    seq = iter(seq)\n    s = []\n    m = M // 2\n\n    # Set up list s (to be sorted) and load deque with first window of seq\n    s = [item for item in islice(seq, M)]\n    d = deque(s)\n    # Simple lambda function to handle even/odd window sizes    \n    median = lambda : s[m] if bool(M&1) else (s[m-1]+s[m]) * 0.5\n    # Sort it in increasing order and extract the median (\"center\" of the sorted window)\n    s.sort()\n    # remove zeros from the array\n    s = np.trim_zeros(s)\n    print s\n    medians = [median()]\n    for item in seq:\n        old = d.popleft()          # pop oldest from left\n        d.append(item)             # push newest in from right\n        del s[bisect_left(s, old)] # locate insertion point and then remove old \n        insort(s, item)            # insert newest such that new sort is not required        \n        s = np.trim_zeros(s)\n        print s\n        medians.append(median())\n    return medians\n```\n\n\nI am testing the code, but it failed. My example is ```\na = np.array([5 2 0 9 4 2 6 8])```\n, I called this function ```\nRunningMedian(a,3)```\n. What I want for each running box is:\n\n```\n[2,5]\n[2,9]\n[4,9]\n[2,4,9]\n[2,4,6]\n[2,6,8]\n```\n\n\nHowever, after I called the above function, it gives:\n\n```\n[2, 5]\n[2, 9]\n[4, 9]\n[2, 9]\n[2, 6]\n[2, 8]\n```\n\n\nAnd also it returns wrong median values. \nThe returned median from the call is: ```\n[5, 9, 9, 9, 6, 8]```\n\n\nAnyone could help me to correct this issue? Thank you.\n    ", "Answer": "\r\nThe main issue with your code is that throwing away zeros in ```\ns```\n messes with the length of the objects used, which explains why you didn't get 3-length windows at the end.\n\nI suggest another approach: using a proper function for ```\nmedian```\n and ignoring those zero values locally. This way it's cleaner, and you don't need ```\ntrim_zeros```\n (it's really bad practice to import ```\nnumpy```\n just for this). Based on your function, here's what I came up:\n\n```\nfrom itertools import islice\nfrom collections import deque\nfrom bisect import bisect_left,insort\n\ndef median(s):\n    sp = [nz for nz in s if nz!=0]\n    print(sp)\n    Mnow = len(sp)\n    mnow = Mnow // 2\n    return sp[mnow] if bool(Mnow&1) else (sp[mnow-1]+sp[mnow])*0.5\n\ndef RunningMedian(seq, M):\n    seq = iter(seq)\n    s = []\n    m = M // 2\n\n    # Set up list s (to be sorted) and load deque with first window of seq\n    s = [item for item in islice(seq, M)]\n    d = deque(s)\n    ## Simple lambda function to handle even/odd window sizes    \n    #median = lambda: s[m] if bool(M&1) else (s[m-1]+s[m])*0.5\n\n    # Sort it in increasing order and extract the median (\"center\" of the sorted window)\n    s.sort()\n    medians = [median(s)]\n    for item in seq:\n        old = d.popleft()          # pop oldest from left\n        d.append(item)             # push newest in from right\n        del s[bisect_left(s, old)] # locate insertion point and then remove old \n        insort(s, item)            # insert newest such that new sort is not required        \n        medians.append(median(s))\n    return medians\n```\n\n\nMost of the change is in the new ```\nmedian```\n function, and I moved the prints there. I also added your imports. Note that I'd approach this problem very differently, and it's highly possible that the current \"fixed\" version smells of duck tape.\n\nAnyway, it seems to work as you want it to:\n\n```\n>>> a = [5, 2, 0, 9, 4, 2, 6, 8]\n\n>>> RunningMedian(a,3)\n[2, 5]\n[2, 9]\n[4, 9]\n[2, 4, 9]\n[2, 4, 6]\n[2, 6, 8]\n[3.5, 5.5, 6.5, 4, 4, 6]\n```\n\n\nAnd the reason why the medians were off in your version was that the parity of the window was determined from ```\nM```\n, the input window width. If you discard the zeros, you'll end up with smaller (even-length) windows. In this case you don't need the middle (=second) element, but you need to average the two elements in the middle. Hence your erroneous output.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Comparing median and sum in python\r\n                \r\nI have data for businesses that has categories and review counts. I have grouped the categories together for each business and I want to separate out those businesses that have review counts that are above the median number of review counts within each category and those that are below the median number of review counts. Essentially, I need to return a Series of median values indexed by category and use that to find out if a given business is greater than the median for its category. I have to compare its review count to the median for its category.\nMy code is throwing errors and I can't figure out why. Suggestions? I've tried both of the below.\n\n```\nn = df.groupby('category')['review_count'].size()\ndef cats_median_split(n):\n    s = df.groupby('category')['review_count'].median()\nif n > s:\n    return True\nelse:\n    return False\ndf.groupby('category')['review_count'].apply(cats_median_split)\n```\n\n\nOR:\n\n```\nn = df.groupby('category')['review_count'].sum()\ndef cats_median_split(n): \n    s = n.median()\nif n > s:\n    return True\nelse:\n    return False\ndf.groupby('category')['review_count'].apply(cats_median_split)\n```\n\n    ", "Answer": "\r\nIf I understood correctly you wish to:\n\n```\n\n\ndef median (seq, index=0):\n    customcmp = lambda x, y: cmp(x[index], y[index])\n    seq = sorted(seq, customcmp)\n    l = len(seq)\n    if l%2==0:\n        return (seq[l/2-1][index]+seq[l/2][index])/2.0\n    return seq[l/2][index]\n\ndef split (seq, index=0, trashhold=0):\n    left = []; right = []\n    for element in seq:\n        if element[index]<trashhold:\n            left.append(element)\n        else:\n            right.append(element)\n    return left, right\n\ncats = [(123, 345), (99, 258), (9753, 36754), (234, 216), (123456, 76543)]\nm = median(cats, 1)\nsplit(cats, 0, m)\n\nFor median you better use numpy, but for smaller sequences this implementation will do.\n\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate mean and median efficiently\r\n                \r\nWhat is the most efficient way to sequentially find the mean and median of rows in a Python list?\n\nFor example, my list:\n\n```\ninput_list = [1,2,4,6,7,8]\n```\n\n\nI want to produce an output list that contains:\n\n```\noutput_list_mean = [1,1.5,2.3,3.25,4,4.7]\noutput_list_median = [1,1.5,2.0,3.0,4.0,5.0]\n```\n\n\nWhere the mean is calculated as follows:\n\n\n1 = mean(1)\n1.5 = mean(1,2) (i.e. mean of first 2 values in input_list)\n2.3 = mean(1,2,4) (i.e. mean of first 3 values in input_list)\n3.25 = mean(1,2,4,6) (i.e. mean of first 4 values in input_list)\netc.\n\n\nAnd the median is calculated as follows:\n\n\n1 = median(1)\n1.5 = median(1,2) (i.e. median of first 2 values in input_list)\n2.0 = median(1,2,4) (i.e. median of first 3 values in input_list)\n3.0 = median(1,2,4,6) (i.e. median of first 4 values in input_list)\netc.\n\n\nI have tried to implement it with the following loop, but it seems very inefficient.\n\n```\nimport numpy\n\ninput_list = [1,2,4,6,7,8]\n\nfor item in range(1,len(input_list)+1):\n    print(numpy.mean(input_list[:item]))\n    print(numpy.median(input_list[:item]))\n```\n\n    ", "Answer": "\r\nAnything you do yourself, especially with the median, is either going to require a lot of work, or be very inefficient, but Pandas comes with built-in efficient implementations of the functions you are after, the expanding mean is O(n), the expanding median is O(n*log(n)) using a skip list:\n\n```\nimport pandas as pd\nimport numpy as np\n\ninput_list = [1, 2, 4, 6, 7, 8]\n\n>>> pd.expanding_mean(np.array(input_list))\narray([ 1.     ,  1.5    ,  2.33333,  3.25   ,  4.     ,  4.66667])\n\n>>> pd.expanding_median(np.array(input_list))\narray([ 1. ,  1.5,  2. ,  3. ,  4. ,  5. ])\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Computing an Approximate Median (\"pseudo median\") algorithm\r\n                \r\nI've encountered the following question which I have no idea how to solve.\nI'd appreciate some Help:\nLet (X, d) be a metric space. Let Y = {x1, . . . , xn} ⊆ X be a set of n points in the metric\nspace. A point x∗ ∈ X is a ∆-pseudo-median of Y if there exist at least m indices i1, . . . , im\nwith m > n/2 such that d(xi,j , x∗) ≤ ∆ for all j = 1, . . . , m.\nAssume that a ∆-pseudo-median x∗ exists for Y (but is unknown).\nDevise an algorithm with running time O(n2) that finds an index i ∈ {1..n} such that d(xi, x∗) ≤ 4∆.\n(Assume that evaluating d(x, y) for x, y ∈ X\ntakes O(1) time).\n    ", "Answer": "\r\nObviously, we assume that ```\nn > 0```\n (although the fact that ```\nn/2 < m <= n```\n actually implies that ```\nn > 0```\n).\nSuppose there is a ```\nDelta```\n-median ```\np```\n of ```\nY```\n. Then consider some ```\nx[i]```\n which is within ```\nDelta```\n of ```\nY```\n. Then for at least ```\nm```\n values of ```\nj```\n, we have ```\nd(x[i], x[j]) <= d(x[i], p) + d(p, x[j]) = 2 Delta```\n. That is, the ```\nm```\nth-smallest value of the list ```\n[d(x[i], x[1]), d(x[i], x[2]), ..., d(x[i], x[n])]```\n must be no more than ```\n2 Delta```\n.\nDefine ```\nf(i)```\n to be the ```\nm```\nth smallest value of the list ```\n[d(x[i], x[1]), d(x[i], x[2]), ..., d(x[i], x[n])]```\n. Then the smallest value of ```\nf(i)```\n is no more than ```\n2 Delta```\n, since there must be some ```\nx[i]```\n within ```\nDelta```\n of ```\np```\n and thus having ```\nf(i) <= 2 Delta```\n.\nI claim that the ```\ni```\n which minimises ```\nf(i)```\n is within ```\n4 Delta```\n of the ```\nDelta```\n-median ```\np```\n. For we see that ```\nf(i) <= 2 Delta```\n. Since ```\nm > n / 2```\n, there must be some ```\nj```\n such that ```\nd(x[i], x[j]) <= 2 Delta```\n and such that ```\nd(x[j], p) <= Delta```\n. Therefore, we see that ```\nd(x[i], p) <= d(x[i], x[j]) + d(x[j], p) <= 3 Delta <= 4 Delta```\n.\nSo all we have to do is compute the ```\ni```\n which minimises ```\nf(i)```\n. In order to do this, we just compute all values of ```\nf(i)```\n and then find the smallest.\nComputing ```\nf(i)```\n for a given ```\ni```\n involves finding the ```\nm```\nth smallest element of a list with ```\nn```\n elements. This can be done in ```\nO(n)```\n using the median finding algorithm. So computing all the ```\nf(i)```\ns will take ```\nO(n^2)```\n.\nFinding the minimal value of ```\nf(i)```\n, once we know all ```\nn```\n values of ```\nf(i)```\n, will take ```\nO(n)```\n.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find median of value\r\n                \r\nI have a data set which is a data set of gene nodes. It has a pair of nodes and their is some value as weight given. I have to find a median of the corresponding gene pair. I count the number of times the node pair occurs in entire data set and then calculate the median of the value. Here ```\nCol[0] and Col[1]```\n are the node pairs and ```\nCol[2]```\n is the weight.  The code below prints the nodes and the median value for odd occurrences correct but for even occurrences it shows the larger value of the two middle values. Any suggestions appreciated. \n\nInput Type:Small list from large file. \n\n```\n5372 937 65.0\n4821 937 65.0\n4376 937 65.0\n2684 937 65.0\n4391 3715 1880.0\n3436 1174 2383.0\n3436 3031 2383.0\n3436 1349 2383.0\n5372 937 70.0\n4821 937 70.0\n4376 937 70.0\n2684 937 70.0\n3826 896 10.0\n3826 896 17.0\n5372 937 62.0\n4821 937 62.0\n4376 937 62.0\n2684 937 62.0\n3826 896 50.0\n4944 3715 482.0\n4944 4391 482.0\n2539 1431 323.0\n5372 937 59.0\n4821 937 59.0\n4376 937 59.0\n2684 937 59.0\n896 606 11.0\n3826 896 10.0\n5045 4901 11.0\n4921 4901 11.0\n4901 3545 11.0\n4901 3140 11.0\n4901 4243 11.0\n```\n\n\ncode:\n\n```\nfrom collections import defaultdict\nimport numpy as np\n\npt  = defaultdict(float)\npm  = defaultdict(float)\npc  = defaultdict(int)\nwith open('input.txt', 'r') as f:\n    with open('output.txt', 'w') as o:\n    for numline, line in enumerate((line.split() for line in f), start=1):\n        pair = line[0], line[1]\n        pc[pair] += 1       \n        pt[pair] = float(line[2])\n        pm[pair] = np.median(pt[pair])\n        print pair, pc[pair], pm[pair]\n```\n\n\nAs per the definition median for even set of numbers is the average value of the two middle numbers and for odd set of number the middle value is the median. How can I get a better median value in case of even set of numbers?\n    ", "Answer": "\r\nYour ```\npt```\n dictionary is not right. You are storing the last weight of each pair, and to compute the median you need the whole list of weights. You could do:\n\n```\nfrom collections import defaultdict\nimport numpy as np\n\npt  = defaultdict(list)\npc  = defaultdict(int)\nwith open('input.txt', 'r') as f:\n    with open('output.txt', 'w') as o:\n    for numline, line in enumerate((line.split() for line in f), start=1):\n        pair = line[0], line[1]\n        pc[pair] += 1       \n        pt[pair].append(float(line[2]))\n\n# now with the medians\npm  = dict()\nfor pair, weights in pt.items():\n    pm[pair] = np.median(weights)\n    print pair, pc[pair], pm[pair]\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "replace zeroes in numpy array with the median value\r\n                \r\nI have a numpy array like this:\n\n```\nfoo_array = [38,26,14,55,31,0,15,8,0,0,0,18,40,27,3,19,0,49,29,21,5,38,29,17,16]\n```\n\n\nI want to replace all the zeros with the median value of the whole array (where the zero values are not to be included in the calculation of the median)\n\nSo far I have this going on:\n\n```\nfoo_array = [38,26,14,55,31,0,15,8,0,0,0,18,40,27,3,19,0,49,29,21,5,38,29,17,16]\nfoo = np.array(foo_array)\nfoo = np.sort(foo)\nprint \"foo sorted:\",foo\n#foo sorted: [ 0  0  0  0  0  3  5  8 14 15 16 17 18 19 21 26 27 29 29 31 38 38 40 49 55]\nnonzero_values = foo[0::] > 0\nnz_values = foo[nonzero_values]\nprint \"nonzero_values?:\",nz_values\n#nonzero_values?: [ 3  5  8 14 15 16 17 18 19 21 26 27 29 29 31 38 38 40 49 55]\nsize = np.size(nz_values)\nmiddle = size / 2\nprint \"median is:\",nz_values[middle]\n#median is: 26\n```\n\n\nIs there a clever way to achieve this with numpy syntax?\n\nThank you\n    ", "Answer": "\r\nThis solution takes advantage of ```\nnumpy.median```\n:\n\n```\nimport numpy as np\nfoo_array = [38,26,14,55,31,0,15,8,0,0,0,18,40,27,3,19,0,49,29,21,5,38,29,17,16]\nfoo = np.array(foo_array)\n# Compute the median of the non-zero elements\nm = np.median(foo[foo > 0])\n# Assign the median to the zero elements \nfoo[foo == 0] = m\n```\n\n\nJust a note of caution, the median for your array (with no zeroes) is 23.5 but as written this sticks in 23.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median If Equation on Excel file\r\n                \r\nI was trying to use Median with an If to find the median of a column for values greater than 0. \nThis seems to be what I have seen others use; however, this formula does not seem to be correctly working for me.\nDoes anyone seem to see the problem?\nThank you!\n\r\n\r\n```\n=MEDIAN(IF(X3:X92 > 0,X3:X92))```\n\r\n\r\n\r\n\n    ", "Answer": "\r\nUse this formula\n\n```\n=MEDIAN(IF($X3:$X92<>0,$X3:$X92))\n```\n\n\nAND also use Shift+Ctrl+Enter when you enter!\n\nThat is important, and probably what you forgot.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "finding median in Ruby [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Find the median of an array\r\n                            \r\n                                (4 answers)\r\n                            \r\n                    \r\n                Closed 9 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\ninput: A list of numbers from the keyboard.\noutput: The median of the input numbers \n\nI need the whole code \n\n```\ndef median(array)\narray.sort!\n  if (array.length % 2==1 )\n     return array[array.length/2.0]\n  else\n     return (array[array.length/2] + array[(array.length/2)-1])/2.0\n  end\nend\n```\n\n\nHow can I enter list from keyboard and the find the median?\n    ", "Answer": "\r\nAssuming you want numbers separated by spaced on a single input line (i.e. 1 5 56 6 75), add the following to your script:\n\n```\ninput_array = gets.chomp.split(\" \")\n```\n\n\nThen pass ```\ninput_array```\n to your median method\n\nUpdate: Note that input_array will be an array of strings, so you'll need to convert values to integers. Here's a good example on doing so.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate global median normalization in microarray\r\n                \r\nI want to extract the Cy5 foreground/background for 4 arrays and subtract the background from the foreground values, and then log2 transform these values. Then, I want to calculate the global median normalization on these 4 arrays using the background subtracted Cy5 values. The median of each array will be used to scale. After normalization, all arrays should have a median of 1.\nHowever, my code below evaluates median as 0 instead of 1. Why? And what should I change to get median of 1?\n```\nlibrary(limma)\nlibrary(marray)\n\n\nfor(i in 1:4){\n  name <- paste(\"sample\", i, sep = \".\")\n  bg <- maRb(dat[,i])\n  fg <- maRf(dat[,i])\n  diff <- fg - bg\n  diff[diff < 0] <- NA\n  assign(name, log2(diff))\n} \n\ndata.prenorm <- cbind(sample.1, sample.2, sample.3, sample.4)\ndata.median  <- apply(data.prenorm, 2, median, na.rm = T)\ndata.norm    <- sweep(data.prenorm, 2, data.median)\n\ncolnames(data.norm) <- c(\"Array 1\", \"Array 2\", \"Array 3\", \"Array 4\")\n\nmedian(data.norm[ , 1], na.rm = T) \nmedian(data.norm[ , 2], na.rm = T)\nmedian(data.norm[ , 3], na.rm = T)\nmedian(data.norm[ , 4], na.rm = T)\n```\n\ndata:\n```\n> dput(data.norm[1:4,1:4])\nstructure(c(0.335603031784438, 0.192645077942395, 0.280107919192734, \n4.59067615191555, 0, 0, -0.362570079384708, 6.14068778021722, \n-0.192645077942395, -0.263034405833793, -0.192645077942395, 3.4262647547021, \n-0.231325546106455, 0, -0.754887502163468, 6.13689620105484), .Dim = c(4L, \n4L), .Dimnames = list(NULL, c(\"Array 1\", \"Array 2\", \"Array 3\", \n\"Array 4\")))\n```\n\n    ", "Answer": "\r\nI am not an expert in microarray processing, so I can only provide some acknowledged guess to what you are trying to achieve.\nYou see, the median of a median-normalized array is 0. To see this, imagine that you have a sorted data array of x and an array of equal length filled with median of x, call it y. The median of x is at its center position, and the median of  (x-y) will be at the center position as well, since subtracting a constant on each element of x does not vary their relative size. The center position of (x-y) is median(x)-median(x) by definition, and that is 0.\nThere are some good discussion on CrossValidated on this point here as well.\nNow coming back to your point. I suspect what you meant to process are supposed to be in log space. That will give you median-of-median-normalized data 0. Then after converting normalized data back to original space, the median will be 1.\nHere is a quick check using some dummy data:\n```\ndat = matrix(1:16, nrow = 4)\nldat = log2(dat)\nldat_norm = sweep(ldat,2,apply(ldat,2,median))\ndat_norm = 2^ldat\n\nmedian = apply(ldat,2,median)\n\n> median\n[1] 1.020621 1.002972 1.001136 1.000595\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Conditional median in MS Excel\r\n                \r\nI'm trying to calculate the conditional median of a chart that looks like this:\n\n```\nA  |  B\n-------\nx  |  1\nx  |  1\nx  |  3\nx  |  \ny  |  4\nz  |  5\n```\n\n\nI'm using MS Excel 2007.  I am aware of the AVERAGEIF() statement, but there is no equivalent for Median.  The main trick is that there are rows with no data - such as the 4th \"a\" above.  In this case, I don't want this row considered at all in the calculations.\n\nGoogling has suggested the following, but Excel won't accept the formula format (maybe because it's 2007?)\n\n```\n=MEDIAN(IF((A:A=\"x\")*(A:A<>\"\")), B:B)\n```\n\n\nExcel gives an error saying there is something wrong with my formula(something to do with the * in the condition)  I had also tried the following, but it counts blank cells as 0's in the calculations:\n\n```\n=MEDIAN(IF(A:A = \"x\", B:B, \"\")\n```\n\n\nI am aware that those formulas return Excel \"arrays\", which means one must enter \"Ctrl-shift-enter\" to get it to work correctly.\n\nHow can I do a conditional evaluation and not consider blank cells?\n    ", "Answer": "\r\nNested if statements.\n\n```\n=MEDIAN(IF(A:A = \"x\",IF(B:B<>\"\",B:B, \"\"),\"\")\n```\n\n\nNot much to explain - it checks if A is x.  If it is, it checks if B is non-blank.  Anything that matches both conditions gets calculated as part of the median.\n\nGiven the following data set:\n\n```\nA | B\n------\nx | \nx |     \nx | 2\nx | 3\nx | 4\nx | 5\n```\n\n\nThe above formula returns 3.5, which is what I believe you wanted.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median Splits in R\r\n                \r\nHow do I go about doing Median-Splits in R? I have a data set, [1:130], from SPSS with 7 different subscales that I need to do a proper median split on. With 2 being above median, and 1 being below median. I've been trying to figure out how to do it with R as I do not have immediate access to SPSS but nothing I find works. Can anyone give me any tips on how to got about doing this? \n\nI am trying to use a median-split, to record data as high(2) or low(1), in order to use independent t tests , to test for significance.\n\nI attempted to use the code found here:How to do median splits within factor levels in R?\n\nbut the results will not allow me to use them in a t test.\n\nApplicable code:\n\n```\nalldata<- data.frame(scoreddata, subscaledata)\nalldatascores<- c(subscaledata$scores, psyo372scored$nbis_tot, psyo372scored$nsss_tot, psyo372scored$npumps_a) \nalldatalabels<-gl(10, 130, labels = c(\"nsss_dis\", \"nsss_bor\", \"nsss_thr\", \"nsss_exp\", \"nbis_nonplanning\", \"nbis_attentional\", \"nbis_motor\", \"nbis_tot\", \"nsss_tot\", \"npumps_a\"))  \nalldata<- data.frame(alldatascores, alldatalabels)\nalldata\n\nind.t.test<-t.test(alldata$npumps_a ~ alldata$nsss_dis, paired = FALSE)   \n    ind.t.test\n```\n\n\nResulting Error:\n\nError in model.frame.default(formula = alldata$npumps_a ~ alldata$nsss_dis) : \n  invalid type (NULL) for variable 'alldata$npumps_a'\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Weighted median computation\r\n                \r\nI'm looking for good study material about computation of weighted median algorithm and/or sample code in C++. The weights of my median are values between 0 and 1. Could you recommend me some links?\n    ", "Answer": "\r\nThe weighted median is defined like so:\n\nIf ```\nx```\n is a sorted array of ```\nN```\n elements, and ```\nw```\n is the array of weights with a total weight ```\nW```\n, then the weighted median is the last ```\nx[i]```\n such that the sum of ```\nw[i]```\n and of all previous weights are less than or equal to ```\nS/2```\n.\n\nIn C++, this can be expressed like so (assuming ```\nx```\n, ```\nw```\n and ```\nW```\n are defined as above)\n\n```\ndouble sum = 0;\nint i;\nfor(i = 0; i < N; ++i)\n{\n    sum += w[i];\n    if(sum > W/2)\n        break;\n}\ndouble median = x[i-1];\n```\n\n\nEDIT\n\nSo it seems I answered this question too hastily and made some mistakes. I found a neat description of weighted median from the R documentation, which describes it like so:\n\n\n  For the ```\nn```\n elements ```\nx = c(x[1], x[2], ..., x[n])```\n with positive\n  weights ```\nw = c(w[1], w[2], ..., w[n])```\n such that ```\nsum(w) = S```\n, the\n  weighted median is defined as the element ```\nx[k]```\n for which initial the\n  total weight of all elements ```\nx[i] < x[k]```\n is less or equal to ```\nS/2```\n\n  and for which the total weight of all elements ```\nx[i] > x[k]```\n is less\n  or equal to ```\nS/2```\n.\n\n\nFrom this description, we have a pretty straight-forward implementation of the algorithm. If we start with ```\nk == 0```\n, then there are no elements before ```\nx[k]```\n, so the total weight of elements ```\nx[i] < x[k]```\n will be less than ```\nS/2```\n. Depending on the data, the total weight of the elements ```\nx[i] > x[k]```\n may or may not be less than ```\nS/2```\n. So we can just move forward through the array until this second sum becomes less than or equal to ```\nS/2```\n:\n\n```\n#include <cstddef>\n#include <numeric>\n#include <iostream>\n\nint main()\n{\n  std::size_t const N = 5;\n  double x[N] = {0, 1, 2, 3, 4};\n  double w[N] = {.1, .2, .3, .4, .5};\n\n  double S = std::accumulate(w, w+N, 0.0); // the total weight\n\n  int k = 0;\n  double sum = S - w[0]; // sum is the total weight of all `x[i] > x[k]`\n\n  while(sum > S/2)\n  {\n    ++k;\n    sum -= w[k];\n  }\n\n  std::cout << x[k] << std::endl;\n}\n```\n\n\nNote that if the median is the last element (```\nmedianIndex == N-1```\n), then ```\nsum == 0```\n, so the condition ```\nsum > S/2```\n fails. Thus, ```\nk```\n will never be out of bounds (unless ```\nN == 0```\n!). Also, if there are two elements that satisfy the condition, the algorithm always selects the first one.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "QuickSort - Median Three\r\n                \r\nI am working on the QuickSort - Median Three Algorithm.\nI have no problem with the first and last element sorting. But, when comes to the Median-three, I am slightly confused. I hope someone could help me on this.\n\nWould be appreciate if someone could provide me some pseudocode?\n\nMy understanding is to get the middle index by doing this. (start + end) / 2 , then swap the middle pivot value to the first value, after all these done it should goes well with the normal quick sort ( partitioning and sorting).\n\nSomehow, I couldn't get it works. Please help!\n\n```\n#Array Swap function\ndef swap(A,i,k):\n    temp=A[i]\n    A[i]=A[k]\n    A[k]=temp\n\n# Get Middle pivot function    \ndef middle(lista):\n    if len(lista) % 2 == 0:\n        result=  len(lista) // 2 - 1\n    else:\n        result =  len(lista)  // 2\n    return result\n\ndef median(lista):\n    if len(lista) % 2 == 0:\n        return sorted(lista)[len(lista) // 2 - 1]\n    else:\n        return sorted(lista)[len(lista) // 2]\n\n\n# Create partition function\ndef partition(A,start,end):\n\n    m = middle(A[start:end+1])\n    medianThree = [ A[start], A[m], A[end] ]\n\n    if A[start] == median(medianThree):\n\n       pivot_pos = start\n\n    elif A[m] == median(medianThree):\n       tempList = A[start:end+1]\n       pivot_pos = middle(A[start:end+1])\n       swap(A,start,pivot_pos+start)\n\n    elif A[end] == median(medianThree):\n\n       pivot_pos = end\n\n\n\n    #pivot = A[pivot_pos]\n    pivot = pivot_pos\n    # swap(A,start,end) // This line of code is to switch the first and last element pivot\n    swap(A,pivot,end)\n    p = A[pivot]\n    i = pivot + 1\n    for j in range(pivot+1,end+1):\n        if A[j] < p:\n            swap(A,i,j)\n            i+=1\n    swap(A,start,i-1)\n    return i-1\n\n\ncount = 0\n#Quick sort algorithm\ndef quickSort(A,start,end):\n    global tot_comparisons\n\n    if start < end:\n       # This to create the partition based on the \n       pivot_pos = partition(A,start,end)\n       tot_comparisons += len(A[start:pivot_pos-1]) + len(A[pivot_pos+1:end])\n       # This to sort the the left partition\n       quickSort(A,start,pivot_pos -1)\n       #This to sort the right partition\n       quickSort(A,pivot_pos+1,end)\n```\n\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating Median of an array in PHP\r\n                \r\nI'm trying to figure out how to calculate the median of an array of randomly generated numbers. I have the array all set up, but I'm having trouble putting together a function for the calcuation. \n\nThis is what I have so far: \n\n```\n//array \n$lessFifty = array();\n$moreFifty = array();\n\n//number generation\nfor ($i = 0; $i<=30; $i++) {\n      $number = rand(0, 100);\n\n//Sorting <50>      \nif ($number < 50 ) {\n    $lessFifty[] = $number;\n} else {\n    $moreFifty[] = $number; \n   } \n}\n echo print_r($lessFifty); \n echo \"<br>\" ;\n echo print_r($moreFifty);\n\n   //Average\necho \"<p> Average of values less than fifty: </p>\";\n    print   array_sum($lessFifty) / count($lessFifty) ;\necho \"<p> Average of values greater than fifty: </p>\" ;  \n    print   array_sum($moreFifty) / count($moreFifty) ;\n\n//Median\n$func = function (median ($array, $output = $median)){ \n    if(!is_array($array)){\n        return FALSE;\n    }else{\n        switch($output){\n                rsort($array);\n                $middle = round(count($array) 2);\n    $total = $array[$middle-1];\n        break; \n    return $total;\n    }\n}\n\necho $func ; \n```\n\n\nI'm pretty sure that I'm doing this median section completely wrong. I'm just learning and its proving to be a challenge. \n    ", "Answer": "\r\nBe careful about how you write your ```\nfor()```\n loop.  If you want 30 entries, then you should not use ```\n<=```\n or you will end up with 31 because ```\n$i```\n starts with 0.\nBuild an array of the random numbers, then sort them.\nThen determine if you have a central entry (odd array length) or if you need to average the middle two entries (even array length).\nHere is a modern implementation of a median method posted in 2022 on CodeReview.\nCode: (Demo)\n```\n$limit = 30;  // how many random numbers do you want?  30 or 31?\nfor ($i = 0; $i < $limit; ++$i) {\n    $numbers[] = rand(0, 100);\n}\nvar_export($numbers);\n\n//echo \"\\n---\\nAverage: \" , array_sum($numbers) / $limit;\necho \"\\n---\\n\";\n\nsort($numbers);\n$count = sizeof($numbers);   // cache the count\n$index = floor($count/2);  // cache the index\nif (!$count) {\n    echo \"no values\";\n} elseif ($count & 1) {    // count is odd\n    echo $numbers[$index];\n} else {                   // count is even\n    echo ($numbers[$index-1] + $numbers[$index]) / 2;\n}\n```\n\nPossible Output:\n```\narray (\n  0 => 27,\n  1 => 24,\n  2 => 84,\n  3 => 43,\n  4 => 8,\n  5 => 51,\n  6 => 60,\n  7 => 86,\n  8 => 9,\n  9 => 48,\n  10 => 67,\n  11 => 20,\n  12 => 44,\n  13 => 85,\n  14 => 6,\n  15 => 63,\n  16 => 41,\n  17 => 32,\n  18 => 64,\n  19 => 73,\n  20 => 43,\n  21 => 24,\n  22 => 15,\n  23 => 19,\n  24 => 9,\n  25 => 93,\n  26 => 88,\n  27 => 77,\n  28 => 11,\n  29 => 54,\n)\n---\n43.5\n```\n\nAfter sorting, elements ```\n[14]```\n and ```\n[15]```\n hold ```\n43```\n and ```\n44```\n respectively.  The average of these \"middle two\" values is how the result is determined.  (Hardcoded numbers demo)\n\nIf you want a short, inflexible, hardcoded snippet, then you can use ```\n30```\n and ```\n14```\n and ```\n15```\n as your predetermined size and indexes.\n```\nfor ($i = 0; $i < 30; ++$i) {\n    $numbers[] = rand(0, 100);\n}\nsort($numbers);\necho ($numbers[14] + $numbers[15]) / 2;\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "R median inconsistent\r\n                \r\nRunning the identical code on the identical data, using the identical function call, I find the R median function returning inconsistent results. Is this a bug in R or am I doing something wrong? Here are the data in question, along with the two distinct medians that were returned. The call to the median included na.rm=TRUE.\n\nFirst run of program:\n\n```\n    epoch   x\n    1       0.0280851454\n    2       0.0277059423\n    3       0.0252999465\n    4       0.0291988163\n    5       0.0291992778\n    6       0.0318857602\n    7       0.0351821603\n    8       0.0356780765\n    9       0.0383428958\n    10      0.0383872088\n    11      0.0343364561\n    12      0.0306270197  <== median on this run\n    13      NA\n    14      NA\n    15      NA\n    16      NA\n    17      NA\n    18      NA\n    19      NA\n    Median  0.0306270197\n```\n\n\nSecond run of program:\n\n```\n    epoch   x\n    1       0.0280851454\n    2       0.0277059423\n    3       0.0252999465\n    4       0.0291988163\n    5       0.0291992778\n    6       0.0318857602  <== median on this run\n    7       0.0351821603\n    8       0.0356780765\n    9       0.0383428958\n    10      0.0383872088\n    11      0.0343364561\n    12      0.0306270197\n    13      NA\n    14      NA\n    15      NA\n    16      NA\n    17      NA\n    18      NA\n    19      NA\n    Median  0.0318857602\n```\n\n\nNotice that while there are an odd number of data points, there are an even number of non-missing data points. With na.rm=TRUE the median should be the midpoint between the 6th and 7th data points (ordered by size). Instead, it appears that R is randomly selecting the 6th or 7th data point (ordered by size).\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median worked out incorrectly\r\n                \r\nI have tried all possibilities in working out the Median value on a specific column but keep on getting a different value from Excel.\n\nI am working on SQL2008R2\n\nThis is what I have tried so far : \n\n```\nSELECT  Entity,\n                BillPeriod,\n                Cost,\n                PatientDays,\n                0 AS Median\n        FROM GroupCTE\n        UNION \n        SELECT  Entity,\n                BillPeriod,\n                Cost,\n                PatientDays,\n                0 AS Median\n        FROM RegionCTE\n                    UNION \n        SELECT  Entity,\n                BillPeriod,\n                Cost,\n                PatientDays,\n                0 AS Median\n        FROM InstitutionCTE\n        Union\n        SELECT  'Median' as Entity,\n                BillPeriod,\n                0 as Cost,\n                0 as PatientDays,\n                (((\n                    (SELECT MAX(Cost) FROM\n                        (SELECT TOP 50 PERCENT Cost FROM InstitutionCTE WHERE Cost <> 0 ORDER BY Cost ASC) AS BottomHalf)\n                    +\n                    (SELECT MIN(Cost) FROM\n                        (SELECT TOP 50 PERCENT Cost FROM InstitutionCTE WHERE Cost <> 0 ORDER BY Cost DESC) AS TopHalf)\n                )) / 2)  AS Median\n```\n\n\nAm I doing something terribly wrong here?\n\nI tried this : Function to Calculate Median in Sql Server \n\nThank you\n    ", "Answer": "\r\nSo I managed to fix this issue.\nThe problem was, for some reason, doing the Median calculation gave be different results than that of Excels Median function.\n\nI created a TEMP table and imported the result of my UNION, then updated the Median column using my calculation :\n\n```\nINSERT INTO #Temp\n            SELECT  Entity,\n                    BillPeriod,\n                    ((Cost) / (PatientDays)) * 100 AS Cost,\n                    PatientDays,\n                    0 AS Median\n            FROM GroupCTE\n            UNION \n            SELECT  Entity,\n                    BillPeriod,\n                    ((Cost) / (PatientDays)) * 100 AS Cost,\n                    PatientDays,\n                    0 AS Median\n            FROM RegionCTE\n            UNION \n            SELECT  Entity,\n                    BillPeriod,\n                    ((Cost) / (PatientDays)) * 100 AS Cost,\n                    PatientDays,\n                    0 AS Median\n            FROM InstitutionCTE\n            UNION       \n            SELECT  'Median' as Entity,\n                    BillPeriod,\n                    0 AS Cost,\n                    0 AS PatientDays,\n                    0 AS Median\n\n\n            FROM InstitutionCTE\n            GROUP BY Entity, BillPeriod, PatientDays\n\n            UPDATE #Temp\n            SET Median =    ((\n                        ((SELECT MAX(Cost) FROM\n                            (SELECT TOP 50 PERCENT Cost FROM #Temp WHERE Cost <> 0 ORDER BY Cost ASC) AS BottomHalf)\n                        +\n                        (SELECT MIN(Cost) FROM\n                            (SELECT TOP 50 PERCENT Cost FROM #Temp WHERE Cost <> 0 ORDER BY Cost DESC) AS TopHalf)\n                    )) / 2)     \n\n\nSELECT * FROM #Temp\nDROP TABLE #Temp\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median filter's out is wrong. What is the right median filter algorithm?\r\n                \r\nI want to write a 1-D median filter for eliminating glitches from the signal. \nI wrote my median filter code on matlab and ı compare it with medfilt1 function out. My median filter is not working. \n\n-- My median filter order is 8.\n\nIn my implementation, \nwhen data comes, I fill the array( size of the array is 8).\nWhen incoming data count is 8, I take the middle value and write this\nmiddle value to the median filter output array. And then I wait for the next 8 data. when ı take the 8 data, ı take the middle value and write this middle value to the median filter output array. and so on. (I implement sorting algoritm and ı test it. it is working good).\n\nhere is my screenshots, \n\nmy incoming data's color is red.\nmatlab's medfilt1's out is green.\nmy median filter's out is blue.\n\nOverall picture\n\nblown-up image\n\nI think my algorithm is wrong, but I don't know what is the right algorithm? \n    ", "Answer": "\r\nYour implementation is wrong, probably in two ways (hard to tell as you didn't show us your code).\n\n\nYou should be scrolling 1 element at a time, not 8 elements at a time.  That is, you should drop just the oldest element and add just the newest element, before taking the median.  (Note that your output has a frequency 8 times too high because you are replacing all 8 elements.)\nYou say that you take the middle value.  The middle value is not the median.  But perhaps you forgot to tell us that you do a sort first?\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median of medians not working properly\r\n                \r\nI'm writing C code for the Median of Medians algorithm to find the kth smallest element in worst case linear time.\nI've checked my code for Quick Sort, Swapping, etc.\nEverything looks good but still it is not working properly every time.\n\nInput given -\n\n```\nn=12 kth=7\nA[]=53 22 65 18 89 45 42 63 99 11 36 55\n```\n\n\nOutput -\n\n```\nSmallest at k=7 is 89\n```\n\n\nbut output needs to be\n\n```\nSmallest at k=8 is 53\n```\n\n\nFunction call -\n\n```\nmed_of_medians(A,0,n-1,kth);\n```\n\n\nCode -\n\n```\nint med_of_medians(int A[], int a, int b, int kth)\n{\nif(a==b)\n    return 0;\nint n=(b-a+1),median,pos,rank;\nint i,med[(n+4)/5];\nfor(i=0;i<n/5;i++)\n    med[i]=find_median(A,(i*5)+a,((i+1)*5)-1);\nif(n%5>0)\n    med[i++]=find_median(A,(n/5)*5+a,b);\nmedian=(i==1)?med[0]:find_median(med,0,i-1);\npos=partition(A,a,b,median);\nrank=pos-a+1;   \nif(rank==kth)\n    return A[pos];\nelse if(rank>kth)\n    return med_of_medians(A,a,pos-1,kth);\nelse\n    return med_of_medians(A,pos+1,b,kth-pos-1);\n}\n```\n\n    ", "Answer": "\r\nYou probably want to return ```\nA[a]```\n in the first ```\nif```\n:\n\n```\nif (a == b)\n    return A[a];\n```\n\n\nThere is missing ```\na```\n in the second index in the ```\nfind_median```\n call:\n\n```\nmed[i]=find_median(A,(i*5)+a, a +((i+1)*5)-1);\n```\n\n\nand also ```\na```\n should be added for the new rank calculation (it should be ```\nkth - rank```\n):\n\n```\nreturn med_of_medians(A,pos+1,b,kth-pos-1 +  a);\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to calculate median in Hive\r\n                \r\nI have a hive table,\n\n```\nname    age     sal\nA       45      1222\nB       50      4555\nc       44      8888\nD       78      1222\nE       12      7888\nF       23      4555\n```\n\n\nI want to calculate median of age column.\n\nBelow is my approach  \n\n```\nselect min(age) as HMIN,max(age) as HMAX,count(age) as HCount,\nIF(count(age)%2=0,'even','Odd') as PCOUNT \nfrom v_act_subjects_bh;\n```\n\n\nAppreciate any query suggestion\n    ", "Answer": "\r\nYou can use the percentile function to compute the median. Try this:\n\n```\nselect percentile(cast(age as BIGINT), 0.5) from table_name\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of median algorithm recurrence relation\r\n                \r\nI know that the linear select (median of medians algorithm) recurrence equation is as follows:   \n\n```\nT(n) <= an + T(n/5) + T(7n/10)\n```\n\n\nBut where do these terms come from? I've been trying to understand, but I'm extremely confused. Can anyone please shed some light?\n    ", "Answer": "\r\nBest attempt:\n\nThat equation is only for when you do the median of groups of 5. Otherwise it will change. The an part of the equation is the time it takes for the algorithm to go through all the elements and group them into 5. The T(n/5) is the time it takes for the median to be found for each group of 5. As there is n/5 groups of 5.\n\nT(7n/10) will take more time...\n\nWhen you do the medians of medians the elements are broken up into 4 quadrants. 3/10 of the elements are greater than the median of medians, 3/10 elements are less than the median of medians. The other 4/10 is split up unto 2 groups of 2/10. These are the elements in which you're not sure if they are greater or less than the median of medians. Therefore, the max number of elements you could have that are greater than or less than the median of medians is 3/10 + 2/10 + 2/10 = 7/10. So the T(7n/10) is the part of continuing the equation with the max segment of numbers that is larger/smaller than the median of medians....\n\nHopefully that kind of makes sense.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of median algorithm recurrence relation\r\n                \r\nI know that the linear select (median of medians algorithm) recurrence equation is as follows:   \n\n```\nT(n) <= an + T(n/5) + T(7n/10)\n```\n\n\nBut where do these terms come from? I've been trying to understand, but I'm extremely confused. Can anyone please shed some light?\n    ", "Answer": "\r\nBest attempt:\n\nThat equation is only for when you do the median of groups of 5. Otherwise it will change. The an part of the equation is the time it takes for the algorithm to go through all the elements and group them into 5. The T(n/5) is the time it takes for the median to be found for each group of 5. As there is n/5 groups of 5.\n\nT(7n/10) will take more time...\n\nWhen you do the medians of medians the elements are broken up into 4 quadrants. 3/10 of the elements are greater than the median of medians, 3/10 elements are less than the median of medians. The other 4/10 is split up unto 2 groups of 2/10. These are the elements in which you're not sure if they are greater or less than the median of medians. Therefore, the max number of elements you could have that are greater than or less than the median of medians is 3/10 + 2/10 + 2/10 = 7/10. So the T(7n/10) is the part of continuing the equation with the max segment of numbers that is larger/smaller than the median of medians....\n\nHopefully that kind of makes sense.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating Median for columns mysql\r\n                \r\nI have the following columns in mysql,\n\nArea, Price, Type, Quarter, Year etc.\n\nWhat I am trying to do, is calculate the median for every area (Juffair, Adliya, Mahooz) over these conditions.\n\nA typical row would look something like this\n\n```\nBurhama, 500, Apartment, 3, 2014..\nBurhama, 600, Apartment, 3, 2014\nJuffair, 800, Apartment, 3, 2014 etc.\n```\n\n\nWhat I want it to do is display a table with (Area - Median). So it should take all of Juffair and calculate the median. etc. \n\nWhat it is doing is: Displaying every single area(duplicate times) with it's price next to it.\n\nMoving around the loops, I get it to display, only the area's, but calculates the medians, across all the area's, instead of just the one that it is suppose to.\n\nAny help would be appreciated. \n\n```\n<?php\nfunction calculate_median($arr) {\nsort($arr);\n$count = count($arr); //total numbers in array\n$middleval = floor(($count-1)/2); // find the middle value, or the lowest middle value\nif($count % 2) { // odd number, middle is the median\n    $median = $arr[$middleval];\n} else { // even number, calculate avg of 2 medians\n    $low = $arr[$middleval];\n    $high = $arr[$middleval+1];\n    $median = (($low+$high)/2);\n}\nreturn $median;\n}\n?>\n\n\n<?php\n\n$array = array('Juffair', 'Adliya', 'Mahooz', 'Burhama' , 'Manama');\n$price = array();\n//connect\n$data = mysql_query(\"SELECT * FROM stats \nWHERE `rentsale` = 'Rent'\nand `type` = 'Apartment' \nand `area` IN('\".implode(\"', '\", $array).\"') \nand `beds` = '2' \nand `quarter` = '3' \nand `year` = '2014'\") \n//die\nwhile($info = mysql_fetch_array( $data )) {\n\n$area = $info['area'];\n$array = array('Juffair', 'Adliya', 'Mahooz', 'Burhama' , 'Manama');\nforeach( $array as $area ) {\n$price[] = $info['price']; \n$home_values_array = $price;\n$median_home_value = calculate_median($home_values_array);\n}\n?>\n<table>\n<tr>\n<TD><?php echo $area; ?></TD>\n<TD><?php echo $median_home_value; ?></TD>\n</tr>\n</table>\n<?php\n\n}\n\n\n ?> \n```\n\n    ", "Answer": "\r\nIf you want to calculate the median in MySQL, I would suggest using variables (which neither of the referenced answers suggests):\n\n```\nselect area, avg(price) as median\nfrom (select s.*,\n             (@rn := if(@a = area, @rn + 1,\n                        if(@a := area, 1, 1)\n                       )\n             ) seqnum\n      from stats s cross join\n           (select @a := '', @rn := 0) vars\n      order by area, price\n     ) s join\n     (select area, count(*) as cnt\n      from stats\n      group by area\n     ) a\n     on s.area = a.area\nwhere 2*seqnum in (cnt - 1, cnt, cnt + 1)\ngroup by area;\n```\n\n\nThe above query calculates the median for all the data.  The first subquery enumerates the values, and the second gets the total count.\n\nIf you want a filter, such as as by year, then you need to add it to both subqueries.  \n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of the medians of a list\r\n                \r\nI need a vector that stores the median values of the medians of the main list \"v\". I have tried something with the following code but I am only able to write some values in the correct way.\n\n```\nv=[1,2,3,4,5,6,7,8,9,10]\nfinal=[]\nnfac=0\nfor j in range (0,4):\n    nfac=j+1\n    for k in range (0,nfac):\n        if k%2==0:\n            final.append(v[10/2**(nfac)-1])\n        else:\n            final.append(v[9-10/2**(nfac)])\n```\n\n\nThe first median in v=[1,2,3,4,5,6,7,8,9,10] is 5\n\nThen I want the medians of the remaining sublists [1,2,3,4] and [6,7,8,9,10]. I.e.  2 and 8 respectively. And so on.\n\nThe list \"final\" must be in the following form:\n\nfinal=[5,2,8,1,3,6,9,4,7,10]\n    ", "Answer": "\r\nPlease take a note that the task as you defined it is basically equivalent to constructing a binary heap from an array. \n\nDefinitely start by defining a helper function for finding the median:    \n\n```\ndef split_by_median(l):\n    median_ind = (len(l)-1) // 2\n    median = l[median_ind]\n    left = l[:median_ind]\n    right = l[median_ind+1:] if len(l) > 1 else []\n    return median, left, right\n```\n\n\nFollowing the example you give, you want to process the resulting sublists in a breadth-first manner, so we need a queue to remember the following tasks:\n\n```\nfrom collections import deque   \ndef construct_heap(v):\n    lists_to_process = deque([sorted(v)])\n    nodes = []\n    while lists_to_process:\n        head = lists_to_process.popleft()\n        if len(head) == 0:\n            continue\n\n        median, left, right = split_by_median(head)\n        nodes.append(median)\n        lists_to_process.append(left)\n        lists_to_process.append(right)\n\n    return nodes\n```\n\n\nSo calling the function finally:\n\n```\nprint(construct_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) #  [5, 2, 8, 1, 3, 6, 9, 4, 7, 10]\nprint(construct_heap([5, 1, 2])) #  [2, 1, 5]\nprint(construct_heap([1, 0, 0.5, -1])) #  [0, -1, 0.5, 1] \nprint(construct_heap([])) #  [] \n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "multiple condition Median If formula\r\n                \r\nI'm trying to calculate the Median since a pivot table won't work.\n\nI have a number of conditons that i need to fulfill so i need a\n\n```\n={median(if(and(A:A=A2,B:B=B2,C:C=C2,D:D=D2),T:T,\"\")} \n```\n\n\ntype formula.\n\nColumns A, B, C and D have the criteria and T has the value that I need the Median of.\n\nI have been able to produce a median with just 1 variable, but i'm only getting #n/a when i try more.\n\nI have seen that an AND function doesn't work with an Array, so is there another way that I can calculate the mean based upon 4 different conditions?\n\nAny Help would be greatly appreciated!\n\nEd\n    ", "Answer": "\r\nArray formula do not like ```\nAND```\n or ```\nOR```\n so use ```\n*```\n and ```\n+```\n respectively to turn the ```\nTRUE```\n and ```\nFALSE```\n of each of the Boolean test to ```\n1```\n and ```\n0```\n respectively.\n\nSo with ```\n*```\n if any are ```\nFALSE```\n it will be ```\n0```\n and turn the whole to ```\n0```\n, where as with ```\n+```\n if any are ```\nTRUE```\n then it will be greater than ```\n0```\n and the ```\nIF```\n will return the ```\nTRUE```\n result:\n\n```\n=median(if((A:A=A2)*(B:B=B2)*(C:C=C2)*(D:D=D2),T:T))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate a Median in SSRS\r\n                \r\nWe need to be able to calculate the median value of a set of figures for a statistical return - specifically the median Answered figures per contract for a date range.\n\nThe data is stored in a shared dataset for use in Report Builder, and this shared dataset is used a number of contractual reports so updating it is not an option. The shared dataset being used ensures consistency between contractual reports, so must be used.\n\nThere are answers to this already (e.g. Find the median of a calculated field in SSRS 2012 & Use of 'median' function in calculated field in SSRS) but these require either hidden rows/columns or using a calculated field in a graph.\n\nWe need an answer that allows us to use shared datasets/stored procedures and calculate the median value in SSRS/Report Builder.\n    ", "Answer": "\r\nThis custom code can be added to the report:\n\n```\nPublic Shared Function Median(ByVal items As Object()) As Decimal\n    If items Is Nothing Then\n        Return Nothing\n    End If\n\n    Dim counter As Integer = items.Length\n    If counter = 0 Then\n        Return 0\n    End If\n\n    System.Array.Sort(items)\n\n    If counter Mod 2 = 1 Then\n        Return items(CInt((counter / 2) - 0.5))\n    Else\n        Dim FirstIndex As Integer = counter \\ 2\n        Dim SecondIndex As Integer = FirstIndex - 1\n\n        Dim FirstValue As Integer = items(FirstIndex)\n        Dim SecondValue As Integer = items(SecondIndex)\n\n        Return (FirstValue + SecondValue) / 2\n    End If\nEnd Function\n```\n\n\nWhich can then be called by using the following ```\n=Code.Median(Lookupset(Fields!Contract.Value, Fields!Contract.Value, Fields!Answered.Value, \"DS_CallData_LKP\"))```\n\n\nIn this example the dataset \"DS_CallData_LKP\" is powering the entire report, but is being referenced back again to get list of values to be sorted for the median. Using a ```\nlookupset()```\n instead of the hidden rows/columns method that is seen a lot helps keep the report simple for editing later down the line.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median on weekdays\r\n                \r\nI'm trying to determine the median of a set of data for each weekday. Currently, the data is in two columns, date and value. Some of the value rows are blank, as the data to be analyzed hasn't be entered yet. I've had a look at the median-if array formula, but when I combine it with Weekday function I just get an error\n\n\n  {=Median(if(Weekday('Data'!A:A)=1, 'Data'!B:B)}\n\n\nThis is the current formula I'm working with to calculate the median value for Sundays, and all I get out of it #VALUE!.\n    ", "Answer": "\r\nCopying a Comment from @sous2817:  \n\n\n  Rather than use a whole column reference, you should just use the range you want to evaluate for the calculation. If you have something other than a date in Column A, it will throw the #Value error.\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median in Pivot in Oracle\r\n                \r\nI am trying to find median in the pivot block but i keep on getting the below error as pivot needs aggregate function. I thought median is an aggregate function.\n\nBelow is the code that I am using :-\n\n```\nselect * from (\nSELECT DISTINCT ACCOUNT.ACCOUNT_KEY,\n   SUM(ACCT_CURR_AMOUNT) OVER (PARTITION BY trunc(execution_local_date_time,'mm'), ACCOUNT.ACCOUNT_KEY,GROUP_TRANSACTION_TYPE_CD ORDER BY trunc(execution_local_date_time,'mm')) AS SUM_OVER_MONTH,\n   COUNT(account.ACCOUNT_KEY ) OVER (PARTITION BY trunc(execution_local_date_time,'mm'), ACCOUNT.ACCOUNT_KEY,GROUP_TRANSACTION_TYPE_CD ORDER BY trunc(execution_local_date_time,'mm')) AS COUNT_OVER_MONTH,\n   GROUP_TRANSACTION_TYPE_CD                   \nFROM CDS_SCHEMA.V_ACCOUNT ACCOUNT \nLEFT JOIN V_TRANSACTIONS TRA ON TRA.ACCOUNT_KEY = ACCOUNT.ACCOUNT_KEY and EXECUTION_LOCAL_DATE_TIME BETWEEN '01-JAN-2019' and '30-JUN-2019'\nJOIN CDS_SCHEMA.SAM_TRANS_CODE_TYPE_REL TRANS_CODE ON TRA.TRANSACTION_CODE_CD = TRANS_CODE.TRANSACTION_CODE_CD\nJOIN CDS_SCHEMA.SAM_TRANS_TYPE_GROUP_REL TRANS_CODE_GRP ON TRANS_CODE_GRP.TRANSACTION_TYPE_CD = TRANS_CODE.TRANSACTION_TYPE_CD AND  TRANS_CODE_GRP.GROUP_TRANSACTION_TYPE_CD IN('EFT-INN','EFT-OUT','IFT-INN','IFT-OUT','CCE-INN','CCE-OUT','ALL-INN','ALL-OUT')\nwhere ACCOUNT.ACCOUNT_KEY = '0004447887C1CB00293D55CD3ED1D7B6CB3FE71C'\n)a \nPIVOT \n(\n    median(SUM_OVER_MONTH) *as* med_val, median(COUNT_OVER_MONTH) as med_vol\n    FOR GROUP_TRANSACTION_TYPE_CD\n    IN('EFT-INN','EFT-OUT','IFT-INN','IFT-OUT','CCE-INN','CCE-OUT','ALL-INN','ALL-OUT')\n)\n```\n\n\nIn the pivot block I keep getting error on \"as\". Kindly help me find median in pivot\n    ", "Answer": "\r\n\n  In the pivot block I keep getting error on \"as\". Kindly help me find\n  median in pivot\n\n\nChange the ```\n*as*```\n to ```\nas```\n in your ```\npivot```\n clause, i.e. instead of\n\n```\nmedian(SUM_OVER_MONTH) *as* med_val, median(COUNT_OVER_MONTH) as med_vol\n```\n\n\nwrite\n\n```\nmedian(SUM_OVER_MONTH) as med_val, median(COUNT_OVER_MONTH) as med_vol\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Splitting a data frame by median\r\n                \r\nI want to separate my data set into two subsets, where the one half contains all values below the median and the other half contains values above the median. \n\nProblem: my data set has multiple observations with the same value as the median. Therefore, \n\n```\nv <- c(1,2,3,3,3,3,3,4)\nmed <- median(v)\nupper <- v[which(v >= med)]\nlower <- v[which(v <= med)]\n```\n\n\ndoesn't work because the values equal to the median will appear in both sets and be overrepresented. \n\nMy expected output is \n\n```\nlower: 1,2,3,3\nupper: 3,3,3,4\n```\n\n\nHow can I split my dataframe by the median in R? \n    ", "Answer": "\r\nBased on your requirement, we just need to split the sorted vector in half. However, we need to account for cases where we have an odd number of elements, and so we use ```\nround(length(v))```\n to get the nearest integer element for odd length vectors:\n\n```\nv <- sort(v)\nlower <- v[1:round(length(v)/2)] \nupper <- v[round((length(v)/2)+1):length(v)] \n\nlower\n[1] 1 2 3 3\nupper\n[1] 3 3 3 4\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Python: weighted median algorithm with pandas\r\n                \r\nI have a dataframe that looks like this: \n\n```\nOut[14]:\n    impwealth  indweight\n16     180000     34.200\n21     384000     37.800\n26     342000     39.715\n30    1154000     44.375\n31     421300     44.375\n32    1210000     45.295\n33    1062500     45.295\n34    1878000     46.653\n35     876000     46.653\n36     925000     53.476\n```\n\n\nI want to calculate the weighted median of the column ```\nimpwealth```\n using the frequency weights in ```\nindweight```\n. My pseudo code looks like this: \n\n```\n# Sort `impwealth` in ascending order \ndf.sort('impwealth', 'inplace'=True)\n\n# Find the 50th percentile weight, P\nP = df['indweight'].sum() * (.5)\n\n# Search for the first occurrence of `impweight` that is greater than P \ni = df.loc[df['indweight'] > P, 'indweight'].last_valid_index()\n\n# The value of `impwealth` associated with this index will be the weighted median\nw_median = df.ix[i, 'impwealth']\n```\n\n\nThis method seems clunky, and I'm not sure it's correct. I didn't find a built in way to do this in pandas reference. What is the best way to go about finding weighted median?\n    ", "Answer": "\r\nIf you want to do this in pure pandas, here's a way. It does not interpolate either. (@svenkatesh, you were missing the cumulative sum in your pseudocode)\n\n```\ndf.sort_values('impwealth', inplace=True)\ncumsum = df.indweight.cumsum()\ncutoff = df.indweight.sum() / 2.0\nmedian = df.impwealth[cumsum >= cutoff].iloc[0]\n```\n\n\nThis gives a median of 925000.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Function in scheme to find median [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has an answer here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        a function median in Scheme\r\n                            \r\n                                (1 answer)\r\n                            \r\n                    \r\n                Closed 8 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI am new to Scheme and I am using Dr.Racket to try to find the median of the list.\n\nIf the length of list L is odd, the function median returns the median element in the list. If the length of L is even, the function median returns 0. example\n\n```\n(median ‘(1)) returns 1\n(median ‘(1 2)) returns 0\n(median ‘(1 2 3)) returns 2\n(median ‘( 1 2 3 4) returns 0\n```\n\n\nI am only allowed to use:\n\n\nnull?\ncar\ncdr\nelse\n= \n+\nmedian\ncond\nif\nuser defined names (for my variables)\ninteger literals\nparentheses\n\n\nWe are not allowed to use two functions. It should be something like ```\n(define median (lambda (<list L followed by parameters of your choice initially set to zero>) (cond )))```\n and it should have only one recursive function. All auxiliary parameters must be numeric (not lists) and should have initial values set to zero. For example, if L is ```\n‘(1 2 3 4)```\n and decide to use one additional auxiliary parameters, median should be called ```\n(median '(1 2 3 4) 0 )```\n. \n\nThe median divides the list into two sets with equal length. This is the defining property of the median: if the number of the elements preceding the median equals the number of the elements succeeding it, then the element is the median. Therefore, in order to find the median, for each list element, one needs to count the number of elements that precede the given element and the number of the elements that succeed it. If these two numbers are the same, the median is found. The problem representation involves the following variables: - the list L; - a target element (potential median), say “target”; - a counter for the number of the elements preceding the target, say count1 - a counter for the number of the elements succeeding the target, say count2 I came up with something like this:\n\n```\n(define median(lambda (list target count1 count2 loop )\n  (cond\n  ((null? list)(if (= count1 count2) target 0))\n  ((if (= loop 1)\n  (if (= target (median (cdr list) target count1 (+ 1 count2) 1 ))\n  target\n  (median (cdr list) (car list) (+ count1 1) 0 1 )\n  ))))))\n```\n\n\nBut I am stuck here...can anyone help?\n    ", "Answer": "\r\nIf I read your constraints well this should do:\n\n```\n(define median\n  (lambda (lst pass cnt1 cnt2)\n    (cond\n      ; pass 0 = initial call - call pass 1 then pass 2\n      ((= pass 0) (median lst 2 (median lst 1 0 0) 0))\n      ; pass 1 = determine the position of the median (-1 or n//2)\n      ((= pass 1) (if (null? lst)\n                      (if (= cnt1 cnt2) -1 (sub1 cnt1))\n                      (median (cdr lst) 1 (add1 cnt2) cnt1)))\n      ; pass 2 = find element\n      (else       (cond\n                    ((eqv? cnt1 -1) 0)\n                    ((eqv? cnt1 0) (car lst))\n                    (else (median (cdr lst) 2 (sub1 cnt1) 0)))))))\n```\n\n\nIt basically has 3 passes, and some parameters have different meaning for different passes, so of course you'd never write such a thing in real world.\n\nTesting:\n\n```\n> (median '(1) 0 0 0)\n1\n> (median '(1 2) 0 0 0)\n0\n> (median '(1 2 3) 0 0 0)\n2\n> (median '(1 2 3 4) 0 0 0)\n0\n> (median '(1 2 3 4 5) 0 0 0)\n3\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "calculating median\r\n                \r\ncan anyone provide me solution of how to find the median of the final cluster members that i have got in the below program....???\n\n```\npackage javaapplication;\n\nimport java.text.DecimalFormat;\nimport java.text.DecimalFormatSymbols;\nimport java.util.Locale;\n\nimport java.io.BufferedInputStream; // to read text file line by line\n\npublic class microclustering{\nprivate static boolean contains(String target, String value)\n{\n   boolean result= true;\n    for(int i=0; i<value.length();i++){\n            if(target.indexOf(value.charAt(i))== -1)\n    {\n        result=false;\n        return result;\n    }\n    }\n\n  //  System.out.println(count+\"intersection \"+a+b);\n    return result;\n}\n\nprivate static String[] arragedata(String [] data,int i, int j)\n{\n    int length=data.length;\n  String newdata [] =  new String[length-1];\n  if(i==j)\n      return data;\n  if(j<i)\n  {\n      int temp=j;\n      j=i;\n      i=temp;\n  }\n   int temp=0;\n  for(int k=0;k<data.length;k++)\n  {\n\n      if(k!=i && k!=j)\n      {\n\n          newdata[temp]=data[k];\n          temp++;\n      }\n      else\n          if(k==i)\n          {\n              newdata[temp]=data[i]+\",\"+data[j];\n              temp++;\n          }\n  }\n  return newdata;\n}\nprivate static int getIntersection(String a, String b, String []database)\n{\n   int count=0;\n   boolean flag=true;\n   String [] first = a.split(\",\");\n   String [] second = b.split(\",\");\n    for(int i=0; i<database.length;i++)\n    {\n        for(int j=0;j<first.length;j++)\n            if (!contains(database[i],first[j]))\n                flag=false;\n        if(flag==true)\n        for(int j=0;j<second.length;j++)\n            if (!contains(database[i],second[j]))\n                flag=false;\n\n        if(flag==true)\n            count++;\n        else\n            flag=true;\n\n    }\n\n    return count;\n}\nprivate static int getUnion(String a, String b, String []database)\n{\n   int count=0;\n      boolean flag=false;\n   String [] first = a.split(\",\");\n   String [] second = b.split(\",\");\n\n       for(int i=0; i<database.length;i++)\n    {\n\n           for(int j=0;j<first.length;j++)\n            if (contains(database[i],first[j]))\n                flag=true;\n\n        if(flag==false)\n        for(int j=0;j<second.length;j++)\n            if (contains(database[i],second[j]))\n                flag=true;\n\n           if(flag==true)\n        {\n            count++;\n            flag=false;\n        }\n\n\n    }\n\n    return count;\n}\n\n    public static void main(String[] args) throws Exception{\n        // TODO code application logic here\n           String [] database = {\"abcefo\",  \"acg\",  \"ei\",  \"acdeg\",  \"acegl\",  \"ej\",  \"abcefp\",  \"acd\",  \"acegm\",  \"acegn\"};\n           String [] data = {\"ecabf\", \"cad\", \"cag\", \"ecag\", \"ca\", \"eca\", \"e\"};\n              String format1 = \"###0.00\" ;               \n\n            DecimalFormat fm1 = new DecimalFormat( format1,new DecimalFormatSymbols(Locale.US));\n\n\n           boolean flag=true;\n  do{\n           double threshold=0.5;      // set threshold = 0.5\n\n           int min_i=-1,min_j=-1;\n           float [][] output= new float[data.length][data.length];\n           for(int i=0;i<data.length;i++){\n               for(int j=0;j<data.length;j++)\n               {\n                   if(getUnion(data[i],data[j],database)!= 0){\n\n                       int b=getIntersection(data[i],data[j],database);\n                       int c=getUnion(data[i],data[j],database);\n                    float a=((float)b)/((float)c);\n                   output[i][j]=1-a;\n                   if(i==j)\n                       output[i][j]=0;\n\n                   }\n\n\n\n               }\n\n           } System.out.print(\"  \\t\");\n              for(int j=0;j<data.length;j++)\n               {\n                   System.out.print(data[j]+\"\\t\");\n               }\n           System.out.print(\"\\n\");\n           for(int i=0;i<data.length;i++)\n           {\n               System.out.print(data[i]+\"\\t\");\n               for(int j=0;j<data.length;j++)\n               {\n\n               System.out.print(fm1.format(output[i][j])+\"\\t\");\n\n              if(output[i][j]>0 && output[i][j]<=threshold)\n               {\n                   threshold=output[i][j];\n                   min_i=i;\n                   min_j=j;\n\n               }  }\n              System.out.print(\"\\n\");\n\n              }\n\n           if(min_i!=-1 && min_j!=-1)\n           {\n               System.out.println(\"minimum distance\"+output[min_i][min_j]+\"\\t\");\n                        try{\n             data=arragedata(data,min_i,min_j);\n\n           }catch(Exception e){\n               e.printStackTrace();\n               flag=false;\n           }\n           }\n           else\n               flag=false;\n                             System.out.print(\"\\n\\n\\n\");\n    }while(flag==true);\n       }\n\n}\n```\n\n\nthis is my output:\n\n```\n        ecabf   cad     cag     ecag    ca      eca     e\necabf   0.00    1.00    1.00    1.00    0.75    0.67    0.75\ncad     1.00    0.00    0.83    0.80    0.75    0.86    0.89\ncag     1.00    0.83    0.00    0.20    0.38    0.43    0.56\necag    1.00    0.80    0.20    0.00    0.50    0.33    0.50\nca      0.75    0.75    0.38    0.50    0.00    0.25    0.40\neca     0.67    0.86    0.43    0.33    0.25    0.00    0.25\ne       0.75    0.89    0.56    0.50    0.40    0.25    0.00\nminimum distance0.19999999\n\n\n\n        ecabf   cad     cag,ecag        ca      eca     e\necabf   0.00    1.00    1.00    0.75    0.67    0.75\ncad     1.00    0.00    0.83    0.75    0.86    0.89\ncag,ecag        1.00    0.83    0.00    0.50    0.43    0.56\nca      0.75    0.75    0.50    0.00    0.25    0.40\neca     0.67    0.86    0.43    0.25    0.00    0.25\ne       0.75    0.89    0.56    0.40    0.25    0.00\nminimum distance0.25\n\n\n\n        ecabf   cad     cag,ecag        ca      eca,e\necabf   0.00    1.00    1.00    0.75    0.75\ncad     1.00    0.00    0.83    0.75    0.89\ncag,ecag        1.00    0.83    0.00    0.50    0.56\nca      0.75    0.75    0.50    0.00    0.40\neca,e   0.75    0.89    0.56    0.40    0.00\nminimum distance0.39999998\n\n\n\n        ecabf   cad     cag,ecag        ca,eca,e\necabf   0.00    1.00    1.00    0.80\ncad     1.00    0.00    0.83    0.90\ncag,ecag        1.00    0.83    0.00    0.60\nca,eca,e        0.80    0.90    0.60    0.00\n```\n\n\ni need median of ca,eca,e and ecag,cag...\n    ", "Answer": "\r\nYour question is unclear to everyone. If you want to calculate the median value, use this approach:-\n\n\nSort array in ascending order\nIf array length is odd, the median is the middle value from the array.\nIf array length is even, the median is the average of lower middle value and upper middle value from the array.\n\n\nIf this is not a school homework, then you can use Commons Math to cut down the amount of code to write. For example:-\n\n```\nDescriptiveStatistics ds = new DescriptiveStatistics();\nds.addValue(10);\nds.addValue(10);\nds.addValue(30);\n\n// median is basically 50th percentile\nSystem.out.println(ds.getPercentile(50)); // displays 10\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "find median in R [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs to be more focused. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                \r\n                    \r\n                        Closed 8 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\n```\nsocialsec  \n411223  \n420211   \n420604\n430404 \n431030\n440127\n910415\n950110\n740505\n910101\n```\n\n\nThis is a number column of Swedish social security number, in the format yymmdd I want to find the median year for them. (\nIf the person then is above the median age, i would like to create i new column were this person is \"old\". I would like to call the new column \"age\"\nThe same for those who are younger than the median age. In the same column \"age\", they stand as \"young\"\nThis is certainly a very basic question, But I am not an experienced user of R.\n    ", "Answer": "\r\nIf your initial data.frame is ```\ndf```\n:   \n\n```\ndf$socialsec = as.Date(paste0('19',as.character(df$socialsec)), format='%Y%m%d')\ndf$age = ifelse(df$socialsec < median(df$socialsec), 'old', 'young')\n```\n\n\nWhere:\n\n```\ndf = structure(list(socialsec = c(411223L, 420211L, 420604L, 430404L, \n431030L, 440127L, 910415L, 950110L, 740505L, 910101L)), .Names = \"socialsec\",     \nclass = \"data.frame\", row.names = c(NA, -10L))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median calculation with condition\r\n                \r\nI am calculating median in spotfire using median function with condition if calculated median value is not one of the numbers from which median was calculated then the median should be the next large existing number. For example, if median is 10 but 10 is not one of the numbers and the next number is 12, then median should be 12. How can this be calculated in spotfire or other language such as R?\n    ", "Answer": "\r\nIn R, you could do this:\n```\nmy_median = function(x, na.rm = FALSE) {\n  if(na.rm) x = na.omit(x)\n  if(length(x) %% 2 == 1) median(x) else median(x[-1])\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "C++ Insertion Sort Median Calculation Error\r\n                \r\nI'm encountering an error I've not seen before, that states that reference to things are ambiguous.\n\nI'm writing a small test program that calculates a running median. As the list grows, it recalculates the median. In this case, median means the middle number in the list, (or upper middle). Thus, the median of 7 is 7, the median of 7 and 9 is 9, and the median of 7 3 and 9 is 7.\n\nI'm accomplishing this (I hope) with two dynamic arrays. Initially, the first value is set as the median, and then each number entered is compared to the current median. The median is obtained for calculating the middle element, between two arrays.\n\nThe left array is for all values less than the median, and the right array is for all greater. I use insertion sort to order the numbers in each array (it's great at almost sorted lists).\n\nI just don't understand the errors I'm getting and or where I've gone wrong. I'm fairly new to C++, so I've opted for a more simple approach to the issue.\n\n```\n#include <cstdlib>\n#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<int> left;\nvector<int> right;\nint leftCount = 0;\nint rightCount = 0;\nvoid leftInsertionSort(int);\nvoid rightInsertionSort(int);\nvoid inputNumber(int, int);\n\nint main(int argc, char** argv) {\n\n    int length = 0;\n    int value;\n    int median;\n    string input;\n\n    while (cin >> input) {\n        value = atoi(input.c_str());\n\n        inputNumber(value, median);\n\n        if (leftCount > rightCount) {\n            median = (((leftCount + rightCount) / 2) + 1);\n            cout << left[median];\n        } else {\n            median = (((leftCount + rightCount) / 2) + 1) - leftCount;\n            cout << right[median];\n        }\n    }\n\n    return 0;\n}\n\nvoid inputNumber(int value, int median) {\n    if (leftCount == 0 && rightCount == 0) {\n        left[0] = value;\n        median = value;\n        leftCount++;\n    } else\n    if (leftCount == 1 && rightCount == 0) {\n        right[0] = value;\n        if (left[0] > right[0]) {\n            right[0] = left[0];\n            left[0] = value;\n        }\n        median = right[0];\n        rightCount++;\n    } else\n    if (value < median) {\n        left[leftCount] = value;\n    } else {\n        right[rightCount] = value;\n    }\n}\n\nvoid leftInsertionSort(int lLength)\n{\n    leftCount++;\n    int key, i;\n    for(int j = 1; j < lLength; j++)\n    {\n        key = left[j];\n        i = j - 1;\n        while (left[i] > key && i >= 0) {\n            left[i+1] = left[i];\n            i--;\n        }\n        left[i+1] = key;\n    }\n}\n\nvoid rightInsertionSort(int rLength)\n{\n    rightCount++;\n    int key, i;\n    for(int j = 1; j < rLength; j++)\n    {\n        key = right[j];\n        i = j - 1;\n        while (right[i] > key && i >= 0) {\n            right[i+1] = right[i];\n            i--;\n        }\n        right[i+1] = key;\n    }\n}\n```\n\n\nThe error I seem to be getting is 'error: reference to ‘left’ is ambiguous'\n    ", "Answer": "\r\nJudging from the compiler error I get when trying to compile that, it seems that the namespace ```\nstd```\n defines names ```\nleft```\n and ```\nright```\n, which you're also using as variable names. The compiler can't decide which definition to use, so you get the error. It's for reasons like these that importing everything from a namespace is frowned upon - you'd be better off either explicitly importing the names you need or using namespace qualifiers.\n\nIn any case, your algorithm seems needlessly complicated. Why not just keep a single vector, ```\npush_back```\n into it when you get a new number, place the number at the right index using an insertion algorithm, and then just return the upper middle element of the vector?\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Interviewstreet median challenge: Java\r\n                \r\nI'm trying to solve interviewstreet's median challenge. I saw a similar question posted here: interviewstreet median challenge but I want to find out what's wrong with my approach. I'm using binary search and a sorted ArrayList to find out median at each point. Only 1st, 3rd and 10th tests pass, rest all fail with Wrong Answer.\nQuestion: http://pastebin.com/1QhbiB2U\nHere's the code:\n\n```\n/**\n * @param args\n */\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    long N = in.nextLong();\n    List<Long> list = new ArrayList<Long>();\n    for(int i=0; i<N; i++){\n        String op = in.next();\n        long number = in.nextLong();\n        performOperation(op, number, list);\n    }\n}\n\nprivate static void performOperation(String op, long number, List<Long> list) {\n    int index = Collections.binarySearch(list, number);\n    if(op.equalsIgnoreCase(\"r\")){\n        if(index < 0){\n            System.out.println(\"Wrong!\");//Doesn't exist\n            return;\n        }else{\n            list.remove(index);//Remove any one occurence\n        }\n    }else{\n        if(index < 0){\n            list.add(-index-1, number);//Add in sorted list\n        }else{\n            list.add(index, number);//Add where the same number exists, should still be sorted.\n        }\n    }\n\n    if(list.size() == 0){\n        System.out.println(\"Wrong!\");\n    }else if(list.size()%2 == 0){\n        double median = (list.get(list.size()/2) + list.get(list.size()/2 - 1))/2.0;\n        if(median == Math.ceil(median))\n            System.out.println((long)median);\n        else\n            System.out.println(median);\n    }else{\n        System.out.println(list.get((list.size()-1)/2));\n    }\n}\n```\n\n    ", "Answer": "\r\nI think problem is with output of doubles in attached program.\nI verified that program from question for input:\n\n```\n2\na 1\na 1000000000\n```\n\n\ngives:\n\n```\n1\n5.000000005E8\n```\n\n\nSuch change works for above case ( although it's not very nice ):\n\n```\nlong median = (list.get(list.size()/2) + list.get(list.size()/2 - 1));  // median is multiplied by 2\n    if(1==(median&1))\n        //odd\n    System.out.println(\"\"+(median/2)+\".5\");\nelse\n    System.out.println(median/2);\n```\n\n\nAnd note that ArrayList.add with index is O(n).\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Interviewstreet median challenge: Java\r\n                \r\nI'm trying to solve interviewstreet's median challenge. I saw a similar question posted here: interviewstreet median challenge but I want to find out what's wrong with my approach. I'm using binary search and a sorted ArrayList to find out median at each point. Only 1st, 3rd and 10th tests pass, rest all fail with Wrong Answer.\nQuestion: http://pastebin.com/1QhbiB2U\nHere's the code:\n\n```\n/**\n * @param args\n */\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    long N = in.nextLong();\n    List<Long> list = new ArrayList<Long>();\n    for(int i=0; i<N; i++){\n        String op = in.next();\n        long number = in.nextLong();\n        performOperation(op, number, list);\n    }\n}\n\nprivate static void performOperation(String op, long number, List<Long> list) {\n    int index = Collections.binarySearch(list, number);\n    if(op.equalsIgnoreCase(\"r\")){\n        if(index < 0){\n            System.out.println(\"Wrong!\");//Doesn't exist\n            return;\n        }else{\n            list.remove(index);//Remove any one occurence\n        }\n    }else{\n        if(index < 0){\n            list.add(-index-1, number);//Add in sorted list\n        }else{\n            list.add(index, number);//Add where the same number exists, should still be sorted.\n        }\n    }\n\n    if(list.size() == 0){\n        System.out.println(\"Wrong!\");\n    }else if(list.size()%2 == 0){\n        double median = (list.get(list.size()/2) + list.get(list.size()/2 - 1))/2.0;\n        if(median == Math.ceil(median))\n            System.out.println((long)median);\n        else\n            System.out.println(median);\n    }else{\n        System.out.println(list.get((list.size()-1)/2));\n    }\n}\n```\n\n    ", "Answer": "\r\nI think problem is with output of doubles in attached program.\nI verified that program from question for input:\n\n```\n2\na 1\na 1000000000\n```\n\n\ngives:\n\n```\n1\n5.000000005E8\n```\n\n\nSuch change works for above case ( although it's not very nice ):\n\n```\nlong median = (list.get(list.size()/2) + list.get(list.size()/2 - 1));  // median is multiplied by 2\n    if(1==(median&1))\n        //odd\n    System.out.println(\"\"+(median/2)+\".5\");\nelse\n    System.out.println(median/2);\n```\n\n\nAnd note that ArrayList.add with index is O(n).\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "how to calculate the median on grouped dataset?\r\n                \r\nMy dataset is as following:\n```\nsalary  number\n1500-1600   110\n1600-1700   180\n1700-1800   320\n1800-1900   460\n1900-2000   850\n2000-2100   250\n2100-2200   130\n2200-2300   70\n2300-2400   20\n2400-2500   10\n```\n\nHow can I calculate the median of this dataset? Here's what I have tried:\n```\nx <- c(110, 180, 320, 460, 850, 250, 130, 70, 20, 10)\ncolnames <- \"numbers\"\nrownames <- c(\"[1500-1600]\", \"(1600-1700]\", \"(1700-1800]\", \"(1800-1900]\", \n              \"(1900-2000]\", \"(2000,2100]\", \"(2100-2200]\", \"(2200-2300]\",\n              \"(2300-2400]\", \"(2400-2500]\")\ny <- matrix(x, nrow=length(x), dimnames=list(rownames, colnames))\ndata.frame(y, \"cumsum\"=cumsum(y))\n\n            numbers cumsum\n[1500-1600]     110    110\n(1600-1700]     180    290\n(1700-1800]     320    610\n(1800-1900]     460   1070\n(1900-2000]     850   1920\n(2000,2100]     250   2170\n(2100-2200]     130   2300\n(2200-2300]      70   2370\n(2300-2400]      20   2390\n(2400-2500]      10   2400\n```\n\nHere, you can see the half-way frequency is ```\n2400/2```\n=```\n1200```\n. It is between ```\n1070```\n and ```\n1920```\n. Thus the median class is the ```\n(1900-2000]```\n group. You can use the formula below to get this result:\n\nMedian = L + h/f (n/2 - c)\n\nwhere:\n\nL is the lower class boundary of median class\nh is the size of the median class i.e. difference between upper and lower class boundaries of median class\nf is the frequency of median class\nc is previous cumulative frequency of the median class\nn/2 is total no. of observations divided by 2 (i.e. sum f / 2)\n\nAlternatively, median class is defined by the following method:\n\nLocate n/2 in the column of cumulative frequency.\nGet the class in which this lies.\n\nAnd in code:\n```\n> 1900 + (1200 - 1070) / (1920 - 1070) * (2000 - 1900)    \n[1] 1915.294\n```\n\nNow what I want to do is to make the above expression more elegant - i.e. ```\n1900+(1200-1070)/(1920-1070)*(2000-1900)```\n. How can I achieve this?\n    ", "Answer": "\r\nSince you already know the formula, it should be easy enough to create a function to do the calculation for you.\n\nHere, I've created a basic function to get you started. The function takes four arguments:\n\n\n```\nfrequencies```\n: A vector of frequencies (\"number\" in your first example)\n```\nintervals```\n: A 2-row ```\nmatrix```\n with the same number of columns as the length of frequencies, with the first row being the lower class boundary, and the second row being the upper class boundary. Alternatively, \"```\nintervals```\n\" may be a column in your ```\ndata.frame```\n, and you may specify ```\nsep```\n (and possibly, ```\ntrim```\n) to have the function automatically create the required matrix for you.\n```\nsep```\n: The separator character in your \"```\nintervals```\n\" column in your ```\ndata.frame```\n.\n```\ntrim```\n: A regular expression of characters that need to be removed before trying to coerce to a numeric matrix. One pattern is built into the function: ```\ntrim = \"cut\"```\n. This sets the regular expression pattern to remove (, ), [, and ] from the input.\n\n\nHere's the function (with comments showing how I used your instructions to put it together):\n\n```\nGroupedMedian <- function(frequencies, intervals, sep = NULL, trim = NULL) {\n  # If \"sep\" is specified, the function will try to create the \n  #   required \"intervals\" matrix. \"trim\" removes any unwanted \n  #   characters before attempting to convert the ranges to numeric.\n  if (!is.null(sep)) {\n    if (is.null(trim)) pattern <- \"\"\n    else if (trim == \"cut\") pattern <- \"\\\\[|\\\\]|\\\\(|\\\\)\"\n    else pattern <- trim\n    intervals <- sapply(strsplit(gsub(pattern, \"\", intervals), sep), as.numeric)\n  }\n\n  Midpoints <- rowMeans(intervals)\n  cf <- cumsum(frequencies)\n  Midrow <- findInterval(max(cf)/2, cf) + 1\n  L <- intervals[1, Midrow]      # lower class boundary of median class\n  h <- diff(intervals[, Midrow]) # size of median class\n  f <- frequencies[Midrow]       # frequency of median class\n  cf2 <- cf[Midrow - 1]          # cumulative frequency class before median class\n  n_2 <- max(cf)/2               # total observations divided by 2\n\n  unname(L + (n_2 - cf2)/f * h)\n}\n```\n\n\n\n\nHere's a sample ```\ndata.frame```\n to work with:\n\n```\nmydf <- structure(list(salary = c(\"1500-1600\", \"1600-1700\", \"1700-1800\", \n    \"1800-1900\", \"1900-2000\", \"2000-2100\", \"2100-2200\", \"2200-2300\", \n    \"2300-2400\", \"2400-2500\"), number = c(110L, 180L, 320L, 460L, \n    850L, 250L, 130L, 70L, 20L, 10L)), .Names = c(\"salary\", \"number\"), \n    class = \"data.frame\", row.names = c(NA, -10L))\nmydf\n#       salary number\n# 1  1500-1600    110\n# 2  1600-1700    180\n# 3  1700-1800    320\n# 4  1800-1900    460\n# 5  1900-2000    850\n# 6  2000-2100    250\n# 7  2100-2200    130\n# 8  2200-2300     70\n# 9  2300-2400     20\n# 10 2400-2500     10\n```\n\n\n\n\nNow, we can simply do:\n\n```\nGroupedMedian(mydf$number, mydf$salary, sep = \"-\")\n# [1] 1915.294\n```\n\n\n\n\nHere's an example of the function in action on some made up data:\n\n```\nset.seed(1)\nx <- sample(100, 100, replace = TRUE)\ny <- data.frame(table(cut(x, 10)))\ny\n#           Var1 Freq\n# 1   (1.9,11.7]    8\n# 2  (11.7,21.5]    8\n# 3  (21.5,31.4]    8\n# 4  (31.4,41.2]   15\n# 5    (41.2,51]   13\n# 6    (51,60.8]    5\n# 7  (60.8,70.6]   11\n# 8  (70.6,80.5]   15\n# 9  (80.5,90.3]   11\n# 10  (90.3,100]    6\n\n### Here's GroupedMedian's output on the grouped data.frame...\nGroupedMedian(y$Freq, y$Var1, sep = \",\", trim = \"cut\")\n# [1] 49.49231\n\n### ... and the output of median on the original vector\nmedian(x)\n# [1] 49.5\n```\n\n\n\n\nBy the way, with the sample data that you provided, where I think there was a mistake in one of your ranges (all were separated by dashes except one, which was separated by a comma), since ```\nstrsplit```\n uses a regular expression by default to split on, you can use the function like this:\n\n```\nx<-c(110,180,320,460,850,250,130,70,20,10)\ncolnames<-c(\"numbers\")\nrownames<-c(\"[1500-1600]\",\"(1600-1700]\",\"(1700-1800]\",\"(1800-1900]\",\n            \"(1900-2000]\",\" (2000,2100]\",\"(2100-2200]\",\"(2200-2300]\",\n            \"(2300-2400]\",\"(2400-2500]\")\ny<-matrix(x,nrow=length(x),dimnames=list(rownames,colnames))\nGroupedMedian(y[, \"numbers\"], rownames(y), sep=\"-|,\", trim=\"cut\")\n# [1] 1915.294\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of Medians algorithm misunderstanding?\r\n                \r\nWhat I understand already\n\nI understand that median of medians algorithm(I will denote as MoM) is a high constant factor O(N) algorithm. It finds the medians of k-groups(usually 5) and uses them as the next iteration's sets to find medians of. The pivot after finding this will be between 3/10n and 7/10n of the original set, where n is the number of iterations it took to find the one median base case.\n\nI keep getting a segmentation fault when I run this code for MoM, but I'm not sure why. I've debugged it and believe that the issue lies with the fact that I'm calling ```\nmedianOfMedian(medians, 0, medians.size()-1, medians.size()/2);```\n. However, I thought that this was logically sound since we were supposed to recursively find the median by calling itself. Perhaps my base case isn't correct? In a tutorial by YogiBearian on youtube(a stanford professor, link: https://www.youtube.com/watch?v=YU1HfMiJzwg ), he did not state any extra base case to take care of the O(N/5) operation of recursion in MoM.\n\nComplete Code\n\nNote: Per suggestions, I have added a base case and used .at() function by vectors.\n\n```\nstatic const int GROUP_SIZE = 5;\n/* Helper function for m of m. This function divides the array into chunks of 5 \n * and finds the median of each group and puts it into a vector to return.\n * The last group will be sorted and the median will be found despite its uneven size.\n */\nvector<int> findMedians(vector<int>& vec, int start, int end){\n    vector<int> medians;\n    for(int i = start; i <= end; i+= GROUP_SIZE){\n        std::sort(vec.begin()+i, min(vec.begin()+i+GROUP_SIZE, vec.end()));\n        medians.push_back(vec.at(min(i + (GROUP_SIZE/2), (i + end)/2)));\n    }\n    return medians;\n}\n\n/* Job is to partition the array into chunks of 5(subject to change via const)\n * And then find the median of them. Do this recursively using select as well.\n */\nint medianOfMedian(vector<int>& vec, int start, int end, int k){\n    /* Acquire the medians of the 5-groups */\n    vector<int> medians = findMedians(vec, start, end);\n\n    /* Find the median of this */\n    int pivotVal;\n    if(medians.size() == 1)\n        pivotVal = medians.at(0);\n    else\n        pivotVal = medianOfMedian(medians, 0, medians.size()-1, medians.size()/2);\n\n    /* Stealing a page from select() ... */\n    int pivot = partitionHelper(vec, pivotVal, start, end);\n\n    cout << \"After pivoting with the value \" << pivot << \" we get : \" << endl;\n    for(int i = start; i < end; i++){\n        cout << vec.at(i) << \", \";\n    }\n    cout << \"\\n\\n\" << endl;\n    usleep(10000);\n    int length = pivot - start + 1;\n    if(k < length){\n        return medianOfMedian(vec, k, start, pivot-1);\n    }\n    else if(k == length){\n        return vec[k];\n    }\n    else{\n        return medianOfMedian(vec, k-length, pivot+1, end);\n    }\n\n}\n```\n\n\nSome extra functions for helping unit test\n\nHere are some unit tests that I wrote for these 2 functions. Hopefully they help.\n\n```\nvector<int> initialize(int size, int mod){\n    int arr[size];\n    for(int i = 0; i < size; i++){\n    arr[i] = rand() % mod;\n    }\n    vector<int> vec(arr, arr+size);\n    return vec;\n}\n\n/* Unit test for findMedians */\nvoid testFindMedians(){\n    const int SIZE = 36;\n    const int MOD = 20;\n    vector<int> vec = initialize(SIZE, MOD);\n    for(int i = 0; i < SIZE; i++){\n        cout << vec[i] << \", \";\n    }\n    cout << \"\\n\\n\" << endl;\n\n    vector<int> medians = findMedians(vec, 0, SIZE-1);\n\n    cout << \"The 5-sorted version: \" << endl;\n    for(int i = 0; i < SIZE; i++){\n        cout << vec[i] << \", \";\n    }\n    cout << \"\\n\\n\" << endl;\n\n    cout << \"The medians extracted: \" << endl;\n    for(int i = 0; i < medians.size(); i++){\n        cout << medians[i] << \", \";\n    }\n    cout << \"\\n\\n\" << endl;\n}\n\n/* Unit test for medianOfMedian */\nvoid testMedianOfMedian(){\n    const int SIZE = 30;\n    const int MOD = 70;\n    vector<int> vec = initialize(SIZE, MOD);\n    cout << \"Given array : \" << endl;\n    for(int i = 0; i < SIZE; i++){\n        cout << vec[i] << \", \";\n    }\n    cout << \"\\n\\n\" << endl;\n    int median = medianOfMedian(vec, 0, vec.size()-1, vec.size()/2); \n    cout << \"\\n\\nThe median is : \" << median << endl;\n\n    cout << \"As opposed to sorting and then showing the median... : \" << endl;\n    std::sort(vec.begin(), vec.end());\n    cout << \"sorted array : \" << endl;\n    for(int i = 0; i < SIZE; i++){\n        if(i == SIZE/2)\n            cout << \"**\";\n        cout << vec[i] << \", \";\n    }\n    cout << \"Median : \" << vec[SIZE/2] << endl;\n}\n```\n\n\nExtra section about the output that I'm getting\n\n```\nGiven array :\n7, 49, 23, 48, 20, 62, 44, 8, 43, 29, 20, 65, 42, 62, 7, 33, 37, 39, 60, 52, 53, 19, 29, 7, 50, 3, 69, 58, 56, 65,\n\nAfter pivoting with the value 5 we get :\n23, 29, 39, 42, 43,\n\nAfter pivoting with the value 0 we get :\n39,\n\nSegmentation Fault: 11\n```\n\n\nIt seems all right and dandy until the segmentation fault. I'm confident that my partition function works as well(was one of the implementations for the leetcode question).\n\nDisclaimer: This is not a homework problem, but rather my own curiosity about the algorithm after I used quickSelect in a leetcode problem set.\n\nPlease let me know if my question proposed requires more elaboration for MVCE, thanks!\n\nEDIT: I figured out that the recursion partition scheme is wrong in my code. As Pradhan has pointed out - I somehow have empty vectors which lead to the start and end being 0 and -1 respectively, causing me to have segmentation fault from an infinite loop of calling it. Still trying to figure this part out. \n    ", "Answer": "\r\n```\nMoM```\n always calls itself (to compute ```\npivot```\n), and thus exhibits infinite recursion.  This violates the \"prime directive\" of recursive algorithms: at some point, the problem is \"small\" enough to not need a recursive call.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "R How to take Median of Rows in Dataframe\r\n                \r\nI am wondering if there is any way to a median of the rows in a data frame. I understand the function rowmeans exists, but I do not believe there is a row median function. I would like to store the results in a new column in the dataframe. Here is my example\n\nI tried to look online. There was one mention of row medians, but I could not find the function in R.\n\n```\n C1<-c(3,2,4,4,5)\n   C2<-c(3,7,3,4,5)\n   C3<-c(5,4,3,6,3)\n   DF <- data.frame(ID=c(\"A\",\"B\",\"C\",\"D\",\"E\"),C1=C1,C2=C2,C3=C3)\n\n   DF \n\n\n  # This is as far as I have gotten, but not streamlined\n\n  MA <- median(C(3, 3, 5). na.rm = T)   # A\n  MB <- median(C(2, 7, 4). na.rm = T)   # B\n  MC <- median(C(4, 3, 3). na.rm = T)   # C\n  MD <- median(C(4, 4, 6). na.rm = T)   # 4\n  ME <- median(C(5, 5, 3). na.rm = T)   # E\n\n  CM <- c(MA, MB, MC, MD, ME)C1<-c(3,2,4,4,5)\n\n\n   ID C1 C2 C3\n  1  A  3  3  5\n  2  B  2  7  4\n  3  C  4  3  3\n  4  D  4  4  6\n  5  E  5  5  3\n\n   ID C1 C2 C3  CM\n  1  A  3  3  5\n  2  B  2  7  4\n  3  C  4  3  3\n  4  D  4  4  6\n  5  E  5  5  3\n```\n\n\nIs there anyway I can streamline the process so it would be like DF$CM <- median(...\n    ", "Answer": "\r\nTo calculate the median of ```\ndf```\n, you can do the following\n```\ndf$median = apply(df, 1, median, na.rm=T)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Student t.test for the median (not the mean)\r\n                \r\nI have a dataframe containing a column of salaries. I would like to calculate the confidence interval at 97% around the median value.\nt.test calculates the mean value not the median.\nDo you know how I could perform this?\nthis is the output of t.test on my column:\n```\nt.test(Salary)\nOne Sample t-test\ndata:  Salary\nt = 26.131, df = 93, p-value < 2.2e-16\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n37235.65 43360.56\nsample estimates:\nmean of x \n40298.1 \n```\n\nAlthough the median is:\n```\nmedian(na.omit(Salary))\n[1] 36000\n```\n\nThanks\n    ", "Answer": "\r\nIf your data are paired you can do a simple sign test, which is essentially a binomial test. You see how many of the pairs where the sample from one population is larger than the other, and do a test on the success/failure rate.\n\n```\nset.seed(1)\n\nx2 <- runif(30, 0.5, 2)^2\ny2 <- runif(30, 0.5, 2)^2 + 0.5\n\nbino <- x2 < y2\n\nbinom.test(sum(bino), length(bino), conf.level=0.97)\n```\n\n\nIf your data isn't paired you can perform a Mann-Whitney test, this is a test on ranks. You see how many samples from one population are larger than how many samples in the other population, and the reverse.\n\n```\nx <- c(80, 83, 189, 104, 145, 138, 191, 164, 73, 146, 124, 181)*1000\ny <- c(115, 88, 90, 74, 121, 133, 97, 101, 81)*1000\n\nwilcox.test(x, y, conf.int=TRUE, conf.level=0.97)\n```\n\n\nThere's also a paired variant of the Mann-Whitney test called the Wilcoxon signed rank test, which can be an alternative to the simple sign test.\n\n```\nwilcox.test(x2, y2, paired=TRUE, conf.int=TRUE, conf.level=0.97)\n```\n\n\nWilcoxon assumes symmetry around the median, the simple sign test doesn't. Something to keep in mind. Also if you want to interpret the Mann-Whitney test as a difference in medians you'll have to assume that the two populations have the same shape, and only the location has been shifted.\n\n\n\nA radically different approach would be to bootstrap the difference in medians.\nA naïve implementation:\n\n```\nset.seed(1)\nrr <- replicate(\n  1e3, \n  median(sample(x, length(x), replace=TRUE)) -\n  median(sample(y, length(y), replace=TRUE))\n)\n\nrr <- jitter(rr, 50)\nplot(density(rr))\nqu <- quantile(rr, probs=c((1-0.97)/2, 1 - (1-0.97)/2))\nabline(v=qu, col=\"blue\")\n```\n\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Generalizing the median of medians algorithm\r\n                \r\nI am asked to find the run time of the general form of the median of medians algorithm for groups of size g. It seems from common examples ```\ng=3,5,7```\n with ```\nT(n)=T(n/5)+T(2n/3)+cn```\n, ```\nT(n)=T(n/5)+T(7n/10)+cn```\n, and ```\nT(n)=T(n/7)+T(5n/7)+cn```\n, respectively, that the general for an odd number would be ```\nT(n)=T(n/g)+T(1-(n/(2g)*(g+1)/2))+cn```\n.\nHowever, I am struggling with what to use as median for an even number g where the median will exist between two elements and not actually in the set itself. I am told that I can ignore floors and ceilings. Intuition tells me it should simply be ```\nT(n)=T(n/g)+T(1-(n/(2g)*(g)/2))+cn```\n, but I can't help but feel that I'm missing something.\nCan anyone give advice on how the algorithm might work with groups of even numbers? I think I should be able to find the run time once I understand the algorithm.\n    ", "Answer": "\r\nYour analysis is correct; when g is even, you can express the run-time as T(n) = T(n/g) + T(3n/4) + cn, which is your expression simplified; the inductive proof that this is O(n) whenever g > 4 is the same regardless of whether g is even or odd.\nTo see why this equation is true, it's easiest to think about how the expression for T(n) with odd g is derived. We can assume that our input list A has no duplicate elements, without loss of generality (by either slightly modifying the algorithm, or by replacing every element A[i] with the tuple (A[i], i) and using lexicographic comparisons). This makes the analysis much easier.\nNow, Median-of-Medians Quickselect's run-time is based on the three things it does:\n\nCall itself recursively on the 'medians' list of size ```\nceil(n/g)```\n to find the median-of-medians ```\nM```\n\n```\ncn```\n work to group items, partition the list around ```\nM```\n, and find the median of each small group-of-g, and\nCall itself recursively on either the partition with all elements less than ```\nM```\n, the partition with all elements greater than ```\nM```\n, or immediately return.\n\nIgnoring the ceil and an additive ```\nO(1)```\n constant, this gives ```\nT(n) = T(n/g) + T(New Partition Size) + cn```\n. What's the largest the New Partition Size can be? It's ```\nmax(# elements less than M, # elements greater than M)```\n.\nWhen ```\ng```\n was odd, we had that half of the ```\nn/g```\n groups had medians less than ```\nM```\n (so ```\n(g-1)/2```\n, plus ```\n1```\n for the median, elements in that group are less than ```\nM```\n), and half had medians greater than ```\nM```\n (again, giving ```\n(g+1)/2```\n 'greater than ```\nM```\n' elements for each such group).\nSince you're defining median of an even list as the arithmetic mean of the two middle elements, this gets even simpler: half of the ```\nn/g```\n groups have medians less than ```\nM```\n, and exactly half the elements of each such group is less than its median and thus less than ```\nM```\n; the same logic works for greater than. This means we have eliminated at least (```\nhalf of n/g times g/2```\n), or ```\nn/4```\n elements, leaving us with ```\n3n/4```\n as the maximum New Partition Size and ```\nT(n) = T(n/g) + T(3n/4) + cn```\n.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "number of comparisons median quicksort\r\n                \r\nHow do I compute number of comparisons in median quick sort? Where must I increment my counter to compute this? My code of median quick sort below:\n\n```\nvoid my_swap(vector<int>&vect, int dex1, int dex2) {\n   int temp = vect[dex1];\n   vect[dex1] = vect[dex2];\n   vect[dex2] = temp;\n}\nint find_median(vector<int>&vect, int p, int r) {\n   int center = (p + r) / 2;\n   if (vect[p] > vect[center])\n      my_swap(vect, p, center);\n   if (vect[p] > vect[r])\n      my_swap(vect, p, r);\n   if (vect[center] > vect[r])\n      my_swap(vect, center, r);\n   my_swap(vect, center, r - 1);\n   return vect[r - 1];\n}\nvoid standart_sort(vector<int>&vect, int p, int r) {\n   if (r - p + 1 <= 1){\n      return;\n   }\n   if (r - p + 1 == 2) {\n      if (vect[p] > vect[r]){\n         my_swap(vect, p, r);\n      }\n      return;\n   } else {\n      if (vect[p] > vect[r - 1]){\n         my_swap(vect, p, r - 1);\n      }\n      if (vect[p] > vect[r]){\n         my_swap(vect, p, r);\n      }\n      if (vect[r - 1] > vect[r]){\n         my_swap(vect, r - 1, r);\n      }\n   }\n}\nint partition_for_median(vector<int>&vect, int p, int r, double pivot) {\n   double x = pivot;\n   int i = p - 1;\n   for(int j = p; j <= r - 1; j++)\n   {\n      counter++; //pasted here\n      if(vect[j] <= x)\n      {\n         i++;\n         my_swap(vect, i, j);\n      }\n   }\n   my_swap(vect, i + 1, r);\n   return i; \n}\nvoid quick_sort_median(vector<int>&vect, int p, int r) {\n   if (r - p + 1 <= 3){\n      counter2++;\n      standart_sort(vect, p, r);\n   }\n   else {\n      double median = find_median(vect, p, r);\n      int partition = partition_for_median(vect, p, r, median);\n      quick_sort_median(vect, p, partition - 1);\n      quick_sort_median(vect, partition + 1, r);\n   }\n}\n```\n\n\nFor example in this array ```\n{3,7,5,1,9,6,4,10,8,2}```\n there are ```\n25```\n comparisons, but how do I calculate that?\n    ", "Answer": "\r\nYou could use a custom comparison function that does the usual integer comparison but also increment a global counter. A similar idea is to wrap int in a custom class with its own comparison function doing something similar. The class would have a static counter.\n\nA more hackish way is to do the instrumentation directly in your code. Find every place in your code where a comparison happens and increment a counter.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding the median value of a random array [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                Closed 10 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\n\n  Possible Duplicate:\n  Finding the median value of an array?\n  How to calculate mean, median, mode and range from a set of numbers\n  Combine QuickSort and Median selection algorithm  \n\n\n\n\nHow can I find the median values of a randomly generated array? \n\nFor Example: It would give me an array like 88,23,93,65,22,43 . \n             The code I'm using finds the middle number but it's not sorted.\n\nHere is the code I'm using so far:\n\n```\ndouble Median()\n{\n    int Middle = TheArrayAssingment.length / 2;\n       if (TheArrayAssingment.length%2 == 1)\n        {\n           return TheArrayAssingment[Middle];\n        }\n    else {\n        return (TheArrayAssingment[Middle-1] + TheArrayAssingment[Middle]) / 2.0;\n    }\n}\n```\n\n    ", "Answer": "\r\nYour code looks good but it assumes the array is sorted. Just sort it:\n\n```\nArrays.sort(TheArrayAssignment);\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Display median / mean\r\n                \r\nI'm new to Stata and have been through the help files and did some searches but I can't find what I'm looking for. I want to see the median of a variable I created by each group without having to list the detail.\n\nI have a binary variable with values 1 or 0 called ```\ngroupbyvar```\n and the variable I want the median for ```\nvar1```\n\n\nmy code:\n\n```\nbysort groupbyvar: egen median_var1 = median(var1)\n```\n\n\nThis works but now I want to see two values one for ```\ngroupbyvar = 0```\n and one for ```\ngroupbyvar = 1```\n respectively. How do I achieve this?\n\nIf I use ```\nlist groupbyvar median_var1```\n I get what I want but I have to go through all the data and if I use ```\ndisplay median_var1```\n I only see the value for one of the groupbyvar's values\n    ", "Answer": "\r\nGiven what you have done, this would give a minimal display \n\n```\ntabdisp bygroupvar, c(median_var1) \n```\n\n\nand indeed if all you want is a display, there is no need to create a variable first. \n\nHere is a reproducible example \n\n```\n. sysuse auto, clear\n\n. tabstat mpg, s(median) by(foreign)\n\nSummary for variables: mpg\n     by categories of: foreign (Car type)\n\n foreign |       p50\n---------+----------\nDomestic |        19\n Foreign |      24.5\n---------+----------\n   Total |        20\n--------------------\n```\n\n\nand study of the help for ```\ntabstat```\n would show the scope for looking at single summary statistics, as you request, and at several. \n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median function in MDX (Pentaho Mondrian)\r\n                \r\nI am trying to implement the Median function in MDX. In particular I want to calculate the median of the measure \"Amount\" for every member of the dimension \"Region\". For this, I first wrote the following MDX query: \n\n```\nwith member [measures].[X] as median([Regions].members, [measures].[Amount])\nselect {[Regions].members} on rows, \n       {[measures].[X]} on columns\nfrom [product]\n```\n\n\nHowever the above query will calculate the average \"Amount\" for every member of \"Region\" and then return the median of these (average) values.\n\nTo fix the issue I rewrote the above query using a \"Productid\" dimension that assigns a unique id to each product of the cube: \n\n```\nwith member [measures].[X] as median([productid].members, [measures].[Amount])\nselect {[Regions].members} on rows, \n       {[measures].[X]} on columns\nfrom [product]\n```\n\n\nThe above query correctly returned the median \"Amount\" values for every member of \"Region\". The problem is that the query seems to be computationally expensive and it hangs. I was wondering if there is a more elegant solution to the problem.\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to find median in sql\r\n                \r\nI have the following sql query which gives me the total h_time grouped by month, week and day. Instead I want the median h_time for month, week and day. How do I do that in Oracle SQL?\n\n```\n SELECT DAY,\n\nMEDIAN(H_TIME) AS HANDLE_TIME\n\nFROM(\n    select \nMONTH, WEEK, DAY,\n\n    CASE \n        WHEN C.JOINED IS NOT NULL\n            THEN (NVL(C.TOTAL_TALK,0) + NVL(C.TOTAL_HOLD,0) + (NVL((C.DATETIME - C.START_DATETIME)*86400,0)) )/86400 \n            ELSE 0 END AS H_TIME\n\nfrom TABLE1 C\n\n\nLEFT JOIN TABLE2 S\nON S.ID = C.ID\nwhere c.direct = 'Inbound'\n)\n\nwhere UPPER(ITEM1) like 'SOMETHING%' \n\nGROUP BY\n\n\nDAY\n```\n\n\nOUTPUT:\n\n```\nDAY              HANDLE_TIME\n14-APR-17   .00567129629629629629629629629629629629629\n15-APR-17   0\n17-APR-17   0\n17-APR-17   .00422453703703703703703703703703703703703\n19-APR-17   .00269675925925925925925925925925925925925\n19-APR-17   0\n19-APR-17   0\n19-APR-17   .00824074074074074074074074074074074074074\n```\n\n    ", "Answer": "\r\nTry replacing :\n\n```\nSUM(H_TIME) AS HANDLE_TIME\n```\n\n\nby :\n\n```\nMEDIAN(H_TIME) AS HANDLE_TIME\n```\n\n\n(line 3)\n\n\nEDIT:\nFor the months, replace:\n\n```\nselect \nMONTH, WEEK, DAY,\n```\n\n\nBy:\n\n```\nselect \nMONTH,\n```\n\n\nAnd:\n\n```\nGROUP BY\n\nMONTH\n,WEEK\n,DAY\n```\n\n\nBy:\n\n```\nGROUP BY \nMONTH\n```\n\n\n\n\nFor the weeks, replace:\n\n```\nselect \nMONTH, WEEK, DAY,\n```\n\n\nBy:\n\n```\nselect \nMONTH, WEEK,\n```\n\n\nAnd:\n\n```\nGROUP BY\n\nMONTH\n,WEEK\n,DAY\n```\n\n\nBy:\n\n```\nGROUP BY \nMONTH\n,WEEK\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median with various criteria\r\n                \r\nhere's my problem: I need to calculate the median from the following table:\n```\nV1  V2  Total\nA   0   0\nB   2   10\nC   2   12\nD   2   19\nE   2   22\nA   2   4\nB   1   12\nD   1   0\nC   2   8\nA   0   10\nD   1   15\nA   2   12\nB   2   10\nE   1   16\n```\n\nCriteria are as follows:\n\n'B', 'C', and 'D' from column V1\nnot zero from column Total\ncalculate median from column Total\n\nUntil now, the formula works perfectly:\n```\n=MEDIAN(IF(B2:B15={\"B\",\"C\",\"D\"},IF(NOT(D2:D15=\"0\"),D2:D15)))\n```\n\nAnd now comes the hard part. It has to include another criteria, which is:\n\n'A' from column V1 only if not 0 in column V2\n\nI have no idea how to embed it in the code above, because it gives me various types of errors, depending on what I try.\n    ", "Answer": "\r\nAn idea using Microsoft365:\n\nFormula in ```\nE2```\n:\n```\n=MEDIAN(FILTER(C2:C15,(ISNUMBER(FIND(A2:A15,\"BCD\")))*(C2:C15<>0)+(A2:A15=\"A\")*(B2:B15<>0)))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Quickselect using a median-of-median-of-three partitioning\r\n                \r\nWhat is the asymptotic running time of quickselect, using a median-of-median-of-three partitioning strategy? I feel that it should be the same as normal quick select and quicksort except the fact that the worst case gets mitigated significanlty. Am i right or is there more to it?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Implementing Geometric Median\r\n                \r\nWhen I google for Geometric median, I got this link Geometric median\nbut I have no clue how to implement it in C . I am not very good at understanding this Mathematical Explanation. Lets Say I have 11 pair of co-ordinates how will I calculate the geometric median for the same.\n\nI am trying to solve this problem Grid CIty. I was given a Hint that geometric median will help me achieve it. I am not looking for a final solution. If someone can guide me to a right path that would help.\n\nThanks is Advance\n\nBelow is the list of co-ordinates a (test case). result : 3 4\n\n\n1 2\n1 7\n2 2\n2 3\n2 5\n3 4\n4 2\n4 5\n4 6\n5 3\n6 5\n\n    ", "Answer": "\r\nI don't think this is solvable without an iterative algorithm.\n\nHere is a pseudocode solution similar to the hill-climbing version, except that it works to arbitrary accuracy, and in higher dimensions.\n\n```\nCurrentPoint = Mean(Points)\nWhile (CurrentPoint - PreviousPoint) Length > 0.01 Do\n    For Each Point in Points Do\n        Vector = CurrentPoint - Point\n        Vector Length = Vector Length - 1.0\n        Point2 = Point + Vector\n        Add Point2 To Points2\n    Loop\n    PreviousPoint = CurrentPoint\n    CurrentPoint = Mean(Points2)\nLoop\n```\n\n\nNotes:\n\nThe constant 0.01 does not guarantee the result to be within 0.01 of the true value. Use smaller values for better precision.\n\nThe constant 1.0 should be adjusted to (I'm guessing) about 1/5 the distance between the furthest points. Too small values will slow down the algorithm, but too large values will cause inaccuracies probably leading an to infinite loop.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "AttributeError: 'numpy.ndarray' object has no attribute 'median'\r\n                \r\nI can perform a number of statistics on a numpy array but \"median\" returns an attribute error.  When I do a \"dir(np)\" I do see the median method listed.\n\n```\n(newpy2) 7831c1c083a2:src scaldara$ python\nPython 2.7.12 |Continuum Analytics, Inc.| (default, Jul  2 2016,   17:43:17) \n[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)] on     darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nAnaconda is brought to you by Continuum Analytics.\nPlease check out: http://continuum.io/thanks and https://anaconda.org\n\n>>> import numpy as np\n>>> print(np.version.version)\n1.11.2\n>>> a = np.array([1,2,3,4,5,6,7,8,9,10])\n>>> print(a)\n[ 1  2  3  4  5  6  7  8  9 10]\n>>> print(a.min())\n1\n>>> print(a.max())\n10\n>>> print(a.mean())\n5.5\n>>> print(a.std())\n2.87228132327\n>>> print(a.median())\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'numpy.ndarray' object has no attribute 'median'\n>>> \n```\n\n    ", "Answer": "\r\nAlthough ```\nnumpy.ndarray```\n has a ```\nmean```\n, ```\nmax```\n, ```\nstd```\n etc. method, it does not have a ```\nmedian```\n method. For a list of all methods available for an ```\nndarray```\n, see the ```\nnumpy```\n documentation for ```\nndarray```\n.\n\nIt is available as a function that takes the array as an argument:\n\n```\n>>> import numpy as np\n>>> a = np.array([1,2,3,4,5,6,7,8,9,10])\n>>> np.median(a)\n5.5\n```\n\n\nAs you will see in the documentation for ```\nndarray.mean```\n, ```\nndarray.mean```\n and ```\nnp.mean```\n are \"equivalent functions,\" so this is just a matter of semantics.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Display median / mean\r\n                \r\nI'm new to Stata and have been through the help files and did some searches but I can't find what I'm looking for. I want to see the median of a variable I created by each group without having to list the detail.\n\nI have a binary variable with values 1 or 0 called ```\ngroupbyvar```\n and the variable I want the median for ```\nvar1```\n\n\nmy code:\n\n```\nbysort groupbyvar: egen median_var1 = median(var1)\n```\n\n\nThis works but now I want to see two values one for ```\ngroupbyvar = 0```\n and one for ```\ngroupbyvar = 1```\n respectively. How do I achieve this?\n\nIf I use ```\nlist groupbyvar median_var1```\n I get what I want but I have to go through all the data and if I use ```\ndisplay median_var1```\n I only see the value for one of the groupbyvar's values\n    ", "Answer": "\r\nGiven what you have done, this would give a minimal display \n\n```\ntabdisp bygroupvar, c(median_var1) \n```\n\n\nand indeed if all you want is a display, there is no need to create a variable first. \n\nHere is a reproducible example \n\n```\n. sysuse auto, clear\n\n. tabstat mpg, s(median) by(foreign)\n\nSummary for variables: mpg\n     by categories of: foreign (Car type)\n\n foreign |       p50\n---------+----------\nDomestic |        19\n Foreign |      24.5\n---------+----------\n   Total |        20\n--------------------\n```\n\n\nand study of the help for ```\ntabstat```\n would show the scope for looking at single summary statistics, as you request, and at several. \n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to find median in sql\r\n                \r\nI have the following sql query which gives me the total h_time grouped by month, week and day. Instead I want the median h_time for month, week and day. How do I do that in Oracle SQL?\n\n```\n SELECT DAY,\n\nMEDIAN(H_TIME) AS HANDLE_TIME\n\nFROM(\n    select \nMONTH, WEEK, DAY,\n\n    CASE \n        WHEN C.JOINED IS NOT NULL\n            THEN (NVL(C.TOTAL_TALK,0) + NVL(C.TOTAL_HOLD,0) + (NVL((C.DATETIME - C.START_DATETIME)*86400,0)) )/86400 \n            ELSE 0 END AS H_TIME\n\nfrom TABLE1 C\n\n\nLEFT JOIN TABLE2 S\nON S.ID = C.ID\nwhere c.direct = 'Inbound'\n)\n\nwhere UPPER(ITEM1) like 'SOMETHING%' \n\nGROUP BY\n\n\nDAY\n```\n\n\nOUTPUT:\n\n```\nDAY              HANDLE_TIME\n14-APR-17   .00567129629629629629629629629629629629629\n15-APR-17   0\n17-APR-17   0\n17-APR-17   .00422453703703703703703703703703703703703\n19-APR-17   .00269675925925925925925925925925925925925\n19-APR-17   0\n19-APR-17   0\n19-APR-17   .00824074074074074074074074074074074074074\n```\n\n    ", "Answer": "\r\nTry replacing :\n\n```\nSUM(H_TIME) AS HANDLE_TIME\n```\n\n\nby :\n\n```\nMEDIAN(H_TIME) AS HANDLE_TIME\n```\n\n\n(line 3)\n\n\nEDIT:\nFor the months, replace:\n\n```\nselect \nMONTH, WEEK, DAY,\n```\n\n\nBy:\n\n```\nselect \nMONTH,\n```\n\n\nAnd:\n\n```\nGROUP BY\n\nMONTH\n,WEEK\n,DAY\n```\n\n\nBy:\n\n```\nGROUP BY \nMONTH\n```\n\n\n\n\nFor the weeks, replace:\n\n```\nselect \nMONTH, WEEK, DAY,\n```\n\n\nBy:\n\n```\nselect \nMONTH, WEEK,\n```\n\n\nAnd:\n\n```\nGROUP BY\n\nMONTH\n,WEEK\n,DAY\n```\n\n\nBy:\n\n```\nGROUP BY \nMONTH\n,WEEK\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Multiple Count and Median Values from a Dataframe\r\n                \r\nI am trying to perform several operations in one program at same time. \nI have a data-frame that has ```\nDates```\n of which I have no clue of start and end and I want to find:\n\n\nTotal number of days the data-set has \nTotal number of hours \nMedian of the Count \nWrite a separate output for median per day/date.\nIf possible Median-of-Median in most possible simple way.  \n\n\nInput: Few rows from the a large file of GB size \n\n```\n2004-01-05,16:00:00,17:00:00,Mon,10766,656\n2004-01-05,17:00:00,18:00:00,Mon,12223,670\n2004-01-05,18:00:00,19:00:00,Mon,12646,710\n2004-01-05,19:00:00,20:00:00,Mon,19269,778\n2004-01-05,20:00:00,21:00:00,Mon,20504,792\n2004-01-05,21:00:00,22:00:00,Mon,16553,783\n2004-01-05,22:00:00,23:00:00,Mon,18944,790\n2004-01-05,23:00:00,00:00:00,Mon,17534,750\n2004-01-06,00:00:00,01:00:00,Tue,17262,747\n2004-01-06,01:00:00,02:00:00,Tue,19072,777\n2004-01-06,02:00:00,03:00:00,Tue,18275,785\n2004-01-06,03:00:00,04:00:00,Tue,13589,757\n2004-01-06,04:00:00,05:00:00,Tue,16053,735\n```\n\n\nThe start and end date are NOT known. \n\nEdit: \nExpected Output:1 will have only one row of results\n\n```\ndays,hours,median,median-of-median\n2,17262,13,17398\n```\n\n\nMedian-of-Median is the median value of ```\nmedian```\n column from output 2\n\nExpected Output:2, will have medians of every date which are to used to find median-of-median\n\n```\ndate,median\n2004-01-05,17534\n2004-01-06,17262\n```\n\n\nCode:\n\n```\nimport pandas as pd \nfrom datetime import datetime\n\ndf = pd.read_csv('one_hour.csv')\ndf.columns = ['date', 'startTime', 'endTime', 'day', 'count', 'unique']\n\ndate_count = df.count(['date'])\nall_median = df.median(['count'])\nall_hours = df.count(['startTime'])\nmed_med = df.groupby(['date','count']).median()\n\nprint date_count\nprint all_median\nprint all_hours\n\nstats = ['date_count', 'all_median', 'all_hours', 'median-of-median']\nstats.to_csv('stats_all.csv', index=False)\n\nmed_med.to_csv('med_day.csv', index=False, header=False)\n```\n\n\nObviously the code does not give the result as it is supposed to. \n\nThe error is shown below. \n\nError:\n\n```\nTraceback (most recent call last):\n  File \"day_median.py\", line 8, in <module>\n    all_median = df.median(['count'])\n  File \"/usr/local/lib/python2.7/dist-packages/pandas/core/generic.py\", line 5310, in stat_func\n    numeric_only=numeric_only)\n  File \"/usr/local/lib/python2.7/dist-packages/pandas/core/frame.py\", line 4760, in _reduce\n    axis = self._get_axis_number(axis)\n  File \"/usr/local/lib/python2.7/dist-packages/pandas/core/generic.py\", line 308, in _get_axis_number\n    axis = self._AXIS_ALIASES.get(axis, axis)\nTypeError: unhashable type: 'list'\n```\n\n    ", "Answer": "\r\nIIUC maybe help change:\n\n```\ndate_count = df.count(['date'])\nall_median = df.median(['count'])\nall_hours = df.count(['startTime'])\n```\n\n\nto:    \n\n```\ndate_count = df['date'].count()\nall_median = df['count'].median()\nall_hours = df['startTime'].count()\n\nprint (date_count)\nprint (all_median)\nprint (all_hours)\n13\n17262.0\n13\n```\n\n\nif need count statistics from columns ```\ndate```\n, ```\ncount```\n and ```\nstartTime```\n.\n\nEDIT by comment:\n\nIf need count unique values of column use ```\nnunique```\n:\n\n```\ndate_count = df['date'].nunique()\nprint (date_count)\n2\n```\n\n\nDataFrame ```\nstats```\n:\n\n```\ncols = ['date_count', 'all_median', 'all_hours']\nstats = pd.DataFrame([[date_count, all_median, all_hours]], columns = cols)\nprint (stats)\n   date_count  all_median  all_hours\n0           2     17262.0         13\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Quickselect using a median-of-median-of-three partitioning\r\n                \r\nWhat is the asymptotic running time of quickselect, using a median-of-median-of-three partitioning strategy? I feel that it should be the same as normal quick select and quicksort except the fact that the worst case gets mitigated significanlty. Am i right or is there more to it?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find a median in parallel\r\n                \r\nIf you have one huge amount of numbers and one hundred computers,\nHow would you find the median of the numbers? \n    ", "Answer": "\r\nUse selection algorithm.\n\nSplit the array of number to 100 partitions.\nEach processor should use the general pivot to split the array to two groups (left/right)\nThen each processor should send the size of those 2 groups to the leader\nThe leader should calculate which group is smaller and broadcast a message to get rid of one of those groups.\nGo back to step 2 until you find the median\n\nthis solution has an avg runtime of O(n)\nin order to make it asymptotic runtime of O(n), each processor should split the numbers to groups of 5 elements find the median of each group\n(using insertion sort) and send those medians back to the leader, the leader will choose the median of those medians (using the same algorithm) and that\nwill be the pivot\nread the wiki article - http://en.wikipedia.org/wiki/Selection_algorithm\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median : need numeric data\r\n                \r\nWhy regular subsetting might not work? I wanted to calculate median from a data.table:\n\n```\n    > median(DT.UsersA3[,1])\nError in median.default(DT.UsersA3[, 1]) : need numeric data\n```\n\n\nit is numeric though:\n\n```\n> class(DT.UsersA3$Timedif)\n[1] \"numeric\"\n```\n\n\nWith iris data frame it works:\n\n```\n> median(iris[,3])\n[1] 4.35\n```\n\n\nAnd lexical subsetting also works...\n\n```\n> median(DT.UsersA3$Timedif)\n[1] 422.046\n```\n\n    ", "Answer": "\r\nHere is the example with ```\niris```\n:\n\n```\nlibrary(data.table)\nIris <- data.table(iris)\nmedian(Iris[,1])\n# Error in median.default(Iris[, 1]) : need numeric data\nIris[,1] # is a data.table\nIris[,Sepal.Length] # is a vector\n```\n\n\nTo use the number of the column you can follow the comment from Dason:\n\n```\nIris[[1]] # would return a vector \nmedian(Iris[[1]]) # works\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to extract median value?\r\n                \r\nI need to get median value in column \"median\". Any ideas, please?\n\n```\nSELECT\nMIN(score) min, CAST(AVG(score) AS float) median, MAX(score) max\nFROM result JOIN student ON student.id = result.student_id\n```\n\n    ", "Answer": "\r\nI think the simplest method is ```\nPERCENTILE_CONT()```\n or ```\nPERCENTILE_DISC()```\n:\n\n```\nSELECT MIN(score) as min_score,\n       PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY score) as median_score,\n       MAX(score) max_score\nFROM result r JOIN\n     student s\n     ON s.id = r.student_id;\n```\n\n\nThis assumes (reasonably) that ```\nscore```\n is numeric.\n\nThe difference between ```\nPERCENTILE_CONT()```\n and ```\nPERCENTILE_DISC()```\n is what happens when there are an even number of values.  That is usually an unimportant consideration, unless you have a small amount of data.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median Filter with Python and OpenCV\r\n                \r\nI try make python program for do median filter. I got this article http://www.programming-techniques.com/2013/02/median-filter-using-c-and-opencv-image.html , so I try to translate that code to python code.\n\nthis the code in python\n\n```\nfrom cv2 import * #Import functions from OpenCV\nimport cv2\n\nif __name__ == '__main__':\n    source = cv2.imread(\"Medianfilterp.png\", CV_LOAD_IMAGE_GRAYSCALE)\n    final = source[:]\n    for y in range(len(source)):\n        for x in range(y):\n            final[y,x]=source[y,x]\n\n    members=[source[0,0]]*9\n    for y in range(1,len(source)-1):\n        for x in range(1,y-1):\n            members[0] = source[y-1,x-1]\n            members[1] = source[y,x-1]\n            members[2] = source[y+1,x-1]\n            members[3] = source[y-1,x]\n            members[4] = source[y,x]\n            members[5] = source[y+1,x]\n            members[6] = source[y-1,x+1]\n            members[7] = source[y,x+1]\n            members[8] = source[y+1,x+1]\n\n            members.sort()\n            final[y,x]=members[4]\n\n    cv.NamedWindow('Source_Picture', cv.CV_WINDOW_AUTOSIZE)\n    cv.NamedWindow('Final_Picture', cv.CV_WINDOW_AUTOSIZE)\n    cv2.imshow('Source_Picture', source) #Show the image\n    cv2.imshow('Final_Picture', final) #Show the image\n    cv2.waitKey()\n```\n\n\nThis is a picture before the median filter:\n\n\nbut I got strange results, the results of the program :\n\n    ", "Answer": "\r\nFirst, I recommend that you not re-invent the wheel. OpenCV already contains a method to perform median filtering:\n\n```\nfinal = cv2.medianBlur(source, 3)\n```\n\n\nThat said, the problem with your implementation lies in your iteration bounds. Your ```\ny```\n range is correct. However, ```\nfor x in range(1,y-1):```\n only iterates up to the current ```\ny```\n value, and not the entire ```\nx```\n range of the image. This explains why the filter is only applied to a triangular region in the lower-left of the image. You can use the ```\nshape```\n field of the image (which is really just a numpy array) to get the image dimensions, which can then be iterated over:\n\n```\nfor y in range(1,source.shape[0]-1):\n    for x in range(1,source.shape[1]-1):\n```\n\n\nThis will apply the filter to the entire image:\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "SQL finding median\r\n                \r\nI have a table with a list of 499 positive non-integer numbers N, I want to find the median of these numbers and I have below: \n\n```\nSELECT (ROUND(N,4)) FROM TABLE ORDER BY N LIMIT 1 OFFSET ((COUNT(N)-1)/2);\n```\n\n\nI get the following error:\n\n\n  \"ERROR 1064 (42000) at line 15: You have an error in your SQL syntax;\n  check the manual that corresponds to your MySQL server version for the\n  right syntax to use near '((COUNT(N)-1)/2)' at line 4\"\n\n\nThis works if I replace ```\n((COUNT(N)-1)/2)```\n by 249 (where the median would be after table is ordered), so I can't use ```\n((COUNT(N)-1)/2)```\n. Why is this? What should I put instead to find the median? \n\nThanks\n    ", "Answer": "\r\nAlas, you cannot include expressions in the ```\nlimit```\n.  You could count the number of rows in the table and then pass that in as the limit.\n\nI would normally use:\n\n```\nselect avg(n)\nfrom (select t.*, (@rn := @rn + 1) as rn\n      from (select t.*\n            from t\n            order by n\n           ) t cross join\n           (select @rn := 0) params\n     ) t\nwhere 2 * rn in (@rn - 1, @rn, @rn + 1);\n```\n\n\nNotes:\n\n\nThe additional level of subqueries is needed in the most recent versions of MySQL -- parameters do not always mix with ```\norder by```\n.\nThe ```\nwhere```\n works for both even and odd numbers of rows.\nThe ```\navg()```\n takes the middle point when the number of rows is even.\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to fill NA with median?\r\n                \r\nExample data:\n\n```\nset.seed(1)\ndf <- data.frame(years=sort(rep(2005:2010, 12)), \n                 months=1:12, \n                 value=c(rnorm(60),NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))\n\nhead(df)\n  years months      value\n1  2005      1 -0.6264538\n2  2005      2  0.1836433\n3  2005      3 -0.8356286\n4  2005      4  1.5952808\n5  2005      5  0.3295078\n6  2005      6 -0.8204684\n```\n\n\nTell me please, how i can replace NA in df$value to median of others months? \"value\" must contain the median of value of all previous values for the same month. That is, if current month is May, \"value\" must contain the median value for all previous values of the month of May.\n    ", "Answer": "\r\nyou want to use the test ```\nis.na```\n function:\n\n```\ndf$value[is.na(df$value)] <- median(df$value, na.rm=TRUE)\n```\n\n\nwhich says for all the values where ```\ndf$value```\n is ```\nNA```\n, replace it with the right hand side.  You need the ```\nna.rm=TRUE```\n piece or else the ```\nmedian```\n function will return ```\nNA```\n\n\nto do this month by month, there are many choices, but i think ```\nplyr```\n has the simplest syntax:\n\n```\nlibrary(plyr)\nddply(df, \n      .(months), \n      transform, \n      value=ifelse(is.na(value), median(value, na.rm=TRUE), value))\n```\n\n\nyou can also use ```\ndata.table```\n.  this is an especially good choice if your data is large:\n\n```\nlibrary(data.table)\nDT <- data.table(df)\nsetkey(DT, months)\n\nDT[,value := ifelse(is.na(value), median(value, na.rm=TRUE), value), by=months]\n```\n\n\nThere are many other ways, but there are two!\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding median with pandas transform\r\n                \r\nI needed to find the median for a pandas dataframe and used a piece of code from this previous SO answer: How I do find median using pandas on a dataset?.\n\nI used the following code from that answer:\n\n ```\ndata['metric_median'] = data.groupby('Segment')['Metric'].transform('median')\n ```\n\n\nIt seemed to work well, so I'm happy about that, but I had a question: how is it that transform method took the argument 'median' without any prior specification? I've been reading the documentation for transform but didn't find any mention of using it to find a median. \n\nBasically, the fact that .transform('median') worked seems like magic to me, and while I have no problem with magic and fancy myself a young Tony Wonder, I'm curious about how it works. \n    ", "Answer": "\r\nI'd recommend diving into the source code to see exactly why this works (and I'm mobile so I'll be terse).\n\nWhen you pass the argument ```\n'median'```\n to ```\ntranform```\n pandas converts this behind the scenes via ```\ngetattr```\n to the appropriate method then behaves like you passed it a function.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to find median of column in pyspark? [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has an answer here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Compute median of column in pyspark\r\n                            \r\n                                (1 answer)\r\n                            \r\n                    \r\n                Closed 2 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI have a spark data frame\n```\ndf = \n   a     b     c     d\n0  12  12.0   car  bike\n1  20  20.5   car  alto\n2  15  12.0  bike   car\n3  25    25  bike  jeep\n```\n\nI want to find the median of a column 'a'. I couldn't find an appropriate way to find the median, so used the normal python NumPy function to find the median but I was getting an error as below:-\n```\nimport numpy as np\nmedian = df['a'].median()\n```\n\nerror:-\n```\nTypeError: 'Column' object is not callable\n```\n\nExpected output:-\n```\n17.5\n```\n\n    ", "Answer": "\r\nYou can use precentile_approx like this,\n```\ndf.agg(F.expr(\"percentile_approx('a', 0.5)\")).show()\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Sorting a boxplot based on median value\r\n                \r\nI'd like to use R to make a series of boxplots which are sorted by median value. Suppose then I execute:\n\n```\nboxplot(cost ~ type)\n```\n\n\nThis would give me some boxplots were cost is shown on the y axis and the type category is visible on the x-axis:\n\n```\n-----     -----\n  |         |\n [ ]        |\n  |        [ ]\n  |         |\n-----     -----\n  A         B\n```\n\n\nHowever, what I'd like is the boxplot figures sorted from highest to lowest median value. My suspicion is that what I need to do is change the labels of the type (A or B) to numerically indicate which is the lowest and highest median value, but I wonder if there is a more clever way to solve the problem.\n    ", "Answer": "\r\nCheck out ```\n?reorder```\n.  The example seems to be what you want, but sorted in the opposite order.  I changed ```\n-count```\n in the first line below to sort in the order you want.\n\n```\n  bymedian <- with(InsectSprays, reorder(spray, -count, median))\n  boxplot(count ~ bymedian, data = InsectSprays,\n          xlab = \"Type of spray\", ylab = \"Insect count\",\n          main = \"InsectSprays data\", varwidth = TRUE,\n          col = \"lightgray\")\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "\"On-line\" (iterator) algorithms for estimating statistical median, mode, skewness, kurtosis?\r\n                \r\nIs there an algorithm to estimate the median, mode, skewness, and/or kurtosis of set of values, but that does NOT require storing all the values in memory at once?\n\nI'd like to calculate the basic statistics:\n\n\nmean:  arithmetic average\nvariance:  average of squared deviations from the mean\nstandard deviation:  square root of the variance\nmedian:  value that separates larger half of the numbers from the smaller half\nmode:  most frequent value found in the set\nskewness:  tl; dr\nkurtosis:  tl; dr\n\n\nThe basic formulas for calculating any of these is grade-school arithmetic, and I do know them.  There are many stats libraries that implement them, as well.\n\nMy problem is the large number (billions) of values in the sets I'm handling:  Working in Python, I can't just make a list or hash with billions of elements.  Even if I wrote this in C, billion-element arrays aren't too practical.\n\nThe data is not sorted.  It's produced randomly, on-the-fly, by other processes.  The size of each set is highly variable, and the sizes will not be known in advance.\n\nI've already figured out how to handle the mean and variance pretty well, iterating through each value in the set in any order.  (Actually, in my case, I take them in the order in which they're generated.)  Here's the algorithm I'm using, courtesy http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#On-line_algorithm:\n\n\nInitialize three variables:  count, sum, and sum_of_squares\nFor each value:\n\n\nIncrement count.\nAdd the value to sum.\nAdd the square of the value to sum_of_squares.\n\nDivide sum by count, storing as the variable mean.\nDivide sum_of_squares by count, storing as the variable mean_of_squares.\nSquare mean, storing as square_of_mean.\nSubtract square_of_mean from mean_of_squares, storing as variance.\nOutput mean and variance.\n\n\nThis \"on-line\" algorithm has weaknesses (e.g., accuracy problems as sum_of_squares quickly grows larger than integer range or float precision), but it basically gives me what I need, without having to store every value in each set.\n\nBut I don't know whether similar techniques exist for estimating the additional statistics (median, mode, skewness, kurtosis).  I could live with a biased estimator, or even a method that compromises accuracy to a certain degree, as long as the memory required to process N values is substantially less than O(N).\n\nPointing me to an existing stats library will help, too, if the library has functions to calculate one or more of these operations \"on-line\".\n    ", "Answer": "\r\nI use these incremental/recursive mean and median estimators, which both use constant storage:\n```\nmean += eta * (sample - mean)\nmedian += eta * sgn(sample - median)\n```\n\nwhere eta is a small learning rate parameter (e.g. 0.001), and sgn() is the signum function which returns one of {-1, 0, 1}. (Use a constant eta if the data is non-stationary and you want to track changes over time; otherwise, for stationary sources you can use something like eta=1/n for the mean estimator, where n is the number of samples seen so far... unfortunately, this does not appear to work for the median estimator.)\nThis type of incremental mean estimator seems to be used all over the place, e.g. in unsupervised neural network learning rules, but the median version seems much less common, despite its benefits (robustness to outliers). It seems that the median version could be used as a replacement for the mean estimator in many applications.\nI would love to see an incremental mode estimator of a similar form...\nUPDATE (2011-09-19)\nI just modified the incremental median estimator to estimate arbitrary quantiles. In general, a quantile function tells you the value that divides the data into two fractions: p and 1-p. The following estimates this value incrementally:\n```\nquantile += eta * (sgn(sample - quantile) + 2.0 * p - 1.0)\n```\n\nThe value p should be within [0,1]. This essentially shifts the sgn() function's symmetrical output {-1,0,1} to lean toward one side, partitioning the data samples into two unequally-sized bins (fractions p and 1-p of the data are less than/greater than the quantile estimate, respectively). Note that for p=0.5, this reduces to the median estimator.\nUPDATE (2021-11-19)\nFor further details about the median estimator described here, I'd like to highlight this paper linked in the comments below: Bylander & Rosen, 1997, A Perceptron-Like Online Algorithm for Tracking the Median. Here is a postscript version from the author's website.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding the median [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                Closed 10 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\n\n  Possible Duplicate:\n  Efficiently finding the ranks of elements in an array?  \n\n\n\n\nIf I have an array of elements A [0 to 15], and I know that the median is in the range A[8..11]. How can I find the median of all the elements in A by picking it from A[8..11]? What will its rank be? I've been reading a lot about this but I couldn't find an answer to this specific question. Any help is appreciated. The array basically contains 2D points, and I want to split the points into rectangular regions.\n    ", "Answer": "\r\nYou can't know the median of a set of elements simply by observing a subset of those elements.  The median is dependent on each and every element of the entire set.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to find median of column in pyspark? [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has an answer here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Compute median of column in pyspark\r\n                            \r\n                                (1 answer)\r\n                            \r\n                    \r\n                Closed 2 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI have a spark data frame\n```\ndf = \n   a     b     c     d\n0  12  12.0   car  bike\n1  20  20.5   car  alto\n2  15  12.0  bike   car\n3  25    25  bike  jeep\n```\n\nI want to find the median of a column 'a'. I couldn't find an appropriate way to find the median, so used the normal python NumPy function to find the median but I was getting an error as below:-\n```\nimport numpy as np\nmedian = df['a'].median()\n```\n\nerror:-\n```\nTypeError: 'Column' object is not callable\n```\n\nExpected output:-\n```\n17.5\n```\n\n    ", "Answer": "\r\nYou can use precentile_approx like this,\n```\ndf.agg(F.expr(\"percentile_approx('a', 0.5)\")).show()\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Java median. When I have an array with a pair number, the median I get isnt correct [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Division of integers in Java [duplicate]\r\n                            \r\n                                (7 answers)\r\n                            \r\n                    \r\n                Closed 7 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\n```\n public static double calcMedian(int[] array) {\n    int n = array.length;\n    int middle = n / 2;\n    double median=0;\n    for (int i = 0; i < n; i++) {\n        if ((n % 2) == 1) {\n            median = array[middle];\n        } else if((n % 2) == 0){\n            median = (array[middle-1] + array[middle]) / 2;\n        }\n    }\n    return median;\n}\n```\n\n\nWhen I have an odd numbers of element I don't get the right median. For instance, if my array is [1 3 6 7 10 12], the median should be 6.5. What I get is 6. I can't understand why. Thanks in advance\n    ", "Answer": "\r\nBecause you are dividing an ```\nint```\n by an ```\nint```\n, the result is also of type ```\nint```\n, and the decimal part of the result (```\n.5```\n) is truncated.\n\nTo get a double result, cast either the dividend or divisor to a double before the division operation, like so:\n\n```\nmedian = (array[middle-1] + array[middle]) / ((double) 2);\n```\n\n\nor\n\n```\nmedian = ((double) (array[middle-1] + array[middle])) / 2;\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Scheme - Get median from a list of median from already sorted list\r\n                \r\nThe program i'm attempting to create is one that can perform a range of math functions from average to std-dev and so on but the one that im getting tripped up on is median. The list is already sorted so how can i get the length of this list to determine whether even or odd and then get the median from that. Current code below. Quite new to Scheme so the syntax is quite confusing to me still. \n\nCODE\n\n```\n(define make-tswb\n  (lambda ()\n    (let ((records '()))\n      (lambda (command . args)\n        (cond\n          ((equal? command 'empty?)\n           (null? records))\n          ((equal? command 'add!)\n           (set! records (cons (car args) records)))\n          ((equal? command 'get)\n           (letrec ((sort-records (lambda (r) (sort r (lambda (x y) (<= (car x) (car y)))))))\n             (if (null? args)\n                 (sort-records records)\n                 (sort-records (filter(car args) records)))))\n          ((equal? command 'analytic)\n           (cond\n             ((= (length args) 1)\n              ((car args) records))\n             ((= (length args) 2)\n              ((car args) (filter (cadr args) records))))))))))\n\n\n(define listofVal\n  (lambda (lst)\n    (if (null? lst)\n        '()\n        (sort (map cadddr lst) <))))\n\n(define median\n  (lambda (medianList)\n    (let ((values (listofVal medianList)))\n      (let ((len (length medianList)))\n      // ??????????\n\n\n(define tswb (make-tswb))\n(tswb 'add!     '(2 123 \"temp1\"  76.1))\n(tswb 'add!     '(1 123 \"temp1\"  72.0))\n(tswb 'add!     '(1 123 \"temp1\"  75.0))\n(tswb 'analytic median)\n```\n\n    ", "Answer": "\r\nAccording to this page, you need to handle two cases:\n\n\nLength of the list is even number.\nIt is not an even number.\n\n\nFor the first case, you need to take two values in the middle, count a sum of them and then divide by two. For the second case, you need to find the middle of the sorted list and this value will be the median.\n\nSo, I think, this should work for you:\n\n```\n(define (count-median-for-even len listOfVal)\n  (/ (+ (list-ref listOfVal (round (- (/ len 2) 1)))\n        (list-ref listOfVal (round (/ len 2)))) 2))\n\n(define (count-median-for-odd len listOfVal)\n  (list-ref listOfVal (round (/ len 2))))\n\n(define median\n  (lambda (medianList)\n    (let ((values (listofVal medianList)))\n      (let ((len (length medianList)))\n        (if (even? len) (count-median-for-even len values) (count-median-for-odd len values))))))\n```\n\n\nHaving tested this on the three test-cases from the link above, I can say this must do the job for you.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Rolling median in bigquery\r\n                \r\nI have monthly expenditure data in BigQuery for some customers, with the following structure:\n```\nCREATE TABLE if not EXISTS monthly_spend (\n  user_id int,\n  transaction_month DATE,\n  spend float\n);\n\nINSERT INTO monthly_spend VALUES\n(1, '2021-01-01', 0),\n(1, '2021-02-01', 1),\n(1, '2021-03-01', 1),\n(1, '2021-04-01', 2),\n(1, '2021-05-01', 5),\n(2, '2021-01-01', 5),\n(2, '2021-02-01', 0),\n(2, '2021-03-01', 1),\n(2, '2021-04-01', 2),\n(2, '2021-05-01', 2);\n```\n\nI'm trying to calculate the rolling median of the monthly expenditure using the following query:\n```\nselect \n    user_id,\n    transaction_month,\n    avg(spend) over(partition by user_id order by transaction_month rows between unbounded preceding and 1 preceding) as rolling_avg_spend,\n    percentile_cont(spend, 0.5) over(partition by user_id order by transaction_month rows between unbounded preceding and 1 preceding) as rolling_median_spend,\nfrom monthly_spend  \n```\n\nHowever, I get the following error:\n```\nWindow ORDER BY is not allowed for analytic function percentile_cont at [69:63]\n```\n\nIs there a way to calculate a rolling median (without the current row) in BigQuery?\nThanks!\n    ", "Answer": "\r\nTry below\n```\nselect \n  user_id,\n  transaction_month,\n  rolling_avg_spend,\n  (select distinct percentile_cont(spend, 0.5) over() \n   from unnest(rolling_spends) spend\n  ) as rolling_median_spend\nfrom (\n  select \n    user_id,\n    transaction_month,\n    avg(spend) over(partition by user_id order by transaction_month rows between unbounded preceding and 1 preceding) as rolling_avg_spend,\n    array_agg(spend) over(partition by user_id order by transaction_month rows between unbounded preceding and 1 preceding) as rolling_spends,\n  from monthly_spend  \n)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median in SQLITE on group\r\n                \r\nI have the following problem: I need the median in sqlite for groups.\n\nExample: I have a network with multiple start and end points and several travel distances between each of them. I now need the median of each start/end pair.\n\nFor the following table:\n\n```\n    Start  | End  | Time\n      A    |  B   |  5\n      A    |  B   |  9\n      A    |  B   |  6\n      B    |  C   |  4\n      B    |  C   |  8\n      C    |  A   |  5\n      C    |  B   |  6\n```\n\n\nI would like the following result:\n\n```\n    Start | End  | Median(Time)\n      A   |  B   |   6\n      B   |  C   |   6\n      C   |  A   |   5\n      C   |  B   |   6\n```\n\n\nI have seen how to compute the median here: How can I calculate the median of values in SQLite?, but I have no clue how to apply this on groups.\n\nTo create the table use the following code:\n\n```\nCREATE TABLE \"Times\" (\"Key\" INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL  UNIQUE , \"START\" TEXT, \"END\" TEXT, \"TIME\" INTEGER);\nINSERT INTO \"Times\" VALUES(1,'A','B',5);\nINSERT INTO \"Times\" VALUES(2,'A','B',9);\nINSERT INTO \"Times\" VALUES(3,'A','B',6);\nINSERT INTO \"Times\" VALUES(4,'B','C',4);\nINSERT INTO \"Times\" VALUES(5,'B','C',8);\nINSERT INTO \"Times\" VALUES(6,'C','A',5);\nINSERT INTO \"Times\" VALUES(7,'C','B',6);\n```\n\n\nAny help is greatly appreciated.\n    ", "Answer": "\r\nI couldn't make it work (seams you have can't access outer nested tables from within ```\nLIMIT```\n or ```\nOFFSET```\n), but a got this answer:\n\n```\nSELECT Start, End, AVG(Time) FROM (\n    SELECT *, (\n        SELECT COUNT() FROM Times AS _ \n        WHERE Start=Times.Start AND End=Times.End AND (Time>Times.Time OR Time=Times.Time AND ROWID>Times.ROWID)\n    )-(\n        SELECT COUNT() FROM Times AS _ \n        WHERE Start=Times.Start AND End=Times.End AND (Time<Times.Time OR Time=Times.Time AND ROWID<Times.ROWID)\n    ) AS m FROM Times WHERE m BETWEEN -1 AND 1\n) GROUP BY Start, End;\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How do I calculate the \"median of five\" in C#?\r\n                \r\nThe median of five is sometimes used as an exercise in algorithm design and is known to be computable using only 6 comparisons.\n\nWhat is the best way to implement this \"median of five using 6 comparisons\" in C# ? All of my attempts seem to result in awkward code :( I need nice and readable code while still using only 6 comparisons.\n\n```\npublic double medianOfFive(double a, double b, double c, double d, double e){\n    //\n    // return median\n    //\n    return c;\n}\n```\n\n\nNote: I think I should provide the \"algorithm\" here too:\n\nI found myself not able to explain the algorithm clearly as Azereal did in his forum post. So I will reference his post here. From http://www.ocf.berkeley.edu/~wwu/cgi-bin/yabb/YaBB.cgi?board=riddles_cs;action=display;num=1061827085\n\n\n  Well I was posed this problem in one\n  of my assignments and I turned to this\n  forum for help but no help was here. \n  I eventually found out how to do it.\n  \n  \n  Start a mergesort with the first 4 elements and order each pair (2\n  comparisons)\n  Compare the two lower ones of each pair and eliminate the lowest one from\n  the possibilities (3 comparisons)\n  Add in the 5th number set aside to the number without a pair and compare\n  the two (4 comparisons)\n  Compare the two lowest of the two new pairs and eliminate the lower one\n  (5 comparisons)\n  Compare the one by itself and the lower of the last pair and the lower\n  number is the median\n  \n  The possible median is within the\n  parentesis\n  \n  \n  (54321)\n  \n  5:4   3:2    2 comparisons\n  \n  (4<5 2<3  1)  \n  \n  4:2      3 comparisons\n  \n  2(4<5 3 1)\n  \n  1:3      4 comparisons\n  \n  2(4<5 1<3)\n  \n  4:1      5 comparisons\n  \n  1,2(4<5 3)\n  \n  4:3      6 comparisons\n  \n  1,2(3)4,5  \n  \n  Three is the median\n\n\nHere is the C++ code I wrote to find median of five. Don't mind its awkwardness:\n\n```\ndouble StageGenerator::MedianOfFive(double n1, double n2, double n3, double n4, double n5){\n    double *a = &n1, *b = &n2, *c = &n3, *d = &n4, *e = &n5;\n    double *tmp;\n\n    // makes a < b and b < d\n    if(*b < *a){\n        tmp = a; a = b; b = tmp;\n    }\n\n    if(*d < *c){\n        tmp = c; c = d; d = tmp;\n    }\n\n    // eleminate the lowest\n    if(*c < *a){\n        tmp = b; b = d; d = tmp; \n        c = a;\n    }\n\n    // gets e in\n    a = e;\n\n    // makes a < b and b < d\n    if(*b < *a){\n        tmp = a; a = b; b = tmp;\n    }\n\n    // eliminate another lowest\n    // remaing: a,b,d\n    if(*a < *c){\n        tmp = b; b = d; d = tmp; \n        a = c;\n    }\n\n    if(*d < *a)\n        return *d;\n    else\n        return *a;\n\n} \n```\n\n\nIt should be more compact, isn't it ?\n\n\n\nAs @pablito pointed out in his answer, the built-in ```\nList.Sort()```\n cannot fulfill this requirement since it uses up to 13 comparisons :]\n    ", "Answer": "\r\nI found this post interesting and as an exercise I created this which ONLY does 6 comparisons and NOTHING else:\n\n```\nstatic double MedianOfFive(double a, double b, double c, double d, double e)\n{\n    return b < a ? d < c ? b < d ? a < e ? a < d ? e < d ? e : d\n                                                 : c < a ? c : a\n                                         : e < d ? a < d ? a : d\n                                                 : c < e ? c : e\n                                 : c < e ? b < c ? a < c ? a : c\n                                                 : e < b ? e : b\n                                         : b < e ? a < e ? a : e\n                                                 : c < b ? c : b\n                         : b < c ? a < e ? a < c ? e < c ? e : c\n                                                 : d < a ? d : a\n                                         : e < c ? a < c ? a : c\n                                                 : d < e ? d : e\n                                 : d < e ? b < d ? a < d ? a : d\n                                                 : e < b ? e : b\n                                         : b < e ? a < e ? a : e\n                                                 : d < b ? d : b\n                 : d < c ? a < d ? b < e ? b < d ? e < d ? e : d\n                                                 : c < b ? c : b\n                                         : e < d ? b < d ? b : d\n                                                 : c < e ? c : e\n                                 : c < e ? a < c ? b < c ? b : c\n                                                 : e < a ? e : a\n                                         : a < e ? b < e ? b : e\n                                                 : c < a ? c : a\n                         : a < c ? b < e ? b < c ? e < c ? e : c\n                                                 : d < b ? d : b\n                                         : e < c ? b < c ? b : c\n                                                 : d < e ? d : e\n                                 : d < e ? a < d ? b < d ? b : d\n                                                 : e < a ? e : a\n                                         : a < e ? b < e ? b : e\n                                                 : d < a ? d : a;\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "CACULATE MIN, MEDIAN, MAX AT ONCE\r\n                \r\nPlease help me to calculate the MIN, MEDIAN and MAX scores of the students from the result table AT ONCE. Result table: id, student_id,score\nI found the way to get the median with the following code, but it returns median value only. How could I add min and max? Thank you so much\n```\nSELECT AVG(SCORE)::INT AS MEDIAN\nFROM\n\n(SELECT *, \nrow_number() over(order by score desc) as desc_sc,\nrow_number() over(order by score asc) as asc_sc\nFROM result\n) as a\n\nWHERE asc_sc IN (desc_sc,desc_sc+1,desc_sc-1)\n```\n\n    ", "Answer": "\r\nYou could try:\n```\nSELECT AVG(SCORE)::INT AS MEDIAN, min_score, max_score\nFROM\n\n(SELECT *, \nMIN(score) over (ORDER BY score ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as min_score,\nMAX(score) over (ORDER BY score ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as max_score,\nrow_number() over(order by score desc) as desc_sc,\nrow_number() over(order by score asc) as asc_sc\nFROM result\n) as a\n\nWHERE asc_sc IN (desc_sc,desc_sc+1,desc_sc-1)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "C++ Efficiently Calculating a Running Median [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Find running median from a stream of integers\r\n                            \r\n                                (10 answers)\r\n                            \r\n                    \r\n                Closed 5 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nThose of you that have read my previous questions know about my work at understanding and implementing quicksort and quickselect, as well as some other basic algorithms.\n\nQuickselect is used to calculate the kth smallest element in an unsorted list, and this concept can also be used to find the median in an unsorted list.\n\nThis time, I need aid in devising  an efficient technique to calculate the running median, because quickselect isn't a good choice as it needs to re-calculate every time the list changes. Because quickselect has to restart everytime, it can't take advantage of previous calculations done, so I'm looking for a different algorithm that's similar (possibly) but is more efficient in the area of running medians.\n    ", "Answer": "\r\nThe streaming median is computed using two heaps. All the numbers less than or equal to the current median are in the left heap, which is arranged so that the maximum number is at the root of the heap. All the numbers greater than or equal to the current median are in the right heap, which is arranged so that the minimum number is at the root of the heap. Note that numbers equal to the current median can be in either heap. The count of numbers in the two heaps never differs by more than 1.\n\nWhen the process begins the two heaps are initially empty. The first number in the input sequence is added to one of the heaps, it doesn’t matter which, and returned as the first streaming median. The second number in the input sequence is then added to the other heap, if the root of the right heap is less than the root of the left heap the two heaps are swapped, and the average of the two numbers is returned as the second streaming median.\n\nThen the main algorithm begins. Each subsequent number in the input sequence is compared to the current median, and added to the left heap if it is less than the current median or to the right heap if it is greater than the current median; if the input number is equal to the current median, it is added to whichever heap has the smaller count, or to either heap arbitrarily if they have the same count. If that causes the counts of the two heaps to differ by more than 1, the root of the larger heap is removed and inserted in the smaller heap. Then the current median is computed as the root of the larger heap, if they differ in count, or the average of the roots of the two heaps, if they are the same size.\n\nCode in Scheme and Python is available at my blog.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Conditional median with or-clause\r\n                \r\nIn another forum, I found a way to make a conditional median calculation in Excel work like this:\n\n```\n{=MEDIAN(IF(and(BN8:BN229<44,BN8:BN229>0),BM8:BM229))}\n```\n\n\n...becomes...\n\n```\n{=MEDIAN(IF($BN$8:$BN$229<44,IF(BN8:BN229>0,$BM$8:$BM$229)))} \n```\n\n\n...and works (due to the nested if-statements).\n\nHowever, I need to do the same with an or-clause. How, would I do this?\n    ", "Answer": "\r\nAlready found a way:\n    {=MEDIAN(IF($BN$8:$BN$229<44,$BM$8:$BM$229,IF(BN8:BN229>0,$BM$8:$BM$229)))} \n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Mean, Median, Variance calculator\r\n                \r\nI have created a program that calculates the mean, median, and variance. the program accepts up to 500 inputs. All of my methods work perfectly when there are 500 inputs (max size of my array). When there are less inputs, only the 'mean' calculator works. Here's the entire program: \n\n```\n    public class StatsPackage{\n\n    static int i = 0, arrayLength;\n    static double sum = 0, mean, median, sumOfSquares, variance, stdDev;\n\n    static double calcMean (int inputs[], int count) throws IOException{\n        for (i = 0; i < count; i++){\n            sum += inputs[i];\n        }   \n        mean = (sum/count);\n        return mean;            \n    }\n\n    static double calcMedian (int inputs[], int count){\n        Arrays.sort(inputs);\n        if (count % 2 == 0){\n            median = ((inputs[(count/2)] + inputs[(count/2)- 1])/2) ;\n        }\n        if (count % 2 != 0){\n            median = inputs[(count-1)/2];           \n        }\n        return median;\n    }\n\n    static double calcVariance (int inputs[], int count){\n\n        sum = 0;\n        for (i = 0; i < count; i++){\n            sumOfSquares += (inputs[i]*inputs[i]);\n        }\n        for (i = 0; i < count; i++){\n            sum = sum + inputs[i];\n        }\n        variance = ((sumOfSquares/count) - (sum * sum)/(count * count));\n        return variance;\n    }\n\n    static double calcStdDev (double varianceInput){\n        stdDev = Math.sqrt(variance);\n        return stdDev;\n    }\n\n\n\n\n\n\n\n  public static void main(String[] args) throws IOException {\n\n        NumberFormat nf = new DecimalFormat(\"0.##\");\n        nf.setMaximumFractionDigits(2);\n        nf.setMinimumFractionDigits(2);\n        BufferedReader stdin = new BufferedReader (new InputStreamReader (System.in));\n        String str = \"test\";\n        int inputs[] = new int [500];\n        int counter = 0;\n        int i = 0;\n\n\n\n        while ((str = stdin.readLine()) != null && i < 500) {\n            inputs[i] = Integer.parseInt(str);\n            i++;\n            counter++;\n        }\n\n        System.out.println(\"Mean: \" + nf.format(StatsPackage.calcMean(inputs, counter)));\n        System.out.println(\"Median: \" + nf.format(StatsPackage.calcMedian(inputs, counter)));\n        System.out.println(\"Variance: \" + nf.format(StatsPackage.calcVariance(inputs, counter)));\n        System.out.println(\"Standard Deviation: \" + nf.format(StatsPackage.calcStdDev(variance)));\n        }\n    }   \n```\n\n\nHere is an example output when 10 random numbers are entered:\n\nMean: 47.90\nMedian: 0.00\nVariance: 0.00\nStandard Deviation: 0.00\n\nHere is the same code when 500 numbers are entered (the max size of my array):\n\nMean: 47.27\nMedian: 47.00\nVariance: 856.71\nStandard Deviation: 29.27\n\nThese outputs are consistent. I input 10 numbers, and I only get the mean method to work. I input 500 numbers and I get all of them working. I'm running this program against another tester program, not by inputting the numbers myself in eclipse. The tester program is my instructor's and I trust his program is working correctly. \n\nCan anyone please help? I'm about to tear my hair out. \n    ", "Answer": "\r\nThe problem is that you are initializing an array of size 500, but then not using all 500 indices. That means you have an array like: \n\n```\n[2,5,3,7,8,2,......,0,0,0,0,0,0,0,0,0,0,0,0]\n```\n\n\nSo your code is going to calculate the median and std devation with all those ```\n0```\ns. What you should be using is an ```\nArrayList```\n. An ```\nArrayList```\n will expand in size as you add elements, whereas a regular list cannot change size.\n\nIf you cannot use an ```\nArrayList```\n, then you have to do a bit more work.\n\n```\nwhile ((str = stdin.readLine()) != null && i < 500) {\n            inputs[i] = Integer.parseInt(str);\n            i++;\n            counter++;\n        }\n```\n\n\nYour ```\ncounter```\n variable already has the information you need. Now, before passing this array to your mean/median/stddev methods, you need to reduce the size of the array. The easiest way to do this is to use an existing method provided to all arrays, called ```\nCopyOf()```\n : CopyOf() method for Arrays\n\n```\nint[] newArray = Arrays.copyOf(inputs, counter);\n```\n\n\nNow replace your old ```\ninput```\n array with your new ```\nnewArray```\n in your method calls:\n\n```\nSystem.out.println(\"Mean: \" + nf.format(StatsPackage.calcMean(newArray, counter)));\n        System.out.println(\"Median: \" + nf.format(StatsPackage.calcMedian(newArray, counter)));\n        System.out.println(\"Variance: \" + nf.format(StatsPackage.calcVariance(newArray, counter)));\n        System.out.println(\"Standard Deviation: \" + nf.format(StatsPackage.calcStdDev(variance)));\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of Sorted arrays of different lengths\r\n                \r\nI have following algorithm to calculate median of two sorted arrays of the same length.\n\nIf we have arrays of different sizes, is it still true that the actual median will always lie between the median of arrays and then between medians of subarrays that will be selected as we proceed?\n\nAlgorithm:\n\n\nCalculate the medians m1 and m2 of the input arrays ar1[] \n   and ar2[] respectively.\nIf m1 and m2 both are equal then we are done.\n     return m1 (or m2)\nIf m1 is greater than m2, then median is present in one \n   of the below two subarrays.\n\n\nFrom first element of ar1 to m1 (```\nar1[0...|_n/2_|]```\n)\nFrom m2 to last element of ar2  (```\nar2[|_n/2_|...n-1]```\n)\n\nIf m2 is greater than m1, then median is present in one\n   of the below two subarrays.\n\n\nFrom m1 to last element of ar1  (```\nar1[|_n/2_|...n-1]```\n)\nFrom first element of ar2 to m2 (```\nar2[0...|_n/2_|]```\n)\n\nRepeat the above process until size of both the subarrays \n   becomes 2.\nIf size of the two arrays is 2 then use below formula to get \n  the median.\n\n```\nMedian = (max(ar1[0], ar2[0]) + min(ar1[1], ar2[1]))/2\n```\n\n\n\nExample:\n\n```\nar1[] = {1, 12, 15, 26, 38}\nar2[] = {2, 13, 17, 30, 45}\n```\n\n\nFor above two arrays m1 = 15 and m2 = 17\n\nFor the above ar1[] and ar2[], m1 is smaller than m2. So median is present \n    in one of the following two subarrays.\n\n```\n[15, 26, 38] and [2, 13, 17]\n```\n\n\nLet us repeat the process for above two subarrays:\n\n```\nm1 = 26 m2 = 13.\n```\n\n\nm1 is greater than m2. So the subarrays become\n\n```\n[15, 26] and [13, 17]\n```\n\n\nNow size is 2, so:\n\n```\nmedian = (max(ar1[0], ar2[0]) + min(ar1[1], ar2[1]))/2\n       = (max(15, 13) + min(26, 17))/2 \n       = (15 + 17)/2\n       = 16\n```\n\n    ", "Answer": "\r\n```\ndouble findMedianSortedArrays(int[] A, int[] B) {        \nint m = A.length;\nint n = B.length;\n\nif (m > n) {\n    return findMedianSortedArrays(B, A);\n}\n\nint lo = 0;\nint hi = m;\nwhile (lo <= hi) {\n    int i = (lo + hi) / 2;\n    int j = (m + n + 1) / 2 - i;\n    int maxLeftA = i == 0 ? Integer.MIN_VALUE : A[i - 1];\n    int minRightA = i == m ? Integer.MAX_VALUE : A[i];\n    int maxLeftB = j == 0 ? Integer.MIN_VALUE : B[j - 1];\n    int minRightB = j == n ? Integer.MAX_VALUE : B[j];\n    if (maxLeftA <= minRightB && maxLeftB <= minRightA) {\n        if ((m + n) % 2 == 0) {\n            return (Math.max(maxLeftA, maxLeftB) + Math.min(minRightA, minRightB)) / 2.0;\n        } else {\n            return Math.max(maxLeftA, maxLeftB);\n        }\n    }\n    else if (maxLeftA > minRightB) {\n        hi = i - 1;\n    }\n    else {\n        lo = i + 1;\n    }\n}\n\nreturn 0.0;\n```\n\n}\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding median in Spark Streaming\r\n                \r\nI am trying to write the simplest of code samples:\n\n```\nfrom numpy import median\nfrom pyspark.streaming import StreamingContext\n\nssc = StreamingContext(sc, 30)\n\nqs = ssc.queueStream([[1,2,3],[4,5],[6,7,8,9,9]])\noutput = qs.foreachRDD(median)\n\noutput.pprint()\n\nssc.start(); ssc.awaitTermination()\n```\n\n\nI would like to generate the median for each rdd in the stream. My streams come in every 30 seconds.\nTo test my code I have made a queueStream \n\nwhen I look at the type for output I get the following:\n\n```\n type(output)\n<type 'NoneType'>\n```\n\n\nWhy is this the case? When I try to apply ```\nmedian```\n to my stream using ```\nmap```\n, it applies the median function to each member of the list one at a time. I would like to apply the median function to the whole RDD as an aggregate, so the ```\nmap```\n function is out of the question.\n\nHow can I compute a median of a stream in Spark Streaming?\n    ", "Answer": "\r\nTo expand on @Justin 's answer:  what is happening:\n\n```\nmedian()\n```\n\n\nis being applied to each DStream individually.  However the result is not used .. by anyone..  Why?  foreachRdd() is an action not a transformation.\n\nYou should look at the DStream transformations: e.g. map(): here is code that is not 100% debugged yet - but it provides a structure:\n\n```\nfrom pyspark.streaming import *\nssc = StreamingContext(sc, 30)\ndataRdd = [sc.parallelize(d, 1) for d in [[1,2,3],[4,5],[6,7,8,9,9]]]\nqs = ssc.queueStream(dataRdd)\n\ndef list_median((med,mylist),newval):\n    mylist = [newval] if not mylist else mylist.append(newval)\n    mylist = sorted(mylist)\n    return (mylist[int(len(mylist)/2)], mylist)\n\nmedians = qs.reduce(list_median).map(lambda (med,list): med)\ndef printRec(rdd):\n    import sys\n    rdd.foreach(lambda rec: sys.stderr.write(repr(rec)))\n\nmedians.foreachRDD(printRec)\nssc.start(); ssc.awaitTermination()\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Optimal median of medians selection - 3 element blocks vs 5 element blocks?\r\n                \r\nI'm working on a quicksort-variant implementation based on the Select algorithm for choosing a good pivot element. Conventional wisdom seems to be to divide the array into 5-element blocks, take the median of each, and then recursively apply the same blocking approach to the resulting medians to get a \"median of medians\".\n\nWhat's confusing me is the choice of 5-element blocks rather than 3-element blocks. With 5-element blocks, it seems to me that you perform ```\nn/4 = n/5 + n/25 + n/125 + n/625 + ...```\n median-of-5 operations, whereas with 3-element blocks, you perform ```\nn/2 = n/3 + n/9 + n/27 + n/81 + ...```\n median-of-3 operations. Being that each median-of-5 is 6 comparisons, and each median-of-3 is 2 comparisons, that results in ```\n3*n/2```\n comparisons using median-of-5 and ```\nn```\n comparisons using median-of-3.\n\nCan anyone explain this discrepancy, and what the motivation for using 5-element blocks could be? I'm not familiar with usual practices for applying these algorithms, so maybe there's some way you can cut out some steps and still get \"close enough\" to the median to ensure a good pivot, and that approach works better with 5-element blocks?\n    ", "Answer": "\r\nThe reason is that by choosing blocks of 3, we might lose the guarantee of having an O(n) time algorithm.\n\nFor blocks of 5, the time complexity is\n\nT(n) = T(n/5) + T(7n/10) + O(n)\n\nFor blocks of 3, it comes out to be \n\nT(n) = T(n/3) + T(2n/3) + O(n)\n\nCheck this out: http://www.cs.berkeley.edu/~luca/w4231/fall99/slides/l3.pdf\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Not understanding median of medians algorithm to find k-th element\r\n                \r\nBelow is my code for trying to understand the median of medians algorithm (using blocks of size 5). I understand how to get medians of the input, but I'm not sure how to code the block to keep recursing the input until I just have the median. Then after getting that median, I'm not sure how to use it as a pivot to throw away the useless information to partition the input. ```\ngetMediansArray```\n returns an array of size ceil(input.length/5) and ```\ngetMedians```\n just returns the median from an array (only used on arrays of length <= 5).\n\n```\npublic static int[] findKthElement(int[] input, int k) {\n    int numOfMedians = (int) Math.ceil(input.length/5.0);\n    int[] medians = new int[numOfMedians];\n    medians = getMediansArray(input, medians)\n\n    // (1) This only gets the first iteration of medians of the\n    // input. How do I recurse on this until I just have one median?\n\n    // (2) how should I partition about the pivot once I get it?\n}\n\npublic static int[] getMediansArray(int[] input, int[] medians) {\n    int numOfMedians = (int) Math.ceil(input.length/5.0);\n    int[] five = new int[5];\n\n    for (int i = 0; i < numOfMedians; i++) {\n        if (i != numOfMedians - 1) {\n            for (int j = 0; j < 5; j++) {\n                five[j] = input[(i*5)+j];\n            }\n            medians[i] = getMedian(five);\n        } else {\n            int numOfRemainders = input.length % 5;\n            int[] remainder = new int[numOfRemainders];\n            for (int j = 0; j < numOfRemainders; j++) {\n                remainder[j] = input[(i*5)+j];\n            }\n            medians[i] = getMedian(five);\n        }\n    }\n    return medians;\n}\n\npublic static int getMedian(int[] input) {\n    Arrays.sort(input);\n    if (input.length % 2 == 0) {\n        return (input[input.length/2] + input[input.length/2 - 1]) / 2;\n    }\n    return input[input.length/2];\n}\n```\n\n    ", "Answer": "\r\nMedian of medians is basically just the quick-select algorithm (http://en.wikipedia.org/wiki/Quickselect) improved. While quick-select has O(n) average time complexity, it can slow down to O(n^2) for tricky input.\n\nWhat you do after finding a median of medians is nothing but an iteration of quick-select algorithm. Median of medians has a nice property that it will be always larger than 30% of elements and smaller than 30% of elements. This guarantees that quick-select using median of medians for a pivot will run in worst time complexity of O(n). Refer to: http://en.wikipedia.org/wiki/Median_of_medians\n\nI suggest you start by implementing quick-select. Once you do that, you can use code you already have to select pivot in each step of quick-select.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Not understanding median of medians algorithm to find k-th element\r\n                \r\nBelow is my code for trying to understand the median of medians algorithm (using blocks of size 5). I understand how to get medians of the input, but I'm not sure how to code the block to keep recursing the input until I just have the median. Then after getting that median, I'm not sure how to use it as a pivot to throw away the useless information to partition the input. ```\ngetMediansArray```\n returns an array of size ceil(input.length/5) and ```\ngetMedians```\n just returns the median from an array (only used on arrays of length <= 5).\n\n```\npublic static int[] findKthElement(int[] input, int k) {\n    int numOfMedians = (int) Math.ceil(input.length/5.0);\n    int[] medians = new int[numOfMedians];\n    medians = getMediansArray(input, medians)\n\n    // (1) This only gets the first iteration of medians of the\n    // input. How do I recurse on this until I just have one median?\n\n    // (2) how should I partition about the pivot once I get it?\n}\n\npublic static int[] getMediansArray(int[] input, int[] medians) {\n    int numOfMedians = (int) Math.ceil(input.length/5.0);\n    int[] five = new int[5];\n\n    for (int i = 0; i < numOfMedians; i++) {\n        if (i != numOfMedians - 1) {\n            for (int j = 0; j < 5; j++) {\n                five[j] = input[(i*5)+j];\n            }\n            medians[i] = getMedian(five);\n        } else {\n            int numOfRemainders = input.length % 5;\n            int[] remainder = new int[numOfRemainders];\n            for (int j = 0; j < numOfRemainders; j++) {\n                remainder[j] = input[(i*5)+j];\n            }\n            medians[i] = getMedian(five);\n        }\n    }\n    return medians;\n}\n\npublic static int getMedian(int[] input) {\n    Arrays.sort(input);\n    if (input.length % 2 == 0) {\n        return (input[input.length/2] + input[input.length/2 - 1]) / 2;\n    }\n    return input[input.length/2];\n}\n```\n\n    ", "Answer": "\r\nMedian of medians is basically just the quick-select algorithm (http://en.wikipedia.org/wiki/Quickselect) improved. While quick-select has O(n) average time complexity, it can slow down to O(n^2) for tricky input.\n\nWhat you do after finding a median of medians is nothing but an iteration of quick-select algorithm. Median of medians has a nice property that it will be always larger than 30% of elements and smaller than 30% of elements. This guarantees that quick-select using median of medians for a pivot will run in worst time complexity of O(n). Refer to: http://en.wikipedia.org/wiki/Median_of_medians\n\nI suggest you start by implementing quick-select. Once you do that, you can use code you already have to select pivot in each step of quick-select.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "MongoDB find median\r\n                \r\nI would like to upon user request graph median values of many documents.  I'd prefer not to transfer entire documents from the database to my application solely for purposes of determining median values.\n\nI understand that development is still planned for a median aggregator in MongoDB, however I see that currently the following operations are supported:\n\n\nsort\ncount\nlimit\n\n\nShort of editing mongo source code, Is there any reasonable way I can combine these operations to obtain median values; for example, to sort values, count them, and limit to return median values?\n    ", "Answer": "\r\nIt appears that editing Mongo source code is the only solution.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "A program that finds the Kth largest element in a list\r\n                \r\nAm writing a logic program for kth_largest(Xs,K) that implements the linear algorithm for finding the\nkth largest element K of a list Xs. The algorithm has the following steps:\n\n\nBreak the list into groups of five elements.\nEfficiently find the median of each of the groups, which can be done with a fixed number of\ncomparisons.\nRecursively find the median of the medians.\nPartition the original list with respect to the median of the medians.\nRecursively find the kth largest element in the appropriate smaller list.\n\n\nHow do I go about it? I can select an element from a list but I don't know how to get the largest using the above procedure.Here is my definition for selecting an element from a list\n\n```\nselect(X; HasXs; OneLessXs)  \n% The list OneLessXs is the result of removing\n% one occurrence of X from the list HasXs.\nselect(X,[X|Xs],Xs).\nselect(X,[Y|Ys],[Y|Zs]) :-  select(X,Ys,Zs).\n```\n\n    ", "Answer": "\r\nI'm going to jump in since no one has attempted an Answer, and hopefully shed some light on the procedure to be programmed.\n\nI've found the Wikipedia article on Selection algorithm to be quite helpful in understanding the bigger picture of \"fast\" (worst-case linear time) algorithms of this type.\n\nBut what you asked at the end of your Question is a somewhat simpler matter.  You wrote \"How do i go about it? I can select an element from a list but i dont know how to get the largest using the above procedure.\" (emphasis added by me)\n\nNow there seems to be a bit of confusion about whether you want to implement \"the above procedure\", which is a general recipe for finding a kth largest element by successive searches for medians, or whether you ask how to use that recipe to find simply the largest element (a special case).  Note that the recipe doesn't specifically use a step of finding the largest element on its way to locating the median or the kth largest element.\n\nBut you give the code to find an element of a list and the rest of that list after removing that element, a predicate that is nondeterministic and allows backtracking through all members of the list.\n\nThe task of finding the largest element is deterministic (at least if all the elements are distinct), and it is an easier task than the general selection of the kth largest element (a task associated with order statistics among other things).\n\nLet's give some simple, hopefully obviously correct, code to find the largest element, and then talk about a more optimized way of doing it.\n\n```\nmaxOfList(H,[H|T]) :-  upperBound(H,T), !.\nmaxOfList(X,[_|T]) :-  maxOfList(X,T).\n\nupperBound(X,[ ]).\nupperBound(X,[H|T]) :-\n    X >= H,\n    upperBound(X,T).\n```\n\n\nThe idea should be understandable.  We look at the head of the list and ask if that entry is an upper bound for the rest of the list.  If so, that must be the maximum value and we're done (the cut makes it deterministic).  If not, then the maximum value must occur later in the list, so we discard the head and continue recursively searching for an entry that is an upper bound of all the subsequent elements.  The cut is essential here, because we must stop at the first such entry in order to know it is a maximum of the original list.\n\nWe've used an auxiliary predicate upperBound/2, which is not unusual, but the overall complexity of this implementation is worst-case quadratic in the length of the list.  So there is room for improvement!\n\nLet me pause here to be sure I'm not going totally off-track in trying to address your question.  After all you may have meant to ask how to use \"the above procedure\" to find the kth largest element, and so what I'm describing may be overly specialized.  However it may help to understand the cleverness of the general selection algorithms to understand the subtle optimization of the simple case, finding a largest element.\n\nAdded:\n\nIntuitively we can reduce the number of comparisons needed in the worst case\nby going through the list and keeping track of the largest value found \"so\nfar\".  In a procedural language we can easily accomplish this by reassigning\nthe value of a variable, but Prolog doesn't allow us to do that directly.\n\nInstead a Prolog way of doing this is to introduce an extra argument and\ndefine the predicate maxOfList/2 by a call to an auxiliary predicate\nwith three arguments:\n\n```\nmaxOfList(X,[H|T]) :- maxOfListAux(X,H,T).\n```\n\n\nThe extra argument in maxOfListAux/3 can then be used to track the\nlargest value \"so far\" as follows:\n\n```\nmaxOfListAux(X,X,[ ]).\nmaxOfListAux(Z,X,[H|T]) :-\n    ( X >= H  -> Y = X ; Y = H ),\n    maxOfListAux(Z,Y,T).\n```\n\n\nHere the first argument of maxOfListAux represents the final answer as to\nthe largest element of the list, but we don't know that answer until we\nhave emptied the list.  So the first clause here \"finalizes\" the answer\nwhen that happens, unifying the first argument with the second argument\n(the largest value \"so far\") just when the tail of the list has reached\nthe end.\n\nThe second clause for maxOfListAux leaves the first argument unbound and\n\"updates\" the second argument accordingly as the next element of the list\nexceeds the previous largest value or not.\n\nIt isn't strictly necessary to use an auxiliary predicate in this case,\nbecause we might have kept track of the largest value found by using the\nhead of the list instead of an extra argument:\n\n```\nmaxOfList(X,[X]) :- !.\nmaxOfList(X,[H1,H2|T]) :-\n    ( H1 >= H2  -> Y = H1 ; Y = H2 ),\n    maxOfList(X,[Y|T]).\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Teradata median calculation display\r\n                \r\nThe cod below gives the output as shown. I would like to display the median values for all the respective rows instead of \"?\". What am I doing wrong?\n\n\n\nIt should display the median value. \n\n```\n SELECT \n    sales_segment,\n    pickup_yyyymm,\n    Days,\n    COUNT(*) over(partition by sales_segment,pickup_yyyymm order by sales_segment,pickup_yyyymm desc)  AS no_of_records,\n    SUM(Days) over(partition by sales_segment,pickup_yyyymm order by sales_segment,pickup_yyyymm desc)  AS sum_days,\n    AVERAGE(Days) over(partition by sales_segment,pickup_yyyymm order by sales_segment,pickup_yyyymm desc)  AS AVG_days,\n    Min(Days) over(partition by sales_segment,pickup_yyyymm order by sales_segment,pickup_yyyymm desc)  AS Min_days,\n    MAX (Days) OVER(PARTITION BY sales_segment,pickup_yyyymm ORDER BY sales_segment,pickup_yyyymm DESC)  AS Max_days,\n    CASE \n     WHEN ROW_NUMBER( ) OVER (PARTITION BY sales_segment,pickup_yyyymm ORDER BY Days) =  COUNT(*) OVER (PARTITION BY sales_segment,pickup_yyyymm) / 2 +1\n     THEN \n       CASE \n         WHEN COUNT (*) OVER (PARTITION BY  sales_segment,pickup_yyyymm) MOD 2=1 THEN Days\n         ELSE AVERAGE(Days) OVER(PARTITION BY sales_segment,pickup_yyyymm ORDER BY Days ROWS 1 PRECEDING) \n       END \n     END AS Median_Days     \n    FROM\n    (SELECT \n    sales_segment,\n    pickup_yyyymm,\n    Days\n    FROM\n    (SELECT \n     A.shp_pro_nbr,\n    CASE \n    when b.sales_div_nbr=1 and b.sales_grp_nbr<>2  and b.sales_terr_nbr in (20,21,22,23,24,25,26,27,28,29,70,71,72,73,74,75,76,77,78,79) then 'FSAD'\n     when b.sales_div_nbr=1 and b.sales_grp_nbr<>2  and b.sales_terr_nbr in (30,31,32,33,34,35,36,37,38,39,50,51,52,53,54,55,56,57,58,59) then 'FSMD'\n     when b.sales_div_nbr=1 and b.sales_grp_nbr<>2  and b.sales_terr_nbr in (40,41,42,43,44,45,46,47,48,49) then 'FSSD'\n     when b.sales_div_nbr=1 and b.sales_grp_nbr<>2 then 'FS Other'\n     when b.sales_div_nbr=1 and b.sales_grp_nbr=2 and b.sales_org_nbr=7 and b.sales_area_nbr=3 then 'BSF'\n     when b.sales_div_nbr=1 and b.sales_grp_nbr=2 and b.sales_org_nbr=7 then 'BSI'\n     when b.sales_div_nbr=1 and b.sales_grp_nbr=2 and b.sales_org_nbr=8 then 'Presls'\n     when b.sales_div_nbr=2 then 'WWS'\n     when b.sales_div_nbr=3 then 'Specialty'\n     when b.sales_div_nbr=8 then 'Non-US'\n     when b.sales_div_nbr=90 then 'MKTG'\n     when b.sales_div_nbr=80 then 'WWS'\n     else 'None' end as sales_segment,\n\n    --A.eff_dt,\n    --A.pckup_dt,\n    SUBSTR( CAST(CAST (A.pckup_dt AS DATE) AS DATE FORMAT 'yyyy/mm/dd'),1,7) AS pickup_yyyymm,\n    (CAST( A.eff_dt AS DATE) - CAST (A.pckup_dt AS DATE)  ) AS Days \n     FROM ISH_FEDXFGT_PROD_VIEW_DB.fxf_ship_rev_comp  A\n    INNER JOIN UI_ISH_PROD_DB.sales_quarter_end_alignment B\n    ON A.payor_cust_nbr = B.cf_cust_nbr AND B.align_typ_cd ='P'AND  fscl_qtr_nbr = 4 AND fscl_yr_nbr = 2016 AND B.prim_cvge_flg= 'Y'\n    AND CAST(A.pckup_dt AS DATE) BETWEEN ADD_MONTHS(CURRENT_DATE,-24) AND CURRENT_DATE \n    GROUP BY\n    1,2,3,4\n    ) a\n    GROUP BY 1,2,3)b\n    --QUALIFY ROW_NUMBER( ) OVER (PARTITION BY b. sales_segment,b.pickup_yyyymm ORDER BY b.days)= COUNT(*)  OVER PARTITION BY b.sales_segment,b. pickup_yyyymm) /2+1; \n    --GROUP BY 1,2;\n    --ORDER BY 1,2\n```\n\n    ", "Answer": "\r\nThe last query in my post on MEDIAN shows how to get the it as OLAP result, you need to add another nesting level:\n\n```\nSELECT \n   sales_segment,\n   pickup_yyyymm,\n   ...,\n   MIN(Median_Days) over(partition by sales_segment,pickup_yyyymm) AS Median_Days\nFROM\n (\n   SELECT \n       sales_segment,\n       pickup_yyyymm,\n       Days,\n       COUNT(*) over(partition by sales_segment,pickup_yyyymm)  AS no_of_records,\n       SUM(Days) over(partition by sales_segment,pickup_yyyymm)  AS sum_days,\n       AVERAGE(Days) over(partition by sales_segment,pickup_yyyymm)  AS AVG_days,\n       Min(Days) over(partition by sales_segment,pickup_yyyymm)  AS Min_days,\n       MAX (Days) OVER(PARTITION BY sales_segment,pickup_yyyymm)  AS Max_days,\n       CASE \n        WHEN ROW_NUMBER( ) OVER (PARTITION BY sales_segment,pickup_yyyymm ORDER BY Days) = COUNT(*) OVER (PARTITION BY sales_segment,pickup_yyyymm) / 2 +1\n        THEN \n          CASE \n            WHEN COUNT (*) OVER (PARTITION BY sales_segment,pickup_yyyymm) MOD 2=1 THEN Days\n            ELSE AVERAGE(Days) OVER(PARTITION BY sales_segment,pickup_yyyymm ORDER BY Days ROWS 1 PRECEDING) \n          END \n        END AS Median_Days     \n    FROM\n     (\n       SELECT \n          sales_segment,\n          pickup_yyyymm,\n          Days\n       FROM\n        (\n          SELECT \n             A.shp_pro_nbr,\n             CASE \n               when b.sales_div_nbr=1 and b.sales_grp_nbr<>2  and b.sales_terr_nbr in (20,21,22,23,24,25,26,27,28,29,70,71,72,73,74,75,76,77,78,79) then 'FSAD'\n               when b.sales_div_nbr=1 and b.sales_grp_nbr<>2  and b.sales_terr_nbr in (30,31,32,33,34,35,36,37,38,39,50,51,52,53,54,55,56,57,58,59) then 'FSMD'\n               when b.sales_div_nbr=1 and b.sales_grp_nbr<>2  and b.sales_terr_nbr in (40,41,42,43,44,45,46,47,48,49) then 'FSSD'\n               when b.sales_div_nbr=1 and b.sales_grp_nbr<>2 then 'FS Other'\n               when b.sales_div_nbr=1 and b.sales_grp_nbr=2 and b.sales_org_nbr=7 and b.sales_area_nbr=3 then 'BSF'\n               when b.sales_div_nbr=1 and b.sales_grp_nbr=2 and b.sales_org_nbr=7 then 'BSI'\n               when b.sales_div_nbr=1 and b.sales_grp_nbr=2 and b.sales_org_nbr=8 then 'Presls'\n               when b.sales_div_nbr=2 then 'WWS'\n               when b.sales_div_nbr=3 then 'Specialty'\n               when b.sales_div_nbr=8 then 'Non-US'\n               when b.sales_div_nbr=90 then 'MKTG'\n               when b.sales_div_nbr=80 then 'WWS'\n             else 'None' end as sales_segment,\n\n            --A.eff_dt,\n            --A.pckup_dt,\n            SUBSTR( CAST(CAST (A.pckup_dt AS DATE) AS DATE FORMAT 'yyyy/mm/dd'),1,7) AS pickup_yyyymm,\n            (CAST( A.eff_dt AS DATE) - CAST (A.pckup_dt AS DATE)  ) AS Days \n          FROM ISH_FEDXFGT_PROD_VIEW_DB.fxf_ship_rev_comp  A\n          INNER JOIN UI_ISH_PROD_DB.sales_quarter_end_alignment B\n          ON A.payor_cust_nbr = B.cf_cust_nbr AND B.align_typ_cd ='P'AND  fscl_qtr_nbr = 4 AND fscl_yr_nbr = 2016 AND B.prim_cvge_flg= 'Y'\n          AND CAST(A.pckup_dt AS DATE) BETWEEN ADD_MONTHS(CURRENT_DATE,-24) AND CURRENT_DATE \n          GROUP BY 1,2,3,4\n        ) a\n       GROUP BY 1,2,3\n    )b\n ) as dt\n```\n\n\nI removed all the order by sales_segment,pickup_yyyymm desc because it's not needed.\n\nAnother remark on the pickup_yyyymm calculation, you don't need a substring:\n\n```\nTRIM(CAST (A.pckup_dt FORMAT 'yyyy/mm')) AS pickup_yyyymm,\n```\n\n\nWould be more efficient if there's no cast to string at all:\n\n```\nEXTRACT(YEAR FROM A.pckup_dt) * 100 + EXTRACT(MONTH FROM A.pckup_dt)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How can I calculate the median of values in SQLite?\r\n                \r\nI'd like to calculate the median value in a numeric row. How can I do that in SQLite 4?\n    ", "Answer": "\r\nLet's say that the median is the element in the middle of an ordered list.\n\nSQLite (4 or 3) does not have any built-in function for that, but it's possible to do this by hand:\n\n```\nSELECT x\nFROM MyTable\nORDER BY x\nLIMIT 1\nOFFSET (SELECT COUNT(*)\n        FROM MyTable) / 2\n```\n\n\n\n\nWhen there is an even number of records, it is common to define the median as the average of the two middle records.\nIn this case, the average can be computed like this:\n\n```\nSELECT AVG(x)\nFROM (SELECT x\n      FROM MyTable\n      ORDER BY x\n      LIMIT 2\n      OFFSET (SELECT (COUNT(*) - 1) / 2\n              FROM MyTable))\n```\n\n\nCombining the odd and even cases then results in this:\n\n```\nSELECT AVG(x)\nFROM (SELECT x\n      FROM MyTable\n      ORDER BY x\n      LIMIT 2 - (SELECT COUNT(*) FROM MyTable) % 2    -- odd 1, even 2\n      OFFSET (SELECT (COUNT(*) - 1) / 2\n              FROM MyTable))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Position of median blocks\r\n                \r\nI have a problem in  matrix (A) 9*9, I need to extract median for each block 3*3.\nAlso, I need to know the position of the median in each block.\n\nNote: \nI know how can extract the median by using\nm=median(median(B));\nand B is block in matrix\nB = A(i:i+L-1, j:j+L-1);\n\nthank you.\n    ", "Answer": "\r\nIf you have the image processing toolbox installed you can use:\n\n```\nmedianBlocks = blockproc(A,[3,3],@(X) ones(size(X.data))*median(X.data(:)))\nA == medianBlocks\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "3D median filter in Matlab\r\n                \r\nI need to do some median filtering in a 3D neighbourhood (say 5x5x5) on a volume. Matlab does not have a 3D median filter (at least not the version I am using). Is there a way to ensure the 3D geometry while doing 1D median filtering? That is, restructuring the 3D matrix using Matlab's functions (like reshape, permute, ...) to convert the 3D matrix into 1D and do the median filtering while knowing the values used in the 1D median filter are the ones which define the 3D neighbourhood. Take the 5x5x5 neghbourhood. Then we would have 124 voxels around the central voxel whose value is to be substituted by median of the 124 voxels surrounding it. How should I then convert my 3D matrix to a 1D vector so when applying the median filtering I remain faithful to the 3D geometry?\n\nSorry if I wasn't able to be more clear.\n\nThanks\n    ", "Answer": "\r\nWould it be acceptable to do the median filtering in separable passes, e.g., first a 5x5 medfilt2 operation in xy and then a 5x1 medfilt along z? \n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to get median is SAS?\r\n                \r\nHow to get median is SAS?\n\nI wrote a script but it doesn't pront me the median\n\nhere is my script:\n\n```\n   FILENAME book1 URL \"http://www.math.tau.ac.il/~liadshek/Books.txt\";\n   DATA book;   \n   INFILE book1 firstobs=2;\n   INPUT year numberBooks words copies annual author$;\n   RUN;\n\n   PROC MEANS median;\n   VAR year numberBooks words copies annual;\n   OUTPUT out = MeanForData;\n   RUN;\n```\n\n    ", "Answer": "\r\nThis code works fine for me in Base SAS.\n\nYou just need to open the output window to see the results (they are sent there via the Output Delivery System).\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median c# wrong calculate\r\n                \r\nI have problem with the calculation of the median when I put 1,2, 3 my median is = 44 i don't know why\n\n```\ndouble wynik = 0;\nstring x1 = textBox1.Text;\nstring[] tab = x1.Split(',');\nint n = tab.Length;\n\nArray.Sort(tab);\n\nif (n % 2 == 0)\n{\n    double c = x1[(n / 2) -1];\n    double v = x1[(n / 2)];\n    wynik = (c + v) / 2;\n}\nelse\n    wynik = x1[n / 2];\n\n        textBox2.Text = wynik.ToString();\n```\n\n    ", "Answer": "\r\nThat is because ```\n44```\n is the ASCII value of ```\n,```\n. And in your ```\nstring```\n, using your current method now, the median is the comma character ```\n,```\n value = ```\n44```\n\n\nTo get the median, consider of splitting the string by ```\n,```\n and then convert each value to numeric data (like ```\nint```\n) and then sort it and simply get the middle value among the sorted data..\n\n```\ndouble wynik = 0;\nstring x1 = textBox1.Text;\nint[] tab = x1.Split(',').Select(x => Convert.ToInt32(x)).ToArray(); //this is the trick\nint n = tab.Length;    \nArray.Sort(tab);\nint median = tab[n/2]; //here is your median\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median in a list of n elements\r\n                \r\nI'm trying to determine the median of a list of n elements and I just can't see what I am doing wrong.  \n\nI have ```\nsorted(list)```\n so that the elements are in the right order but I get a median of ```\n5.0```\n instead of the correct ```\n4.5```\n.\n\nMy code looks like this.\n\n```\ndef median(lista):\n    median_even1 = 0\n    median_even2 = 0\n    median_sum = 0\n    median_average = 0\n    if len(lista) % 2 == 0:\n        sorted(lista)\n        median_even1 += lista[(len(lista)/2)]\n        median_even2 += lista[(len(lista)/2 - 1)]\n        median_sum = median_even1 + median_even2\n        median_average = (median_sum) // (2.0)\n        return median_average\n    else:\n        sorted(lista)\n        return lista[(len(lista) / 2)]\n```\n\n\nAny suggestions?\n    ", "Answer": "\r\n```\nsorted()```\n isn't in place, it returns a new sorted list. Either reassign it (```\nlista = sorted(lista)```\n) or use ```\nlist.sort()```\n instead (```\nlista.sort()```\n).\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding Median of Array with Selection Sort\r\n                \r\nI'm trying to find the median from an unsorted array in Java. First, I need to use the selection sort technique to sort the array, and I cannot use any Java library methods for sorting (so no Arrays.sort(array)). Also, I cannot sort the entire array either. I can only sort as many elements as necessary to find the median of the array. I suppose for an even array, it would be just half of the elements plus one (then find the average of the last two elements), and for an odd array it would just be half of the elements (the last being the median).\n\nSo I'm not sure how to stop the selection sort at just the right time and find the median from the last element or two of the partly sorted array. Below is what I have so far.\n\n```\nimport java.util.Arrays;\n\npublic class EfficientMedian\n{\n    public static void median(int[] values)\n    {\n        int i, j, temp;\n        double median;\n\n        //selection sort below\n        for (i = 0; i < values.length - 1; i++)\n        {\n            for (j = i + 1; j < values.length; j++)\n            {\n                if (values[i] > values[j])\n                {\n                    temp = values[i];\n                    values[i] = values[j];\n                    values[j] = temp;\n                }\n            }\n        }\n        if (values.length % 2 == 0) //if the array is even\n        {\n            median = values[values.length/2]; //just a placeholder\n        }\n        else //if the array is odd\n        {\n            median = values[values.length/2];\n        }\n        System.out.println(Arrays.toString(values));\n        System.out.println(median);\n    }\n    public static void main(String[] args)\n    {\n        int[] array1 = {567, 2, 600, 6, 601}, array2 = {45, 300, 46, 49};\n        median(array1);\n        median(array2);\n    }\n}\n```\n\n    ", "Answer": "\r\nYour first loop selects elements to sort. If you only need median, you only need to sort values.length/2 elements. So you should edit this:\n\n```\nfor (i = 0; i < values.length - 1; i++)\n    {\n        ...\n    }\n```\n\n\nto\n\n```\nfor (i = 0; i < values.length/2; i++)\n    {\n        ...\n    }\n```\n\n\nand fyi in the \"length of the array is odd\" case, the convention is to average middle two values.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find the median of an array\r\n                \r\nI wrote some code that returns the median of an unsorted odd numbered array, but it does not return the median of an even numbered array.  \n\nI know that in order to find the median of an even numbered array, you have to take the middle two numbers of the array, average them, and that's the median. I can't translate that into usable code. Aside from the obvious verbosity of this code, the issue seems to be with lines 7-8 and I don't see why.\n\nI prefer hints to answers, but if you rather post some fixed code, I can accept that too.\n\n```\ndef media(array)\n  sorted = array.sort\n  list = sorted.length\n  if list %2 != 0\n    (list + 1) / 2.0\n  else\n    even = ((list.to_f + 2) / 2) + ((list.to_f / 2)\n    return (even/2)\n  end\nend\n```\n\n    ", "Answer": "\r\nI'm going to just jump in with a solution here...\n\n```\ndef median(ary)\n  mid = ary.length / 2\n  sorted = ary.sort\n  ary.length.odd? ? sorted[mid] : 0.5 * (sorted[mid] + sorted[mid - 1])\nend\n```\n\n\nEdit - I've incorporated ```\n.odd?```\n as per BroiSatse's suggestion.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Count median grouped by day\r\n                \r\nI have a script which counts median value for all table data:\n\n```\nSELECT avg(t1.price) as median_val FROM (\nSELECT @rownum:=@rownum+1 as `row_number`, d.price\n  FROM mediana d,  (SELECT @rownum:=0) r\n  WHERE 1\n  ORDER BY d.price\n) as t1, \n(\n  SELECT count(*) as total_rows\n  FROM mediana d\n  WHERE 1\n) as t2\nAND t1.row_number>=total_rows/2 and t1.row_number<=total_rows/2+1;\n```\n\n\nNow I need to get median value not for all table values, but grouped by date. Is it possible? http://sqlfiddle.com/#!2/7cf27 - so as result I will get 2013-03-06 - 1.5 , 2013-03-05 - 3.5. \n    ", "Answer": "\r\nI hope I didn't loose myself and overcomplicate things, but here's what I came up with:\n\n```\nSELECT sq.created_at, avg(sq.price) as median_val FROM (\nSELECT t1.row_number, t1.price, t1.created_at FROM(\nSELECT IF(@prev!=d.created_at, @rownum:=1, @rownum:=@rownum+1) as `row_number`, d.price, @prev:=d.created_at AS created_at\nFROM mediana d, (SELECT @rownum:=0, @prev:=NULL) r\nORDER BY created_at, price\n) as t1 INNER JOIN  \n(\n  SELECT count(*) as total_rows, created_at \n  FROM mediana d\n  GROUP BY created_at\n) as t2\nON t1.created_at = t2.created_at\nWHERE 1=1\nAND t1.row_number>=t2.total_rows/2 and t1.row_number<=t2.total_rows/2+1\n)sq\ngroup by sq.created_at\n```\n\n\nWhat I did here, is mainly just to reset the rownumber to 1 when the date changes (it's important to order by created_at) and included the date so we can group by it. In the query which calculates total rows I also included created_at, so we can join the two subqueries.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median in pandas dropping center value\r\n                \r\nI am working in pandas and want to implement an algorithm that requires I assess a modified centered median on a window, but omitting the middle value. So for instance the unmodified might be:\n```\nser = pd.Series(data=[0.,1.,2.,4.5,5.,6.,8.,9])\nmed = ser.rolling(5,center=True).median()\nprint(med)\n```\n\nand I would like the result for med[3] to be 3.5 (the median of 1.,2.,4.,6.) rather than 4.5 which the ordinary windowed median. Is there an economical way to do this?\n    ", "Answer": "\r\nTry:\n```\nimport numpy as np\nimport pandas as pd\nser = pd.Series(data=[0.,1.,2.,4.5,5.,6.,8.,9])\nmed = ser.rolling(5).apply(lambda x: np.median(np.concatenate([x[0:2],x[3:5]]))).shift(-2)\nprint(med)\n```\n\nWith output:\n```\n0     NaN\n1     NaN\n2    2.75\n3    3.50\n4    5.25\n5    6.50\n6     NaN\n7     NaN\n```\n\nAnd more generally:\n```\nrolling_size = 5\nser.rolling(rolling_size).apply(lambda x: np.median(np.concatenate([x[0:int(rolling_size/2)],x[int(rolling_size/2)+1:rolling_size]]))).shift(-int(rolling_size/2))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "MySQL: count median value\r\n                \r\nI'm trying to count median for prices.\nI founded answer how to do it here- Simple way to calculate median with MySQL, but it doesn't work for me, I get empty result.\nCan anyone help?\n\n```\nSELECT x.price from mediana as x, mediana y\nGROUP BY x.price\nHAVING SUM(SIGN(1-SIGN(y.price-x.price))) = (COUNT(*)+1)/2\n```\n\n    ", "Answer": "\r\nAFAIU your question.\n\nThis answer by @velcrow calculates median value successfully. Unfortunately when there is even number of rows instead of calculating the mean value of 2 middle rows query just returns second value. I've made a couple of modifications to the query to fit your needs:\n\n```\n--average value for middle rows\nSELECT avg(t1.price) as median_val FROM (\nSELECT @rownum:=@rownum+1 as `row_number`, d.price\n  FROM mediana d,  (SELECT @rownum:=0) r\n  WHERE 1\n  -- put some where clause here\n  ORDER BY d.price\n) as t1, \n(\n  SELECT count(*) as total_rows\n  FROM mediana d\n  WHERE 1\n  -- put same where clause here\n) as t2\nWHERE 1\n--this condition should return one record for odd number of rows and 2 middle records for even.\nAND t1.row_number>=total_rows/2 and t1.row_number<=total_rows/2+1; \n```\n\n\nTest on sample data on sqlfiddle\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median in a data frame\r\n                \r\nI would like to calculate the median of the below data frame\n```\nindex t1 t2 t3 t4\n    10  1  4  7 10\n    20  2  5  8 11\n    30  3  6  9  0\n    40  1  0  0  0\n```\n\nI follow the following steps:\nStep 1: Sum by column\n```\nindex  t1   t2  t3  t4  sum\n    10  1    4   7   10  22\n    20  2    5   8   11  26\n    30  3    6   9   0   18\n    40  0    1   0   0   1\n \n```\n\nStep2: sort sum variable\n```\nindex  t1   t2  t3  t4  sum\n   40  0    0   0   10  1\n   30  3    6   9   0   18\n   10  1    4   7   10  22\n   20  2    5   8   11  26\n```\n\nStep 3: Calculate the median of the index variable\n```\nmedian of index = (30 + 10) / 2 =20\n```\n\nStep 4: Return the specific index value\n```\nMedian(df)=20\n```\n\nI don't know how to calculate step 3 and step 4.\nSample data:\n```\ndf<-structure(list(index=c (10,20,30,40), \n                   t1 = c(1, 2, 3, 1), \n                   t2 = c(4, 5, 6, 0), \n                   t3 = c(7, 8,9,  0),\n                   t4 = c(10, 11, 0, 0)), row.names = c(NA,4L), class = \"data.frame\")\n                                                            \ndf\n```\n\n    ", "Answer": "\r\nYour question is not well defined, so I took some liberties\n\n```\ndf$sum=rowSums(subset(df,select=-c(index)))```\n\n```\ndf=df[order(df$sum),]```\n\n```\nidx=median(df$index)```\n (your calculation is \"wrong\")\n```\nwhich.min(abs(df$index-idx))```\n\n\nwhich returns 2, the index which is closest to the \"median\" index, in the sorted dataframe.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median with groupby and frequency\r\n                \r\nSuppose I have this dataframe called 'market'\n\n```\nmarket = pd.DataFrame({'product': ['milk', 'milk', 'milk', 'bread', 'bread'], \n                   'frequency': [4,2,6,3,5],\n                  'price_each': [3,4,5,10,8]})\nmarket\n```\n\n\nThis will be\n\n```\nproduct frequency price_each\nmilk    4         3\nmilk    2         4\nmilk    6         5\nbread   3         10\nbread   5         8\n```\n\n\nHow to calculate this median properly by groupby product and it use frequency?\n\nWhat I have done (but get wrong result)\n\n```\nmarket.groupby('product')['price_each'].median()\n```\n\n\nThe real and expected result is\n\n```\nproduct   median of price each\nmilk      4.5       \nbread     8       \n```\n\n    ", "Answer": "\r\nUsing ```\nnumpy.repeat```\n and ```\nnumpy.median```\n:\n\n```\nnew_df = market.groupby('product').apply(lambda x: np.median(np.repeat(x['price_each'], x['frequency'])))\nprint(new_df)\n```\n\n\nOutput:\n\n```\nproduct\nbread    8.0\nmilk     4.5\ndtype: float64\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of an array in Javascript?\r\n                \r\nI am trying to find the median of an array.\nI have done quite some research and if this seemed to be asked several times, no answers were satisfying.\n\nCreating my array works perfectly but when I call the function the array is sorted but it returns different values, from NaN to the first value of the array\n\nHow to find the median value of the length, and then from it's index find the median value of the array?\n\n\r\n\r\n```\nvar ar1 = [];\r\n\r\nwhile (true) {\r\n  var enterValues = prompt(\"enter your values\");\r\n  if (enterValues != \"\") {\r\n    ar1.push(enterValues);\r\n  } else {\r\n    break;\r\n  }\r\n}\r\n\r\nfunction calcMedian() {\r\n  \r\n  var half = Math.floor(ar1.length / 2);\r\n  ar1.sort(function(a, b) { return a - b;});\r\n\r\n  if (ar1.length % 2) {\r\n    return ar1[half];\r\n  } else {\r\n    return (ar1[half] + ar1[half] + 1) / 2.0;\r\n  }\r\n}\r\n\r\nconsole.log(ar1);\r\nconsole.log(ar1.length);\r\nconsole.log(calcMedian());\r\nconsole.log(ar1);```\n\r\n\r\n\r\n\n\n(ps:to stop filling the array just enter without value.)\n    ", "Answer": "\r\nYou have 2 problems in your code:\n\n\nYou calculate ```\nhalf```\n before you fill the array so it will always be 0.\nYou save the numbers as string so when you add them you don;t get the right results.\n\n\nWorking :\n\n\r\n\r\n```\nvar ar1 = [];\r\n\r\n\r\nwhile (true) {\r\n  var enterValues = prompt(\"enter your values\");\r\n  if (enterValues != \"\") {\r\n    ar1.push(+enterValues);\r\n  } else {\r\n    break;\r\n  }\r\n}\r\n\r\nfunction calcMedian() {\r\n  var half = Math.floor(ar1.length / 2);\r\n  ar1.sort(function(a, b) { return a - b;});\r\n\r\n  if (ar1.length % 2) {\r\n    return ar1[half];\r\n  } else {\r\n    return (ar1[half] + ar1[half] + 1) / 2.0;\r\n  }\r\n}\r\n\r\nconsole.log(ar1);\r\nconsole.log(ar1.length);\r\nconsole.log(calcMedian());\r\nconsole.log(ar1);```\n\r\n\r\n\r\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "find median in O(log n)\r\n                \r\nThe question is how we can find the median of a receiving stream of integer values (e.g. for 12, 14, 252, 243, 15 the median is 15) in O(log N) where N is number of values. Please note that we have a stream of integer values, hence by receiving each value, we have to re-find the median.\n\nExample: \n\n```\n  | Input | median\n1 |   12  |   12\n2 |   14  |   13 = (12+14)/2\n3 |   252 |   14\n.\n.\n.\n```\n\n\nP.S: An example of using this algorithm could be filtering an image.\n    ", "Answer": "\r\nOkay, with the update to the question so the intent is clear (not just find the median, but re-find the median each time you receive a new number), I think there's a way.\n\nI'd start with a pair of heaps: a max-heap and a min-heap. The min-heap will contain the numbers larger than the median, and the max-heap the numbers smaller than the median. When you receive the first number, that's your median. When you receive the second, you insert the smaller of the two into the max-heap, and the larger of the two into the min-heap. The median is then the average of the smallest on the min-heap, and the largest on the max-heap. \n\nAlong with the two heaps, you'll want storage for a single integer that will be the current median when you've received an odd number of inputs. You'll populate that fairly simply: if you receive an input with it currently full, you basically sort those two items (the new number and the old median) and insert the smaller into the heap for the smaller items, and larger into the heap for larger items. Your new median will then be the mean of the bases of those two heaps (and you'll mark the other storage location as empty).\n\nWhen you receive a new number with that empty, you'll compare the new number to the median. If it's between the numbers as the bases of the heaps, it's the new median, and you're done. Otherwise, extract the number from the base that must hold the median (larger numbers if the new number is larger, smaller if it's smaller) and put that into the median spot, then insert the new number into the heap that came from.\n\nAt least if memory serves, the extract/insert into a heap should be O(log N). I believe everything else involved should be constant complexity.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to calculate median of variables?\r\n                \r\nsuppose i have few variables ```\na```\n, ```\nb```\n, ```\nc```\n, and ```\nd```\n have some numerical values. How can I calculate their median in MATLAB?\n\n```\nx= median(a,b,c,d); is not working.\n```\n\n\nNote: ```\na```\n, ```\nb```\n, ```\nc```\n, and ```\nd```\n are variables defined by a few equations and have numerical values. \n    ", "Answer": "\r\n```\nmedian```\n is expecting a vector:\n\n```\nx= median([a,b,c,d]);\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "find median excluding diagonal in R\r\n                \r\nI'm having trouble with R programming. From a matrix, how can I find the median of each row exclude the diagonal?\n\nEx: matrix 4x4\n\n```\n0 1 2 3 \n\n1 0 1 2\n\n2 1 0 1\n\n3 2 1 0\n```\n\n\nI want to find the median of each row excluding the diagonal (in this ex, the diag=0)\n\nI've tried:\n\n```\ndiag(A) <- NA\nmean(A, na.rm = TRUE) # doesn't work\n\napply(A, 1, median) # it works but the calculation including the diagonal. \n```\n\n    ", "Answer": "\r\nTry this:\n\n```\nA <- matrix(c(0,1,2,3,1,0,1,2,2,1,0,1,3,2,1,0),nrow=4)\nsapply(1:4, function(x) median(A[x,-x]))\n\n[1] 2 1 1 2\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Complicated ordering by median in MySQL\r\n                \r\nExample table:\n\n```\nage | fruit | number_bought |\n20  | apple | 3000000       |\n20  | apple | 20            |\n20  | apple | 60            |\n20  | apple | 30            |\n20  | apple | 50            |\n20  | apple | 4             |\n20  | banana| 40            |\n30  | grape | 400           |\n30  | grape | 450           |\n30  | grape | 500           |\n```\n\n\nSimply a list of how many of a specific fruit a person of a specific age buys while he is that age.\n\nNow, I need to sort this table by \"most popular fruits\", grouped by age and fruit.\n\nAnd here's the tricky part, I want to use MEDIAN for calculating popularity, not just the average number. Since some people might be far off the normal (he might be a salesman), like the 3000000 in the example above, while the \"average 20 year old\" buys alot less, as you can see from the example.\n\nThe above table, sorted by median popularity should come out like this:\n\n```\nage | fruit | median |\n30  | grape | 450    |\n20  | apple | 40     |\n20  | banana| 40     |\n```\n\n\nNow if I simply had used \"average\" calculation,  20, apple would have won the popularity, simply because of one salesman. So thats why I want to use median.\n    ", "Answer": "\r\nThe common median queries seem to struggle when there are an even number of items (for example, with apple in your test data).\n\nSimple way round that would be :-\n\n```\nSELECT y.age, x.fruit, AVG(x.number_bought) AS number_bought\nfrom data x\nINNER JOIN data y\nON x.age = y.age\nAND x.fruit = y.fruit\nGROUP BY y.age, x.fruit, x.number_bought\nHAVING SUM(SIGN(1-SIGN(y.number_bought-x.number_bought))) = FLOOR((COUNT(*)+1)/2)\nORDER BY number_bought DESC;\n```\n\n\nThis isn't strictly accurate as it is just taking the one before the middle one (ie, the median of the 6  records would be the one in position 3.5 - this just uses FLOOR and gets record number 3).\n\nPossibly slightly more accurate would be this which will get the mean of the 2 records either side when there are an even number\n\n```\nSELECT age, fruit, AVG(number_bought) AS number_bought\nFROM \n(\n    SELECT y.age, x.fruit, AVG(x.number_bought) AS number_bought\n    from data x\n    INNER JOIN data y\n    ON x.age = y.age\n    AND x.fruit = y.fruit\n    GROUP BY y.age, x.fruit, x.number_bought\n    HAVING SUM(SIGN(1-SIGN(y.number_bought-x.number_bought))) = FLOOR((COUNT(*)+1)/2)\n    OR SUM(SIGN(1-SIGN(y.number_bought-x.number_bought))) = CEIL((COUNT(*)+1)/2)\n) Sub1\nGROUP BY age, fruit\nORDER BY number_bought DESC;\n```\n\n\nSQL fiddles here:-\n\nhttp://www.sqlfiddle.com/#!2/f1b49/13\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Trying to compute row wise median, and then group the values by higher and lower than the median\r\n                \r\nTrying to sort a dataframe with time series of stock betas. Would like to create two portfolios, one with stocks that have higher than median beta, and another with lower than median beta for each month. I need to do this row-wise, as each row is a new month.\nThis is what i have tried so far. not working... I've removed Names which in our dataset is the variable containing dates. Then i have converted characters to NA, and lastly trying to get a new column with median values for each row.\nHave not started sorting yet, no idea where to begin here.\nThanks for any help.\nMy data looks like this:\n\n```\nOMXCB_END_MED <- OMXCB_END %>%\n select(-Names) %>%\n mutate(across(where(is.character), ~na_if(.,\"N/A\"))) %>%\n rowwise() %>%\n mutate(median = median(across(cols = everything()), na.rm = TRUE))\n```\n\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median of a list\r\n                \r\nWrite a program that receives from the keyboard a series of integers and positive numbers in ascending order. The program should stop receiving numbers when the input is a negative number. The program should then print the median of the series of numbers on the screen.\nprogram on python\nhere what i already did:\n```\nimport statistics\n  \nlst = []\nn = int(input())\n\nwhile True:\n    n = int(input())\n    if n < 0:\n        break\n\nmedian = statistics.median(lst)\nprint(\"Median of the given range is :\", median)\n```\n\n    ", "Answer": "\r\nFor line 4, ```\nn = int(input())```\n is not needed as line 7 will change the value of n. Therefore, remove line 4 and add a new line ```\nlst.append(n)```\n to append the input n into the list.\nI believe this was what you were going for:\n```\nimport statistics\n\nlst = []\n\nwhile True:\n    n = int(input())\n    lst.append(n)\n    if n < 0:\n        break\n\n\nmedian = statistics.median(lst)\nprint(\"Median of the given range is :\", median)\n```\n\nHope it helps!\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of three values\r\n                \r\nI am trying to write a C program that takes 3 values as function arguments and returns the median. The program was running quite well - until I realized it did not work with same values twice or more.\nFor examples if the input is 1,2,3 - I get 2 ,correct median but if the input is 1,2,1 or 1,1,1 ..The loop keeps repeating from beginning .I think I have the logic right but there must be some tiny error which I am making .\n\nMy attempt :\n\n```\nint median(int firstInt,int secondInt, int thirdInt) {\n\n   if (secondInt>firstInt && secondInt>thirdInt || \n      thirdInt>firstInt && firstInt>secondInt) {\n      printf(\"The median value is %d\\n\", firstInt);\n   }\n   if (firstInt>secondInt && secondInt>thirdInt || \n      thirdInt>secondInt && secondInt>firstInt) {\n      printf(\"The median value is %d\\n\", secondInt);\n   }\n   if (firstInt>thirdInt && thirdInt>secondInt || \n      secondInt>thirdInt && thirdInt>firstInt) {\n      printf(\"The median value is %d\\n\", thirdInt);\n   }\n}\n\nvoid main() {\n\n   int count = 100; \n   int firstInt,secondInt,thirdInt;\n\n   while(count--) \n   {\n\n      printf(\"Enter first Integer : \"); \n      scanf(\"%d\", &firstInt); \n      printf(\"Enter second Integer : \"); \n      scanf(\"%d\", &secondInt); \n      printf(\"Enter third Integer : \");\n      scanf(\"%d\", &thirdInt); \n      median(firstInt, secondInt, thirdInt); //calling\n\n   }\n}\n\nInput : 1,2,1\nOutput :Enter first integer : // WHY is this happening?\n```\n\n    ", "Answer": "\r\nThe first thing you should do is decide what your function is meant to do. Its signature and name suggest it's supposed to return the median but the code actually prints it (and, if it just prints it, it should probably have a ```\nvoid```\n return type).\nThe printing is probably best left to the caller, leaving the function to just calculate and return the median. This makes it a much more general-purpose function.\nIn any case, it's the use of ```\n>```\n rather than ```\n>=```\n which is causing your problem here since data sets where two or more numbers are identical will tend to result in none of the ```\nif```\n statements being true.\nA \"cleaner\" solution (in my opinion) would just be to cover all of the six possibilities in turn:\n```\nint median (int a, int b, int c) {\n    if ((a <= b) && (b <= c)) return b;  // a b c\n    if ((a <= c) && (c <= b)) return c;  // a c b\n    if ((b <= a) && (a <= c)) return a;  // b a c\n    if ((b <= c) && (c <= a)) return c;  // b c a\n    if ((c <= a) && (a <= b)) return a;  // c a b\n    return b;                            // c b a\n}\n```\n\nNote that I've used ```\n<=```\n here, simply because it more closely aligns the conditions with the sequences shown in the comment. The important thing is to use an inclusive comparison operator, whether ```\n>=```\n or ```\n<=```\n, rather than an exclusive one like ```\n>```\n.\nYou could even refactor out the comparison so that the code is more readable, with something like:\n```\nstatic int is_ordered(int x, int y, int z) {\n    return (x <= y) && (y <= z);\n}\nint median (int a, int b, int c) {\n    if (is_ordered(a, b, c)) return b;\n    if (is_ordered(a, c, b)) return c;\n    if (is_ordered(b, a, c)) return a;\n    if (is_ordered(b, c, a)) return c;\n    if (is_ordered(c, a, b)) return a;\n    return b;                          // Only one left is c, b, a.\n}\n```\n\nI wouldn't initially worry about the extra function calls involved here unless you want to call it many, many times per second. Even then, you may find the compiler is smart enough to inline the function anyway. My general advice is to optimise for readability first, then worry about performance only if it becomes an issue.\n\nThere is, of course, another option (there almost always is).\nSince there are only three values, it's a simple matter to sort them and just return the middle one. It doesn't have to be a complicated sort since you can just use an unrolled bubble sort created from a few conditionals. The code for doing that is shown below:\n```\nint median (int a, int b, int c) {\n    // Unrolled bubble sort, then return middle one.\n\n    if (a > b) { int t = a; a = b; b = t; }\n    if (b > c) { int t = b; b = c; c = t; }\n    if (a > b) { int t = a; a = b; b = t; }\n\n    return b;\n}\n```\n\nPersonally, I don't think that's as readable as the earlier code but, if you prefer it, it's certainly functional.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Position of median within a list\r\n                \r\nI have an unsorted array and I need the position of the median. I know there are several algorithms to calculate the median of a given array in O(n), but all of them include some kind of reordering of the array, like in median of medians and random selection.\n\nI'm not interested int he median itself, only its position within the array interests me.\n\nIs there any way I can do this in O(n)? Keeping track of all the swaps will create a massive overhead, so I'm looking for another solution.\n    ", "Answer": "\r\nLet's say you have an array of data, and you would like to find its median:\n\n```\ndouble data[MAX_DATA] = ...\n```\n\n\nCreate an array of indexes, and initialize each index to its own position, like this:\n\n```\nint index[MAX_DATA];\nfor (int i = 0 ; i != MAX_DATA ; i++) {\n    index[i] = i;\n}\n```\n\n\nNow implement the linear median algorithm with the following changes:\n\n\nWhen the original algorithm compares ```\ndata[i]```\n to ```\ndata[j]```\n, replace with a comparison of ```\ndata[index[i]]```\n to ```\ndata[index[j]]```\n\nWhen the original algorithm swaps ```\ndata[i]```\n and ```\ndata[j]```\n, swap ```\nindex[i]```\n and ```\nindex[j]```\n instead.\n\n\nSince the elements of ```\ndata```\n remain in their place all the time, the modified algorithm will produce the position of the median in the unmodified array, rather than its position in the array with some elements moved to different spots.\n\nIn C++ you can implement this with pointers instead of indexes, and use ```\nstd::nth_element```\n on the container of pointers, like this:\n\n```\nvector<int> data = {1, 5, 2, 20, 10, 7, 9, 1000};\nvector<const int*> ptr(data.size());\ntransform(data.begin(), data.end(), ptr.begin(), [](const int& d) {return &d;});\nauto mid = next(ptr.begin(), data.size() / 2);\nnth_element(ptr.begin(), mid, ptr.end(), [](const int* lhs, const int* rhs) {return *lhs < *rhs;});\nptrdiff_t pos = *mid - &data[0];\ncout << pos << endl << data[pos] << endl;\n```\n\n\nHere is a link to a demo on ideone.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "MySQL Building median stored function\r\n                \r\nI would like to build a stored function to compute quantils within groups. I have a very nice SQL from the net to compute median: http://geekyisawesome.blogspot.ch/2012/04/finding-median-value-using-mysql-sql.html. This SQL allows to compute the median of one variable of the table. I would like to compute median by grouping. To do this first I have to prepare a table with increasing counter within groups. Even this for me was a challenge so I got help from stackoverflow: MySQL - Counter within group. Putting all together I'm able to compute median within groups:  \n\n```\n-- (01) Create table fake table:\n\nCREATE TABLE test01.tb (\ng CHAR(1)\n, x  INTEGER\n);\n\nINSERT INTO test01.tb (g, x)\nVALUES\n('a',10)\n, ('a',2)\n, ('a',0)\n, ('b',10)\n, ('b',10)\n, ('b',10)\n, ('b',1)\n, ('b',1)\n, ('b',1)\n;\n\n-- (02) Create enumerated table\n\nCREATE TABLE tb2 AS       \nSELECT a.g, a.x\n       , @counter := if (g = @prev_g, @counter + 1, 1) counter\n       , @prev_g := g\n       , (SELECT COUNT(*)\n         FROM tb b\n         WHERE a.g = b.g\n         )  AS max_counter\nFROM tb a, (SELECT @counter := 0, @prev_g := NULL) INIT\nORDER BY a.g, a.x\n;\n\n-- (03) Compute median within group\n\nSELECT g, AVG(x)\nFROM tb2\nWHERE counter IN (FLOOR((max_counter+1)*0.5),CEIL((max_counter+1)*0.5))\nGROUP BY g\n;\n```\n\n\nMy idea is to build a function QUANTILE which allows to compute quantils like this:\n\n```\nSELECT g, QUANTILE(x,0.5) median\nFROM tb\nGROUP BY g\n;\n```\n\n\nI never built stored functions/procedures and looking in the net the tables in the stored functions are hard coded. So, I'm wonder if it is possible to build such a generic function. Thanks for advices.\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Javascript median using for\r\n                \r\nSo I'm trying to learn javascript, and I want to find the median of some numbers that I insert into a prompt when I click on the button \"find median\".\n```\n  function Media()\n {\n     var n = prompt(\"number of elements?\");\n     var i = 1;\n     var s = 0;\n     \n     for (i=1;i<=n;i++)\n     {\n         var m = prompt(\"insert # \" +i);\n         s = s+m;\n     }\n     var media = s/n;\n     document.getElementById(\"rezultat\").innerHTML = \"result: \" +media\n }\n```\n\nI made a test with two numbers, 1 and 2, and the median was 6, and i cant figure what i've done wrong\n    ", "Answer": "\r\nYou should parse the result of ```\nprompt```\n to an integer;\nHow to convert a string to an integer in JavaScript?\n\r\n\r\n```\n function Media() {\n     var n = parseInt(prompt(\"number of elements?\"));\n     var i = 1;\n     var s = 0;\n     \n     for (i=1;i<=n;i++)\n     {\n         var m = prompt(\"insert # \" +i);\n         m = parseInt(m);\n         s = s+m;\n     }\n     var media = s/n;\n     document.getElementById(\"rezultat\").innerHTML = \"result: \" +media\n }\n \n Media();```\n\r\n```\n<div id='rezultat' />```\n\r\n\r\n\r\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of Medians vs TreeMap\r\n                \r\nI was wondering if using a ```\nTreeMap```\n to go through the array of numbers and get a sorted result be a better option than using the Median of Medians algorithm to find the K-th largest element in an unsorted array? Wont both work in linear time?\n    ", "Answer": "\r\n\n  Wont both work in linear time?\n\n\nOf course they would: once the data is in a tree map, finding K-order statistics is an O(N) operation*. Moreover, chances are, the one operating on ```\nTreeMap```\n would have a smaller constant factor, unless you choose to write the sorted container out into an array.\n\nThe catch is that building ```\nTreeMap```\n is O(N*log2N), while Median of Medians algorithm works on unsorted data, thus requiring no preliminary steps. Therefore, using ```\nTreeMap```\n on previously unordered collection would be asymptotically more expensive.\n\n* You can make it an O(log2N) by augmenting tree nodes with the count of items in each subtree.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate the median in an array\r\n                \r\nI am doing an assignment in Java about this:\nHave the function ArrayChallenge(arr) read the array of numbers stored in arr which will contain a sliding window size, N, as the first element in the array and the rest will be a list of numbers. Your program should return the Moving Median for each element based on the element and its N-1 predecessors, where N is the sliding window size. The final output should be a string with the moving median corresponding to each entry in the original array separated by commas.\nthis is the code that I wrote:\n```\nimport java.applet.Applet;\nimport java.awt.Graphics;\nimport java.awt.*;\nimport java.awt.event.*;\nimport org.apache.commons.math3.*;\n\npublic class whileloopq extends Applet implements ActionListener\n{\n\nLabel label;\nTextField input;\nint num;\nint index;\nint[] numArray = new int[20];\nint sum;\nint total;\ndouble avg;\nint median;\n\npublic void init()\n{\n label = new Label(\"Enter numbers:\");\n input = new TextField(5);\n add(label);\n add(input);\n input.addActionListener(this);\n  index = 0;\n  }\n\npublic void actionPerformed(ActionEvent ev)\n  {\n  int num = Integer.parseInt(input.getText());\n  numArray[index] = num;\n  index++;\n  if (index == 20)\n    input.setEnabled(false);\n    input.setText(\"\");\n    sum = 0;\n    for (int i = 0; i < numArray.length; i++)\n    {\n      sum += numArray[i];\n    }\n    total = sum;\n    avg = total / index;\n    median = numArray[numArray.length/2];\n\n    repaint();\n  }\n\n  public void paint(Graphics graf)\n  {\n    graf.drawString(\"Total = \"+ Integer.toString(total), 25, 85);\n    graf.drawString(\"Average =\"+ Double.toString(avg), 25, 100);\n    graf.drawString(\"Median =\"+ Integer.toString(median), 25, 115)\n  }\n\n}\n```\n\nThis is the error that shows up:\n```\n/tmp/560075432/main.js:1\nimport java.applet.Applet;\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n    at wrapSafe (internal/modules/cjs/loader.js:1072:16)\n    at Module._compile (internal/modules/cjs/loader.js:1122:27)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1178:10)\n    at Module.load (internal/modules/cjs/loader.js:1002:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:901:14)\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:74:12)\n    at internal/main/run_main_module.js:18:47\n```\n\nI don't understand what is the problem with this\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "imputing data with median by date in R [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        How to replace NA with mean by group / subset?\r\n                            \r\n                                (5 answers)\r\n                            \r\n                    \r\n                Closed 3 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI need to replace the missing values in the field \"steps\" by the median of \"steps\" calculated over that particular day (group by \"date\") with NA values removed. I have already referred this thread but my NA values aren't replaced. Can somebody help me find out where am I going wrong? I would prefer using base package/data table/plyr. The dataset looks approx. like this:-\n\n```\n        steps      date interval\n    1:    NA 2012-10-01        0\n    2:    NA 2012-10-01        5\n    3:    NA 2012-10-01       10\n    4:    NA 2012-10-01       15\n    5:    NA 2012-10-01       20\n   ---                          \n17564:    NA 2012-11-30     2335\n17565:    NA 2012-11-30     2340\n17566:    NA 2012-11-30     2345\n17567:    NA 2012-11-30     2350\n17568:    NA 2012-11-30     2355\n```\n\n\nThe structure and summary of the dataset(activity) are as shown below\n\n```\n #str(activity)  \n Classes ‘data.table’ and 'data.frame': 17568 obs. of  3 variables:\n     $ steps   : int  NA NA NA NA NA NA NA NA NA NA ...\n     $ date    : Date, format: \"2012-10-01\" \"2012-10-01\" \"2012-10-01\" ...\n     $ interval: int  0 5 10 15 20 25 30 35 40 45 ...\n\n#summary(activity)\n         steps             date               interval     \n     Min.   :  0.00   Min.   :2012-10-01   Min.   :   0.0  \n     1st Qu.:  0.00   1st Qu.:2012-10-16   1st Qu.: 588.8  \n     Median :  0.00   Median :2012-10-31   Median :1177.5  \n     Mean   : 37.38   Mean   :2012-10-31   Mean   :1177.5  \n     3rd Qu.: 12.00   3rd Qu.:2012-11-15   3rd Qu.:1766.2  \n     Max.   :806.00   Max.   :2012-11-30   Max.   :2355.0  \n     NA's   :2304     \n```\n\n\nThings I have tried:\n\nDatatable method:\n\n```\nactivityrepNA<-activity[,steps := ifelse(is.na(steps), median(steps, na.rm=TRUE), steps), by=date]\nsummary(activityrepNA)\n     steps             date               interval     \n Min.   :  0.00   Min.   :2012-10-01   Min.   :   0.0  \n 1st Qu.:  0.00   1st Qu.:2012-10-16   1st Qu.: 588.8  \n Median :  0.00   Median :2012-10-31   Median :1177.5  \n Mean   : 37.38   Mean   :2012-10-31   Mean   :1177.5  \n 3rd Qu.: 12.00   3rd Qu.:2012-11-15   3rd Qu.:1766.2  \n Max.   :806.00   Max.   :2012-11-30   Max.   :2355.0  \n NA's   :2304 \n```\n\n\nUsing ave\n\n```\nactivity$steps[is.na(activity$steps)] <- with(activity, ave(steps,date, FUN = function(x) median(x, na.rm = TRUE)))[is.na(activity$steps)]\n> summary(activity)\n     steps             date               interval     \n Min.   :  0.00   Min.   :2012-10-01   Min.   :   0.0  \n 1st Qu.:  0.00   1st Qu.:2012-10-16   1st Qu.: 588.8  \n Median :  0.00   Median :2012-10-31   Median :1177.5  \n Mean   : 37.38   Mean   :2012-10-31   Mean   :1177.5  \n 3rd Qu.: 12.00   3rd Qu.:2012-11-15   3rd Qu.:1766.2  \n Max.   :806.00   Max.   :2012-11-30   Max.   :2355.0  \n NA's   :2304\n```\n\n\nAttempt at ddply\n\n```\ncleandatapls<-ddply(activity, \n+       .(as.character(date)), \n+       transform, \n+       steps=ifelse(is.na(steps), median(steps, na.rm=TRUE), steps))\n> summary(cleandatapls)\n as.character(date)     steps             date               interval     \n Length:17568       Min.   :  0.00   Min.   :2012-10-01   Min.   :   0.0  \n Class :character   1st Qu.:  0.00   1st Qu.:2012-10-16   1st Qu.: 588.8  \n Mode  :character   Median :  0.00   Median :2012-10-31   Median :1177.5  \n                    Mean   : 37.38   Mean   :2012-10-31   Mean   :1177.5  \n                    3rd Qu.: 12.00   3rd Qu.:2012-11-15   3rd Qu.:1766.2  \n                    Max.   :806.00   Max.   :2012-11-30   Max.   :2355.0  \n                    NA's   :2304   \n```\n\n\nAggregate for calculating median\n\n```\nwhynoclean<-aggregate(activity,by=list(activity$date),FUN=median,na.rm=TRUE)\n> summary(whynoclean)\n    Group.1               steps        date               interval   \n Min.   :2012-10-01   Min.   :0   Min.   :2012-10-01   Min.   :1178  \n 1st Qu.:2012-10-16   1st Qu.:0   1st Qu.:2012-10-16   1st Qu.:1178  \n Median :2012-10-31   Median :0   Median :2012-10-31   Median :1178  \n Mean   :2012-10-31   Mean   :0   Mean   :2012-10-31   Mean   :1178  \n 3rd Qu.:2012-11-15   3rd Qu.:0   3rd Qu.:2012-11-15   3rd Qu.:1178  \n Max.   :2012-11-30   Max.   :0   Max.   :2012-11-30   Max.   :1178  \n                      NA's   :8                     \n```\n\n\nEDIT output for the code using mutate\n\n```\nactivity %>% group_by(date) %>% mutate(steps = replace(steps, is.na(steps), median(steps, na.rm = T)))\nSource: local data table [17,568 x 3]\n\n   steps       date interval\n1     NA 2012-10-01        0\n2     NA 2012-10-01        5\n3     NA 2012-10-01       10\n4     NA 2012-10-01       15\n5     NA 2012-10-01       20\n6     NA 2012-10-01       25\n7     NA 2012-10-01       30\n8     NA 2012-10-01       35\n9     NA 2012-10-01       40\n10    NA 2012-10-01       45\n..   ...        ...      ... \n```\n\n\nUPDATE:\n\nSteven Beaupre helped me realize that my approach for the imputing was flawed as there were specific dates having only NA values that were causing the problem as the median of NA's is NA. Used another suggested approach. \n    ", "Answer": "\r\nTry:\n\n```\nlibrary(dplyr)\ndf %>% \n  group_by(date) %>% \n  mutate(steps = ifelse(is.na(steps), median(steps, na.rm = T), steps))\n```\n\n\nIf for a given date, all steps are ```\nNA```\ns, you could replace them with 0:\n\n```\ndf %>% \n  group_by(date) %>% \n  mutate(steps = ifelse(all(is.na(steps)), 0,\n                        ifelse(is.na(steps), median(steps, na.rm = T), steps)))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "MySQL Building median stored function\r\n                \r\nI would like to build a stored function to compute quantils within groups. I have a very nice SQL from the net to compute median: http://geekyisawesome.blogspot.ch/2012/04/finding-median-value-using-mysql-sql.html. This SQL allows to compute the median of one variable of the table. I would like to compute median by grouping. To do this first I have to prepare a table with increasing counter within groups. Even this for me was a challenge so I got help from stackoverflow: MySQL - Counter within group. Putting all together I'm able to compute median within groups:  \n\n```\n-- (01) Create table fake table:\n\nCREATE TABLE test01.tb (\ng CHAR(1)\n, x  INTEGER\n);\n\nINSERT INTO test01.tb (g, x)\nVALUES\n('a',10)\n, ('a',2)\n, ('a',0)\n, ('b',10)\n, ('b',10)\n, ('b',10)\n, ('b',1)\n, ('b',1)\n, ('b',1)\n;\n\n-- (02) Create enumerated table\n\nCREATE TABLE tb2 AS       \nSELECT a.g, a.x\n       , @counter := if (g = @prev_g, @counter + 1, 1) counter\n       , @prev_g := g\n       , (SELECT COUNT(*)\n         FROM tb b\n         WHERE a.g = b.g\n         )  AS max_counter\nFROM tb a, (SELECT @counter := 0, @prev_g := NULL) INIT\nORDER BY a.g, a.x\n;\n\n-- (03) Compute median within group\n\nSELECT g, AVG(x)\nFROM tb2\nWHERE counter IN (FLOOR((max_counter+1)*0.5),CEIL((max_counter+1)*0.5))\nGROUP BY g\n;\n```\n\n\nMy idea is to build a function QUANTILE which allows to compute quantils like this:\n\n```\nSELECT g, QUANTILE(x,0.5) median\nFROM tb\nGROUP BY g\n;\n```\n\n\nI never built stored functions/procedures and looking in the net the tables in the stored functions are hard coded. So, I'm wonder if it is possible to build such a generic function. Thanks for advices.\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Position of median within a list\r\n                \r\nI have an unsorted array and I need the position of the median. I know there are several algorithms to calculate the median of a given array in O(n), but all of them include some kind of reordering of the array, like in median of medians and random selection.\n\nI'm not interested int he median itself, only its position within the array interests me.\n\nIs there any way I can do this in O(n)? Keeping track of all the swaps will create a massive overhead, so I'm looking for another solution.\n    ", "Answer": "\r\nLet's say you have an array of data, and you would like to find its median:\n\n```\ndouble data[MAX_DATA] = ...\n```\n\n\nCreate an array of indexes, and initialize each index to its own position, like this:\n\n```\nint index[MAX_DATA];\nfor (int i = 0 ; i != MAX_DATA ; i++) {\n    index[i] = i;\n}\n```\n\n\nNow implement the linear median algorithm with the following changes:\n\n\nWhen the original algorithm compares ```\ndata[i]```\n to ```\ndata[j]```\n, replace with a comparison of ```\ndata[index[i]]```\n to ```\ndata[index[j]]```\n\nWhen the original algorithm swaps ```\ndata[i]```\n and ```\ndata[j]```\n, swap ```\nindex[i]```\n and ```\nindex[j]```\n instead.\n\n\nSince the elements of ```\ndata```\n remain in their place all the time, the modified algorithm will produce the position of the median in the unmodified array, rather than its position in the array with some elements moved to different spots.\n\nIn C++ you can implement this with pointers instead of indexes, and use ```\nstd::nth_element```\n on the container of pointers, like this:\n\n```\nvector<int> data = {1, 5, 2, 20, 10, 7, 9, 1000};\nvector<const int*> ptr(data.size());\ntransform(data.begin(), data.end(), ptr.begin(), [](const int& d) {return &d;});\nauto mid = next(ptr.begin(), data.size() / 2);\nnth_element(ptr.begin(), mid, ptr.end(), [](const int* lhs, const int* rhs) {return *lhs < *rhs;});\nptrdiff_t pos = *mid - &data[0];\ncout << pos << endl << data[pos] << endl;\n```\n\n\nHere is a link to a demo on ideone.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Aggregating by median value in SQL\r\n                \r\nI am looking to take the median value for each cobrand_id in the following query:\n\n```\nselect cobrand_id, median(xsum) from tmp_median\ngroup by cobrand_id;\n```\n\n\nI am using PostgreSQL 8.0.2, which is not recognizing the database function 'median.'  Is there a workaround?\n    ", "Answer": "\r\nYou can use window functions.  Assuming this is a numeric value:\n\n```\nselect cobrand_id, avg(xsum) as median\nfrom (select m.*,\n             row_number() over (partition by cobrand_id order by xsum) as seqnum,\n             count(*) over (partition by cobrand_id) as cnt\n      from tmp_median m\n     ) m\nwhere 2*seqnum in (cnt, cnt + 1, cnt + 2)\ngroup by cobrand_id;\n```\n\n\nThe ```\nwhere```\n clause filters the rows to either 1 or 2 for each ```\ncobrand_id```\n (note the ```\n2*```\n), so this works for both even and odd numbers in each partition.  The average of these values is then the median.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median downsampling in python\r\n                \r\nI would like to downsample an image using a median filter. The ```\nblock_reduce```\n method in ```\nskimage```\n together with ```\nfunc=numpy.median```\n seems to be appropriate at first sight. However, I got the impression that ```\nblock_reduce```\n applies the ```\nfunc```\n one axis at a time, while I would expect the median filter to be applied to the whole block at once - for nontrivial inputs the outcome is not the same.\n\nA minimal demonstration example would be this:\n\n```\nfrom skimage.measure import block_reduce\nimport numpy as np\n\nimage = np.array([[4, 6, 6, 2],\n [6, 7, 9, 9],\n [3, 0, 9, 0],\n [0, 6, 6, 4]])\n\nexpected = np.array([[np.median(image[0:2,0:2]), np.median(image[0:2,2:4])],\n            [np.median(image[2:4,0:2]), np.median(image[2:4,2:4])]])\n\nactual = block_reduce(image, (2,2), func=np.median)\n\nassert np.array_equal(expected, actual)\n```\n\n\nThe last assertion fails because the median filter is not applied in the way I expected.\n\nCan you suggest other means of downsampling an image using a median filter?\n    ", "Answer": "\r\nHere is some hack which solves your specific issue.\n\n```\ndef clever_func(block, axis):\n    # axis unused on purpose\n    if len(block.shape) == 4:\n        return np.median(block, axis=[2, 3])\n    else:\n        return block\n\nactual = block_reduce(image, (2,2), func=clever_func)\n```\n\n\nEssentially, the argument ```\nfunc```\n to ```\nblock_reduce```\n will be called as ```\nfunc(out, axis=-1)```\n in the code (source). Instead of calling ```\nnumpy.median```\n, I have hijacked this, so that median gets called with the right ```\naxis```\n argument.\n\nIn your example, ```\nblock.shape```\n will be ```\n(2, 2, 2, 2)```\n in the first call, and then ```\n(2, 2, 2)```\n on the second call of ```\nclever_func```\n. I am only using np.median on the first call (```\nif len(block.shape) == 4```\n), and nothing on the second call.\n\nThis is not a pretty solution.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "no visible global function definition for ‘median’\r\n                \r\nSince the latest R update I get the Note \n\n\n  summary.xmlImport: no visible global function definition for ‘median’\n\n\nin the CRAN check. Further notes refer to ```\nread.table```\n, ```\nwrite.table```\n and other standard functions in R.\n\nWhen I have a look on my file summary.xmlImport, the file looks like this:\n\n```\nsummary.xmlImport <- function(object, ...){\n\n   rowCount <- sapply(object,nrow)\n   cat(\"Summary of xmlImport object\\n\")\n   cat(\"---------------------------\\n\")\n   cat(\"Sequences    :\",length(object),\"\\n\")\n   cat(\"Min hits     :\",min(rowCount),\"\\n\")\n   cat(\"Average hits :\",mean(rowCount),\"\\n\")\n   cat(\"Median hits  :\",median(rowCount),\"\\n\")\n   cat(\"Max hits     :\",max(rowCount),\"\\n\")\n   invisible(object)\n\n} \n```\n\n\nI cannot understand, why I should add now the ```\nmedian```\n function to the NAMESPACE, but why not the ```\nmin```\n, ```\nmean```\n, etc. The note is only about the ```\nmedian```\nfunction.\n\nAnybody an idea what the reason for the Note is and how to fix it? I noted that there are tons of R packages that have currently the same Note.\n\nI can understand this warning in the context of a non-declared variable, but I would assume that ```\nmedian()```\n, ```\nread.table()```\n and such functions are globally visible in R, especially as ```\nmean()```\nseems to be!?\n\nEDIT: I only receive the Note on CRAN, but not on my local computer what makes the search for the solution a bit nasty... The session info of my computer:\n\n```\n> sessionInfo()\nR version 3.2.1 (2015-06-18)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 14.04.2 LTS\n```\n\n    ", "Answer": "\r\nAs of Monday June 29, 2015, all non-base functions must be explicitly exported in NAMESPACE in order to pass ```\nR CMD check --as-cran```\n. The change comes because code is now checked with only the base package attached, so functions from default packages (such as stats) must be listed explicitly.\n\nTo import these packages, consider doing the following:\n\n\nIn DESCRIPTION, you probably want to list them in ```\nImports```\n. There is very little reason to ever list a package in ```\nDepends```\n.\nIn NAMESPACE, you can choose between ```\nimport(stats)```\n or ```\nimportFrom(stats, ...)```\n, where ```\n...```\n is one or more comma-separated function names. (If you use ```\nroxygen2::roxygenize()```\n or ```\ndevtools::document()```\n to generate documentation and NAMESPACE, the analogous markup would be ```\n#' @import stats```\n and ```\n#' @importFrom stats ...```\n.)\n\n\nIf you want to work interactively with R in a mode that mimics this, you'll want to start R with only the base package attached. There are several ways to do this, but probably the easiest is to set an environment variable at your shell: ```\nR_DEFAULT_PACKAGES=NULL```\n or in the .Renviron file and then start R using ```\nR --vanilla```\n. In Terminal or bash this would be:\n\n```\n$ export R_DEFAULT_PACKAGES=NULL\n$ R --quiet --vanilla\n> search()\n[1] \".GlobalEnv\"   \"Autoloads\"    \"package:base\"\n```\n\n\nIn Windows command prompt it would be:\n\n```\nC:\\>SET R_DEFAULT_PACKAGES=NULL\nC:\\>R --quiet --vanilla\n> search()\n[1] \".GlobalEnv\"   \"Autoloads\"    \"package:base\"\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median filter of masked arrays\r\n                \r\nI have seen several discussions in this forum about calculating the median of masked arrays, such as images. What I want is slightly more subtle, it is to apply a median filter on my image. I know a way to do it, but is far too slow, and would appreciate ways of speeding the process up.\n\nFor example, assume I have a masked array of shape (10,10) and I want to apply a median filter with a box (3,3) not using those elements that are masked. My goal is to substitute the value in each pixel of the image with the value of the masked median of the box. \n\nAssuming a very simple case, we can build the \"image\" and the mask as:\n\n```\n im = numpy.random.uniform(size=(10,10))\n mask = numpy.zeros_like(im)\n mask[1:3,:] = 1\n masked_im = numpy.ma.array(im, mask=mask)\n```\n\n\nNow, to actually make the median filter we can do it on a brute-force way with:\n\n```\n lx, ly = im.shape\n side = 3\n im_filt = numpy.zeros_like(im)\n for jj in range(ly):\n     for ii in range(lx):\n         minx, maxx = max([ii-side/2,0]), min([ii+side/2+1,lx])\n         miny, maxy = max([jj-side/2,0]), min([jj+side/2+1,ly])\n         im_filt[ii,jj] = numpy.ma.median(masked_im[minx:maxx, miny:maxy])\n```\n\n\nThis solves the problem and gives a good result, but as I said, it is painfully slow. One (to me, surprising) way to slightly speed up the process is to use the mask and the image separately, like:\n\n```\n im_filt2 = numpy.zeros_like(im)\n for jj in range(ly):\n     for ii in range(lx):\n         minx, maxx = max([ii-side/2,0]), min([ii+side/2+1,lx])\n         miny, maxy = max([jj-side/2,0]), min([jj+side/2+1,ly])\n         zoom_im = im[minx:maxx, miny:maxy]\n         zoom_msk = mask[minx:maxx, miny:maxy]\n         im_filt2[ii,jj] = numpy.median(zoom_im[zoom_msk == 0]) \n```\n\n\nThis brings the execution time from 0.018 to 0.002, which is obviously better (why??) if not by the factor ~50 that I was looking for. \n\nAny input?\n    ", "Answer": "\r\nI guess that the difference is mainly due to overhead in accessing the MaskedArray object (which is a kind of wrapper around ndarray). \n\nFor an efficient median filter in numpy you may also try scikit-image. It also accepts a mask argument.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding Median of an Array\r\n                \r\nI am trying to write a C program to find the median of an array, but the task requires to not sort the array. The current code I have works, but fails when there is a repeated number. I am struggling to find a way to account for this case. Any help would be appreciated.\n```\n#include <stdio.h>\n#include <stdlib.h>\n\nint median_finder(int size, int* data) {\n    int n1, n2;\n    int count = 0;\n    for (int t = 0; t < size; t ++) {\n    int piv = data[t];\n    int higher = 0;\n    int lower = 0;\n    int median;\n    \n    if (size % 2 != 0) {\n        for (int j = 0; j < size; j++) {\n            if (piv < data[j]) {\n                higher++;\n            } else if (piv > data[j]) {\n                lower++;\n            } \n        }\n        if (higher != 0 && lower == higher) {\n            printf(\"MEDIAN: %d\\n\", piv);\n            return 0;\n        }\n    } else {\n        //int num = 0;\n        for (int j = 0; j < size; j++) {\n            if (piv < data[j]) {\n                higher++;\n            } else if (piv > data[j]) {\n                lower++;\n            } \n        }\n        if (higher != 0 && (lower == size/2 || higher == size/2)) {\n        \n        count++;\n        if (count == 1) {\n            n1 = piv;\n        } if (count == 2) {\n            n2 = piv;\n        }\n\n        }\n    } if (count == 2) {\n        if (n1 > n2) {\n            median = n2;\n        } else {\n            median = n1;\n        }\n        printf(\"Median: %d\\n\", median);\n        return 0;\n    }\n    }\n}\n\nint main(int argc, char** argv) {\n    int size = atoi(argv[1]);\n    argv++;\n    argv++;\n    int data[size];\n    for (int i = 0; i < size; i++) {\n        data[i] = atoi(argv[i]);\n    }\n    median_finder(size, data);\n}\n```\n\n    ", "Answer": "\r\nThe ```\nmedian```\n for an unsorted array with possible duplicate values ```\na```\n of length ```\nn```\n is the element with the value ```\na[i]```\n where half of the remaining elements ```\n(n-1)/2```\n (rounded down) are between less than (```\nlt```\n) or less than and equal (```\nlt```\n + ```\neq```\n) to ```\na[i]```\n:\n```\n#include <assert.h>\n#include <stdio.h>\n\nint median(size_t n, int *a) {\n    assert(n > 0);\n    for(size_t i = 0; i < n; i++) {\n        size_t lt = 0;\n        size_t eq = 0;\n        for(size_t j = 0; j < n; j++) {\n            if(i == j) continue;\n            if(a[j] < a[i]) lt++;\n            else if(a[j] == a[i]) eq++;\n        }\n        if((n-1)/2 >= lt && (n-1)/2 <= lt + eq)\n            return a[i];\n    }\n    assert(!\"BUG\");\n}\n\n// tap-like\nvoid test(size_t test, int got, int expected) {\n    printf(\"%sok %zu\\n\", got == expected ? \"\" : \"not \", test);\n    if(got != expected) {\n        printf(\"  --\\n\"\n               \"  got: %d\\n\"\n               \"  expected: %d\\n\"\n               \"  ...\\n\", got, expected);\n    }\n}\n\nint main(void) {\n    struct {\n        size_t n;\n        int *a;\n    } tests[] = {\n        {1, (int []) {0}},\n        {2, (int []) {0, 1}},\n        {3, (int []) {-1, 0, 1}},\n        {4, (int []) {-1, 0, 0, 1}},\n    };\n    for(int i = 0; i < sizeof tests / sizeof *tests; i++) {\n        test(i+1, median(tests[i].n, tests[i].a), 0);\n    }\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to use Median function in MDX?\r\n                \r\nI have a SQL Server Analysis Services cube ( Multidimensional). This cube represents Survey feedback. A student gives feedback on course for a given term (period of time ). There are 19 questions with a score from 1 to 5 and I try to get the median of these answers. \nJust to precise, I am looking at the median of answer for each {Question, Course} just for one period of time ( term).\n\nMy cube model looks like this :\n\n\nAnd the query I am running is :\n\n```\nwith calculated member [Median] as\nMEDIAN(existing NONEMPTY([Course].[COURSE NAME].children*[Survey \nQuestion].[SURVEY QUESTION NUMBER].children),[Measures].[NUMERIC \nRESPONSE])\n\n\nSelect non EMPTY{[Course].[COURSE NAME].children} on rows,\nNON EMPTY{[Survey Question].[SURVEY QUESTION NUMBER].children*{[Measures]. \n[NUMERIC RESPONSE],[Median]}} on columns\nfrom [EDW]\nwhere [Term].[TERM].&[5515]\n```\n\n\nThe result doesn't show anything on the Median as if it was null.\nIf anyone has an idea around this issue I will love to hear it.\n\nRegards\n\nVincent\n    ", "Answer": "\r\nThis is your query with a couple of small changes - unfortunately not used Median before and I do not have AdvWks to test on so feeling around in the dark a little:\n\n```\nWITH\nMEMBER [Measures].[MYMedian] AS\n  MEDIAN(\n    NONEMPTY(\n        [Course].[COURSE NAME].[COURSE NAME].MEMBERS\n       *[Survey Question].[SURVEY QUESTION NUMBER].[SURVEY QUESTION NUMBER].MEMBERS\n       ,[Measures].[NUMERIC RESPONSE]\n    )\n    ,[Measures].[NUMERIC RESPONSE]\n  )\nSELECT\nNON EMPTY \n[Course].[COURSE NAME].children on rows,\nNON EMPTY  \n   [Survey Question].[SURVEY QUESTION NUMBER].children\n  *{\n     [Measures].[NUMERIC RESPONSE]\n    ,[Measures].[MYMedian]\n   } \non columns\nFROM [EDW]\nWHERE [Term].[TERM].&[5515];\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Python: Quicksort with median of three\r\n                \r\nI'm trying to change this quicksort code to work with a pivot that takes a \"median of three\" instead.\n\n```\ndef quickSort(L, ascending = True): \n    quicksorthelp(L, 0, len(L), ascending)\n\n\ndef quicksorthelp(L, low, high, ascending = True): \n    result = 0\n    if low < high: \n        pivot_location, result = Partition(L, low, high, ascending)  \n        result += quicksorthelp(L, low, pivot_location, ascending)  \n        result += quicksorthelp(L, pivot_location + 1, high, ascending)\n    return result\n\n\ndef Partition(L, low, high, ascending = True):\n    print('Quicksort, Parameter L:')\n    print(L)\n    result = 0 \n    pivot, pidx = median_of_three(L, low, high)\n    L[low], L[pidx] = L[pidx], L[low]\n    i = low + 1\n    for j in range(low+1, high, 1):\n        result += 1\n        if (ascending and L[j] < pivot) or (not ascending and L[j] > pivot):\n            L[i], L[j] = L[j], L[i]  \n            i += 1\n    L[low], L[i-1] = L[i-1], L[low] \n    return i - 1, result\n\nliste1 = list([3.14159, 1./127, 2.718, 1.618, -23., 3.14159])\n\nquickSort(liste1, False)  # descending order\nprint('sorted:')\nprint(liste1)\n```\n\n\nBut I'm not really sure how to do that. The median has to be the median of the first, middle and last element of a list. If the list has an even number of elements, middle becomes the last element of the first half.\n\nHere's my median function:\n\n```\ndef median_of_three(L, low, high):\n    mid = (low+high-1)//2\n    a = L[low]\n    b = L[mid]\n    c = L[high-1]\n    if a <= b <= c:\n        return b, mid\n    if c <= b <= a:\n        return b, mid\n    if a <= c <= b:\n        return c, high-1\n    if b <= c <= a:\n        return c, high-1\n    return a, low\n```\n\n    ", "Answer": "\r\nLet us first implement the median-of-three for three numbers, so an independent function. We can do that by sorting the list of three elements, and then return the second element, like:\n\n```\ndef median_of_three(a, b, c):\n    return sorted([a, b, c])[1]```\n\n\nNow for a range ```\nlow .. high```\n (with ```\nlow```\n included, and ```\nhigh```\n excluded), we should determine what the elements are for which we should construct the median of three:\n\n\nthe first element: ```\nL[low]```\n,\nthe last element ```\nL[high-1]```\n, and\nthe middle element (in case there are two such, take the first) ```\nL[(low+high-1)//2]```\n.\n\n\nSo now we only need to patch the partitioning function to:\n\n```\ndef Partition(L, low, high, ascending = True):\n    print('Quicksort, Parameter L:')\n    print(L)\n    result = 0 \n    pivot = median_of_three(L[low], L[(low+high-1)//2], L[high-1])\n    i = low + 1  \n    for j in range(low + 1, high, 1): \n        result += 1\n        if (ascending and L[j] < pivot) or (not ascending and L[j] > pivot):\n            L[i], L[j] = L[j], L[i]  \n            i += 1  \n    L[low], L[i-1] = L[i-1], L[low] \n    return i - 1, result```\n\n\nEDIT: determining the median of three elements.\n\nThe median of three elements is the element that is in the middle of the two other values. So in case ```\na <= b <= c```\n, then ```\nb```\n is the median.\n\nSo we need to determine in what order the elements are, such that we can determine the element in the middle. Like:\n\n```\ndef median_of_three(a, b, c):\n    if a <= b and b <= c:\n        return b\n    if c <= b and b <= a:\n        return b\n    if a <= c and c <= b:\n        return c\n    if b <= c and c <= a:\n        return c\n    return a\n```\n\n\nSo now we have defined the median of three with four ```\nif```\n cases.\n\nEDIT2: There is still a problem with this. After you perform a pivot, you swap the element ```\nL[i-1]```\n with ```\nL[low]```\n in your original code (the location of the pivot). But this of course does not work anymore: since the pivot now can be located at any of the three dimensions. Therfore we need to make the ```\nmedian_of_three(..)```\n smarter: not only should it return the pivot element, but the location of that pivot as well:\n\n```\ndef median_of_three(L, low, high):\n    mid = (low+high-1)//2\n    a = L[low]\n    b = L[mid]\n    c = L[high-1]\n    if a <= b <= c:\n        return b, mid\n    if c <= b <= a:\n        return b, mid\n    if a <= c <= b:\n        return c, high-1\n    if b <= c <= a:\n        return c, high-1\n    return a, low\n```\n\n\nNow we can solve this problem with:\n\n```\ndef Partition(L, low, high, ascending = True):\n    print('Quicksort, Parameter L:')\n    print(L)\n    result = 0 \n    pivot, pidx = median_of_three(L, low, high)\n    i = low + (low == pidx)\n    for j in range(low, high, 1):\n        if j == pidx:\n            continue\n        result += 1\n        if (ascending and L[j] < pivot) or (not ascending and L[j] > pivot):\n            L[i], L[j] = L[j], L[i]  \n            i += 1 + (i+1 == pidx)\n    L[pidx], L[i-1] = L[i-1], L[pidx] \n    return i - 1, result```\n\n\nEDIT3: cleaning it up.\n\nAlthough the above seems to work, it is quite complicated: we need to let ```\ni```\n and ```\nj```\n \"skip\" the location of the pivot.\n\nIt is probably simpler if we first move the pivot to the front of the sublist (so to the ```\nlow```\n index):\n\n```\ndef Partition(L, low, high, ascending = True):\n    print('Quicksort, Parameter L:')\n    print(L)\n    result = 0 \n    pivot, pidx = median_of_three(L, low, high)\n    L[low], L[pidx] = L[pidx], L[low]\n    i = low + 1\n    for j in range(low+1, high, 1):\n        result += 1\n        if (ascending and L[j] < pivot) or (not ascending and L[j] > pivot):\n            L[i], L[j] = L[j], L[i]  \n            i += 1\n    L[low], L[i-1] = L[i-1], L[low] \n    return i - 1, result```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Incremental median computation with max memory efficiency\r\n                \r\nI have a process that generates values and that I observe. When the process terminates, I want to compute the median of those values.\n\nIf I had to compute the mean, I could just store the sum and the number of generated values and thus have O(1) memory requirement. How about the median? Is there a way to save on the obvious O(n) coming from storing all the values?\n\nEdit: Interested in 2 cases: 1) the stream length is known, 2) it's not.\n    ", "Answer": "\r\nYou are going to need to store at least ceil(n/2) points, because any one of the first n/2 points could be the median.  It is probably simplest to just store the points and find the median.  If saving ceil(n/2) points is of value, then read in the first n/2 points into a sorted list (a binary tree is probably best), then as new points are added throw out the low or high points and keep track of the number of points on either end thrown out.\n\nEdit:\n\nIf the stream length is unknown, then obviously, as Stephen observed in the comments, then we have no choice but to remember everything.  If duplicate items are likely, we could possibly save a bit of memory using Dolphins idea of storing values and counts.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "MYSQL outputting median age from find median birth date\r\n                \r\nI'm finding the median age of employees in a database but instead of returning the birth date, i would like it to return the age. so essentially i want it to subtract the employee's birth year from the current year to get an age.\nSo for example my result is shown as \"2000-01-01\" where id like it to be shown as \"17\". My code is as follows:\n\n```\nDROP PROCEDURE IF EXISTS medianAge;\n\nDELIMITER //\nCREATE PROCEDURE medianAge(OUT median DATE)\nBEGIN\n    DECLARE set_size INT(10);\n    DECLARE median_index INT;\n    DECLARE counter INT;\n    DECLARE current_age DATE;\n    DECLARE all_bdates CURSOR FOR\n        SELECT bdate FROM employee ORDER BY bdate ASC;\n    SET set_size = (SELECT COUNT(bdate) \n        FROM employee);\n    SET median_index = FLOOR(set_size/2);\n    SET counter = 0;\n    OPEN all_bdates;\n    WHILE counter < median_index DO\n        FETCH all_bdates INTO current_age;\n        SET counter = counter + 1;\n    END WHILE;\n    SET median = FLOOR(current_age);\nEND//\nDELIMITER ;\n\nCALL medianAge(@median);\n\nSELECT @median;\n```\n\n    ", "Answer": "\r\nSET median = FLOOR(DATEDIFF(now(), FLOOR(current_age)) / 365);\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of CAGR in Tableau\r\n                \r\nNew to Tableau ... I have a calculated field that calculates the CAGR for the last year in Tableau. I want to create another column that calculates the median of the CAGRs but get the error that the CAGR is already an aggregate and cannot be further aggregated.\n\nThis is what I have so far for the CAGR:\n\n```\nIF INDEX() = 5 // if there is at least 5 years of data\nthen ZN(POWER(ZN(SUM([Total Conferrals]))/LOOKUP(ZN(SUM([Total Conferrals])), FIRST()),ZN(1/(INDEX()-1))) - 1)\nELSE 0\nEND\n```\n\n\nIs there a way to get Median(CAGR)?\n    ", "Answer": "\r\nFor already Aggregated measures Tableau does not allow further aggregation .\n\nYou should use ```\nWINDOW-CALC```\n for these types of scenarios .\n\nIn your particular case, you may want to use ```\nWINDOW_AVERAGE('AGGREGATE FUNCTION')```\n\n\nLet me know if this works for you .\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median by group in R\r\n                \r\nI have the following data frame and would like to introduce a dummy if a value is above the group's median.\n\n```\ndf<-data.frame(group=rep(c(\"A\",\"B\",\"c\"),3), value1=c(1:9))\nm<-aggregate(. ~ group, data=df, FUN=median)\nnames(m)[2]<-\"median\"\ndf<-merge(df,m, by=\"group\", all.x = T)\ndf$median_0_1<-ifelse(df$median<df$value1,1,0)\n```\n\n\nIs there a more elegant way to do this?\n\nAnd, can i adjust this to set the dummy above or below third quartile?\n\nAnd, is this a robust way, that will work reliably?\n\nThanks a lot. \n    ", "Answer": "\r\nWhen you want to keep number of rows in dataframe same use ```\nave```\n\n\n```\ndf$median_0_1 <- with(df, as.integer(value1 > ave(value1, group, FUN = median)))\n```\n\n\nThis can also be done with ```\ndplyr```\n\n\n```\nlibrary(dplyr)\ndf %>% group_by(group) %>% mutate(median_0_1 = as.integer(value1 > median(value1)))\n```\n\n\nOr ```\ndata.table```\n\n\n```\nlibrary(data.table)\nsetDT(df)[, median_0_1 := as.integer(value1 > median(value1)), group]\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find median of dates in PostgreSQL\r\n                \r\nI was wondering if there is a way to find the 'median' date in PostgreSQL. The goal is to obtain, according to the median, the date that is in the middle of all the dates.\nI tried following modified median function:\n```\nselect\n    percentile_cont(0.5) within group (order by date)\nfrom cte\n```\n\nBy trying to do so I get the following error message:\n```\nSQL Error [42883]: ERROR: function percentile_cont(numeric, timestamp without time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 12\n```\n\nAs dates are not supported, I was wondering if there is another way to calculate the median value of a date.\nThank you for any inputs!\n    ", "Answer": "\r\nYou can cast the date value to an integer and then use it for getting the median value using the ```\npercentile_cont```\n function.\nLike so,\n```\nSELECT \npercentile_cont(0.5) within group (ORDER by cast(extract(epoch from dateCol1) as integer))\nFROM table1\n\n```\n\nThe above gives the median date, but in numeric value, to convert it back to a date type, use the ```\nto_timestamp```\n function like so ,\n```\nselect to_timestamp(1638662400)::date\n#gives 2021-12-05\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to find median of a column in R\r\n                \r\nI am trying to find the median of the ```\nweight```\n column in this sample csv file using ```\nR```\n. But the code returns nothing. Where is the problem?\n```\ndiabets <- read.csv (\"https://hbiostat.org/data/repo/diabetes.csv\")\nmedian (diabets$weight)\n```\n\nAnd then after finding the median, I need to print the females whose weights are lower than this median. How can I do that?\nPlease NO extra libraries.\n    ", "Answer": "\r\n```\nna.rm = TRUE```\n argument will find median ignoring ```\nNA```\n's\nThere is one ```\nNA```\n in weights.\n```\nsum(is.na(diabetes$weight))\n[1] 1\n```\n\nAnd ```\nmedian(diabetes$weight, na.rm = TRUE)```\n returns 172.5 so,\n```\ndiabetes[diabetes$gender== \"female\" & diabetes$weight < 172.5, ]\n```\n\nwill print females whose weights are lower than this median.\nadd\n```\nmed <- median(diabetes$weight, na.rm = TRUE)\ndiabetes[(diabetes$gender== \"female\" & diabetes$weight < med), ]\n```\n\nor\n```\ndiabetes[(diabetes$gender== \"female\" & diabetes$weight < median(diabetes$weight, na.rm = TRUE)), ]\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate Median with SQL (DB2)\r\n                \r\nI'm having issues calculating the median for my result set and could use some help.  I need to provide the median, max, min, avg, and standard deviation. There are 222 rows which can be more or less and I'm not sure what I have so far is an accurate way of calculating the median.  Here is my query.\n\n```\n    Select \n    min(nodes) as min_nodes\n    ,max(nodes) as max_nodes\n    ,avg(nodes) as avg_nodes\n    ,max(nodes) + min(nodes))/2 as median_nodes\n    ,stddev(nodes) as sd_nodes\n    from Table\n```\n\n    ", "Answer": "\r\nYou can do it using window functions:\n\n```\nSelect min(nodes) as min_nodes, max(nodes) as max_nodes, avg(nodes) as avg_nodes,\n       avg(case when 2*seqnum in (cnt, cnt - 1, cnt + 1) then nodes end) as median_nodes,\n       stddev(nodes) as sd_nodes\nfrom (select t.*, row_number() over (order by nodes) as seqnum,\n             count(*) over () as cnt\n      from table t\n     ) t\n```\n\n\nThe use of ```\navg()```\n is to handle the case where you have an even number of values.  In this case, the median is traditionally assigned to the midpoint of the two middle values.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Why does median trip up data.table (integer versus double)?\r\n                \r\nI have a data.table called enc.per.day for encounters per day. It has 2403 rows in which a date of service is specified and the number of patients seen on that day. I wanted to see the median number of patients seen on any type of weekday.\n\n```\nenc.per.day[,list(patient.encounters=median(n)),by=list(weekdays(DOS))]\n```\n\n\nThat line gives an error\n\n\n  Error in ```\n[.data.table```\n(enc.per.day, , list(patient.encounters = median(n)),  : \n    columns of j don't evaluate to consistent types for each group: result for group 4 has column 1 type 'integer' but expecting type 'double'\n\n\nThe following all work well  \n\n```\ntapply(enc.per.day$n,weekdays(enc.per.day$DOS),median)\nenc.per.day[,list(patient.encounters=round(median(n))),by=list(weekdays(DOS))]\nenc.per.day[,list(patient.encounters=median(n)+0),by=list(weekdays(DOS))]\n```\n\n\nWhat is going on? It took me a long time to figure out why my code would not work.\n\nBy the way the underlying vector enc.per.day$n is an integer\n\n```\nstorage.mode(enc.per.day$n)\n```\n\n\nreturns \"integer\". Further, there are no NAs anywhere in the data.table.\n    ", "Answer": "\r\nTL;DR wrap ```\nmedian```\n with ```\nas.double()```\n\n\n```\nmedian()```\n 'trips up' data.table because --- even when only passed integer vectors --- ```\nmedian()```\n sometimes returns an integer value, and sometimes returns a double.\n\n```\n## median of 1:3 is 2, of type \"integer\" \ntypeof(median(1:3))\n# [1] \"integer\"\n\n## median of 1:2 is 1.5, of type \"double\"\ntypeof(median(1:2))\n# [1] \"double\"\n```\n\n\nReproducing your error message with a minimal example:\n\n```\nlibrary(data.table)\ndt <- data.table(patients = c(1:3, 1:2), \n                 weekdays = c(\"Mon\", \"Mon\", \"Mon\", \"Tue\", \"Tue\"))\n\ndt[,median(patients), by=weekdays]\n# Error in `[.data.table`(dt, , median(patients), by = weekdays) : \n#   columns of j don't evaluate to consistent types for each group: \n#   result for group 2 has column 1 type 'double' but expecting type 'integer'\n```\n\n\ndata.table complains because, after inspecting the value of the first group to be processed, it has concluded that, OK, these results are going to be of type \"integer\". But then right away (or in your case in group 4), it gets passed a value of type \"double\", which won't fit in its \"integer\" results vector. \n\n\n\ndata.table could instead accumulate results until the end of the group-wise calculations, and then perform type conversions if necessary, but that would require a bunch of additional performance-degrading overhead; instead, it just reports what happened and lets you fix the problem. After the first group has run, and it knows the type of the result, it allocates a result vector of that type as long as the number of groups, and then populates it. If it later finds that some groups return more than 1 item, it will grow (i.e., reallocate) that result vector as needed. In most cases though, ```\ndata.table```\n's first guess for the final size of the result is right first time (e.g., 1 row result per group) and hence fast.\n\nIn this case, using ```\nas.double(median(X))```\n instead of ```\nmedian(X)```\n provides a suitable fix.\n\n(By the way, your version using ```\nround()```\n worked because it always returns values of type \"double\", as you can see by typing ```\ntypeof(round(median(1:2))); typeof(round(median(1:3)))```\n.)\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Create a function in MySQL to calculate Median\r\n                \r\nI want to create a function that I can use to calculate median in MySQL. I found this article but I can't wrap my head around it. Is there any easy way to create a function to calculate the median in MySQL. Below is my code. I want to use median instead of avg.\nUpdated Query\n```\nselect t1.brain_sku\n    ,avg(weeklysales_4wks) as Avg_4Weeks /* Replace avg with median */\n    ,avg(weeklysales_12wks) as Avg_12Weeks /* Replace avg with median */\nfrom (\n        select brain_sku, week(order_date) as week_date, sum(quantity_ordered) as weeklysales_4wks\n        from sales\n        WHERE date(order_date) > date(DATE_SUB(NOW(), INTERVAL 4 WEEK))\n        and IF(DAYNAME(NOW()) != 'Sunday',  week(order_date) != week(now()), week(order_date) <= week(now()) )\n        AND brain_sku in ('1400280','1177260')\n        GROUP BY brain_sku, week(order_date)\n        ) t1\nRIGHT JOIN (\n        /*select t2.brain_sku, avg(t2.weeklysales_12wks) as weeklysales_12wks from (*/\n        select brain_sku, week(order_date) as week_date, sum(quantity_ordered) as weeklysales_12wks\n        from sales\n        WHERE date(order_date) > date(DATE_SUB(NOW(), INTERVAL 12 WEEK))\n        and IF(DAYNAME(NOW()) != 'Sunday',  week(order_date) != week(now()), week(order_date) <= week(now()) )\n        and brain_sku in ('1400280','1177260')\n        GROUP BY brain_sku, week(order_date)\n            ) t2\n        /*GROUP BY t2.brain_sku\n            ) t3 */\nON t1.brain_sku = t2.brain_sku\nGROUP BY t1.brain_sku\n```\n\nAny help will be appreciated.\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "MySQL divides a column into 2 segments based on the median, and finds the median of each segment？\r\n                \r\nHere is my sample table called ```\nt```\n,Mysql version is 5.7:\n```\n+----+------+\n| id | num  |\n+----+------+\n|  1 |    1 |\n|  2 |    2 |\n|  3 |    3 |\n|  4 |    4 |\n|  5 |    5 |\n|  6 |    6 |\n|  7 |    7 |\n|  8 |    8 |\n|  9 |    9 |\n+----+------+\n```\n\nAnd I have now found the median is 5,use this sql :\n```\nSELECT\n    AVG( tmp.num ) AS median_val \nFROM\n    (\nSELECT\n    num,\n    @rownum := @rownum + 1 AS `row_number`,\n    @total_rows := @rownum \nFROM\n    t,\n    ( SELECT @rownum := 0 ) r \nWHERE\n    num IS NOT NULL \nORDER BY\n    num\n    ) AS tmp \nWHERE\ntmp.row_number IN ( FLOOR( ( @total_rows + 1 ) / 2 ), FLOOR( ( @total_rows + 2 ) / 2 ) );\n```\n\nBut I want to divide the num column into 2 segments based on the median.\nfirst segment is : 1,2,3,4,5; median is:3\nsecond segment is:5,6,7,8,9;  median is:7\nI hope the output result:\n3,5,7\nAnd here is online table t\nMy idea is to convert the above sql result into @variable, and then make a judgment on the median sub-query condition, but I think it is not very smart.\nThanks\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median filter for image Python3\r\n                \r\nI wanted to implement a radial median filter. I have the following picture (size = (Nx,Ny)) \n\nI want to derive radius for each pixels. For each radius compute median value and put it to a new matrix in the place of all pixels with the same radius. I found Image Smoothing Using Median Filter, but it isn't fast enough. And I created my own script, unfortunately, it isn't fast too. I tested it on some generatic data:\n\n\n\n```\nimport cv2\nfrom PIL import Image\nfrom scipy import stats, ndimage, misc\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.image as mpimg\nfrom scipy import stats\n\n\na = np.array([[0.,0.,0.,0.,0.],[0.,5.,1.,9.,0.],[0.,10.,2.,10.,0.],[0.,9.,1.,5.,0.],[0.,0.,0.,0.,0.]])\n\nb = a.copy().flatten()\n\ny,x = np.indices((a.shape))\ncenter = [len(x)//2, len(y)//2]\nr = np.hypot(x-center[0],y-center[1])\n\nr = r.astype(np.int) # integer part of radii (bin size = 1)\n\nset_r = set(r.flatten()) # get the list of r without duplication\nmax_r = max(set_r) # determine the maximum r\n\nmedian_r = np.array([0.]*len(r.flatten())) # array of median I for each r\n\n\nfor j in set_r:\n    result = np.where(r.flatten() == j) \n    median_r[result[0]] = np.median(b[result[0]])\n\n\n\na_med = median_r.reshape(a.shape)\n\nam_med = ndimage.median_filter(a, 3)\n\nplt.figure(figsize=(16, 5))\n\nplt.subplot(141)\nplt.imshow(a, interpolation='nearest')\nplt.axis('off')\nplt.title('Original image', fontsize=20)\nplt.subplot(142)\nplt.imshow(am_med, interpolation='nearest', vmin=0, vmax=5)\nplt.axis('off')\nplt.title('Median filter', fontsize=20)\nplt.subplot(143)\nplt.imshow(a_med, interpolation='nearest')\nplt.axis('off')\nplt.title('Own median', fontsize=20)\n\n\nplt.subplots_adjust(wspace=0.02, hspace=0.02, top=0.9, bottom=0, left=0,\n                    right=1)\n\nplt.show()\n\n```\n\n\nI'd like to find a convenient way for solving this issue \n    ", "Answer": "\r\nMost of the answers here seem to center on performance optimizations of the naive median filtering algorithm. It's worth noting that the median filters you would find in imaging packages like OpenCV/scikit-image/MATLAB/etc. implement faster algorithms.\n\nhttp://nomis80.org/ctmf.pdf\n\nIf you are median filtering uint8 data, there are a lot of clever tricks to be played with reusing histograms as you move from neighborhood to neighborhood.\n\nI would use the median filter in an imaging package rather than trying to roll one yourself if you care about speed.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Simple way to calculate median with MySQL\r\n                \r\nWhat's the simplest (and hopefully not too slow) way to calculate the median with MySQL? I've used ```\nAVG(x)```\n for finding the mean, but I'm having a hard time finding a simple way of calculating the median. For now, I'm returning all the rows to PHP, doing a sort, and then picking the middle row, but surely there must be some simple way of doing it in a single MySQL query.\n\nExample data:\n\n```\nid | val\n--------\n 1    4\n 2    7\n 3    2\n 4    2\n 5    9\n 6    8\n 7    3\n```\n\n\nSorting on ```\nval```\n gives ```\n2 2 3 4 7 8 9```\n, so the median should be ```\n4```\n, versus ```\nSELECT AVG(val)```\n which == ```\n5```\n.\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median and time python [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs details or clarity. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                    Want to improve this question? Add details and clarify the problem by editing this post.\r\n                \r\n                    \r\n                        Closed 9 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nBasically in here is the code that is supposed to return the median, and the time, but it shows an error on line 32, 30, and 6, \"global name ' insertionSort ' is not defined, i know it is not defined but i don't know how do i implement it so that it works with this code?\n\n```\nimport time\nstart_time = 0 #starts the time from 0 seconds\ndef median(lst):\n    start_time = time.time()\n    insertionSort(lst)\n    if len(lst)%2==1:\n        end_time = time.time()\n        print(\"Time: \" , end_time - start_time) #prints the time of the process\n        return lst[len(lst)//2]\n    else:\n        return (lst[(len(lst)//2)-1]+lst[(len(lst)//2)//2])/2\n\ndef distSum(lst,n):\n    sum==0\n    for current in lst:\n        sum=sum+abs(current-bestLoc)\n    return sum\n\ndef main():\n    fileName = input('Enter a filename: ')\n    fileName = open(fileName, \"r\")\n    lst = []\n    for inputLine in fileName:\n        splittext = inputLine.split()\n        place = splittext[0]\n        locations = splittext[1]\n        lst += [locations]\n    print(lst)\n    print(median(lst))\n\nmain()\n```\n\n    ", "Answer": "\r\nSome problems:\n\n```\ndef distSum(lst,n):\n    sum==0\n    for current in lst:\n        sum=sum+abs(current-bestLoc)\n    return sum\n```\n\n\n\n```\nsum```\n is a builtin function; do not use it as a variable name (it is confusing, and prevents you from calling the function).\nYou meant ```\nsum = 0```\n (set sum to 0), not ```\nsum==0```\n (is sum equal to 0?).\nWhat is ```\nbestLoc```\n? You never define it. What is ```\nn```\n? You never use it. What is this function supposed to accomplish? It is not clear, and you haven't documented or commented it...\n... but that's irrelevant, because you never use the function either!\n\n\n.\n\n```\nstart_time = 0 #starts the time from 0 seconds\ndef median(lst):\n    start_time = time.time()\n    insertionSort(lst)\n    if len(lst)%2==1:\n        end_time = time.time()\n```\n\n\n\nYou set a global variable, ```\nstart_time```\n, and never use it;\nYou create a function-local variable by the same name (this is moderately confusing),\nYou only check how long it took to sort the list if it has an odd number of items.\n\n\n.\n\n```\n    return (lst[(len(lst)//2)-1]+lst[(len(lst)//2)//2])/2\n```\n\n\n\n... I simply have no words. How did you concoct this?\nIf you are looking for the median value, you probably want\n\n```\nlst_len = len(lst)\nhalflen = lst_len // 2\nif lst_len % 2:\n    return lst[halflen]\nelse:\n    return (lst[halflen-1] + lst[halflen]) / 2\n```\n\n\n\n.\n\n```\ndef main():\n    fileName = input('Enter a filename: ')\n    fileName = open(fileName, \"r\")\n```\n\n\n\nYou reuse the ```\nfileName```\n variable; this is not illegal but is confusing, especially as for most of the program it is a file object, not a file name.\n\n\nAs for your original question: it looks like ```\ninsertionSort```\n expects a list of items and sorts the list in-place. A simple implementation would be\n\n```\ninsertion_sort = lambda lst: lst.sort()\n```\n\n\nbut that's probably cheating ;-)\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Python - median value of a list\r\n                \r\n```\ndef median(x):\n\n    if range(1, len(x))%2!=0:\n        sorted(x)\n        listlength = range(1, len(x)+1)\n        num = listlength / 2\n        middlenum = x[num]\n    else:\n        sorted(x)\n        listlength = range(1, len(x)) \n        num = listlength / 2\n        num2 = num + 1\n        middlenum = x[num2 + num / 2]\n    return middlenum\n```\n\n\nThis is my code, I need to find a median value of a list (x) but I'm getting this error :\n\n```\n\"Oops, try again. median([1]) resulted in an error: unsupported operand type(s) for %: 'list' and 'int' \"\n```\n\n\nI don't really know what to do, please help.\n    ", "Answer": "\r\n```\nrange(1, len(x))```\n is an iterable. It can not be divided by a number, ```\n2```\n for that case.\n\nI believe you meant to use simply ```\nif len(x) % 2:```\n.\n\nIn adddition, ```\nsorted(x)```\n will return ```\nx```\n sorted, not sort it. For that task you have ```\nx.sort()```\n.\n\n\n\nIf you just want to find a median, use the built-in ```\nstatistics.median```\n:\n\n```\n>>> import statistics\n>>> statistics.median([1, 2, 3])\n2\n```\n\n\nOtherwise, see that answer.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find the Median of a list<int> in Dart\r\n                \r\nI have a list of integers which contains times in milliseconds (ex. 1433, 834, 1020..). I need to calculate the Median. I developed the following code but the Median I get is completely wrong compared to the one I calculate in Excel. Any ideas? is there any Dart/flutter library I could use for statistics?\n```\n  /// Calculate median\n  static int calculateMedian(TimeRecordNotifier timeRecordNotifier) {\n    List<int> mList = List();\n    timeRecordNotifier.timeRecords.forEach((element) {\n      mList.add(element.partialTime);\n    });\n\n    //clone list\n    List<int> clonedList = List();\n    clonedList.addAll(mList);\n\n    int median;\n    //sort list\n    clonedList.sort((a, b) => a.compareTo(b));\n\n    if (clonedList.length == 1)\n      median = mList[clonedList.length - 1];\n    else if (clonedList.length % 2 == 1)\n      median = mList[(((clonedList.length) / 2) - 1).round()];\n    else {\n      int lower = mList[((clonedList.length ~/ 2) - 1)];\n      int upper = mList[(clonedList.length ~/ 2)];\n      median = ((lower + upper) / 2.0).round();\n    }\n\n    return median;\n  }\n```\n\nOn the following dataset the expected median value is 901,5, however this algorithm gives me 461\n```\n131\n144\n203\n206\n241\n401\n415\n427\n439\n439\n452\n455\n456\n469\n471\n471\n483\n483\n491\n495\n495\n502\n505\n512\n521\n522\n523\n547\n551\n561\n610\n727\n745\n777\n790\n793\n892\n911\n924\n943\n957\n977\n978\n989\n992\n1008\n1024\n1039\n1070\n1074\n1092\n1115\n1139\n1155\n1159\n1174\n1176\n1194\n1203\n1208\n1227\n1228\n1248\n1270\n1271\n1272\n1273\n1276\n1284\n1290\n1294\n1439\n1740\n1786\n```\n\n    ", "Answer": "\r\nI refactored the code into this using NumDart implementation and now it works. thanks @MartinM for you comment!\n```\n/// Calculate median\n  static int calculateMedian(TimeRecordNotifier timeRecordNotifier) {\n    List<int> mList = List();\n    timeRecordNotifier.timeRecords.forEach((element) {\n      mList.add(element.partialTime);\n    });\n\n    //clone list\n    List<int> clonedList = List();\n    clonedList.addAll(mList);\n\n    //sort list\n    clonedList.sort((a, b) => a.compareTo(b));\n\n    int median;\n\n    int middle = clonedList.length ~/ 2;\n    if (clonedList.length % 2 == 1) {\n      median = clonedList[middle];\n    } else {\n      median = ((clonedList[middle - 1] + clonedList[middle]) / 2.0).round();\n    }\n\n    return median;\n  }\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Implementation of Median Maintenance\r\n                \r\nI am trying to solve a problem from an online course I am taking and I believe I am stuck. \n\nThis is the problem \n\n\n  The goal of this problem is to implement the \"Median Maintenance\"\n  algorithm. The text file contains a list of the integers from 1 to\n  10000 in unsorted order; you should treat this as a stream of numbers,\n  arriving one by one. Letting xi denote the ith number of the file, the\n  kth median mk is defined as the median of the numbers x1,…,xk. (So, if\n  k is odd, then mk is ((k+1)/2)th smallest number among x1,…,xk; if k\n  is even, then mk is the (k/2)th smallest number among x1,…,xk.)\n  \n  Find the sum of the 1000 medians.\n\n\nBelow is the code I have and its outputs the wrong answer and I can't seem to figure out what's going wrong\n\n```\nimport heapq\n# all_ints = list(map(int, open(\"stanford_algo/course_2_graph_search/median.txt\").read().splitlines()))\nall_ints = [6331, 2793, 1640, 9290, 225, 625, 6195, 2303, 5685, 1354]\nmin_heap_elements =  [all_ints[0]] # has all elements more than median\nmax_heap_elements =  [all_ints[1]] # has all elements less than median\nheapq.heapify(min_heap_elements) # has all elements more than median\nheapq._heapify_max(max_heap_elements) # has all elements less than median\nmedians = []\nmedians.append(all_ints[0])\nmedians.append(all_ints[1]) #doing this because I can see the first two elements are in decreasing order\n\nfor i, next_int in enumerate(all_ints[2:],start=3):\n    if next_int > min(min_heap_elements):\n        heapq.heappush(min_heap_elements, next_int)\n        heapq.heapify(min_heap_elements)\n    elif next_int <=  max(max_heap_elements):\n        max_heap_elements.append(next_int)\n        heapq._heapify_max(max_heap_elements)\n    else:\n        if len(min_heap_elements) > len(max_heap_elements):\n            max_heap_elements.append(next_int)\n            heapq._heapify_max(max_heap_elements)\n        else:\n            heapq.heappush(min_heap_elements, next_int)\n            heapq.heapify(min_heap_elements)\n    if len(max_heap_elements) - len(min_heap_elements) > 1:\n        extract = max_heap_elements.pop(0)\n        heapq.heappush(min_heap_elements, extract)\n        heapq._heapify_max(max_heap_elements)\n        heapq.heapify(min_heap_elements)\n    elif len(min_heap_elements) - len(max_heap_elements) > 1:\n        extract = min_heap_elements.pop(0)\n        max_heap_elements.append(extract)\n        heapq._heapify_max(max_heap_elements)\n        heapq.heapify(min_heap_elements)\n    median = [max(max_heap_elements), min(min_heap_elements)][(i)%2]\n    medians.append(median)\n\nsum(medians)%10000 # should be 9335\n```\n\n\nI am using two heaps here. One to store the elements larger than the media in a minimum heap(```\nmin_heap_elements```\n) and the other heap(```\nmax_heap_elements```\n) to store elements smaller than the median. For each new element, if its smaller(or equal) than the largest element of the max heap, I add it to the ```\nmax_heap_elements```\n. i\n\nIf the new element is larger than the minimum element of the min heap I add it to ```\nmin_heap_elements```\n. If its neither of the cases, I see which heap is shorter and add it to that one.\n\nHowever, there is something I am doing here and I can't put my finger on it. \n\nEDIT:\n\nThese are the medians I get \n\n```\n>>> medians\n[6331, 2793, 6331, 2793, 6331, 1640, 2793, 2303, 2793, 2303]\n```\n\n\nThis what I am expecting \n\n```\n>>> correct_medians\n[6331, 2793, 2793, 2793, 2793, 1640, 2793, 2303, 2793, 2303]\n```\n\n    ", "Answer": "\r\nThe problem is how you are computing the median from the two heaps, as the left one is not guaranteed to have one more element than the right one, when the index is odd.\n\nInstead you should do\n\n```\nif len(max_heap_elements) == len(min_heap_elements):\n    median = max(max_heap_elements)\nelif len(max_heap_elements) > len(min_heap_elements):\n    median = max(max_heap_elements)\nelse:\n    median = min(min_heap_elements)\n```\n\n\nAlso, note that if you are using heaps, is because you want to achieve a ```\nO(nlogn)```\n solution, however, by repeatedly calling functions like ```\nheapify```\n, ```\nmax```\n and ```\nmin```\n, you won't get the desired time complexity.\n\nInstead of ```\nmin(min_heap_elements)```\n write ```\nmin_heap_elements[0]```\n, remove the ```\nheapify```\n call after ```\nheappush```\n, instead of list's ```\npop```\n use ```\nheappop```\n.\n\nFinally for the max heap you could have a list with the negated values, as the ```\nheapq```\n module does not support max heaps, they only \"support\" some operations like ```\n_heappop_max```\n, but there's no ```\n_heappush_max```\n, so you will always need to call ```\n_heapify_max```\n.\n\nEDIT:\nif time complexity is not a requirement, you could just the function ```\nstatistics.median_low```\n from the standard library.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Writing a median function in R\r\n                \r\nI have been tasked to write my own median function in R, without using the built-in median function. If the numbers are odd; calculate the two middle values, as is usual concerning the median value. \nSomething i probably could do in Java, but I struggle with some of the syntax in \n\nR Code:\n\n```\nlist1 <- c(7, 24, 9, 42, 12, 88, 91, 131, 47, 71)\n\nsorted=list1[order(list1)]\nsorted\nn = length(sorted)\nn\nif(n%2==0) # problem here, implementing mod() and the rest of logic.\n```\n\n    ", "Answer": "\r\nHere is a self-written function ```\nmymedian```\n:\n\n```\nmymedian <- function(lst) {\n  n <- length(lst)\n  s <- sort(lst)\n  ifelse(n%%2==1,s[(n+1)/2],mean(s[n/2+0:1]))\n}\n```\n\n\nExample\n\n```\nlist1 <- c(7, 24, 9, 42, 12, 88, 91, 131, 47, 71)\nlist2 <- c(7, 24, 9, 42, 12, 88, 91, 131, 47)\nmymedian(list1)\nmymedian(list2)\n```\n\n\nsuch that\n\n```\n> mymedian(list1)\n[1] 44.5\n\n> mymedian(list2)\n[1] 42\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "calculate the median by excluding outliers (+-25% of median of four columns) for values of four columns values\r\n                \r\nI have four columns containing the amount of unit sold in last 4 years. I want to calculate the median and then calculate the mean by excluding the column values based on condition (+-25% of median).\n\n```\ndf = df[['Date','ID','amount']] # df has daily data\n\ndf['dayofYear'] = df['Date'].dt.dayofyear\n\ndf['Year_Lag1']= df.groupby(['ID','dayofYear'])['amount'].transform(lambda x: x.shift(1))\n\ndf['Year_Lag2']= df.groupby(['ID','dayofYear'])['amount'].transform(lambda x: x.shift(2))\n\ndf['Year_Lag3']= df.groupby(['ID','dayofYear'])['amount'].transform(lambda x: x.shift(3))\n\ndf['Year_Lag4']= df.groupby(['ID','dayofYear'])['amount'].transform(lambda x: x.shift(4))\n\n\ndf['YearLag_median']= df[['Year_Lag1','Year_Lag2','Year_Lag3','Year_Lag4']].median(axis=1) #median amount on same date (is there a better way to calculate median by avoiding outliers)\n```\n\n\nhow to calculate the average by avoiding values in four columns that lies in +- 25% of median.\n\nsuppose ```\nYear_Lag1 = 5000, Year_Lag2= 230, Year_Lag3=4500, Year_Lag4= 4300```\n.\n\nhow to calculate average by avoiding ```\nYear_Lag2```\n value.\n\nI want this to be done for all rows in a dataframe.\n\n(also if someone can help with a better way to calculate median by avoiding outliers)\nData set[data has values for 2nd and 3rd january (2014,15,16,17,18). Year_Lag1(shift(1)) has values from previous year for 2nd and 3rd jan. Year_Lag2(shift(2) has values from last to last year)  so on..]\n\nlast row is the example where I want to ignore 589.0 to calculate the mean.\n  [1]: https://i.stack.imgur.com/26Dvp.png```\nenter code here```\n\n    ", "Answer": "\r\nHere is a solution, I think there should be something better to do it, but still it works:\n\n\nDefine a function to calculate the mean according to your specifications\n\n\n```\ndef calculateMean(row):\n    s = 0\n    n = 0\n    for i in range(4):\n        if ~np.isnan(row[i]) and abs(row[i] - row[-1]) < 0.25 * row[-1]:\n            s += row[i]\n            n += 1\n    return (s/n if n else np.nan)\n```\n\n\n\nApply this function on every rows\n\n\n```\ndf[\"YearLag_mean\"] = df.loc[:, ['Year_Lag1','Year_Lag2','Year_Lag3','Year_Lag4', 'YearLag_median']]\\\n                       .apply(lambda row: calculateMean(row), axis=1)\n```\n\n\nOutput:\n\n```\n            Date   ID  amount  dayofYear  Year_Lag1  Year_Lag2  Year_Lag3  Year_Lag4  YearLag_median  YearLag_mean\n2258  2014-01-02  200  1778.0          2        NaN        NaN        NaN        NaN             NaN           NaN\n2259  2014-01-03  200  2149.0          3        NaN        NaN        NaN        NaN             NaN           NaN\n2623  2015-01-02  200  2057.0          2     1778.0        NaN        NaN        NaN          1778.0       1778.00\n2624  2015-01-03  200  2401.0          3     2149.0        NaN        NaN        NaN          2149.0       2149.00\n2988  2016-01-02  200  2315.0          2     2057.0     1778.0        NaN        NaN          1917.5       1917.50\n2989  2016-01-03  200   589.0          3     2401.0     2149.0        NaN        NaN          2275.0       2275.00\n3354  2017-01-02  200  1709.0          2     2315.0     2057.0     1778.0        NaN          2057.0       2050.00\n3355  2017-01-03  200  1659.0          3      589.0     2401.0     2149.0        NaN          2149.0       2275.00\n3719  2018-01-02  200  1991.0          2     1709.0     2315.0     2057.0     1778.0          1917.5       1964.75\n3720  2018-01-03  200  1570.0          3     1659.0      589.0     2401.0     2149.0          1904.0       1904.00\n```\n\n\nAs you can see, the last row didn't use ```\n589```\n but also ```\n2401```\n because of your threshold.\n\nTo remove outliers instead of using the median, you can look at IQR or Z-score, but I'm not sure it works well on small data, you can give it try and just adapt or create new functions.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Python Pandas Fillna Median not working\r\n                \r\nI am trying to fill all the nans in a dataframe containing multiple columns and several rows. I am using this to train a multi variate ML-model so I want to fill the nans for each column with the median. Just to test the median function I did this:\n\n```\ntraining_df.loc[[0]] = np.nan # Sets first row to nan\nprint(training_df.isnull().values.any()) # Prints true because we just inserted nans\ntest = training_df.fillna(training_df.median()) # Fillna with median\nprint(test.isnull().values.any()) # Check afterwards\n```\n\n\nBut when I do this nothing happens, the print of the last row still returns True. If I try to change to use the median function like this instead:\n\n```\ntraining_df.fillna(training_df.median(), inplace=True)\n```\n\n\nNothing happens as well. If I do this:\n\n```\ntraining_df = training_df.fillna(training_df.median(), inplace=True)\n```\n\n\nTraining_df becomes none. How can I solve this?\n    ", "Answer": "\r\nAs @thesilkworm suggested, convert your series to numeric first. Below is a minimal example:\n\n```\nimport pandas as pd, numpy as np\n\ndf = pd.DataFrame([[np.nan, np.nan, np.nan],\n                   [5, 1, 2, 'hello'],\n                   [1, 4, 3, 4],\n                   [9, 8, 7, 6]], dtype=object)\n\ndf = df.fillna(df.median())  # fails\n\ndf[df.columns] = df[df.columns].apply(pd.to_numeric, errors='coerce')\n\ndf = df.fillna(df.median())  # works\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating Median in SQL Server 2008 R2\r\n                \r\nI need to calculate Median for several fields in a query and group it by one of the column.  Is there a way to calculate Median easily in SQL Server 2008 R2?  I am having trouble calculating it in 2008 R2.    \n\n```\nTable structure:\nPatientName (need to calculate count group by PatientType)\nPatientType (should be used to group the query by),\nminutes1,\nminutes2,\nminutes3,\nminutes4,\nminutes5\n\nEnd Result:\nPatientCount (Group by PatientType),\nMedian For minutes1 (Group by PatientType),\nMedian For minutes2 (Group by PatientType),\nMedian For minutes3 (Group by PatientType),\nMedian For minutes4 (Group by PatientType),\nMedian For minutes5 (Group by PatientType)\n```\n\n    ", "Answer": "\r\nYou could try this:\n\n```\nSELECT PatientType, minutes1=(\n  SELECT AVG(1.0 * minutes1)\n  FROM\n  (\n    SELECT t3.minutes1, rn = ROW_NUMBER() OVER (ORDER BY t3.minutes1), c.c\n    FROM (SELECT minutes1 FROM Table t2 WHERE t1.PatientType=t2.PatientType) t3\n    CROSS JOIN (SELECT c = COUNT(*) FROM (SELECT minutes1 FROM Table t2 WHERE t1.PatientType=t2.PatientType) t4) AS c\n  ) AS x\n  WHERE rn IN ((c + 1)/2, (c + 2)/2)\n), minutes2=(\n  SELECT AVG(1.0 * minutes2)\n  FROM\n  (\n    SELECT t3.minutes2, rn = ROW_NUMBER() OVER (ORDER BY t3.minutes1), c.c\n    FROM (SELECT minutes2 FROM Table t2 WHERE t1.PatientType=t2.PatientType) t3\n    CROSS JOIN (SELECT c = COUNT(*) FROM (SELECT minutes2 FROM Table t2 WHERE t1.PatientType=t2.PatientType) t4) AS c\n  ) AS x\n  WHERE rn IN ((c + 1)/2, (c + 2)/2)\n), minutes3=(\n  SELECT AVG(1.0 * minutes1)\n  FROM\n  (\n    SELECT t3.minutes3, rn = ROW_NUMBER() OVER (ORDER BY t3.minutes1), c.c\n    FROM (SELECT minutes3 FROM Table t2 WHERE t1.PatientType=t2.PatientType) t3\n    CROSS JOIN (SELECT c = COUNT(*) FROM (SELECT minutes3 FROM Table t2 WHERE t1.PatientType=t2.PatientType) t4) AS c\n  ) AS x\n  WHERE rn IN ((c + 1)/2, (c + 2)/2)\n), minutes4=(\n  SELECT AVG(1.0 * minutes4)\n  FROM\n  (\n    SELECT t3.minutes1, rn = ROW_NUMBER() OVER (ORDER BY t3.minutes1), c.c\n    FROM (SELECT minutes4 FROM Table t2 WHERE t1.PatientType=t2.PatientType) t3\n    CROSS JOIN (SELECT c = COUNT(*) FROM (SELECT minutes4 FROM Table t2 WHERE t1.PatientType=t2.PatientType) t4) AS c\n  ) AS x\n  WHERE rn IN ((c + 1)/2, (c + 2)/2)\n), minutes5=(\n  SELECT AVG(1.0 * minutes5)\n  FROM\n  (\n    SELECT t3.minutes1, rn = ROW_NUMBER() OVER (ORDER BY t3.minutes1), c.c\n    FROM (SELECT minutes5 FROM Table t2 WHERE t1.PatientType=t2.PatientType) t3\n    CROSS JOIN (SELECT c = COUNT(*) FROM (SELECT minutes5 FROM Table t2 WHERE t1.PatientType=t2.PatientType) t4) AS c\n  ) AS x\n  WHERE rn IN ((c + 1)/2, (c + 2)/2)\n)\nFROM Table t1\nGROUP BY PatientType\n```\n\n\nand there is probably a much better way, and it could likely be optimized quite a bit.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find the Median of a list<int> in Dart\r\n                \r\nI have a list of integers which contains times in milliseconds (ex. 1433, 834, 1020..). I need to calculate the Median. I developed the following code but the Median I get is completely wrong compared to the one I calculate in Excel. Any ideas? is there any Dart/flutter library I could use for statistics?\n```\n  /// Calculate median\n  static int calculateMedian(TimeRecordNotifier timeRecordNotifier) {\n    List<int> mList = List();\n    timeRecordNotifier.timeRecords.forEach((element) {\n      mList.add(element.partialTime);\n    });\n\n    //clone list\n    List<int> clonedList = List();\n    clonedList.addAll(mList);\n\n    int median;\n    //sort list\n    clonedList.sort((a, b) => a.compareTo(b));\n\n    if (clonedList.length == 1)\n      median = mList[clonedList.length - 1];\n    else if (clonedList.length % 2 == 1)\n      median = mList[(((clonedList.length) / 2) - 1).round()];\n    else {\n      int lower = mList[((clonedList.length ~/ 2) - 1)];\n      int upper = mList[(clonedList.length ~/ 2)];\n      median = ((lower + upper) / 2.0).round();\n    }\n\n    return median;\n  }\n```\n\nOn the following dataset the expected median value is 901,5, however this algorithm gives me 461\n```\n131\n144\n203\n206\n241\n401\n415\n427\n439\n439\n452\n455\n456\n469\n471\n471\n483\n483\n491\n495\n495\n502\n505\n512\n521\n522\n523\n547\n551\n561\n610\n727\n745\n777\n790\n793\n892\n911\n924\n943\n957\n977\n978\n989\n992\n1008\n1024\n1039\n1070\n1074\n1092\n1115\n1139\n1155\n1159\n1174\n1176\n1194\n1203\n1208\n1227\n1228\n1248\n1270\n1271\n1272\n1273\n1276\n1284\n1290\n1294\n1439\n1740\n1786\n```\n\n    ", "Answer": "\r\nI refactored the code into this using NumDart implementation and now it works. thanks @MartinM for you comment!\n```\n/// Calculate median\n  static int calculateMedian(TimeRecordNotifier timeRecordNotifier) {\n    List<int> mList = List();\n    timeRecordNotifier.timeRecords.forEach((element) {\n      mList.add(element.partialTime);\n    });\n\n    //clone list\n    List<int> clonedList = List();\n    clonedList.addAll(mList);\n\n    //sort list\n    clonedList.sort((a, b) => a.compareTo(b));\n\n    int median;\n\n    int middle = clonedList.length ~/ 2;\n    if (clonedList.length % 2 == 1) {\n      median = clonedList[middle];\n    } else {\n      median = ((clonedList[middle - 1] + clonedList[middle]) / 2.0).round();\n    }\n\n    return median;\n  }\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "calculate the median by excluding outliers (+-25% of median of four columns) for values of four columns values\r\n                \r\nI have four columns containing the amount of unit sold in last 4 years. I want to calculate the median and then calculate the mean by excluding the column values based on condition (+-25% of median).\n\n```\ndf = df[['Date','ID','amount']] # df has daily data\n\ndf['dayofYear'] = df['Date'].dt.dayofyear\n\ndf['Year_Lag1']= df.groupby(['ID','dayofYear'])['amount'].transform(lambda x: x.shift(1))\n\ndf['Year_Lag2']= df.groupby(['ID','dayofYear'])['amount'].transform(lambda x: x.shift(2))\n\ndf['Year_Lag3']= df.groupby(['ID','dayofYear'])['amount'].transform(lambda x: x.shift(3))\n\ndf['Year_Lag4']= df.groupby(['ID','dayofYear'])['amount'].transform(lambda x: x.shift(4))\n\n\ndf['YearLag_median']= df[['Year_Lag1','Year_Lag2','Year_Lag3','Year_Lag4']].median(axis=1) #median amount on same date (is there a better way to calculate median by avoiding outliers)\n```\n\n\nhow to calculate the average by avoiding values in four columns that lies in +- 25% of median.\n\nsuppose ```\nYear_Lag1 = 5000, Year_Lag2= 230, Year_Lag3=4500, Year_Lag4= 4300```\n.\n\nhow to calculate average by avoiding ```\nYear_Lag2```\n value.\n\nI want this to be done for all rows in a dataframe.\n\n(also if someone can help with a better way to calculate median by avoiding outliers)\nData set[data has values for 2nd and 3rd january (2014,15,16,17,18). Year_Lag1(shift(1)) has values from previous year for 2nd and 3rd jan. Year_Lag2(shift(2) has values from last to last year)  so on..]\n\nlast row is the example where I want to ignore 589.0 to calculate the mean.\n  [1]: https://i.stack.imgur.com/26Dvp.png```\nenter code here```\n\n    ", "Answer": "\r\nHere is a solution, I think there should be something better to do it, but still it works:\n\n\nDefine a function to calculate the mean according to your specifications\n\n\n```\ndef calculateMean(row):\n    s = 0\n    n = 0\n    for i in range(4):\n        if ~np.isnan(row[i]) and abs(row[i] - row[-1]) < 0.25 * row[-1]:\n            s += row[i]\n            n += 1\n    return (s/n if n else np.nan)\n```\n\n\n\nApply this function on every rows\n\n\n```\ndf[\"YearLag_mean\"] = df.loc[:, ['Year_Lag1','Year_Lag2','Year_Lag3','Year_Lag4', 'YearLag_median']]\\\n                       .apply(lambda row: calculateMean(row), axis=1)\n```\n\n\nOutput:\n\n```\n            Date   ID  amount  dayofYear  Year_Lag1  Year_Lag2  Year_Lag3  Year_Lag4  YearLag_median  YearLag_mean\n2258  2014-01-02  200  1778.0          2        NaN        NaN        NaN        NaN             NaN           NaN\n2259  2014-01-03  200  2149.0          3        NaN        NaN        NaN        NaN             NaN           NaN\n2623  2015-01-02  200  2057.0          2     1778.0        NaN        NaN        NaN          1778.0       1778.00\n2624  2015-01-03  200  2401.0          3     2149.0        NaN        NaN        NaN          2149.0       2149.00\n2988  2016-01-02  200  2315.0          2     2057.0     1778.0        NaN        NaN          1917.5       1917.50\n2989  2016-01-03  200   589.0          3     2401.0     2149.0        NaN        NaN          2275.0       2275.00\n3354  2017-01-02  200  1709.0          2     2315.0     2057.0     1778.0        NaN          2057.0       2050.00\n3355  2017-01-03  200  1659.0          3      589.0     2401.0     2149.0        NaN          2149.0       2275.00\n3719  2018-01-02  200  1991.0          2     1709.0     2315.0     2057.0     1778.0          1917.5       1964.75\n3720  2018-01-03  200  1570.0          3     1659.0      589.0     2401.0     2149.0          1904.0       1904.00\n```\n\n\nAs you can see, the last row didn't use ```\n589```\n but also ```\n2401```\n because of your threshold.\n\nTo remove outliers instead of using the median, you can look at IQR or Z-score, but I'm not sure it works well on small data, you can give it try and just adapt or create new functions.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median value of 3D array\r\n                \r\nI'm interesting in the way to get median of 3D array (cube). \n\nWhile I understand how to calculate median of simple 1D array, I could not find the way how it should work in 3 dimensions.\n\nCould anybody explain how to find median value of 3D, please.\n\nThanks.\n    ", "Answer": "\r\nThere is no such thing as a median of a 3D array. There's only a median of a list of numbers. If your list is stored as a 3D array, that's of little consequence. Just copy all the elements into a 1D array, sort it, and take the middle element. \n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median and Boxplot (R)\r\n                \r\nI am writing to your forum because I do not find solution for my problem. I am trying to represent graphically the Median catching time (MCT) of mosquito that we (my team and I) have collected (I am currently in an internship to study the malaria in Ivory Coast). The MCT represents the time for which 50% of the total malaria vectors were caught on humans.\nFor example, we collected this sample: \n\n```\nHour of collection / Mosquitoes number:\n20H-21H = 1\n21H-22H = 1 \n22H-23H = 2 \n23H-00H = 2 \n00H-01H = 13 \n01H-02H = 10 \n02H-03H = 15 \n03H-04H = 15 \n04H-05H = 8 \n05H-06H = 10 \n06H-07H = 6 \n```\n\n\nHere the effective cumulated is 83 mosquitoes. And I am assuming that the median of this mosquito serie is 83+1/2 = 42 (And I don't even find this number on R), inducing a Median catching time at 2 am (02). \n\nTherefore, I have tried to use the function \"boxplot\" with different parameters, but I cannot have what I want to represent. Indeed, I have boxes for each hour of collection when I want the representation of the effective cumulated over the time of collection. And the time use in R is \"20H-21H\" = 20, \"21H-22H\" = 21 etc. \n\nI have found an article (Nicolas Moiroux, 2012) who presents the Median Catching Time and a boxplot that I should like to have. I copy the image of the cited boxplot: \nBoxplot_Moiroux2012\n\nThank you in advance for your help, and I hope that my grammar is fine (I speak and write mainly in French, my mother tongue).\n\nKind Regards, \nEdouard\n\nPS : And regarding the code I have used with this set of data, here I am (with  \"Eff\" = Number of mosquito and \"Heure\" = time of collection):\n\nsum(Eff)\n\nas.factor(Heure)\n\ntapply(Eff,Heure,median)\ntapply(Heure,Eff,median)\n\nboxplot(Eff,horizontal=T)\n\nboxplot(Heure~Eff)\nboxplot(Eff~Heur))\n\n(My skills on R are not very sharp...)\n    ", "Answer": "\r\nYou need to use a trick since you already have counts and not the time data for each catch.\n\nFirst, you convert your time values to a more continuous variable, then you generate a vector with all the time values and then you boxplot (with a custom axis).\n\n```\ntxt <- \"20H-21H = 1\n21H-22H = 1\n22H-23H = 2\n23H-00H = 2\n00H-01H = 13\n01H-02H = 10\n02H-03H = 15\n03H-04H = 15\n04H-05H = 8\n05H-06H = 10\n06H-07H = 6\"\n\ndat <- read.table(text = txt, sep = \"=\",  h = F)\ncolnames(dat) <- c(\"collect_time\", \"nb_mosquito\")\n\n# make a continuous numerical proxy for time\ndat$collect_time_num <- 1:nrow(dat)\n\n# get values of proxy according to your data\ntvals <- rep(dat$collect_time_num, dat$nb_mosquito)\n\n# plot\nboxplot(tvals, horizontal = T, xaxt = \"n\")\naxis(1, labels = as.character(dat$collect_time), at = dat$collect_time_num)\n```\n\n\noutputs the following plot :\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "dplyr median by group\r\n                \r\nI have this data frame\n```\ndf1 <- data.frame(\n     Type1 = c(\"A\",\"A\",\"A\", \"AB\", \"AB\"),\n     Type2 = c(1L,2L,2L, 1L, 1L),\n     Value = c(1L, 2L, 1L, NA, NA), , Median = c(1L, 1.5, 1.5, NA, NA))\n```\n\nI would like to get median in a new column by Type1 and Type2 to a new variable \"AB\"  without summarise to have a new value in existing column.\n```\n df12 <- data.frame(\n    Type1 = c(\"A\",\"A\",\"A\", \"AB\", \"AB\"),\n    Type2 = c(1L,2L,2L, 1L, 1L),\n    Value = c(1L, 2L, 1L, NA, NA), Median = c(1L, 1.5, 1.5, 1L, 1L))\n```\n\nMy try\n```\ndf1 %>% group_by(Type1, Type2) %>% mutate(Median = ifelse(Type1 == \"AB\" & Type2 == 1, median(Value), Median))\n```\n\n    ", "Answer": "\r\nWe may need to remove the grouping here\n```\nlibrary(dplyr)\ndf1 %>%\n    mutate(Median = replace(Median, Type1 %in% 'AB' & Type2 %in% 1, \n        median(Value, na.rm = TRUE)) )\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Strange behavior with Pandas median\r\n                \r\nConsider the following dataframe:\n\n```\n       b           c     d     e  f     g     h\n0   6.25  2018-04-01  True   NaN  7  54.0  64.0\n1  32.50  2018-04-01  True   NaN  7  54.0  64.0\n2  16.75  2018-04-01  True   NaN  7  54.0  64.0\n3  29.25  2018-04-01  True   NaN  7  54.0  64.0\n4  21.75  2018-04-01  True   NaN  7  54.0  64.0\n5  21.75  2018-04-01  True  True  7  54.0  64.0\n6   7.75  2018-04-01  True  True  7  54.0  64.0\n7  23.25  2018-04-01  True  True  7  54.0  64.0\n8  12.25  2018-04-01  True  True  7  54.0  64.0\n9  30.50  2018-04-01  True   NaN  7  54.0  64.0\n```\n\n\n(copy and paste and use ```\ndf = pd.read_clipboard()```\n to create the dataframe)\n\nFinding the medians initially works with no problem:\n\n```\ndf.median()\n\nb    21.75\nd     1.00\ne     1.00\nf     7.00\ng    54.00\nh    64.00\ndtype: float64\n```\n\n\nHowever, if a column is dropped and then the ```\nmedian```\n is found, the median for column ```\ne```\n disappears:\n\n```\nnew_df = df.drop(columns=['b'])\nnew_df.median()\n\nd     1.0\nf     7.0\ng    54.0\nh    64.0\ndtype: float64\n```\n\n\nThis behavior is a little unexpected and finding the median for column e by itself still works:\n\n```\nnew_df['e'].median()\n1.0\n```\n\n\nUsing ```\nskipna=False```\n does not make a difference:\n\n```\nnew_df.median(skipna=False)\n\nd     1.0\nf     7.0\ng    54.0\nh    64.0\ndtype: float64\n```\n\n\n(it does for the original dataframe):\n\n```\ndf.median(skipna=False)\n\nb    21.75\nd     1.00\ne      NaN\nf     7.00\ng    54.00\nh    64.00\ndtype: float64\n```\n\n\nThe datatype of column ```\ne```\n is ```\nobject```\n in both ```\ndf```\n and ```\nnew_df```\n and the only difference between the two dataframes is ```\nnew_df```\n does not have column ```\nb```\n. Adding the column back into ```\nnew_df```\n does not resolve the issue. This only occurs when the first column ```\nb```\n is dropped. It does not occur if column ```\ne```\n is a float or integer datatype.\n\nThis behavior is present in both ```\npandas==0.22.0```\n and ```\npandas==0.24.1```\n\n\nThere is now an open GitHub issue for anyone to try and solve this! \n    ", "Answer": "\r\nThis appears to be a bug. When we dispatch any df to ```\nmedian```\n, this maps to the internal ```\n_reduce```\n function. With ```\nnumeric_only```\n set to ```\nNone```\n, this computes the median by series, and ignore failures (for the ```\nc```\n columns, for e.g. median computation will fail.) and accumulate results (see ```\n_reduce```\n in pandas source core/frame.py). So far it is fine. But while stiching the results together through it does a check to infer if the results are scalar or series (for ```\nmedian```\n it will be scalar of course). To do this check, it always use the first column (see ```\nwrap_results```\n in pandas source core/apply.py). So if the first column calc failed and it was skipped, this check fails, raising an exception. This triggers the fallback method within ```\n_reduce```\n of forcing the dataframe to numeric only (dropping any columns with ```\nNaN```\n) and re-compute the medians.\n\nSo in your case, if the column c (or any other dtype where median computation will fail, like text) is in the first column, then all columns with ```\nNaN```\n will also be dropped for the median results. Setting ```\nskipna```\n does not change as the bug is with how non-numeric column in first position triggers a forced numeric only computation. I do not see there is any fix possible without fixing it in the pandas codebase. Or ensuring first column will always succeed for median computation.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Creating a median filter\r\n                \r\nI am given an image that has \"speckle noise\", my assignment is to remove in each layer separately then recombining the clean image. I am not allowed to use the med2flt() only the median filter. I have already separated the 3 different layers red,green and blue but I do not know how to apply the median filter to them. How would I do it?\n    ", "Answer": "\r\nUsing ```\nnlfilter```\n\n\nIf you're allowed to use ```\nnlfilter```\n, you could give it a try with ```\nflt = @(x) median(x(:))```\n as its filter function. You find more information on this if you type ```\ndoc nlfilter```\n.\n\nWriting your own\n\nIt could be that the exercise is about how to implement a filtering operation yourself. First, you may want to allocate memory for the filtered image with ```\nimf = zeros(size(im, 1) - 2, size(im, 2) - 2);```\n That image is a little smaller because one way to handle the edges is to discard them. Then, consider two ```\nfor```\n loops over ```\nx```\n and ```\ny```\n for image ```\nim```\n as in\n\n```\nfor x = 1 : size(im, 2) - 2\n    for y = 1 : size(im, 1) - 2\n        roi = im(y : y + 2, x : x + 2);\n        imf(y, x) = median(roi(:));\n    end\nend\n```\n\n\n```\nroi```\n keeps the local 3x3 neighborhood of ```\nim```\n, and ```\nmedian(roi(:))```\n allows you to calculate the median of those 9 intensity values.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Geometric median of multidimensional points\r\n                \r\nI have an array of 3D points:\n\n```\na = np.array([[2., 3., 8.], [10., 4., 3.], [58., 3., 4.], [34., 2., 43.]])\n```\n\n\nHow can I compute the geometric median of those points?\n    ", "Answer": "\r\nI implemented Yehuda Vardi and Cun-Hui Zhang's algorithm for the geometric median, described in their paper \"The multivariate L1-median and associated data depth\". Everything is vectorized in numpy, so should be very fast. I didn't implement weights - only unweighted points. \n\n```\nimport numpy as np\nfrom scipy.spatial.distance import cdist, euclidean\n\ndef geometric_median(X, eps=1e-5):\n    y = np.mean(X, 0)\n\n    while True:\n        D = cdist(X, [y])\n        nonzeros = (D != 0)[:, 0]\n\n        Dinv = 1 / D[nonzeros]\n        Dinvs = np.sum(Dinv)\n        W = Dinv / Dinvs\n        T = np.sum(W * X[nonzeros], 0)\n\n        num_zeros = len(X) - np.sum(nonzeros)\n        if num_zeros == 0:\n            y1 = T\n        elif num_zeros == len(X):\n            return y\n        else:\n            R = (T - y) * Dinvs\n            r = np.linalg.norm(R)\n            rinv = 0 if r == 0 else num_zeros/r\n            y1 = max(0, 1-rinv)*T + min(1, rinv)*y\n\n        if euclidean(y, y1) < eps:\n            return y1\n\n        y = y1\n```\n\n\nIn addition to the default SO license terms, I release the code above under the zlib license, if you so prefer.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "MySQL median subquery in select\r\n                \r\nThis is what I have at the moment:\nhttp://sqlfiddle.com/#!9/30a97c/10\nSchema:\n```\nCREATE TABLE IF NOT EXISTS `test` (\n  `t_id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `t_city` varchar(64) NOT NULL,\n  `t_category` enum('cat1','cat2') NOT NULL,\n  `t_type` enum('type1','type2') NOT NULL,\n  `t_num` int(8) NOT NULL,\n  PRIMARY KEY (`t_id`)\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;\n\nINSERT INTO `test` (`t_id`, `t_city`, `t_category`, `t_type`, `t_num`) VALUES\n(1, 'New York', 'cat1', 'type1', 1056),\n(2, 'New York', 'cat1', 'type1', 3756),\n(3, 'London', 'cat1', 'type2', 3456),\n(4, 'New York', 'cat1', 'type2', 5756),\n(5, 'London', 'cat1', 'type2', 3777),\n(6, 'New York', 'cat2', 'type1', 3756),\n(7, 'New York', 'cat2', 'type1', 3756),\n(8, 'London', 'cat2', 'type1', 3777),\n(9, 'New York', 'cat2', 'type2', 4556),\n(10, 'Berlin', 'cat1', 'type2', 1556),\n(11, 'Berlin', 'cat2', 'type2', 9756),\n(12, 'London', 'cat1', 'type2', 1756);\n```\n\nQuery:\n```\nSELECT \"cat1\" as st_category, \"type2\" as st_type, t_city as st_name, \n(\nSELECT (ROUND(AVG(dd.t_num) / 10) * 10) as median\nFROM (\nSELECT d.t_num, @rownum:=@rownum+1 as `row_number`, @total_rows:=@rownum\n  FROM test as d, (SELECT @rownum:=0) as r\n  WHERE d.t_num is NOT NULL\n  AND `t_category` = \"cat1\" AND `t_type` = \"type2\" AND `t_city` = \"XXXXX\"  \n  ORDER BY d.t_num\n) as dd\nWHERE dd.row_number IN ( FLOOR((@total_rows+1)/2), FLOOR((@total_rows+2)/2) )\n) as st_median,\nCOUNT(t_num) as st_count\nFROM `test` WHERE `t_category` = \"cat1\" AND `t_type` = \"type2\"\nAND t_city in (\"London\", \"New York\")\nGROUP BY t_city\nORDER BY st_name ASC\n```\n\nI don't know what to write in place of XXX (in the subquery) so that the median values of \"t_num\" in the output lines are not NULL. No median function in my MySQL.\nOUTPUT NOW:\n```\n+-------------+---------+----------+-----------+----------+\n| st_category | st_type |  st_name | st_median | st_count |\n+-------------+---------+----------+-----------+----------+\n|        cat1 |   type2 |   London |    (null) |        3 |\n|        cat1 |   type2 | New York |    (null) |        1 |\n+-------------+---------+----------+-----------+----------+\n```\n\nREQUIRED OUTPUT:\n```\n+-------------+---------+----------+-----------+----------+\n| st_category | st_type |  st_name | st_median | st_count |\n+-------------+---------+----------+-----------+----------+\n|        cat1 |   type2 |   London |      3460 |        3 |\n|        cat1 |   type2 | New York |      5760 |        1 |\n+-------------+---------+----------+-----------+----------+\n```\n\n    ", "Answer": "\r\nThank you all for your help! This is the right solution:\n```\nSET SESSION GROUP_CONCAT_MAX_LEN = 1000000;\nSELECT `t_category` AS st_category,\n       `t_type`     AS st_type,\n       `t_city`     AS st_name,\n       CASE ( COUNT(*) % 2 )\n         WHEN 1 THEN \n            ROUND(SUBSTRING_INDEX(SUBSTRING_INDEX(GROUP_CONCAT(`t_num` \n                ORDER BY `t_num` SEPARATOR ','), ',', ( COUNT(*) + 1 ) / 2), ',', -1)\n            / 10) * 10\n         ELSE \n            ROUND((SUBSTRING_INDEX( SUBSTRING_INDEX( GROUP_CONCAT(`t_num`\n                ORDER BY `t_num` SEPARATOR ','), ',', COUNT(*) / 2), ',', -1)\n                 + SUBSTRING_INDEX( SUBSTRING_INDEX( GROUP_CONCAT(`t_num`\n                ORDER BY `t_num` SEPARATOR ','), ',', (COUNT(*) + 1) / 2), ',', -1) ) / 2\n            / 10) * 10\n       END               st_median,\n       COUNT(`t_num`) AS st_count\nFROM   `test`\nWHERE  `t_category` = \"cat1\"\n       AND `t_type` = \"type2\"\n       AND `t_city` IN ( \"London\", \"New York\" )\nGROUP  BY `t_city`\nORDER  BY st_name ASC; \n```\n\nSQL Fiddle: http://sqlfiddle.com/#!9/30a97c/13\nThe GROUP_CONCAT_MAX_LEN setting is only required if you are working a lot of data.\nMaximum value is 18,446,744,073,709,551,615 on 64-bit platforms.\nOn 32-bit platforms: 4,294,967,295.\nhttps://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "quickSort algorithm using median of medians as a pivot for partitioning\r\n                \r\nthere is a lot of info on StackOverflow but I couldn't exactly figure it out the way I need it.\nI'm trying to implement a quickSelect algorithm with a median of medians but not exactly making it work.\nthe algorithm is supposed to find the i-th smallest element in the array with the input of n>1 elements using these steps :\n\nif n==1 return the element in the array.\n\ndivide the n elements in the array into groups of \"groupSize\" and one more group of \"groupSize\" -1 elements at most. the original algorithm is groups of 5 but i want it to be modular.\n\nfind the median of each of the (ceiling value) of n/groupSize by using insertion sort and picking the median of the sort sub-array.\n\ncall Select recursively to find the median \"x\" of ceiling value n/groupSize medians found in step 3. given that number of medians is even - \"x\" would be the bottom median.\n\nthis is the part i found trickiest - divide the input array around the median of medians \"x\" using partition (possibly hoare-parititon). place in k the number of elements in the lower area of the partition so \"x\" would be the k-th smallest element and the upper are of the partition will hold n-k elements.\n\nif i=k return \"x\" , if i<k  call Select recursively to find the i-th smallest element in the lower sub-array, if i>k call select to find the (i-k) smallest in the upper sub-array.\n\n\ni don't exactly know how to execute section 5 and i feel this is the part that figures everything here\nthis is my Select\n```\n    if(right-left+1==1) return array[left];\n    // full steps are the count of full groups in size of groupSize(left of decimal point)\n    int fullSteps = array.length/groupSize;\n    int semiSteps = (int)((double)(array.length)%groupSize);\n    int i;\n    //array of medians is the size of number of groups needed\n    int medianArraySize = (int) Math.ceil (((double)(array.length))/groupSize);\n    int [] medianArray = new int [medianArraySize];\n    print(medianArray);\n    // sort the entire array by cutting it to chunks of defined size\n        for(i=0;i<medianArraySize;i++){\n            insertionSort(array, i*groupSize,i*groupSize+groupSize);\n            //place the median of sorted sub-array into median array in place i\n            medianArray[i]=findMidean(array, i*groupSize, i*groupSize+groupSize);\n            //implement insertion sort on full groups to find median - ceilling value\n        }\n        int medianOfMedians = select(medianArray,0,medianArraySize-1,groupSize,medianArray[(medianArraySize-1)/2]);\n        //find median of medians without using recursion\n//        int medianOfMedians = medianArray[(medianArraySize-1)/2];\n        //   System.out.println(\"median of medians is :\" +medianOfMedians);\n\n        int pivot = hoarePartition(array,left,right,medianOfMedians);\n        int k = left-pivot +1;\n        if (pivot==k-1) return array[pivot];\n        else\n            if (pivot<k-1) return select(array,pivot +1,right,groupSize,ithSmallest);\n        else return select(array,left,pivot-1,groupSize,ithSmallest-k);\n\n    }\n```\n\nhelper function - find median\n```\n*\n * returns the median value for the desginated range in given array.\n */\nprivate static int findMidean(int [] array,  double start,int end){\n    int stopper = Math.min(array.length,end);\n    int index =(int)(Math.ceil(start+stopper-1)/2.0);\n    return array[index];\n}\n```\n\npartition algorithm\n```\npublic static int hoarePartition(int[] arr, int low, int high,int pivot)\n    {\n        int i = low, j = high;\n\n        while (true) {\n            // Find leftmost element greater\n            // than or equal to pivot\n\n            while (i<j && arr[i] < pivot){\n                i++;\n            }\n\n            // Find rightmost element smaller\n            // than or equal to pivot\n            while (j>i && arr[j] > pivot){\n                j--;\n            }\n            // If two pointers met.\n            if (i >= j)\n                return j;\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            // swap(arr[i], arr[j]);\n        }\n    }\n```\n\nand insertion sort\n```\npublic static void insertionSort(int [] arr,int placeHolder,int end)\n    {\n        int stopper = Math.min(arr.length,end);\n        for (int i = placeHolder; i < stopper; ++i) {\n            int key = arr[i];\n            int j = i - 1;\n            /* Move elements of arr[0..i-1], that are\n               greater than key, to one position ahead\n               of their current position */\n            while (j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j];\n                j = j - 1;\n            }\n            arr[j + 1] = key;\n        }\n    }\n```\n\n    ", "Answer": "\r\nIf Hoare partition scheme is used, then the pivot and all elements equal to the pivot can end up anywhere. This means the case of ```\ni == k```\n can't be used, and instead quickselect will have to recursively call itself until the base case of a single element is reached.\nIf Lomuto partition scheme is used, then the pivot is put in place and the index of the pivot is returned, so the ```\ni == k```\n case can be used.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median of a rolling window, excluding zeros\r\n                \r\nwhen i try to find the rolling median of the following series, i get a list of NaNs.  \n\nI used: \n\n```\nb = a[a!=0].rolling(100).median()\n```\n\n\na = actual data series (dataframe).  Has a bunch of zeros in it that i want to exclude when finding the median\n\nb = rolling median\n\na[a!=0] gives me the following series.\n\n```\n2017-10-05       NaN\n2017-10-06 -0.001074\n2017-10-09 -0.001804\n2017-10-10       NaN\n2017-10-11       NaN\n2017-10-12 -0.001687\n2017-10-13       NaN\n2017-10-16       NaN\n2017-10-17       NaN\n2017-10-18       NaN\n2017-10-19       NaN\n2017-10-20       NaN\n2017-10-23 -0.003972\n2017-10-24       NaN\n2017-10-25 -0.004663\n2017-10-26       NaN\n2017-10-27       NaN\n2017-10-30 -0.003192\n2017-10-31       NaN\n2017-11-01       NaN\n2017-11-02       NaN\n2017-11-03       NaN\nt2017-11-06       NaN\n2017-11-07 -0.000189\n2017-11-08       NaN\n2017-11-09 -0.003762\n2017-11-10 -0.000898\n2017-11-13       NaN\n2017-11-14 -0.002310```\n\n\nthe output is just a list of NaNs.\n\nwhat am i doing wrong?\nthank you!\n    ", "Answer": "\r\nSince a is Dataframe and not a Series, if you try to do indexing, you will get NaNs. \n\nConsider this Series\n\n```\ns = pd.Series(np.random.randint(0,10, 20), index = pd.date_range(start = '01/01/2017', periods = 20))\n```\n\n\nIf you slice it, zeros are dropped \n\n```\ns[s!=0]\n```\n\n\nBut for the dataframe, the same code will introduce the NaNs.\n\n```\ndf = pd.DataFrame(np.random.randint(0,10, 20), index = pd.date_range(start = '01/01/2017', periods = 20))\n```\n\n\nYou can handle this by specifying the column name while indexing\n\n```\ndf[df[0] != 0] #df[0] being the column\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of Medians algorithm not working consistently\r\n                \r\nI have implemented the select/median of medians algorithm using the following as a reference http://www.ics.uci.edu/~eppstein/161/960130.html (this has previously been linked here Median of Medians in Java).\n\nMy code seems to work for small arrays (~100) and even works for arrays of size 100001 http://pastebin.com/mwRc4Hig (answer 5008), but then fails on an input array of size 10001 http://pastebin.com/YwVBmgDk (answer 4960, my code outputs 4958).\n\nNote that the correct answers for the texts above are equivalent to sorting the array and returning the element at array[array.length / 2], regardless of whether the array size is even or odd.\n\nI'm not sure how to debug this issue. The functionality seems arbitrary and I'm just lost. Here below is my code:\n\n```\npublic class MedianOfMedians {\n\npublic static void main(String[] args) {\n    MedianOfMedians mds = new MedianOfMedians();\n    mds.run();\n}\n\nprivate void run() {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int[] numArray = new int[n];\n    for (int i = 0; i < n; i++) {\n        numArray[i] = in.nextInt();\n    }\n    int median = select(numArray, numArray.length / 2);\n    System.out.print(median);\n}\n\nprivate int select(int[] numArray, int k) {\n    if (numArray.length <= 10) {\n        int[] sorted = insertionSort(numArray);\n        return sorted[k];\n    }\n\n    int divCount = (numArray.length % 5 == 0) ? numArray.length / 5 - 1 : numArray.length / 5;\n    int[] medOfMed = new int[divCount + 1];\n    int counter = 0;\n    int[] subArray;\n\n    while (counter <= divCount) {\n        subArray = splitByFive(counter, divCount, numArray);\n        medOfMed[counter] = select(subArray, subArray.length / 2);\n        counter++;\n    }\n\n    int M = select(medOfMed, numArray.length / 10);\n\n    List<Integer> lt = new ArrayList<>();\n    List<Integer> eq = new ArrayList<>();\n    List<Integer> gt = new ArrayList<>();\n    for (int i : numArray) {\n        if (i < M) {\n            lt.add(i);\n        } else if (i == M) {\n            eq.add(i);\n        } else {\n            gt.add(i);\n        }\n    }\n    if (k < lt.size()) {\n        return select(createArray(lt), k);\n    } else if (k > lt.size() + eq.size()) {\n        return select(createArray(gt), k - lt.size() - eq.size());\n    } else {\n        return M;\n    }\n}\n\nprivate int[] splitByFive(int splitIter, int divisions, int[] toSplit) {\n    int numToCopy;\n    if (splitIter == divisions) {\n        numToCopy = toSplit.length - (5 * splitIter);\n    } else {\n        numToCopy = 5;\n    }\n    int[] subArray = new int[numToCopy];\n    System.arraycopy(toSplit, splitIter * 5, subArray, 0, numToCopy);\n    return subArray;\n}\n\nprivate int[] createArray(List<Integer> list) {\n    int[] result = new int[list.size()];\n    for (int i = 0; i < list.size(); i++) {\n        result[i] = list.get(i);\n    }\n    return result;\n}\n\nprivate int[] insertionSort(int[] numArray) {\n    for (int i = 1; i < numArray.length; i++) {\n        int j = i;\n        while (j - 1 >= 0 && numArray[j] < numArray[j - 1]) {\n            int temp = numArray[j];\n            numArray[j] = numArray[j - 1];\n            numArray[j - 1] = temp;\n            j--;\n        }\n    }\n    return numArray;\n}\n}\n```\n\n    ", "Answer": "\r\nI don't have time to debug your code, but maybe I can offer a debugging technique for you to try yourself that's useful for recursive algorithms like this.\n\nIf there is an input that the algorithm fails on (and there is, as you found) then there is a smallest such input -- and the smaller this input, the easier it is to figure out what's going wrong.  Because the algorithm is recursive, you have a nice way to isolate the first place that things go wrong: you can test that the result you are about to return from ```\nselect()```\n is correct (using a slow, trusted method like copying the data to a temporary buffer, sorting it and then grabbing the half-way element) just before returning the value.  Doing this will be much easier if you rearrange the function to use just a single ```\nreturn```\n statement, e.g.:\n\n```\nprivate int select(int[] numArray, int k) {\n    int knownCorrectAnswer = selectSlowlyButDefinitelyCorrectly(numArray, k);\n    int willReturn;\n    if (numArray.length <= 10) {\n        int[] sorted = insertionSort(numArray);\n        willReturn = sorted[k];    // Just remember what we will return\n    } else {    // Need to add else branch here now\n\n        ...\n\n        if (k < lt.size()) {\n            willReturn = select(createArray(lt), k);\n        } else if (k > lt.size() + eq.size()) {\n            willReturn = select(createArray(gt), k - lt.size() - eq.size());\n        } else {\n            willReturn = M;\n        }\n    }    // End of inserted else branch\n\n    if (willReturn == knownCorrectAnswer) {\n        return willReturn;\n    } else {\n        yell(\"First problem occurs with numArray=<...> and k=<...>!\");\n    }\n}\n```\n\n\n```\nyell()```\n should print out the entire problem instance and halt the program (e.g. by throwing an exception).  The nice thing about this setup is that you know that when ```\nyell()```\n gets called, every call to ```\nselect()```\n that has already completed was correct -- since if it wasn't, ```\nyell()```\n would have already been called and the program would have halted before now.  So the output produced by ```\nyell()```\n is guaranteed to be the first (not necessarily the smallest, but often that also) subproblem in which things went wrong.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Rolling median by group\r\n                \r\nI know variations of this question have been asked and answered 1,000 times. I've read every post and tried to implement what I read without success. \n\nI have a dataframe of basketball individual game statistics for multiple players. I want to calculate 1) the \"season to date\" rolling median for each player (excluding the current observation) and 2) The median for he last 3 previous games (excluding the current observation)\n\nI've included samples of what I would expect the output to be in each case.\n\nHere's a sample of the data:\n\n```\n# Create Dataframe\nplyr_seas = c(\"J.J. Redick\", \"Andre Drummond\", \"Daniel Theis\", \"Andre Drummond\", \"Daniel Theis\", \"J.J. Redick\", \"Andre Drummond\", \"J.J. Redick\", \"Andre Drummond\", \"J.J. Redick\", \"Daniel Theis\", \"Andre Drummond\", \"J.J. Redick\", \"Daniel Theis\")\n\nplyrOREBpmin_gm = c(0, 0.1715686275, 0.1013513514, 0.02721088435, 0.2002224694, 0, 0.1217861976, 0.03552397869, 0.1044386423, 0.03984063745, 0.03573555688, 0.2264150943, 0, 0.03719776813)\n\nplyrGmsPlydpcs = c(0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 2, 4, 4, 3)\n\nexpected_last_3_median = c(NA, NA, NA, NA, NA, NA, NA, NA, 0.1217861976, 0, NA, 0.1044386423, 0.03552397869, 0.1013513514)\n\nexpected_overall_median = c(NA, NA, NA, 0.1715686275, 0.1013513514, 0, 0.0993897559, 0, 0.1217861976, 0, 0.1507869104, 0.1131124199, 0.01776198934, 0.1013513514)\n\nPbox = data.frame(plyr_seas, plyrOREBpmin_gm, plyrGmsPlydpcs, expected_last_3_median, expected_overall_median)\n```\n\n\nSOLUTION for above data! Provided by:  G. Grothendieck\n\n```\n# Calc rolling median for last three games (excluding current)\nPbox = Pbox %>% \n group_by(plyr_seas) %>% \n mutate(plyrOREBrateMdnLst3 = \n   rollapplyr(plyrOREBpmin_gm, list(-seq(3)), median, fill = NA))\n\n# Calc rolling median for season to date (excluding current)\nPbox = Pbox %>% \n  group_by(plyr_seas) %>% \n  mutate(plyrOREBrateMdnSeas = \n    rollapplyr(plyrOREBpmin_gm, seq_along(plyrGmsPlydpcs), \n      function(x) median(head(x, -1)), fill = NA))\n```\n\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Compare column with median\r\n                \r\nI have a data table like the following:\n\n```\nTDT <- data.table(Group = c(rep(\"A\",40),rep(\"B\",60)),\n                      Id = c(rep(1,20),rep(2,20),rep(3,20),rep(4,20),rep(5,20)),\n                      Date = rep(seq(as.Date(\"2010-01-03\"), length=20, by=\"1 month\") - 1,5),\n                      x1 = sample(100,100))\n```\n\n\nI calculate the median of ```\nx1```\n as follows:\n\n```\nTDT2 <- TDT[, median(x1), by = .(Group,Date)]\n```\n\n\nMy question is: How can I compare each value of ```\nx1```\n in TDT with the resulting median per Group and Date? For example if it is lower, TRUE should result. I know one way with a nested for loop over Group and Date, but this takes very long on a big data set. What I wonder is if there is  a more datatable'ish way that makes use of ```\nby```\n maybe?\n    ", "Answer": "\r\nYou can use ```\n:=```\n to add new columns to the data.table:\n\n```\nTDT <- data.table(Group = c(rep(\"A\",40),rep(\"B\",60)),\n                  Id = c(rep(1,20),rep(2,20),rep(3,20),rep(4,20),rep(5,20)),\n                  Date = rep(seq(as.Date(\"2010-01-03\"), length=20, by=\"1 month\") - 1,5),\n                  x1 = sample(100,100))\n\n# add median within groups\nTDT[, median.x1 := as.numeric(median(x1, na.rm = T)), by = .(Group, Date)]\n# compare original values to the median\nTDT[, bellow.median.x1 := x1 < median.x1]\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "React - NaN median value\r\n                \r\nI wanted to calculate the median, but its value is NaN. Anyone have an idea why?\nWhen I remove the square brackets, some value comes out, but that's definitely not what I mean :/\nThis is what I have in the console: https://i.stack.imgur.com/Cqm4b.png\n```\n\nconst CoinDataAnalytics = ({ data }) => {\n  const coinPrices = data?.map((item) => item.y);\n\n  const sortedCoinPrices = coinPrices?.sort((a, b) => a - b);\n  if (!sortedCoinPrices || sortedCoinPrices.length === 0) {\n    return null;\n  }\n  console.log(sortedCoinPrices);\n  const median =\n    sortedCoinPrices.length % 2 === 0\n      ? (sortedCoinPrices[sortedCoinPrices.length / 2 - 1] +\n          sortedCoinPrices[sortedCoinPrices.length / 2]) /\n        2\n      : sortedCoinPrices[Math.floor(sortedCoinPrices.length / 2)];\n      console.log(median);\n  const renderData = () => {\n    if (data) {\n      return (\n        <div className=\"bg-white border mt-2 rounded p-3\">\n          <div className=\"col-sm\">\n            <h3>Stats[enter image description here][1]</h3>\n            <div className=\"d-flex flex-column\">\n              <span className=\"text-muted coin-data-category\">Median</span>\n              <span>{median}</span>\n            </div>\n            <hr />\n            <div className=\"d-flex flex-column\">\n              <span className=\"text-muted coin-data-category\">\n                Total Supply\n              </span>\n              <span></span>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  return <div>{renderData()}</div>;\n};\n\nexport default CoinDataAnalytics;\n\n```\n\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating median with Group By in AWS Redshift\r\n                \r\nI've seen other posts about using the median() window function in Redshift, but how would you use it with a query that has a group by at the end?\n\nFor example, assume table course:\n\n```\nCourse | Subject | Num_Students\n-------------------------------\n   1   |  Math   |      4\n   2   |  Math   |      6\n   3   |  Math   |      10\n   4   | Science |      2\n   5   | Science |      10\n   6   | Science |      12\n```\n\n\nI want to get the median number of students for each course subject. How would I write a query that gives the following result:\n\n```\n  Subject  | Median\n-----------------------\n Math      |     6\n Science   |     10\n```\n\n\nI've tried:\n\n```\nSELECT\nsubject, median(num_students) over ()\nFROM\ncourse\nGROUP BY 1\n;\n```\n\n\nBut it lists every occurrence of the subject and the same median number across subjects like (this is fake data so the actual value it returns is not 6, but just showing it's the same across all subjects):\n\n```\n  Subject  | Median\n-----------------------\n Math      |     6\n Math      |     6\n Math      |     6\n Science   |     6\n Science   |     6\n Science   |     6\n```\n\n    ", "Answer": "\r\nThe following will get you exactly the result you are looking for:\n\n```\nSELECT distinct\nsubject, median(num_students) over(partition by Subject) \nFROM\ncourse\norder by Subject;\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find Median of AVL tree\r\n                \r\nI've searched a bit and found a related post: Get median from AVL tree?\nbut I'm not too satisfied with the response.\n\nMy thoughts on solving this problem:\n\n\nIf the balance factor is 0, return root\nelse keep removing the root until the tree is completely balanced, and calculate the median of the roots you just removed\n\n\nAssuming the AVL tree will keep the balance(by definition?)\nI've seen some answers suggesting in-order traversal and find median, but I that will require more space and time in my opinion.\n\nCan someone confirm or correct my ideas? thanks!\n    ", "Answer": "\r\nThere are two problems in your suggested approach:\n\n\nYou destroy your tree in the process (or take up twice as much memory for a \"backup\" copy)\nIn the worst case, you need quite a lot of root removals to get a completely balanced tree (I think in the worst-case, it would be close to ```\n2^(n-1)-1```\n removals)... and you'd still need to calculate the median from that.\n\n\nThe answer in your linked question is right and optimal. The usual way to solve this is to construct a Order statistic tree (by holding the number of elements of the left and right sub-tree for each node). Do note, that you have to compensate the numbers accordingly if a rotation of the AVL tree happens.\n\nSee IVlad's answer here. Since an AVL tree guarantees an ```\nO(log n)```\n Search operation and IVlad's algorithm is essentially a Search operation, you can find the ```\nk```\n-th smallest element in ```\nO(log n)```\n time and ```\nO(1)```\n space (not counting the space for the tree itself).\n\nAssuming your tree is indexed from 0 and has ```\nn```\n elements, find the median in the following way:\n\n\nif ```\nn```\n is odd: Find the ```\n(n-1)/2```\n-th element and return it\nif ```\nn```\n is even: Find the ```\nn/2```\n-th and ```\n(n/2)-1```\n elements and return their average\n\n\nAlso, if changing the tree (left/right element counts) is not an option, see the second part of the answer you linked to.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "John Tukey \"median median\" (or \"resistant line\") statistical test for R and linear regression\r\n                \r\nI'm searching the John Tukey algorithm which compute a \"resistant line\" or \"median-median line\" on my linear regression with R.\n\nA student on a mailling list explain this algorithm in these terms : \n\n\n  \"The way it's calculated is to divide\n  the data into three groups, find the\n  x-median and y-median values (called\n  the summary point) for each group, and\n  then use those three summary points to\n  determine the line.  The outer two\n  summary points determine the  slope,\n  and an average of all of them\n  determines the intercept.\"\n\n\nArticle about John tukey's median median for curious : http://www.johndcook.com/blog/2009/06/23/tukey-median-ninther/\n\nDo you have an idea of where i could find this algorithm or R function ? In which packages,\nThanks a lot !\n    ", "Answer": "\r\nThere's a description of how to calculate the median-median line here.  An R implementation of that is\n```\nmedian_median_line <- function(x, y, data)\n{\n  if(!missing(data))\n  {\n    x <- eval(substitute(x), data) \n    y <- eval(substitute(y), data) \n  }\n  \n  stopifnot(length(x) == length(y))\n\n  #Step 1\n  one_third_length <- floor(length(x) / 3)\n  groups <- rep(1:3, times = switch((length(x) %% 3) + 1,\n     one_third_length,\n     c(one_third_length, one_third_length + 1, one_third_length),\n     c(one_third_length + 1, one_third_length, one_third_length + 1)\n  ))\n\n  #Step 2\n  x <- sort(x)\n  y <- sort(y)\n  \n  #Step 3\n  median_x <- tapply(x, groups, median)                                 \n  median_y <- tapply(y, groups, median)\n\n  #Step 4\n  slope <- (median_y[3] - median_y[1]) / (median_x[3] - median_x[1])\n  intercept <- median_y[1] - slope * median_x[1]\n\n  #Step 5\n  middle_prediction <- intercept + slope * median_x[2]\n  intercept <- intercept + (median_y[2] - middle_prediction) / 3\n  c(intercept = unname(intercept), slope = unname(slope))\n}\n```\n\nTo test it, here's an example:\n```\ndfr <- data.frame(\n  time = c(.16, .24, .25, .30, .30, .32, .36, .36, .50, .50, .57, .61, .61, .68, .72, .72, .83, .88, .89),\n  distance = c(12.1, 29.8, 32.7, 42.8, 44.2, 55.8, 63.5, 65.1, 124.6, 129.7, 150.2, 182.2, 189.4, 220.4, 250.4, 261.0, 334.5, 375.5, 399.1))\n  \nmedian_median_line(time, distance, dfr) \n#intercept     slope \n#   -113.6     520.0\n```\n\nNote the slightly odd way of specifying the groups.  The instructions are quite picky about how you define group sizes, so the more obvious method of ```\ncut(x, quantile(x, seq.int(0, 1, 1/3)))```\n doesn't work.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Is there a better way to calculate the median (not average)\r\n                \r\nSuppose I have the following table definition: \n\n```\nCREATE TABLE x (i serial primary key, value integer not null);\n```\n\n\nI want to calculate the MEDIAN of ```\nvalue```\n (not the AVG). The median is a value that divides the set in two subsets containing the same number of elements. If the number of elements is even, the median is the average of the biggest value in the lowest segment and the lowest value of the biggest segment. (See wikipedia for more details.)\n\nHere is how I manage to calculate the MEDIAN but I guess there must be a better way:\n\n```\nSELECT AVG(values_around_median) AS median\n  FROM (\n    SELECT\n       DISTINCT(CASE WHEN FIRST_VALUE(above) OVER w2 THEN MIN(value) OVER w3 ELSE MAX(value) OVER w2 END)\n        AS values_around_median\n      FROM (\n        SELECT LAST_VALUE(value) OVER w AS value,\n               SUM(COUNT(*)) OVER w > (SELECT count(*)/2 FROM x) AS above\n          FROM x\n          GROUP BY value\n          WINDOW w AS (ORDER BY value)\n          ORDER BY value\n        ) AS find_if_values_are_above_or_below_median\n      WINDOW w2 AS (PARTITION BY above ORDER BY value DESC),\n             w3 AS (PARTITION BY above ORDER BY value ASC)\n    ) AS find_values_around_median\n```\n\n\nAny ideas?\n    ", "Answer": "\r\nYes, with PostgreSQL 9.4, you can use the newly introduced inverse distribution function ```\nPERCENTILE_CONT()```\n, an ordered-set aggregate function that is specified in the SQL standard as well.\n\n```\nWITH t(value) AS (\n  SELECT 1   UNION ALL\n  SELECT 2   UNION ALL\n  SELECT 100 \n)\nSELECT\n  percentile_cont(0.5) WITHIN GROUP (ORDER BY value)\nFROM\n  t;\n```\n\n\nThis emulation of ```\nMEDIAN()```\n via ```\nPERCENTILE_CONT()```\n is also documented here.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Weighted Median If in Excel\r\n                \r\nI have an Excel data tab that has the following columns:\nA: County Name\nB: Hotel Name\nC: # of Rooms in the Hotel\nD: Year Hotel Was Constructed\n\nIn my analysis tab, I have the following columns:\nA: County Name\nB: Median Age of a Hotel Room\n\nI am trying to find the median age of a \"hotel room\" in each county.  In Excel parlance, I am trying to do a weighted MEDIAN IF - take the median if the county name matches weighted by the number of rooms - so if there are three hotels in the county, one built in 1900 w 100 rooms, one built in 1975 with 50 rooms, and one in 2000 with 200 rooms, the value returned should be 2000.  Any help is very much appreciated!!!\n    ", "Answer": "\r\nYou'll need a few auxiliary columns:\n\n\nPrepare them in the following order:\n\nColumn E to keep track of how many rooms this hotel and other hotels that are in the same county and were constructed earlier have:\n\n```\nE2 = SUMIFS($C$2:$C$15,$A$2:$A$15,\"=\"&A2,$D$2:$D$15,\"<=\"&D2)\n```\n\n\nColumn I and J to store how many rooms this county has, and half of that\n\n```\nJ2 = SUMIFS($C$2:$C$15,$A$2:$A$15,\"=\"&I2)\nK2 = J2/2\n```\n\n\nColumn F for how far E is to K, and median occurs at the first hotel that passes the mid point.\n\n```\nF2 = E2-VLOOKUP(A2,$I$2:$K$4,3,0)\n```\n\n\nColumn L to find the minimum positive value that surpasses the midpoint:\n\n```\n{L2 = MIN(IF(($A$2:$A$15=I2)*($F$2:$F$15>=0),$F$2:$F$15,\"\"))}\n```\n\n\nand finally Column M to look up the year from I and L against G=A&F:\n\n```\nM2 = INDEX($D$2:$D$15,MATCH(I2&L2,$G$2:$G$15,0))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "NumPy: calculate cumulative median\r\n                \r\nI have sample with size = n.\n\nI want to calculate for each i: 1 <= i <= n  median for ```\nsample[:i]```\n in numpy.\nFor example, I counted mean for each i:\n\n```\ncummean = np.cumsum(sample) / np.arange(1, n + 1)```\n\n\nCan I do something similar for the median without cycles and comprehension?\n    ", "Answer": "\r\nKnowing that Python has a ```\nheapq```\n module that lets you keep a running 'minimum' for an iterable, I did a search on ```\nheapq```\n and ```\nmedian```\n, and found various items for ```\nsteaming medium```\n.  This one:\n\nhttp://www.ardendertat.com/2011/11/03/programming-interview-questions-13-median-of-integer-stream/\n\nhas a ```\nclass streamMedian```\n that maintains two ```\nheapq```\n, one with the bottom half of the values, the other with top half.  The median is either the 'top' of one or the mean of values from both.  The class has an ```\ninsert```\n method and a ```\ngetMedian```\n method.  Most of the work is in the ```\ninsert```\n.\n\nI copied that into an Ipython session, and defined:\n\n```\ndef cummedian_stream(b):\n    S=streamMedian()\n    ret = []\n    for item in b:\n        S.insert(item)\n        ret.append(S.getMedian())\n    return np.array(ret)\n```\n\n\nTesting:\n\n```\nIn [155]: a = np.random.randint(0,100,(5000))\nIn [156]: amed = cummedian_stream(a)\nIn [157]: np.allclose(cummedian_sorted(a), amed)\nOut[157]: True\nIn [158]: timeit cummedian_sorted(a)\n1 loop, best of 3: 781 ms per loop\nIn [159]: timeit cummedian_stream(a)\n10 loops, best of 3: 39.6 ms per loop\n```\n\n\nThe ```\nheapq```\n stream approach is way faster.\n\n\n\nThe list comprehension that ```\n@Uriel```\n gave is relatively slow.  But if I substitute ```\nnp.median```\n for ```\nstatistics.median```\n it is faster than ```\n@Divakar's```\n sorted solution:\n\n```\ndef fastloop(a):\n    return np.array([np.median(a[:i+1]) for i in range(len(a))])\n\nIn [161]: timeit fastloop(a)\n1 loop, best of 3: 360 ms per loop\n```\n\n\nAnd ```\n@Paul Panzer's```\n partition approach is also good, but still slow compared to the streaming class.\n\n```\nIn [165]: timeit cummedian_partition(a)\n1 loop, best of 3: 391 ms per loop\n```\n\n\n(I could copy the ```\nstreamMedian```\n class to this answer if needed).\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "MEDIAN IF S using groupby of Python Pandas\r\n                \r\nI am trying to run an Median IF NOT EQUAL to a column reference. I can group by and run a median. However, I couldn't able to run a Median group by not equal to referring to a value/character in columns. \n\n```\nimport pandas as pd\n\n# intialise data of lists. \ndata={'id':[ 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],\n'var1':['var1','var1','var1','var1','var1','var1','var1','var1','var1','var1','var2','var2','var2','var2','var2'],\n'var2':[ 'A','A','A','B','B','B','C','C','C','A','A','A','B','B','C'],\n'var3':[ 'A','A','A','A','A','A','A','A','A','A','A','A','A','A','A'],\n'values':[ 10,870,1731,80,110,3848,3590,344,30,60,60,190,440,780,1460]}\n\n#Create DataFrame\ndf=pd.DataFrame(data)\n\nExcel Formula:- \n=MEDIAN(IF($B:$B=H2,IF($C:$C<>$I2,$E:$E)))\nColumn reference:\nB - var1 (input), H - grouped var1 (below output var1), C - var2(Input), I - (below output var2), E - values in input file.\n\nDesired Output - \n\nvar1,var2,median\nvar1,A,227\nvar1,B,344\nvar1,C,110\nvar2,A,780\nvar2,B,190\nvar2,C,315\n\n```\n\n\nI am trying to write Median IF S. Provided above the formula used in Excel. \n    ", "Answer": "\r\nEDIT - Completely rewrote this answer.\n\nI think you want this, given your data dictionary.\n\n```\nimport pandas as pd\ndf = pd.DataFrame(data)\n\nres = {'input1': [], 'input2': [], 'results': []}\n\nfor i1, i2 in zip(set(data['var1']), set(data['var2'])):\n    temp = df[(df['var1'] == i1) & (df['var2'] == i2)]\n    row_median = temp['values'].median()\n    res['input1'].append(i1)\n    res['input2'].append(i2)\n    res['results'].append(row_median)\n\nprint(pd.DataFrame(res))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Rolling (moving) median in Greenplum\r\n                \r\nI would like to calculate the rolling median for a column in Greenplum, i.e. as below:\n\n```\n|  x | rolling_median_x |\n| -- + ---------------- |\n|  4 |                4 |\n|  1 |              2.5 |\n|  3 |                3 |\n|  2 |              2.5 |\n|  1 |                2 |\n|  6 |              2.5 |\n|  9 |                3 |\n```\n\n\n```\nx```\n is an integer and for each row ```\nrolling_median_x```\n shows the median of ```\nx```\n for the current and preceding rows. E.g. for the third row ```\nrolling_median_x = median(4, 1, 3) = 3```\n.\n\nThings I've found out so far:\n\n\nthe ```\nmedian```\n function can't be used as a framed window function, i.e. ```\nmedian(x) OVER(RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)```\n\nthe same is true for many other function such as ```\npercent_rank```\n or ```\nnth_value```\n\nrecursive self join is not supported in this version of Greenplum\n\n\nAs a matter of fact I was unable to find proper documentation on which functions can be used as framed window function in Greenplum...\n\nI'm using Greenplum 4.3.4.0 (which is based on Postgres 8.2.15) and updating is not an option unfortunately.\n    ", "Answer": "\r\nOne remark - a citate from Wikipedia: ORDER BY\n\n\n  ORDER BY is the only way to sort the rows in the result set. Without\n  this clause, the relational database system may return the rows in any\n  order. If an ordering is required, the ORDER BY must be provided in\n  the SELECT statement sent by the application. Although some database\n  systems allow the specification of an ORDER BY clause in subselects or\n  view definitions, the presence there has no effect. A view is a\n  logical relational table, and the relational model mandates that a\n  table is a set of rows, implying no sort order whatsoever.\n\n\n\n\nSince you need to calculate the median for the current and preceding rows, you must have in the table an additional row that defines the order of rows and can be used to determine which rows precede given row and which ones come after.\nLet say some ```\nid```\n column like this:\n\n```\n| id | x | rolling_median_x |\n|----|---|------------------|\n|  1 | 4 |                4 |\n|  2 | 1 |              2.5 |\n|  3 | 3 |                3 |\n|  4 | 2 |              2.5 |\n|  5 | 1 |                2 |\n|  6 | 6 |              2.5 |\n|  7 | 9 |                3 |\n```\n\n\n\n\nIf you cannot use analytic functions, then try pure SQL.\nThis article shows various methods of computing the Median with SQL.\nI think the Henderson’s Median would be best for our needs:\n\n```\nSELECT CASE COUNT(*) % 2\n       WHEN 0        -- even sized table\n       THEN (P1.part_wgt + MIN(CASE WHEN P2.part_wgt > P1.part_wgt\n                                  THEN P2.part_wgt\n                                  ELSE NULL END))/2.0\n       ELSE P1.part_wgt --odd sized table\n       END AS median \n  FROM Parts AS P1, Parts AS P2\n GROUP BY P1.part_wgt\nHAVING COUNT(CASE WHEN P1.part_wgt >= P2.part_wgt\n                  THEN 1\n                  ELSE NULL END)\n       = (COUNT(*) + 1) / 2;\n```\n\n\n\n\nJust run this query for each row as a dependent subquery, a general idea is like this:\n\n```\nSELECT t.*, (\n        SELECT .... Henderson's query FROM table x\n        WHERE x.id <= t.id\n        ......\n       ) As our_median\nFROM table t\n```\n\n\n\n\nYou can find an example implementation in this demo\n\n```\nSELECT t.*, (\n    SELECT CASE COUNT(*) % 2\n           WHEN 0        -- even sized table\n           THEN (P1.x + MIN(CASE WHEN P2.x > P1.x\n                                      THEN P2.x\n                                      ELSE NULL END))/2.0\n           ELSE P1.x --odd sized table\n           END AS median \n      FROM Table333 AS P1, Table333 AS P2\n      WHERE p1.id <= t.id AND p2.id <= t.id\n     GROUP BY P1.x\n    HAVING COUNT(CASE WHEN P1.x >= P2.x\n                      THEN 1\n                      ELSE NULL END)\n           = (COUNT(*) + 1) / 2\n    ) as Our_median\nFROM Table333 t;\n\n| id | x | rolling_median_x | our_median |\n|----|---|------------------|------------|\n|  1 | 4 |                4 |          4 |\n|  2 | 1 |              2.5 |        2.5 |\n|  3 | 3 |                3 |          3 |\n|  4 | 2 |              2.5 |        2.5 |\n|  5 | 1 |                2 |          2 |\n|  6 | 6 |              2.5 |        2.5 |\n|  7 | 9 |                3 |          3 |\n```\n\n\nThis query will probably be slow - this is a price you must pay for having ancient version of PostgreSQL\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Zero padding / median filtering\r\n                \r\nI'm trying to implement median filtering using image j .\nI am having trouble with the zero padding as it adds extra zeros to the bottom and far left of the picture. \n\nThis is what I have done so far, if you guys can help me out:\n\n```\nDialog.create(\"9x9 median filtering\");\nDialog.addMessage(\"9x9 median filtering\");\nDialog.show();\nsetBatchMode(true);\n\nmedian_filter_9();\n\nsetBatchMode(\"exit and display\");\n\n// Produce the 9x9 median image\nfunction median_filter_9() \n{\n width = getWidth();\n height= getHeight();\n\n //if you want to apply this median filter to 16bit \n depth = bitDepth();\n nBin= pow(2, depth);\n //nBin hold max gray intensity value \n filteHisto = newArray(nBin);\n //filteHisto = newArray(255);\n\n fiveBYFive = newArray(81);\n //this is what i used for middle position of array to get median\n middlePos = round(81/2);\n\n\n//-3, -3 will get you position 0,0 of a 9x9 matrix if you start in the middle\n for(j=-2;j<width-2;j++){\n  for(i=-2;i<height-2;i++){ \n   z=0;\n   for(r=0;r<9;r++){\n    for(c=0;c<9;c++){\n     //Extend outside image boundaries using zero padding.\n    //error here: adds extra to bottom and farleft of picture\n     if(j+r<0||j+r>=width||i+c<0||i+c>=height){\n      fiveBYFive[z]=0;\n      z++;\n     }else{  \n      v = getPixel(j+r,i+c);\n      fiveBYFive[z]= v;\n      z++;\n     }\n    }\n   }\n   //sort the array to find median\n   Array.sort(fiveBYFive);\n   median = fiveBYFive[middlePos];\n   setPixel(j, i, median);\n  } \n  updateDisplay();\n }\n\n\n\n}\n```\n\n    ", "Answer": "\r\nOne problem you're seeing at the edges of your image is because you are padding your 9x9 window with zeroes ok, but you still take the median value as the middle of the 81 item window.\n\nSo, for example, in the first column of the image, you zero-pad at least 36 elements (more at the top and bottom), which means that you only need to find 4 or 5 more zero pixels in the image to make the median element zero.\n\nThe easiest fix is to adjust your median element's index (initialised to 81/2 on each iteration) upward according to how many zeroes you added, or just count how many non-zero pixels you used and then find the median mid-way through that range in your sorted array (taking account of sort order).\n\nIn this way, you take the median value of the actual pixels you found and ignore the padded zeroes.\n\nProbably, you missed changing your code from the original 5x5 to 9x9, because the start/end indices are in any case wrong and should be\n\n```\n   for(j=-4;j<width;j++){\n     for(i=-4;i<height;i++){ \n```\n\n\nThe other possible source of confusion later is with this line, where it looks like you've confused width and height\n\n```\nif(j+r<0||j+r>=width||i+c<0||i+c>=height)\n```\n\n\nIf ```\nj```\n is the column index and ```\ni```\n is the row index, it should be\n\n```\nif(j+c<0||j+c>=width||i+r<0||i+r>=height)\n```\n\n\nAlthough for a square window this doesn't actually make any difference in practice.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Get median from AVL tree?\r\n                \r\nIf you have an AVL tree, what's the best way to get the median from it? The median would be defined as the element with index ceil(n/2) (index starts with 1) in the sorted list.\n\nSo if the list was\n\n```\n1 3 5 7 8\n```\n\n\nthe median is 5. If the list was\n\n1 3 5 7 8 10\n\nthe median is 5.\n\nIf you can augment the tree, I think it's best to let each node know the size (number of nodes) of the subtree, (i.e. 1 + left.size + right.size). Using this, the best way I can think of makes median searching O(lg n) time because you can traverse by comparing indexes.\n\nIs there a better way?\n    ", "Answer": "\r\nAugmenting the AVL tree to store subtree sizes is generally the best approach here if you need to optimize over median queries. It takes time O(log n), which is pretty fast.\n\nIf you'll be computing the median a huge number of times, you could potentially use an augmented tree and also cache the median value so that you can read it in time O(1). Each time you do an insertion or deletion, you might need to recompute the median in time O(log n), which will slow things down a bit but not impact the asymptotic costs.\n\nAnother option would be to thread a doubly-linked list through the nodes in the tree so that you can navigate from a node to its successor or predecessor in constant time. If you do that, then you can store a pointer to the median element, and then on an insertion or a deletion, move the pointer to the left or to the right as appropriate. If you delete the median itself, you can just move the pointer left or right as you'd like. This doesn't require any augmentation and might be a bit faster, but it adds two extra pointers into each node.\n\nHope this helps!\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Simple way to calculate median with MySQL\r\n                \r\nWhat's the simplest (and hopefully not too slow) way to calculate the median with MySQL? I've used ```\nAVG(x)```\n for finding the mean, but I'm having a hard time finding a simple way of calculating the median. For now, I'm returning all the rows to PHP, doing a sort, and then picking the middle row, but surely there must be some simple way of doing it in a single MySQL query.\n\nExample data:\n\n```\nid | val\n--------\n 1    4\n 2    7\n 3    2\n 4    2\n 5    9\n 6    8\n 7    3\n```\n\n\nSorting on ```\nval```\n gives ```\n2 2 3 4 7 8 9```\n, so the median should be ```\n4```\n, versus ```\nSELECT AVG(val)```\n which == ```\n5```\n.\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Mean vs Median that is the? [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Function to Calculate Median in SQL Server\r\n                            \r\n                                (37 answers)\r\n                            \r\n                    \r\n                Closed 6 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nI have a number of select statements which calculate fields such as sums, division and also averages. However I am now needing to include a median based on the query, as well as a mean(avg). The table contains 50,000 rows in the MSSQL database, so in the same query return I need to have the results return for each line. \n\nI know there is not a Median formula in SQl, well not that I am aware of. I am using SQL 2012. So if anyone has an idea, I would welcome your thoughts, as I can not be the only person to come up against this.\n\nExample would be something like this\n\n```\nSelect \n     Round (AVG ([LENGTH]),2) as Length_X,\n     Round (Median ([LENGTH]),2) as Length_median,\n```\n\n\nI understand Median is not an accepted sql statement, so just for demo purposes to get my point across\n\nCheers\n    ", "Answer": "\r\nIf you have numeric data, then there is a \"median\" function.  It is just spelled differently:\n\n```\nselect percentile_cont(0.5) within group (order by ??) over ()\n```\n\n\nor\n\n```\nselect percentile_disc(0.5) within group (order by ??) over ()\n```\n\n\n(The difference between the two is subtle and probably doesn't matter for most purposes.)\n\nIt is, unfortunately, not an aggregation function, so it is often used in a subquery.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median Standard Deviation with mad()\r\n                \r\nI'm using matlabs ```\nmad()```\n function to find the median standard deviation. ```\nmad(X)```\n returns an expected value, 237.2147. However, ```\nmad(X,1)```\n which according to the documentation should find median standard deviation just returns 1 no matter the input.\n\nAny ideas very much appreciated,\n\nThanks\n\nEdit\nThe input is a single column of Doubles:\n\n```\n5\n16\n7\n4\n6\n4\n8\n6\n9\n6\n7\n9\n19\n3\n8\n\nTrial>> mad(dM)\n\nans =\n\n  206.1872\n\nTrial>> mad(dM,1)\n\nans =\n\n     1\n```\n\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating moving median within group\r\n                \r\nI want to perform rolling median on price column over 4 days back, data will be groupped by date. So basically I want to take prices for a given day and all prices for 4 days back and calculate median out of these values.\n\nHere are the sample data:\n\n```\nid      date        price\n1637027 2020-01-21  7045204.0\n280955  2020-01-11  3590000.0\n782078  2020-01-28  2600000.0\n1921717 2020-02-17  5500000.0\n1280579 2020-01-23  869000.0\n2113506 2020-01-23  628869.0\n580638  2020-01-25  650000.0\n1843598 2020-02-29  969000.0\n2300960 2020-01-24  5401530.0\n1921380 2020-02-19  1220000.0\n853202  2020-02-02  2990000.0\n1024595 2020-01-27  3300000.0\n565202  2020-01-25  3540000.0\n703824  2020-01-18  3990000.0\n426016  2020-01-26  830000.0\n```\n\n\nI got close with combining rolling and groupby:\n\n```\ndf.groupby('date').rolling(window = 4, on = 'date')['price'].median()\n```\n\n\nBut this seems to add one row per each index value and by median definition, I am not able to somehow merge these rows to produce one result per row.\n\nResult now looks like this:\n\n```\ndate        date      \n2020-01-10  2020-01-10          NaN\n            2020-01-10          NaN\n            2020-01-10          NaN\n            2020-01-10    3070000.0\n            2020-01-10    4890000.0\n                            ...    \n2020-03-11  2020-03-11    4290000.0\n            2020-03-11    3745000.0\n            2020-03-11    3149500.0\n            2020-03-11    3149500.0\n            2020-03-11    3149500.0\nName: price, Length: 389716, dtype: float64\n```\n\n\nIt seems it just deleted 3 first values and then just printed price value.\n\nIs it possible to get one lagged / moving median value per one date?\n    ", "Answer": "\r\nYou can use ```\nrolling```\n with a frequency window of 5 days to get today and last 4 days, then ```\ndrop_duplicates```\n to keep the last row per day. First create a ```\ncopy```\n (if you want to keep the original one), ```\nsort_values```\n per date and ensure the date column is datetime\n\n```\n#sort and change to datetime\ndf_f = df[['date','price']].copy().sort_values('date')\ndf_f['date'] = pd.to_datetime(df_f['date'])\n\n#create the column rolling\ndf_f['price'] = df_f.rolling('5D', on='date')['price'].median()\n\n#drop_duplicates and keep the last row per day\ndf_f = df_f.drop_duplicates(['date'], keep='last').reset_index(drop=True)\n\nprint (df_f)\n\n         date      price\n0  2020-01-11  3590000.0\n1  2020-01-18  3990000.0\n2  2020-01-21  5517602.0\n3  2020-01-23   869000.0\n4  2020-01-24  3135265.0\n5  2020-01-25  2204500.0\n6  2020-01-26   849500.0\n7  2020-01-27   869000.0\n8  2020-01-28  2950000.0\n9  2020-02-02  2990000.0\n10 2020-02-17  5500000.0\n11 2020-02-19  3360000.0\n12 2020-02-29   969000.0\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Adaptive Median Filter\r\n                \r\nI am constructing code for adaptive median filter . When i execute it it gives me error at line No 12. Not enough arguments. and on line 28.Unexpected MATLAB Expression.\n\n```\n function f = adpmedian(g, Smax)\n\n\n    %ADPMEDIAN Perform adaptive median filtering.\n\n    %   F = ADPMEDIAN(G, SMAX) performs adaptive median filtering of\n\n    %   image G.  The median filter starts at size 3-by-3 and iterates up   \n\n    %   to size SMAX-by-SMAX. SMAX must be an odd integer greater than 1.\n\n    % SMAX must be an odd, positive integer greater than 1.\n\n      **12>>**if (Smax <= 1) || (Smax/2 == round(Smax/2)) || (Smax ~= round(Smax))\n           error('SMAX must be an odd integer > 1.')\n        end\n        [M, N] = size(g);\n        % Initial setup.\n        f = g;\n        f(:) = 0;\n        alreadyProcessed = false(size(g));\n        % Begin filtering.\n        for k = 3:2:Smax\n           zmin = ordfilt2(g, 1, ones(k, k), 'symmetric');\n           zmax = ordfilt2(g, k * k, ones(k, k), 'symmetric');\n           zmed = medfilt2(g, [k k], 'symmetric');\n       `28>>`    processUsingLevelB = (zmed > zmin) & (zmax > zmed) & ...\n               ~alreadyProcessed; \n           zB = (g > zmin) & (zmax > g);\n           outputZxy  = processUsingLevelB & zB;\n           outputZmed = processUsingLevelB & ~zB;\n           f(outputZxy) = g(outputZxy);\n           f(outputZmed) = zmed(outputZmed);\n           alreadyProcessed = alreadyProcessed | processUsingLevelB;\n\n           if all(alreadyProcessed(:))\n              break;\n           end\n\n        end\n\n    % Output zmed for any remaining unprocessed pixels. Note that this\n    % zmed was computed using a window of size Smax-by-Smax, which is\n    % the final value of k in the loop.\n    f(~alreadyProcessed) = zmed(~alreadyProcessed);\n```\n\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Weighted Median If in Excel\r\n                \r\nI have an Excel data tab that has the following columns:\nA: County Name\nB: Hotel Name\nC: # of Rooms in the Hotel\nD: Year Hotel Was Constructed\n\nIn my analysis tab, I have the following columns:\nA: County Name\nB: Median Age of a Hotel Room\n\nI am trying to find the median age of a \"hotel room\" in each county.  In Excel parlance, I am trying to do a weighted MEDIAN IF - take the median if the county name matches weighted by the number of rooms - so if there are three hotels in the county, one built in 1900 w 100 rooms, one built in 1975 with 50 rooms, and one in 2000 with 200 rooms, the value returned should be 2000.  Any help is very much appreciated!!!\n    ", "Answer": "\r\nYou'll need a few auxiliary columns:\n\n\nPrepare them in the following order:\n\nColumn E to keep track of how many rooms this hotel and other hotels that are in the same county and were constructed earlier have:\n\n```\nE2 = SUMIFS($C$2:$C$15,$A$2:$A$15,\"=\"&A2,$D$2:$D$15,\"<=\"&D2)\n```\n\n\nColumn I and J to store how many rooms this county has, and half of that\n\n```\nJ2 = SUMIFS($C$2:$C$15,$A$2:$A$15,\"=\"&I2)\nK2 = J2/2\n```\n\n\nColumn F for how far E is to K, and median occurs at the first hotel that passes the mid point.\n\n```\nF2 = E2-VLOOKUP(A2,$I$2:$K$4,3,0)\n```\n\n\nColumn L to find the minimum positive value that surpasses the midpoint:\n\n```\n{L2 = MIN(IF(($A$2:$A$15=I2)*($F$2:$F$15>=0),$F$2:$F$15,\"\"))}\n```\n\n\nand finally Column M to look up the year from I and L against G=A&F:\n\n```\nM2 = INDEX($D$2:$D$15,MATCH(I2&L2,$G$2:$G$15,0))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Get Median Value of an Array's key\r\n                \r\nHow can this function be used to return the median of the keys in an array?\n\n```\nfunction array_median($array) {\n  $iCount = count($array);\n  $middle_index = floor($iCount / 2);\n  sort($array, SORT_NUMERIC);\n  $median = $array[$middle_index];\n  if ($iCount % 2 == 0) {\n    $median = ($median + $array[$middle_index - 1]) / 2;\n  }\n  return $median;\n}\n```\n\n\nWith an array like this:\n```\n$arr = array('5'=>100,'1'=>30,'2'=>80);```\n\n\nThe median value should be key ```\n2```\n.\n    ", "Answer": "\r\nTo get median key, You need to calculate median for keys instead of values.\n\n```\nfunction array_median($array) {\n  // get keys of passed array\n  $array = array_keys($array);\n  $iCount = count($array);\n  $middle_index = floor($iCount / 2);\n  sort($array, SORT_NUMERIC);\n  $median = $array[$middle_index];\n  if ($iCount % 2 == 0) {\n    $median = ($median + $array[$middle_index - 1]) / 2;\n  }\n  return $median;\n}\n\n$arr = array('5'=>100,'1'=>30,'2'=>80);\necho array_median($arr);  // output 2\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Function that returns the median? (OCaml)\r\n                \r\nIn OCaml how would I write a median function that takes 5 arguments and returns the median. For example ```\nmed5 2 5 7 4 3```\n would return 4.\n\nI managed to write a med3 function (returns the median of 3 arguments) using if and else statements but this would be ridiculously complex if I attempted the same technique for 5 arguments :(\n\n```\nlet med3 a b c =\n  if ((b<=a && c>=a) || (c<=a && b>=a)) then a \n  else if ((a<=b && c>=b) || (c<=b && a>=b)) then b else c;;\n```\n\n\nFor the med5 function, I would like to be able to use the min and max functions (built in to OCaml) to discard the highest and lowest values from the set of 5 arguments. Then I could use the med3 function that I have already written to return the median of the remaining 3 arguments, but how do I discard the minimum and maximum arguments!?!?!?!?\n\nAny help would be much appreciated :)\n    ", "Answer": "\r\nIf you can use ```\nArray```\n, then just put your 5 entries in an array, sort it, and return ```\na[2]```\n. If it's also forbidden in your assignment, you can use a poor-man's bubble sort to select the max, then the min:\n\n```\nlet med5 a b c d e =\n  (* move the max towards 'e' *)\n  let a,b = if a<=b then a,b else b,a in\n  let b,c = if b<=c then b,c else c,b in\n  ...\n  (* then move the min towards 'd', don't forget to reverse the comparisons *)\n  ...\n  in med3 a b c\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Compare against median of each column\r\n                \r\nHow can I compare against median of each column in a pandas dataframe and result in true if the value is greater than median and false if value is less than median? \n\nRight now I am standardizing, so basically comparing to 0 ( the mean ) of each column. Want a way to do the same for median.\n    ", "Answer": "\r\nWhat I have understand from your question is you want to compare each column value from its column median\n\n\n.median() to find median of column and save in column\n.apply(axis=1) with axis=1 to compare each value with value median()\n\n\n```\ndf = pd.DataFrame(data={'a':[1,2,3,4,4,5],\n                        'b':[1,2,3,3,3,3]})\n# median of col a and col b is calculated and save in another column\ndf['median_a'] = df['a'].median()\ndf['median_b'] = df['b'].median()\n\n# if col a value is greater than median_a then a_bool contains True else False\ndf['a_bool']  = df.apply(lambda  x: True if x['a']>x['median_a'] else False ,axis=1)\ndf['b_bool']  = df.apply(lambda  x: True if x['b']>x['median_b'] else False,axis=1)\n```\n\n\nI hope it would solve your problem\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "C# median value among group calculation\r\n                \r\nI have to calculate the median for a group of values in one of my C# function. I have used the formula from the site, mathisfun. Following is my data model and the code.\n\n```\npublic class DataModel\n{\n    public string Group { get; set; }\n\n    public long? Population { get; set; }\n}\n```\n\n\nSample dataList is as follows,\n\n```\n> dataList Count = 7\n>     [0]: {DataModel}\n>       Group: \"16 to 24\"       Population: 39657245\n>     [1]: {DataModel}      Group: \"25 to 34\"       Population: 58957845\n>     [2]: {DataModel}      Group: \"35 to 44\"       Population: 12557845\n>     [3]: {DataModel}      Group: \"45 to 54\"       Population: 25698746\n>     [4]: {DataModel}      Group: \"55 to 64\"       Population: 325487\n```\n\n\nFollowing is the function logic which takes the dataList as a input and returns the median value as output.\n\n```\npublic int CalculateMedianAge(IList<DataModel> dataList)\n        {\n            int median = 0;\n            var sum = 0;\n            var sumRange = 0;\n            DataModel medianGroup = new DataModel();\n\n            foreach (var item in dataList)\n            {               \n                    sum = sum + (int)item.Population;               \n            }\n            int range = (sum + 1) / 2;          \n            foreach(var entry in dataList)\n            {\n                sumRange = sumRange + (int)entry.Population;\n                if (range > sumRange)\n                    continue;\n                else\n                {\n                    medianGroup = entry;\n                    break;\n                }\n            }\n            var lowerBoundary = int.Parse(medianGroup.Group.Split(' ')[0]) - 0.5;\n            var cumulativeFrequency = 0;\n            for (int s = 0; s< dataList.IndexOf(medianGroup); s++)\n            {\n                cumulativeFrequency = cumulativeFrequency + (int)dataList[s].Population;\n            }           \n            var width = int.Parse(medianGroup.Group.Split(' ')[2]) - int.Parse(medianGroup.Group.Split(' ')[0]);\n\n            //L is the lower class boundary of the group containing the median - lowerBoundary\n            //n is the total number of values - sum\n            //B is the cumulative frequency of the groups before the median group - cumulativeFrequency\n            //G is the frequency of the median group - (int)lowerBoundary.Population\n            //w is the group width - width\n            //MedianAge = L + (((n/2) - B) / G) * W\n\n            median = (int)(lowerBoundary + (((sum/2) - cumulativeFrequency) / (int)medianGroup.Population) * width);\n\n            return median;\n        }\n```\n\n\nIt is working fine and I can able to get the median value as well. But I am trying to re-factor it with LINQ. I don't want to keep it with Continue and Break statements. \n\nCan anyone suggest/re-factor the above?\n    ", "Answer": "\r\nThis definitely looks bad:\n\n```\n var population = dataList.Sum(x => x.pop);\n var aggregate = 0;\n var median = dataList\n     .Select(x => new\n     {\n         split = x.Group.Split(\" to \"),\n         pop   = (int)x.Population\n     })\n     .Select(x => new\n     {\n         from = int.Parse(x.split[0]),\n         to   = int.Parse(x.split[1]),\n         x.pop\n     })\n     //median calculation here VVVV\n     .SelectMany(x=> \n         Enumerable\n             .Range(x.from, x.to - x.from + 1)\n             .Select(y=> new\n             {\n                 age = y,\n                 pop = x.pop/(x.to - x.from + 1) //tail lost here, for small values will return incorrect values. Distribution through linq is bad idea here.\n             })\n      )\n     .OrderBy(x => x.age)\n     .First(x => (aggregate+= x.pop) >= population/2)\n     .age;\n```\n\n\nPS: Not tested this. Your approach through for is good. Linq is bad to use here.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median survival in R [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question needs debugging details. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     Edit the question to include desired behavior, a specific problem or error, and the shortest code necessary to reproduce the problem. This will help others answer the question.\r\n                \r\n                    \r\n                        Closed 4 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI can't calculate life table in R, in particular median survival:\n\n```\nlibrary(survival)\nkaplan17 <- read.csv(kaplan1, sep=\";\", dec=\",\")\nhead(kaplan17)\n#       group time event\n# 1     2     1     0\n# 2     1     1     0\n# 3     1     1     0\n# 4     2     1     0\n# 5     2     1     0\n# 6     1     1     0\n\n(my.surv <- Surv(kaplan17$time))\n # [1] 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1 \n # [48] 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1\n```\n\n\nHow can I correctly calculate the median survival per group?\n\nMy dataset can be downloaded here\n    ", "Answer": "\r\n```\n?Surv\n?survfit\nsurvfit( Surv(time, event) ~ 1, data=kaplan17)\n```\n\n\nthen\n\n```\nsurvfit( Surv(time, event) ~ group, data=kaplan17)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Random Numbers in a range around a median\r\n                \r\nI have a median and a standard deviation, what i want is to generate random numbers between the median-std and the median+std.\n\nI know how to do it like this:\n\n```\nimport numpy as np\nimport random as rnd\n\nmedian=30\nstd=15\nrandom_nr=rnd.randint(median-std,median+std)\n```\n\n\nI also found the numpy.random.normal function but it doesn't seem to do what i need.\nIs there any other way of doing it?\nIt would be great if the random generator would generate numbers in mirror as to the median, for example, an output for 6 generated random numbers should look like this:\n\n```\nnumbers=magicfunction(median,std,6)\n[29,31,20,40,25,35]\n```\n\n    ", "Answer": "\r\nHere it is, if the size is odd then it will only generate couples (as your request) and then a single number at the end of the array.\n\n```\nimport numpy as np\nimport random as rnd\n\nmedian=30\nstd=15\ndef generatearray(median,std,size):\n    output=[0]*size    \n    for index in range(0,size/2):\n        random_nr=rnd.randint(-std,std)\n        output[2*index]=median+random_nr\n        output[2*index+1]=median-random_nr\n    if(size % 2 != 0):\n        output[size-1]=rnd.randint(median-std,median+std)\n    return output\n\nprint generatearray(median,std,6)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median windows in C\r\n                \r\nI wrote a code to find median filtering (median window). But, I can't make scannig to every number. What can I use instead of ```\nsize```\n in the for loops. When I use size it ensures just ```\n5```\n Also, what about boundries ? What can I do for boundries ? Thank you for all appreciated answers. (I've opened new topic because users said that every topic is based on one question.If I did mistake,please delete the question, I will suffix the current question)\n\n```\n    <size of array>\n    <size filter> \n    <data>\n    8\n    3\n    0 0 0 0 0 0 0 0\n    0 5 0 0 6 0 0 0\n    0 0 0 0 0 7 0 0\n    0 0 0 0 5 0 0 0\n    0 0 0 5 6 0 0 0\n    0 0 8 5 5 0 0 0\n    0 0 0 7 0 0 9 0\n    0 0 0 0 0 0 0 0\n\n    Output:\n    0 0 0 0 0 0 0 0\n    0 0 0 0 0 0 0 0\n    0 0 0 0 0 0 0 0\n    0 0 0 0 0 0 0 0\n    0 0 0 5 5 0 0 0\n    0 0 0 5 5 0 0 0\n    0 0 0 0 0 0 0 0\n    0 0 0 0 0 0 0 0\n```\n\n\n\n\n```\n#include <stdio.h>\n\nint median(int a[100],int n);\n\n\nint main()\n{\n    int a[100][100];\n    int temp[100];\n    int i,j,k,count=0;\n    int sizefilter;\n    int sizearray;\n\n    scanf(\"%d\", &sizearray);\n    scanf(\"%d\", &sizefilter);\n\n    for(i = 0; i < sizearray; i++)\n        for(j = 0; j < sizearray; j++)\n            scanf(\"%d\", &a[i][j]);\n\n    for(k = 0; k < sizearray; k++)\n        for(i = 0; i < sizefilter; i++)\n            for(j = 0; j < sizefilter; j++)\n            {\n                temp[count] = a[i][j];\n                count++;\n                a[i][j] = median(temp, count);\n            }\n\n    printf(\"\\n\");\n    printf(\"\\n\");\n\n    for(i = 0; i < sizearray; i++)\n        for(j = 0; j < sizearray; j++)\n        {\n            printf(\"%d \", a[i][j]);\n\n            if(j == sizearray-1)\n                printf(\"\\n\");\n        }\n\n    return 0;\n}\n\nint median(int a[100],int n)\n{\n    int i,j,t;\n    int result;\n    /* Sorting begins */\n    for (i = 1 ; i <= n-1 ; i++)\n    {     /* Trip-i begins  */\n        for (j = 1 ; j <= n-i ; j++)\n        {\n             if (a[j] <= a[j+1])\n             { /* Interchanging values */\n\n                 t = a[j];\n                 a[j] = a[j+1];\n                 a[j+1] = t;\n             }\n             else continue ;\n         }\n    } /* sorting ends */\n\n    /* calculation of median  */\n    if ( n % 2 == 0)\n        return  result = (a[n/2] + a[n/2+1])/2 ;\n    else\n        return result = a[n/2 + 1];\n}\n```\n\n    ", "Answer": "\r\nThere are some logical errors in your code:\n\n\nWhen you filter, you need four nested loops: The outer two iterate over columns and rows of the matrix, the inner two iterate over columns and rows of the filter area. (That shouldn't be news to you; you have already been told that in an answer to your previous question.)\nThe constraints of the filter area are simple: The left and top indices must not fall below zero and the right and bottom indicies must be smaller than ```\nsizearray```\n. If they are not, adjust them.\nYou need two arrays, the original array ```\na```\n and a second array that contains the filtered values. You cannot filter in-place, because if you look upwards and to the left, you'll see only filtered values, whereas your filter should always look at the original values.\nYour wrong filtering loops apart: You never reset ```\ncount```\n, which you should reset, of course, for every median value you calculate. You also calculate the median in the inner loop, which is too often. A solution to this is to make ```\ncount```\n local to the loop that accumulates filter values and determines the median.\nYour sorting has index errors. Instead of comparing ```\ni```\n with ```\ni + 1```\n,  compare with ´i - 1```\n. Your indices start from 1, so```\ni - 1` will always yield a valid index.\nYou buble-sort the array, which is fine for small arrays, but slow in general. The ```\n<stdlib.h>```\n has ```\nqsort```\n, which may be useful to you for general sorting.\nYour median indices are also off by one towards the right.\n\n\nThere are also some stylistic issues:\n\n\nPlease make a habit of using braces for code blocks for ```\nfor```\n, ```\nwhile```\n and ```\nif```\n. Only very trivial code blocks in the innermost scope can be written without braces. In your case, a lot has to be done \"between\"  the loops, and having braces there makes it easy to add stuff.\nYor variable ```\nresult```\n in ```\nmedian```\n is superfluous. You assign it and then immediately lose the variable itself, because you return. Just returning is enough.\n\n\nBelow is a version of your code that gives the desired output:\n\n```\n#include <stdint.h>\n#include <stdio.h>\n\nint min(int a, int b)\n{\n    return a < b ? a : b;\n}\n\nint max(int a, int b)\n{\n    return a > b ? a : b;\n}\n\nint median(int a[], int n)\n{\n    int i, j;\n\n    for (i = 1 ; i < n ; i++) {\n        for (j = 1 ; j < n ; j++) {\n             if (a[j] < a[j - 1]) {\n                 int t = a[j];\n                 a[j] = a[j - 1];\n                 a[j - 1] = t;\n             }\n         }\n    }\n\n    if (n % 2) return a[n / 2];\n    return (a[n / 2 - 1] + a[n / 2]) / 2 ;        \n}\n\nint main()\n{\n    int a[100][100];\n    int b[100][100];\n    int temp[100];\n    int i, j, ii, jj;\n    int sizefilter;\n    int sizearray;\n\n    scanf(\"%d\", &sizearray);\n    scanf(\"%d\", &sizefilter);\n\n    for(i = 0; i < sizearray; i++) {\n        for(j = 0; j < sizearray; j++) {\n            scanf(\"%d\", &a[i][j]);\n        }\n    }\n\n    for(i = 0; i < sizearray; i++) {\n        for(j = 0; j < sizearray; j++) {\n            int imin = max(0, i - sizefilter / 2);\n            int imax = min(sizearray, i + sizefilter / 2 + 1);\n            int jmin = max(0, j - sizefilter / 2);\n            int jmax = min(sizearray, j + sizefilter / 2 + 1);\n            int count = 0;\n\n            for (ii = imin; ii < imax; ii++) {\n                for (jj = jmin; jj < jmax; jj++) {\n                    temp[count] = a[ii][jj];\n                    count++;\n                }\n            }\n\n            b[i][j] = median(temp, count);\n        }\n    }\n\n    for(i = 0; i < sizearray; i++) {\n        for(j = 0; j < sizearray; j++) {\n            printf(\"%3d\", b[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate Median Image in Matlab\r\n                \r\nI am new to matlab, so forgive me if i am asking for the obvious here: what i have is a collection of color photographic images (all the same dimensions). What i want to do is calculate the median color value for each pixel.\n\nI know there is a median filter in matlab, but as far as i know it does not do exactly what i want. Because i want to calculate the median value between the entire collection of images, for each separate pixel.\n\nSo for example, if i have three images, i want matlab to calculate (for each pixel) which colorvalue out of those three images is the median value. How would i go about doing this, does anyone know?\n\n\n\nEdit: From what i can come up with, i would have to load all the images into a single matrix. The matrix would have to have 4 dimensions (height, width, rgb, images), and for each pixel and each color find the median in the 4th dimension (between the images).\nIs that correct (and possible)? And how can i do this?\n    ", "Answer": "\r\nYour intuition is correct.  If you have images image_1, image_2, image_3, for example, you can assign them to a 4 dimensional matrix:\n\n```\nX(:,:,:,1) = image_1;\nX(:,:,:,2) = image_2;\nX(:,:,:,3) = image_3;\n```\n\n\nThen use:\n\n```\nY=median(X,4);\n```\n\n\nTo get the median.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Zero padding / median filtering\r\n                \r\nI'm trying to implement median filtering using image j .\nI am having trouble with the zero padding as it adds extra zeros to the bottom and far left of the picture. \n\nThis is what I have done so far, if you guys can help me out:\n\n```\nDialog.create(\"9x9 median filtering\");\nDialog.addMessage(\"9x9 median filtering\");\nDialog.show();\nsetBatchMode(true);\n\nmedian_filter_9();\n\nsetBatchMode(\"exit and display\");\n\n// Produce the 9x9 median image\nfunction median_filter_9() \n{\n width = getWidth();\n height= getHeight();\n\n //if you want to apply this median filter to 16bit \n depth = bitDepth();\n nBin= pow(2, depth);\n //nBin hold max gray intensity value \n filteHisto = newArray(nBin);\n //filteHisto = newArray(255);\n\n fiveBYFive = newArray(81);\n //this is what i used for middle position of array to get median\n middlePos = round(81/2);\n\n\n//-3, -3 will get you position 0,0 of a 9x9 matrix if you start in the middle\n for(j=-2;j<width-2;j++){\n  for(i=-2;i<height-2;i++){ \n   z=0;\n   for(r=0;r<9;r++){\n    for(c=0;c<9;c++){\n     //Extend outside image boundaries using zero padding.\n    //error here: adds extra to bottom and farleft of picture\n     if(j+r<0||j+r>=width||i+c<0||i+c>=height){\n      fiveBYFive[z]=0;\n      z++;\n     }else{  \n      v = getPixel(j+r,i+c);\n      fiveBYFive[z]= v;\n      z++;\n     }\n    }\n   }\n   //sort the array to find median\n   Array.sort(fiveBYFive);\n   median = fiveBYFive[middlePos];\n   setPixel(j, i, median);\n  } \n  updateDisplay();\n }\n\n\n\n}\n```\n\n    ", "Answer": "\r\nOne problem you're seeing at the edges of your image is because you are padding your 9x9 window with zeroes ok, but you still take the median value as the middle of the 81 item window.\n\nSo, for example, in the first column of the image, you zero-pad at least 36 elements (more at the top and bottom), which means that you only need to find 4 or 5 more zero pixels in the image to make the median element zero.\n\nThe easiest fix is to adjust your median element's index (initialised to 81/2 on each iteration) upward according to how many zeroes you added, or just count how many non-zero pixels you used and then find the median mid-way through that range in your sorted array (taking account of sort order).\n\nIn this way, you take the median value of the actual pixels you found and ignore the padded zeroes.\n\nProbably, you missed changing your code from the original 5x5 to 9x9, because the start/end indices are in any case wrong and should be\n\n```\n   for(j=-4;j<width;j++){\n     for(i=-4;i<height;i++){ \n```\n\n\nThe other possible source of confusion later is with this line, where it looks like you've confused width and height\n\n```\nif(j+r<0||j+r>=width||i+c<0||i+c>=height)\n```\n\n\nIf ```\nj```\n is the column index and ```\ni```\n is the row index, it should be\n\n```\nif(j+c<0||j+c>=width||i+r<0||i+r>=height)\n```\n\n\nAlthough for a square window this doesn't actually make any difference in practice.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Matlab Median Filter Code\r\n                \r\nI am required to implement median filtering in MATLAB for images. However, I'm not allowed to use the ```\nmedfilt2```\n or ```\nordfilt2```\n functions in MATLAB.  We also have recently started learning MATLAB.\n\nIs there any code available for the median filter or Gaussian filter available?  \n    ", "Answer": "\r\nNB: This assumes that the Image Processing Toolbox is installed.\n\n\n\nThe basic premise behind median filtering is to analyze pixel neighbourhoods in your image, sort their intensities, then choose the middle intensity as the result.  One suggestion I can make is to use ```\nim2col```\n to transform each pixel neighbourhood into a single column vector and take all of these column vectors to create a single matrix.  Each column would represent pixel intensities within a pixel neighbourhood.  Next, use ```\nsort```\n and sort along the rows for each column, then grab the middle of this sorted matrix which represents the middle value for each pixel neighbourhood.  This will be a single row vector that represents the median value of each pixel neighbourhood.  Once you're done, simply reshape this vector back into the same size as the original image to get your median filtered result.  You can use ```\ncol2im```\n to help facilitate this last step.\n\nHowever, with ```\nim2col```\n, it only grabs pixel neighbourhoods that are within the bounds of the original image.  Because you'll want to median filter pixels along the borders of the image, you'll need to pad the image borders before processing with ```\nim2col```\n.  Use ```\npadarray```\n to do this for you.  I'm going to assume that the border gets padded with zeroes to make things simpler.\n\nTherefore, given a grayscale image ```\nim```\n, and a symmetric neighbourhood to analyze that's ```\nN x N```\n, where ```\nN```\n is the width/height of your neighbourhood, your code may look something like this.  I'm also going to assume that ```\nN```\n is odd to allow picking the median to be easier:\n\n```\nim_pad = padarray(im, [floor(N/2) floor(N/2)]);\nim_col = im2col(im_pad, [N N], 'sliding');\nsorted_cols = sort(im_col, 1, 'ascend');\nmed_vector = sorted_cols(floor(N*N/2) + 1, :);\nout = col2im(med_vector, [N N], size(im_pad), 'sliding');\n```\n\n\n\n\nLet's do an example.  Let's say our filter size was ```\n5 x 5```\n, and we'll use ```\ncameraman.tif```\n that's part of the Image Processing Toolbox.  If we perform the code below then run the median filter code just seen above:\n\n```\nN = 5;\nim = imread('cameraman.tif');\n```\n\n\nWe get the following, with the original image, and the final image that's filtered with median filtering.\n\n\n\n\n\nThis is what we expect as median filtering is expected to (more or less) keep the edges well maintained while doing image smoothing.  Median filtering is particularly useful for salt-and-pepper noise where it is highly probable that these noisy pixels will appear the beginning and at the end when sorting pixel neighbourhoods, so choosing the middle value will most likely filter out these noisy values.\n\n\n\nBonus\n\nYour post also is asking to find code from first principles for doing Gaussian filtering.  I answered this a couple of days ago for someone else.\n\nCheck this post here: How do I create and apply a Gaussian filter in MATLAB without using fspecial, imfilter or conv2?\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Ring median filter in python\r\n                \r\nI want to implement a ring median filter - what it does is basically replace the center pixel by the median values of the pixels in a circular ring around it. \nI can make a circular mask of some radius like this \n\n```\nkernel = np.zeros((2*radius+1, 2*radius+1))\ny,x = np.ogrid[-radius:radius+1, -radius:radius+1]\nmask = x**2 + y**2 <= radius**2\nkernel[mask] = 1\n```\n\n\nThen I can use scipy's generic filter to take median of the values\n\n```\nimport scipy.ndimage.filters as scp_filt\ncircular_median = scp_filt.generic_filter(my_image, np.median, footprint=kernel)\n```\n\n\nThe above mask is including pixels inside the circle. What pixels should lie on the circumference seems slightly ambiguous to me (think of circle inscribed in 3*3, 5*5, 7*7 kernels). Is there a \"ring\" function I can use OTS or something? \n\nWhy all this - trying to use a part of this paper http://pages.swcp.com/~spsvs/resume/PODS_DSS2009_2009-01-15.pdf Ring median filter, after subtraction from the original image leaves objects with a scale size of less than the radius.\n\nAlso, not sure if I should do this in RGB or not. I have only seen median filters on grayscale images\n    ", "Answer": "\r\nUse the Bresenham algorithm for circles    https://www.daniweb.com/programming/software-development/threads/321181/python-bresenham-circle-arc-algorithm\n\nScipy generic filter along with this ring median kernel is quite slow in practice, at least in python \n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "replacing value with median in python\r\n                \r\n```\nlat\n50.63757782\n50.6375742\n50.6375742\n50.6374077762\n50.63757782\n50.6374077762\n50.63757782\n50.63757782\n```\n\n\nI have plotted a graph with these latitude values and noticed that there was sudden spike in the graph (outlier). I want to replace every lat value with median of last three values so that I can see a meaningful result\n\nThe output might be\n\n```\nlat               lat_med\n50.63757782 50.63757782\n50.6375742  50.6375742\n50.6375742  50.6375742\n50.63740778 50.6375742\n50.63757782 50.6375742\n50.63740778 50.6375742\n50.63757782 50.6375742\n50.63757782 50.6375742\n```\n\n\nI have thousands of such lat values and need to solve this using a for loop. I know that the following code has errors and since I am a beginner in python, I appreciate your help in solving this.\n\n```\nfor i in range(0,len(df['lat'])):\n    df['lat_med'][i]=numpy.median(numpy.array(df['lat'][i],df['lat'][i-2]))\n```\n\n\nI just realized that median calculation for three points is not serving my purpose and I need to consider five values. is there a way to change the median function for as many as values I want. Thank you for your help\n\n```\ndef median(a, b, c):\n    if a > b and a > c:\n        return b if b > c else c\n\n    if a < b and a < c:\n        return b if b < c else c\n\n    return a\n```\n\n    ", "Answer": "\r\nJust go thought second to second to last elements and put save the median out of this, previous and next element. Note that first and last elements are left as they were.\n\nTry this:\n\n```\nlat = [50.63757782, 50.6375742, 50.6375742, 50.6374077762, 50.63757782, 50.6374077762, 50.63757782, 50.63757782]\n\n# returns median value out of the three values\ndef median(a, b, c):\n    if a > b and a > c:\n        return b if b > c else c\n\n    if a < b and a < c:\n        return b if b < c else c\n\n    return a\n\n\n# add the first element\nfiltered = [lat[0]]\n\nfor i in range(1, len(lat) - 1):\n    filtered += [median(lat[i - 1], lat[i], lat[i + 1])]\n\n# add the last element\nfiltered += [lat[-1]]\n\nprint(filtered)\n```\n\n\nWhat you are doing is a very basic Median filter\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Ranking by median in python\r\n                \r\nI am newish to pandas. I have a dataframe (df) with the columns, height (numeric) and team (string) I'd like to rank the teams by their median height.\nHere is what I have done so far\n```\ndf = old_df.groupby(\"team\")\na=df[\"height\"].agg([np.median])\na=a.sort_values(by=['median'])\na.reset_index(inplace=True)\nb=a[\"team\"].tolist()\n```\n\nthis outputs a list of the team names (b), in order of median height, which could be converted into a dictionary and used to create a new col of the data frame. I am not sure how to do that, but my intuition is that there is almost certainly a simpler way of doing this.\nCan you see a better way?\n    ", "Answer": "\r\nUse ```\ngroupby.agg```\n to group the teams before computing/sorting their medians:\n```\ndf.groupby('team')['height'].agg('median').sort_values()\n```\n\n\nToy example:\n```\ndf = pd.DataFrame({'team': ['foo']*3 + ['bar']*2, 'height': [1,3,7,20,40]})\n\n#   team  height\n# 0  foo       1\n# 1  foo       3\n# 2  foo       7\n# 3  bar      20\n# 4  bar      40\n```\n\n```\nranked = df.groupby('team')['height'].agg('median').sort_values()\n\n# team\n# foo     3\n# bar    30\n# Name: height, dtype: int64\n```\n\n```\nranked.to_dict()\n\n# {'foo': 3, 'bar': 30}\n```\n\n\nUpdate: To compute the ranks explicitly, use ```\nSeries.rank```\n:\n```\nranked = df.groupby('team')['height'].agg('median').rank(ascending=False)\n\n# team\n# bar    1.0\n# foo    2.0\n# Name: height, dtype: float64\n```\n\n```\nranked.to_dict()\n\n# {'bar': 1.0, 'foo': 2.0}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "calculate the median across several vectors\r\n                \r\nI need to calculate the median of ```\nROE1```\n, ```\nROE2```\n and ```\nROE3```\n. But, to calculate each median I have to include all the rows with the same ```\nDatum```\n and same ```\nInd```\n categories. For instance, to calculate the median of the second row, I have to include the row 2 and 3, because I have the same ```\nDatum```\n and ```\nInd```\n in the row 2 and 3. I am trying to use the loop function ```\napply```\n, but I don´t know how I can include this condition.\n\nIt is like a conditional median.\n\nThank you very much for your attention.\n\nHere, it is the example:\n\n```\nDatum   Ind ROE1    ROE2    ROE3\n 95     45  NA      6       13\n 95     45  18      25      28\n 95     50  10      15      20\n```\n\n    ", "Answer": "\r\nHere's a possible ```\ndata.table```\n solution\n\n```\nlibrary(data.table)\nsetDT(df)[, list(Median = median(unlist(.SD), na.rm = TRUE)), by = list(Datum, Ind)]\n#    Datum Ind Median\n# 1:    95  45     18\n# 2:    95  50     15\n```\n\n\nAnother option is to tidy up the data first using ```\nmelt```\n\n\n```\nmelt(setDT(df), id.vars = c(\"Datum\", \"Ind\"))[, \n                  list(Median = median(value, na.rm = TRUE)), \n                  by = list(Datum, Ind)]\n\n#    Datum Ind Median\n# 1:    95  45     18\n# 2:    95  50     15\n```\n\n\n\n\nOr if you an Hadleyverse fan, could also do\n\n```\nlibrary(tidyr)\nlibrary(dplyr)\ndf %>%\n  gather(Variable, value, -(Datum:Ind))%>%\n  group_by(Datum, Ind) %>%\n  summarise(Median = median(value, na.rm = TRUE))\n\n# Source: local data frame [2 x 3]\n# Groups: Datum\n# \n#   Datum Ind Median\n# 1    95  45     18\n# 2    95  50     15\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median windows in C\r\n                \r\nI wrote a code to find median filtering (median window). But, I can't make scannig to every number. What can I use instead of ```\nsize```\n in the for loops. When I use size it ensures just ```\n5```\n Also, what about boundries ? What can I do for boundries ? Thank you for all appreciated answers. (I've opened new topic because users said that every topic is based on one question.If I did mistake,please delete the question, I will suffix the current question)\n\n```\n    <size of array>\n    <size filter> \n    <data>\n    8\n    3\n    0 0 0 0 0 0 0 0\n    0 5 0 0 6 0 0 0\n    0 0 0 0 0 7 0 0\n    0 0 0 0 5 0 0 0\n    0 0 0 5 6 0 0 0\n    0 0 8 5 5 0 0 0\n    0 0 0 7 0 0 9 0\n    0 0 0 0 0 0 0 0\n\n    Output:\n    0 0 0 0 0 0 0 0\n    0 0 0 0 0 0 0 0\n    0 0 0 0 0 0 0 0\n    0 0 0 0 0 0 0 0\n    0 0 0 5 5 0 0 0\n    0 0 0 5 5 0 0 0\n    0 0 0 0 0 0 0 0\n    0 0 0 0 0 0 0 0\n```\n\n\n\n\n```\n#include <stdio.h>\n\nint median(int a[100],int n);\n\n\nint main()\n{\n    int a[100][100];\n    int temp[100];\n    int i,j,k,count=0;\n    int sizefilter;\n    int sizearray;\n\n    scanf(\"%d\", &sizearray);\n    scanf(\"%d\", &sizefilter);\n\n    for(i = 0; i < sizearray; i++)\n        for(j = 0; j < sizearray; j++)\n            scanf(\"%d\", &a[i][j]);\n\n    for(k = 0; k < sizearray; k++)\n        for(i = 0; i < sizefilter; i++)\n            for(j = 0; j < sizefilter; j++)\n            {\n                temp[count] = a[i][j];\n                count++;\n                a[i][j] = median(temp, count);\n            }\n\n    printf(\"\\n\");\n    printf(\"\\n\");\n\n    for(i = 0; i < sizearray; i++)\n        for(j = 0; j < sizearray; j++)\n        {\n            printf(\"%d \", a[i][j]);\n\n            if(j == sizearray-1)\n                printf(\"\\n\");\n        }\n\n    return 0;\n}\n\nint median(int a[100],int n)\n{\n    int i,j,t;\n    int result;\n    /* Sorting begins */\n    for (i = 1 ; i <= n-1 ; i++)\n    {     /* Trip-i begins  */\n        for (j = 1 ; j <= n-i ; j++)\n        {\n             if (a[j] <= a[j+1])\n             { /* Interchanging values */\n\n                 t = a[j];\n                 a[j] = a[j+1];\n                 a[j+1] = t;\n             }\n             else continue ;\n         }\n    } /* sorting ends */\n\n    /* calculation of median  */\n    if ( n % 2 == 0)\n        return  result = (a[n/2] + a[n/2+1])/2 ;\n    else\n        return result = a[n/2 + 1];\n}\n```\n\n    ", "Answer": "\r\nThere are some logical errors in your code:\n\n\nWhen you filter, you need four nested loops: The outer two iterate over columns and rows of the matrix, the inner two iterate over columns and rows of the filter area. (That shouldn't be news to you; you have already been told that in an answer to your previous question.)\nThe constraints of the filter area are simple: The left and top indices must not fall below zero and the right and bottom indicies must be smaller than ```\nsizearray```\n. If they are not, adjust them.\nYou need two arrays, the original array ```\na```\n and a second array that contains the filtered values. You cannot filter in-place, because if you look upwards and to the left, you'll see only filtered values, whereas your filter should always look at the original values.\nYour wrong filtering loops apart: You never reset ```\ncount```\n, which you should reset, of course, for every median value you calculate. You also calculate the median in the inner loop, which is too often. A solution to this is to make ```\ncount```\n local to the loop that accumulates filter values and determines the median.\nYour sorting has index errors. Instead of comparing ```\ni```\n with ```\ni + 1```\n,  compare with ´i - 1```\n. Your indices start from 1, so```\ni - 1` will always yield a valid index.\nYou buble-sort the array, which is fine for small arrays, but slow in general. The ```\n<stdlib.h>```\n has ```\nqsort```\n, which may be useful to you for general sorting.\nYour median indices are also off by one towards the right.\n\n\nThere are also some stylistic issues:\n\n\nPlease make a habit of using braces for code blocks for ```\nfor```\n, ```\nwhile```\n and ```\nif```\n. Only very trivial code blocks in the innermost scope can be written without braces. In your case, a lot has to be done \"between\"  the loops, and having braces there makes it easy to add stuff.\nYor variable ```\nresult```\n in ```\nmedian```\n is superfluous. You assign it and then immediately lose the variable itself, because you return. Just returning is enough.\n\n\nBelow is a version of your code that gives the desired output:\n\n```\n#include <stdint.h>\n#include <stdio.h>\n\nint min(int a, int b)\n{\n    return a < b ? a : b;\n}\n\nint max(int a, int b)\n{\n    return a > b ? a : b;\n}\n\nint median(int a[], int n)\n{\n    int i, j;\n\n    for (i = 1 ; i < n ; i++) {\n        for (j = 1 ; j < n ; j++) {\n             if (a[j] < a[j - 1]) {\n                 int t = a[j];\n                 a[j] = a[j - 1];\n                 a[j - 1] = t;\n             }\n         }\n    }\n\n    if (n % 2) return a[n / 2];\n    return (a[n / 2 - 1] + a[n / 2]) / 2 ;        \n}\n\nint main()\n{\n    int a[100][100];\n    int b[100][100];\n    int temp[100];\n    int i, j, ii, jj;\n    int sizefilter;\n    int sizearray;\n\n    scanf(\"%d\", &sizearray);\n    scanf(\"%d\", &sizefilter);\n\n    for(i = 0; i < sizearray; i++) {\n        for(j = 0; j < sizearray; j++) {\n            scanf(\"%d\", &a[i][j]);\n        }\n    }\n\n    for(i = 0; i < sizearray; i++) {\n        for(j = 0; j < sizearray; j++) {\n            int imin = max(0, i - sizefilter / 2);\n            int imax = min(sizearray, i + sizefilter / 2 + 1);\n            int jmin = max(0, j - sizefilter / 2);\n            int jmax = min(sizearray, j + sizefilter / 2 + 1);\n            int count = 0;\n\n            for (ii = imin; ii < imax; ii++) {\n                for (jj = jmin; jj < jmax; jj++) {\n                    temp[count] = a[ii][jj];\n                    count++;\n                }\n            }\n\n            b[i][j] = median(temp, count);\n        }\n    }\n\n    for(i = 0; i < sizearray; i++) {\n        for(j = 0; j < sizearray; j++) {\n            printf(\"%3d\", b[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to calculate median in Crate\r\n                \r\nI am using Crate 0.54.7 and have the following table definition:\n\n```\nCREATE TABLE test (id int PRIMARY KEY, val int);\n```\n\n\nNow I want to get the median of val. The query I used in Postgresql so far did not work:\n\n```\nSELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY val) FROM test;\n```\n\n\nIs there any way I can calculate the median in Crate?\n    ", "Answer": "\r\nThis is not supported in Crate (as of 0.54.X).\n\nBut there are two feature requests on Github \n\n\n1 Percentile Aggregation?\n2 Quantiles Aggregation\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "SSAS MDX Median with time series\r\n                \r\nI am trying to calculate a median on timeseries monitoring data.\n\nThe OLAP cube has a date dimension (lowest level is date) and a seperate time dimension. (lowest level is minute)\n\nI've found that it calculates correctly for a given day, but it rolls up the values for the month. (it should be ~1.55 for the month)\n\n```\nWITH MEMBER [Measures].[Medianx] AS MEDIAN([Time].[Time Key].MEMBERS , [Measures].[Total of Values])      \n\nSELECT NON EMPTY {\n[Measures].[Count of Values], \n[Measures].[Minimum Value], \n[Measures].[Maximum Value], \n[Measures].[Total of Values], \n[Measures].[Medianx]\n} ON COLUMNS,  \n\nNON EMPTY ( [Date].[Date].[Date].MEMBERS )  ON ROWS \n\nFROM [Environmental Data]\n```\n\n\nGives this: \n\n\n\nThe Median for the Month can't be higher than median of the 5 individual days.\n\nHow do I get OLAP to calculate the Median correctly across the time range selected when rolling up? (e.g by Day and Month and Year) \n\nCould it be caused by having seperate date and time dimensions? \n\nEdit: I've found that if I just a degereate dimension wihc has a 1:1 relationship with the fact. It calcalates correctly for the month, but is really slow. (2min30sec for 1429 rows of data)\n\n```\nWITH MEMBER [Measures].[Medianx] AS MEDIAN([Data Attributes].[DETL Key].MEMBERS, [Measures].[Total of Values])\n```\n\n\nHowever, if I try to query grouping by day it never finishes the query.\n    ", "Answer": "\r\nI found I could use the DESCENDANTS function to drill down through both the Date & Time dimensions to get to an average aggregate with a granularity of 1 minute per day. \n\n```\nMEDIAN(NonEmptyCrossJoin(DESCENDANTS([Date].[Calendar Date].CurrentMember, , LEAVES), DESCENDANTS([Time].[Time Key].CurrentMember, , LEAVES)), [Measures].[Average Value])\n```\n\n\nTesting found than given the nature of the data an average per minute gave a reliable median. Because it's calculated on aggregates rather than raw data it runs very quickly.\n\nI don't really understand why, but it now calculates correctly for the day, month and year. \n\nWarning: If I select 5 days of the month i will get the correct median for each day, and I will get the correct median for the entire month. (Rather than the median of the 5 days selected).  \n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Assign median values by separating data to bins\r\n                \r\nI have a dataframe which I want to separate into bins and assign each bin the median value of the values in that bin.\n```\n   POA   Egrid           \n   200   1.17\n   205   0.63\n   275   1.08\n   325   1.22\n   350   0.57\n```\n\nThe result should look like\n```\n   POA       Egrid           \n (200,300)   Median of (1.17,0.63,1.08)\n (300,400)   Median of (1.22,0.57)\n```\n\nI tried to write two loops, but couldn't figure out the median part. Any help would be good.\n    ", "Answer": "\r\nDo with\n```\ns=df.groupby(pd.cut(df.POA,[100,200,300])).Egrid.median().reset_index()\n          POA  Egrid\n0  (100, 200]  1.170\n1  (200, 300]  0.855\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Deducting the median from each column\r\n                \r\nI have a dataframe, ```\ndf```\n with numbers, like so:\n\n```\n1 1 1\n2 1 1\n2 1 3\n```\n\n\nI'd like to deduct the median from each column so that the median of each becomes 0.\n\n```\n-1 0 0\n0 0 0\n0 0 2\n```\n\n\nHow do I do this in a pythandic way? I'm guessing it is possible without iterating over the values, computing the median and then deducting. I'd like to do it tersely, approximately like so:\n\n```\nfrom numpy import median\ndf -= median(df) #does not work, deducts median for whole dataframe\n```\n\n    ", "Answer": "\r\nJust like this\n\n```\ndf -= df.median(axis=0)\n```\n\n\n```\nmedian```\n of ```\nnumpy```\n computes median of overall data.\nTo accomplish using ```\nnumpy```\n, try this code instead.\n\n```\ndf -= median(df, axis=0)\n```\n\n\nfor more detail, see the document: http://docs.scipy.org/doc/numpy/reference/generated/numpy.median.html\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of 3 partitioning\r\n                \r\nI found the following code for finding a pivot for quicksort using median of first, last and middle element:\n\n```\nint middle = ( low + high ) / 2;\nif( a[ middle ].compareTo( a[ low ] ) < 0 )\n    swapReferences( a, low, middle );\nif( a[ high ].compareTo( a[ low ] ) < 0 )\n    swapReferences( a, low, high );\nif( a[ high ].compareTo( a[ middle ] ) < 0 )\n    swapReferences( a, middle, high );\n\n// Place pivot at position high - 1\nswapReferences( a, middle, high - 1 );\nComparable pivot = a[ high - 1 ];\n```\n\n\nI want to know after finding the median, why is the swap done with index high-1 instead of high?\n    ", "Answer": "\r\nThe reason is that the algorithm does not only find the median, it also sorts the low, middle and high elements. After the three permutations you know that a[middle]<=a[high]. So you need only to partition the elements before high, because a[high] is greater or equal to pivot.\n\nLet's look at an example: low=0, middle=4 and high=8. Your array is like this:\n\n```\nlowerOrEqualToPivot X X X pivot X X X greaterOrEqualToPivot\n```\n\n\nIf you swap middle with high, you need to partition the 8 elements between brackets :\n\n```\n[ lowerOrEqualToPivot X X X greaterOrEqualToPivot X X X ] pivot\n```\n\n\nIf you swap middle with high-1, you need to split only 7 elements:\n\n```\n[ lowerOrEqualToPivot X X X X X X ] pivot greaterOrEqualToPivot\n```\n\n\nBy the way there is a bug in the first line:\n\n```\nint middle = ( low + high ) / 2; //Wrong\nint middle = ( low + high ) >>> 1; //Correct\n```\n\n\nThe reason is that if (low + high) is greater than Integer.MAX_VALUE you will have an overflow and middle will be a negative number. The second line will always give you a positive result.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Rolling Median in a Pandas Pivot Table\r\n                \r\nI am trying to calculate a rolling median as an aggregated function on a pandas dataframe. Here is some sample data:\n```\nimport pandas as pd\nimport numpy as np\n\nd = {'date': ['2020-01-01','2020-02-01','2020-03-01','2020-01-01','2020-02-01','2020-02-01','2020-03-01','2020-02-01','2020-03-01','2020-03-01','2020-03-01','2020-03-01','2020-03-01'],\n     'count': [1,1,1,2,2,3,3,3,4,3,3,3,1], \n     'type': ['type1','type2','type3','type1','type3','type1','type2','type2','type2','type3','type1','type2','type1'],\n     'salary':[1000,2000,3000,10000,15000,30000,100000,50000,25000,10000,25000,30000,40000]}\ndf: pd.DataFrame = pd.DataFrame(data=d)\n\ndf_pvt: pd.DataFrame = df.pivot_table(index='date',\n                                      columns='type',\n                                      aggfunc={'salary': np.median})\ndf_pvt.head(5)\n```\n\nI would like to perform a rolling median on the salaries using pandas ```\nrolling(2).median()```\n function.\nHow can I go about inserting this type of window function into the aggregate function for a pivot table?\nMy goal is to aggregate a large amount of numeric data by date and take the rolling median of variable lengths and report that in my resulting pivot table. I am not entirely sure how to insert this function into ```\naggfunc```\n or the like.\nThe expected output orders by the date in ascending order and takes all observations associated with both months and finds the median.\nFor type1 we have:\n```\n\ndate    count   type    salary\n0   2020-01-01  1   type1   1000\n3   2020-01-01  2   type1   10000\n5   2020-02-01  3   type1   30000\n10  2020-03-01  3   type1   25000\n12  2020-03-01  1   type1   40000\n```\n\nThus, for type1 the expected output with rolling(2) would be:\n```\n\n             salary\ntype         type1  \ndate            \n2020-01-01  NaN \n2020-02-01  10000.0\n2020-03-01  30000.0\n```\n\nThe logic follows that for the first 2 month rolling window we would have data points 1000,10000 and 30000 and produce a median of 10000.\nFor 2020-03-01, the rolling 2 would include 30000, 25000, 40000 so the median result should be 30000.\n    ", "Answer": "\r\nNot sure it can be done directly with the parameter ```\naggfunc```\n. so a work around could be to create the a double of the data with a date column shifted of a month. Note that this method is not really scalable to bigger rolling window. it can but you may end up with too much data.\n```\n# first convert to datetime\ndf['date'] = pd.to_datetime(df['date'])\n\n# append the data shifted of a month to df and perform the pivot_table\nres = (\n    df\n    .append(df.assign(date=lambda x: x['date']+pd.DateOffset(months=1)))\n    .pivot_table(index='date',columns='type',\n                 aggfunc={'salary': np.median})\n    .reindex(df['date'].unique()) # to avoid an extra month\n)\n\nprint(res)\n             salary                  \ntype          type1    type2    type3\ndate                                 \n2020-01-01   5500.0      NaN      NaN\n2020-02-01  10000.0  26000.0  15000.0\n2020-03-01  30000.0  30000.0  10000.0\n```\n\nfor the first date if you want to get ```\nnan```\n as a rolling window would do, then you can do ```\nres.loc[res.index.min()] = np.nan```\n after\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median in django annotation\r\n                \r\nIm using MySQL server v5.8 as database, how to find median price in query like this:\n```\n price_query = Product.objects \\\n                        .filter(price_query) \\\n                        .annotate(dt=Trunc('StartDate', frequency)) \\\n                        .values('dt') \\\n                        .annotate(avg_price=Avg('Price'), std_price=StdDev('Price'),\n                         count=Count('Price'), max_price=Max('Price'),\n                         min_price=Min('Price'), median='???') \\\n                         .order_by('dt')\n```\n\nresponse is look like this\n```\n{\"date\":\"2021-05-01T00:00:00Z\",\"avg_price\":4326.666666666667,\"std_price\":20.548046676563168,\"min_price\":4300.0, \"max_price\":4350.0,\"count\":3}, {...}, {...}\n```\n\nAny help is highly appreciated.\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "JPA method to implement median\r\n                \r\nI use JPA data Mongo DB and crudrepository, Now I need a method to calculate median. This is the main method which I need to get a median price.\n\n```\nfindByDateBetweenAndInstrumentIdOrderByPriceDesc\n```\n\n\nIs it possible throw defined words in JPA?\n    ", "Answer": "\r\nNo that's not possible.\n\nYou have to use Mongo aggregation framework:\n\nCalculate the median in MongoDB aggregation framework\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Reading Column and Find Median (Bash)\r\n                \r\nI want to find the median for each column, however it doesn't work like what I want.\n\n```\n1 2 3 \n3 2 1\n2 1 5\n```\n\n\nI'm expecting for \n\n```\n2 2 3\n```\n\n\nfor the result, however turns out it just give sum error and some \"sum\" of the column. Below is a snippet of the code for \"median in column\"\n\n```\nwhile read -r line; do\n    read -a array <<< \"$line\"\n    for i in \"${!array[@]}\"\n    do\n      column[${i}]=${array[$i]}\n      ((length[${i}]++))\n      result=${column[*]} | sort -n\n    done < file\n for i in ${!column[@]}\n do\n   #some median calculation.....\n```\n\n\nNotes: I want to practice bash, that's why I hard-coded using bash.\nI really appreciate if someone could help me, especially in BASH. Thank you.\n    ", "Answer": "\r\nBash is really not suitable for low-level text processing like this: the ```\nread```\n command does a system call for each character that it reads, which means that it's slow, and it's a CPU hog. It's ok for processing interactive input, but using it for general text processing is madness. It would be much better to use awk (Python, Perl, etc) for this.\n\nAs an exercise in learning about Bash I guess it's ok, but please try to avoid using ```\nread```\n for bulk text processing in real programs. For further information, please see Why is using a shell loop to process text considered bad practice? on the Unix & Linux Stack Exchange site, especially the answer written by \nStéphane Chazelas (the discoverer of the Shellshock Bash bug).\n\nAnyway, to get back to your question... :)\n\nMost of your code is ok, but \n\n```\nresult=${column[*]} | sort -n\n```\n\n\ndoesn't do what you want it to.\n\nHere's one way to get the column medians in pure Bash:\n\n```\n#!/usr/bin/env bash\n\n# Find medians of columns of numeric data\n# See http://stackoverflow.com/q/33095764/4014959\n# Written by PM 2Ring 2015.10.13\n\nfname=$1\necho \"input data:\"\ncat \"$fname\"\necho\n\n#Read rows, saving into columns\nnumrows=1\nwhile read -r -a array; do\n    ((numrows++))\n    for i in \"${!array[@]}\"; do\n        #Separate column items with a newline\n        column[i]+=\"${array[i]}\"$'\\n'\n    done\ndone < \"$fname\"\n\n#Calculate line number of middle value; which must be 1-based to use as `head`\n#argument, and must compensate for extra newline added by 'here' string, `<<<`\nmidrow=$((1+numrows/2))\necho \"midrow: $midrow\"\n\n#Get median of each column\nresult=''\nfor i in \"${!column[@]}\"; do\n    median=$(sort -n <<<\"${column[i]}\" | head -n \"$midrow\" | tail -n 1)\n    result+=\"$median \"\ndone\n\necho \"result: $result\" \n```\n\n\noutput\n\n```\ninput data:\n1 2 3\n3 2 1\n2 1 5\n\nmidrow: 3\nresult: 2 2 3 \n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "circular median filter matlab\r\n                \r\nHow can I define a circular filter that acts like median filter (medfilt2), but instead of square neighborhood of [n n] , performs median on a circular neighborhood with radius r ?\nI need to perform this operation on 2d-image. (And preferably, should work fast of course).\nThanks\n    ", "Answer": "\r\nuse ```\nordfilt2```\n with a circular domain. For example,\n\n```\nB = ordfilt2(A, order, domain)\n```\n\n\nreplaces each element in A by the order-th element in the sorted set of neighbors specified by the nonzero elements in domain. In your case create a circular domain with something like\n\n```\ndomain=fspecial('disk',10)>0;\n```\n\n\nthis generates a nice binary disk (21x21 matrix), that is probably too big for your needs, so can re-size to whatever you need using the ```\nfspecial```\n or ```\nimresize```\n. Then the median is the middle value obtained from the sorted non-zero elements of the domain, so: \n\n```\nB = ordfilt2(A,round(0.5*numel(find(domain)))),domain);\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Ring median filter in python\r\n                \r\nI want to implement a ring median filter - what it does is basically replace the center pixel by the median values of the pixels in a circular ring around it. \nI can make a circular mask of some radius like this \n\n```\nkernel = np.zeros((2*radius+1, 2*radius+1))\ny,x = np.ogrid[-radius:radius+1, -radius:radius+1]\nmask = x**2 + y**2 <= radius**2\nkernel[mask] = 1\n```\n\n\nThen I can use scipy's generic filter to take median of the values\n\n```\nimport scipy.ndimage.filters as scp_filt\ncircular_median = scp_filt.generic_filter(my_image, np.median, footprint=kernel)\n```\n\n\nThe above mask is including pixels inside the circle. What pixels should lie on the circumference seems slightly ambiguous to me (think of circle inscribed in 3*3, 5*5, 7*7 kernels). Is there a \"ring\" function I can use OTS or something? \n\nWhy all this - trying to use a part of this paper http://pages.swcp.com/~spsvs/resume/PODS_DSS2009_2009-01-15.pdf Ring median filter, after subtraction from the original image leaves objects with a scale size of less than the radius.\n\nAlso, not sure if I should do this in RGB or not. I have only seen median filters on grayscale images\n    ", "Answer": "\r\nUse the Bresenham algorithm for circles    https://www.daniweb.com/programming/software-development/threads/321181/python-bresenham-circle-arc-algorithm\n\nScipy generic filter along with this ring median kernel is quite slow in practice, at least in python \n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Trying to find median\r\n                \r\nWhile executing the query to find median I stumble upon this error message- BIGINT UNSIGNED value is out of range in '(```\nmedian```\n.```\nrow_asc```\n - ```\nmedian```\n.```\nrow_desc```\n)'\n\nThe query that I wrote:\n```\nwith median as\n(select lat_n, row_number () over (order by lat_n asc) as row_asc,row_number () over (order by lat_n desc) as row_desc\nfrom station\n \n )\n select round(avg(lat_n),4)\n from median\n where abs(row_asc-row_desc) <= 1\n```\n\nWhile doing the same kind in postgresql by creating the table\n```\ncreate table station (id serial primary key,\n                      city varchar(50),\n                     state varchar(50),\n                     lat_n float,\n                      long_w float)\n                      \ninsert into station values \n(2,'ctc','odisha',31.546,33.213),\n(3,'khorda','odisha',30.546,39.213),                  \n(4,'puri','odisha',41.546,37.213);  \n\nwith median as\n(select lat_n,row_number() over (order by lat_n) as row_asc,\nrow_number() over(order by lat_n desc) as row_desc from station\n\n)\n\nselect round(avg(lat_n),4)\nfrom median\nwhere abs(row_asc-row_desc) <=1\n```\n\nthe error:\n```\nERROR:  function round(double precision, integer) does not exist\nLINE 7: select round(avg(lat_n),4)\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n```\n\n    ", "Answer": "\r\nThe problem is that the function requires the first argument to be of type ```\nnumeric```\n:\n```\n\\df round\n                         List of functions\n   Schema   │ Name  │ Result data type │ Argument data types │ Type \n════════════╪═══════╪══════════════════╪═════════════════════╪══════\n pg_catalog │ round │ double precision │ double precision    │ func\n pg_catalog │ round │ numeric          │ numeric             │ func\n pg_catalog │ round │ numeric          │ numeric, integer    │ func\n```\n\nand there is no implicit cast from ```\ndouble precision```\n to ```\nnumeric```\n:\n```\n                         List of casts\n   Source type    │ Target type │ Function │   Implicit?   \n══════════════════╪═════════════╪══════════╪═══════════════\n double precision │ numeric     │ numeric  │ in assignment\n```\n\nAccording to the documentation, only implicit casts are considered:\n\nFunction Type Resolution\n[...]\n\nLook for the best match.\n\n       a. Discard candidate functions for which the input types do not match and cannot be converted (using an implicit conversion) to match.\n\nSo you will have to add an explicit cast:\n```\nround(CAST (avg(lat_n) AS numeric), 4)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median and mode displaying -1\r\n                \r\nHey guys I have been learning coding recently and got an assignment of finding the mean, median and mode of a number of integers in an integer array. The issue that I am facing is that my median and mode displays -1 and I'm not too sure how to fix it, my \"if user inputs no, print an error statement\" is also not working and I would be very grateful if someone could help me out.\nThis is my code:\n```\npackage com.company;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\nimport static com.company.ProjectConstants.*;\n\nimport java.util.*;\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n\n        int[] a = new int[MAXDATA];\n        int counter = 0;\n        boolean fileDone = false;\n        boolean inputOk;\n        String userInput;\n        String theDataFile;\n\n        Scanner s = new Scanner(System.in);\n\n        genProgInfo();\n\n        userInput = s.nextLine();\n        userInput = userInput.toLowerCase();\n\n        while (!userInput.equals(\"yes\") && (!userInput.equals(\"no\"))) {\n            System.out.println(\"ERROR: Please input either yes or no: \");\n            userInput = s.nextLine();\n            userInput = userInput.toLowerCase();\n        }\n\n        inputOk = userInput.equals(\"yes\");\n\n        initDataStorage(a);\n\n\n        //do {\n        try {\n            // create file & scanner objects\n            System.out.println(\"enter one of the file names:\\nData10File.txt\\nData30file.txt\\nData35file.txt\");\n            theDataFile = s.next();\n            theDataFile = theDataFile.toLowerCase();\n            //fName = userInput;\n            File f = new File(theDataFile);\n            Scanner sc = new Scanner(f);\n\n            // store file data in array, a\n            for (int i = 0; i < MAXDATA; i++) {\n\n                if (sc.hasNext()) {\n                    a[i] = sc.nextInt();\n\n                } else {\n\n                    fileDone = true;\n                    sc.close();\n                    break;\n                }\n\n            }\n\n            // print error message if file data exceeds the range of array\n            if (!fileDone) {\n                System.out.println(\"\\n\\tCAUTION: file has additional data, consider making array larger.\");\n            }\n\n\n        } catch (FileNotFoundException e) {\n            System.out.println(e);\n            e.printStackTrace();\n        }\n        //} while (inputOk);\n\n\n        s.close();\n\n        for (int i=0; i<MAXDATA; i++) {\n            if (a[i] != -1) {\n                counter = a[i];\n            }\n        }\n\n        System.out.println(\"counter: \"+ counter);\n\n        displayResults(calcMean(a), calcMedian(a), calcMode(a));\n\n\n    }\n\n\n    public static void initDataStorage(int[] data) {\n\n        for (int i = 0; i < MAXDATA; i++) {\n            data[i] = INVALID;\n        }\n\n    }\n\n\n    public static double calcMean(int[] data) {\n\n\n        int counter = 0;\n        int mean;\n        int sum = 0;\n\n        for (int i = 0; i < MAXDATA; i++) {\n            if (data[i] != -1) {\n                sum += data[i];\n                counter++;\n            }\n        }\n\n\n        mean = sum / counter;\n        return mean;\n    }\n\n\n    public static double calcMedian(int[] data) {\n\n        int middle = data.length / 2;\n        if (data.length % 2 == 1) {\n            return data[middle];\n        } else {\n            return (data[middle -1] + data[middle]) / 2.0;\n        }\n    }\n\n    public static int calcMode(int[] data) {\n        int mode = 0, maxCount = 0;\n\n        for (int i = 0; i < data.length; ++i) {\n            int count = 0;\n            for (int j = 0; j < data.length; ++j) {\n                if (data[j] == data[i]) {\n                    count++;\n                }\n            }\n\n            if (count > maxCount) {\n                maxCount = count;\n                mode = data[i];\n\n            }\n        }\n\n\n        return mode;\n    }\n\n\n    public static void genProgInfo() {\n\n        System.out.println(\"This program will calculate the mean, median, and mode of a number of integers stored in the array\");\n        System.out.println(\"Would you like to continue?\");\n\n    }\n\n\n    public static void displayResults(double mean, double median, int mode) {\n\n        System.out.println(\"mean: \" + mean);\n        System.out.println(\"median: \" + median);\n        System.out.println(\"mode: \" + mode);\n    }\n\n\n}\n```\n\n    ", "Answer": "\r\nI'm assuming the value of INVALID is -1 based on the other code I see and your description of what it outputs. Your array is of length MAXDATA and is initially filled with value INVALID in all elements. You then fill it with n values where n may be less than MAXDATA, and in that (probably common) case, many or even most of the values in the array are the INVALID value.\nYour calcMean function is correctly skipping over the -1 (INVALID?) values and not including them in the calculation. Note however that the valid values are all at the beginning of the array and once you find an invalid value, you could break out of the loop in calcMean.\nBut the calcMedian and calcMode functions are not accounting for the invalid values. If n is significantly less than MAXDATA, then -1 probably really is the mode. Your calcMedian function has an additional problem as well, in that the (valid) data needs to be sorted in order for the \"middle\" or median value to be in the middle of the array.\nBonus question for your assignment: What if -1 occurs in the input file?\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median and mode displaying -1\r\n                \r\nHey guys I have been learning coding recently and got an assignment of finding the mean, median and mode of a number of integers in an integer array. The issue that I am facing is that my median and mode displays -1 and I'm not too sure how to fix it, my \"if user inputs no, print an error statement\" is also not working and I would be very grateful if someone could help me out.\nThis is my code:\n```\npackage com.company;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\nimport static com.company.ProjectConstants.*;\n\nimport java.util.*;\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n\n        int[] a = new int[MAXDATA];\n        int counter = 0;\n        boolean fileDone = false;\n        boolean inputOk;\n        String userInput;\n        String theDataFile;\n\n        Scanner s = new Scanner(System.in);\n\n        genProgInfo();\n\n        userInput = s.nextLine();\n        userInput = userInput.toLowerCase();\n\n        while (!userInput.equals(\"yes\") && (!userInput.equals(\"no\"))) {\n            System.out.println(\"ERROR: Please input either yes or no: \");\n            userInput = s.nextLine();\n            userInput = userInput.toLowerCase();\n        }\n\n        inputOk = userInput.equals(\"yes\");\n\n        initDataStorage(a);\n\n\n        //do {\n        try {\n            // create file & scanner objects\n            System.out.println(\"enter one of the file names:\\nData10File.txt\\nData30file.txt\\nData35file.txt\");\n            theDataFile = s.next();\n            theDataFile = theDataFile.toLowerCase();\n            //fName = userInput;\n            File f = new File(theDataFile);\n            Scanner sc = new Scanner(f);\n\n            // store file data in array, a\n            for (int i = 0; i < MAXDATA; i++) {\n\n                if (sc.hasNext()) {\n                    a[i] = sc.nextInt();\n\n                } else {\n\n                    fileDone = true;\n                    sc.close();\n                    break;\n                }\n\n            }\n\n            // print error message if file data exceeds the range of array\n            if (!fileDone) {\n                System.out.println(\"\\n\\tCAUTION: file has additional data, consider making array larger.\");\n            }\n\n\n        } catch (FileNotFoundException e) {\n            System.out.println(e);\n            e.printStackTrace();\n        }\n        //} while (inputOk);\n\n\n        s.close();\n\n        for (int i=0; i<MAXDATA; i++) {\n            if (a[i] != -1) {\n                counter = a[i];\n            }\n        }\n\n        System.out.println(\"counter: \"+ counter);\n\n        displayResults(calcMean(a), calcMedian(a), calcMode(a));\n\n\n    }\n\n\n    public static void initDataStorage(int[] data) {\n\n        for (int i = 0; i < MAXDATA; i++) {\n            data[i] = INVALID;\n        }\n\n    }\n\n\n    public static double calcMean(int[] data) {\n\n\n        int counter = 0;\n        int mean;\n        int sum = 0;\n\n        for (int i = 0; i < MAXDATA; i++) {\n            if (data[i] != -1) {\n                sum += data[i];\n                counter++;\n            }\n        }\n\n\n        mean = sum / counter;\n        return mean;\n    }\n\n\n    public static double calcMedian(int[] data) {\n\n        int middle = data.length / 2;\n        if (data.length % 2 == 1) {\n            return data[middle];\n        } else {\n            return (data[middle -1] + data[middle]) / 2.0;\n        }\n    }\n\n    public static int calcMode(int[] data) {\n        int mode = 0, maxCount = 0;\n\n        for (int i = 0; i < data.length; ++i) {\n            int count = 0;\n            for (int j = 0; j < data.length; ++j) {\n                if (data[j] == data[i]) {\n                    count++;\n                }\n            }\n\n            if (count > maxCount) {\n                maxCount = count;\n                mode = data[i];\n\n            }\n        }\n\n\n        return mode;\n    }\n\n\n    public static void genProgInfo() {\n\n        System.out.println(\"This program will calculate the mean, median, and mode of a number of integers stored in the array\");\n        System.out.println(\"Would you like to continue?\");\n\n    }\n\n\n    public static void displayResults(double mean, double median, int mode) {\n\n        System.out.println(\"mean: \" + mean);\n        System.out.println(\"median: \" + median);\n        System.out.println(\"mode: \" + mode);\n    }\n\n\n}\n```\n\n    ", "Answer": "\r\nI'm assuming the value of INVALID is -1 based on the other code I see and your description of what it outputs. Your array is of length MAXDATA and is initially filled with value INVALID in all elements. You then fill it with n values where n may be less than MAXDATA, and in that (probably common) case, many or even most of the values in the array are the INVALID value.\nYour calcMean function is correctly skipping over the -1 (INVALID?) values and not including them in the calculation. Note however that the valid values are all at the beginning of the array and once you find an invalid value, you could break out of the loop in calcMean.\nBut the calcMedian and calcMode functions are not accounting for the invalid values. If n is significantly less than MAXDATA, then -1 probably really is the mode. Your calcMedian function has an additional problem as well, in that the (valid) data needs to be sorted in order for the \"middle\" or median value to be in the middle of the array.\nBonus question for your assignment: What if -1 occurs in the input file?\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median in django annotation\r\n                \r\nIm using MySQL server v5.8 as database, how to find median price in query like this:\n```\n price_query = Product.objects \\\n                        .filter(price_query) \\\n                        .annotate(dt=Trunc('StartDate', frequency)) \\\n                        .values('dt') \\\n                        .annotate(avg_price=Avg('Price'), std_price=StdDev('Price'),\n                         count=Count('Price'), max_price=Max('Price'),\n                         min_price=Min('Price'), median='???') \\\n                         .order_by('dt')\n```\n\nresponse is look like this\n```\n{\"date\":\"2021-05-01T00:00:00Z\",\"avg_price\":4326.666666666667,\"std_price\":20.548046676563168,\"min_price\":4300.0, \"max_price\":4350.0,\"count\":3}, {...}, {...}\n```\n\nAny help is highly appreciated.\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "R median large vector\r\n                \r\ni'm having trouble at finding a way to calculate faster the median and mean of a large vector in R. How would I implement a faster way?\nI'm doing the code above, but its too slow.\nI'm thinking about parallel processing, but i have no ideia how to make this work. Thanks.\n\n```\n    vector <- 1:10000000000\n    m <- mean(vector)\n    md <- median(vector)\n```\n\n    ", "Answer": "\r\nAssuming we're dealing with a sequential integer vector 1:n. This may help you:\n\n```\n## Given\nV <- 1:10e8    \nn <- length(V)\n\n## To get median,\nmedian <- ifelse(n %% 2 == 0, mean(V [(n/2):((n/2) + 1)]), V [(n + 1)/2])\nmedian\nOUTPUT: 5e+08\n\n## To get mean,\nsum_series <- n*(n + 1) / 2    # Mathematical Fact\nmean <- sum_series / n\nmean\nOUTPUT: 5e+08\n```\n\n\nFor large random vectors, the median still works the same. The mean you can estimate if it doesn't have a closed formula:\n\n```\n### Estimation via Repeated Sampling ### \nest_mean <- function (V, k, size) {\n  # k: Number of means to use in estimation\n  # size: Sample size of each estimation  \n  est <- rep(NA, k)\n  samp <- matrix(NA, nrow = size, ncol = k)\n\n  for (j in 1:k) samp [, j] <- sample(V, size, replace = TRUE)\n  for (j in 1:k) est [j] <- mean(samp [, j])\n  est <- sort(est)\n\n  return(est [ceiling(length(est)/2)])\n}\n\n### Time Complexity of Estimation ### \n# samp + est = k*size + k \n#     If size, k ~ 30 --> Enough to get normal mean distribution\n# iterate amount*(create sample vector + store) = k*(size + size)\n#     --> 2*k*size \n# Total = k + 3*k*size --> constant\n\n### Time Complexity of Base R Mean () ###\n# Assuming it's this: mean (V) <- sum(V)/length(V)\n# sum N items + find length + 1 division + 1 return = N + 3\n\n\n### Example ###\nset.seed(0)\nV <- sort(sample(0:10e8, 10e7, replace = TRUE))\n\nstart1 <- Sys.time()\nest_mu <- est_mean(V, 1000, 30)\nend1 <- Sys.time()\ndiff1 <- end1 - start1\n\nstart2 <- Sys.time()\nr_mu <- mean (V)\nend2 <- Sys.time()\ndiff2 <- end2 - start2\n\ndiff1\nOUTPUT: Time difference of 0.08370018 secs\ndiff2\nOUTPUT: Time difference of 0.5321879 secs\n\nprint(paste(\"% Difference = \", abs(r_mu - est_mu)/r_mu))\nOUTPUT: \"% Difference =  0.00678363793285072\"\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median for sparse matrix in numpy\r\n                \r\nWhat is the best way to obtain the median (along the row and column) of a sparse.csr_matrix matrix in python?\n\nPS: The webpage doesnt have any function of median\n    ", "Answer": "\r\nIf you are after the median of the column entries of a sparse matrix, sklearn has an implementation for CSC matrices\n\nhttps://github.com/scikit-learn/scikit-learn/blob/master/sklearn/utils/sparsefuncs.py#L441\n\nAs mentioned in the comments, median of nnz elements makes more sense here, since for a sufficient sparse matrix row/column median is zero.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding Median Using MySQL\r\n                \r\nI know that there are many ways to find the median, but I am trying to use this method to find the median. Can someone explain to me why this does not work? The error here says \"Invalid use of group function,\" but when I use HAVING instead of WHERE, the system doesn't recognize what RowNumber is. I'm very confused.\n```\nSELECT\n    ROUND(AVG(LS.LAT_N))\nFROM(\n    SELECT\n        LAT_N,\n        ROW_NUMBER() OVER (ORDER BY LAT_N) AS RowNumber\n    FROM\n        STATION\n    ) AS LS\nWHERE\n    RowNumber IN (\n        IF(\n            FLOOR(COUNT(LS.LAT_N)/2+0.5) = CEIL(COUNT(LS.LAT_N)/2+0.5),\n            FLOOR(COUNT(LS.LAT_N)/2+0.5),\n            FLOOR(COUNT(LS.LAT_N)/2+0.5) AND CEIL(COUNT(LS.LAT_N)/2+0.5)\n            )\n```\n\n    ", "Answer": "\r\nI typically write this as:\n```\nSELECT AVG(LAT_N)\nFROM (SELECT LAT_N,\n             ROW_NUMBER() OVER (ORDER BY LAT_N) AS RowNumber,\n             COUNT(*) OVER () as cnt\n      FROM STATION\n     ) s\nWHERE 2 * RowNumber IN (CNT, CNT + 1, CNT + 2);\n```\n\nHere is a db<>fiddle.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median in SQLusing abs\r\n                \r\nI was able to write the query to find the median using the following logic below, where I am having trouble is trying to understand the logic. Can someone please help me understand what is going on.I got the code from an advance sql book.\n\nSpecifically will this code work for both odd and even numbers. I tried the code and it works ,but I am very curious to understand the logic.\n\n```\nselect avg(sales) as median\nfrom \n(select g1.sales\nfrom ga g1, ga g2\ngroup by g1.sales\nhaving sum(case when g1.sales = g2.sales then 1 ELSE 0 END) >= ABS(SUM(SIGN(g1.sales-g2.sales))))g3;\n```\n\n    ", "Answer": "\r\nThis groups a Cartesian product by sales number to find the \"middle\" 1 or 2 sales and then averages the result to given the median. See detailed comments in-line.\n\n```\n--the subquery will return the 1 or 2 middle values and the average of those is the median\nselect avg(sales * 1.0) as median \n  from (\n    select g1.sales\n           --this creates a cartesian product of ga with itself\n      from ga g1, ga g2 \n           --and then group by sales, which allows comparision of each given sales figure all others\n     group by g1.sales \n    having \n      --the sum(case) here acts a count of row in the cartesian product that have matching sales values\n      --this will be the the square of the count() from ga where for each given sales number\n      sum(\n        case \n          when g1.sales = g2.sales \n          then 1 \n          ELSE 0 \n        END) \n\n       >= --The comparison acts as a de-weighting mechanism to handle duplicate sales numbers\n          --Such that if I have the same sales figure twice I'll have 4 rows in the Cartesian product\n          --and I should see a matching 4 or 0 if the row can be used in the final median calculation\n\n       --the abs(sum(sign())) here acts as a measure of how far of the median each sales is\n       --by looking at how many sales are greater then, equal, a lesser. The sales at or nearest\n       --the median will have the lowest numbers here.\n       ABS(\n         SUM(\n           SIGN(g1.sales-g2.sales)\n         )\n     )\n   )g3;\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Something I dont understand about median of medians algorithm\r\n                \r\nThere is something I don't understand about the algorithm of median of medians. \nOne key step about this algorithm is to find an approximate median, and according to Wikipedia, we have the guarantee that this approximate median is greater than 30% of  elements of the initial set.\n\nTo find this approximate median, we compute the median of each group of 5 elements, we gather these medians in a new set, and we recompute the medians until the obtained set have least than 5 elements. In this case, we get the median of the set. (see the wikipedia page if my explanations are not clear)\n\nBut, consider the following set of 125 elements :\n\n```\n1 2 3 1001 1002\n4 5 6 1003 1004\n7 8 9 1005 1006\n1020 1021 1022 1023 1034 \n1025 1026 1027 1028 1035 \n\n10 11 12 1007 1008\n13 14 15 1009 1010\n16 17 18 1011 1013\n1029 1030 1031 1032 1033 \n1036 1037 1038 1039 1040 \n\n19 20 21 1014 1015\n22 23 24 1016 1017\n25 26 27 1018 1019\n1041 1042 1043 1044 1045\n1046 1047 1048 1049 1050\n\n1051 1052 1053 1054 1055\n1056 1057 1058 1059 1060\n1061 1062 1063 1064 1065\n1066 1067 1068 1069 1070\n1071 1072 1073 1074 1075\n\n1076 1077 1078 1079 1080\n1081 1082 1083 1084 1085\n1086 1087 1088 1089 1090\n1091 1092 1093 1094 1095\n1096 1097 1098 1099 1100 \n```\n\n\nSo we divide the set in group of 5 elements, we compute and  gather the medians, and so, we obtain the following set : \n\n```\n3 6 9 1022 1207\n12 15 18 1031 1038\n21 24 27 1043 1048\n1053 1058 1063 1068 1073\n1078 1083 1088 1093 1098\n```\n\n\nWe redo the same algorithm, and we obtain the following set :\n\n```\n9 18 27 1063 1068\n```\n\n\nSo we obtain that the approximate median is 27. But this number is greater or equals than only 27 elements. And 27/125 = 21.6% < 30%!!\n\nSo my question is : where am I wrong?? Why is the approximate median is in my case not greater than 30% of elements????\n\nThank you for your replies!!\n    ", "Answer": "\r\nThe cause of your confusion about the median-of-medians algorithm is that, while median-of-medians returns an approximate result within 20% of the actual median, at some stages in the algorithm we also need to calculate exact medians. If you mix up the two, you will not get the expected result, as demonstrated in your example.\nMedian-of-medians uses three functions as its building blocks:\n```\nmedianOfFive(array, first, last) {\n    // ...\n    return median;\n}\n```\n\nThis function returns the exact median of five (or fewer) elements from (part of) an array. There are several ways to code this, based on e.g. a sorting network or insertion sort. The details are not important for this question, but it is important to note that this function returns the exact median, not an approximation.\n```\nmedianOfMedians(array, first, last) {\n    // ...\n    return median;\n}\n```\n\nThis function returns an approximation of the median from (part of) an array, which is guaranteed to be larger than the 30% smallest elements, and smaller than the 30% largest elements. We'll go into more detail below.\n```\nselect(array, first, last, n) {\n    // ...\n    return element;\n}\n```\n\nThis function returns the n-th smallest element from (part of) an array. This function too returns an exact result, not an approximation.\nAt its most basic, the overall algorithm works like this:\n```\nmedianOfMedians(array, first, last) {\n    call medianOfFive() for every group of five elements\n    fill an array with these medians\n    call select() for this array to find the middle element\n    return this middle element (i.e. the median of medians)\n}\n```\n\nSo this is where your calculation went wrong. After creating an array with the median-of-fives, you then used the median-of-medians function again on this array, which gives you an approximation of the median (27), but here you need the actual median (1038).\nThis all sounds fairly straightforward, but where it becomes complicated is that the function select() calls medianOfMedians() to get a first estimate of the median, which it then uses to calculate the exact median, so you get a two-way recursion where two functions call each other. This recursion stops when medianOfMedians() is called for 25 elements or fewer, because then there are only 5 medians, and instead of using select() to find their median, it can use medianOfFive().\nThe reason why select() calls medianOfMedians() is that it uses partitioning to split (part of) the array into two parts of close to equal size, and it needs a good pivot value to do that. After it has partitioned the array into two parts with the elements which are smaller and larger than the pivot, it then checks which part the n-th smallest element is in, and recurses with this part. If the size of the part with the smaller values is n-1, the pivot is the n-th value, and no further recursion is needed.\n```\nselect(array, first, last, n) {\n    call medianOfMedians() to get approximate median as pivot\n    partition (the range of) the array into smaller and larger than pivot\n    if part with smaller elements is size n-1, return pivot\n    call select() on the part which contains the n-th element\n}\n```\n\nAs you see, the select() function recurses (unless the pivot happens to be the n-th element), but on ever smaller ranges of the array, so at some point (e.g. two elements) finding the n-th element will become trivial, and recursing further is no longer needed.\nSo finally we get, in some more detail:\n```\nmedianOfFive(array, first, last) {\n    // some algorithmic magic ...\n    return median;\n}\n\nmedianOfMedians(array, first, last) {\n    if 5 elements or fewer, call medianOfFive() and return result\n    call medianOfFive() for every group of five elements\n    store the results in an array medians[]\n    if 5 elements or fewer, call medianOfFive() and return result\n    call select(medians[]) to find the middle element\n    return the result (i.e. the median of medians)\n}\n\nselect(array, first, last, n) {\n    if 2 elements, compare and return n-th element\n    if 5 elements or fewer, call medianOfFive() to get median as pivot\n    else call medianOfMedians() to get approximate median as pivot\n    partition (the range of) the array into smaller and larger than pivot\n    if part with smaller elements is size n-1, return pivot\n    if n-th value is in part with larger values, recalculate value of n\n    call select() on the part which contains the n-th element\n}\n```\n\n\nEXAMPLE\nInput array (125 values, 25 groups of five):\n```\n #1    #2    #3    #4    #5    #6    #7    #8    #9    #10   #11   #12   #13   #14   #15   #16   #17   #18   #19   #20   #21   #22   #23   #24   #25\n\n   1     4     7  1020  1025    10    13    16  1029  1036    19    22    25  1041  1046  1051  1056  1061  1066  1071  1076  1081  1086  1091  1096\n   2     5     8  1021  1026    11    14    17  1030  1037    20    23    26  1042  1047  1052  1057  1062  1067  1072  1077  1082  1087  1092  1097\n   3     6     9  1022  1027    12    15    18  1031  1038    21    24    27  1043  1048  1053  1058  1063  1068  1073  1078  1083  1088  1093  1098\n1001  1003  1005  1023  1028  1007  1009  1011  1032  1039  1014  1016  1018  1044  1049  1054  1059  1064  1069  1074  1079  1084  1089  1094  1099\n1002  1004  1006  1034  1035  1008  1010  1013  1033  1040  1015  1017  1019  1045  1050  1055  1060  1065  1070  1075  1080  1085  1090  1095  1100\n```\n\nMedians of groups of five (25 values):\n```\n3, 6, 9, 1022, 1027, 12, 15, 18, 1031, 1038, 21, 24, 27, 1043,  \n1048, 1053, 1058, 1063, 1068, 1073, 1078, 1083, 1088, 1093, 1098\n```\n\nGroups of five for approximate median:\n```\n #1    #2    #3    #4    #5\n\n   3    12    21  1053  1078\n   6    15    24  1058  1083\n   9    18    27  1063  1088\n1022  1031  1043  1068  1096\n1027  1038  1048  1073  1098\n```\n\nMedians of five for approximate median:\n```\n9, 18, 27, 1063, 1088\n```\n\nApproximate median as pivot:\n```\n27\n```\n\nMedians of five partitioned with pivot 27 (depends on method):\n```\nsmall: 3, 6, 9, 24, 21, 12, 15, 18\npivot: 27\nlarge: 1031, 1038, 1027, 1022, 1043, 1048, 1053, 1058,  \n       1063, 1068, 1073, 1078, 1083, 1088, 1093, 1098\n```\n\nThe smaller group has 8 elements, the larger group 16 elements. We were looking for the middle 13th element out of 25, so now we look for the 13 - 8 - 1 = 4th element out of 16:\nGroups of five:\n```\n #1    #2    #3    #4\n\n1031  1048  1073  1098\n1038  1053  1078\n1027  1058  1083\n1022  1063  1088\n1043  1068  1093\n```\n\nMedians of groups of five:\n```\n1031, 1058, 1083, 1098\n```\n\nApproximate median as pivot:\n```\n1058\n```\n\nRange of medians of five partitioned with pivot 1058 (depends on method):\n```\nsmall: 1031, 1038, 1027, 1022, 1043, 1048, 1053\npivot: 1058\nlarge: 1063, 1068, 1073, 1078, 1083, 1088, 1093, 1098\n```\n\nThe smaller group has 7 elements. We were looking for the 4th element of 16, so now we look for the 4th element out of 7:\nGroups of five:\n```\n #1    #2\n\n1031  1048\n1038  1053\n1027\n1022\n1043\n```\n\nMedians of groups of five:\n```\n1031, 1048\n```\n\nApproximate median as pivot:\n```\n1031\n```\n\nRange of medians of five partitioned with pivot 1031 (depends on method):\n```\nsmall: 1022, 1027\npivot: 1031\nlarge: 1038, 1043, 1048, 1053\n```\n\nThe smaller part has 2 elements, and the larger has 4, so now we look for the 4 - 2 - 1 = 1st element out of 4:\nMedian of five as pivot:\n```\n1043\n```\n\nRange of medians of five partitioned with pivot 1043 (depends on method):\n```\nsmall: 1038\npivot: 1043\nlarge: 1048, 1053\n```\n\nThe smaller part has only one element, and we were looking for the first element, so we can return the small element 1038.\nAs you will see, 1038 is the exact median of the original 25 median-of-fives, and there are 62 smaller values in the original array of 125:\n```\n1 ~ 27, 1001 ~ 1011, 1013 ~ 1023, 1025 ~ 1037\n```\n\nwhich not only puts it in the 30~70% range, but means it is actually the exact median (note that this is a coincidence of this particular example).\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "pandas DataFrame median for certain columns\r\n                \r\nTrying to figure out how to calculate the median for values of certain columns within a pandas DataFrame. Say for instance I have a DataFrame of 7 columns and 200 rows and I want to extract the numbers contained in columns of index 1-3 (including) and calculate the median for the total of all rows combined; for 3 rows it would be the median for (x+y+z) + (x+y+z) + (x+y+z).\nI've tried:\n```\ndf[\"median\"] = df.apply(lambda x : median(x), df[2:4])\n```\n\nbut it raises the error:\n```\n`TypeError: 'DataFrame' objects are mutable, thus they cannot be hashed\n```\n\nI've also tried:\n```\nx = df[\"column1\"]\ny = df[\"column2\"]\nz = df[\"column3\"]\nmedian_nums = [x,y,z]\n```\n\nbut the list isn't suitable and I'm not managing to extract the numbers themselves from the DataFrame in order to used statistics.median on them. The same error as above is raised\nHelp would be extremely appreciated\n    ", "Answer": "\r\nYou can select before ```\nmedian```\n\n```\ndf['New']=df.iloc[:,2:4].median(axis=1)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Add a Median Method to a List\r\n                \r\nI would like to override the List object in C# in order to add a Median method like Sum or Average. I already found this function:\n\n```\npublic static decimal GetMedian(int[] array)\n{\n    int[] tempArray = array;\n    int count = tempArray.Length;\n\n    Array.Sort(tempArray);\n\n    decimal medianValue = 0;\n\n    if (count % 2 == 0)\n    {\n        // count is even, need to get the middle two elements, add them together, then divide by 2\n        int middleElement1 = tempArray[(count / 2) - 1];\n        int middleElement2 = tempArray[(count / 2)];\n        medianValue = (middleElement1 + middleElement2) / 2;\n    }\n    else\n    {\n        // count is odd, simply get the middle element.\n        medianValue = tempArray[(count / 2)];\n    }\n\n    return medianValue;\n}\n```\n\n\nCan you tell me how to do that?\n    ", "Answer": "\r\nUse an extension method, and make a copy of the inputted array/list.\n\n```\npublic static decimal GetMedian(this IEnumerable<int> source)\n{\n    // Create a copy of the input, and sort the copy\n    int[] temp = source.ToArray();    \n    Array.Sort(temp);\n\n    int count = temp.Length;\n    if (count == 0)\n    {\n        throw new InvalidOperationException(\"Empty collection\");\n    }\n    else if (count % 2 == 0)\n    {\n        // count is even, average two middle elements\n        int a = temp[count / 2 - 1];\n        int b = temp[count / 2];\n        return (a + b) / 2m;\n    }\n    else\n    {\n        // count is odd, return the middle element\n        return temp[count / 2];\n    }\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Excel formula debugging - Median calculation\r\n                \r\nI need help in proper formula formatting/syntax.  I just haven’t been able to debug my formula to calculate a Median.  Here is a working formula that calculates an Average:\n\n```\n=AVERAGEIFS(OFFSET(INDEX(date_city!1:1,MATCH(\"Price Per SF\",date_city!1:1,FALSE)),0,0,COUNTA(INDEX(date_city!1:65521,,MATCH(\"Price Per SF\",date_city!1:1,FALSE))),1), (OFFSET(INDEX(date_city!1:1,MATCH(\"Date of Sale\",date_city!1:1,FALSE)),0,0,COUNTA(INDEX(date_city!1:65521,,MATCH(\"Date of Sale\",date_city!1:1,FALSE))),1)), \">\" & Criteria!$F$4, (OFFSET(INDEX(date_city!1:1,MATCH(\"Date of Sale\",date_city!1:1,FALSE)),0,0,COUNTA(INDEX(date_city!1:65521,,MATCH(\"Date of Sale\",date_city!1:1,FALSE))),1)), \"<\" & Criteria!$G$4)```\n\n\nI need to modify the above so it calculates a Median.  \n\nI’ve tested this simpler formula for proper format and it works:\n\n```\n{=MEDIAN(IF((date_city!$I$2:$I$989>Criteria!$F$4)*(date_city!$I$2:$I$989<Criteria!$G$4),\ndate_city!$E$2:$E$221))}```\n\n\nI need to replace *date_city!$I$2:$I$989* and *date_city!$E$2:$E$221* from the above Median formula with their corresponding code from the Average formula.  \n\nI tried this code, but cannot find my errors.  Probably incorrect parantheses or comma placement.  \n\n```\n=MEDIAN(IF((OFFSET(INDEX(date_city!1:1,MATCH(\"Date of Sale\",date_city!1:1,FALSE)),0,0,COUNTA(INDEX(date_city!1:65521,,MATCH(\"Date of Sale\",date_city!1:1,FALSE))),1)) \">\" & Criteria!$F$4)*(OFFSET(INDEX(date_city!1:1,MATCH(\"Date of Sale\",date_city!1:1,FALSE)),0,0,COUNTA(INDEX(date_city!1:65521,,MATCH(\"Date of Sale\",date_city!1:1,FALSE))),1)) \"<\" & Criteria!$G$4), OFFSET(INDEX(date_city!1:1,MATCH(\"Price Per SF\",date_city!1:1,FALSE)),0,0,COUNTA(INDEX(date_city!1:65521,,MATCH(\"Price Per SF\",date_city!1:1,FALSE))),1)```\n\n\nThanks in advance for any help. \n    ", "Answer": "\r\nFormulaDesk can display your formula in a way that is very easy and quick to understand, rolling-up nested parts together with their results. It should also pinpoint exactly where the error is.\n\n[Disclosure: I am the author of FormulaDesk]\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Function that return the median\r\n                \r\nI want to create a function that returns the median of a field. I'm working with sql 2000.\nI wrote:\n\n```\ncreate function mediana \n(@tabla, @campo)\nreturns int\nas\nbegin\n\ndeclare @Median integer\nreturn  @Median = \n\n(\n   (SELECT MAX(@campo) FROM\n     (SELECT TOP 50 PERCENT dia\n      FROM @tabla\n      ORDER BY @campo) AS t\n    )\n + (SELECT MIN(@campo) FROM\n     (SELECT TOP 50 PERCENT  @campo\n      FROM @tabla ORDER BY @campo DESC) AS b\n    )\n\n) / 2.0 ;\n```\n\n\nBut I get many errors. How can I solve that, also I would like to apply this function to data grouped by other fiels. Would this be possible with this code?\n\nps: I've never created a function in sql before.\n\nthanks\n    ", "Answer": "\r\nWhen passing Table names of Column names as variables, you will end up using Dynamic sql, and you cannot use Dynamic sql inside a User defined Function this leaves you with the only option of stored procedure, \nSince you are returning a value back, OUTPUT parameter is your friend something like this .....\n\n```\nALTER PROCEDURE mediana \n @tabla nvarchar(128)\n,@campo nvarchar(128)\n,@Median DECIMAL(10,2) OUTPUT\nAS\nBEGIN\n   SET NOCOUNT ON;\nDECLARE @Sql NVARCHAR(2000);\n\nSET @Sql = N'SET @Median =  ( SELECT \n                (\n                 (SELECT MAX('+ QUOTENAME(@campo) +') FROM\n                   (SELECT TOP 50 PERCENT '+ QUOTENAME(@campo) +' FROM '+ QUOTENAME(@tabla) \n                 + N' ORDER BY '+ QUOTENAME(@campo) +') AS BottomHalf)\n                 +\n                 (SELECT MIN('+ QUOTENAME(@campo) +') FROM\n                   (SELECT TOP 50 PERCENT '+ QUOTENAME(@campo) +' FROM '+ QUOTENAME(@tabla) \n                 + N' ORDER BY '+ QUOTENAME(@campo) +' DESC) AS TopHalf)\n                ) / 2  )'\n\nEXECUTE sp_executesql @Sql\n                     ,N'@Median DECIMAL(10,2) OUTPUT'\n                     ,@Median OUTPUT\n\nEND\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Replace NaN value with a median?\r\n                \r\nSo I am trying to use Pandas to replace all NaN values in a table with the median across a particular range. I am working with a larger dataset but for example\n```\nnp.random.seed(0)\nrng = pd.date_range('2020-09-24', periods=20, freq='0.2H')\ndf = pd.DataFrame({ 'Date': rng, 'Val': np.random.randn(len(rng)), 'Dist' :np.random.randn(len(rng)) }) \ndf.Dist[df.Dist<=-0.6] = np.nan\ndf.Val[df.Val<=-0.5] = np.nan\n```\n\n\nWhat I want to do is replace the NaN values for Val and Dist with the median value for each hour for that column. I have managed to get the median values in a separate reference table:\n```\ndf.set_index('Date', inplace=True)\ndf = df.assign(Hour = lambda x : x.index.hour)\ndf_val = df[[\"Val\", \"Hour\"]].groupby(\"Hour\").median()\ndf_dist = df[[\"Dist\", \"Hour\"]].groupby(\"Hour\").median()\n```\n\n\nBut now I have tried all of the below commands in various forms and cannot work out how to fill NaN values.\n```\ndf[[\"Val\",\"Hour\"]].mask(df['Val'].isna(), df_val.iloc[df.Hour], inplace=True)\n\ndf.where(df['Val'].notna(), other=df_val[df.Hour],axis = 0)\n\ndf[\"Val\"] = np.where(df['Val'].notna(), df['Val'], df_val(df.Hour))\n\ndf.replace({\"Val\":{np.nan:df_val[df.Hour]}, \"Dist\":{np.nan:df_dist[df.Hour]}})\n```\n\n    ", "Answer": "\r\nYou can use ```\ngroupby.transform```\n and fillna:\n```\ncols = ['Val','Dist']\ndf[cols] =  df[cols].fillna(df.groupby(df.Date.dt.floor('H'))\n                              [cols].transform('median')\n                           )\n```\n\nOutput:\n```\n                  Date       Val      Dist\n0  2020-09-24 00:00:00  1.764052  0.864436\n1  2020-09-24 00:12:00  0.400157  0.653619\n2  2020-09-24 00:24:00  0.978738  0.864436\n3  2020-09-24 00:36:00  2.240893  0.864436\n4  2020-09-24 00:48:00  1.867558  2.269755\n5  2020-09-24 01:00:00  0.153690  0.757559\n6  2020-09-24 01:12:00  0.950088  0.045759\n7  2020-09-24 01:24:00 -0.151357 -0.187184\n8  2020-09-24 01:36:00 -0.103219  1.532779\n9  2020-09-24 01:48:00  0.410599  1.469359\n10 2020-09-24 02:00:00  0.144044  0.154947\n11 2020-09-24 02:12:00  1.454274  0.378163\n12 2020-09-24 02:24:00  0.761038  0.154947\n13 2020-09-24 02:36:00  0.121675  0.154947\n14 2020-09-24 02:48:00  0.443863 -0.347912\n15 2020-09-24 03:00:00  0.333674  0.156349\n16 2020-09-24 03:12:00  1.494079  1.230291\n17 2020-09-24 03:24:00 -0.205158  1.202380\n18 2020-09-24 03:36:00  0.313068 -0.387327\n19 2020-09-24 03:48:00  0.323371 -0.302303\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Mean and Median Vs Summary\r\n                \r\nI'm currently doing a Reproducible Data course on Coursera and one of the questions ask for the Mean and Median of steps per day, I have this but when I confirm it with the summary function, the summary version of Mean and Median is different. I'm running this via knitr \n\nWhy would this be? \n** below is an edit showing all of my script so far including a link to the raw data:\n\n```\n##Download the data You have to change https to http to get this to work in knitr\n\ntarget_url <- \"http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip\"\ntarget_localfile = \"ActivityMonitoringData.zip\"\nif (!file.exists(target_localfile)) {\n  download.file(target_url, destfile = target_localfile) \n}\nUnzip the file to the temporary directory\n\nunzip(target_localfile, exdir=\"extract\", overwrite=TRUE)\nList the extracted files\n\nlist.files(\"./extract\")\n## [1] \"activity.csv\"\nLoad the extracted data into R\n\nactivity.csv <- read.csv(\"./extract/activity.csv\", header = TRUE)\nactivity1 <- activity.csv[complete.cases(activity.csv),]\nstr(activity1)\n## 'data.frame':    15264 obs. of  3 variables:\n##  $ steps   : int  0 0 0 0 0 0 0 0 0 0 ...\n##  $ date    : Factor w/ 61 levels \"2012-10-01\",\"2012-10-02\",..: 2 2 2 2 2 2 2 2 2 2 ...\n##  $ interval: int  0 5 10 15 20 25 30 35 40 45 ...\nUse a histogram to view the number of steps taken each day\n\nhistData <- aggregate(steps ~ date, data = activity1, sum)\nh <- hist(histData$steps,  # Save histogram as object\n          breaks = 11,  # \"Suggests\" 11 bins\n          freq = T,\n          col = \"thistle1\", \n          main = \"Histogram of Activity\",\n          xlab = \"Number of daily steps\")\n\n\nObtain the Mean and Median of the daily steps\n\nsteps <- histData$steps\nmean(steps)\n## [1] 10766\nmedian(steps)\n## [1] 10765\nsummary(histData$steps)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##      41    8840   10800   10800   13300   21200\nsummary(steps)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##      41    8840   10800   10800   13300   21200\nsessionInfo()\n## R version 3.1.1 (2014-07-10)\n## Platform: i386-w64-mingw32/i386 (32-bit)\n## \n## locale:\n## [1] LC_COLLATE=English_Australia.1252  LC_CTYPE=English_Australia.1252   \n## [3] LC_MONETARY=English_Australia.1252 LC_NUMERIC=C                      \n## [5] LC_TIME=English_Australia.1252    \n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n## [1] knitr_1.6\n## \n## loaded via a namespace (and not attached):\n## [1] evaluate_0.5.5 formatR_1.0    stringr_0.6.2  tools_3.1.1\n```\n\n    ", "Answer": "\r\nActually, the answers is correct, you just printing it wrong. You are setting ```\ndigits```\n option somewhere.\n\nPut this before the scripts:\n\n```\noptions(digits=12)\n```\n\n\nAnd you'll have:\n\n```\nmean(steps)\n# [1] 10766.1886792\nmedian(steps)\n# [1] 10765\nsummary(steps)\n#      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. \n#   41.0000  8841.0000 10765.0000 10766.1887 13294.0000 21194.0000 \n```\n\n\nNotice that ```\nsummary```\n use ```\nmax(3, getOption(\"digits\")-3)```\n for how many numbers is printed. So it round it a bit (10766.1887 instead of 10766.1886792).\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating Median in mysqlite\r\n                \r\nI have the following table:\n\nI want to calculate the median mileage per car in one query (SQLite). How do I do that?\nHere's the closest I've come:\n\r\n\r\n```\nSELECT Car, Mileage, ROW_NUMBER() OVER (PARTITION BY Car ORDER BY Mileage) RowNum FROM car_table ORDER BY Car, Mileage;```\n\r\n\r\n\r\n\nMy expected output is:\nCar | Median Mileage\n    ", "Answer": "\r\nYou can do it with window functions ROW_NUMBER(), COUNT() and AVG():\n```\nSELECT DISTINCT Car,\n       AVG(\n         CASE counter % 2\n           WHEN 0 THEN CASE WHEN rn IN (counter / 2, counter / 2 + 1) THEN mileage END \n           WHEN 1 THEN CASE WHEN rn = counter / 2 + 1 THEN mileage END\n         END\n       ) OVER (PARTITION BY car) median \nFROM (        \n  SELECT *,\n         ROW_NUMBER() OVER (PARTITION BY car ORDER BY mileage) rn,\n         COUNT(*) OVER (PARTITION BY car) counter\n  FROM car_table\n)  \n```\n\nOr:\n```\nSELECT DISTINCT Car,\n       AVG(CASE WHEN rn IN (counter / 2 + 1, counter / 2 + 1 - (counter % 2 = 0)) THEN mileage END) \n       OVER (PARTITION BY car) median \nFROM (        \n  SELECT *,\n         ROW_NUMBER() OVER (PARTITION BY car ORDER BY mileage) rn,\n         COUNT(*) OVER (PARTITION BY car) counter\n  FROM car_table\n)\n```\n\nSee the demo.\nResults:\n\n\n\n\nCar\nmedian\n\n\n\n\nHonda\n11.85\n\n\nToyota\n9.8\n\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "how to count median properly in mysql 5.7\r\n                \r\nthis is my fiddle https://dbfiddle.uk/?rdbms=mysql_5.7&fiddle=7946871d9c25cd8914353c70fde1fe8d\nso this is my queries\nselect count(user_id) as itung, user_Id from\n```\n(SELECT t1.user_id, \n       t1.createdAt cretecompare1, \n       t2.createdAt cretecompare2,\n       DATEDIFF(t2.createdAt, t1.createdAt) diff\n-- table for a transaction\nFROM test t1\n-- table for prev. transaction\nJOIN test t2 ON t1.user_id = t2.user_id \n            AND t1.createdAt < t2.createdAt\n            AND 7 NOT IN (t1.status_id, t2.status_id)\nJOIN (SELECT t3.user_id\n      FROM test t3\n      WHERE t3.status_id != 7\n      GROUP BY t3.user_id\n      HAVING SUM(t3.createdAt < '2020-04-01') > 1\n         AND SUM(t3.createdAt BETWEEN '2020-02-01' AND '2020-04-01')) t4 ON t1.user_id = t4.user_id\nWHERE NOT EXISTS (SELECT NULL\n                   FROM test t5\n                   WHERE t1.user_id = t5.user_id\n                     AND t5.status_id != 7\n                     AND t1.createdAt < t5.createdAt\n                     AND t5.createdAt < t2.createdAt)\nHAViNG cretecompare2  BETWEEN '2020-02-01' AND '2020-04-01') aa\ngroup by user_Id\noutput table:\n    +--------+---------+\n    |  itung | user_Id |\n    +--------+---------+\n    |      1 |      13 |\n    |      2 |      14 |\n    +--------+---------+\n```\n\nbased on that table i want to find out the max(itung), min(itung), and the median(itung), with this query\n```\nselect max(itung), min(itung), format(avg(itung), 2),  IF(count(*)%2 = 1, CAST(SUBSTRING_INDEX(SUBSTRING_INDEX( GROUP_CONCAT(itung ORDER BY itung SEPARATOR ',')\n, ',', 50/100 * COUNT(*)), ',', -1) AS DECIMAL), ROUND((CAST(SUBSTRING_INDEX(SUBSTRING_INDEX\n( GROUP_CONCAT(itung ORDER BY itung SEPARATOR ','), ',', 50/100\n* COUNT(*) + 1), ',', -1) AS DECIMAL) + CAST(SUBSTRING_INDEX(SUBSTRING_INDEX\n( GROUP_CONCAT(itung ORDER BY itung SEPARATOR ','), ',', 50/100\n* COUNT(*)), ',', -1) AS DECIMAL)) / 2)) as median from\n(select count(user_id) as itung, user_Id from \n(SELECT t1.user_id, \n       t1.createdAt cretecompare1, \n       t2.createdAt cretecompare2,\n       DATEDIFF(t2.createdAt, t1.createdAt) diff\n-- table for a transaction\nFROM test t1\n-- table for prev. transaction\nJOIN test t2 ON t1.user_id = t2.user_id \n            AND t1.createdAt < t2.createdAt\n            AND 7 NOT IN (t1.status_id, t2.status_id)\nJOIN (SELECT t3.user_id\n      FROM test t3\n      WHERE t3.status_id != 7\n      GROUP BY t3.user_id\n      HAVING SUM(t3.createdAt < '2020-04-01') > 1\n         AND SUM(t3.createdAt BETWEEN '2020-02-01' AND '2020-04-01')) t4 ON t1.user_id = t4.user_id\nWHERE NOT EXISTS (SELECT NULL\n                   FROM test t5\n                   WHERE t1.user_id = t5.user_id\n                     AND t5.status_id != 7\n                     AND t1.createdAt < t5.createdAt\n                     AND t5.createdAt < t2.createdAt)\nHAViNG cretecompare2  BETWEEN '2020-02-01' AND '2020-04-01') aa\ngroup by user_Id) ab\n\noutput table:\n+------------+------------+-----------------------+--------+\n| max(itung) | min(itung) | format(avg(itung), 2) | median |\n+------------+------------+-----------------------+--------+\n|          2 |          1 |                  1.50 |      2 |\n+------------+------------+-----------------------+--------+\n```\n\nyou know that's wrong query for the median because median should be 1,5 not 2. where my wrong at in my median query?\n    ", "Answer": "\r\nYou have ROUND() there to round the reported median to an integer.  If you don't want that, remove it:\n```\nselect max(itung), min(itung), format(avg(itung), 2),  IF(count(*)%2 = 1, CAST(SUBSTRING_INDEX(SUBSTRING_INDEX( GROUP_CONCAT(itung ORDER BY itung SEPARATOR ',') , ',', 50/100 * COUNT(*)), ',', -1) AS DECIMAL), (CAST(SUBSTRING_INDEX(SUBSTRING_INDEX ( GROUP_CONCAT(itung ORDER BY itung SEPARATOR ','), ',', 50/100 * COUNT(*) + 1), ',', -1) AS DECIMAL) + CAST(SUBSTRING_INDEX(SUBSTRING_INDEX ( GROUP_CONCAT(itung ORDER BY itung SEPARATOR ','), ',', 50/100 * COUNT(*)), ',', -1) AS DECIMAL)) / 2) as median\n```\n\nor leave in the round and add a number of decimal places to round to, here 3:\n```\nselect max(itung), min(itung), format(avg(itung), 2),  IF(count(*)%2 = 1, CAST(SUBSTRING_INDEX(SUBSTRING_INDEX( GROUP_CONCAT(itung ORDER BY itung SEPARATOR ',') , ',', 50/100 * COUNT(*)), ',', -1) AS DECIMAL), ROUND((CAST(SUBSTRING_INDEX(SUBSTRING_INDEX ( GROUP_CONCAT(itung ORDER BY itung SEPARATOR ','), ',', 50/100 * COUNT(*) + 1), ',', -1) AS DECIMAL) + CAST(SUBSTRING_INDEX(SUBSTRING_INDEX ( GROUP_CONCAT(itung ORDER BY itung SEPARATOR ','), ',', 50/100 * COUNT(*)), ',', -1) AS DECIMAL)) / 2, 3)) as median\n```\n\nBe aware that looking up the median values from a GROUP_CONCAT comma-separated list of all the values only works if there are not too many rows, since GROUP_CONCAT will be truncated at @@group_concat_max_len, which defaults to 1024 characters on MySQL or on MariaDB before 10.2.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "pandas DataFrame median for certain columns\r\n                \r\nTrying to figure out how to calculate the median for values of certain columns within a pandas DataFrame. Say for instance I have a DataFrame of 7 columns and 200 rows and I want to extract the numbers contained in columns of index 1-3 (including) and calculate the median for the total of all rows combined; for 3 rows it would be the median for (x+y+z) + (x+y+z) + (x+y+z).\nI've tried:\n```\ndf[\"median\"] = df.apply(lambda x : median(x), df[2:4])\n```\n\nbut it raises the error:\n```\n`TypeError: 'DataFrame' objects are mutable, thus they cannot be hashed\n```\n\nI've also tried:\n```\nx = df[\"column1\"]\ny = df[\"column2\"]\nz = df[\"column3\"]\nmedian_nums = [x,y,z]\n```\n\nbut the list isn't suitable and I'm not managing to extract the numbers themselves from the DataFrame in order to used statistics.median on them. The same error as above is raised\nHelp would be extremely appreciated\n    ", "Answer": "\r\nYou can select before ```\nmedian```\n\n```\ndf['New']=df.iloc[:,2:4].median(axis=1)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median for a sequency with missing values in R\r\n                \r\nI’m trying to do a median like a function, for vectors with even and odd numbers (related to quantities of observations – the calculating method changes). I need to include an option for missing values as well. How can I do this? I need to do this without to use the ready median(x) in R. Is it possible? I have put bellow how I tried to do:\n\n```\nx<-c(1,2,3)\nfunction (x, na.rm = FALSE) {\nx <- x[!is.na(x)]\n\nreturn(mediana = median(x))\n```\n\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Sorting and Median with Arrays in Javascript\r\n                \r\nI have been working on this code, and the goal is to sort out the numbers in the array, and then find the median. My median isn't outputting correctly, and when I try to just see what is in array[0], it never has the right value. I'm not exactly sure where I messed up.\n\nCode: \n\n```\nvar array = [];\n\nwindow.onload = function (){\n   var answer = '';\n   var median = 0;\n   for (var i = 0; i < 8; i++) {\n   var rand = Math.floor(Math.random() * 101);\n\n   array.push(rand);\n   array.sort(function(a, b){return a-b});\n\n\n   answer = answer + array[i] + \" \";\n\n   }\nmedian = ((array[3] + array[4]) /2);\ndocument.getElementById(\"result\").innerHTML = answer + \"<br />\" + median;\n\n}\n```\n\n    ", "Answer": "\r\nI would suggest first moving your loops ending. Currently you are sorting every single time you add a new number to the array. This means two things : you are wasting computation power on something you should only do once  and when you 'log' your result in the line ```\nanswer = answer + array[i] + \" \";```\n its constantly changing since the order is changing. Your functions logic is correct so by making the change below you should get the result you want.\n\n```\n    var array = [];\n\n    window.onload = function (){\n        var answer = '';\n        var median = 0;\n        //Loop is simplified to just push a random value\n        for (var i = 0; i < 8; i++) {\n            array.push(Math.floor(Math.random() * 101));\n        }\n        //Sort is outside of the loop;\n        array.sort(function(a, b){return a-b});\n        //Median is outside of the loop\n        median = ((array[3] + array[4]) /2);\n        //answer is outside of the loop (if you don't know reduce look at the link below)\n        answer = array.reduce( function ( answer , value ) {\n           return answer + ',' + value;\n        } );\n        // put into the dom\n        document.getElementById(\"result\").innerHTML = answer + \"<br />\" + median;\n\n    }\n```\n\n\nIf you need help with this feel free to message me, also checkout the documentation for reduce HERE.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Replace NaN value with a median?\r\n                \r\nSo I am trying to use Pandas to replace all NaN values in a table with the median across a particular range. I am working with a larger dataset but for example\n```\nnp.random.seed(0)\nrng = pd.date_range('2020-09-24', periods=20, freq='0.2H')\ndf = pd.DataFrame({ 'Date': rng, 'Val': np.random.randn(len(rng)), 'Dist' :np.random.randn(len(rng)) }) \ndf.Dist[df.Dist<=-0.6] = np.nan\ndf.Val[df.Val<=-0.5] = np.nan\n```\n\n\nWhat I want to do is replace the NaN values for Val and Dist with the median value for each hour for that column. I have managed to get the median values in a separate reference table:\n```\ndf.set_index('Date', inplace=True)\ndf = df.assign(Hour = lambda x : x.index.hour)\ndf_val = df[[\"Val\", \"Hour\"]].groupby(\"Hour\").median()\ndf_dist = df[[\"Dist\", \"Hour\"]].groupby(\"Hour\").median()\n```\n\n\nBut now I have tried all of the below commands in various forms and cannot work out how to fill NaN values.\n```\ndf[[\"Val\",\"Hour\"]].mask(df['Val'].isna(), df_val.iloc[df.Hour], inplace=True)\n\ndf.where(df['Val'].notna(), other=df_val[df.Hour],axis = 0)\n\ndf[\"Val\"] = np.where(df['Val'].notna(), df['Val'], df_val(df.Hour))\n\ndf.replace({\"Val\":{np.nan:df_val[df.Hour]}, \"Dist\":{np.nan:df_dist[df.Hour]}})\n```\n\n    ", "Answer": "\r\nYou can use ```\ngroupby.transform```\n and fillna:\n```\ncols = ['Val','Dist']\ndf[cols] =  df[cols].fillna(df.groupby(df.Date.dt.floor('H'))\n                              [cols].transform('median')\n                           )\n```\n\nOutput:\n```\n                  Date       Val      Dist\n0  2020-09-24 00:00:00  1.764052  0.864436\n1  2020-09-24 00:12:00  0.400157  0.653619\n2  2020-09-24 00:24:00  0.978738  0.864436\n3  2020-09-24 00:36:00  2.240893  0.864436\n4  2020-09-24 00:48:00  1.867558  2.269755\n5  2020-09-24 01:00:00  0.153690  0.757559\n6  2020-09-24 01:12:00  0.950088  0.045759\n7  2020-09-24 01:24:00 -0.151357 -0.187184\n8  2020-09-24 01:36:00 -0.103219  1.532779\n9  2020-09-24 01:48:00  0.410599  1.469359\n10 2020-09-24 02:00:00  0.144044  0.154947\n11 2020-09-24 02:12:00  1.454274  0.378163\n12 2020-09-24 02:24:00  0.761038  0.154947\n13 2020-09-24 02:36:00  0.121675  0.154947\n14 2020-09-24 02:48:00  0.443863 -0.347912\n15 2020-09-24 03:00:00  0.333674  0.156349\n16 2020-09-24 03:12:00  1.494079  1.230291\n17 2020-09-24 03:24:00 -0.205158  1.202380\n18 2020-09-24 03:36:00  0.313068 -0.387327\n19 2020-09-24 03:48:00  0.323371 -0.302303\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "cannot convert ‘char*’ to ‘int*’ for argument ‘1’ to ‘int median(int*, int)’ array2 = median(array,size);\r\n                \r\nMy problem is as I specify in the title: test_median.cpp: \n\n\n  In function ‘int main()’: test_median.cpp:26:27: error: cannot convert\n  ‘char*’ to ‘int*’ for argument ‘1’ to ‘int median(int*, int)’\n\n\n```\narray2 = median(array,size);\n```\n\n\nSo here is my code. This is the tester code; \n\n```\n#include <iostream>\n#include <cmath>\n#include \"IpFunctions.h\"\n\nusing namespace std;\n\nint main()\n{\n\nint size;\ncout<< \"size gir\" <<endl;\ncin >> size;\n\nint i;\nchar array[size];\n\ncout<< \"değerleri gir\"<<endl;\n\nfor (i=0;i<size;i=i+1)\n{\ncin >> array[i];\n}\n\nchar array2[size];\n\narray2 = median(array,size);\n\ncout<<\"array2 = \"<<array2<<endl;\n\nreturn 0;\n}\n```\n\n\nThis is the median function code:\n\n```\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint median(char array[], int size)\n{\nint i = 0;\nint m,n;\nwhile (i<size)\n{\n    if (array[i]>array[i+1])\n    {\n    m = array[i]; n = array[i+1];\n    array[i] = n; array[i+1] = m;\n    i=i+1;\n    }\n    else\n    {\n    i=i+1;\n    }\n}\n\nreturn *array;\n\n}\n```\n\n\nAnd finally \"IpFunctions.h\" header:\n\n```\n// this is just a headerfile that you add your Image processing functions' prototypes.\n// when testing your functions with a main function\n// main needs a prototype of the function\n\n//Image medianfiltering(Image &inimg, const int size );\nint median(int array[],int size);\n\n// when you type a function add the header here !!! \n// such as \n// Image negative(Image &inimg);\n```\n\n\nSo I just wanted to make a function to take the median of an array and return that array.\n    ", "Answer": "\r\nin the header \n\n```\nint median(int array[],int size);\n```\n\n\nin the .cpp file\n\n```\nint median(char array[], int size)\n```\n\n\nyour main is trying to invoke the first one (its the only one it knows about)\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating Median in mysqlite\r\n                \r\nI have the following table:\n\nI want to calculate the median mileage per car in one query (SQLite). How do I do that?\nHere's the closest I've come:\n\r\n\r\n```\nSELECT Car, Mileage, ROW_NUMBER() OVER (PARTITION BY Car ORDER BY Mileage) RowNum FROM car_table ORDER BY Car, Mileage;```\n\r\n\r\n\r\n\nMy expected output is:\nCar | Median Mileage\n    ", "Answer": "\r\nYou can do it with window functions ROW_NUMBER(), COUNT() and AVG():\n```\nSELECT DISTINCT Car,\n       AVG(\n         CASE counter % 2\n           WHEN 0 THEN CASE WHEN rn IN (counter / 2, counter / 2 + 1) THEN mileage END \n           WHEN 1 THEN CASE WHEN rn = counter / 2 + 1 THEN mileage END\n         END\n       ) OVER (PARTITION BY car) median \nFROM (        \n  SELECT *,\n         ROW_NUMBER() OVER (PARTITION BY car ORDER BY mileage) rn,\n         COUNT(*) OVER (PARTITION BY car) counter\n  FROM car_table\n)  \n```\n\nOr:\n```\nSELECT DISTINCT Car,\n       AVG(CASE WHEN rn IN (counter / 2 + 1, counter / 2 + 1 - (counter % 2 = 0)) THEN mileage END) \n       OVER (PARTITION BY car) median \nFROM (        \n  SELECT *,\n         ROW_NUMBER() OVER (PARTITION BY car ORDER BY mileage) rn,\n         COUNT(*) OVER (PARTITION BY car) counter\n  FROM car_table\n)\n```\n\nSee the demo.\nResults:\n\n\n\n\nCar\nmedian\n\n\n\n\nHonda\n11.85\n\n\nToyota\n9.8\n\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median filter with RenderScript on Android\r\n                \r\nI'm taking my first steps into image processing with RenderScript. \nNow I'm trying to implement a Median filter for Android with it.\nBasically what I try to do with it is: \nIt gets an image in bitmap format, runs a 3x3 filter for every pixel with its 8 neighbours (without edge cases), calculates the median for each color channel and sets the output pixel accordingly.\n\nI've tried if it works with a simple invert renderscript like this:\n\n```\nuchar4 RS_KERNEL invert(uchar4 in, uint32_t x, uint32_t y) {\n  uchar4 out = in;\n  out.r = 255 - in.r;\n  out.g = 255 - in.g;\n  out.b = 255 - in.b;\n  return out;\n}\n```\n\n\nand it works fine.\nBut when I change the RenderScript to calculate the median I just got a black picture output.\n\nHere's the RenderScript code:\n\n```\n#pragma version(1)\n#pragma rs_fp_relaxed\n#pragma rs java_package_name(com.google.android.GoogleCamera)\n\n#include \"rs_debug.rsh\"\n\nrs_allocation input;\nuint32_t width;\nuint32_t height;\n\nstatic uchar medi(uchar colors[]) {\n    //sorting just to half\n    for(int i = 0; i < 5; i++){\n        int minIndex = i;\n        uchar minValue = colors[i];\n        //loop until end\n        for(int j = i+1; j < 9; j++){\n            if (colors[j] < minValue) {\n                minIndex = j;\n                minValue = colors[j];\n                //swap\n                colors[j] = colors[i];\n                colors[i] = minValue;\n            }\n        }\n    }\n    return colors[4];\n}\n\nuchar4 __attribute__((kernel)) median(uchar4 in, uint32_t x, uint32_t y) {\n    uchar4 out = in;\n\n    //edge\n    if (x == 0 || x == width || y == 0 || y == height)\n        return out;\n\n    //all surronding pixels (TopLeft .. BottomRight)\n    uchar4 tl = rsGetElementAt_uchar4(input, x-1, y+1);\n    uchar4 tm = rsGetElementAt_uchar4(input, x, y+1);\n    uchar4 tr = rsGetElementAt_uchar4(input, x+1, y+1);\n    uchar4 l = rsGetElementAt_uchar4(input, x-1, y);\n    uchar4 r = rsGetElementAt_uchar4(input, x+1, y);\n    uchar4 bl = rsGetElementAt_uchar4(input, x-1, y-1);\n    uchar4 bm = rsGetElementAt_uchar4(input, x, y-1);\n    uchar4 br = rsGetElementAt_uchar4(input, x+1, y-1);\n\n    //array for each color channel\n    uchar reds[] = {tl.r, tm.r, tr.r, l.r, r.r, bl.r, bm.r, br.r, in.r};\n    uchar greens[] = {tl.g, tm.g, tr.g, l.g, r.g, bl.g, bm.g, br.g, in.g};\n    uchar blues[] = {tl.b, tm.b, tr.b, l.b, r.b, bl.b, bm.b, br.b, in.b};\n    uchar alphas[] = {tl.a, tm.a, tr.a, l.a, r.a, bl.a, bm.a, br.a, in.a};\n\n    //get median values\n    out.r = medi(reds);\n    out.g = medi(greens);\n    out.b = medi(blues);\n    out.a = medi(alphas);\n\n    return out;\n}\n```\n\n\nand just in case the invoking java part:\n\n```\nprivate static Runnable runMedian(final Bitmap original, final File file) {\n        return new Runnable() {\n            @Override\n            public void run() {\n                //Create new bitmap\n                Bitmap bitmap = original.copy(original.getConfig(), true);\n\n                //Create renderscript\n                RenderScript rs = RenderScript.create(CameraActivity.staticContext);\n\n                //Create allocation from Bitmap\n                Allocation allocationA = Allocation.createFromBitmap(rs, bitmap);\n\n                //Create allocation with same type\n                Allocation allocationB = Allocation.createTyped(rs, allocationA.getType());\n\n                //Create script from rs file\n                ScriptC_median medianScript = new ScriptC_median(rs);\n\n                medianScript.set_input(allocationA);\n                medianScript.set_width(original.getWidth());\n                medianScript.set_height(original.getWidth());\n                medianScript.forEach_median(allocationA, allocationB);\n\n                //Copy script result into bitmap\n                allocationB.copyTo(bitmap);\n\n                //Destroy everything to free memory\n                allocationA.destroy();\n                allocationB.destroy();\n                medianScript.destroy();\n                rs.destroy();\n\n                //write resulting bitmap to file\n                writeFile(file, bitmap, \"median\");\n            }\n        };\n    }\n```\n\n\nI hope somebody who knows a little bit more can help me out.\nBest wishes\n    ", "Answer": "\r\nYou may need to revise your handling of the edges: the index x runs from 0 to width-1, so the edge is at width-1 (and height-1).\n\nIn the java part, ```\nmedianScript.set_height(original.getWidth());```\n should probably read ```\noriginal.getHeight()```\n unless width and height are the same.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find median between 2 dates\r\n                \r\nAnyone know how I can change the Total Median near bottom to show an average of the median instead?  For some reason, the Total Median is always 100.  Not sure what I should do.\n\nThanks in advance for any ideas!  Current results also below.\n\n```\nWITH CTE AS (\n    SELECT DISTINCT c.CaseID AS CaseID,\n        DATEDIFF(d, c.CaseAddDt, coip.DispoDt) AS DaysApart\n    ,   DATEPART(month,c.CaseAddDt) AS [Month]\n    ,   DATEPART(year,c.CaseAddDt) AS [Year]\n    ,   CAST(DATEPART(year,c.CaseAddDt) AS varchar) + '|' + CASE WHEN DATEPART(month,c.CaseAddDt) IN (10,11,12) THEN CAST(DATEPART(month,c.CaseAddDt) AS varchar) ELSE '0' + CAST(DATEPART(month,c.CaseAddDt) AS varchar) END AS Srt\n    FROM jw50_Case c\n    JOIN jw50_CaseInvPers def ON def.CaseID = c.CaseID\n    AND def.InvolveTypeMasterCode = 1\n    JOIN\n        jw50_CountInvPers coip ON coip.CaseID = c.CaseID\n        AND coip.CaseInvPersID = def.CaseInvPersID\n        AND coip.DispoCode IN ('CODE','CODE')  \n        AND coip.CountNum > 0\n    OUTER APPLY (\n        SELECT TOP 1 caz.CaseAgencyID\n        FROM jw50_CaseAgency caz\n        WHERE caz.CaseID = c.CaseID\n        AND caz.AgencyCode = 'ABC'\n        AND caz.NumberTypeCode IN ('i#','in#')) caz\n    WHERE\n        EXISTS (SELECT 1 FROM jw50_CaseAttributes ca WHERE ca.CaseID = c.CaseID AND ca.CaseAttributeCode = 'oa7')\n    AND caz.CaseAgencyID IS NOT NULL\n    AND c.CaseStatusCode <> 'AAA'\n    AND c.CaseAddDt BETWEEN '01/01/2017' AND '08/01/2017'\n    AND c.CaseAddDt <= coip.DispoDt) \n\nSELECT a.CaseID,\n    a.Month\n,   a.Year\n,   a.DaysApart\n,   a.Srt\n,   PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY a.DaysApart) OVER (PARTITION BY a.Month, a.Year) AS MonMedian\n,   PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY a.DaysApart) OVER (PARTITION BY 1) AS TotalMedian\nFROM CTE a\n```\n\n\nResults:\n\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Confidence Intervals for Above Median and Below Median Differences of Same Data Set?\r\n                \r\nMake a 95% confidence interval for the difference in earnings between\nabove median height men and below median height men.\n\nWhat programs/scripts would be helpful for a problem such as this in R?\n\nWas able to use commands like:\n\n```\n# Use this command to calculate 95% confidence interval for difference in \n# height means between males and females\nt.test(height ~ sex, data=CPS, conf.level=.95)\n```\n\n\nBut cannot think of a way to find the confidence interval of below median and above median heights for the same dataset. Any tips? Sorry, new to R.\n    ", "Answer": "\r\n(Hints/outline of solution because this is homework.)\n\nYou don't make it clear what data you have. What are the variables and other information that's available?\n\nMy guess is (it's not stated clearly) you're intended to do this on the sample median height rather than some externally determined value for median height.\n\nYou'll need to construct a factor (at least implicitly) that indicates if height is greater than median height.\n\n[Unfortunately, this invalidates the proposed test/confidence interval in the question -- see several posts on stats.stackexchange which discuss the issue -- but let's ignore that for now and treat it as a pure R-code issue.]\n\nYou'll then need to construct a confidence interval, perhaps using the example code in your question as a template.\n\nNote that you're working with a subset of all people so you'll have to subset your data at some point, either before calling a function to do the CI, or within it. (That is, there are three variables in this problem, a response, a factor for comparing the response across and a variable for subsetting on.)\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median filter in image processing\r\n                \r\nEDIT: I am not allowed to use any third part library which directly apply median filter to an image.\nI am trying to implement Median filter in Java. I am using    following logic .\n```\npackage com.start;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.nio.file.Files;\nimport java.util.Arrays;\n\npublic class MedianFilter {\n public static  void main(String ...args) throws  Exception{\n     MedianFilter md= new MedianFilter();\n     md.applyMedianFilter();\n }\n\npublic void applyMedianFilter()  throws  Exception{\n    //input image is 256*230\n    File ip = new File(\"G:\\\\ct.raw\");\n    File op = new File(\"G:\\\\ctoutput.raw\");\n      FileOutputStream stream = null;\n        stream = new FileOutputStream(op);\n        byte[] fileContent = Files.readAllBytes(ip.toPath());\n        int[] resultArr = new int[fileContent.length];\n        for (int i = 0; i < fileContent.length; i++) {\n            resultArr[i] = fileContent[i] & 0xff;\n        }\n        int[][] pixels = new int[256][230];\n        for (int i = 0; i < 256; i++) {\n            for (int j = 0; j < 230; j++) {\n                pixels[i][j] = resultArr[(j * 230) + i];\n            }\n        }\n        int[] data = new int[9];\n        for (int i = 0; i < 256; i++) {\n            for (int j = 0; j < 230; j++) {\n                int counter = 0;\n                //median filter of size 3*3\n                for (int k = -1; k <= 1; k++) {\n                    for (int l = -1; l <= 1; l++) {\n                        {\n                            data[counter] = pixels[i + k][j + l];\n                            counter++;\n                        }\n                    }\n                }\n                Arrays.sort(data);\n                stream.write(data[4]);\n            }\n        }\n        stream.close();\n}\n\n}\n```\n\nBut  I am not getting expected  output.  Expected output (3rd image)\n\nActual Image\n\nI don`t what causing this image to blur. Is there any other way to implement median filter  using java\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Parallel Median Filter\r\n                \r\nSo I've been working on a median filter* (comparing sequential to parallel, since I'm learning how to code concurrently), but the parallel version runs indefinitely for a large input (about 100k; it runs fine for less).  \n\nIn essence, the code takes in a file, filters it given a certain window size, then writes it to a new file. New to parallel programming, so I'm kind of lost when it comes to what might be wrong here.\n\n```\n//import everything\n\npublic class SecondMedianFilter extends RecursiveAction {\n    float[] numbers;\n    static int filter;\n    int window;\n    int length;\n    int lo;\n    int hi;\n\n    static final int SEQUENTIAL_CUTOFF = 500;\n\n\n    float[] outArray;\n\n    public SecondMedianFilter(float[] numbers, int filter, int lo, int hi) {\n        this.numbers = numbers;\n        this.filter = filter;\n        this.lo = lo;\n        this.hi = hi;\n        length = numbers.length;\n        window = (filter - 1) / 2;\n    }\n\n    public float[] getRes() {\n        return result;\n    }\n\n\n    protected void compute() {\n\n        result = new float[length];\n\n        if ((hi - lo) < SEQUENTIAL_CUTOFF) {\n\n            for (int a = lo; a < hi; a++) {\n\n\n                for (int i = 0; i < length; i++) {\n                    if (i < window || i >= length - window) {\n                        result[i] = numbers[i];\n                    } else {\n                        float[] subArray = Arrays.copyOfRange(numbers, i - window, i + window + 1);\n                        Arrays.sort(subArray);\n                        float median = subArray[(subArray.length / 2)];\n                        result[i] = median;\n\n                    }\n                }\n\n            }\n        } else {\n\n            SecondMedianFilter left = new SecondMedianFilter(filtered, filter, lo, (hi + lo) / 2);\n            SecondMedianFilter right = new SecondMedianFilter(filtered, filter, (hi + lo) / 2, hi);\n            left.fork();\n            right.compute();\n            left.join();\n        }\n    }\n\n\n    public static void main(String[] args) {\n        //reads in a file, processes each line into an array of floats that\n        // I call inArray, which gets filtered into outIntArray\n\n\n        float[] outIntArray = new float[inArray.length];\n\n        if (window < 3 || window > 21 || window % 2 == 0) {\n            System.out.println(\"Window size error.\");\n        } else {\n\n            SecondMedianFilter smf = new SecondMedianFilter(inArray, window, 0, inArray.length);\n            smf.compute();\n            outIntArray = smf.getRes();\n\n\n            // loops through outIntArray and writes to file.\n        }//end main           \n    }\n}\n```\n\n\nDoing it sequentially appears to work (under a second for about 1 000 000 elements), and yet my concurrent version takes almost 4 just to do 10 000 elements. As I said, brand new to parallel programming, so I'm quite lost. Is there an approach to doing a median filter in parallel that I'm missing?\n\n(* Median filter = take a certain window of the array, sort them and replace the original element at that index with the median of the sorted sub-array; for example: 2, 80, 6, 3, 1 results in 2, 6, 6, 3, 1.)\n\n*For example: \n\n```\nTaking in this file: \n5.0\n13.2\n-2.6\n22.3\n12.4\n-0.21\n23.1\n-0.2454\n```\n\n\nIt'll read that into an array [5.0, 13.2, -2.6, 22.3, 12.4, -0.21, 23.1, -0.2454]\n    With a window size of, say, 3.  In order to be applicable for filtering, an element must have n elements before it and n elements after it, where n = (window - 1)/2; hence, an element, in the case of window = 3, must have 1 element on either side of it.  If it doesn't satisfy that condition, that element is taken as-is. \n\nSo 5.0 will remain, given that it doesn't have an element before it. But 13.2 satisfies the condition - hence, a sub-array is taken [5.0, 13.2, -2.6]. This array is then sorted (using .sort(): [-2.6, 5.0, 13.2]), then the median is taken to be 5.0. 13.2 is subsequently replaced with 5.0 in the final array, which now looks like [5.0, 5.0,...]. \n\nNext it moves on to -2.6 - it has an element before and one after, so the sub-array [-2.6, 22.3, 12.4] is taken, sorted, and the median of 12.4 is added to the final array: [5.0, 5.0, 12.4,...]. It repeats this process until all elements in the original array have been visited. It then writes the final array to a file, but this isn't particularly relevant (unless this can be done in parallel somehow - which I doubt, but as I said: complete noob here). \n    ", "Answer": "\r\nYou're processing is totally parallizable. Indeed you can compute the median filter for every single subset of elements (because you don't change the content of the original array in your calculations). So, yes, you can do it in parallel. \n\nSaid this, even if I don't know all the details of the RecursiveAction, I would say that you miss the whole threads part. I've checked a bit and any recursive action should be invoked by an ForkJoinPool class. This one then handles the threads and fork/join them. \n\nFurthmore, splitting the operations on right and left (with two different calls) requires that you fork and join both them later. \n\nI expect something like this to have a working configuration:\n\n```\npublic class SecondMedianFilter extends RecursiveAction {\n... \n\nprotected void compute() {\n\n    result = new float[length];\n\n    if ((hi - lo) < SEQUENTIAL_CUTOFF) {\n\n        for (int a = lo; a < hi; a++) {\n\n\n            for (int i = 0; i < length; i++) {\n                if (i < window || i >= length - window) {\n                    result[i] = numbers[i];\n                } else {\n                    float[] subArray = Arrays.copyOfRange(numbers, i - window, i + window + 1);\n                    Arrays.sort(subArray);\n                    float median = subArray[(subArray.length / 2)];\n                    result[i] = median;\n\n                }\n            }\n\n        }\n    } else {\n\n        SecondMedianFilter left = new SecondMedianFilter(filtered, filter, lo, (hi + lo) / 2);\n        SecondMedianFilter right = new SecondMedianFilter(filtered, filter, (hi + lo) / 2, hi);\n        left.fork();\n        //CODE CHANGES FROM HERE\n        right.fork();\n        //right.compute(); <- IS IMPLICIT IN THE FORK \n        left.join();\n        right.join();\n        //TO HERE\n    }\n}\n\n\npublic static void main(String[] args) {\n    //reads in a file, processes each line into an array of floats that\n    // I call inArray, which gets filtered into outIntArray\n\n\n    float[] outIntArray = new float[inArray.length];\n\n    if (window < 3 || window > 21 || window % 2 == 0) {\n        System.out.println(\"Window size error.\");\n    } else {\n        // CODE CHANGES FROM HERE\n        ForkJoinPool pool = new ForkJoinPool(); // WHO HANDLES THE THREADS \n        SecondMedianFilter smf = new SecondMedianFilter(inArray, window, 0, inArray.length);\n        //smf.compute(); <- DUTY OF THREAD POOL\n        pool.invoke(smf); //  START OF PROCESSING \n        outIntArray = smf.getRes();\n\n\n        // loops through outIntArray and writes to file.\n    }//end main           \n}\n```\n\n\n}\n\nI'll provide you two links, they'll explain enough in detail how the whole process works (where one shows both the parallel and sequential approachs).\n\nhttp://www.concretepage.com/java/jdk7/example-of-recursiveaction-in-java\n\nhttp://www.logicbig.com/how-to/java/fork-and-join-recursive-action/\n\nEDIT\nI've not checked how you're algorithm works (I expect that it splits the array in two up to when it comes to to a bound case), so I've just added pieces of code according to what you've written. \n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Parallel computation of the median of a large array\r\n                \r\nI got asked this question once and still haven't been able to figure it out:\n\nYou have an array of ```\nN```\n integers, where ```\nN```\n is large, say, a billion. You want to calculate the median value of this array. Assume you have ```\nm+1```\n machines (```\nm```\n workers, one master) to distribute the job to. How would you go about doing this? \n\nSince the median is a nonlinear operator, you can't just find the median in each machine and then take the median of those values.\n    ", "Answer": "\r\nDepending on the Parallel Computation Model, algorithms could vary. (Note: the pdf linked to in previous sentence just contains some of the many possible ones).\n\nFinding the median is a special case of finding the ith element. This problem is called 'selection problem', so you need to search the web for parallel selection.\n\nHere is one paper (unfortunately, not free) which might be useful: Parallel Selection Algorithms With Analysis on Clusters.\n\nAnd google's first link for the query \"Parallel Selection\" gives: http://www.umiacs.umd.edu/research/EXPAR/papers/3494/node18.html which actually uses the median of medians for the general problem and not just median finding.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "pandas find median after group by\r\n                \r\n\ndf.head(10).to_clipboard(sep=';', index=True)\nI have a dataframe as above and I have the following column descriptions\n```\n•   Id - the uuid of this delivery\n•   PlanId - the uuid of the plan (the plan for deliveries of a given day)\n •  PlanDate - the date of delivery\n\n•   MinTime - the minimal time (seconds from midnight) for delivering this delivery\n•   MaxTime - the maximal time (seconds from midnight) for delivering this delivery\n•   RouteId - the uuid of the route this delivery belongs to\n•   ETA - the estimated time for arrival of this delivery on this date (from the eta you can of course order the deliveries in a route)\n•   TTN - the time to next delivery in the route, i.e., at index 3 that would be the time distance between delivery index 3 and delivery index 4\n•   DTN - the distance to next delivery in the route.\n```\n\nI need to find the the median of deliveries per route in the given plan.\nthe median distance travelled per route in the given plan.\nthe median time travelled per route in the given plan.\nHow may I do this?\nI am wondering if this is just straightforward calculation of median where you just group by and aggregate\nI tried something like this to find the median distance\n```\nTx = df.groupby(by=['plan_id','route_id'], as_index=False)['dtn'].sum()\n\n\n Tx.groupby(['plan_id','route_id'])['dtn'].median()\n```\n\nHowever I might not sure if this correct.\n    ", "Answer": "\r\nHere is how I would do to display required figures:\n```\n# Subset dataframe to only have the desired plan_id\nsub_Tx = Tx[Tx['plan_id'] == '869BB6FB-.....']\n\n# median of deliveries per route in the given plan\nsub_df = sub_Tx[['plan_id', 'route_id']]\nsub_df['count_deliveries'] = 1\nsub_df = sub_df.groupby(by=['plan_id', 'route_id'], axis=0, as_index=False).sum()\nsub_df.groupby(by=['plan_id', 'route_id'], axis=0, as_index=False).median()\n\n# median distance travelled per route in the given plan\nsub_df = sub_Tx[['plan_id', 'route_id', 'dtn']]\nsub_df = sub_df.groupby(by=['plan_id', 'route_id'], axis=0, as_index=False).sum()\nsub_df.groupby(by=['plan_id', 'route_id'], axis=0, as_index=False).median()\n\n# median time travelled per route in the given plan\nsub_df = sub_Tx[['plan_id', 'route_id', 'ttn']]\nsub_df = sub_df.groupby(by=['plan_id', 'route_id'], axis=0, as_index=False).sum()\nsub_df.groupby(by=['plan_id', 'route_id'], axis=0, as_index=False).median()\n```\n\nGood luck\nUPDATE :\nSo you can calculate median of route figures (nb deliveries, distance and time) per plan_id as follow:\n```\n# median of deliveries per route in the given plan\nsub_df = sub_Tx[['plan_id', 'route_id']]\nsub_df['count_deliveries'] = 1\nsub_df = sub_df.groupby(by=['plan_id', 'route_id'], axis=0, as_index=False).sum()\nsub_df = sub_df[['plan_id', 'count_deliveries']].rename(columns={'count_deliveries': 'median_deliveries'})\nsub_df.groupby(by=['plan_id'], axis=0, as_index=False).median()\n\n# median distance travelled per route in the given plan\nsub_df = sub_Tx[['plan_id', 'route_id', 'dtn']]\nsub_df = sub_df.groupby(by=['plan_id', 'route_id'], axis=0, as_index=False).sum()\nsub_df = sub_df[['plan_id', 'dtn']].rename(columns={'dtn': 'median_dtn'})\nsub_df.groupby(by=['plan_id'], axis=0, as_index=False).median()\n\n# median time travelled per route in the given plan\nsub_df = sub_Tx[['plan_id', 'route_id', 'ttn']]\nsub_df = sub_df.groupby(by=['plan_id', 'route_id'], axis=0, as_index=False).sum()\nsub_df = sub_df[['plan_id', 'ttn']].rename(columns={'ttn': 'median_ttn'})\nsub_df.groupby(by=['plan_id'], axis=0, as_index=False).median()\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "NumPy or SciPy to calculate weighted median\r\n                \r\nI'm trying to automate a process that JMP does (Analyze->Distribution, entering column A as the \"Y value\", using subsequent columns as the \"weight\" value).  In JMP you have to do this one column at a time - I'd like to use Python to loop through all of the columns and create an array showing, say, the median of each column.\n\nFor example, if the mass array is [0, 10, 20, 30], and the weight array for column 1 is [30, 191, 9, 0], the weighted median of the mass array should be 10.  However, I'm not sure how to arrive at this answer.\n\nSo far I've \n\n\nimported the csv showing the weights as an array, masking values of 0, and \ncreated an array of the \"Y value\" the same shape and size as the weights array (113x32).  I'm not entirely sure I need to do this, but thought it would be easier than a for loop for the purpose of weighting.\n\n\nI'm not sure exactly where to go from here.  Basically the \"Y value\" is a range of masses, and all of the columns in the array represent the number of data points found for each mass.  I need to find the median mass, based on the frequency with which they were reported.\n\nI'm not an expert in Python or statistics, so if I've omitted any details that would be useful let me know!\n\nUpdate:  here's some code for what I've done so far:\n\n```\n#Boilerplate & Import files\nimport csv\nimport scipy as sp\nfrom scipy import stats\nfrom scipy.stats import norm\nimport numpy as np\nfrom numpy import genfromtxt\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ninputFile = '/Users/cl/prov.csv'\norigArray = genfromtxt(inputFile, delimiter = \",\")\nnArray = np.array(origArray)\ndimensions = nArray.shape\nshape = np.asarray(dimensions)\n\n#Mask values ==0\nmaTest = np.ma.masked_equal(nArray,0)\n\n#Create array of masses the same shape as the weights (nArray)\nfieldLength = shape[0]\nrowLength = shape[1]\n\nfor i in range (rowLength):\n    createArr = np.arange(0, fieldLength*10, 10)\n    nCreateArr = np.array(createArr)\n    massArr.append(nCreateArr)\n    nCreateArr = np.array(massArr)\nnmassArr = nCreateArr.transpose()\n```\n\n    ", "Answer": "\r\nWhat we can do, if i understood your problem correctly. Is to sum up the observations, dividing by 2 would give us the observation number corresponding to the median. From there we need to figure out what observation this number was.\n\nOne trick here, is to calculate the observation sums with np.cumsum. Which gives us a running cumulative sum.\n\nExample:\n ```\nnp.cumsum([1,2,3,4]) ->  [ 1,  3,  6, 10]```\n\nEach element is the sum of all previously elements and itself. We have 10 observations here. so the mean would be the 5th observation. (We get 5 by dividing the last element by 2).\nNow looking at the cumsum result, we can easily see that that must be the observation between the second and third elements (observation 3 and 6).\n\nSo all we need to do, is figure out the index of where the median (5) will fit.\nnp.searchsorted does exactly what we need. It will find the index to insert an elements into an array, so that it stays sorted. \n\nThe code to do it like so:\n\n```\nimport numpy as np\n#my test data\nfreq_count = np.array([[30, 191, 9, 0], [10, 20, 300, 10], [10,20,30,40], [100,10,10,10], [1,1,1,100]])\n\nc = np.cumsum(freq_count, axis=1) \nindices = [np.searchsorted(row, row[-1]/2.0) for row in c]\nmasses = [i * 10 for i in indices] #Correct if the masses are indeed 0, 10, 20,...\n\n#This is just for explanation.\nprint \"median masses is:\",  masses\nprint freq_count\nprint np.hstack((c, c[:, -1, np.newaxis]/2.0))\n```\n\n\nOutput will be: \n\n```\nmedian masses is: [10 20 20  0 30]  \n[[ 30 191   9   0]  <- The test data\n [ 10  20 300  10]  \n [ 10  20  30  40]  \n [100  10  10  10]  \n [  1   1   1 100]]  \n[[  30.   221.   230.   230.   115. ]  <- cumsum results with median added to the end.\n [  10.    30.   330.   340.   170. ]     you can see from this where they fit in.\n [  10.    30.    60.   100.    50. ]  \n [ 100.   110.   120.   130.    65. ]  \n [   1.     2.     3.   103.    51.5]]  \n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median in 500GB file java\r\n                \r\nFind median of all numbers in the given 500GB file at the command prompt.\n\nFile format eg:\n\n```\n12 \n4\n98\n3\n```\n\n\nwith one number in each line(numbers can be repeated).Can anyone please help on how to approach on this in JAVA?\nif we have to split the file and then how can median be calculated?\nI have come across several posts on median but couldn't find best approach on such huge file .\n    ", "Answer": "\r\nThis doesn't cover the calculation itself, but here is how you read the file in small parts, so that you don't run out of memory.\n\n```\ntry (\n    InputStream fis = Files.newInputStream(Paths.get(fileName), StandardOpenOption.READ);\n    BufferedReader book = new BufferedReader(new InputStreamReader(fis, StandardCharsets.UTF_8));\n) {\n    String line = null;\n    long cnt = 0;\n    while ((line = book.readLine()) != null) {\n        cnt++;\n        BigInteger data = new BigInteger(line);\n        ... handle the data\n        if (cnt % 500 == 0) System.gc(); // invoke garbage collector\n    }\n}\n```\n\n\nI recently needed to import a 50mb file that gave me out-of-memory errors with a 2GB memory limit, just because of all the extra metadata that it keeps for each object, and this method helped me get through it.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find median in binary search tree\r\n                \r\nWrite the implementation of the function ```\nT ComputeMedian() const```\n that computes the median value in the tree in O(n) time. Assume that the tree is a BST but is not necessarily balanced. Recall that the median of n numbers is defined as follows: If n is odd, the median is x such that the number of values smaller than x is equal to the number of values greater than x. If n is even, then one plus the number of values smaller than x is equal to the number of values greater than x. For example, given the numbers 8, 7, 2, 5, 9, the median is 7, because there are two values smaller than 7 and two values larger than 7. If we add number 3 to the set, the median becomes 5.\n\nHere is the class of binary search tree node:\n\n```\ntemplate <class T>\nclass BSTNode\n{\npublic:\nBSTNode(T& val, BSTNode* left, BSTNode* right);\n~BSTNode();\nT GetVal();\nBSTNode* GetLeft();\nBSTNode* GetRight();\n\nprivate:\nT val;\nBSTNode* left;\nBSTNode* right;  \nBSTNode* parent; //ONLY INSERT IS READY TO UPDATE THIS MEMBER DATA\nint depth, height;\nfriend class BST<T>;\n};\n```\n\n\nBinary search tree class:\n\n```\ntemplate <class T>\nclass BST\n{\npublic:\nBST();\n~BST();\n\nbool Search(T& val);\nbool Search(T& val, BSTNode<T>* node);\nvoid Insert(T& val);\nbool DeleteNode(T& val);\n\nvoid BFT(void);\nvoid PreorderDFT(void);\nvoid PreorderDFT(BSTNode<T>* node);\nvoid PostorderDFT(BSTNode<T>* node);\nvoid InorderDFT(BSTNode<T>* node);\nvoid ComputeNodeDepths(void);\nvoid ComputeNodeHeights(void);\nbool IsEmpty(void);\nvoid Visit(BSTNode<T>* node);\nvoid Clear(void);\n\nprivate:\nBSTNode<T> *root;\nint depth;\nint count;\nBSTNode<T> *med; // I've added this member data.\n\nvoid DelSingle(BSTNode<T>*& ptr);\nvoid DelDoubleByCopying(BSTNode<T>* node);\nvoid ComputeDepth(BSTNode<T>* node, BSTNode<T>* parent);\nvoid ComputeHeight(BSTNode<T>* node);\nvoid Clear(BSTNode<T>* node);\n\n};\n```\n\n\nI know I should count the nodes of the tree first and then do an inorder traversal until I reach (n/2)th node and return it. I just have no clue how.\n    ", "Answer": "\r\nAs you mentioned, it is fairly easy to first find the number of nodes, doing any traversal:\n```\nfindNumNodes(node):\n   if node == null:\n       return 0\n   return findNumNodes(node.left) + findNumNodes(node.right) + 1\n```\n\nThen, with an inorder traversal that aborts when the node number is n/2:\n```\n// index is a global variable / class variable, or any other variable that is constant between all calls\nindex=0\nfindMedian(node):\n   if node == null:\n       return null\n   cand = findMedian(node.left)\n   if cand != null:\n        return cand\n   if index == n/2:\n       return node\n   index = index + 1\n   return findMedian(node.right)\n```\n\nThe idea is that in-order traversal processes nodes in BST in sorted manner. So, since the tree is a BST, the ```\ni```\nth node you process, is the ```\ni```\nth node in order, this is of course also true for ```\ni==n/2```\n, and when you find it is the ```\nn/2```\nth node, you return it.\n\nAs a side note, you can add functionality to BST to find ```\ni```\nth element efficiently (```\nO(h)```\n, where ```\nh```\n is the tree's height), using order statistics trees.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Confidence Intervals for Above Median and Below Median Differences of Same Data Set?\r\n                \r\nMake a 95% confidence interval for the difference in earnings between\nabove median height men and below median height men.\n\nWhat programs/scripts would be helpful for a problem such as this in R?\n\nWas able to use commands like:\n\n```\n# Use this command to calculate 95% confidence interval for difference in \n# height means between males and females\nt.test(height ~ sex, data=CPS, conf.level=.95)\n```\n\n\nBut cannot think of a way to find the confidence interval of below median and above median heights for the same dataset. Any tips? Sorry, new to R.\n    ", "Answer": "\r\n(Hints/outline of solution because this is homework.)\n\nYou don't make it clear what data you have. What are the variables and other information that's available?\n\nMy guess is (it's not stated clearly) you're intended to do this on the sample median height rather than some externally determined value for median height.\n\nYou'll need to construct a factor (at least implicitly) that indicates if height is greater than median height.\n\n[Unfortunately, this invalidates the proposed test/confidence interval in the question -- see several posts on stats.stackexchange which discuss the issue -- but let's ignore that for now and treat it as a pure R-code issue.]\n\nYou'll then need to construct a confidence interval, perhaps using the example code in your question as a template.\n\nNote that you're working with a subset of all people so you'll have to subset your data at some point, either before calling a function to do the CI, or within it. (That is, there are three variables in this problem, a response, a factor for comparing the response across and a variable for subsetting on.)\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "SQL Server Median Function\r\n                \r\n```\nCREATE FUNCTION [dbo].[f_Get_Average_Order_Size_Median]\n(\n      @ITEM char(15)\n)\nRETURNS decimal(21,6)\nAS\nBEGIN\n\nSELECT @Median = AVG(1.0 * QTYSHP)\nFROM\n(\n    SELECT o.QTYSHP, rn = ROW_NUMBER() OVER (ORDER BY o.QTYSHP), c.c \n    FROM dbo.tbl AS o \n        WHERE RQDATE >=DATEADD (mm,-6, GETDATE()) \n        AND PRICE != '0' \n        AND SALESMN != 'WB' \n        AND item = @ITEM )  \n\n   +\n    SELECT o.QTYSHP, rn = ROW_NUMBER() OVER (ORDER BY o.QTYSHP), c.c\n    FROM tbl \n        WHERE RQDATE >=DATEADD (mm,-6, GETDATE()) \n        AND PRICE != '0' \n        AND SALESMN != 'WB' \n        AND item = @ITEM  \n   CROSS JOIN (SELECT c = COUNT(*) \n               FROM dbo.tblS) AS c\n                   WHERE RQDATE >=DATEADD (mm,-6, GETDATE()) \n                   AND PRICE != '0' \n                   AND SALESMN != 'WB' \n                   AND item = @ITEM\n   +  \n   (SELECT c = COUNT(*) \n    FROM dbo.tblS) AS c\n        WHERE RQDATE >=DATEADD (mm,-6, GETDATE()) \n        AND PRICE != '0' \n        AND SALESMN != 'WB' \n        AND item = @ITEM\n   ) AS x\nWHERE rn IN ((c + 1)/2, (c + 2)/2);\n\n\n      @Return = @Median\n      BEGIN \n\n      END\n      RETURN @Return\n\nEND TRANSACTION...\n```\n\n\nIs this the correct median function? Please correct me ..I'm learning  \n    ", "Answer": "\r\nThe median is the value that accumulates 50% of the values (the 50% percentile). So I think the simplest way to do it is:\n\n\nCount the number of records (let's say this count is 'n')\nSelect the top ```\nn / 2```\n records (if ```\nn```\n is even, round it to the next integer value), sorted by the column that holds the value for which you want to calculate the median. Read the biggest (last) value of this column.\n\n\nI'm not quite familiar with SQL server, but in MySQL I would do it like this:\n\n```\nset @n = (select count(*) from yourTable);\nset @med = ceil(@n / 2);\nselect yourColumn\nfrom (\n    select yourColumn\n    from yourTable\n    order by yourColumn\n    limit @med\n) as a\norder by yourColumn desc\nlimit 1;\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median into JMeter report\r\n                \r\nI execute my JMeter performance test from commandline, and generate the report afterwards.\n```\njmeter -n -t <jmx file> -l <log file>\njmeter -g <log file> -o <report loc>\n```\n\nI realized that the generated report doesn't contain median (however aggregated result on the frontend contains it).\nAre there any way to provide median value into report generated?\n    ", "Answer": "\r\nLooking at the Overview:\n\nA Statistics table providing in one table a summary of all metrics per transaction including 3 configurable percentiles :\n\nand into General Settings\n\nPercentiles used by Summary table and Percentile graphs can be adjusted to different values by using the 3 properties:\n\naggregate_rpt_pct1 : Defaults to 90\naggregate_rpt_pct2 : Defaults to 95\naggregate_rpt_pct3 : Defaults to 99\n\n\nSo you can switch any of these pre-configured percentiles into the median (which is also known as  2nd quartile, 5th decile, or 50th percentile)\nSo if you add the next line to user.properties file (lives in \"bin\" folder of your JMeter installation)\n```\naggregate_rpt_pct1=50\n```\n\nthen next time you generate the dashboard you will see median values in the first percentile column (same applies to i.e. Aggregate Report listener)\nyou can also pass the value via -J command-line argument like:\n```\njmeter -Jaggregate_rpt_pct1=50 <log file> -o <report log>\n```\n\nMore information:\n\nConfiguring JMeter\nApache JMeter Properties Customization Guide\nApache JMeter Properties Reference\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Apply vs transform on a group object\r\n                \r\nConsider the following dataframe:\n```\ncolumns = ['A', 'B', 'C', 'D']\nrecords = [\n    ['foo', 'one', 0.162003, 0.087469],\n    ['bar', 'one', -1.156319, -1.5262719999999999],\n    ['foo', 'two', 0.833892, -1.666304],     \n    ['bar', 'three', -2.026673, -0.32205700000000004],\n    ['foo', 'two', 0.41145200000000004, -0.9543709999999999],\n    ['bar', 'two', 0.765878, -0.095968],\n    ['foo', 'one', -0.65489, 0.678091],\n    ['foo', 'three', -1.789842, -1.130922]\n]\ndf = pd.DataFrame.from_records(records, columns=columns)\n\n\"\"\"\n     A      B         C         D\n0  foo    one  0.162003  0.087469\n1  bar    one -1.156319 -1.526272\n2  foo    two  0.833892 -1.666304\n3  bar  three -2.026673 -0.322057\n4  foo    two  0.411452 -0.954371\n5  bar    two  0.765878 -0.095968\n6  foo    one -0.654890  0.678091\n7  foo  three -1.789842 -1.130922\n\"\"\"\n```\n\nThe following commands work:\n```\ndf.groupby('A').apply(lambda x: (x['C'] - x['D']))\ndf.groupby('A').apply(lambda x: (x['C'] - x['D']).mean())\n```\n\nbut none of the following work:\n```\ndf.groupby('A').transform(lambda x: (x['C'] - x['D']))\n# KeyError or ValueError: could not broadcast input array from shape (5) into shape (5,3)\n\ndf.groupby('A').transform(lambda x: (x['C'] - x['D']).mean())\n# KeyError or TypeError: cannot concatenate a non-NDFrame object\n```\n\nWhy? The example on the documentation seems to suggest that calling ```\ntransform```\n on a group allows one to do row-wise operation processing:\n```\n# Note that the following suggests row-wise operation (x.mean is the column mean)\nzscore = lambda x: (x - x.mean()) / x.std()\ntransformed = ts.groupby(key).transform(zscore)\n```\n\nIn other words, I thought that transform is essentially a specific type of apply (the one that does not aggregate). Where am I wrong?\nFor reference, below is the construction of the original dataframe above:\n```\ndf = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n                          'foo', 'bar', 'foo', 'foo'],\n                   'B' : ['one', 'one', 'two', 'three',\n                         'two', 'two', 'one', 'three'],\n                   'C' : randn(8), 'D' : randn(8)})\n```\n\n    ", "Answer": "\r\nTwo major differences between ```\napply```\n and ```\ntransform```\n\nThere are two major differences between the ```\ntransform```\n and ```\napply```\n groupby methods.\n\nInput:\n\n```\napply```\n implicitly passes all the columns for each group as a DataFrame to the custom function.\nwhile ```\ntransform```\n passes each column for each group individually as a Series to the custom function.\n\n\nOutput:\n\nThe custom function passed to ```\napply```\n can return a scalar, or a Series or DataFrame (or numpy array or even list).\nThe custom function passed to ```\ntransform```\n must return a sequence (a one dimensional Series, array or list) the same length as the group.\n\n\n\nSo, ```\ntransform```\n works on just one Series at a time and ```\napply```\n works on the entire DataFrame at once.\nInspecting the custom function\nIt can help quite a bit to inspect the input to your custom function passed to ```\napply```\n or ```\ntransform```\n.\nExamples\nLet's create some sample data and inspect the groups so that you can see what I am talking about:\n```\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'State':['Texas', 'Texas', 'Florida', 'Florida'], \n                   'a':[4,5,1,3], 'b':[6,10,3,11]})\n\n     State  a   b\n0    Texas  4   6\n1    Texas  5  10\n2  Florida  1   3\n3  Florida  3  11\n```\n\nLet's create a simple custom function that prints out the type of the implicitly passed object and then raises an exception so that execution can be stopped.\n```\ndef inspect(x):\n    print(type(x))\n    raise\n```\n\nNow let's pass this function to both the groupby ```\napply```\n and ```\ntransform```\n methods to see what object is passed to it:\n```\ndf.groupby('State').apply(inspect)\n\n<class 'pandas.core.frame.DataFrame'>\n<class 'pandas.core.frame.DataFrame'>\nRuntimeError\n```\n\nAs you can see, a DataFrame is passed into the ```\ninspect```\n function. You might be wondering why the type, DataFrame, got printed out twice. Pandas runs the first group twice. It does this to determine if there is a fast way to complete the computation or not. This is a minor detail that you shouldn't worry about.\nNow, let's do the same thing with ```\ntransform```\n\n```\ndf.groupby('State').transform(inspect)\n<class 'pandas.core.series.Series'>\n<class 'pandas.core.series.Series'>\nRuntimeError\n```\n\nIt is passed a Series - a totally different Pandas object.\nSo, ```\ntransform```\n is only allowed to work with a single Series at a time. It is impossible for it to act on two columns at the same time. So, if we try and subtract column ```\na```\n from ```\nb```\n inside of our custom function we would get an error with ```\ntransform```\n. See below:\n```\ndef subtract_two(x):\n    return x['a'] - x['b']\n\ndf.groupby('State').transform(subtract_two)\nKeyError: ('a', 'occurred at index a')\n```\n\nWe get a KeyError as pandas is attempting to find the Series index ```\na```\n which does not exist. You can complete this operation with ```\napply```\n as it has the entire DataFrame:\n```\ndf.groupby('State').apply(subtract_two)\n\nState     \nFlorida  2   -2\n         3   -8\nTexas    0   -2\n         1   -5\ndtype: int64\n```\n\nThe output is a Series and a little confusing as the original index is kept, but we have access to all columns.\n\nDisplaying the passed pandas object\nIt can help even more to display the entire pandas object within the custom function, so you can see exactly what you are operating with. You can use ```\nprint```\n statements by I like to use the ```\ndisplay```\n function from the ```\nIPython.display```\n module so that the DataFrames get nicely outputted in HTML in a jupyter notebook:\n```\nfrom IPython.display import display\ndef subtract_two(x):\n    display(x)\n    return x['a'] - x['b']\n```\n\nScreenshot:\n\n\nTransform must return a single dimensional sequence the same size as the group\nThe other difference is that ```\ntransform```\n must return a single dimensional sequence the same size as the group. In this particular instance, each group has two rows, so ```\ntransform```\n must return a sequence of two rows. If it does not then an error is raised:\n```\ndef return_three(x):\n    return np.array([1, 2, 3])\n\ndf.groupby('State').transform(return_three)\nValueError: transform must return a scalar value for each group\n```\n\nThe error message is not really descriptive of the problem. You must return a sequence the same length as the group. So, a function like this would work:\n```\ndef rand_group_len(x):\n    return np.random.rand(len(x))\n\ndf.groupby('State').transform(rand_group_len)\n\n          a         b\n0  0.962070  0.151440\n1  0.440956  0.782176\n2  0.642218  0.483257\n3  0.056047  0.238208\n```\n\n\nReturning a single scalar object also works for ```\ntransform```\n\nIf you return just a single scalar from your custom function, then ```\ntransform```\n will use it for each of the rows in the group:\n```\ndef group_sum(x):\n    return x.sum()\n\ndf.groupby('State').transform(group_sum)\n\n   a   b\n0  9  16\n1  9  16\n2  4  14\n3  4  14\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of arbitrary datapoint around index - MATLAB\r\n                \r\nI've been using the ```\nfindpeaks```\n function with great success to detect peaks in my signal. My next step is to clean these identified peaks, for which I have the indices.\n\nMy goal is to calculate the median of Y data points before and Y data points after a given index and replace whatever values (noise) there are with these new values (the calculated median).\n\nSomething like this:\n\n```\n%  points before, peak, points after\n%        ↓         ↓         ↓\nx = [1, 2, 3, 1,   34,   3, 2, 1, 3]\n```\n\n\nCalculate the median of the 4 data points preceding and following my peak the peak of ```\n34```\n...\n\nMedian of ```\n[1,2,3,1,3,2,1,3]```\n is ```\n2```\n.\n\nReplace my peak with this new value:\n\n```\n% Replaced peak with surrounding median\n%                  ↓\nx1 = [1, 2, 3, 1,  2,  3, 2, 1, 3]\n```\n\n\nAny suggestion on how to implement this?\n    ", "Answer": "\r\nFind the peaks and replace them with the results of ```\nmedfilt1()```\n\n\n```\n[~,idx]=findpeaks(x);\nif ~isempty(idx)\n    m = medfilt1(x,9);\n    x(idx) = m(idx);\nend\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "conditional median in excel worksheet\r\n                \r\nI want to calculate a conditional median.\n\nThe formula =MEDIAN(K3851:K4792;$O3851:$O4792) works.\nThe step I cannot make is the one where the calculation\nis restricted to when K<1. It seems easy enough, but I get\nthe error code \"#NAME?\".\n\nI would greatly appreciate your help.\n    ", "Answer": "\r\nYou can use an array formula¹ to set up the condition. The array formula will pick up blank cells so you will have to add a condition to discard them as well.\n\n```\n=MEDIAN(IF(K3851:K4792<1; IF(K3851:K4792<>\"\"; $O3851:$O4792)))\n```\n\n\nPROOF\n\n        \n\n¹ Array formulas need to be finalized with Ctrl+Shift+Enter↵. Once entered into the first cell correctly, they can be filled or copied down or right just like any other formula. See Guidelines and examples of array formulas for more information.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median Filter for ios\r\n                \r\nI'm looking to apply Median Filter to a UIImage in my iOS application.\nDue to my company restrictions, i cannot use openGL filters.\n\nAny ideas or current implementations would be very welcomed.\nThanks.\n    ", "Answer": "\r\nApple's ```\nCore Image```\n framework may be your solution. To be precise, you need a subclass of ```\nCIFilter```\n which implements a median filter. (Guess you would be interested in ```\nCIMedianFilter```\n or have a look at the filter reference)\n\n```\nCIIImage *inputImage = //...\n\nCIFilter *filter = [CIFilter filterWithName:@\"CIMedianFilter\"];\n[filter setDefaults];\n[filter setValue:inputImage forKey:@\"inputImage\"];\n\nCIImage *outputImage = [filter outputImage];\n```\n\n\nTo convert the ```\nCIImage```\n to ```\nUIImage```\n and vice versa:\n\n```\nCIImage *ciImage = [UIImage imageNamed:@\"test.png\"].CIImage;\nUIImage *uiImage = [[UIImage alloc] initWithCIImage:ciImage];\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding a median in sql server\r\n                \r\nI need to find the median of a column and the answer needs to be rounded to 4 decimal places. Since sql server doesn't have the \"MEDIAN()\" function, I needed to get the smallest number from the top 50% of the list and the biggest of the bottom 50% and then divide by 2.\nI tried to do it like this:\n```\nSELECT(\n    (SELECT CAST(ROUND(MAX(LAT_N), 4) AS DECIMAL(8, 4)) \n        FROM (SELECT TOP 50 PERCENT LAT_N FROM STATION ORDER BY LAT_N ASC) AS Bottom1)\n    + (SELECT CAST(ROUND(MIN(LAT_N), 4) AS DECIMAL(8, 4))\n        FROM (SELECT TOP 50 PERCENT LAT_N FROM STATION ORDER BY LAT_N DESC) AS Top1)) / 2;\n```\n\nBut the result is 5.323200 instead of 5.3232.\nI also tried this:\n```\nSELECT(\n    (SELECT CAST(ROUND(MAX(LAT_N), 4) AS DECIMAL(8, 4)) \n        FROM (SELECT TOP 50 PERCENT (LAT_N / 2) AS LAT_N FROM STATION ORDER BY LAT_N ASC) AS Bottom1)\n    + (SELECT CAST(ROUND(MIN(LAT_N), 4) AS DECIMAL(8, 4))\n        FROM (SELECT TOP 50 PERCENT (LAT_N / 2) AS LAT_N FROM STATION ORDER BY LAT_N DESC) AS Top1));\n```\n\nThis answer seems to be close, but by dividing both the min and the max, I end up losing 0.0001 which makes the answer wrong.\nHow can I fix either of the ways I'm trying to do it in order to get a median from a table. Or is there another way to do it?\n    ", "Answer": "\r\nI have been reading the T-SQL Querying by Itzik Ben-Gan and recently came across the BI section. I believe this is what you want. This is how he explains to get the median. He calls this the financial median. Your other option is to look at the PERCENTILE_DISC instead of the PERCENTILE_CONT as shown below.\n```\nCREATE TABLE #Test (\n    [Id] INT IDENTITY(1,1) CONSTRAINT PK_Id PRIMARY KEY,\n    [Cost] DECIMAL(19,4) NOT NULL\n);\n\nINSERT INTO #Test([Cost])\nVALUES (5),(10),(15);\n\nSELECT DISTINCT\nPERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY [Cost]) OVER () AS median\nFROM #Test\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median quicksort using pivot\r\n                \r\ni have a question regarding my quicksort algorithm, it runs on small arrays but when the arrays get large the program quits running, basically I'm just trying to find the median value, so i keep splitting the array to discard values that I'm not worried about, so I'll use three values to find the best pivot and get that index, then i run quicksort so the values on either side are less or greater than pivot, and then check the pivot index with where the median value should be, for example if i have a 20 index array the median value should be 10, n if my pivot is at index 7 i start a new quicksort from index 7 to 20, n keep recursively running it until the pivotindex is at the median\n```\n    // median of three\n    private static int getPivot(int[] nums, int left, int right) {\n        int[] triplet = new int[] {nums[left], nums[(left + right) / 2], nums[right]};\n        Arrays.sort(triplet);\n//             pivotIndex is either left, right, or middle\n            if(triplet[1] == nums[left]){\n                pivotIndex = left;\n            }\n            else if(triplet[1] == nums[(left + right) / 2]){\n                pivotIndex = (left + right) / 2;\n            }\n            else if(triplet[1] == nums[right]){\n                pivotIndex = right;\n            }\n\n        return triplet[1];\n    }\n\n    // swap two values\n    private static void swap(int[] nums, int left, int right) {\n        int temp = nums[left];\n        nums[left] = nums[right];\n        nums[right] = temp;\n    }\n```\n\n/// this is the quick sort\n\nBlockquote\n\n```\n     static int median;\n   static int pivotIndex;\n\n    public static double findMedian(int[] nums) {\n        median = nums.length / 2;\n        quicksort(nums, 0, nums.length - 1);\n        return (nums[median]);\n    }\n\n    private static void quicksort(int[] nums, int left, int right) {\n\n        if (left >= right)\n        return;\n        int fromLeft = left;\n        int fromRight = right;\n        int pivot = getPivot(nums, left, right);\n        swap(nums, pivotIndex, right);\n        pivotIndex = right;\n        fromRight--;\n        while(fromLeft < fromRight){\n            if ( (nums[fromLeft] > pivot) && (nums[fromRight] < pivot)) {\n                swap(nums, fromLeft, fromRight);\n                fromLeft++;\n                fromRight--;\n            }\n            while (nums[fromLeft] < pivot){\n                fromLeft++;\n            }\n            while (nums[fromRight] > pivot){\n                fromRight--;\n            }\n            if( fromLeft > fromRight){\n                pivotIndex = fromLeft;\n                swap(nums, fromLeft, right);\n            }\n        }\n        if(pivotIndex == median){\n            return;\n        }\n        if(pivotIndex > median){\n            quicksort(nums, left, pivotIndex);\n        }\n        if(pivotIndex < median){\n            quicksort(nums, pivotIndex, right);\n        }\n```\n\nda problem i am having is when the number gets big enough is just says the application is running and doesn't do anything and i can't figure out why, even if it took n^2 it should eventually display an anser\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "C++ Implementing Heap Median Function\r\n                \r\nFollowing the answer found here, https://stackoverflow.com/a/10931091/1311773, I am attempting to implement two heaps so I can calculate a running median.\n\nI'm unfamiliar with heaps, and am not sure where to begin implementing this function described here. http://programmingpraxis.com/2012/05/29/streaming-median/\n\nMy goal is to create a small test program that calculates running medians efficiently, so as the list grows the median doesn't need to be recalculated from scratch. Using two heaps, I should be able to do it, I'm just shaky on how to start implementing it.\n\nAny advice on this would be appreciated.\n    ", "Answer": "\r\nThe ```\nstd::priority_queue```\n template provides all the properties of a heap. Constant time maximum or minimum extraction (depending on how the items are compared), and logarithmic time insertion. It can be found in the ```\n<queue>```\n header file.\n\nBy default, the ```\npriority_queue```\n is a max-heap.\n\n```\nint numbers[11] = { 0, 9, 3, 4, 8, 12, 2, 11, 10, 1, 5 };\nstd::priority_queue<int> myheap(numbers, numbers + 11);\nstd::cout << \"biggest \" << myheap.top() << std::endl; // 12\nmyheap.pop();\nstd::cout << \"biggest \" << myheap.top() << std::endl; // 11\nmyheap.push(6);\nstd::cout << \"biggest \" << myheap.top() << std::endl; // 11\nmyheap.push(13);\nstd::cout << \"biggest \" << myheap.top() << std::endl; // 13\n```\n\n\nHere is an example of how to create a min-heap:\n\n```\nstd::priority_queue<\n    int,\n    std::priority_queue<int>::container_type,\n    std::greater<int>\n>;\n```\n\n\nTo implement the streaming median algorithm, the approach is similar to this:\n\n\ncreate a max-heap for items that are smaller than the median\ncreate a min-heap for items that are greater than the median\nwhen pushing new items into the heap\n\ndecide which heap it should be pushed into, and push it there\nif one of the heaps' size is more than 1 greater than the other heap, then pop the bigger one, and put that element into the smaller one\n\n\n\nThen, the median is the either the top of the larger heap, or the average of the tops of both heaps.\n\nIf you feel you need to manage the heap manually, ```\nC++```\n provides algorithms that allow you to do so on your own random access data structure.\n\n\n```\nstd::make_heap```\n -- heapify a region specified by iterator endpoints\n```\nstd::push_heap```\n -- assumes the first N-1 elements are already a heap, and incoporates the N'th element into the heap\n```\nstd::pop_heap```\n  -- places the first element in the region into the last position, and reheapifies the region, but leaving the last element alone\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median and Binary Classification in R\r\n                \r\nI have a dataframe of log transformed IC50 values for around 100 drugs (rows) for 20 cell lines (columns) and another column with the median values for each drug. I've attached a sample table below (I hope it's clear!)\n\n```\n           MCF-7         T47D         Kuramochhi         Median\nCisplatin  -1.45    -0.397799999    -2.629980996    -1.457715002\nAICAR       9.684057    8.350465       9.559031         7.783897\n```\n\n\nBasically what I'd like to do is assign a value of 0 or 1 if a cell line has a value greater than the median (1) or less than the median (0) for each drug (100 drugs in total). I'm quite stuck on how to get started with this and how the script should look. Any help would be greatly appreciated!\n\nThanks!\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median replace, needs numeric data\r\n                \r\nI am trying to impute missing values based on a group. I am getting an error that the median() function requires numeric data, but all of my data is numeric so I can't see the issue. Here is a minimally reproducible example.\n\n```\nset.seed(123)\ncluster = sample(seq(1,10),1000,replace=TRUE)\nV1 = sample(c(runif(100),NA),1000,replace=TRUE)\nV2 = sample(c(runif(100),NA),1000,replace=TRUE)\n\ndf = as.data.frame(cbind(cluster,V1,V2))\n\ndf_fixed = by(df,df$cluster,function(x){replace(x,is.na(x),median(x, na.rm=TRUE))})\n```\n\n\nError returned:  \n\n\n  Error in median.default(x, na.rm = TRUE) : need numeric data \n\n\nThis code will work though, so the issue is with the median function.\n\n```\ndf_fixed = by(df,df$cluster,function(x){replace(x,is.na(x),1)})\n```\n\n    ", "Answer": "\r\n```\ndf_fixed <- apply(df[,2:3], 2, function(x) {\n  md <- sapply(sort(unique(df$cluster)), function(k) median(x[df$cluster==k], na.rm=TRUE)) \n  x[is.na(x)] <- md[df$cluster][is.na(x)]\n  return(x)\n})  \n\nany(is.na(df_fixed))\n# [1] FALSE\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median Filter in R\r\n                \r\nI have number of points and i need to convert mean filter (as mentioned below) into median filter for smoothing the plot. Can anyone please guide me in this ?\n\n```\n# Mean Filter\nsmoothfilter <- function(feat, ntap) \n{\n    ofeat <- feat                             # Actual data \n    nfeat <- length(feat)                     # Length of a actual data  \n    nhtap <- floor(ntap / 2.0)                                                  \n\n    sf <- feat[1:(nfeat-ntap+1)]              \n    for (j in 2:ntap) {\n        sf <- sf + feat[j:(nfeat-ntap+j)]       \n    }\n\n    sf <- sf / ntap\n    ofeat[(nhtap+1):(nfeat-nhtap)] <- sf\n    ofeat \n}\n```\n\n    ", "Answer": "\r\nHere is two function for an average filter and a median filter :\n\n```\nmav <- function(x,n=5){filter(x,rep(1/n,n), sides=2)} #Average\nmmed <- function(x,n=5){runmed(x,n)} #Median\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "SQL: Calculate the median for each date range\r\n                \r\nI am using SQL Server 2008 and am trying to calculate median values per date range. \n\nExample: \nThere are 4 dates with multiple values at each date, (1/1/16, 3/1/16, 7/1/16, 10/1/16), the median value for date 10/1/16 would be calculated from the values in the date range 1/1/16 – 7/1/16. The median value for date 7/1/16 would be calculated from the values in the date range 1/1/16 – 3/1/16. \n\nIf the date is 10/1/16, 10/1/16 values should not be included in the median (This true for all dates. Also, future dates should not be included in the calculation).\n\nThe query below calculates the median value for the MAX Visit Date. However, I need it to calculate the median for the other 3 Visit Dates as well. I have tried removing the MAX CTE and adding a join for all visit dates < than visit date but I could not get it to work. I have been unsuccessful in writing this so far, so any help would be great. I have included sample data and my expected results below.\n\nEDIT: Would some kind of recursion possibly work?\n\n```\n;CREATE TABLE #TEST(QUESTION VARCHAR(15), VISIT_DATE DATE, VALUE INT)\n\n;INSERT #TEST(QUESTION, VISIT_DATE, VALUE)\nVALUES\n('ABC', '1/1/2016', '80'),\n('ABC', '1/1/2016', '90'),\n('ABC', '1/1/2016', '100'),\n('ABC', '3/1/2016', '70'),\n('ABC', '3/1/2016', '80'),\n('ABC', '3/1/2016', '90'),\n('ABC', '3/1/2016', '100'),\n('ABC', '7/1/2016', '50'),\n('ABC', '7/1/2016', '60'),\n('ABC', '7/1/2016', '70'),\n('ABC', '10/1/2016', '10'),\n('ABC', '10/1/2016', '20'),\n('ABC', '10/1/2016', '30'),\n('ABC', '10/1/2016', '40')\n\n\n;WITH MAX_VISITDATE AS (\n    SELECT MAX(VISIT_DATE) AS MAX_VISITDATE\n    FROM #TEST\n), MEDIAN AS (\n    SELECT RN.Question, AVG(RN.VALUE) AS GroupMedianPastQtrs\n    FROM\n    (   SELECT QUESTION, VALUE, ROW_NUMBER() OVER (PARTITION BY QUESTION ORDER BY VALUE) AS ROWNUMBER, COUNT(*) OVER (PARTITION BY Question) AS QuestionCount\n        FROM #TEST T \n        WHERE VISIT_DATE NOT IN (SELECT MAX_VISITDATE FROM MAX_VISITDATE)\n    ) RN\n    WHERE RN.ROWNUMBER IN (RN.QuestionCount/2+1, (RN.QuestionCount+1)/2)\n    GROUP BY RN.Question\n)\nSELECT *\nFROM #TEST T\nINNER JOIN MEDIAN ON T.Question = MEDIAN.Question\n\n--Expected Results:\n\nQuestion|Visit_DAte |Value|GroupMedian  |\n--------|-----------|-----|-------------|\n'ABC'   |'1/1/2016' |'80' |''           |--No Median, no previous values\n'ABC'   |'1/1/2016' |'90' |''           |--No Median, no previous values\n'ABC'   |'1/1/2016' |'100'|''           |--No Median, no previous values\n'ABC'   |'3/1/2016' |'70' |'90'         |--Median value from date 1/1/16\n'ABC'   |'3/1/2016' |'80' |'90'         |--Median value from date 1/1/16\n'ABC'   |'3/1/2016' |'90' |'90'         |--Median value from date 1/1/16\n'ABC'   |'3/1/2016' |'100'|'90'         |--Median value from date 1/1/16\n'ABC'   |'7/1/2016' |'50' |'90'         |--Median value from date range 1/1/16 to 3/1/16\n'ABC'   |'7/1/2016' |'60' |'90'         |--Median value from date range 1/1/16 to 3/1/16\n'ABC'   |'7/1/2016' |'70' |'90'         |--Median value from date range 1/1/16 to 3/1/16\n'ABC'   |'10/1/2016'|'10' |'80'         |--Median value from date range 1/1/16 to 7/1/16\n'ABC'   |'10/1/2016'|'20' |'80'         |--Median value from date range 1/1/16 to 7/1/16\n'ABC'   |'10/1/2016'|'30' |'80'         |--Median value from date range 1/1/16 to 7/1/16\n'ABC'   |'10/1/2016'|'40' |'80'         |--Median value from date range 1/1/16 to 7/1/16\n```\n\n    ", "Answer": "\r\nI don't have a SQL Server 2008 box to test this. So I tried my best to cross-check every function below is available in 2008:\n\n```\n;WITH\n    tmp AS\n    (\n        SELECT          a.QUESTION\n                    ,   a.VISIT_DATE\n                    ,   b.VALUE\n                    ,   ROW_NUMBER() OVER (PARTITION BY a.QUESTION, a.VISIT_DATE ORDER BY b.VALUE)\n                                                                AS RowNumber\n                    ,   FLOOR(CONVERT(float, COUNT(b.Value) OVER (PARTITION BY a.QUESTION, a.VISIT_DATE) + 1) / 2)\n                                                                AS LowerMedianRowNumber\n                    ,   CEILING(CONVERT(float, COUNT(b.Value) OVER (PARTITION BY a.QUESTION, a.VISIT_DATE) + 1) / 2)\n                                                                AS UpperMedianRowNumber\n        FROM            (\n                            SELECT DISTINCT\n                                        QUESTION\n                                    ,   VISIT_DATE\n                            FROM        #TEST\n                        )       a\n        INNER JOIN      #TEST   b   ON a.QUESTION   = b.QUESTION\n                                   AND a.VISIT_DATE > b.VISIT_DATE\n\n    ),\n    GroupMedian AS\n    (\n        SELECT          QUESTION\n                    ,   VISIT_DATE\n                    ,   AVG(Value)      AS MedianValue\n        FROM            tmp\n        WHERE           RowNumber IN (LowerMedianRowNumber, UpperMedianRowNumber)\n        GROUP BY        QUESTION\n                    ,   VISIT_DATE\n    )\n\nSELECT          a.*\n        ,       b.MedianValue\nFROM            #TEST           a\nLEFT  JOIN      GroupMedian     b   ON a.QUESTION   = b.QUESTION\n                                   AND a.VISIT_DATE = b.VISIT_DATE\nORDER BY        QUESTION\n        ,       VISIT_DATE\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Continually updating the median + space efficiency\r\n                \r\nMaybe I'm not looking/searching for the right keywords (I couldn't find a solution).\n\nI am trying to calculate the median for a list of numbers (which is continually updated) in a space efficient way.\n\nFor calculating the mean there is a nice method by memorizing the number of elements in a list and weighting the old mean. For example (pseudocode):\n\n```\n// Initialize values\nnoList   = [8,10,4,6]\nmean     = 0\nnoItems  = 0\n\n// Now we want to update the mean continually with further values.\nfor (value : noList) {\n  mean    = (noItems / (noItems + 1)) * mean + (1 / (noItems + 1)) * value\n  noItems = noItems + 1\n}\n\n// After iteration 1: wholeList = [8]       ; mean = 8   ; noItems = 1\n// After iteration 2: wholeList = [8,10]    ; mean = 9   ; noItems = 2\n// After iteration 3: wholeList = [8,10,4]  ; mean = 7.33; noItems = 3\n// After iteration 4: wholeList = [8,10,4,6]; mean = 7   ; noItems = 4\n```\n\n\nQuestion:\nIs there a similar (space-efficient) method to calculate the median?\n\nUPDATED\nI updated the question (thanks to @WillemVanOnsem). I' not only looking for continually updating the median, but also a space-efficient way.\nAccording to his hint, we can keep two datastructures.\n\n```\nExample:\n\n// 1) We have a list for which we want to find the median.\nnoList   = [9,10,4,6,13,12]\n\n// 2) We devide it into two list or datastructures (additionally we sort it).\nsmallerList = [4,6,9]\nbiggerList  = [10,12,13]\n\n// 3) Both list have the same length, so the median is between the last element of smallerList und the first element of biggerList.\nmedian = (9 + 10) / 2 = 9.5\n\n// 4) Next, we add a further element and want to update our median.\n// We add the number 5 to our datastructures. So the new list is:\nnoList   = [9,10,4,6,13,12,5]\n\n// 5) Obviously 5 is smaller than our current median of 9.5. So we insert it in a sorted way into smallerList:\nsmallerList = [4,5,6,9]\nbiggerList  = [10,12,13]\n\n// 6) Now length(smallerList) > length(biggerList), So, we know, that the updated median should be the last element of smallerList.\nmedian = 9\n\n// 7) Next, we add a further element and want to update our median.\n// We add the number 2 to our datastructures. So the new list is:\nnoList   = [9,10,4,6,13,12,5,2]\n\n// 8) Obviously 2 is smaller than our current median of 9. So we insert it again in a sorted way into smallerList:\nsmallerList = [2,4,5,6,9]\nbiggerList  = [10,12,13]\n\n// 9) Now the length of smallerList is much bigger than the length of biggerList and we need to \"balance\" our list by taking one element from one list and inserting it into the other list.\n// We remove the element 9 from smallerList and insert it into biggerList.\nsmallerList = [2,4,5,6]\nbiggerList  = [9,10,12,13]\n\n// 10) Both list have the same length, so the median is between the last element of smallerList und the first element of biggerList.\nmedian = (6 + 9) / 2 = 7.5\n```\n\n\nHope, this makes it clear. I guess, this was your hint (@WillemVanOnsem).\n\nYeah, this might answer my initial question... but the problem with this solution is, that both lists (smallerList and biggerList) might grow to considerable size. Let's say we have a stream of 10^18 numbers and we want to find the median for all numbers without getting out of memory. How to solve this problem in a space-efficient way?\n    ", "Answer": "\r\nThere is no way to do this without remembering all the numbers you've seen, because at any point, any of the numbers you've seen in the past could become the median in the future.\n\nIf you've seen n numbers so far, then for any i, the ith smallest one of them could become the median:\n\n\nIf i > n/2, then it will happen if the next 2i - n numbers are larger.\nIf i <= n/2, then it will happen if the next n - 2i + 1 numbers are smaller.\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "C++ Implementing Heap Median Function\r\n                \r\nFollowing the answer found here, https://stackoverflow.com/a/10931091/1311773, I am attempting to implement two heaps so I can calculate a running median.\n\nI'm unfamiliar with heaps, and am not sure where to begin implementing this function described here. http://programmingpraxis.com/2012/05/29/streaming-median/\n\nMy goal is to create a small test program that calculates running medians efficiently, so as the list grows the median doesn't need to be recalculated from scratch. Using two heaps, I should be able to do it, I'm just shaky on how to start implementing it.\n\nAny advice on this would be appreciated.\n    ", "Answer": "\r\nThe ```\nstd::priority_queue```\n template provides all the properties of a heap. Constant time maximum or minimum extraction (depending on how the items are compared), and logarithmic time insertion. It can be found in the ```\n<queue>```\n header file.\n\nBy default, the ```\npriority_queue```\n is a max-heap.\n\n```\nint numbers[11] = { 0, 9, 3, 4, 8, 12, 2, 11, 10, 1, 5 };\nstd::priority_queue<int> myheap(numbers, numbers + 11);\nstd::cout << \"biggest \" << myheap.top() << std::endl; // 12\nmyheap.pop();\nstd::cout << \"biggest \" << myheap.top() << std::endl; // 11\nmyheap.push(6);\nstd::cout << \"biggest \" << myheap.top() << std::endl; // 11\nmyheap.push(13);\nstd::cout << \"biggest \" << myheap.top() << std::endl; // 13\n```\n\n\nHere is an example of how to create a min-heap:\n\n```\nstd::priority_queue<\n    int,\n    std::priority_queue<int>::container_type,\n    std::greater<int>\n>;\n```\n\n\nTo implement the streaming median algorithm, the approach is similar to this:\n\n\ncreate a max-heap for items that are smaller than the median\ncreate a min-heap for items that are greater than the median\nwhen pushing new items into the heap\n\ndecide which heap it should be pushed into, and push it there\nif one of the heaps' size is more than 1 greater than the other heap, then pop the bigger one, and put that element into the smaller one\n\n\n\nThen, the median is the either the top of the larger heap, or the average of the tops of both heaps.\n\nIf you feel you need to manage the heap manually, ```\nC++```\n provides algorithms that allow you to do so on your own random access data structure.\n\n\n```\nstd::make_heap```\n -- heapify a region specified by iterator endpoints\n```\nstd::push_heap```\n -- assumes the first N-1 elements are already a heap, and incoporates the N'th element into the heap\n```\nstd::pop_heap```\n  -- places the first element in the region into the last position, and reheapifies the region, but leaving the last element alone\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Function to return median of 3\r\n                \r\nI am looking for the best solution to finding a median of 3. I want it to be in the least lines possible. Thank you in advance :) I've tried sth like this:\n```\nint median(int a, int b, int c)\n{\n    if ((a >= b && a <= c) || (a <= b && a >= c)) return a;\n    if ((b >= a && b <= c) || (b <= a && b >= c)) return b;\n    return c;\n}\n```\n\nI believe this solution is okay, but maybe there is something better?\n    ", "Answer": "\r\n```\nint median(int a, int b, int c)\n{\n    return ((b > a) == (a > c)) ? a : ((a > b) == (b > c)) ? b : c;\n}\n```\n\nhttps://godbolt.org/z/4G3dzPcs3\nAbove code has small bug in it (prove that tests are important), here is fixed version:\n```\nint median(int a, int b, int c)\n{\n    return (b > a) == (a > c) ? a : (b > a) != (b > c) ? b : c;\n}\n```\n\nhttps://godbolt.org/z/8bq38hvaj (contains testcase reviling bug in earlier code).\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Replace NA values with median by group\r\n                \r\nI have used the below ```\ntapply```\n function to get the median of Age based on Pclass. \n\nNow how can I impute those median values to NA values based on Pclass?\n\n```\ntapply(titan_train$Age, titan_train$Pclass, median, na.rm=T)\n```\n\n\n\n\n  \n    ", "Answer": "\r\nHere is another ```\nbase R```\n approach that uses ```\nreplace```\n and ```\nave```\n.\n\n```\ndf1 <- transform(df1,\n                 Age = ave(Age, Pclass, FUN = function(x) replace(x, is.na(x), median(x, na.rm = T))))\ndf1\n#   Pclass Age\n# 1      A   1\n# 2      A   2\n# 3      A   3\n# 4      B   4\n# 5      B   5\n# 6      B   6\n# 7      C   7\n# 8      C   8\n# 9      C   9\n```\n\n\n\n\nSame idea but using ```\ndata.table```\n\n\n```\nlibrary(data.table)\nsetDT(df1)\ndf1[, Age := as.integer(replace(Age, is.na(Age), median(Age, na.rm = T))), by = Pclass]\ndf1\n```\n\n\ndata\n\n```\ndf1 <- data.frame(Pclass = rep(LETTERS[1:3], each = 3),\n                  Age = 1:9)\ndf1$Age[c(FALSE, TRUE, FALSE)] <- NA\ndf1\n#   Pclass Age\n# 1      A   1\n# 2      A  NA\n# 3      A   3\n# 4      B   4\n# 5      B  NA\n# 6      B   6\n# 7      C   7\n# 8      C  NA\n# 9      C   9\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "PGSQL - Median Function - Error\r\n                \r\nI want to find the median value of some data in pgsql. A quick google search told me that PGSQL 8.2 does not come with a median function. After some more searching I found this link \nhttps://wiki.postgresql.org/wiki/Aggregate_Median\n\nwhich provides some information on how to write a custom median function. Here is the code I have so far \n\n```\n        CREATE OR REPLACE FUNCTION my_schema.final_median(anyarray) RETURNS float8 STRICT AS\n        $$ \n        DECLARE\n          cnt INTEGER;\n        BEGIN\n          cnt := (SELECT count(*) FROM unnest($1) val WHERE val IS NOT NULL);\n          RETURN (SELECT avg(tmp.val)::float8 \n                    FROM (SELECT val FROM unnest($1) val\n                            WHERE val IS NOT NULL \n                            ORDER BY 1 \n                            LIMIT 2 - MOD(cnt, 2) \n                            OFFSET CEIL(cnt/ 2.0) - 1\n                          ) AS tmp\n                 );\n        END\n        $$ LANGUAGE plpgsql;\n\n        CREATE AGGREGATE my_schema.mymedian(anyelement) (\n          SFUNC=array_append,\n          STYPE=anyarray,\n          FINALFUNC=my_schema.final_median,\n          INITCOND='{}'\n        );\n\n-- I need this filter here. This is a place holder for a larger query    \n    select my_schema.mymedian(id) filter (where id < 5)\n    from my_schema.golf_data\n```\n\n\nHowever I am getting an error when I run the code \n\n```\nERROR:  function my_schema.mymedian(numeric) is not defined as STRICT\nLINE 27: select my_schema.mymedian(id) filter (where id < 5)\n                ^\nHINT:  The filter clause is only supported over functions defined as STRICT.\n********** Error **********\n\nERROR: function my_schema.mymedian(numeric) is not defined as STRICT\nSQL state: 0AM00\nHint: The filter clause is only supported over functions defined as STRICT.\nCharacter: 661\n```\n\n\nI am guessing the interpreter wants me to add the keyword strict somewhere. But I am not sure where I need to make this change. \n\nAny help would be appreciated\n    ", "Answer": "\r\nThis page indicates how to use the ```\nSTRICT```\n keyword and what it does:\n\nhttp://www.postgresql.org/docs/8.2/static/sql-createfunction.html\n\nSo try this:\n\n```\nCREATE OR REPLACE FUNCTION my_schema.final_median(anyarray) RETURNS float8 STRICT AS\n```\n\n\nIMPORTANT: \nThe impact of using ```\nSTRICT```\n is that if your input is ```\nNULL```\n (In your case, if there are no records with ```\nid < 5```\n) then the result will be ASSUMED to be ```\nNULL```\n and the function will not be called.  So you need to be sure the place where you call it from can cope with that.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "python, find confidence interval around median\r\n                \r\nHow do I find confidence interval around median for my data in python?\n\nSay I have array  \n\n```\na = np.array([24, 38, 61, 22, 16, 57, 31, 29, 35])\n```\n\n\nI would like to find 80% confidence interval around median. How do I do it in python?\n    ", "Answer": "\r\nMy implementation of this procedure to calculate the confidence interval around the median. \n\nFor your example, set ```\ncutoff=0.8```\n. \nThis requires ```\npython > 3```\n and ```\npandas > 1```\n.\nIt assumes that you pass the array as a ```\npd.Series```\n.\n\n```\nimport statistics, math\nimport pandas as pd \n\ndef median_confidence_interval(dx,cutoff=.95):\n    ''' cutoff is the significance level as a decimal between 0 and 1'''\n    dx = dx.sort_values(ascending=True, ignore_index=True)\n    factor = statistics.NormalDist().inv_cdf((1+cutoff)/2)\n    factor *= math.sqrt(len(df)) # avoid doing computation twice\n\n    lix = round(0.5*(len(dx)-factor))\n    uix = round(0.5*(1+len(dx)+factor))\n\n    return (dx[lix],dx[uix])\n\na = np.array([24, 38, 61, 22, 16, 57, 31, 29, 35])\nprint(median_confidence_interval(df,cutoff=0.8))\n# (29,57)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to Replace Outliers with Median in Pandas dataframe?\r\n                \r\nHere's my dataframe:\n\n```\ncars_num_df.head(10)\n\n    mpg cylinders   displacement    horsepower  weight  acceleration    age\n0   18.0    8          307.0          130.0     3504.0     12.0         13\n1   15.0    8          350.0          165.0     3693.0     11.5         13\n2   18.0    8          318.0          150.0     3436.0     11.0         13\n3   16.0    8          304.0          150.0     3433.0     12.0         13\n4   17.0    8          302.0          140.0     3449.0     10.5         13\n5   15.0    8          429.0          198.0     4341.0     10.0         13\n6   14.0    8          454.0          220.0     4354.0      9.0         13\n7   14.0    8          440.0          215.0     4312.0      8.5         13\n8   14.0    8          455.0          225.0     4425.0     10.0         13\n9   15.0    8          390.0          190.0     3850.0      8.5         13\n```\n\n\nLater on, I have standardized the data using Zscore and then I want to REPLACE the outliers (not remove) with the median value of each column.\n\nI tried doing this:\n\n```\nmedian = cars_numz_df.median()\nstd = cars_numz_df.std()\nvalue = cars_numz_df\n\noutliers = (value - median).abs() > 2*std\n\ncars_numz_df[outliers] = cars_numz_df[outliers].abs()\n\ncars_numz_df[outliers]\n\n\n    mpg cylinders   displacement    horsepower  weight  acceleration    age\n0   NaN 1.498191    NaN             NaN         NaN     NaN             NaN\n1   NaN 1.498191    NaN             NaN         NaN     NaN             NaN\n2   NaN 1.498191    NaN             NaN         NaN     NaN             NaN\n3   NaN 1.498191    NaN             NaN         NaN     NaN             NaN\n4   NaN 1.498191    NaN             NaN         NaN     NaN             NaN\n5   NaN 1.498191    2.262118        2.454408    NaN     NaN             NaN\n6   NaN 1.498191    2.502182        3.030708    NaN     2.384735        NaN\n7   NaN 1.498191    2.367746        2.899730    NaN     2.566274        NaN\n8   NaN 1.498191    2.511784        3.161685    NaN     NaN             NaN\n9   NaN 1.498191    1.887617        2.244844    NaN     2.566274        NaN\n```\n\n\nNow, I'm trying to replace the outliers with the median by doing this:\n\n```\ncars_numz_df[outliers] = median\n```\n\n\nbut I get this error:\n\n```\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-394-d48a51500f28> in <module>\n      9 cars_numz_df[outliers] = cars_numz_df[outliers].abs()\n     10 \n---> 11 cars_numz_df[outliers] = median\n     12 \n\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py         \nin __setitem__(self, key, value)\n   3112 \n   3113         if isinstance(key, DataFrame) or getattr(key, 'ndim', None) \n== 2:\n-> 3114             self._setitem_frame(key, value)\n   3115         elif isinstance(key, (Series, np.ndarray, list, Index)):\n   3116             self._setitem_array(key, value)\n\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py \nin _setitem_frame(self, key, value)\n   3161         self._check_inplace_setting(value)\n   3162         self._check_setitem_copy()\n-> 3163         self._where(-key, value, inplace=True)\n   3164 \n   3165     def _ensure_valid_index(self, value):\n\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py \nin _where(self, cond, other, inplace, axis, level, errors, try_cast)\n   7543 \n   7544                 _, other = self.align(other, join='left', axis=axis,\n-> 7545                                       level=level, \nfill_value=np.nan)\n   7546 \n   7547                 # if we are NOT aligned, raise as we cannot where \nindex\n\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py \nin align(self, other, join, axis, level, copy, fill_value, method, limit, \nfill_axis, broadcast_axis)\n   3548                                             method=method, \nlimit=limit,\n   3549                                             fill_axis=fill_axis,\n-> 3550                                             \nbroadcast_axis=broadcast_axis)\n   3551 \n   3552     @Appender(_shared_docs['reindex'] % _shared_doc_kwargs)\n\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py \nin align(self, other, join, axis, level, copy, fill_value, method, limit, \nfill_axis, broadcast_axis)\n   7370                                       copy=copy, \nfill_value=fill_value,\n   7371                                       method=method, limit=limit,\n-> 7372                                       fill_axis=fill_axis)\n   7373         else:  # pragma: no cover\n   7374             raise TypeError('unsupported type: %s' % type(other))\n\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py \nin _align_series(self, other, join, axis, level, copy, fill_value, method, \nlimit, fill_axis)\n   7469                     fdata = fdata.reindex_indexer(join_index, lidx, \naxis=0)\n   7470             else:\n-> 7471                 raise ValueError('Must specify axis=0 or 1')\n   7472 \n   7473             if copy and fdata is self._data:\n\nValueError: Must specify axis=0 or 1\n```\n\n\nPlease advise, how can I replace the outliers with column median.\n    ", "Answer": "\r\nI don't have access to the dataset proposed in the question and therefore construct a randomized set of data.\n\n```\nimport pandas as pd\nimport random as r\nimport numpy as np\n\nd = [r.random()*1000 for i in range(0,100)]\ndf = pd.DataFrame({'Values': d})\n\nmedian = df['Values'].median()\nstd = df['Values'].std()\noutliers = (df['Values'] - median).abs() > std\ndf[outliers] = np.nan\ndf['Values'].fillna(median, inplace=True)\n```\n\n\nFWIW, clipping and winsorization should also be considered when trying to scoot outliers to somewhere useful.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Correct implementation of the Median of two sorted arrays\r\n                \r\nI just tested myself on implementing median of two sorted arrays like described here: http://www.youtube.com/watch?v=_H50Ir-Tves.\nIs this implementation correct? Thank you in advance. Katarina\n\nPS: the algorithm compute() returns 7 for the passed arrays. if I merge both arrays and detect the median by calling median() method directly the value 7 is returned again. So I assume that this algorithm behaves correctly but maybe there are some border cases and circumstances when it doesn't work. Can you give me feedback whether this implementation is correct?\n\npublic class Median {\n\n```\npublic static class MedianDetector {\n\n    public MedianDetector() {}\n\n    public int median( int[] arr) {\n        if( arr.length == 1 ) return 0;\n        int rest = arr.length%2;\n        return arr.length/2+rest;       \n    }\n\n    public int compute( int[] a, int[] b ) {\n        int aMed = median(a);\n        int bMed = (a.length+b.length)/2-aMed; //median finding formula\n\n        if( a.length == 1)\n            return a[0];\n        if( b.length == 1) \n            return b[0];\n\n        if( b[bMed] <= a[aMed] && a[aMed] <= b[bMed+1] ) {\n            return a[aMed];\n        } else\n        if( a[aMed] <= b[bMed] && b[bMed] <= b[bMed+1] ) {\n            int[] _a = new int[ a.length - aMed -1 ]; \n            System.arraycopy(a, aMed+1, _a, 0, _a.length);  \n            int[] _b = new int[ bMed];\n            System.arraycopy(b, 0, _b, 0, _b.length);   \n            return compute( _a, _b);\n        } else\n        if( b[bMed] <= b[bMed+1] && b[bMed+1] <= a[aMed]) {\n            int[] _a = new int[ aMed];\n            System.arraycopy(a, 0, _a, 0, _a.length);\n            int[] _b = new int[b.length - bMed-1];\n            System.arraycopy(b, bMed+1, _b, 0, _b.length);\n            return compute( _a, _b);                \n        } else{\n            throw new RuntimeException();\n        }\n    }\n\n}\n\npublic static void main(String[] args) {\n\n    int[] a = new int[] {1,2,3,3,3,3,4,5,6,7,8,9,9,9,9};\n    int[] b = new int[] {5,6,7,8,8,8,9};                                \n    System.out.println( (new MedianDetector()).compute(a,b) );  //returns 7\n\n    int[] total = new int[a.length+b.length];\n    System.arraycopy(a,0,total,0,a.length);\n    System.arraycopy(b,0,total,a.length,b.length);\n    //total list: [1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9]\n\n    List<Integer> totalList = new ArrayList<Integer>();\n    for( int t : total )\n        totalList.add(t);\n    Collections.sort(totalList);\n    System.out.println(totalList);      \n    System.out.println( (new MedianDetector()).median(total) );\n    System.out.println( totalList.get( (new MedianDetector()).median(total) ) ); //returns 7 as well\n}\n```\n\n\n}\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Bootstrap weighed median and confidence interval\r\n                \r\nI'm using the below code to bootstrap a confidence interval for a median, which works just fine.\n\n```\nlibrary(boot)\ndata <- c(6, 11, 7, 8, 3, 9, 4, 1, 1, 8, 2, 2, 5, 3, 1)\nweight <- c(0.839432605459112, 0.774215027235327, 0.709256693551626, 0.809376516981207, 0.809698716683444, 0.880849581474519, 0.829263837448813, 1.80390621483409, 1.12749447791778, 0.93389158146594, 1.07832286911631, 0.79541512406283, 1.06708509325217, 0.946752658104578, 0.968003233015867)\nMboot = boot(data, function(x,i) median(x[i]), R=10000)\nboot.ci(Mboot, conf = 0.95,  type = c(\"norm\", \"basic\" ,\"perc\"))\n```\n\n\nHowever, I would like to calculate the bootstrapped weighed median for this and only found how I can either calculate the weighed median or bootstrap it.\n    ", "Answer": "\r\nYou just have to multiply ```\ndata```\n by ```\nweight```\n and do bootstrap on the product.\n\n```\nlibrary(boot)\nMboot_w = boot(data * weight, function(x,i) median(x[i]), R=10000)\nMboot_w\nboot.ci(Mboot_w, conf = 0.95,  type = c(\"norm\", \"basic\" ,\"perc\"))\n```\n\n\n\n\nLet's break down the bootstrapping procedure. Essentially, the ```\nR=10000```\n produced 10000 samples with replacement of the product. \nThen the median of each bootstrap is computed.  You now have a sampling distribution of weighted medians.\n\n```\ndf <- data * weight\nweighted_medians <- replicate(10000, median(sample(df, length(df), replace = T)))\n```\n\n\nThe bootstrap weighted median is:\n\n```\nmedian(weighted_medians)\n```\n\n\nUsing quantiles, a 95% confidence interval is\n\n```\nquantile(boot_medians, c(.025, .975))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Java implementation of quickselect-median [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     This question appears to be off-topic because it lacks sufficient information to diagnose the problem. Describe your problem in more detail or include a minimal example in the question itself.\r\n                \r\n                    \r\n                        Closed 9 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nThere is implementation at\n\nhttp://www.java-tips.org/java-se-tips/java.lang/quickselect-implementation-with-median-of-three-partitioning-and-cutoff.html\n\nUsing Scala syntax\n\n```\nval arr = Array[Comparable[_]](1, 7, 10, 11, 3, 6, 0, 2, 9, 4, 8, 5)\nquickSelect(arr, 6)\nprintln(s\"${arr.mkString(\" \")} | ${arr(6)}\")\n```\n\n\nAnd output: 1 4 2 0 3 5 11 10 9 7 8 6 | 11 . So, median is 11 instead of 6. Does anybody know what is the bug in implementation?\n    ", "Answer": "\r\nLink you provided says that\n\n```\n* Quick selection algorithm.\n* Places the kth smallest item in a[k-1].\n```\n\n\n6th element in zero-based array is a[5]\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "HsqlDb percentile_cont/median\r\n                \r\nI am trying to query HSQL DB with percentile cont. Something like:\n\n```\nSELECT name, percentile_cont(0.5) WITHIN GROUP (ORDER BY measurement_value)...\n```\n\n\nBut it seems to me that HSQLDB just has the keyword, but not he implementation. In docs there is the keyword mentioned, but nowhere else except reserved words. And when I run the query, I get\n\n```\njava.lang.RuntimeException: org.hsqldb.HsqlException: user lacks privilege or object not found: PERCENTILE_CONT\n```\n\n\nMy motivation is to have one query calculating median, both executable in HSQLDB (for testing) and the exactly same query for Postgres (which does not have median aggregate)...\n\nDo you know about any query, which would calculate median in both databases, or do I need to create a custom aggregate function in Postgres?\n\nThanks\n\n(I am using latest HSQLDB 2.3.4)\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "MIT Scheme median procedure\r\n                \r\nHow would you go about defining a procedure to find the median of a list without using list-ref?  For example, ```\n(median '(1 2 2))```\n would return 2 and ```\n(median '(1 2 3 4 5 6))```\n would return 3.5.  You can assume that it is a list of sorted integers.\n\nThis is a homework question, so please don't post the actual code.  All I'm looking for is some hints or some pseudo code to help push me in the right direction.  As stated in the title I am using MIT Scheme. Thanks in advance.\n    ", "Answer": "\r\nDo you know how to use the tortoise-and-hare algorithm? If so, after your algorithm completes, your tortoise will be at the middle of the list.\n\nIf you're really stuck, I have a working implementation. Or, here's some pseudocode-like thing:\n\n```\n(define (median lst)\n  (if (null? lst) #f                         ;; oops, empty list\n      (let loop ((tortoise <???>)\n                 (hare <???>))\n        (cond ((eq? tortoise hare) #f)       ;; oops, circular list\n              ((null? hare) <???>)           ;; median value here\n              ((null? (cdr hare)) <???>)     ;; average of middle two elements\n              (else (loop <???> <???>))))))  ;; keep going\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Choosing the median as the pivot\r\n                \r\nI am trying to select the median as the pivot in this app but seems like I am doing something wrong. Any help will be greatly appreciated. \n\nI get the first few numbers in order and then towards the end. \n\n```\n    public class QuickSort {\n\n    public static void main(String[] args) {\n    int [] list = {1,3,2,4,6,5,8,7,9,0};\n    quickSort (list);\n\n    for (int i=0; i < list.length; i++)\n        System.out.print(list[i] + \" \");\n}\npublic static void quickSort(int [] list)\n{\n    quickSort(list, 0, list.length - 1);\n}\n\npublic static void quickSort (int[] list, int first, int last)\n{\n    int size = last - first + 1;\n    if (size > 3){\n        int median1 = median(list, first, last);\n        int partition1 = partition(list, first, last, median1);\n        quickSort(list, first, partition1 - 1);\n        quickSort(list, partition1 + 1, last);\n    }\n}\n    public static int median(int [] list, int first1, int last1){\n        int middle = (first1 + last1)/2;\n        if (list[first1] > list[middle])\n            swap(list, first1, middle);\n        if (list[first1] > list[last1])\n            swap(list, first1, last1);\n        if (list[middle] > list[last1])\n            swap(list, middle, last1);\n        swap(list, middle, last1 - 1);\n        return list[last1 - 1 ];\n    }\n    public static int partition(int [] list, int left, int right, long pivot) {\n        int leftPtr = left;\n        int rightPtr = right - 1; \n\n        while (true) {\n          while (list[++leftPtr] < pivot);\n\n          while (list[--rightPtr] > pivot);\n          if (leftPtr >= rightPtr) \n            break;\n          else\n            swap(list, leftPtr, rightPtr); \n        }\n        swap(list, leftPtr, right - 1);\n        return leftPtr; \n    }\n       public static void swap(int []list, int dex1, int dex2) {\n         int temp = list[dex1];\n         list[dex1] = list[dex2];\n          list[dex2] = temp;\n            }\n```\n\n\nI get some numbers in order, but not all of them.  \n    ", "Answer": "\r\nThere are usually two approaches you can use to computer programming.  You can either a)  Take something that works and start removing/changing stuff until you get what you like. or b)  Take the smallest case you can -- make it work -- and then keep on adding more complexicity.\nIn this case I suggest b) (FYI b) is usuall the best approach)\n\nIf you start with  int[] list = { 3, 1, }, you can see that your list doesn't get sorted correctly.\nThis is because your quickSort function is only sorting lists of size greater than 3.  In your case this condition should probably be \"size > 1\" -- though there may be some more things you need to do in order to get things working.\n\nThere's lot of info about QuickSort on wikipedia:\nhttp://en.wikipedia.org/wiki/Quicksort\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median in data.table R\r\n                \r\nI try to write a code to perform a task: \"Write a function purchases.median.order.price, which has one argument: purchases, and which returns the median order value (number).\n\nGrouping should be done using data.table. Records with a non-positive amount of purchased goods (returns) are ignored.\n\nPlease note that one record can correspond to several records - “positions” with the same ordernumber, and that when calculating the order value, it is necessary to take into account situations when the user bought several goods of the same type (their quantity is indicated in quantity).\"\n\n```\nsample.purchases <- data.table(price = c(100000, 6000, 7000, 5000000),\n                               ordernumber = c(1,2,2,3),\n                               quantity = c(1,2,1,-1),\n                               product_id = 1:4)\npurchases.median.order.price(sample.purchases)\n# 59500\n```\n\n\nI write:\n\n```\nlibrary(data.table)\nsample.purchases <- data.table(price = c(100000, 6000, 7000, 5000000),\n                               ordernumber = c(1,2,2,3),\n                               quantity = c(1,2,1,-1),\n                               product_id = 1:4)\n\nsample.purchases[quantity>0][, price*quantity, by=ordernumber]\n```\n\n\nBut it's wrong. I don't know how should I find out median?\n    ", "Answer": "\r\nManually by hand: \n\n```\npurchases.median.order.price <- function(x){\n  x <- order(x);\n  n <- length(x) - 1;\n  n2 <- (n/2) + 1; \n  sum(x[c(floor(n2), ceiling(n2))])/2\n}\n```\n\n\nAlternative you could write a function that just calls ```\nmedian```\n or ```\nquantile```\n.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Is there any example of the median for IR?\r\n                \r\nI've heard that some information retrieval techniques use the median as an aggregation operator. Is it possible to use the median to merge ranked lists of documents? Could you specify some examples?\nThanks.\n    ", "Answer": "\r\nThe median has been used extensively in Machine Learning techniques. It is a good option when we search for a representative value of the sample which discards outliers.\nThe median has been considered in the Ranking Fusion context, where a set of rankings is presented and the aim is to find a representative ranking from the set. In this article \"A Theoretical Study on Six Classifier Fusion Strategies\" of L. Kuncheva it can be seen a theoretical comparison between the most common statistics: mean, max, min, median, etc.\nThere are many more contexts where the median is used, not as a main objective, but rather as a intermediate result to reach another objective.\nHope it will be helpful!\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding median in AVL tree\r\n                \r\nI have an AVL tree in which I want to return the median element in O(1).\nI know I can save a pointer to it every time I insert new element without changing the runtime of the insertion (by saving the size of the subtrees and traversing until I find the n/2'th size subtree).\nBut I want to know if I can do this using the fact that in every insertion the median shifts \"to the right\", and in every deletion the median shifts \"to the left\".\nIn a more general manner: How can I keep track of the i'th element in an AVL tree using predecessor and successor? \n    ", "Answer": "\r\nGiven an AVL (self balanced binary search tree), find the median. Remember you can't just take the root element even if the tree is balanced because even with the tree balanced you don't know if the median is exactly the root element on a left or right son. Iterative algorithm used to find the median of an AVL. This algorithm is based on a property of every AVL tree, you can get a sorted collection containing the elements of this tree using an in order traversal. Using this property we can get a sorted collection of nodes and then find the median. The complexity order of this algorithm is O(N) in time and space terms where N is the number of nodes in the tree.\n\n```\npublic class AvlTreeMedian {\n\n  BinaryTreeInOrder binaryTreeInOrder;\n\n  public AvlTreeMedian() {\n    this.binaryTreeInOrder = new BinaryTreeInOrder();\n  }\n\n  public double find(BinaryNode<Integer> root) {\n    if (root == null) {\n      throw new IllegalArgumentException(\"You can't pass a null binary tree to this method.\");\n    }\n\n    List<BinaryNode<Integer>> sortedElements = binaryTreeInOrder.getIterative(root);\n    double median = 0;\n    if (sortedElements.size() % 2 == 0) {\n      median = (sortedElements.get(sortedElements.size() / 2).getData() + sortedElements.get(\n          sortedElements.size() / 2 - 1).getData()) / 2;\n    } else {\n      median = sortedElements.get(sortedElements.size() / 2).getData();\n    }\n    return median;\n  }\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Change Median Color geom_boxplot [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has an answer here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Change color median line ggplot geom_boxplot()\r\n                            \r\n                                (1 answer)\r\n                            \r\n                    \r\n                Closed 6 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nIs there a command to Change the colour of the median line in boxplots that were produced using ggplot2/geom_boxplot?\n    ", "Answer": "\r\nif you want to change the colour of all lines, you can use this:\n\n```\nggplot(mpg, aes(class, hwy))+ geom_boxplot(colour = \"red\")\n```\n\n\nif you just want to change the colour of the median, you can use the answer from here:\n\nChange color median line ggplot geom_boxplot()\n\nit adds a layer with ```\ngeom_segment```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of specific transactions\r\n                \r\nI have the following sheet:\n\n\n\nI would like to take the median for all rows with a ```\nK```\n.\n\nI know how to take the median of all transactions. The hard part for me is \"search for ```\nK```\n and take only this transactions\".\n\nAny recommendations how to solve this?\n\nI appreciate your answer!\n    ", "Answer": "\r\nsomething like this should work:\n\n```\n=MEDIAN(IF(A2:A16=\"K\",B2:B16))\n```\n\n\nand press CTRL+SHIFT+ENTER to evaluate it\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Vector Median of Rows in Google Sheets\r\n                \r\nI have a matrix, of which I would like to calculate the median row-wise, to obtain a vector in which each element is the median of each row. For example {1,2,3;4,5,6} would result in \n\n```\nMedianRowWise{1,2,3;4,5,6} = {2;5}\n```\n\n\nThe current median formula of Google Sheets instead calculates only one median value for all of the 6 values = 3.5\n    ", "Answer": "\r\nthese days you can use:\n```\n=BYROW(A1:C2, LAMBDA(xx, MEDIAN(xx)))\n```\n\n\neven:\n```\n=BYROW({1,2,3;4,5,6}, LAMBDA(xx, MEDIAN(xx)))\n```\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Computing Median. Where is the error?\r\n                \r\nI want to compute median of the following density. But it's not working.\n\n```\n  f <- function(x)(3/7)*x^2\n\n  r <- rep(0,5000)\n  x=seq(1,2,length=5000)\n\n for(i in 1:5000){\n    r[i]=integrate(f,lower=1,upper=x[i])$value\n  }\n\n d <- data.frame(x,r)\n med <- d$x[d$r==0.5]\n med\n```\n\n    ", "Answer": "\r\nNo elements of ```\nd$r```\n equal exactly 0.5.\nI suspect that you need something like:\n\n```\nmed <- d$x[d$r>=0.5 & d$r <=0.501]\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median doesn't work after group_by in r function\r\n                \r\nI wrote a r function to compute the median by group:\n```\nvarA<-rep(c(1:2),times=30)\ndf1<-data.frame(varA)\ndf1$var1 <- sample(500:1000, length(df1$varA))\ndf1 <- df1 %>% mutate(outcome=ifelse(varA==1, \"Yes\", \"No\"))\n\nctn_me<- function(df, var, group_var) {\n  df[[group_var]]<-as.character(df[[group_var]])\n  # df[[var]]<-as.numeric(df[[var]])\n  tbl1<-df %>%\n    bind_rows(mutate(., !!group_var := 'Total')) %>%\n    dplyr::group_by(gpvar=.[[group_var]])%>%\n    dplyr::summarise(\n      median=median(.[[var]], na.rm = TRUE), \n      N = n())\n  print(tbl1)\n}\n\nctn_me(df1, \"var1\", \"outcome\")\n```\n\nIt gave me results like this:\n```\n#### gpvar median   N\n#### <chr>  <dbl> <int>\n#### 1 No       734    30\n#### 2 Total    734    60\n#### 3 Yes      734    30\n```\n\nSo it can count the number of rows within each group, but for the median, it returned the overall median instead by the group.\nThis gave me the results I wanted:\n```\ndf1 %>% bind_rows(mutate(., outcome := 'Total')) %>%\n  dplyr::group_by(outcome)%>%\n  dplyr::summarise(\n    median=median(var1, na.rm = TRUE), \n    N = n())\n\n# A tibble: 3 x 3\n#   outcome median     N\n#   <chr>    <dbl> <int>\n# 1 No        713     30\n# 2 Total     734     60\n# 3 Yes       788.    30\n\n```\n\nI was trying to figure out what was wrong with my r function. Can anyone let me know? Thanks!\n    ", "Answer": "\r\nThe docs state that you need to specifically reference \".data\" within the ```\nsummarise()```\n function:\n\n\"When you have an env-variable that is a character vector, you need to\nindex into the .data pronoun with [[, like summarise(df, mean =\nmean(.data[[var]])).\"\n\nIn this case, you need to change .[[variable]] to .data[[variable]], i.e.\n```\nlibrary(tidyverse)\nset.seed(123)\nvarA<-rep(c(1:2),times=30)\ndf1<-data.frame(varA)\ndf1$var1 <- sample(500:1000, length(df1$varA))\ndf1 <- df1 %>% mutate(outcome=ifelse(varA==1, \"Yes\", \"No\"))\n\nctn_me <- function(df, var, group_var) {\n  df %>%\n    bind_rows(mutate(., !!group_var := \"Total\")) %>%\n    group_by(gpvar = .[[group_var]]) %>%\n    summarise(\n      median_group = median(.data[[var]], na.rm = TRUE), \n      N = n()\n      )\n}\n\nctn_me(df1, \"var1\", \"outcome\")\n#> # A tibble: 3 × 3\n#>   gpvar median_group     N\n#>   <chr>        <dbl> <int>\n#> 1 No            740.    30\n#> 2 Total         754     60\n#> 3 Yes           776.    30\n```\n\nCreated on 2022-07-19 by the reprex package (v2.0.1)\n\nOriginal answer:\nIf you use a different syntax inside the ```\nsummarise()```\n function it works as expected, so I think it's something to do with the ```\nsummarise()```\n function:\n```\nlibrary(tidyverse)\nset.seed(123)\nvarA<-rep(c(1:2),times=30)\ndf1<-data.frame(varA)\ndf1$var1 <- sample(500:1000, length(df1$varA))\ndf1 <- df1 %>% mutate(outcome=ifelse(varA==1, \"Yes\", \"No\"))\n\nctn_me <- function(df, var, group_var) {\n  df %>%\n    bind_rows(mutate(., !!group_var := \"Total\")) %>%\n    group_by(gpvar = .[[group_var]]) %>%\n    summarise(\n      median_group = median(!!sym(var), na.rm = TRUE), \n      N = n()\n      )\n}\n\nctn_me(df1, \"var1\", \"outcome\")\n#> # A tibble: 3 × 3\n#>   gpvar median_group     N\n#>   <chr>        <dbl> <int>\n#> 1 No            740.    30\n#> 2 Total         754     60\n#> 3 Yes           776.    30\n```\n\nCreated on 2022-07-19 by the reprex package (v2.0.1)\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Rolling median for a large dataset - python\r\n                \r\nI have a huge file with 200K lines, I need to find out the rolling median by counting distinct words in each line.\n\nI have used numpy to calculate median as below\n\n```\n   a = np.array([])\n   np.insert(a, 0, len(unique_word_list_by_line))\n   median = np.median(a)\n```\n\n\nI feel that this is not efficient as numpy creates a new array everytime i insert an element. Is there a way to insert an element into a numpy array inplace?\n\nThanks\n    ", "Answer": "\r\nIt is never good to dynamically fill a numpy array, it involves resizing and copying.\n\nThe rolling median is not trivial as it seems.\nThis blog article talks about different implementations such as Skip list.\n\nEDIT: It seems you use pandas. In pandas an implementation using skip lists and skipping NaN in already implemented. Have a look here.\n\nA recipe for its implementation in pure python can also be found here.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of 2-D Matrix (Minesweeper)\r\n                \r\nI am trying to solve this assignment but not able to figure out the logic on how to get the median here.\n\nQuestion:- Find the median of a 2D-Matrix. (which is a Minesweeper game's result). Only horizontal and vertical values (1's) are counted. (Please click on the link for sample results).\n\nQuestion\n\nSolution:-\n\n```\npublic static int findMedian2(int[][] matrix)\n{\n    int size = 0;\n    for(int i = 0; i < matrix.length; i++)\n    {\n        for(int j = 0; j < matrix[i].length; j++)\n        {\n            if(matrix[i][j] == 1)\n            {\n                size++;\n                dfs(matrix, i, j);\n            }\n        }\n    }\n    return size;\n}\nprivate static void dfs(int[][] grid, int r, int c)\n{\n    if(r < 0 || r >= grid.length || c < 0 || c >= grid[r].length || grid[r][c] == 0)\n        return;\n\n    grid[r][c] = 0;\n    dfs(grid, r - 1, c);\n    dfs(grid, r + 1, c);\n    dfs(grid, r, c - 1);\n    dfs(grid, r, c + 1);\n}\n```\n\n\nSo far I am able get the size. The size does not really give the right answer here, how do I achieve the median? I am new to matrix related problems. Any help would be greatly appreciated.\n\nUpdate:-\nBased on @Mike'Pomax'Kamermans's input I could come up with this:-  \n\n```\nstatic int count;\nstatic List<Integer> list = new ArrayList<Integer>();   \npublic static int findMedian(int[][] matrix) \n{\n    count = 0;\n    for (int i = 0; i < matrix.length; i++)\n    {\n        for (int j = 0; j < matrix[i].length; j++) \n        {\n            if (matrix[i][j] == 1) \n            {\n                dfs(matrix, i, j);\n                if (count != 0 && count != 1) \n                {\n                    list.add(count);\n                }\n                count = 0;\n            }\n        }\n    }\n    // convert list to array\n    int[] array = list.stream().mapToInt(i -> i).toArray();\n    return findMedian(array);\n}\nprivate static void dfs(int[][] grid, int r, int c)\n{       \n    if(r < 0 || r >= grid.length || c < 0 || c >= grid[r].length || grid[r][c] == 0)\n        return;\n    grid[r][c] = 0;        \n    dfs(grid, r - 1, c);\n    dfs(grid, r + 1, c);\n    dfs(grid, r, c - 1);\n    dfs(grid, r, c + 1);\n    count++;\n}\n/* Median of Unsorted Array to match the results */\nprivate static int findMedian(int[] a) \n{\n    // check for even case\n    if (a.length % 2 != 0) \n    {\n        return a[a.length / 2];\n    }\n    return (a[(a.length - 1) / 2] + a[a.length / 2]) / 2;\n}   \n```\n\n\nWill this be the correct way to calculate median for this question?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median for every nth values in Matlab\r\n                \r\nI don't have much experience with Matlab.\nI have a row vector with 17497 elements and I would like to create a loop to get the median of every 120 values. \n\nSo, the median of value 1:120, then the next median of values 121:240 and so on.\n\nCould somebody help me?\n\nThanks in advance,\nSunna\n    ", "Answer": "\r\nYou could use ```\naccumarray```\n\n\n```\nN = 17497;\ndata = rand(N,1);\n%# array with 1,1,1,2,2,2 etc\nidx = floor((0:N-1).'/120)+1;\n%# create median for groups of 120 data points\n%# discard the last one if needed as it's <120 points\nout = accumarray(idx,data,[],@median);\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "IDL - calculating Median\r\n                \r\nHow to calculate a median for the histogram below? The \"n_p\" variable is double and the \"np_omni\" variable is float. But I am not sure what the \"h\" variable represents. I am still confused about the data types.\n\n\n    ", "Answer": "\r\nThe output of ```\nHISTOGRAM```\n is an [N]-element array of counts for an [N]-element array of bin locations (i.e., the ```\nLOCATIONS```\n keyword you used).  If you use the ```\nMEDIAN```\n function on ```\nh```\n, the result would be the median of the counts in all these bins, not the median of the ```\nn_p```\n variable.  To find the median of the ```\nn_p```\n variable, do the following:\n```\nnpmd = MEDIAN(n_p)\n```\n\n(or include the array of indices from ```\nind```\n if you only want that subset of values to calculate the median)\nThe float and double datatypes refer to single- and double-precision floating point numbers.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Annual median from daily measurements\r\n                \r\nI have a series of day-level animal counts (some days have multiple measurements, some have none) over a course of a year. There's a temporal trend, and the variability depends on the y value (=higher when counts are high). I need to estimate a total annual median with 95% confidence intervals. Of the things I tried: estimate daily median (from a model, which also predicts medians for non-sampled days), then do bootstrapping within each day to get daily 95% CIs (as % of estimated median). Calculate annual median % CIs, and apply to the sum of daily medians to get a yearly % CI. This would have worked, but I have too few samples per day to make the bootstrap defensible.  \n\nShould I just resample the data and refit the model to get (say) 1,000 daily estimated medians, then use those to calculate daily 95% CIs?\n\nSimulated data with similar structure to mine:\n\n```\nset.seed(0)\nx <- 1:365\nid <- sample(1:365, 200, replace = TRUE)\ny0 <- exp(-1 + 0.1 * x[id] - 0.0004 * x[id]^2)\ny <- y0 + rnorm(200, 0, y0/5)\nplot(x[id], y)\n```\n\n\nAny advice?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Plotting median concentration profiles with median abs deviation error bars\r\n                \r\nI would like to plot a concentration time profiles.\nI would like to color code them based on dose they have received. I would like to plot the median with absolute deviation\n\n```\nggplot(s1, aes(x=Time_plotting, y=DV,group=Dose)) +\n  geom_point(aes(color=Dose,group=ID, size=0.5)) +\n  scale_y_log10() +\n  aes(colour = factor(Dose)) +\n  stat_summary(fun = median, size = 1, geom = \"line\")\n```\n\n\nI am not able to get the error bars - for the median absolute deviation\n\nAnother code i am trying is :\n\n```\nggline(s1, x = \"Time_plotting\", y = \"DV\", group=\"Dose\",\n       color=\"Dose\", add = c(\"mean_se\", \"jitter\")) +\n  yscale(\"log10\", .format = F)\n```\n\n\nIn this i am not able to format the error bars ( i.e. thickness of error bars)\n\nAny help is appreciated\nData set below:\n\n```\nID  Time    DV  DOSE\n4   1   1.60472 100\n4   2   2.1966  100\n4   5   2.1308  100\n4   24  2.16802 100\n4   48  0.86095 100\n4   96  0.23258 100\n4   167 0.06926 100\n5   1   5.50896 100\n5   2   2.69488 100\n5   5   3.09892 100\n5   24  1.95585 100\n5   48  1.46283 100\n5   96  0.71468 100\n5   167 0.43407 100\n6   1   1.22955 100\n6   2   1.63334 100\n6   5   1.4473  100\n6   24  1.2653  100\n6   48  0.74203 100\n6   96  0.60834 100\n6   167 0.40537 100\n7   1   1.35535 3000\n7   2   1.26192 3000\n7   5   1.11097 3000\n7   24  0.63865 3000\n7   48  0.60376 3000\n7   96  0.44549 3000\n7   167 0.23607 3000\n8   1   53.68163    3000\n8   2   7.23886 3000\n8   5   2.67029 3000\n8   24  2.2195  3000\n8   48  1.55476 3000\n8   96  1.1146  3000\n8   167 1.16763 3000\n9   1   1.97089 3000\n9   2   2.11302 3000\n9   5   1.84818 3000\n9   24  1.80047 3000\n9   48  1.18394 3000\n```\n\n    ", "Answer": "\r\nHere's an approach with ```\nmedian_mad```\n from ```\nggpubr```\n. The trick is to call ```\nstat_summary```\n twice. Also note that ```\nposition_dodge```\n allows you to see the error bars when they are on top of each other.\n\n```\nlibrary(ggplot2)\nlibrary(ggpubr)\nggplot(s1, aes(x=Time, y=DV,color=as.factor(DOSE), group = as.factor(DOSE))) +\n  geom_point() +\n  scale_y_log10() +\n  stat_summary(fun = median,\n               size = 1,\n               geom = \"line\",\n               position = position_dodge(5)) +\n  stat_summary(fun.data = median_mad,\n               geom = \"errorbar\",\n               width = 10,\n               position = position_dodge(5)) +\n  labs(color = \"Dose\") +\n  scale_color_manual(values = c(\"firebrick3\",\"cornflowerblue\"))\n```\n\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median values in T-SQL\r\n                \r\nFor even rows, the formula for median is (104.5 + 108)/2 for the table below and for odd rows it is 108 for table below:\n\n```\nTotal       Total\n\n100         100\n101         101\n104.5       104.5\n108         108\n108.3       108.3\n112         112\n            114\n```\n\n\nI wrote this query, and it is calculating the correct median when\nthe number of rows are odd:\n\n```\nWITH    a AS ( SELECT   Total ,\n                        ROW_NUMBER() OVER ( ORDER BY CAST(Total AS FLOAT) ASC ) rownumber\n               FROM     [Table] A\n             ),\n        b AS ( SELECT TOP 2\n                        Total ,\n                        isodd\n               FROM     ( SELECT TOP 50 PERCENT\n                                    Total ,\n                                    rownumber % 2 isodd\n                          FROM      a\n                          ORDER BY  CAST(Total AS FLOAT) ASC\n                        ) a\n               ORDER BY CAST(total AS FLOAT) DESC\n             )\n    SELECT  *\n    FROM    b\n```\n\n\nWhat is the general T-SQL query to find the median in\nboth situations? Like when the number of rows are odd and\nalso when the number of rows is even?\n\nCould my query be twisted so that it can work for the median in both even and odd number of rows situations?\n    ", "Answer": "\r\nI wrote a blog about Mean, Median and Mode a couple years ago.  I encourage you to read it.\n\nCalculating Mean, Median, and Mode with SQL Server\n\n```\nSELECT ((\n        SELECT TOP 1 Total\n        FROM   (\n                SELECT  TOP 50 PERCENT Total\n                FROM    [TABLE] A\n                WHERE   Total IS NOT NULL\n                ORDER BY Total\n                ) AS A\n        ORDER BY Total DESC) +\n        (\n        SELECT TOP 1 Total\n        FROM   (\n                SELECT  TOP 50 PERCENT Total\n                FROM    [TABLE] A\n                WHERE   Total IS NOT NULL\n                ORDER BY Total DESC\n                ) AS A\n        ORDER BY Total ASC)) / 2\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Counting median of character variables\r\n                \r\nI have the following data set:\n\n```\nDate       Company      State\nJan05     Coca-Cola      TX     \nJan05     Coca-Cola      TX \nJan05     Coca-Cola      DE     \nJan05     Apple          DE \nJan05     Apple          DE \nJan05     Apple          DE\nJan05     Microsoft      DE\nFeb05     McDonald       MD \nFeb05     McDonald       MD \nFeb05     McDonald       MD\nFeb05     McDonald       MD \nFeb05     McDonald       MD \nFeb05     Microsoft      MD   \nJan06     Apple          DE\nJan06     Apple          DE\nJan06     Apple          DE\nJan06     Apple          DE \nJan06     Apple          DE \nJan06     Apple          DE\nJan06     Apple          DE    \nFeb06     McDonald       MD \nFeb06     McDonald       MD \nFeb06     McDonald       MD\nFeb06     McDonald       MD \nFeb06     McDonald       MD \nFeb06     Lenova         MD \nFeb06     Lenova         MD\nJan07     Apple          DE\nJan07     Apple          DE\nJan07     Apple          DE \nJan07     Microsoft      DE     \nJan07     Lenovo         DE  \nJan07     Apple          DE\nJan07     Apple          DE\nFeb07     TJmax          TX\nFeb07     TJMax          TX\nFeb07     TJMax          TX\nFeb07     TJMax          MD\nFeb07     TMax           MD\nFeb07     TJMax          MD\nFeb07     TJMax          MD\n```\n\n\nWhat I am trying to do is calculate a 12 month median growth rate per Company from Jan05 to Jan06, then from Jan06 to Jan07, February05 to February06, then from February06 to February07 for each State and so on for the other dates BUT only if the company is available on both dates. I obviously cannot calculate a median growth rate for a company that doesn't exist on both dates. For example, I can calculate the median growth rate of McDonald from Feb05 to Feb06, and Lenovo from Jan06 to Jan07 for the state of MD. The median number is basically the number of times each Company is mentioned (sort of like a count variable).\n\nWhat I have thought of doing so far: I could create a separate data set for each State, and then create a count variable that calculates the number of times each Company is mentioned and take the median of it. But I assume there is a more efficient way to do this in a do loop. \n\nWhat is the best way to do this in SAS?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating median based on segments in r [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Calculate group mean, sum, or other summary stats. and assign column to original data\r\n                            \r\n                                (4 answers)\r\n                            \r\n                    \r\n                Closed 5 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nHi I want to calculate the median of certain values based on the segment they fall into which we get by another column. The initial data structure is like given below:\n\n```\nColumn A    Column B  \n559         1  \n559         1  \n322         1  \n661         2  \n661         2  \n662         2  \n661         2  \n753         3  \n752         3  \n752         3  \n752         3  \n752         3  \n328         4  \n328         4  \n328         4  \n```\n\n\nThe calculated medians would be based on column A and the output would look like this:\n\n```\nColumn A    Column B    Median\n559         1           559\n559         1           559\n322         1           559\n661         2           661\n661         2           661\n662         2           661\n661         2           661\n753         3           752\n752         3           752\n752         3           752\n752         3           752\n752         3           752\n328         4           328\n328         4           328\n328         4           328\n```\n\n\nMedian is calculated based on column A and for the set of values of column B which are same. For example we should calculate medians of all values of column A where column B values are same and paste them in the column Median.\n\nI need to do this operation in r but haven'e been able to crack it. Is there a way to do this through dplyr or any other package?\n\nThanks\n    ", "Answer": "\r\nyou can use the ```\nlibrary(data.table)```\n and then put your ```\ndata```\n in a ```\ndata.table```\n\n\n```\ndt <- as.data.table(data)\ndt[,Median:=median('Column A'),by=\"Column B\"]```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Array Median If statement not working\r\n                \r\nI have a Median If Array formula that brings back one of the results from the list rather than calculating the median of the values. Below is the formula. I think the issue may be caused by the formula referring to entire columns and not including an if statement related to <>\"\", but have not been successful figuring out where that would go. Any thoughts are much appreciated! \n\n{=IFERROR(MEDIAN(IF(Raw!$L:$L=$A3,IF(Raw!$B:$B=$D$1,IF($B3=\"mg/L\",Raw!$M:$M,Raw!$N:$N)))),\"No Data\")}\n\nI want the formula to do the following: \"If the common name in A3 matches a value in Raw L, and if the sample station in D1 matches a value in Raw B, and if the units in B3 are \"mg/L\", then calculate the median of the results in Raw M. Otherwise if the units are not \"mg/L, then calculate the median from the results in Column N. If there are no results at all, then state \"No Data\" in the cell. \n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median for every nth values in Matlab\r\n                \r\nI don't have much experience with Matlab.\nI have a row vector with 17497 elements and I would like to create a loop to get the median of every 120 values. \n\nSo, the median of value 1:120, then the next median of values 121:240 and so on.\n\nCould somebody help me?\n\nThanks in advance,\nSunna\n    ", "Answer": "\r\nYou could use ```\naccumarray```\n\n\n```\nN = 17497;\ndata = rand(N,1);\n%# array with 1,1,1,2,2,2 etc\nidx = floor((0:N-1).'/120)+1;\n%# create median for groups of 120 data points\n%# discard the last one if needed as it's <120 points\nout = accumarray(idx,data,[],@median);\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Background subtraction using median in time\r\n                \r\nI need to perform background subtraction in matlab.\nI have a short video of a man crossing over a wall from right to left, so it is a simple and quite stable video.\n\nI learned about a method to estimate the background using median in time: we need to take some window of frames (let's say - 25 frames), and perform a median over time so we can get the \"median image\" which should be a good estimation for the BG (in that kind of video, for a large enough window, the presence of the moving object should be negligible with regards to the BG for a BG pixel). once we have the BG estimation we\\ll be able to subtract it from a frame, etc.\n\nMy questions are:\n\n\nIf my video is an RGB video - how do I perform the median operation? I tried using the Hue channel of each frame, but it doesn't work (see my code below).\nbasically - what's the simplest way to do it? I'm not sure about the quality of my implementation and would like to get some advise... thanks\n\n\nEDIT: the video I'm using is pretty similar to the ones that can be found here under \"Classification database\" --> \"walk\".\n\n\n\n```\nK = 31; % window size\nhalf_win = (K+1)/2;\nthresh = 0.7; % threshold for the subtraction\n\nreader = VideoReader('input.avi');\nwriter  = VideoWriter('bianry.avi');\nopen(writer);\n\nwindow = cell(1,K);\n% handling first frame\n[h,~,~] = rgb2hsv(im2single(readFrame(reader)));\nwindow{half_win} = h;\nk = 1;\n% mirror padding of frames\nwhile hasFrame(reader)\n    if k == half_win\n        break\n    end\n    [h,~,~] = rgb2hsv(im2single(readFrame(reader)));\n    window{half_win + k} = h;\n    window{half_win - k} = h;\n    k = k + 1;\nend\nn = ndims(window{1});\nbg = median(cat(n+1, window{:}), n+1);\nfg = abs( window{half_win} - bg ) > thresh;\nwriteVideo(writer, im2uint8(fg));\n\nwhile hasFrame(reader)\n     [h,~,~] = rgb2hsv(im2single(readFrame(reader)));\n    % update window\n    window(1:K-1) = window(2:K);\n    window{K} = h;\n    bg = median(cat(n+1, window{:}), n+1);\n    fg = abs( window{half_win} - bg ) > thresh;\n    writeVideo(writer, im2uint8(fg));\nend\n\n% mirror padding for the end of the video\nind = K-1;\nfor k=1:(half_win - 1)\n    frame_to_mirror = window{ind};\n    window(1:K-1) = window(2:K);\n    window{K} = frame_to_mirror;\n\n    bg = median(cat(n+1, window{:}), n+1);\n    fg = abs( window{half_win} - bg ) > thresh;\n    writeVideo(writer, im2uint8(fg));\n    ind = ind -2;\nend\n\nclose(writer);\n```\n\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to compute median value of sales figures?\r\n                \r\nIn MySQL while there is an AVG function, there is no Median. So I need to create a way to compute Median value for sales figures.\n\nI understand that Median is the middle value. However, it isn't clear to me how you handle a list that isn't an odd numbered list. How do you determine which value to select as the Median, or is further computation needed to determine this? Thanks!\n    ", "Answer": "\r\nI'm a fan of including an explicit ORDER BY statement:\n\nSELECT t1.val as median_val \n\nFROM (\n\nSELECT @rownum:=@rownum+1 as ```\nrow_number```\n, d.val\n  FROM data d,  (SELECT @rownum:=0) r\n  WHERE 1\n  -- put some where clause here\n  ORDER BY d.val\n) as t1, \n\n(\n  SELECT count(*) as total_rows\n  FROM data d\n  WHERE 1\n  -- put same where clause here\n) as t2\nWHERE 1\nAND t1.row_number=floor(total_rows/2)+1;\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "SAS surveymeans median\r\n                \r\nI have a survery data set and would like to do a basic domain analysis. If I'm interested in the median of age. After using SAS codes:\n     proc surveymeans data=survey mean median;\n     domain population;\n     weight weight;\n     var age;\n     run;\n\nI got WARNING: Quantiles are not available for domain analysis.\nIs there alternative for this ? I current using SAS 9.3 SAS/STAT9.3\n\nThanks!\n    ", "Answer": "\r\nSAS doesn't permit explicit calculation of the quantiles (including Median) through SURVEYMEANS in SAS until SAS Analytics 13.1 (which is available with SAS 9.4).  See this note for more information.\n\nThere are options for calculating it yourself; see for example this thread.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating median based on segments in r [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        Calculate group mean, sum, or other summary stats. and assign column to original data\r\n                            \r\n                                (4 answers)\r\n                            \r\n                    \r\n                Closed 5 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nHi I want to calculate the median of certain values based on the segment they fall into which we get by another column. The initial data structure is like given below:\n\n```\nColumn A    Column B  \n559         1  \n559         1  \n322         1  \n661         2  \n661         2  \n662         2  \n661         2  \n753         3  \n752         3  \n752         3  \n752         3  \n752         3  \n328         4  \n328         4  \n328         4  \n```\n\n\nThe calculated medians would be based on column A and the output would look like this:\n\n```\nColumn A    Column B    Median\n559         1           559\n559         1           559\n322         1           559\n661         2           661\n661         2           661\n662         2           661\n661         2           661\n753         3           752\n752         3           752\n752         3           752\n752         3           752\n752         3           752\n328         4           328\n328         4           328\n328         4           328\n```\n\n\nMedian is calculated based on column A and for the set of values of column B which are same. For example we should calculate medians of all values of column A where column B values are same and paste them in the column Median.\n\nI need to do this operation in r but haven'e been able to crack it. Is there a way to do this through dplyr or any other package?\n\nThanks\n    ", "Answer": "\r\nyou can use the ```\nlibrary(data.table)```\n and then put your ```\ndata```\n in a ```\ndata.table```\n\n\n```\ndt <- as.data.table(data)\ndt[,Median:=median('Column A'),by=\"Column B\"]```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find Median in a colored range\r\n                \r\nI have the following issue to solve in Excel 2010 VBA code\n\nIn ```\nRange(\"A:A\")```\n I have lots of numeric values. Only some of them are highlighted in color.  (```\nindex = 6```\n [yellow]). I need Excel VBA code to obtain the Median between the yellow highlighted values and leave the non highlighted cells outside the computation.\n\nI have made code tries but it always gives me the first value in the highlighted range and not the Median value of the range. \n\n```\nDim amarelosMediana As Range\nDim mediana As Double\n\nFor Each amarelosMediana In Range([a1], Cells(Rows.count, \"A\").End(xlUp))\n    If amarelosMediana.Interior.ColorIndex = 6 Then\n        mediana = Application.WorksheetFunction.Median(amarelosMediana)\n    End If\nNext amarelosMediana\n\nActiveSheet.Range(\"C3\") = \"Mediana no intervalo de confianca\"\nActiveSheet.Range(\"D3\") = mediana\n```\n\n\nAs you can see I used ```\nApplication.WorksheetFunction.Median(amarelosMediana)```\n as stated in some tutorials here in stackoverflow to obtain the Median value, but it doesn't work.\n\nAny ideas ??\n    ", "Answer": "\r\nEdit:  Fixed some syntax.  You have to pass all the highlighted cells into one master range then run the function on the master range.\n\n```\nSub Macro1()\nDim amarelosMediana As Range\nDim tempRng As Range\nDim mediana As Double\n\nSet tempRng = Nothing\nFor Each amarelosMediana In Range([a1], Cells(Rows.Count, \"A\").End(xlUp))\n    If amarelosMediana.Interior.ColorIndex = 6 Then\n        If tempRng Is Nothing Then\n            Set tempRng = amarelosMediana\n        Else\n            Set tempRng = Union(tempRng, amarelosMediana)\n        End If\n    End If\nNext amarelosMediana\n\nmediana = Application.WorksheetFunction.Median(tempRng)\nActiveSheet.Range(\"C3\") = \"Mediana no intervalo de confianca\"\nActiveSheet.Range(\"D3\") = mediana\nEnd Sub\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Writing a function to find the median, of a vector of ints\r\n                \r\nI am trying to write a second function to calculate a vector of integers which is in the main function. My vector is set up like this.\n\n```\nint inputinfo;\ncout << \"\\nPlease enter in scores: \";\ncout << \"\\nEnd your input with ctrl-z\\n\";\nvector<int> scores;\n    while (cin >> inputinfo)\n    {\n        scores.push_back(inputinfo);\n    }\n```\n\n\nHere is my median equation (which I am not sure is working right). I would like to make a function for median and then call it back to the main function to find the median of the vector.\n\n```\n  double median;\n  size_t size = scores.size();\n\n  sort(scores.begin(), scores.end());\n\n  if (size  % TWO == 0)\n  {\n      median = (scores[size / 2 - 1] + scores[size / 2]) / 2;\n  }\n  else \n  {\n      median = scores[size / 2];\n  }\n```\n\n\nThanks for any help.\n    ", "Answer": "\r\nCheck whether your code fails if thee is none or only one number in the vector. You can fix this using\n\n```\nif (size==0) throw \"Vector empty\";\nif (size==1) return scores[0];\n```\n\n\nbefore the if (size % TWO == 0) line.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "change thickness median line geom_boxplot()\r\n                \r\nI want to do some modifications of a geom_boxplot(). Because my boxplots are really \"small\" sometimes (see yellow and green clade in the graphic here) i want to highlight the median even more. so is it possible to adjust the thickness of the median line?\n    ", "Answer": "\r\nThis solution is not obvious from the documentation, but luckily does not require us to edit the source code of ```\nggplot2```\n. After digging through the source of ```\nggplot2```\n I found that the thickness of the median line is controlled by the ```\nfatten```\n parameter. By default ```\nfatten```\n has a value of two:\n\n```\nrequire(reshape)\nrequire(ggplot2)\ncars_melt = melt(cars)\n\nggplot(aes(x = variable, y = value), data = cars_melt) + \n  geom_boxplot(fatten = 2) \n```\n\n\n\n\nBut if we increase the value to for example 4, the median line becomes thicker.\n\n```\nggplot(aes(x = variable, y = value), data = cars_melt) + \n  geom_boxplot(fatten = 4) \n```\n\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to calculate median in AWS Redshift?\r\n                \r\nMost databases have a built in function for calculating the median but I don't see anything for median in Amazon Redshift.\n\nYou could calculate the median using a combination of the nth_value() and count() analytic functions but that seems janky. I would be very surprised if an analytics db didn't have a built in method for computing median so I'm assuming I'm missing something.\n\nhttp://docs.aws.amazon.com/redshift/latest/dg/r_Examples_of_NTH_WF.html\nhttp://docs.aws.amazon.com/redshift/latest/dg/c_Window_functions.html\n    ", "Answer": "\r\nAnd as of 2014-10-17, Redshift supports the MEDIAN window function:\n\n```\n# select min(median) from (select median(num) over () from temp);\n min \n-----\n 4.0\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to calculate median survival in randomForestSRC\r\n                \r\nI try to calculate median survival in randomForestSRC. \n\n```\nlibrary(randomForestSRC)\ndata(veteran, package = \"randomForestSRC\")\ntrain <- sample(1:nrow(veteran), round(nrow(veteran) * 0.80))\nveteran.grow <- rfsrc(Surv(time, status) ~ ., veteran[train, ], ntree = 100)\nveteran.pred <- predict(veteran.grow, veteran[-train , ])\nprint(veteran.grow)\nprint(veteran.pred)\n```\n\n\nI get survival function\n\n```\nveteran.pred$survival\n```\n\n\nand I want to get median of survival function (The value ```\nveteran.pred$time.interest```\n for ```\nveteran.pred$survival== 0.5```\n), for ample, for first row\n\n```\na = as.data.frame(veteran.pred$time.interest)\nb= as.data.frame(veteran.pred$survival[1,])\ndf =cbind(a, b)\ndf <-rename(df, `time` =`veteran.pred$time.interest`)\ndf$`veteran.pred$survival[1, ]` = round(df$`veteran.pred$survival[15, ]`, 2)\nsubset(df, df$`veteran.pred$survival[1, ]`== 0.5 )$time\n```\n\n\nThe problem is survival function rarely matters exactly 0.5\nIn our case we get \n\n```\n[1] 1.00 1.00 1.00 0.95 0.95 0.95 0.95 0.93 0.93 0.93 0.93 0.93 0.93 0.93 0.90 0.90 0.90 0.87 0.87 0.87\n[21] 0.87 0.87 0.86 0.76 0.76 0.67 0.67 0.67 0.67 0.67 0.67 0.66 0.66 0.66 0.66 0.66 0.65 0.64 0.57 0.57\n[41] 0.57 0.57 0.57 0.57 0.57 0.48 0.45 0.39 0.39 0.32 0.32 0.29 0.29 0.29 0.29 0.26 0.26 0.25 0.25 0.25\n[61] 0.25 0.25 0.25 0.25 0.20 0.20 0.20 0.20 0.20 0.20 0.18 0.18 0.18 0.16 0.16 0.16 0.14 0.14 0.14 0.11\n[81] 0.07 0.07\n```\n\n\nSo we have nearest values ```\n0.57```\n & ```\n0.48```\n\nHow to calculate median survival?\n    ", "Answer": "\r\nI don't think that ```\ntime.interest```\n is the correct item to use for that purpose, because it's length is much longer than the number of cases in the validation set. (That said, I'm not sure exactly what it really is supposed to tell you.) If you look at the output of ```\nstr(veteran.pred)```\n you see at the top:\n\n```\nstr(veteran.pred)\nList of 32\n $ call          : language generic.predict.rfsrc(object = object, newdata = newdata, outcome.target = outcome.target,      importance = impo| __truncated__ ...\n $ family        : chr \"surv\"\n $ n             : int 27\n $ ntree         : num 100\n $ yvar          :'data.frame': 27 obs. of  2 variables:\n  ..$ time  : int [1:27] 100 384 123 22 21 139 31 51 54 132 ...\n  ..$ status: int [1:27] 0 1 0 1 1 1 1 1 1 1 ...\n $ yvar.names    : chr [1:2] \"time\" \"status\"\n $ xvar          :'data.frame': 27 obs. of  6 variables:\n  ..$ trt     : int [1:27] 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ celltype: int [1:27] 1 2 2 2 2 2 2 2 2 3 ...\n  ..$ karno   : int [1:27] 70 60 40 60 40 80 75 60 70 80 ...\n  ..$ diagtime: int [1:27] 6 9 3 4 2 2 3 1 1 5 ...\n  ..$ age     : int [1:27] 70 42 55 68 55 64 65 67 67 50 ...\n  ..$ prior   : int [1:27] 0 0 0 0 10 0 0 0 0 0 ...\n $ xvar.names    : chr [1:6] \"trt\" \"celltype\" \"karno\" \"diagtime\" ...\n # --- snipped\n```\n\n\nI think that since 27 is the number of rows of ```\nveteran[-train , ]```\n, that you need to use the ```\nyvar```\n item in the prediction list:\n\n```\n str(veteran.pred$yvar)\n#'data.frame':  27 obs. of  2 variables:\n# $ time  : int  100 384 123 22 21 139 31 51 54 132 ...\n# $ status: int  0 1 0 1 1 1 1 1 1 1 ...\n?survfit\n survfit(Surv(time,status)~1  , data=veteran.pred$yvar)\n#Call: survfit(formula = Surv(time, status) ~ 1, data = veteran.pred$yvar)\n#\n      n  events  median 0.95LCL 0.95UCL \n     27      24      54      49     139 \nplot( survfit(Surv(time,status)~1  , data=veteran.pred$yvar) )\n```\n\n\n\n\nI have serious reservations about recommending this procedure. Notice that there is als another item named yvar inside the forest node of that list and it has 110 rows (so it's the original data). IOf you look at the results of a traditional KM curve on an unadjusted analsysis you get:\n\n```\nsurvfit(Surv(time,status)~1  , data=veteran.pred$forest$yvar) \nCall: survfit(formula = Surv(time, status) ~ 1, data = veteran.pred$forest$yvar)\n\n      n  events  median 0.95LCL 0.95UCL \n    110     104      87      53     111 \n```\n\n\nI think 27 cases from an 80:20 CV strategy is going to give a very unstable estimating method for the median, especially when there are categorical predictors. I also think that the random forrest paradigm should be able to derive useful predictions from the entire dataset without using a cross-validation type splitting of data.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median calculation in kotlin\r\n                \r\nI wrote this code to calculate median range \nbut I want to give every column and row a specific name like:\n\n\n  Columns A B C D\n  Rows 1 2 3\n\n\nI have to calculate the median of a range like in excel ```\nA2:C3```\n so the program can calculate ```\nA2 A3 B2 B3 C2 C3```\n and if it's ```\nB3:D3```\n I want it to calculate ```\nB3 C3 D3```\n.\n\nThis is my code:\n\n```\nfun med(list: List<Double>) = list.sorted().let { \n    (it[it.size / 2] + it[(it.size - 1) / 2]) / 2 \n}\n\nfun main(args: Array<String>) {\n    med(listOf(1.5, 2.67, 3.0, 1.4)).let { println(it) }\n    med(listOf(5.2, 7.1, -4.8, 0.0)).let { println(it) }\n    med(listOf(1.4, 6.0, 2.5, -1.9)).let { println(it) }\n}\n```\n\n    ", "Answer": "\r\nYou should check the length of a list and return the middle element if the length is odd:\n```\nfun med(list: List<Double>) = list.sorted().let {\n    if (it.size % 2 == 0)\n        (it[it.size / 2] + it[(it.size - 1) / 2]) / 2\n    else\n        it[it.size / 2]\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Divide median of a some rows by median of other rows for each group\r\n                \r\n```\ngroup_ID <- c(\"a\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\")\nclass <- c(\"p\",\"q\",\"q\",\"q\",\"q\",\"p\",\"p\",\"p\",\"q\",\"q\",\"q\",\"q\",\"q\")\nvar1 <- c(3,1,1,1,1,3,2,1,1,2,2,4,1)\nmy_table <- data.frame(group_ID,class,var1)\n```\n\nI have the following table.\n```\ngroup_ID class var1\na     p    3\na     q    1\na     q    1\na     q    1\na     q    1\nb     p    3\nb     p    2\nb     p    1\nb     q    1\nb     q    2\nb     q    2\nb     q    4\nb     q    1\n```\n\nI want to create a new column by dividing the median of var1 of class p by the median var1 of the q class for each group. The expected output is shown below.\n```\ngroup_ID    class   var1    var1_ratio\na   p   3   3\na   q   1   3\na   q   1   3\na   q   1   3\na   q   1   3\nb   p   3   1\nb   p   2   1\nb   p   1   1\nb   q   1   1\nb   q   2   1\nb   q   2   1\nb   q   4   1\nb   q   1   1\n```\n\nLink:  This question seems to be the most similar to mine and I tried using ```\ngroup_by()```\n and ```\nmutate_each()```\n as below but I can't get it to work.\n```\nmy_table <- my_table %>%\n  group_by(group_ID,class) %>%\n  mutate_each(funs(./median(.[class == \"p\"])), var1)\n```\n\nAlso I tried : Link1 Link2 Link3\nThanks!\n    ", "Answer": "\r\nWe don't need ```\nmutate_each```\n\n```\nlibrary(dplyr)\nmy_table %>% \n   # // grouped by group_ID, class\n   group_by(group_ID, class) %>%\n   # // create a median column\n   mutate(Median= median(var1)) %>% \n   # // reset the grouping by removing class \n   group_by(group_ID) %>%\n   # // divide the first element of subset of Median for each class\n   mutate(var1_ratio = first(Median[class == 'p'])/first(Median[class == 'q']), \n         Median = NULL)\n# A tibble: 13 x 4\n# Groups:   group_ID [2]\n#   group_ID class  var1 var1_ratio\n#   <chr>    <chr> <dbl>      <dbl>\n# 1 a        p         3          3\n# 2 a        q         1          3\n# 3 a        q         1          3\n# 4 a        q         1          3\n# 5 a        q         1          3\n# 6 b        p         3          1\n# 7 b        p         2          1\n# 8 b        p         1          1\n# 9 b        q         1          1\n#10 b        q         2          1\n#11 b        q         2          1\n#12 b        q         4          1\n#13 b        q         1          1\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Plotting median of an image on image coordinates\r\n                \r\nI have a gray scale image. I want to plot the median of the columns of that image on to the image axis. For doing this I need to have two things: \n\n\nmedian values of the columns (which i can obtain using the Matlab's Median command) and \nthe position of median value in image coordinate. \n\n\nCan anyone help me or give a hint or an idea or any function for estimating the median position?\n    ", "Answer": "\r\nThis code marks all gray-scale level values in a given column equal to median value for that column:\n\n```\nload clown\n\n\nM = median(X, 1);\n\nfigure();\nimshow(uint8(X));\nhold on;\n\nfor columnIdx = 1:numel(M)\n    medianValue = M(columnIdx);\n\n    % find locations of gray-scale lavel values equal to the median        \n    idx = find(X(:, columnIdx) == medianValue);\n\n    if numel(idx) > 0\n        % mark all the gray-scale level values on the image\n        plot(ones(1,numel(idx)) * columnIdx, idx, '.g');\n    end\n\nend\n```\n\n\n\n\nHope it helps\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding median in array and returning true\r\n                \r\nI have to write a method that returns true if the number in an array is the median of the array. The median m is a median if the number of elements that are greater than m is the same as the number of elements less than m. Honestly, I'm completely stuck and not sure how to start it off.. would like to get tips only. Thanks!\n\n```\npublic boolean isMedian(double[] sample, double m) {\n    //just what i have so far\n    boolean median;\n    for(int i = 0; i < sample.length; i++) {\n\n    }\n}\n```\n\n    ", "Answer": "\r\nTry this:\n\n```\npublic boolean isMedian(double[] sample, double m) {\n    if ((sample.length % 2) == 0) return false;\n    double[] lSample = new double[sample.length];\n    System.arraycopy( sample, 0, lSample, 0, sample.length );\n    Arrays.sort(lSample);\n    double median = lSample[lSample.length/2]\n    return median==m;\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Divide median of a some rows by median of other rows for each group\r\n                \r\n```\ngroup_ID <- c(\"a\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\")\nclass <- c(\"p\",\"q\",\"q\",\"q\",\"q\",\"p\",\"p\",\"p\",\"q\",\"q\",\"q\",\"q\",\"q\")\nvar1 <- c(3,1,1,1,1,3,2,1,1,2,2,4,1)\nmy_table <- data.frame(group_ID,class,var1)\n```\n\nI have the following table.\n```\ngroup_ID class var1\na     p    3\na     q    1\na     q    1\na     q    1\na     q    1\nb     p    3\nb     p    2\nb     p    1\nb     q    1\nb     q    2\nb     q    2\nb     q    4\nb     q    1\n```\n\nI want to create a new column by dividing the median of var1 of class p by the median var1 of the q class for each group. The expected output is shown below.\n```\ngroup_ID    class   var1    var1_ratio\na   p   3   3\na   q   1   3\na   q   1   3\na   q   1   3\na   q   1   3\nb   p   3   1\nb   p   2   1\nb   p   1   1\nb   q   1   1\nb   q   2   1\nb   q   2   1\nb   q   4   1\nb   q   1   1\n```\n\nLink:  This question seems to be the most similar to mine and I tried using ```\ngroup_by()```\n and ```\nmutate_each()```\n as below but I can't get it to work.\n```\nmy_table <- my_table %>%\n  group_by(group_ID,class) %>%\n  mutate_each(funs(./median(.[class == \"p\"])), var1)\n```\n\nAlso I tried : Link1 Link2 Link3\nThanks!\n    ", "Answer": "\r\nWe don't need ```\nmutate_each```\n\n```\nlibrary(dplyr)\nmy_table %>% \n   # // grouped by group_ID, class\n   group_by(group_ID, class) %>%\n   # // create a median column\n   mutate(Median= median(var1)) %>% \n   # // reset the grouping by removing class \n   group_by(group_ID) %>%\n   # // divide the first element of subset of Median for each class\n   mutate(var1_ratio = first(Median[class == 'p'])/first(Median[class == 'q']), \n         Median = NULL)\n# A tibble: 13 x 4\n# Groups:   group_ID [2]\n#   group_ID class  var1 var1_ratio\n#   <chr>    <chr> <dbl>      <dbl>\n# 1 a        p         3          3\n# 2 a        q         1          3\n# 3 a        q         1          3\n# 4 a        q         1          3\n# 5 a        q         1          3\n# 6 b        p         3          1\n# 7 b        p         2          1\n# 8 b        p         1          1\n# 9 b        q         1          1\n#10 b        q         2          1\n#11 b        q         2          1\n#12 b        q         4          1\n#13 b        q         1          1\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Plotting median of an image on image coordinates\r\n                \r\nI have a gray scale image. I want to plot the median of the columns of that image on to the image axis. For doing this I need to have two things: \n\n\nmedian values of the columns (which i can obtain using the Matlab's Median command) and \nthe position of median value in image coordinate. \n\n\nCan anyone help me or give a hint or an idea or any function for estimating the median position?\n    ", "Answer": "\r\nThis code marks all gray-scale level values in a given column equal to median value for that column:\n\n```\nload clown\n\n\nM = median(X, 1);\n\nfigure();\nimshow(uint8(X));\nhold on;\n\nfor columnIdx = 1:numel(M)\n    medianValue = M(columnIdx);\n\n    % find locations of gray-scale lavel values equal to the median        \n    idx = find(X(:, columnIdx) == medianValue);\n\n    if numel(idx) > 0\n        % mark all the gray-scale level values on the image\n        plot(ones(1,numel(idx)) * columnIdx, idx, '.g');\n    end\n\nend\n```\n\n\n\n\nHope it helps\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Excel Median for multiple conditions\r\n                \r\nBasically in excel I want a table, like the one given below on the right (the scale of my data is a lot bigger than the example given),that has the median for each subject, for each condition (e.g. TADA, TADP, TPDA, TPDP). Ideally, I would use a pivot table, however, excel does not do 'median' in a pivot table. I was wondering if there was a formula I could to save me having to go through manually and working out the median, i've tried a few (along to lines of \"median(if etc..\" but my coding knowledge in excel is very poor. Is there a short way to do this?\n\n```\n Data                               Table\nSubject    RT  condition            Subject    TADA   TADP  TPDA  TPDP\n  1        23  TADA                    1\n  1        54  TPDA                    2\n  1        65  TADA                    3\n  1        67  TPDP\n  1        76  TADA\n  2        72  TPDA\n  2        87  TADA\n  2        12  TPDP\n  2        45  TADP\n  2        32  TPDP\n  2        87  TADA\n  3        98  TPDA\n  3        12  TADA\n  3        53  TPDA\n  3        78  TADP\n  3        98  TPDP\n```\n\n    ", "Answer": "\r\nAssuming data in A2:C100 and then your results table with headers in F1 across and row labels in E2 down you can use an array formula like this in F2 \n\n```\n=MEDIAN(IF($A$2:$A$100=$E2,IF($C$2:$C$100=F$1,$B$2:$B$100)))```\n\n\nconfirmed with CTRL+SHIFT+ENTER and copied across and down\n\nextend data ranges as required\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "weighted median in spatstat package\r\n                \r\nThe ```\nweighted.median()```\n function in the spatstat package returns \"10.5\", when I pass the evenly weighted scores of 10, 11, & 12.  I was expecting the response of \"11\" (which is the output of ```\nstats::median()```\n and ```\nmatrixStats::weightedMedian()```\n).\n\nThe concept of a weighted median isn't very natural to me.  Is the output incorrect, or am I misunderstand the purpose of the function?\n\n```\nx <- c(10, 11, 12)\nw <- c( 1,  1,  1)\n\nspatstat::weighted.median(x, w)\n#> [1] 10.5\nspatstat::weighted.quantile(x, w, probs = .5)\n#>  50% \n#> 10.5\n\n\nmatrixStats::weightedMedian(x, w)\n#> [1] 11\nmedian(x)\n#> [1] 11\n```\n\n\nCreated on 2020-02-23 by the reprex package (v0.3.0)\n    ", "Answer": "\r\nThere is a more fundamental issue here about the definition of a quantile (including the median) in small finite samples. \n\nThe help file for the R base function ```\nquantile.default```\n says that there is an argument ```\ntype```\n, with 7 different options, which will give different answers. These are carefully described in a fine article by Rob Hyndman, cited in the help file. The default for ```\nquantile.default```\n is ```\ntype=7```\n. \n\nThe algorithm in ```\nspatstat::weighted.quantile```\n performs the analogue of ```\ntype=4```\n (according to its help file); that is, the cumulative distribution function ```\nF(x)```\n is linearly interpolated and then the inverse function is computed. This algorithm is correctly implemented in the spatstat code. \n\nThe weighted median in the other package you mentioned is computing a different definition of the weighted median.\n\nThank you very much for drawing our attention to this example. This may prompt us to extend the implementation of ```\nspatstat::weighted.median```\n to embrace the other types. \n\nIncidentally, bug reports for a CRAN package should be posted on the package's bug reports page as shown on CRAN. It's just lucky that I saw this post. But thank you very much, both of you, for spotting this issue.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Getting index of median value in MATLAB\r\n                \r\nWhen searching for ```\nmin```\n or ```\nmax```\n value one can get the index of the found value like that:  \n\n```\n[val, index] = max(some_array_of_values);\n```\n\n\nHow to get the index of ```\nmedian```\n value? \n\nNOTE:\nYes, I know what median is and I know it sometimes can be average of two values at the middle. What I want to get is the index of value nearest or equal to median value.\nThe array of values contain unsorted values. \nWe cannot sort this array - I need the index from the original array. But of course we can sort a copy of it. There are no limitations due to size of the array - it is relatively small (about 100 values)\n    ", "Answer": "\r\nThe idea is to sort the vector, and take the middle value. For even-length vectors, we compute the average of the two values in the middle.\n\nExample:\n\n```\n%# some random vector\n%#x = rand(99,1);        %# odd-length\nx = rand(100,1);         %# even-length\n\n%# index/indices for median value\nnum = numel(x);\n[~,ord] = sort(x);\nidx = ord(floor(num/2)+(rem(num,2)==0):floor(num/2)+1);\n\n%# median value\nmed = mean( x(idx) );\n\n%# compare against MATLAB's function\nmedian(x)\n```\n\n\n\n\nEDIT\n\nHere is a sample function implementation:\n\n```\nfunction [med idx] = mymedian(x)\n    %# MYMEDIAN\n    %#\n    %# Input:   x        vector\n    %# Output:  med      median value\n    %# Output:  idx      corresponding index\n    %#\n    %# Note: If vector has even length, idx contains two indices\n    %# (their average is the median value)\n    %#\n    %# Example:\n    %#    x = rand(100,1);\n    %#    [med idx] = mymedian(x)\n    %#    median(x)\n    %#\n    %# Example:\n    %#    x = rand(99,1);\n    %#    [med idx] = mymedian(x)\n    %#    median(x)\n    %#\n    %# See also: median\n    %#\n\n    assert(isvector(x));\n    [~,ord] = sort(x);\n    num = numel(x);\n\n    if rem(num,2)==0\n        %# even\n        idx = ord(floor(num/2):floor(num/2)+1);\n        med = mean( x(idx) );\n    else\n        %# odd\n        idx = ord(floor(num/2)+1);\n        med = x(idx);\n    end\nend\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding median in MATLAB taking a lot of time\r\n                \r\nI have a row vector ```\nX```\n for which I want to find the median.\nI am using MATLAB's function ```\nmedian()```\n to find the same but it is proving to be the bottleneck in my code.\nIs there a faster implementation available for finding median in any other language?\n    ", "Answer": "\r\nI was able to improve the speed of calculation by several orders of magnitude but not by a different implementation.\nRather, I just converted the vector into a ```\ngpuArray```\n and then fed into the ```\nmedian()```\n function. For large vectors this reduced the time of calculation by several orders of magnitude. But slowed things down for shorter arrays, I believe this is because time was being used up in transferring the vector to memory in gpu.\nI found the transition length of the vector to be ~450. That is for vectors shorter than 450 directly feeding the vector into the ```\nmedian()```\n function is better and for longer ones converting to ```\ngpuArray```\n and then feeding into the ```\nmedian()```\n function is faster.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "median of medians select python\r\n                \r\nI'm implementing the Select Algorithm (a.k.a. Deterministic Select).  I've got it working for small arrays/lists but when my array size gets above 26 it breaks with the following error: \"RuntimeError: maximum recursion depth exceeded\".  For arrays size 25 and below there is no problem.\n\nMy ultimate goal is to have it run for arrays of size 500 and do many iterations.  The iterations are not an issue.  I have already researched StackOverflow and have seen article: Python implementation of \"median of medians\" algorithm among many others.  I had a hunch that duplicates in my random generated array may have been causing a problem but that doesn't seem to be it.\n\nHere's my code:\n\n```\nimport math\nimport random\n\n# Insertion Sort Khan Academy video: https://www.youtube.com/watch?v=6pyeMmJTefg&list=PL36E7A2B75028A3D6&index=22\n\ndef insertion_sort(A):  # Sorting it in place\n    for index in range(1, len(A)):# range is up to but not including len(A)\n      value = A[index]\n      i = index - 1           # index of the item that is directly to the left\n      while i >= 0:\n        if value < A[i]:\n          A[i + 1] = A[i]\n          A[i] = value\n          i = i - 1\n        else:\n          break\n\ntimeslo = 0  # I think that this is a global variable\n\ndef partition(A, p):\n  global timeslo\n  hi = [] #hold things larger than our pivot\n  lo = [] #  \"     \"   smaller  \"   \"   \"\n  for x in A:       # walk through all the elements in the Array A.\n    if x <p:\n      lo = lo + [x]\n      timeslo = timeslo + 1  #keep track no. of comparisons\n    else:\n      hi = hi + [x]\n  return lo,hi,timeslo\n\ndef get_chunks(Acopy, n):\n                                    # Declare some empty lists to hold our chunks\n  chunk = []\n  chunks = []\n                                    # Step through the array n element at a time\n  for x in range(0, len(Acopy), n): # stepping by size n starting at the beginning\n                                    # of the array\n    chunk = Acopy[x:x+n]            # Extract 5 elements                           \n                                    # sort chunk and find its median\n    insertion_sort(chunk) # in place sort of chunk of size 5\n    # get the median ... (i.e. the middle element)\n    # Add them to list\n\n\n\n mindex = (len(chunk)-1)/2  # pick middle index each time\n\n    chunks.append(chunk[mindex]) \n#     chunks.append(chunk)                        # assuming subarrays are size 5 and we want the middle\n                                                  # this caused some trouble because not all subarrays were size 5\n                            # index which is 2.\n  return chunks\n\n\ndef Select(A, k): \n\n  if (len(A) == 1):  # if the array is size 1 then just return the one and only element\n    return A[0]\n  elif (len(A) <= 5): # if length is 5 or less, sort it and return the kth smallest element\n    insertion_sort(A)\n    return A[k-1]\n  else:\n    M = get_chunks(A, 5)  # this will give you the array of medians,,, don't sort it....WHY ???\n\n\n\n    m = len(M)           # m is the size of the array of Medians M.\n\n    x  = Select(M, m/2)# m/2 is the same as len(A)/10  FYI\n\n    lo, hi, timeslo = partition(A, x) \n\n    rank = len(lo) + 1\n\n    if rank == k: # we're in the middle -- we're done\n      return x, timeslo    # return the value of the kth smallest element\n    elif k < rank:\n      return Select(lo, k) # ???????????????\n    else:\n      return Select(hi, k-rank)\n\n################### TROUBLESHOOTING   ################################\n#   Works with arrays of size 25 and 5000 iterations\n#   Doesn't work with     \"   26 and 5000    \"\n#\n#  arrays of size 26 and 20 iterations breaks it    ?????????????????\n\n# A = []\nTotal = 0\nn = input('What size of array of random #s do you want?: ')\nN = input('number of iterations: ')\n\n# n = 26\n# N = 1\n\nfor x in range(0, N):\n  A = random.sample(range(1,1000), n)  # make an array or list of size n\n  result = Select(A, 2)      #p is the median of the medians, 2 means the 3rd smallest element\n  Total = Total + timeslo             # the total number of comparisons made\nprint(\"the result is\"), result\nprint(\"timeslo = \"), timeslo\nprint(\"# of comparisons = \"), Total\n\n# A = [7, 1, 3, 5, 9, 2, 83, 8, 4, 13, 17, 21, 16, 11, 77, 33, 55, 44, 66, 88, 111, 222]\n# result = Select(A, 2)  \n# print(\"Result = \"), result  \n```\n\n\nAny help would be appreciated.\n    ", "Answer": "\r\nChange this line\n```\nreturn x, timeslo    # return the value of the kth smallest element```\n\ninto\n```\nreturn x    # return the value of the kth smallest element```\n  \n\nYou can get ```\ntimeslo```\n by printing it in the end. Returning ```\nx```\n with ```\ntimeslo```\n is not correct, because it will be used in the ```\npartition(A, p)```\n to split array, where the parameter ```\np```\n should be the median number from previous statement ```\nx  = Select(M, m/2)```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to get the median in numpy?\r\n                \r\nI'm trying to get the median of a few numbers in python, I'm learning python for data science in sololearn but they didn't give the code to get the median.\nhere is my code:\n```\nimport numpy as np  \narray = np.array([2, 2, 3, 5, 8, 9])  \nprint(array.mean())\n```\n\nI tried to change array.mean to array.median but it didn't work. Getting the mean works, but I don't know how to get the median.\nI'm still new at python so sorry for the question.\n    ", "Answer": "\r\nCorrect syntax:-\n```\nprint(np.median(array))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating a simple median on a column in MySQL\r\n                \r\nI'm struggling to find the solution for a simple median problem. Given a table ```\nmy_table```\n with just one column:\n```\nmy_column | \n----------|\n10        |\n20        |\n30        |\n40        |\n50        |\n60        |\n```\n\nHow can I call a function to return the median of 35?\nI can't figure out how to make this syntax work when all I want is to return the median value:\n```\nSELECT\n  PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY my_column) OVER ( PARTITION BY my_column)\nFROM\n  my_table\n```\n\n    ", "Answer": "\r\nHere's a solution that I tested in MySQL 8.0:\n```\nwith ranked as (\n  select my_column, \n    row_number() over (order by my_column) as r,\n    count(my_column) over () as c \n  from my_table\n),\nmedian as (\n  select my_column \n  from ranked \n  where r in (floor((c+1)/2), ceil((c+1)/2))\n)\nselect avg(my_column) from median\n```\n\nOutput:\n```\n+----------------+\n| avg(my_column) |\n+----------------+\n|        35.0000 |\n+----------------+\n```\n\nI borrowed the method from https://stackoverflow.com/a/7263925/20860 but adapted it to MySQL 8.0 CTE and window functions.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find median in R (discrete random variables)\r\n                \r\nMay I know how I can find the median of x from y in R? y is the probability of x here. For instance, 0.3 is P(X=1) and 0.05 is P(X=2). The median that I have calculated by hand is 3. I have tried using median(y) but I can only get 0.25 which is the median of data set y. Is there anyway that I can use to combine x and y to find the median of x?\n```\nx=1:5\ny=c(0.3,0.05,0.25,0.25,0.15)\n```\n\n    ", "Answer": "\r\nAs I understand about your ```\nx```\n and ```\ny```\n is P(X = ```\nx```\n) = ```\ny```\n, and define median as first value which has cdf > .5.\nYou may try\n```\nlibrary(dplyr)\n\nz <- cbind(x,y) %>%\n  as.data.frame() %>%\n  mutate(z = cumsum(y) > 0.5) \nx[first(which(z$z))]\n\n[1] 3\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating Median - Report Builder 3 - SSRS - \"Median=0\" - What is wrong with my code?\r\n                \r\nThese are my datasets:\n\n\n\nAverage Cost column and expression\n\n\n\nThis is my Median column and expression\n\n\n\nDetails Group Property variables and expression\n\n\n\nCode that I am using to TRY and calculate the median\n\n\n\nThese are the results. \n\n\n\nThe Median is always zero and I would really like to know why. If any further information is needed to try and resolve this please leave a comment and I will do it ASAP.\n    ", "Answer": "\r\nWhat if you returned the median in the AddValue function?\n\n```\nFunction AddValue(newValue As Decimal)\n    If values Is Nothing Then\n        values = New System.Collections.ArrayList\n    End If\n\n    values.Add(newValue)\n\n    Return GetMedian()\nEnd Function\n```\n\n\nYou could then use AddValue as the expression for the Median column:\n\n```\n=\"Median = \" & Code.AddValue(Fields!AvgCost.Value)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Computing the median in a binary search tree\r\n                \r\nWrite the implementation of the function ```\nComputeMedian```\n that computes the median value in the tree in ```\nO(n)```\n time. Assume that the tree is a BST but is not necessarily balanced.\nRecall that the median of n numbers is defined as follows:\nIf n is odd, the median is x such that the number of values smaller than x is equal to the number of values greater than x. If n is even, then one plus the number of values smaller than x is equal to the number of values greater than x. For example, given the numbers\n8, 7, 2, 5, 9, the median is 7, because there are two values smaller than 7 and two values larger than 7. If we add number 3 to the set, the median becomes 5.\n\nHere is the class of binary search tree node:\n\n```\ntemplate <class T>\nclass BSTNode\n{\npublic:\nBSTNode(T& val, BSTNode* left, BSTNode* right);\n~BSTNode();\nT GetVal();\nBSTNode* GetLeft();\nBSTNode* GetRight();\n\nprivate:\nT val;\nBSTNode* left;\nBSTNode* right;\nBSTNode* parent; //ONLY INSERT IS READY TO UPDATE THIS MEMBER DATA\nint depth, height;\nfriend class BST<T>;\n};\n```\n\n\nBinary search tree class:\n\n```\ntemplate <class T>\nclass BST\n{\npublic:\nBST();\n~BST();\n\nbool Search(T& val);\nbool Search(T& val, BSTNode<T>* node);\nvoid Insert(T& val);\nbool DeleteNode(T& val);\n\nvoid BFT(void);\nvoid PreorderDFT(void);\nvoid PreorderDFT(BSTNode<T>* node);\nvoid PostorderDFT(BSTNode<T>* node);\nvoid InorderDFT(BSTNode<T>* node);\nvoid ComputeNodeDepths(void);\nvoid ComputeNodeHeights(void);\nbool IsEmpty(void);\nvoid Visit(BSTNode<T>* node);\nvoid Clear(void);\n\nprivate:\nBSTNode<T> *root;\nint depth;\nint count;\nBSTNode<T> *med; // I've added this member data.\n\nvoid DelSingle(BSTNode<T>*& ptr);\nvoid DelDoubleByCopying(BSTNode<T>* node);\nvoid ComputeDepth(BSTNode<T>* node, BSTNode<T>* parent);\nvoid ComputeHeight(BSTNode<T>* node);\nvoid Clear(BSTNode<T>* node);\n```\n\n\n};\n\nI tried to write this function: I added two new member data ```\nBSTNode<T>* med```\n and ```\nint count```\n and this function compute the median only if the number of items is odd:\n\n```\ntemplate <class T>\nT BST<T>::ComputeMedian()\n{\nBSTNode<T> *median;\nint numOfNodes = CountNodes();\nif (numOfNodes % 2 != 0) {\n    count = 0;\n    ComputeOddMedian(root, numOfNodes/2);\n    median = med;\n    return median->val;\n\n    }\nelse {\n    count = 0;\n    ComputeEvenMedian(root, numOfNodes/2);\n    median = med;\n    return median->val;\n\n    }\nreturn -1;\n}\n\ntemplate <class T>\nvoid BST<T>::ComputeOddMedian(BSTNode<T> *node, int x)\n{\nif (node->left) ComputeOddMedian(node->left, x);\ncount++;\nif (count == x+1)\n    med = node;\nif (node->right) ComputeOddMedian(node->right, x);\n}\n\ntemplate <class T>\nvoid BST<T>::ComputeEvenMedian(BSTNode<T> *node, int x)\n{\nif (node->left) ComputeOddMedian(node->left, x);\ncount++;\nif (count == x-1)\n    med = node;\nif (node->right) ComputeOddMedian(node->right, x);\n}\n```\n\n\nIt gives right results when the number of items is odd but it causes errors when the number of items is even (I think that is because there might be a NULL pointer). I feel that there is something wrong in my implementation especially with ```\nreturn```\n in the recursion functions and with adding new member data.\n\nEdit: \nFor an odd number of items:\n\n```\nint main()\n{\nBST<int> tree;\nint x=12;\ntree.Insert(x);\nx=6;\ntree.Insert(x);\nx=22;\ntree.Insert(x);\nx=3;\ntree.Insert(x);\nx=10;\ntree.Insert(x);\ncout << tree.ComputeMedian() << endl;\n}\n```\n\n\nFor the above code, the output is ```\n10```\n which is true.\n\nFor an even number of items:\n\n```\nint main()\n{\nBST<int> tree;\nint x=12;\ntree.Insert(x);\nx=6;\ntree.Insert(x);\nx=22;\ntree.Insert(x);\nx=3;\ntree.Insert(x);\nx=10;\ntree.Insert(x);\nx=17;\ntree.Insert(x);\ncout << tree.ComputeMedian() << endl;\n}\n```\n\n\nFor the above code, there is no output and this is a screenshot for the error:\n\n\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median selection in CUDA kernel\r\n                \r\nI need to compute the median of an array of size p inside a CUDA kernel (in my case, p is small e.g. p = 10). I am using an O(p^2) algorithm for its simplicity, but at the cost of time performance.\n\nIs there a \"function\" to find the median efficiently that I can call inside a CUDA kernel? \n\nI know I could implement a selection algorithm, but I'm looking for a function and/or tested code.\n\nThanks!\n    ", "Answer": "\r\nHere are a few hints:\n\n\nUse a better selection algorithm: QuickSelect is a faster version of QuickSort for selecting the kth element in an array. For compile-time-constant mask sizes, sorting networks are even faster, thanks to high TLP and a O(log^2 n) critical path. If you only have 8-bit values, you can use a histogram-based approach. This paper describes an implementation that takes constant time per pixel, independent of mask size, which makes it very fast for very large mask sizes. You can parallelize it by using a minimal launch strategy (only run as many threads as you need to keep all SMs at max capacity), tiling the image, and letting threads of the same block cooperate on each kernel histogram.\nSort in registers. For small mask sizes, you can keep the entire array in registers, making median selection with a sorting network much faster. For larger mask sizes, you can use shared memory.\nCopy all pixels used by the block to shared memory first, and then copy to thread-local buffers that are also in shared memory.\nIf you only have a few masks that need to go really fast (such as 3x3 and 5x5), use templates to make them compile time constants. This can speed things up a lot because the compiler can unroll loops and re-order a lot more instructions, possibly improving load batching and other goodies, leading to large speed-ups.\nMake sure, your reads are coalesced and aligned.\n\n\nThere are many other optimizations you can do. Make sure, you read through the CUDA documents, especially the Programming Guide and the Best Practices Guide.\nWhen you really want to gun for high performance, don't forget to take a good look at a CUDA profiler, such as the Visual Profiler.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "calculating confidence intervals for a median in oracle\r\n                \r\nI am trying to produce an  oracle sql query which will not only calculate the median age but also the 95% confidence around it. To add a complication need to do it across groups in this case gender\nI have a table of people with their age and gender. I want to determine the median age for each group together with its 95% confidence intervals.\nMy current attempt which fails is as follows.\n\n```\nselect gender,\n       median(age),\n       count(*),\n       percentile_cont(ROUND((COUNT(*)/2)-1.96*sqrt(COUNT(*))/2)/COUNT(*)) \n         within GROUP (ORDER BY age) lowmedianage,\n       percentile_cont(ROUND((COUNT(*)/2)+1.96*sqrt(COUNT(*))/2)/COUNT(*)) \n         within GROUP (ORDER BY age) highmedianage\n  from persontable\n  group by gender\n```\n\n\nI get an error not a GROUP BY expression.\n    ", "Answer": "\r\nUsing the formula from this book I'm ending with following query (I'm not sure if you handles the low and high ranges well; my interpretation is that you calculates a range of sequence numbers and you must look up the values from those positions).\n\n```\nwith tab as \n-- add sequence per group\n(\nselect gender, age,\nrow_number() over (PARTITION  BY gender order by  gender, age) as seq\nfrom persontable\n),\n-- get count\nN as (select gender, count(*) cnt from persontable group by gender),\n-- calculate sequence numbers of the CI\nci_seq as (\nselect gender,\nround(cnt/2 - (1.96 * sqrt(cnt)/2)) r,\nround(1 + cnt/2 + (1.96 * sqrt(cnt)/2)) s\nfrom n),\n-- calculate median\nmed as (\nselect \n  gender,\n  median(age) median_age\nfrom  persontable\ngroup by gender),\nmed2 as (\nselect med.gender, median_age, r, s\nfrom med \njoin ci_seq on med.gender = ci_seq.gender \n)\nselect gender, median_age,\n(select age from tab where seq = r and gender = med2.gender) ci_from,\n(select age from tab where seq = s and gender = med2.gender) ci_to\nfrom med2\n;\n```\n\n\nNote also, that the formula only approximates the CI. You may also check this thread for alternative calculations.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median and IQR \"NA\"\r\n                \r\n```\nmedian(classifyforblack$Survival.months[classifyforblack$newcolumn == 'GU'])\n[1] NA\n```\n\n\nWarning message:\nIn mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]) :\nargument is not numeric or logical: returning NA\n\nI need to calculate median survival months when the value is GU but it give this error. I think that is because some values in survival months are\"unknown\" how to overcome that?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to Calculate Median?\r\n                \r\nI need to calculate a median on a set of data, so I created a temp table and have tried to follow some articles online with zero success, here is what I am working with:\n\n```\nCREATE TABLE #QuizTemp (QuizProfileID INT,Cnt INT,TotalScore INT)\n\nINSERT INTO #QuizTemp\nSELECT QuizAnswers.QuizProfileID, COUNT(QuizAnswers.QuizProfileID) AS Cnt, SUM(QuizAnswers.AnsweredYes) As TotalScore \nFROM         QuizAnswers INNER JOIN\n                      Quizzes ON QuizAnswers.QuizID = Quizzes.QuizID\nWHERE     (Quizzes.PartnerID = 16) \nGROUP BY QuizAnswers.QuizProfileID\nHAVING COUNT(QuizAnswers.QuizProfileID)= 5\n\nSELECT COUNT(*) AS CNT, Avg(TotalScore) AS AvgTotalScore  FROM #QuizTemp\n\nDROP TABLE #QuizTemp\n```\n\n\nThe average works great and now I need the Median.\n    ", "Answer": "\r\ntry capturing the row count on INSERT and then select the row that is in the middle using ROW_NUMBER():\n\n```\nCREATE TABLE #QuizTemp (QuizProfileID INT,Cnt INT,TotalScore INT)\nDECLARE @Rows int\n\nINSERT INTO #QuizTemp\nSELECT QuizAnswers.QuizProfileID, COUNT(QuizAnswers.QuizProfileID) AS Cnt, SUM(QuizAnswers.AnsweredYes) As TotalScore \nFROM         QuizAnswers INNER JOIN\n                      Quizzes ON QuizAnswers.QuizID = Quizzes.QuizID\nWHERE     (Quizzes.PartnerID = 16) \nGROUP BY QuizAnswers.QuizProfileID\nHAVING COUNT(QuizAnswers.QuizProfileID)= 5\n\n\nDECLARE @Rows int\nSELECT @Rows=@@Rowcount\n\n;with allrows as\n(\n    SELECT TotalScore, ROW_NUMBER() (ORDER BY TotalScore) AS RowNumber\n\n)\nSELECT @Rows AS CNT, TotalScore AS MedianScore\nFROM allrows WHERE RowNumber=@Rows/2\n\n\nDROP TABLE #QuizTemp\n```\n\n\nEDIT\n\nHere is a solution without a temp table:\n\n```\nDECLARE @YourTable  table (TotalScore int)\nINSERT INTO @YourTable Values (1)\nINSERT INTO @YourTable Values (2)\nINSERT INTO @YourTable Values (3)\nINSERT INTO @YourTable Values (40)\nINSERT INTO @YourTable Values (50)\nINSERT INTO @YourTable Values (60)\nINSERT INTO @YourTable Values (70)\n\n;with allrows as\n(\n    SELECT\n        TotalScore, ROW_NUMBER() OVER (ORDER BY TotalScore) AS RowNumber\n        FROM @YourTable\n)\n,MaxRows AS\n(SELECT MAX(RowNumber) AS CNT,CONVERT(int,ROUND(MAX(RowNumber)/2.0,0)) AS Middle FROM allrows)\nSELECT \n    m.CNT\n    ,(SELECT AVG(TotalScore) FROM allrows) AS AvgTotalScore  \n    ,a.TotalScore AS Median\n    ,m.Middle AS MedianRowNumber\n    FROM allrows              a\n        CROSS JOIN MaxRows    m\n    WHERE a.RowNumber=m.Middle\n```\n\n\nOUTPUT:\n\n```\nCNT                  AvgTotalScore        Median      MedianRowNumber\n-------------------- -------------------- ----------- --------------------\n7                    32                   40          4\n\n(1 row(s) affected)\n```\n\n\nif you edit the first CTE to be:\n\n```\n;with allrows as\n(\n    SELECT QuizAnswers.QuizProfileID, COUNT(QuizAnswers.QuizProfileID) AS Cnt, SUM(QuizAnswers.AnsweredYes) As TotalScore \n    , ROW_NUMBER() OVER (ORDER BY TotalScore) AS RowNumber\n    FROM         QuizAnswers INNER JOIN\n                          Quizzes ON QuizAnswers.QuizID = Quizzes.QuizID\n    WHERE     (Quizzes.PartnerID = 16) \n    GROUP BY QuizAnswers.QuizProfileID\n    HAVING COUNT(QuizAnswers.QuizProfileID)= 5\n)\n```\n\n\nit should work for your query\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculating a simple median on a column in MySQL\r\n                \r\nI'm struggling to find the solution for a simple median problem. Given a table ```\nmy_table```\n with just one column:\n```\nmy_column | \n----------|\n10        |\n20        |\n30        |\n40        |\n50        |\n60        |\n```\n\nHow can I call a function to return the median of 35?\nI can't figure out how to make this syntax work when all I want is to return the median value:\n```\nSELECT\n  PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY my_column) OVER ( PARTITION BY my_column)\nFROM\n  my_table\n```\n\n    ", "Answer": "\r\nHere's a solution that I tested in MySQL 8.0:\n```\nwith ranked as (\n  select my_column, \n    row_number() over (order by my_column) as r,\n    count(my_column) over () as c \n  from my_table\n),\nmedian as (\n  select my_column \n  from ranked \n  where r in (floor((c+1)/2), ceil((c+1)/2))\n)\nselect avg(my_column) from median\n```\n\nOutput:\n```\n+----------------+\n| avg(my_column) |\n+----------------+\n|        35.0000 |\n+----------------+\n```\n\nI borrowed the method from https://stackoverflow.com/a/7263925/20860 but adapted it to MySQL 8.0 CTE and window functions.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How do I calculate percentiles with python/numpy?\r\n                \r\nIs there a convenient way to calculate percentiles for a sequence or single-dimensional numpy array?\n\nI am looking for something similar to Excel's percentile function.\n\nI looked in NumPy's statistics reference, and couldn't find this. All I could find is the median (50th percentile), but not something more specific.\n    ", "Answer": "\r\nYou might be interested in the SciPy Stats package. It has the percentile function you're after and many other statistical goodies.\n\n```\npercentile()```\n is available in ```\nnumpy```\n too.\n\n```\nimport numpy as np\na = np.array([1,2,3,4,5])\np = np.percentile(a, 50) # return 50th percentile, e.g median.\nprint p\n3.0\n```\n\n\nThis ticket leads me to believe they won't be integrating ```\npercentile()```\n into numpy anytime soon.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median for data between 2 dates\r\n                \r\nIn one column I have date/time format ranging from July - Dec 2022. In another column I have the corresponding time values for task completion. Example of the data is as below -\nSample Data:\n\nI want to calculate the median for the date range of \nMedian Date Range:\n\nHow can I calculate the median hours for particular date range?\nI am expecting the data as below:\n\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding median of a set of circular data\r\n                \r\nI would like to write a C++ function which finds the median of an array of circular data. \nFor example, consider the reading from a compass where the readings are assumed to be in [0,360). Though 1 & 359 appears to be far away, they are very close due to the circular nature of the reading.\n\nFinding median of N-elements in ordinary data is as follows.\n1. sort the data of N-elements (ascending or descending order)\n2. If N is odd, median is the (N+1)/2 th element in the sorted array.\n3. If N is even, median is the average of the N/2 th and N/2+1 th elements in the sorted array. \n\nHowever, the wrap around problem in the circular data takes the problem to a different dimension and the solution non-trivial.\n\nA similar question to find mean from circular data is explained here How do you calculate the average of a set of circular data?\nThe suggestion in the above link is to find the unit vector corresponding to each angle and find the average. However, median requires sorting the data and sorting of vectors don't make any sense in this context. Hence I don't think we can use the proposed scheme to find median!\n    ", "Answer": "\r\nI've actually given this topic way more thought than is healthy so I'll share my thoughts and findings here. Maybe someone will have a similar problem and find this useful.\nI haven't used C++ in many years so please forgive me if I write all the code in C#. I believe a fluent C++ speaker can pretty easily translate the algorithms.\nCircular mean\nFirst, let's define the circular mean. It's calculated by converting your points to radians, where your period (256, 360 or whatever - the value that is interpreted to be the same as zero) is scaled to ```\n2*pi```\n. You then calculate the sine and cosine of those radian values. Those are the y and x coordinates of your values on a unit circle. You then sum up all the sines and cosines and calculate atan2. This gives you the average angle, which can be easily converted back to your data point by dividing with the scaling factor.\n```\nvar scalingFactor = 2 * Math.PI / period;\n\nvar sines = 0.0;\nvar cosines = 0.0;\nforeach (var value in inputs)\n{\n    var radians = value * scalingFactor;\n    sines += Math.Sin(radians);\n    cosines += Math.Cos(radians);\n}\n\nvar circularMean = Math.Atan2(sines, cosines) / scalingFactor;\n\nif (circularMean >= 0)\n    return circularMean;\nelse\n    return circularMean + period;\n```\n\nMarginal circular median\nThe simplest approach to a circular median is just a modified way of handling the circular mean.\nThe circular median can be calculated in a similar way, by just finding the median of the sines and cosines instead of the sums, and calculating the atan2 of that. This way, you are finding the marginal median of the circle points and taking its angle as a result.\n```\nvar scalingFactor = 2 * Math.PI / period;\n\nvar sines = new List<double>();\nvar cosines = new List<double>();\nforeach (var value in inputs)\n{\n    var radians = value * scalingFactor;\n    sines.Add(Math.Sin(radians));\n    cosines.Add(Math.Cos(radians));\n}\n\nvar circularMedian = Math.Atan2(Median(sines), Median(cosines)) / scalingFactor;\n\nif (circularMedian >= 0)\n    return circularMedian;\nelse\n    return circularMedian + period;\n```\n\nThis approach is O(n), robust to outliers and very simple to implement. It may suit your purposes well enough, but it has a problem: rotating the input points will give you different results. Depending on the distribution of your input data, it may or may not be a problem.\nCircular arc median\nTo understand this other approach, you need to stop thinking of means and medians in terms of \"this is how it's calculated\", but in terms of what the resulting values actually represent.\nFor non-cyclic data, you get the mean by summing up all the values and dividing by the number of elements. What this number represents, though, is the value with the minimal sum of all squared distances to data elements. (I hear statisticians call this value the L2 estimate of location, but a statistician should probably confirm or deny this.)\nLikewise for median. You get it by finding the data element that would end up in the middle if all data were sorted (ideally, using an O(n) selection algorithm, like nth_element in C++). What this number is, though, is a value that has the minimal sum of all absolute (non-squared!) distances to data elements. (Supposedly, this value is called an L1 estimate of location.)\nSorting circular data doesn't help you find a middle, so the usual way of thinking about medians doesn't work, but you can still find this point that minimizes the sum of absolute distances from all data points. Here's the algorithm that I came up with, that runs in O(n) time assuming the input data is normalized to >= 0 and < period, and then sorted. (If you need to do this sorting as part of your calculation, then the runtime is O(n log n).)\nIt works by going through all the data points and keeping track of the sum of distances. When you shift to the right data point by a distance D, the sum of distances to all the left points increases by ```\nD*LeftCount```\n and the sum of all distances to all the right points decreases by ```\nD*RightCount```\n. Then, if some of the left points are now actually the right points, because their left distance is larger than ```\nperiod/2```\n, you subtract their previous distance and add the new, correct distance.\nFor comparing the current sum to the best sum, I added a bit of tolerance to guard against inexact floating point arithmetic.\nThere may be multiple or infinitely many points that satisfy the minimum distances condition. With non-circular medians with even number of values, the median can be any value between the two central values. It's usually taken to be the average of those two central values, so I took the similar approach with this median algorithm. I find all data points that minimize the distances and then just calculate the circular mean of those points.\n```\n// Requires a sorted list with values normalized to [0,period).\n\n// Doing an initialization pass:\n//   * candidate is the lowest number\n//   * finding the index where the circle with this candidate starts\n//   * calculating the score for this candidate - the sum of absolute distances\n//   * counting the number of values to the left of the candidate\nint i;\nvar candidate = list[0];\nvar distanceSum = 0.0;\nfor (i = 1; i < list.Count; ++i)\n{\n    if (list[i] >= candidate + period / 2)\n        break;\n    distanceSum += list[i] - candidate;\n}\nvar leftCount = list.Count - i;\nvar circleStart = i;\nif (circleStart == list.Count)\n    circleStart = 0;\nelse\n    for (; i < list.Count; ++i)\n        distanceSum += candidate + period - list[i];\n\nvar previousCandidate = candidate;\nvar bestCandidates = new List<double> { candidate };\nvar bestDistanceSum = distanceSum;\nvar equalityTolerance = period * 1e-10;\n\nfor (i = 1; i < list.Count; ++i)\n{\n    candidate = list[i];\n\n    // A formula for correcting the distance given the movement to the right.\n    // It doesn't take into account that some values may have wrapped to the other side of the circle.\n    ++leftCount;\n    distanceSum += (2 * leftCount - list.Count) * (candidate - previousCandidate);\n\n    // Counting all the values that wrapped to the other side of the circle\n    // and correcting the sum of distances from the candidate.\n    if (i <= circleStart)\n        while (list[circleStart] < candidate + period / 2)\n        {\n            --leftCount;\n            distanceSum += 2 * (list[circleStart] - candidate) - period;\n            ++circleStart;\n            if (circleStart == list.Count)\n            {\n                circleStart = 0;\n                break; // Letting the next loop continue.\n            }\n        }\n    if (i > circleStart)\n        while (list[circleStart] < candidate - period / 2)\n        {\n            --leftCount;\n            distanceSum += 2 * (list[circleStart] - candidate) + period;\n            ++circleStart;\n        }\n\n    // Comparing current sum to the best one, using the given tolerance.\n    if (distanceSum <= bestDistanceSum + equalityTolerance)\n    {\n        if (distanceSum >= bestDistanceSum - equalityTolerance)\n        {\n            // The numbers are close, so using their average as the next best.\n            bestDistanceSum = (bestCandidates.Count * bestDistanceSum + distanceSum) / (bestCandidates.Count + 1);\n        }\n        else\n        {\n            // The new number is significantly better, clearing.\n            bestDistanceSum = distanceSum;\n            bestCandidates.Clear();\n        }\n        bestCandidates.Add(candidate);\n    }\n\n    previousCandidate = candidate;\n}\n\nif (bestCandidates.Count == 1)\n    return bestCandidates[0];\nelse\n    return CircularMean(bestCandidates, period);\n```\n\nGeometric circular median\nThere is an inconsistency in the previous algorithm, in the way the median is defined in relation to the circular mean. The circular mean minimizes the sum of squared euclidian distances between points on a circle. In other words, it looks at the straight lines connecting points on a circle, cutting through the circle.\nThe arc median, as I calculate it above, looks at the arc distances: how far the points are to each other by moving on the perimeter of the circle, not by taking a straight line between them.\nI have thought about how to address this issue, if it bothers you, but I haven't really done any experiments so I can't claim the following method works. In short, I believe you could use a modification of the Iteratively reweighted least squares algorithm (IRLS), which is what is usually used to calculate geometric medians.\nThe idea is to pick a starting value (for instance, the circular mean or the arc median presented above), and calculate the euclidean distance to each point: Di = sqrt(dxi^2 + dyi^2). Circular mean will minimize the squares of those distances, so the weights of each point should cancel out the square and reset to just D: Wi = Di / Di^2, which is just Wi = 1 / Di.\nWith these weights, calculate the weighted circular mean (same as the circular mean, but multiply each sine and cosine by the weight of that point before summing them up) and repeat the process. Repeat until enough iterations have passed or until the result stops changing much.\nThe problem with this algorithm is that it has a division by zero if the current solution falls exactly on a data point. Even if the distance isn't exactly zero, the solution will stop moving if you hit close enough to the point because the weight will become enormous compared to all the other ones. This can be fixed by adding a small fixed offset to the distance before dividing by it. This will make the solution suboptimal, but at least it won't stop on a wrong point.\nIt will still take some number of iterations to dig itself out of that wrong point unless the offset is relatively large, and the final solution is worse the bigger the offset is. So the best way would probably be to start with a fairly large offset and then progressively making it smaller for each next iteration.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median and IQR \"NA\"\r\n                \r\n```\nmedian(classifyforblack$Survival.months[classifyforblack$newcolumn == 'GU'])\n[1] NA\n```\n\n\nWarning message:\nIn mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]) :\nargument is not numeric or logical: returning NA\n\nI need to calculate median survival months when the value is GU but it give this error. I think that is because some values in survival months are\"unknown\" how to overcome that?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Combining MEDIAN, IF, ROUNDUP formulas\r\n                \r\nI'm trying to find the median value across the C3:AS3 cells, then roundup the result.\n\nC2 is where my formula will be entered. The values I plan to enter in these cells range between the numbers 1-4 (where 1 is ineffective and 4 is effective; I'm an elementary school teacher). I am entering these numbers by hand as the school year proceeds.\n\nSo:\n\n1) I would like the formula to ignore blank cells (i.e., prevent C2 to return #NUM! when all or some of my C3:AS3 cells and blank)\n\n2) I would like to find the median results scored through the school year, ranging between 1-4.\n\n3) I would like to roundup the median results.\n\nAm I right to guess that whatever the solution, it will need the IF, MEDIAN, and ROUNDUP formulas? If so... in what order? what formula do I need to create? Thank you in advance for any feedback, much appreciated!!\n    ", "Answer": "\r\n```\n=IFERROR(ROUNDUP(MEDIAN($C3:$AS3),0),\"\")\n```\n\n\nPlace the above in C2.  Median will ignore blank cells I believe, but will return an error when there are no values.  Roundup will round up all decimals to the next highest integer due to the ,0 for the number of decimal points of accuracy to keep.  IFERROR returns \"\" when an error occurs in the formula such as all cells being blank.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "calculate mean median mode c programming array\r\n                \r\nI have this homework assignment where the user is asked to input numbers and then calculates the mean median and mode, followed by asking if he/she wants to play again, and either repeating the program or quitting. Everything compiles, but I can seem to figure out the few things going wrong: \n\nThe mean works. the median doesn't. If the array of ints has an even length, ie 4 numbers in the array, the median is supposed to be the middle two numbers averaged out. so if the numbers are '1, 3, 5, 6' in order, then the median should be 4.000000.  The mode doesn't work either, and when asked to 'play again?' any answer causes the program to suddenly exit and crash.  can someone help me find the error in my mean median mode calculations, and help me with the menu?     \n\n```\n#define MAX 25\n#include <stdio.h>\n#include <stdbool.h>\n#include <time.h>\n#include <stdlib.h>\n\nint readTotalNums();\nvoid fillArray(int total, int nums[]);\nvoid sortArray(int nums[], int total);\ndouble findMean(int nums[], int total);\ndouble findMedian(int nums[], int total);\nint findMode(int nums[], int total);\nvoid printResults(double mean, double median, double mode);\nbool goAgain();\n\nint main()  {\n    int nums[MAX];\n    int total;\n    double mean, median, mode;\n    do {\n        total = readTotalNums(); //guarantee 1-25\n        fillArray(total, nums); //read in the #s don't need to check range\n        sortArray(nums, total);\n        mean = findMean(nums, total);\n        median = findMedian(nums, total);\n        mode = findMode(nums, total);\n        printResults(mean, median, mode);\n    } while (goAgain());\n    return 0;\n}\n\nint readTotalNums() {\n    int num;\n    do {\n        printf(\"How many numbers? \");\n        scanf(\"%i\", &num);\n    } while (num < 1 || num > 25);\n    return num;\n}\n\nvoid fillArray(int total, int nums[]) {\n    int temp;\n    int i;\n    printf(\"Please enter %i numbers\\n\", total);\n    for (i = 0; i <= total-1; i++) {\n        scanf(\"\\n%i\",&nums[i]);\n    }\n}\n\nvoid sortArray(int nums[], int total) {\nint x;\nint y;\nfor(x=0; x<total; x++) {\n    for(y=0; y<total-1; y++) {\n        if(nums[y]>nums[y+1]) {\n            int temp = nums[y+1];\n            nums[y+1] = nums[y];\n            nums[y] = temp;\n        }\n    }\n}\n}\n\ndouble findMean(int nums[], int total) {\n    int i;\n    double sum = 0.0;\n    for(i = 0; i < total; i++) {\n        sum += nums[i];\n    }\n    return (sum/total);\n}\n\ndouble findMedian(int nums[], int total) {\n    int temp;\n    int i,j;\n    for(i=0;i<total;i++)\n        for(j=i+1;j<total;j++) {\n            if(nums[i]>nums[j]) {\n                temp=nums[j];\n                nums[j]=nums[i];\n                nums[i]=temp;\n            }\n        }\n        if(total%2==0) {\n            return (nums[total/2]+nums[total/2-1])/2;\n        }else{\n            return nums[total/2];\n        }\n}\n\nint findMode(int nums[],int total) {\n    int i, j, maxCount, modeValue;\n    int tally[total];\n    for (i = 0; i < total; i++) {\n         tally[nums[i]]++;\n    }\n    maxCount = 0;\n    modeValue = 0;\n    for (j = 0; j < total; j++) {\n        if (tally[j] > maxCount) {\n            maxCount = tally[j];\n            modeValue = j;\n        }\n    }\n    return modeValue;\n}\n\nvoid printResults(double mean, double median, double mode) {\n    printf(\"Mean: %d\\tMedian: %d\\tMode: %i\", mean, median, mode);\n}\n\n\nbool goAgain() {\n    char *temp;\n    printf(\"\\nWould you like to play again(Y/N)? \");\n    scanf(\"%s\", &temp);\n    while (temp != 'n' && temp != 'N' && temp != 'y' && temp != 'Y') {\n        printf(\"\\nI am sorry that is invalid -- try again\");\n        printf(\"\\nWould you like to play again(Y/N)? \");\n        scanf(\"%s\", &temp);\n    }\n    if (temp == 'y' || temp == 'Y') {\n        return true;\n    } else {\n        return false;\n    }\n}\n```\n\n\nthe output should be something like this:\n\n```\nHow many numbers 4\nPlease enter 4 numbers\n6\n2\n5\n25\n Mean: 9.50 Median:  5.50   Mode:  2\nGo again (y/n) n\n```\n\n    ", "Answer": "\r\nWell, I found 3 problems:\n\n\nYour printf is wrong. to print ```\ndouble```\n, you should use ```\n%f```\n. not ```\n%d```\n or ```\n%i```\n. \nYou should initialize ```\ntally```\n before using.\nIn ```\ngoAgain```\n, ```\ntemp```\n should be ```\nchar```\n, and you should use ```\n%c```\n instead of ```\n%s```\n.\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Compute median of column in pyspark\r\n                \r\nI have a dataframe as shown below:\n```\n+-----------+------------+\n|parsed_date|       count|\n+-----------+------------+\n| 2017-12-16|           2|\n| 2017-12-16|           2|\n| 2017-12-17|           2|\n| 2017-12-17|           2|\n| 2017-12-18|           1|\n| 2017-12-19|           4|\n| 2017-12-19|           4|\n| 2017-12-19|           4|\n| 2017-12-19|           4|\n| 2017-12-20|           1|\n+-----------+------------+\n```\n\nI want to compute median of the entire 'count' column and add the result to a new column.\nI tried:\n```\nmedian = df.approxQuantile('count',[0.5],0.1).alias('count_median')\n```\n\nBut of course I am doing something wrong as it gives the following error:\n```\nAttributeError: 'list' object has no attribute 'alias'\n```\n\nPlease help.\n    ", "Answer": "\r\nYou need to add a column with ```\nwithColumn```\n because ```\napproxQuantile```\n returns a list of floats, not a Spark column.\n```\nimport pyspark.sql.functions as F\n\ndf2 = df.withColumn('count_media', F.lit(df.approxQuantile('count',[0.5],0.1)[0]))\n\ndf2.show()\n+-----------+-----+-----------+\n|parsed_date|count|count_media|\n+-----------+-----+-----------+\n| 2017-12-16|    2|        2.0|\n| 2017-12-16|    2|        2.0|\n| 2017-12-17|    2|        2.0|\n| 2017-12-17|    2|        2.0|\n| 2017-12-18|    1|        2.0|\n| 2017-12-19|    4|        2.0|\n| 2017-12-19|    4|        2.0|\n| 2017-12-19|    4|        2.0|\n| 2017-12-19|    4|        2.0|\n| 2017-12-20|    1|        2.0|\n+-----------+-----+-----------+\n```\n\nYou can also use the ```\napprox_percentile```\n / ```\npercentile_approx```\n function in Spark SQL:\n```\nimport pyspark.sql.functions as F\n\ndf2 = df.withColumn('count_media', F.expr(\"approx_percentile(count, 0.5, 10) over ()\"))\n\ndf2.show()\n+-----------+-----+-----------+\n|parsed_date|count|count_media|\n+-----------+-----+-----------+\n| 2017-12-16|    2|          2|\n| 2017-12-16|    2|          2|\n| 2017-12-17|    2|          2|\n| 2017-12-17|    2|          2|\n| 2017-12-18|    1|          2|\n| 2017-12-19|    4|          2|\n| 2017-12-19|    4|          2|\n| 2017-12-19|    4|          2|\n| 2017-12-19|    4|          2|\n| 2017-12-20|    1|          2|\n+-----------+-----+-----------+\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Query with Median and Group by and where google sheets\r\n                \r\nI need to get the grouped median\nI have grouped data of the form\n```\nFrom    type                 Weight\nA       person-person        4\nA       person-person        3\nA       person-organization  11\nA       person-person        5\nA       person-organization  6\nB       person-person        2\nB       person-organization  3\nB       person-organization  7\nC       person-person        5\nC       person-person        2\nC       person-organization  15\nS       person-organization  7\nS       person-person        4\nS       person-person        3\n```\n\nI need to get the Median grouped by col A where Col B = 'person-person'\n```\nA   value1\nB   value2\nC   value3\nS   value4\n```\n\nI can do this for Average with:\n```\n=QUERY(Connections!A:C,\"Select A, Avg(C) where B='person-person' and C is not null group by A\",1)\n```\n\nI have tried using the ```\nMedian```\n function but I can not get it to group by column A\nGoogle sheet\nhttps://docs.google.com/spreadsheets/d/1ZPia3LkVg2Pt4YGIH4KtW49G2uElRFcvWLY6LYOQ-Ss/edit?usp=sharing\nIs it possible to get the median is this way?\nThanks\n    ", "Answer": "\r\nunfortunatelly, in Google Sheets the ```\nQUERY```\n (nor ```\nARRAYFORMULA```\n) function does not support median at all.\n\ndraggable solution:\n```\n=MEDIAN(FILTER(C:C, A:A=H2))\n```\n\n\n\nUPDATE:\nit's now possible:\n```\n=BYROW(H2:H7, LAMBDA(xx, MEDIAN(FILTER(C:C, A:A=xx))))\n```\n\n\nor even like:\n```\n=BYROW(UNIQUE(FILTER(A:A, B:B=\"person-person\")), LAMBDA(xx, MEDIAN(FILTER(C:C, A:A=xx))))\n```\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate median of a sliding window with awk\r\n                \r\nI need to produce a sliding window of millions of lines and to calculate the median of column 3. My data looks like this with column 1 always being the same, column 2 equaling the line number and column 3 being the information that I need the median for:\n\n```\nHiC_scaffold_1  1   34\nHiC_scaffold_1  2   34\nHiC_scaffold_1  3   36\nHiC_scaffold_1  4   37\nHiC_scaffold_1  5   38\nHiC_scaffold_1  6   39\nHiC_scaffold_1  7   40\nHiC_scaffold_1  8   40\nHiC_scaffold_1  9   40\nHiC_scaffold_1  10  41\nHiC_scaffold_1  11  41\nHiC_scaffold_1  12  41\nHiC_scaffold_1  13  44\nHiC_scaffold_1  14  44\nHiC_scaffold_1  15  55\n```\n\n\nand I need a result like this, assuming a sliding window of 4 and rounding to the nearest whole number. In the real dataset I'll likely use a sliding window of 1000:\n\n```\nHiC_scaffold_1  4   35\nHiC_scaffold_1  5   37\nHiC_scaffold_1  6   38\nHiC_scaffold_1  7   39\nHiC_scaffold_1  8   40\nHiC_scaffold_1  9   40\nHiC_scaffold_1  10  40\nHiC_scaffold_1  11  41\nHiC_scaffold_1  12  41\nHiC_scaffold_1  13  41\nHiC_scaffold_1  14  43\nHiC_scaffold_1  15  44\n```\n\n\nI found the following script here for doing what I want but for mean, not median:\n\n```\nawk -v OFS=\"\\t\" 'BEGIN {\n        window = 4\n        slide = 1\n}\n\n{\n        mod = NR % window\n        if (NR <= window) {\n                count++\n        } else {\n                sum -= array[mod]\n        }\n        sum += $3\n        array[mod] = $3\n}\n\n(NR % slide) == 0 {\n        print $1, NR, sum / count\n}\n' file.txt\n```\n\n\nand this script for calculating median with awk from here:\n\n```\nsort -n -k3 file.txt |\nawk '{\n        arr[NR] = $3\n}\n\nEND {\n        if (NR % 2 == 1) {\n                print arr[(NR + 1) / 2]\n        } else {\n                print $1 \"\\t\" $2 \"\\t\" (arr[NR / 2] + arr[NR / 2 + 1]) / 2\n        }\n}\n'\n```\n\n\nbut I can't get them to work together. One other issue is that the median calculation requires a sorted input. I also found this datamash solution but I don't know how to make is work efficiently with a sliding window.\n    ", "Answer": "\r\nThe following assumes the availability of the function ```\nasort```\n, as provided by GNU awk (gawk).  The program is parameterized by wsize, the window size -- here 4:\n\n```\ngawk -v wsize=4 '\n   BEGIN { \n    if (wsize % 2 == 0) { m1=wsize/2; m2=m1+1; } else { m1 = m2 = (wsize+1)/2; } \n   }\n   function roundedmedian() {\n     asort(window, a);\n     return (m1==m2) ? a[m1] : int(0.5 + ((a[m1] + a[m2]) / 2));\n   }\n   function push(value) {\n     window[NR % wsize] = value;\n   }\n   NR < wsize { window[NR]=$3; next; }\n   { push($3);\n     $3 = roundedmedian();\n     print $0;\n   }' \n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Get median value from array of decimals\r\n                \r\nI've need to work out all the averages (mode, mean, median, range) from an array of numbers.\n\nThe calculator is taking input from ```\nNumericUpDown```\n and adding them to a ```\nlistBox```\n,\nThe listBox items are added to a ```\nList<Decimal>```\n (because it seems easier to print to label).\n\nFor each average method the list is converted to an ```\nArray```\n because it seems easier to calculate. \n\nNot going to lie, I don't even know where to begin with median...\n\nI've copied some code form various solutions on StackOverflow and what not but none of them work because they weren't written for decimals and too be honest, I don't really understand the code. \n\nAddNumbers\n\n```\n //Add number to list and retun to 0.\n    private void btnAddNums_Click(object sender, EventArgs e)\n    {\n        //Add selcted item from listbox\n        listBoxNumbers.Items.Add(numUpDownAvg.Value);\n\n        //Create new instance of listNumbers\n        List<Decimal> listNumbers = new List<Decimal>();\n\n        //for each decimal in listbox...\n        foreach (Decimal listItems in listBoxNumbers.Items)\n        {\n            //Add to listNumbers\n            listNumbers.Add(listItems);\n            numUpDownAvg.Value = 0;\n        }\n\n        //iterate though list printing each item seperate by a comma\n        for (int i = 0; i < listNumbers.Count; i++)\n        {\n            txtBoxNumbers.Text = (String.Join(\",\", listNumbers));\n\n        }\n\n        //print list to console \n        Console.WriteLine(String.Join(\",\", listNumbers));\n    }\n```\n\n\nMedian\n\n```\n    //This button prints median to results\n    private void btnMedian_Click(object sender, EventArgs e)\n    {\n\n        //Create new instance of listNumbers\n        List<Decimal> listNumbers = new List<Decimal>();\n\n        //for each decimal in listbox...\n        foreach (Decimal listItems in listBoxNumbers.Items)\n        {\n            //Add to listNumbers\n            listNumbers.Add(listItems);\n\n        }\n\n        //Convert list to array \n        decimal[] listArrayofNumbers = listNumbers.ToArray();\n\n        Array.Sort(listArrayofNumbers);\n\n        var n = listArrayofNumbers.Length;\n\n        decimal median;\n\n        var isOdd = n % 2 != 0;\n        if (isOdd)\n        {\n            median = listArrayofNumbers[(n + 1) / 2 - 1];\n        }\n        else\n        {\n            median = Convert.ToDecimal(listArrayofNumbers[n / 2 - 1] + listArrayofNumbers[n / 2]) / 2.0d;\n        }\n\n       // Console.WriteLine(median);\n\n    }\n```\n\n\n}\n\nthe error is ```\nmedian = Convert.ToDecimal(listArrayofNumbers[n / 2 - 1] + listArrayofNumbers[n / 2]) / 2.0d;```\n\n\nThe error says \"Operator \"/\" cannot be used with type decimal or double \"\n\nassuming I need to cast to decimal somewhere? Obviously Convert.ToDecimal isn't right...\n\nTIA!\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding the median value of an RGB image in OpenCV?\r\n                \r\nIs there any easy way of finding the median value of a RGB image in OpenCV using C? \nIn MATLAB we can just extract the arrays corresponding to the three channels and compute median values for each of the arrays by ```\nmedian(median(array))```\n. Finally, the median value of these three medians (for three channels) can be calculated for the final median value.\n    ", "Answer": "\r\nYou can convert the matrix to a histogram via the ```\ncalcHist```\n function (once for each channel), then calculate the median for a given channel by using the function available here.\n\nNote: I have not tested that linked code, but it should at least give you an idea of how to get started.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Error in calculating median image?\r\n                \r\n```\nimage=imread('Tiger.jpg');\n%figure,imshow(uint8(image)),title('Before applying Median Filter');\n\n\n[rows, cols]=size(image);\nB=zeros(rows, cols);\n\nfor rowNo=2:rows-1\n    for colNo=2:cols-1\n         K=image(rowNo-1:rowNo+1,colNo-1:colNo+1);\n\n    B(rows,cols)=median(K);\n   end\nend\n\n\nfigure,imshow(uint8(B)),title('After applying Median Filter');\n```\n\n\nI want to calculate the median of my image without using built in function , but i give me the errors ,can any one please help me out\nError\n\n```\n??? Subscripted assignment dimension mismatch.\n\nError in ==> Quest_2median at 18\n    B(rows,cols)=median(K);\n```\n\n    ", "Answer": "\r\nBelow code is a better implementation:\n\n```\nimage=imread('../SampleImages/cat.jpg');\n%figure,imshow(uint8(image)),title('Before applying Median Filter');\nimage = rgb2gray(image);\nimage = imnoise(image,'salt & pepper');\n[rows, cols]=size(image);\nB=zeros(rows, cols);\n\nfor rowNo=2:rows-1\n    for colNo=2:cols-1\n        K=image(rowNo-1:rowNo+1,colNo-1:colNo+1);\nK = reshape (K,1,9);\nB(rowNo,colNo)=median(K);\n    end\nend\n\nfigure,imshow(uint8(image)),title('Before applying Median Filter');\nfigure,imshow(uint8(B)),title('After applying Median Filter');\n```\n\n\nThe note is median function takes a vector and when you pass a matrix it gives a row vector including median of each column.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "VBA finding the median without using the function\r\n                \r\nI'm trying to find the median without using the function but I can't figure out what I'm doing wrong here.\n```\nDim i As Integer\nDim passNum As Integer\nDim temp As Integer\nDim aantal As Integer\nDim n(1 To 50) As Single\nDim p As Integer\nDim j As Single\nDim t As Single\nDim median As Single\n\n\naantal = InputBox(\"how many n variables do you want max 50\")\n\nFor p = 1 To aantal\n    n(p) = InputBox(\"geef \" & aantal & \" nummers\")\nNext\n\n\n\n\n'Rem bubble sort names\n    For passNum = 1 To aantal - 1\n        For i = 1 To aantal - passNum\n            If n(i) < n(i + 1) Then\n                temp = n(i)\n                n(i) = n(i + 1)\n                n(i + 1) = temp\n            End If\n        Next i\nNext passNum\n'Rem display alphabetized list\nFor i = 1 To aantal\n    Worksheets(1).Cells(i, 1) = n(i)\nNext i\n\n\n'find the median\n\nt = aantal Mod 2\n\nIf t > 0 Then\n    median = n(aantal + 1) / 2\nElse\n    median = (n(aantal / 2) + (n(aatnal) / 2) + 1) / 2\n    \nEnd If\n\n    Worksheets(1).Cells(1, 2) = median\n\nEnd Sub\n```\n\nthis is the code that I have right now but it won't find the median everything else works fine.\nI've tried changing n(aantal) for something else but that doesn't work either it just either gives me the wrong number or nothing.\n    ", "Answer": "\r\nMaybe try this:\n```\nSub Median()\n\n    Dim i As Integer\n    Dim aantal As Integer, tmp as double\n    ReDim n(0) As Double\n\n100:        \n    aantal = InputBox(\"how many n variables do you want max 50\")\n    If aantal > 50 Then Goto 100\n    \n    ReDim n(aantal - 1)\n    For i = 0 To UBound(n)\n        n(i) = CDbl(InputBox(\"Geef nr \" & i + 1 & \" van \" & aantal & \" nummers\"))\n    Next\n    \n    For i = LBound(n) To UBound(n)\n        For j = i + 1 To UBound(n)            \n            If n(i) > n(j) Then\n                tmp = n(j)\n                n(j) = n(i)\n                n(i) = tmp\n            End If\n        Next\n    Next\n    \n    m = aantal Mod 2\n    ix = ((aantal + m) / 2) - 1\n    If (m = 1) Then\n        nMedian = n(ix)\n    Else\n        nMedian = (n(ix) + n(ix + 1)) / 2\n    End If\n    \n    Debug.Print nMedian        \n    \nEnd Sub\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate median of a sliding window with awk\r\n                \r\nI need to produce a sliding window of millions of lines and to calculate the median of column 3. My data looks like this with column 1 always being the same, column 2 equaling the line number and column 3 being the information that I need the median for:\n\n```\nHiC_scaffold_1  1   34\nHiC_scaffold_1  2   34\nHiC_scaffold_1  3   36\nHiC_scaffold_1  4   37\nHiC_scaffold_1  5   38\nHiC_scaffold_1  6   39\nHiC_scaffold_1  7   40\nHiC_scaffold_1  8   40\nHiC_scaffold_1  9   40\nHiC_scaffold_1  10  41\nHiC_scaffold_1  11  41\nHiC_scaffold_1  12  41\nHiC_scaffold_1  13  44\nHiC_scaffold_1  14  44\nHiC_scaffold_1  15  55\n```\n\n\nand I need a result like this, assuming a sliding window of 4 and rounding to the nearest whole number. In the real dataset I'll likely use a sliding window of 1000:\n\n```\nHiC_scaffold_1  4   35\nHiC_scaffold_1  5   37\nHiC_scaffold_1  6   38\nHiC_scaffold_1  7   39\nHiC_scaffold_1  8   40\nHiC_scaffold_1  9   40\nHiC_scaffold_1  10  40\nHiC_scaffold_1  11  41\nHiC_scaffold_1  12  41\nHiC_scaffold_1  13  41\nHiC_scaffold_1  14  43\nHiC_scaffold_1  15  44\n```\n\n\nI found the following script here for doing what I want but for mean, not median:\n\n```\nawk -v OFS=\"\\t\" 'BEGIN {\n        window = 4\n        slide = 1\n}\n\n{\n        mod = NR % window\n        if (NR <= window) {\n                count++\n        } else {\n                sum -= array[mod]\n        }\n        sum += $3\n        array[mod] = $3\n}\n\n(NR % slide) == 0 {\n        print $1, NR, sum / count\n}\n' file.txt\n```\n\n\nand this script for calculating median with awk from here:\n\n```\nsort -n -k3 file.txt |\nawk '{\n        arr[NR] = $3\n}\n\nEND {\n        if (NR % 2 == 1) {\n                print arr[(NR + 1) / 2]\n        } else {\n                print $1 \"\\t\" $2 \"\\t\" (arr[NR / 2] + arr[NR / 2 + 1]) / 2\n        }\n}\n'\n```\n\n\nbut I can't get them to work together. One other issue is that the median calculation requires a sorted input. I also found this datamash solution but I don't know how to make is work efficiently with a sliding window.\n    ", "Answer": "\r\nThe following assumes the availability of the function ```\nasort```\n, as provided by GNU awk (gawk).  The program is parameterized by wsize, the window size -- here 4:\n\n```\ngawk -v wsize=4 '\n   BEGIN { \n    if (wsize % 2 == 0) { m1=wsize/2; m2=m1+1; } else { m1 = m2 = (wsize+1)/2; } \n   }\n   function roundedmedian() {\n     asort(window, a);\n     return (m1==m2) ? a[m1] : int(0.5 + ((a[m1] + a[m2]) / 2));\n   }\n   function push(value) {\n     window[NR % wsize] = value;\n   }\n   NR < wsize { window[NR]=$3; next; }\n   { push($3);\n     $3 = roundedmedian();\n     print $0;\n   }' \n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Find the median of an unsorted array without sorting [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                    \r\n                        O(n) algorithm to find the median of n² implicit numbers\r\n                            \r\n                                (3 answers)\r\n                            \r\n                    \r\n                Closed 7 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nis there a way to find the Median of an unsorted array:\n1- without sorting it.\n2- without using the select algorithm, nor the median of medians\n\nI found a lot of other questions similar to mine. But the solutions, most of them, if not all of them, discussed the SelectProblem and the MedianOfMedians\n    ", "Answer": "\r\nYou can certainly find the median of an array without sorting it. What is not easy is doing that efficiently.\n\nFor example, you could just iterate over the elements of the array; for each element, count the number of elements less than and equal to it, until you find a value with the correct count. That will be O(n2) time but only O(1) space.\n\nOr you could use a min heap whose size is just over half the size of the array. (That is, if the array has ```\n2k```\n or ```\n2k+1```\n elements, then the heap should have ```\nk+1```\n elements.) Build the heap using the first array elements, using the standard heap building algorithm (which is O(N)). Then, for each remaining element ```\nx```\n, if ```\nx```\n is greater than the heap's minimum, replace the min element with ```\nx```\n and do a SiftUp operation (which is O(log N)). At the end, the median is either the heap's minimum element (if the original array's size was odd) or is the average of the two smallest elements in the heap. So that's a total of O(n log n) time, and O(n) space if you cannot rearrange array elements. (If you can rearrange array elements, you can do this in-place.)\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "VBA finding the median without using the function\r\n                \r\nI'm trying to find the median without using the function but I can't figure out what I'm doing wrong here.\n```\nDim i As Integer\nDim passNum As Integer\nDim temp As Integer\nDim aantal As Integer\nDim n(1 To 50) As Single\nDim p As Integer\nDim j As Single\nDim t As Single\nDim median As Single\n\n\naantal = InputBox(\"how many n variables do you want max 50\")\n\nFor p = 1 To aantal\n    n(p) = InputBox(\"geef \" & aantal & \" nummers\")\nNext\n\n\n\n\n'Rem bubble sort names\n    For passNum = 1 To aantal - 1\n        For i = 1 To aantal - passNum\n            If n(i) < n(i + 1) Then\n                temp = n(i)\n                n(i) = n(i + 1)\n                n(i + 1) = temp\n            End If\n        Next i\nNext passNum\n'Rem display alphabetized list\nFor i = 1 To aantal\n    Worksheets(1).Cells(i, 1) = n(i)\nNext i\n\n\n'find the median\n\nt = aantal Mod 2\n\nIf t > 0 Then\n    median = n(aantal + 1) / 2\nElse\n    median = (n(aantal / 2) + (n(aatnal) / 2) + 1) / 2\n    \nEnd If\n\n    Worksheets(1).Cells(1, 2) = median\n\nEnd Sub\n```\n\nthis is the code that I have right now but it won't find the median everything else works fine.\nI've tried changing n(aantal) for something else but that doesn't work either it just either gives me the wrong number or nothing.\n    ", "Answer": "\r\nMaybe try this:\n```\nSub Median()\n\n    Dim i As Integer\n    Dim aantal As Integer, tmp as double\n    ReDim n(0) As Double\n\n100:        \n    aantal = InputBox(\"how many n variables do you want max 50\")\n    If aantal > 50 Then Goto 100\n    \n    ReDim n(aantal - 1)\n    For i = 0 To UBound(n)\n        n(i) = CDbl(InputBox(\"Geef nr \" & i + 1 & \" van \" & aantal & \" nummers\"))\n    Next\n    \n    For i = LBound(n) To UBound(n)\n        For j = i + 1 To UBound(n)            \n            If n(i) > n(j) Then\n                tmp = n(j)\n                n(j) = n(i)\n                n(i) = tmp\n            End If\n        Next\n    Next\n    \n    m = aantal Mod 2\n    ix = ((aantal + m) / 2) - 1\n    If (m = 1) Then\n        nMedian = n(ix)\n    Else\n        nMedian = (n(ix) + n(ix + 1)) / 2\n    End If\n    \n    Debug.Print nMedian        \n    \nEnd Sub\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "PHP find median using heap vs sort\r\n                \r\nI was looking for a quick way to calculate the median of a list of numbers and came across this:\n\n```\nfunction array_median($array) {\n  // perhaps all non numeric values should filtered out of $array here?\n  $iCount = count($array);\n  if ($iCount == 0) {\n    return null;\n  }\n  // if we're down here it must mean $array\n  // has at least 1 item in the array.\n  $middle_index = floor($iCount / 2);\n  sort($array, SORT_NUMERIC);\n  $median = $array[$middle_index]; // assume an odd # of items\n  // Handle the even case by averaging the middle 2 items\n  if ($iCount % 2 == 0) {\n    $median = ($median + $array[$middle_index - 1]) / 2;\n  }\n  return $median;\n}\n```\n\n\nThis approach using ```\nsort()```\n makes sense and is certainly the obvious approach. However, I was curious if a median heap would be faster.  What was surprising was that when I implemented a simple median heap it is consistently significantly slower than the above method.\n\nMy simple MedianHeap class:\n\n```\nclass MedianHeap{\nprivate $lowerHeap;\nprivate $higherHeap;\n\nprivate $numbers = [];\n\npublic function __construct($numbers = null)\n{\n    $this->lowerHeap = new SplMaxHeap();\n    $this->higherHeap = new SplMinHeap();\n\n    if (count($numbers)) {\n        $this->insertArray($numbers);   \n    }\n}\npublic function insertArray ($numbers) {\n    foreach($numbers as $number) {\n        $this->insert($number);\n    }\n}\npublic function insert($number)\n{\n    $this->numbers[] = $number;\n    if ($this->lowerHeap->count() == 0 || $number < $this->lowerHeap->top()) {\n        $this->lowerHeap->insert($number);\n    } else {\n        $this->higherHeap->insert($number);\n    }\n    $this->balance();\n}\nprotected function balance()\n{\n    $biggerHeap = $this->lowerHeap->count() > $this->higherHeap->count() ? $this->lowerHeap : $this->higherHeap;\n    $smallerHeap = $this->lowerHeap->count() > $this->higherHeap->count() ? $this->higherHeap : $this->lowerHeap;\n\n    if ($biggerHeap->count() - $smallerHeap->count() >= 2) {\n        $smallerHeap->insert($biggerHeap->extract());\n    }\n}\npublic function getMedian()\n{\n    if (!count($this->numbers)) {\n        return null;\n    }\n    $biggerHeap = $this->lowerHeap->count() > $this->higherHeap->count() ? $this->lowerHeap : $this->higherHeap;\n    $smallerHeap = $this->lowerHeap->count() > $this->higherHeap->count() ? $this->higherHeap : $this->lowerHeap;\n\n    if ($biggerHeap->count() == $smallerHeap->count()) {\n        return ($biggerHeap->top() + $smallerHeap->top())/2;\n    } else {\n        return $biggerHeap->top();\n    }\n}\n}\n```\n\n\nAnd then the code to benchmark:\n\n```\n$array = [];\n\nfor($i=0; $i<100000; $i++) {\n     $array[] = mt_rand(1,100000) / mt_rand(1,10000);\n}\n\n\n$t = microtime(true);\necho array_median($array);\necho PHP_EOL . 'Sort Median: ' . (microtime(true) - $t) . ' seconds';\n\necho PHP_EOL;\n\n$t = microtime(true);\n$list = new MedianHeap($array);\necho $list->getMedian();\necho PHP_EOL . 'Heap Median: '. (microtime(true) - $t) . ' seconds';\n```\n\n\nIs there something in PHP that makes using heaps for this inefficient somehow or is there something wrong with my implemenation?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Selection Algorithm to Find Median [duplicate]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                This question already has answers here:\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                Closed 11 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\n\n  Possible Duplicate:\n  How to calculate or approximate the median of a list without storing the list  \n\n\n\n\nI want to apply using C# an algorithm to find the median value using selection/quick sort. But I do not want to sort the whole array in order to get the median. \n\nCan I do it?\n    ", "Answer": "\r\nWikipedia's entry on Selection Algorithm gives various alternatives, including the Median of Medians approach, which would seem to fit your requirements. In particular, it has a worst-case performance of O(n).\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Sliding window median in C++\r\n                \r\nI need some sliding window statistics and I am considering to use ```\nboost::accumulators```\n for that, however, I couldn't find the sliding window median algorithm there.\n\nDoes ```\nboost::accumulators```\n provide an exact and deterministic sliding window median algorithm? And if no, is there a nice way to build one using what it provides?\n\nIs there another robust library for sliding window statistics that would be a better choice? Maybe a C++ wrapper on GSL? \n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Using Median aggregate in same query as avg?\r\n                \r\nIs there a way around this error?\n\nUsing LISTAGG/PERCENTILE_CONT/MEDIAN aggregate functions with other distinct aggregate function not supported\n\nMy code:\n```\nselect\n    date, \n    count(distinct listing_id) as count_listings, \n    count(distinct inquiry_id) as count_inquiries,\n    avg(days_btw_start_date_first_inquiry) as avg_days_btw_start_date_first_inquiry, \n    median(days_btw_start_date_first_inquiry) as med_days_btw_start_date_first_inquiry\nfrom together \ngroup by 1\n```\n\nThe median is throwing the error, but I'm hoping to have the counts + avg + median in one table.\nThanks!\n    ", "Answer": "\r\nas a workaround you can join 2 grouped results\n```\nselect\n    t.date,\n    avg(days_btw_start_date_first_inquiry) as avg_days_btw_start_date_first_inquiry,\n    median(days_btw_start_date_first_inquiry) as med_days_btw_start_date_first_inquiry,\n    t2.count_listings,\n    t2.count_inquiries\nfrom together t\n    left join (\n        select date,\n            count(distinct listing_id) as count_listings,\n            count(distinct inquiry_id) as count_inquiries\n        from together\n    ) t2 on t.date = t2.date\ngroup by 1\n```\n\nIt should not make a very significant impact on performance if your data volume is not counting in TB. For a table of 50GB and very similar query such workaround makes +20% run time impact against query without join and distinct functions.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of values in tuple in Pig?\r\n                \r\nI have a tuple that contains a few numbers. For example:\n\n```\n(a:17, b:14, c:123, d:23, e:37)\n```\n\n\nWhat is the best way to find the median of the numbers in that tuple? So, for a bag of tuples as above, I should get a bag of single-value tuples, with the single value being the median of the values in one of the input tuples.\n\nSomething like this:\n\n```\nx = LOAD '/path/to/tuples.csv' USING PigLoader(',') AS (a:int, b:int, c:int, d:int, e:int);\ny = FOREACH x GENERATE MEDIAN(a, b, c, d, e);\n```\n\n\nI just don't know how to build the ```\nMEDIAN```\n function above. I'm hoping I don't need a UDF!\n    ", "Answer": "\r\nMEDIAN works on multiple tuples inside a BAG. You would need to create BAG out of a, b, c, d and e and then pass the bag to MEDIAN function.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to create an aggregate function for median?\r\n                \r\nI need to create an aggregate function in Advantage-Database to calculate the median value.\n\n```\nSELECT \n    group_field\n  , MEDIAN(value_field) \nFROM \n  table_name\nGROUP BY \n  group_field\n```\n\n\nSeems the solutions I am finding are quite specific to the sql engine used.\n    ", "Answer": "\r\nThere is no built-in median aggregate function in ADS as you can see in the help file:\n\nhttp://devzone.advantagedatabase.com/dz/webhelp/Advantage10.1/index.html\n\nI'm afraid that you have to write your own stored procedure or sql script to solve this problem.\n\nThe accepted answer to the following question might be a solution for you:\nSimple way to calculate median with MySQL\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding the median value of an RGB image in OpenCV?\r\n                \r\nIs there any easy way of finding the median value of a RGB image in OpenCV using C? \nIn MATLAB we can just extract the arrays corresponding to the three channels and compute median values for each of the arrays by ```\nmedian(median(array))```\n. Finally, the median value of these three medians (for three channels) can be calculated for the final median value.\n    ", "Answer": "\r\nYou can convert the matrix to a histogram via the ```\ncalcHist```\n function (once for each channel), then calculate the median for a given channel by using the function available here.\n\nNote: I have not tested that linked code, but it should at least give you an idea of how to get started.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median Calculation in Excel with Conditions\r\n                \r\nI am having trouble getting the following Excel formula to work. I think I am having an issue with my parenthesis. I am trying to take the median based off of 3 conditions. The last condition is a date range. \n\n```\n=MEDIAN(IF($G$3:$G$458=$K$3,IF($A$3:$A$458=M$3,IF(AND($E$3:$E$458>DATEVALUE(\"1/1/2014\"),$E$3:$E$458<DATEVALUE(\"12/31/2014\")),$H$3:$H$458))))\n```\n\n    ", "Answer": "\r\nYour formula is correct you just need to hit CTRL+SHIFT+ENTER to make it an array formula.\n\nWhenever you apply a formula (```\nE3:E458=$E$458```\n) to a range within one cell you need to make the calculation an array formula.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "issues with calculating Median\r\n                \r\nHere is my data\n\n\r\n\r\n```\n10\tA\r\n12\tA\r\n14\tB\r\n15\tB\r\n15\tC\r\n11\tD\r\n12\tD\r\n10\tB\r\n11\tA```\n\r\n\r\n\r\n\n\nI want to select A and C from Column B and then calculate the median based on column A.\n\nI have used this function\n\n```\n=MEDIAN(IF(B1:B9=\"A\",B1:B9=\"C\",A1:A9))```\n\n\nBut I got a wrong Number. Can we solve this issues? Many thanks for your help. \n    ", "Answer": "\r\nTry this, entered as an array formula by holding down ```\nctrl+shift```\n while you hit ```\nEnter```\n\n\n```\n=MEDIAN(IF($B$1:$B$10={\"A\",\"C\"},$A$1:$A$10))\n```\n\n\nThe ```\nIF```\n function returns an array of either the appropriate value in A1:A10, or FALSE.  And the MEDIAN function will ignore the logical values, since they are produced by a function, and not manually entered.\n\nHere is a screen shot showing the data and the result.  You can see the formula in the formula bar: (Note that the braces ```\n{...}```\n around the formula are NOT added manually.  They will be added by Excel when you confirm the formula with ```\nctrl+shift+enter```\n.  With regard to the array constant, however, those braces you do type in manually.\n\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate median using vba\r\n                \r\nHow do I calculate the median for a range of more than 30 values using VBA? The ```\nWorkSheetFormula```\n method can handle only 30 values. My function at the moment looks like this;\n\n```\nFunction medval(Longitudes As Range)\n'I want the median for values in the range (here 'Longitudes') B2:B100)\nEnd Function\n```\n\n    ", "Answer": "\r\nYou can average/find median of as many contiguous data values as you want:\n\n```\n=MEDIAN(A1:A65500)```\n will work \n\nbut you cannot exceed 30 individual references in Excel 2003 (in 2007 you can have 255 references).\n\ni.e. \n\n```\n=MEDIAN(A1,A2,A3,...A31)```\n  will not work.  \n\nA range of values will work as long as they are contiguous\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to make the median in java\r\n                \r\nWhat am I doing wrong?\n\nThe median is always -0.5 result or 0.5, if ```\n((m) + (m+1))/2;```\n \n\n```\npublic static double mediana(List<Double> liczby ){\n    Collections.sort(liczby);\n    int n = liczby.size()/2;\n    double m;\n    m = get(n);\n    if (liczby.size() % 2 == 0){\n\n        return  ((m) + (m-1))/2;\n\n    }\n    else {\n        return m; \n    }\n}\n```\n\n    ", "Answer": "\r\nIn your code, the problem is in this line.\n\n```\nreturn  ((m) + (m-1))/2;\n```\n\n\nIt should return the average of nth number and (n-1)th number as n = (size of the list)/2. You can try this.\n\n```\npublic static double mediana(List<Double> liczby ){\nCollections.sort(liczby);\nint n = liczby.size()/2;\ndouble m;\nif (liczby.size() % 2 == 0)\nm = (liczby.get(n) + liczby.get(n-1))/2;\nelse\nm = liczby.get(n);\nreturn m;\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Pandas - get median of the daily sum\r\n                \r\nI have a such line of code:\n```\ndf_append.groupby(['user_id', 'date'])['money'].sum()\n```\n\nIt gives me such results:\n```\nuser_id      date\n1           20210701          7169.21\n            20210702          7988.33\n            20210703          7326.52\n            20210704          6281.38\n            20210705          5561.10\n                               ...   \n1031536     20220626          5162.35\n            20220627          4522.90\n            20220628          5028.58\n            20220629          5694.28\n            20220630          6487.43\n```\n\nBut now I want a median value for all those dates. I am not really sure how to do it. I tried .median() after .sum() but it gives me one value instead of one median value for a specific user.\n    ", "Answer": "\r\nThis was the result that I wanted to achieve - figured it out:\n```\ntransactions_df['sum median daily'] = (df_append.groupby(['user_id', 'date'])['money'].sum().to_frame(name = 'sum').reset_index()).groupby('user_id')['sum'].median()\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "determine median of double column r\r\n                \r\nI have the following dataset\n\n```\n> temp6\n# A tibble: 120 x 1\n      Arithmetic Mean\n            <dbl>\n 1           0.96\n 2           2.09\n 3           0.57\n 4           0.66\n 5           0.92\n 6           0.60\n 7           0.40\n 8           0.42\n 9           0.27\n10           0.47\n# ... with 110 more rows\n```\n\n\nI very badly need the median of this data column, but obviously when I try \n\n```\nmedian(temp6, na.rm=TRUE)\n```\n\n\nI get this error message: \n\n```\nError in median.default(temp6, na.rm = TRUE) : need numeric data\n```\n\n\nIf I attempt to convert this data to 'numeric', that doesn't work either\n\n```\nas.numeric(temp6, na.rm=TRUE)\n```\n\n\nor\n\n```\nas.numeric(as.character(temp6)\n```\n\n\ngives:\n\n```\nError: (list) object cannot be coerced to type 'double'\n```\n\n\nand\n\n```\nWarning message:\nNAs introduced by coercion \n```\n\n\nrespectively. I've done enough research to know that neither of these processes will work, but I have not been able to find a workaround of any sort to find the median of these data points. Is there any way to make this happen?\n    ", "Answer": "\r\nAccording to ```\n?median```\n\n\n\n  median(x, na.rm = FALSE, ...)\n\n\nwhere\n\n\n  x an object for which a method has been defined, or a numeric vector\n  containing the values whose median is to be computed.\n\n\nIf it is a ```\ndata.frame```\n, then converting to ```\nvector```\n can be done with ```\ntemp6[,1]```\n.  As it is a ```\ntibble```\n, we need ```\n[[```\n.  Suppose, we do the extraction with ```\n[```\n\n\n```\ntemp6[,1]\n# A tibble: 10 x 1\n#   `Arithmetic Mean`\n#               <dbl>\n# 1              0.96\n# 2              2.09\n# 3              0.57\n# 4              0.66\n# 5              0.92\n# 6              0.60\n# 7              0.40\n# 8              0.42\n# 9              0.27\n#10              0.47\n```\n\n\nIt is still a ```\ntibble```\n, where as using ```\n[[```\n\n\n```\ntemp6[[1]]\n#[1] 0.96 2.09 0.57 0.66 0.92 0.60 0.40 0.42 0.27 0.47\n```\n\n\nit is converted to a ```\nvector```\n\n\n```\nis.vector(temp6[[1]])\n#[1] TRUE\n```\n\n\nNow, we can get the ```\nmedian```\n\n\n```\nmedian(temp6[[1]], na.rm = TRUE)\n#[1] 0.585\n```\n\n\nOr use the ```\n$```\n\n\n```\nmedian(temp6$`Arithmetic Mean`, na.rm = TRUE)\n#[1] 0.585\n```\n\n\ndata\n\n```\ntemp6 <- structure(list(`Arithmetic Mean` = c(0.96, 2.09, 0.57, 0.66, \n 0.92, 0.6, 0.4, 0.42, 0.27, 0.47)), .Names = \"Arithmetic Mean\", row.names = c(\"1\", \n \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"), class = c(\"tbl_df\", \n\"tbl\", \"data.frame\"))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to create an aggregate function for median?\r\n                \r\nI need to create an aggregate function in Advantage-Database to calculate the median value.\n\n```\nSELECT \n    group_field\n  , MEDIAN(value_field) \nFROM \n  table_name\nGROUP BY \n  group_field\n```\n\n\nSeems the solutions I am finding are quite specific to the sql engine used.\n    ", "Answer": "\r\nThere is no built-in median aggregate function in ADS as you can see in the help file:\n\nhttp://devzone.advantagedatabase.com/dz/webhelp/Advantage10.1/index.html\n\nI'm afraid that you have to write your own stored procedure or sql script to solve this problem.\n\nThe accepted answer to the following question might be a solution for you:\nSimple way to calculate median with MySQL\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Get the median of a Power BI measure\r\n                \r\nHow can I calculate the median of a measure in Power BI DAX?\nI have a measure [Total Utilization (%)], and I want to get its median. But it looks like I can only use Median for columns\nSample Dataset:\n\n    ", "Answer": "\r\nTry this measure:\n```\n=\nVAR T1 =\n    SUMMARIZE (\n        Table,\n        Table[Employee],\n        \"Total Utilization\", [Total Utilization (%)]\n    )\nRETURN\n    MEDIANX (\n        T1,\n        [Total Utilization]\n    )\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "how do you find the median of 2 columns using R?\r\n                \r\nI am trying to compute the median vector of a data set ```\ns```\n with column ```\nA1```\n and ```\nB1```\n. The median vector is the median for each  observation from both columns. \n\nI tried to do this and it did not work. \n\n```\nmedian(s[c(\"A1\",\"B1\")])\n```\n\n\nIs there another way to do it? \n    ", "Answer": "\r\nThe median of two observations is simply the mean. So ```\nrowMeans(s[,c(\"A1\",\"B1\")])```\n. Equivalently, ```\napply(s[,c(\"A1\",\"B1\")],1,median)```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Compute median of column in SQL common table expression\r\n                \r\nIn MSSQL2008, I am trying to compute the median of a column of numbers from a common table expression using the classic median query as follows:\n\n```\nWITH cte AS\n(\n   SELECT number\n   FROM table\n) \n\nSELECT cte.*,\n(SELECT \n  (SELECT (   \n    (SELECT TOP 1 cte.number  \n     FROM     \n     (SELECT TOP 50 PERCENT cte.number     \n      FROM cte\n      ORDER BY cte.number) AS medianSubquery1   \n    ORDER BY cte.number DESC)  \n    +   \n  (SELECT TOP 1 cte.number\n   FROM     \n    (SELECT TOP 50 PERCENT cte.number    \n     FROM cte   \n     ORDER BY cte.number DESC) AS medianSubquery2   \n   ORDER BY cte.number ASC) ) / 2)) AS median\n\nFROM cte\nORDER BY cte.number\n```\n\n\nThe result set that I get is the following:\n\n```\nNUMBER    MEDIAN\nx1        x1\nx1        x1\nx1        x1\nx2        x2\nx3        x3\n```\n\n\nIn other words, the \"median\" column is the same as the \"number\" column when I would expect the median column to be \"x1\" all the way down.  I use a similar expression to compute the mode and it works fine over the same common table expression.\n    ", "Answer": "\r\nHere's a slightly different way to do it:\n\n```\nWITH cte AS\n(\n   SELECT number\n   FROM table1\n)\nSELECT T1.number, T3.median\nFROM cte T1, \n(\n    SELECT AVG(number) AS median\n    FROM\n    (\n        SELECT number, ROW_NUMBER() OVER(ORDER BY number) AS rn\n        FROM cte\n    ) T2\n    WHERE T2.rn = ((SELECT COUNT(*) FROM table1) + 1) / 2\n    OR T2.rn = ((SELECT COUNT(*) FROM table1) + 2) / 2\n) T3\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate median based on counts of value\r\n                \r\nI have a following data frame:\n```\n   numbers Freq\n1        4    2\n2        5    1\n3       23    2\n4       34    2\n```\n\nI know how to calculate median in r when frequency is 1 (```\nmedian(`numbers`, na.rm = TRUE)```\n), but how to do that when frequency is different from 1?\n    ", "Answer": "\r\nWe can create a logical index with ```\n!=```\n, use that to subset the 'numbers' column and get the ```\nmedian```\n\n```\nwith(df1, median(numbers[Freq != 1], na.rm = TRUE))\n#[1] 23\n```\n\ndata\n```\ndf1 <- structure(list(numbers = c(4L, 5L, 23L, 34L), Freq = c(2L, 1L, \n2L, 2L)), class = \"data.frame\", row.names = c(\"1\", \"2\", \"3\", \n\"4\"))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding median of an unsorted array in linear time?\r\n                \r\nAfter careful research and thought, I decided to post this question which is a \"sequel\" to my previous question asked earlier today.\nI made an algorithm that finds the median of an ArrayList and bascially all I do is make a temporary ArrayList, then using Collections.sort() on that ArrayList, I can easily get the median. The problem with that is it takes too long for larger files and I am trying(without luck) to find an implementation of an algorithm to get the median of an unsorted Array(or ArrayList).\nFrom what I read here, the Median of Medians algorithm is used followed by QuickSelect but I cannot find an actual implementation that is easy enough to understand.\nHere's a snippet of my code that finds the median of an ArrayList of size ```\nfilterSize```\n:\n```\nwhile(elements.size()-counter >= filterSize){\n            for(int i = 0; i<filterSize; i++){\n                tempElements.add(this.elements.get(i+counter));\n                if(i==filterSize){\n                    break;\n                }\n            }\n            \n            Collections.sort(tempElements); //Sort tempElements to find median\n            outputElements.add(tempElements.get((filterSize-1)/2)); //Add median to an output ArrayList after calculating median index\n            \n            counter++;\n            tempElements.clear(); //Removes all elements from the tempElements and start again\n        }\n```\n\nBasically I'm trying to avoid the whole use of ```\nCollections.sort()```\n and ```\ntempElements.clear()```\n in the code, thus the reason to find a better algorithm for finding the median in linear time.\nThanks.\n    ", "Answer": "\r\nI think the basic Quickselect algorithm (code below from this link) is quite easy to understand: you pick a pivot, apply Quicksort's partition function and then see where that pivot ends up, recursing accordingly to only one of the halves.\n\n```\n function partition(list, left, right, pivotIndex)\n     pivotValue := list[pivotIndex]\n     swap list[pivotIndex] and list[right]  // Move pivot to end\n     storeIndex := left\n     for i from left to right-1\n         if list[i] < pivotValue\n             swap list[storeIndex] and list[i]\n             increment storeIndex\n     swap list[right] and list[storeIndex]  // Move pivot to its final place\n     return storeIndex\n\n  // Returns the n-th smallest element of list within left..right inclusive\n  // (i.e. left <= n <= right).\n  // The size of the list is not changing with each recursion.\n  // Thus, n does not need to be updated with each round.\n  function select(list, left, right, n)\n     if left = right        // If the list contains only one element,\n         return list[left]  // return that element\n     pivotIndex  := ...     // select a pivotIndex between left and right,\n                            // e.g., left + floor(rand() * (right - left + 1))\n     pivotIndex  := partition(list, left, right, pivotIndex)\n     // The pivot is in its final sorted position\n     if n = pivotIndex\n         return list[n]\n     else if n < pivotIndex\n         return select(list, left, pivotIndex - 1, n)\n     else\n         return select(list, pivotIndex + 1, right, n)\n```\n\n\nCompared to median of medians, this can degenerate to ```\nO(n^2)```\n, but you can significantly reduce the chances of that happening by choosing the pivot randomly, like described in the comments.\n\nIf you're not happy with an implementation of median of medians that you don't fully understand, I suggest you go for something like this.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Using scipy.weave.inline for fast 2D median filtering\r\n                \r\nI have a bottleneck in a 2D median filter (3x3 window) I use on a very large set of images, and I'd like to try and optimize it.  I've tested ```\nscipy.ndimage```\n median_filter, as well as ```\nPIL```\n, ```\nscipy.signal```\n and ```\nscikits-image```\n. However, browsing in SO I've learned that there's a fast O(n) median filter out there in C (Median Filtering in Constant Time see Rolling median algorithm in C), and I wondered whether I can implement it in Python using scipy.weave.inline ?\nAny suggestions on an alternative route?\n    ", "Answer": "\r\nTry this:\nRolling median in C - Turlach implementation\n\nhttp://ideone.com/8VVEa\n\nUsage:\n\n```\nMediator* m = MediatorNew(9);\nfor (...)\n{\n      MediatorInsert(m, value);\n      median = MediatorMedian(m);\n}\n```\n\n\nI believe this is the same as the R algo, but cleaner (amazingly so, in fact).\n\nYou can either wrap this, or port it and use Numba (or Cython).  I think I'd recommend Numba over Cython, if nothing else because it is plain old python code.\n\nI suggest adding this to scikits, if it runs faster than the one in scikits already :)\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of an array in Ruby not floating\r\n                \r\nOK folks...I could use some help on getting the median of an array in ruby\n\nHere is my code:\n\n```\ndef median(array)\n  array.sort! # sort the array\n  elements = array.count # count the elements in the array\n  center =  elements/2 # find the center of the array\n  elements.even? ? (array[center] + array[center+1])/2 : array[center]  # if elements are even take both the center numbers of array and divide in half, if odd...get the center number\nend\n```\n\n\nJust not certain where to apply the .to_f since it wont return anything needing a float.\n\nThanks\n    ", "Answer": "\r\nI realized you've solved your own problem already, but this version is a little cleaner and safer:\n\n```\ndef median(array)\n  raise ArgumentError, 'Cannot find the median on an empty array' if array.size == 0\n  sorted = array.sort\n  midpoint, remainder = sorted.length.divmod(2)\n  if remainder == 0 # even count, average middle two\n    sorted[midpoint-1,2].inject(:+) / 2.0\n  else\n    sorted[midpoint]\n  end\nend\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "MySql finding median of a column grouped by another, rather than the median for the whole column\r\n                \r\nContext: \n\nI'm attempting to take a series of market transactions, and determine the amount of money actually moving per item type. This is pretty much my first attempt at MySql, so the query is ugly, but the following nearly works: \n\n```\nSELECT types.typename,\n       averages.type,\n       averages.price,\n       movement.sold,\n       ( averages.price * movement.sold ) AS value\nFROM   (SELECT type,\n               Round(Avg(price)) AS price\n        FROM   orders\n        GROUP  BY type) AS averages\n       INNER JOIN (SELECT type,\n                          ( startingvolume - currentvolume ) AS sold\n                   FROM   (SELECT type,\n                                  Sum(volume)        AS currentVolume,\n                                  Sum(volumeentered) startingVolume\n                           FROM   orders\n                           GROUP  BY type) AS movement\n                   WHERE  ( startingvolume - currentvolume ) > 10000\n                   ORDER  BY sold) AS movement\n               ON averages.type = movement.type\n       INNER JOIN invtypes AS types\n               ON types.typeid = averages.type\nORDER  BY value DESC\nLIMIT  10 ;\n```\n\n\n-\n\n```\n+------------------------------------+-------+---------+------------+------------------+\n| typeName                           | type  | price   | sold       | value            |\n+------------------------------------+-------+---------+------------+------------------+\n| Dirt                               |    34 | 1904767 | 2670581874 | 5086836224393358 |\n| Light Wood                         |  2629 |   42999 |    2756595 |     118530828405 |\n| Dark Wood                          | 24509 |   47344 |    1107771 |      52446310224 |\n| Stone                              | 21922 |   18386 |    1505884 |      27687183224 |\n| Grass                              |   238 |    5643 |    4554470 |      25700874210 |\n| Paper                              |  3814 |   25635 |     861006 |      22071888810 |\n| Iron                               |  3699 |  320270 |      58833 |      18842444910 |\n| Ink                                | 16275 |    8552 |    2200545 |      18819060840 |\n| Loam                               |  2679 |    5759 |    2608771 |      15023912189 |\n| Copper                             |   672 |  904612 |      14989 |      13559229268 |\n+------------------------------------+-------+---------+------------+------------------+\n```\n\n\nThe problem with the data above is that the raw market data is unavoidably corrupted by outliers, as you can see below:  \n\n```\nselect type, price from orders where type = 34 order by price desc limit 10;\n```\n\n\n-\n\n```\n+------+-----------+\n| type | price     |\n+------+-----------+\n|   34 | 200000000 |\n|   34 |     15.99 |\n|   34 |     12.06 |\n|   34 |        10 |\n|   34 |      7.67 |\n|   34 |       7.5 |\n|   34 |       7.3 |\n|   34 |      7.17 |\n|   34 |       7.1 |\n|   34 |      7.06 |\n+------+-----------+\n```\n\n\nCore problem: \n\n99% of the market data is clean, but the outliers destroy the average, and MySql doesn't seem to have a median function. I've found several examples of how to find the median of an entire column, but I need the median per-item. \n\nHow would I determine a per-item median in stead of a per-item mean, or efficiently clean the data of these outliers prior to running the primary query?\n\nNote: \nI've tried omitting results via std, but prices of items range from $17 to $10B, while deviation remains relatively low, regardless of price range.  \n    ", "Answer": "\r\nI won't touch your original query because it very complex, but one option you could do would be to use a subquery to remove any statistical outliers.  For example, if you wanted to remove any outlier from the ```\norders```\n table whose value is more than say two standard deviations away from the mean you could use:\n\n```\nSELECT t1.type,\n       t1.price\nFROM orders t1\nINNER JOIN\n(\n    SELECT type,\n           AVG(price) AS AVG,\n           STD(price) AS STD\n    FROM orders\n    GROUP BY type\n) t2\n    ON t1.type = t2.type\nWHERE t1.price < ABS(2*t2.STD - t2.AVG)  -- any value more than 2 standard devations\n                                         -- away from the mean is discarded\n```\n\n\nDemo here:\n\nSQLFiddle\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of two different sized sorted arrays\r\n                \r\nI'm trying to find the median of two different sized sorted arrays. But there are a few situations where it doesn't work and I wasn't able to figure out why. I've included my implementation below.\n\nI do realize there are similar solutions online. But I'm just starting to learn algorithms and so want to do as much as possible by myself. Thanks a lot in advance for your help!\n\n```\npublic double median(Point[] arr, int start, int end) {\n    int n = end - start + 1;\n    if (n % 2 == 0) {\n        return (double) (arr[start + (n/2)].getSz() + arr[start + (n/2) - 1].getSz())/2;\n    }\n    else {\n        return (double) arr[start + (n/2)].getSz();\n    }\n}\n\npublic double getMedian(int aStart, int aEnd, int bStart, int bEnd) {\n    int m = aEnd - aStart + 1;\n    int n = bEnd - bStart + 1;\n    double median = 0;\n\n    if (m == 0 && n > 0) {\n        return median(arr2, 0, bEnd);\n    }\n\n    if (m > 0 && n == 0) {\n        return median(arr1, 0, aEnd);\n    }\n\n    if (m == 1 && n == 1) {\n        return (double) (arr1[0].getSz() + arr2[0].getSz())/2;\n    }\n\n    if (m == 2 && n == 2) {\n        median = (double) (Math.max(arr1[aStart].getSz(), arr2[bStart].getSz()) + Math.min(arr1[aEnd].getSz(), arr2[bEnd].getSz()))/2;\n        return median;\n    }\n\n    double m1 = median(arr1, aStart, aEnd);\n    double m2 = median(arr2, bStart, bEnd);\n\n    if (m1 == m2) {\n        return m1;\n    }\n\n    if (m1 < m2) {\n        if (m % 2 == 0) {\n            aStart = aStart + (m/2) - 1;\n            index = 1;\n        }\n        else {\n            index = 2;\n            aStart = aStart + m/2;\n        }\n        bEnd = bStart + n/2;\n    }\n    else {\n        if (n % 2 == 0) {\n            index = 3;\n            bStart = bStart + n/2 - 1;\n        }\n        else {\n            index = 4;\n            bStart = bStart + n/2;\n        }\n        aEnd = aStart + m/2;\n    }\n    return (getMedian(aStart, aEnd, bStart, bEnd));\n}\n```\n\n\nHere's a example for which the logic breaks:\narr1 = 6, 20, 28, 29, 36, 41\narr2 = 14, 25, 33, 47, 53, 66, 79, 98\n\nCorrect median = 34.5\nEstimated median = 31 \n    ", "Answer": "\r\nLooks like there are a few problems in the algorithm.\n\nFirstly 0 is being used instead of aStart and bStart in a couple of places:\n\n```\n   if (m == 0 && n > 0) {\n        return median(arr2, ->0<-, bEnd);\n    }\n\n    if (m > 0 && n == 0) {\n        return median(arr1, ->0<-, aEnd);\n    }\n\n    if (m == 1 && n == 1) {\n        return (double) (arr1[->0<-].getSz() + arr2[->0<-].getSz())/2;\n    }\n```\n\n\nSecondly; in the last block you must be careful to throw out as many values above the median as below it.  \n\n```\nif (m1 < m2) {\n    if (m % 2 == 0) {\n        aStart = aStart + (->m<-/2) - 1;\n        index = 1;\n    }\n    else {\n        index = 2;\n        aStart = aStart + ->m<-/2;\n    }\n    bEnd = bStart + ->n<- /2;\n}\n```\n\n\nand also you must not throw out the values closest to the median where the median is calculated on an even number of data.  Hope that helps.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median depending on other variable in SQL\r\n                \r\nI want to calculate median conditionally, say separately for men and women in a sex variable as an example. I would like to use the modification of one of the following two alternative codes provided here http://sqlperformance.com/2012/08/t-sql-queries/median as the fastest method for calculating median.\n\nAlternative 1\n\n```\nDECLARE @c BIGINT = (SELECT COUNT(*) FROM dbo.EvenRows); \n\nSELECT AVG(1.0 * val) \nFROM (\n    SELECT val FROM dbo.EvenRows\n     ORDER BY val\n     OFFSET (@c - 1) / 2 ROWS\n     FETCH NEXT 1 + (1 - @c % 2) ROWS ONLY\n) AS x;\n```\n\n\nAlternative 2\n\n```\nSELECT @Median = AVG(1.0 * val)\nFROM\n(\n    SELECT o.val, rn = ROW_NUMBER() OVER (ORDER BY o.val), c.c\n    FROM dbo.EvenRows AS o\n    CROSS JOIN (SELECT c = COUNT(*) FROM dbo.EvenRows) AS c\n) AS x\nWHERE rn IN ((c + 1)/2, (c + 2)/2);\n```\n\n\nWhere to put ```\nGROUP```\n statement? Can someone advise me how to make a function with parameters ```\nMEDIAN(ColumnToCalculateMedian, ColumnContaingSex)```\n\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate median for each subject with update on ties?\r\n                \r\nI have data which looks like this (this is test data for illustration):  \n\n```\ntest <- matrix(c(1, 1, 1, 2, 2, 2 , 529, 528, 528, 495, 525, 510,557, 535, 313,502,474, 487 ), nr=6, dimnames=list(c(1,2,3,4,5,6),c(\"subject\", \"rt1\", \"rt2\")))\n```\n\n\nAnd I need to turn it into this:\n\n```\ntest2<-matrix(c(1,1,1,2,2,2,529,528,528,495,525,510,\"slow\",\"slow\",\"fast\",\"fast\",\"slow\",\"slow\",557, 535, 313,502,474, 487,\"fast\",\"fast\",\"slow\",\"slow\",\"fast\",\"fast\"), nr=6, dimnames=list(c(1,2,3,4,5,6),c(\"subject\", \"rt1\",\"speed1\", \"rt2\",\"speed2\")))\n```\n\n\nThe speed1 column is calculated thus: calculate the median rt1 for the subject. If the individual value is less than the median it scores fast. If the individual cell value of rt1 is more than the median it scores slow. If the cell value is at the median, the cell is removed from the analysis (delete or NA) and the median for that subject is recalculated. This process is repeated for the speed2 column, but using rt2.\n\nPerhaps some kind of if statement?\n\nTo clarify: I want the median for each subject (there are 40 in total) and for any values that are at the median (for that subject) to be excluded and the median recalculated (for that subject).\n    ", "Answer": "\r\nEDITED TO ACTUALLY DO SUBJECT MEDIANS\n\nYou tend to be big on the matrix in examples when in actual fact what you are likely using are data frames.  So let's get that out of the way first.  The matrix requires you to be using a single type of data.  I don't get the impression you really want your numbers to be text.  Your other variables can't be numbers.  Therefore, test2 should probably start as...\n\n```\ntest2 <- data.frame(test)\n```\n\n\nand probably\n\n```\ntest2$subject <- factor(test2$subject)\n```\n\n\nYou might want to add a column that actually is the median/subject just to check what you're doing is correct.  From here on I'll just work with RT1 and you can replicate for RT2.\n\n```\ntest2$rt1med <- ave(test2$rt1, test2$subject, FUN = median)\n```\n\n\nThis generates a column that has the median for each subject stored in it.  You could have not made it a column but a standalone vector if you wished.  Now, you are correct, it is as simple as a an if statement, ifelse() statement to be exact.\n\n```\ntest2$speed1 <- ifelse(test2$rt1 > test2$rt1med, 'slow', 'fast')\n```\n\n\nI've left the medians in the frame.  You said you wanted them gone.  OK, just set the frame to itself without the medians...\n\n```\ntest2 <- test2[test2$rt1 != test2$rt1med,]\n```\n\n\nBut really, it's probably best to just keep track of the actual median values by indicating them, perhaps with NA...\n\n```\ntest2$rt1[test2$rt1 == test2$rt1med] <- NA\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "SQL ranking query to compute ranks and median in sub groups\r\n                \r\nI want to compute the Median of ```\ny```\n in sub groups of this simple ```\nxy_table```\n:\n\n```\n  x | y --groups--> gid |   x | y --medians-->  gid |   x | y\n-------             -------------               -------------\n0.1 | 4             0.0 | 0.1 | 4               0.0 | 0.1 | 4\n0.2 | 3             0.0 | 0.2 | 3                   |     |\n0.7 | 5             1.0 | 0.7 | 5               1.0 | 0.7 | 5\n1.5 | 1             2.0 | 1.5 | 1                   |     |\n1.9 | 6             2.0 | 1.9 | 6                   |     |\n2.1 | 5             2.0 | 2.1 | 5               2.0 | 2.1 | 5\n2.7 | 1             3.0 | 2.7 | 1               3.0 | 2.7 | 1\n```\n\n\nIn this example every ```\nx```\n is unique and the table is already sorted by ```\nx```\n.\nI now want to ```\nGROUP BY round(x)```\n and get the tuple that holds the median of ```\ny```\n in each group.\n\nI can already compute the median for the whole table with this ranking query:\n\n```\nSELECT a.x, a.y FROM xy_table a,xy_table b\nWHERE a.y >= b.y\nGROUP BY a.x, a.y\nHAVING count(*) = (SELECT round((count(*)+1)/2) FROM xy_table)\n```\n\n\nOutput: ```\n0.1, 4.0```\n\n\nBut I did not yet succeed writing a query to compute the median for sub groups.\n\nAttention: I do not have a ```\nmedian()```\n aggregation function available. Please also do not propose solutions with special ```\nPARTITION```\n, ```\nRANK```\n, or ```\nQUANTILE```\n statements (as found in similar but too vendor specific SO questions). I need plain SQL (i.e., compatible to SQLite without ```\nmedian()```\n function)\n\nEdit: I was actually looking for the Medoid and not the Median.\n    ", "Answer": "\r\nI suggest doing the computing in your programming language:\n\n```\nfor each group:\n  for each record_in_group:\n    append y to array\n  median of array\n```\n\n\nBut if you are stuck with SQLite, you can order each group by ```\ny```\n and select the records in the middle like this http://sqlfiddle.com/#!5/d4c68/55/0:\n\nUPDATE: only bigger \"median\" value is importand for even nr. of rows, so no ```\navg()```\n is needed:\n\n```\nselect groups.gid,\n  ids.y median\nfrom (\n  -- get middle row number in each group (bigger number if even nr. of rows)\n  -- note the integer divisions and modulo operator\n  select round(x) gid,\n    count(*) / 2 + 1 mid_row_right\n  from xy_table\n  group by round(x)\n) groups\njoin (\n  -- for each record get equivalent of\n  -- row_number() over(partition by gid order by y)\n  select round(a.x) gid,\n    a.x,\n    a.y,\n    count(*) rownr_by_y\n  from xy_table a\n  left join xy_table b\n    on round(a.x) = round (b.x)\n    and a.y >= b.y\n  group by a.x\n) ids on ids.gid = groups.gid\nwhere ids.rownr_by_y = groups.mid_row_right\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "What is the bug in my \"find median\" implementation?\r\n                \r\nI found someone who had a similar problem (How to calculate the median of an array?), but I couldn't figure out how to incororate it in to my own code since I am rather new to java. Right now, my findmedian method is returning 0 instead of the actual median and I can't seem to figure it out. Thanks!    \n\n```\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class Original\n{\n    public static void main(String[] args)\n    {\n        Scanner inputNumber = new Scanner(System.in);\n        Scanner dataItem = new Scanner(System.in);\n        Scanner input = new Scanner(System.in);\n\n        System.out.print(\"This stores a list of contirbutions to a charity drive.\\n \");\n        System.out.print(\"How many contributors will be entered? \");\n\n        double contributors = inputNumber.nextDouble();\n        double contributions[ ] = new double[50];  \n        double contributions_check[] = findData (contributors, contributions);\n\n        System.out.print(\"See if the contributions are correct. \");\n\n        // Displays the contributions, loop allows numbers to be displayed correctly\n        for (int count = 0; count < contributors; count++) {\n            System.out.print(contributions_check[count] + \"    \");\n        }\n\n        double median = findmedian(contributors,contributions_check);\n        System.out.print(\"\\n The median contribution is: \" + median);\n    }\n\n    public static double[] findData(double n, double[] contributions2)\n    {\n        Scanner dataItem = new Scanner(System.in);\n\n        // x must be 0 and x must be < than n\n        for (int x = 0; x < n; x++) {\n            System.out.print(\"Please enter the next contribution: \");\n            contributions2[x] = dataItem.nextDouble();\n        }\n\n        return contributions2;\n    }\n\n    public static double findmedian(double n, double data[])\n    {\n        Arrays.sort(data);\n        double median;\n\n        if (data.length % 2 == 0) {\n            median = ((double) data[data.length / 2] +\n                      (double) data[data.length / 2 - 1]) / 2;\n        } else {\n            median = (double) data[data.length/2];\n        }\n\n        return median;\n    }\n}\n```\n\n    ", "Answer": "\r\nI think the issue is you are using ```\ndata.length```\n in ```\nfindmedian```\n, where you should be using ```\nn```\n.  ```\ndata.length```\n is always going to be 50, even if you only entered 5 items....\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Using scipy.weave.inline for fast 2D median filtering\r\n                \r\nI have a bottleneck in a 2D median filter (3x3 window) I use on a very large set of images, and I'd like to try and optimize it.  I've tested ```\nscipy.ndimage```\n median_filter, as well as ```\nPIL```\n, ```\nscipy.signal```\n and ```\nscikits-image```\n. However, browsing in SO I've learned that there's a fast O(n) median filter out there in C (Median Filtering in Constant Time see Rolling median algorithm in C), and I wondered whether I can implement it in Python using scipy.weave.inline ?\nAny suggestions on an alternative route?\n    ", "Answer": "\r\nTry this:\nRolling median in C - Turlach implementation\n\nhttp://ideone.com/8VVEa\n\nUsage:\n\n```\nMediator* m = MediatorNew(9);\nfor (...)\n{\n      MediatorInsert(m, value);\n      median = MediatorMedian(m);\n}\n```\n\n\nI believe this is the same as the R algo, but cleaner (amazingly so, in fact).\n\nYou can either wrap this, or port it and use Numba (or Cython).  I think I'd recommend Numba over Cython, if nothing else because it is plain old python code.\n\nI suggest adding this to scikits, if it runs faster than the one in scikits already :)\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Proper explanation of median javascript code listed below\r\n                \r\nI'm just looking for a solid explanation of the code listed below? I understand how median works but am unsure why this format properly finds the median each time.     \n\n```\n   function median(array) {\n  array.sort(function(a, b) {\n  return a - b;\n  });\n  var middle = array.length / 2;\n  return middle % 1 ? array[middle - 0.5] : (array[middle - 1] + \n  array[middle]) / 2;\n   }\n```\n\n    ", "Answer": "\r\nIt would actually help if you put a ```\nconsole.log(array)```\n right after the ```\narray.sort```\n to visualize it better:\n\n\r\n\r\n```\nfunction median(array) {\r\n  array.sort(function(a, b) {\r\n    return a - b;\r\n  });\r\n  console.log(array)  // <-- so you can see the sorted array\r\n  var middle = array.length / 2;\r\n  return middle % 1 ? array[middle - 0.5] : (array[middle - 1] + array[middle]) / 2;\r\n}\r\n\r\nconsole.log(median([5,4,3,2,1]))```\n\r\n\r\n\r\n\n\nBy definition ```\nmedian```\n is:\n\n\n  The median is the value separating the higher half from the lower half\n  of a data sample. For a data set, it may be thought of as the \"middle\"\n  value. For example, in the data set {1, 3, 3, 6, 7, 8, 9}, the median\n  is 6, the fourth largest, and also the fourth smallest, number in the\n  sample\n\n\nSo first the array must be sorted so we can figure out which is the smallest and which the largest number. Then we find out the middle of the array. After that we simply check if the length was an even or odd number by using the ```\n% modulus operator```\n => ```\n(5/2)%1```\n would be ```\n0.5```\n where ```\n(4/2)%1```\n would be ```\n0```\n and based on that we select the proper item by index from the array (Note array indexes start from ```\n0```\n).\n\nLets use array of ```\n[5,4,3,2,1]```\n as an example:\n\nSorted that would be ```\n[1,2,3,4,5]```\n, the remainder of the length of the array ```\ndivided by 2```\n would be ```\n2.5```\n and modulus ```\n1```\n of that would mean ```\n0.5```\n. So in this case we would pick ```\narray[middle-0.5]```\n value from the array which would mean ```\narray[2.5-0.5]```\n which would be ```\n2```\n. Our array at index ```\n2```\n has the value of ```\n3```\n hence the median of that array is ```\n3```\n.\n\nIn the case of ```\n[1,2,3,4]```\n the median would be ```\n2.5```\n since the modulus would return ```\n0```\n and we would go to the ```\nelse```\n of the ternary operator which is:\n\n```\n(array[middle - 1] + array[middle]) / 2```\n\n\nThat in our case would mean ```\n(array[2-1] + array[2]) / 2```\n that when we replace the values from the array indexes would be ```\n(2+3)/2 = 2.5```\n\n\nHope this clears it.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Understanding the \"Median\" in this Graph\r\n                \r\nI tried running the TSP in R using the following code (https://rstudio-pubs-static.s3.amazonaws.com/132872_620c10f340f348b88453d75ec99960ff.html):\n```\nlibrary(GA)\ndata(\"eurodist\", package = \"datasets\")\nD <- as.matrix(eurodist)\n\n\ntourLength <- function(tour, distMatrix) {\n   tour <- c(tour, tour[1])\n   route <- embed(tour, 2)[,2:1]\n   sum(distMatrix[route])\n}\n\n#Fitness function to be maximized\n\ntspFitness <- function(tour, ...) 1/tourLength(tour, ...)\n\nGA <- ga(type = \"permutation\", fitness = tspFitness, distMatrix = D,\n          min = 1, max = attr(eurodist, \"Size\"), popSize = 50, maxiter = 5000,\n          run = 500, pmutation = 0.2)\n\nplot(GA)\n```\n\nThis produced the following graph:\nI understand that each point on the x-axis represents the average value and the best value achieved at each iteration (\"generation\") - I connected some of these with red lines:\nHowever, I am having difficulty understanding the significance of the \"median\" here. I would  have thought that the median would refer to a single point, but it seems like the median here is referring to a \"range\" of points at each iteration.\n\nWhat is the meaning of this \"large green shaded region\" on this graph and how exactly does it correspond to the \"median\"?\n\nThank you!\n    ", "Answer": "\r\nI agree in that this is a somewhat misleading visualisation choice.\nThe explanation seems to be in the examples at the bottom of ```\n?plot.ga-method```\n:\nThe relevant code for the shaded area (ribbon) is\n```\ngeom_ribbon(aes(x = iter, ymin = median, ymax = max, \n                  colour = \"median\", fill = \"median\"))\n```\n\nSo the \"median\" ribbon seems to cover fitness values [median, max] on the y-axis.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Finding median of an unsorted array in linear time?\r\n                \r\nAfter careful research and thought, I decided to post this question which is a \"sequel\" to my previous question asked earlier today.\nI made an algorithm that finds the median of an ArrayList and bascially all I do is make a temporary ArrayList, then using Collections.sort() on that ArrayList, I can easily get the median. The problem with that is it takes too long for larger files and I am trying(without luck) to find an implementation of an algorithm to get the median of an unsorted Array(or ArrayList).\nFrom what I read here, the Median of Medians algorithm is used followed by QuickSelect but I cannot find an actual implementation that is easy enough to understand.\nHere's a snippet of my code that finds the median of an ArrayList of size ```\nfilterSize```\n:\n```\nwhile(elements.size()-counter >= filterSize){\n            for(int i = 0; i<filterSize; i++){\n                tempElements.add(this.elements.get(i+counter));\n                if(i==filterSize){\n                    break;\n                }\n            }\n            \n            Collections.sort(tempElements); //Sort tempElements to find median\n            outputElements.add(tempElements.get((filterSize-1)/2)); //Add median to an output ArrayList after calculating median index\n            \n            counter++;\n            tempElements.clear(); //Removes all elements from the tempElements and start again\n        }\n```\n\nBasically I'm trying to avoid the whole use of ```\nCollections.sort()```\n and ```\ntempElements.clear()```\n in the code, thus the reason to find a better algorithm for finding the median in linear time.\nThanks.\n    ", "Answer": "\r\nI think the basic Quickselect algorithm (code below from this link) is quite easy to understand: you pick a pivot, apply Quicksort's partition function and then see where that pivot ends up, recursing accordingly to only one of the halves.\n\n```\n function partition(list, left, right, pivotIndex)\n     pivotValue := list[pivotIndex]\n     swap list[pivotIndex] and list[right]  // Move pivot to end\n     storeIndex := left\n     for i from left to right-1\n         if list[i] < pivotValue\n             swap list[storeIndex] and list[i]\n             increment storeIndex\n     swap list[right] and list[storeIndex]  // Move pivot to its final place\n     return storeIndex\n\n  // Returns the n-th smallest element of list within left..right inclusive\n  // (i.e. left <= n <= right).\n  // The size of the list is not changing with each recursion.\n  // Thus, n does not need to be updated with each round.\n  function select(list, left, right, n)\n     if left = right        // If the list contains only one element,\n         return list[left]  // return that element\n     pivotIndex  := ...     // select a pivotIndex between left and right,\n                            // e.g., left + floor(rand() * (right - left + 1))\n     pivotIndex  := partition(list, left, right, pivotIndex)\n     // The pivot is in its final sorted position\n     if n = pivotIndex\n         return list[n]\n     else if n < pivotIndex\n         return select(list, left, pivotIndex - 1, n)\n     else\n         return select(list, pivotIndex + 1, right, n)\n```\n\n\nCompared to median of medians, this can degenerate to ```\nO(n^2)```\n, but you can significantly reduce the chances of that happening by choosing the pivot randomly, like described in the comments.\n\nIf you're not happy with an implementation of median of medians that you don't fully understand, I suggest you go for something like this.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to display median with compareGroups package?\r\n                \r\nI have this code:\n\n```\ndata(\"ToothGrowth\")\nres<-compareGroups(supp~len, data = ToothGrowth)\nrestab<-createTable(res, show.p.overall = FALSE, extra.labels=c(\"\",\"\",\"\"))\nprint(restab, which.table = \"descr\")\n```\n\n\nIt gives me this output (with mean and standard deviation):\n\n```\n--------Summary descriptives table by 'supp'---------\n\n______________________________________ \n                   OJ          VC      \n                  N=30        N=30     \n¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ \nlen, Mean (SD) 20.7 (6.61) 17.0 (8.27) \n¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ \n```\n\n\nQuestion: How to make it also output median? I need by group summary in html format of mean median and standard deviation.\n    ", "Answer": "\r\nWould you consider a solution with dplyr rather than compareGroups? You can add any statistic you want.\n\n```\nlibrary(dplyr)\n\ndata(\"ToothGrowth\")\n\ndf<-ToothGrowth %>%\n  group_by(supp) %>%\n  summarize(mean = mean(len), \n            median = median(len),\n            sd = sd(len),\n            count = n())\n\ndf\n\n# # A tibble: 2 x 5\n# supp   mean median    sd count\n# <fct> <dbl>  <dbl> <dbl> <int>\n# 1 OJ     20.7   22.7  6.61    30\n# 2 VC     17.0   16.5  8.27    30\n```\n\n\nYou can format the result (or any dataframe) as an HTML table with the package knitr. You'll find formatting options in the ```\nkable```\n help file; the add-on package kableExtra lets you do a lot more.\n\n```\nknitr::kable(df, format = \"html\", digits = 2)\n\n# <table>\n#   <thead>\n#   <tr>\n#   <th style=\"text-align:left;\"> supp </th>\n#   <th style=\"text-align:right;\"> mean </th>\n#   <th style=\"text-align:right;\"> median </th>\n#   <th style=\"text-align:right;\"> sd </th>\n#   <th style=\"text-align:right;\"> count </th>\n#   </tr>\n#   </thead>\n#   <tbody>\n#   <tr>\n#   <td style=\"text-align:left;\"> OJ </td>\n#   <td style=\"text-align:right;\"> 20.66333 </td>\n#   <td style=\"text-align:right;\"> 22.7 </td>\n#   <td style=\"text-align:right;\"> 6.605561 </td>\n#   <td style=\"text-align:right;\"> 30 </td>\n#   </tr>\n#   <tr>\n#   <td style=\"text-align:left;\"> VC </td>\n#   <td style=\"text-align:right;\"> 16.96333 </td>\n#   <td style=\"text-align:right;\"> 16.5 </td>\n#   <td style=\"text-align:right;\"> 8.266029 </td>\n#   <td style=\"text-align:right;\"> 30 </td>\n#   </tr>\n#   </tbody>\n#   </table>\n#   > kable(df, format = \"html\", digits = 2)\n# <table>\n#   <thead>\n#   <tr>\n#   <th style=\"text-align:left;\"> supp </th>\n#   <th style=\"text-align:right;\"> mean </th>\n#   <th style=\"text-align:right;\"> median </th>\n#   <th style=\"text-align:right;\"> sd </th>\n#   <th style=\"text-align:right;\"> count </th>\n#   </tr>\n#   </thead>\n#   <tbody>\n#   <tr>\n#   <td style=\"text-align:left;\"> OJ </td>\n#   <td style=\"text-align:right;\"> 20.66 </td>\n#   <td style=\"text-align:right;\"> 22.7 </td>\n#   <td style=\"text-align:right;\"> 6.61 </td>\n#   <td style=\"text-align:right;\"> 30 </td>\n#   </tr>\n#   <tr>\n#   <td style=\"text-align:left;\"> VC </td>\n#   <td style=\"text-align:right;\"> 16.96 </td>\n#   <td style=\"text-align:right;\"> 16.5 </td>\n#   <td style=\"text-align:right;\"> 8.27 </td>\n#   <td style=\"text-align:right;\"> 30 </td>\n#   </tr>\n#   </tbody>\n#   </table>\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "What approximate median filter is all about?\r\n                \r\nWhat is approximate median filter and how it differs from median filter in image processing? \n\nMy professor ask me to report about approximate median filter and show an example program in java. I do not have any idea about what is approximate median filter all about.\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Calculate median for each subject with update on ties?\r\n                \r\nI have data which looks like this (this is test data for illustration):  \n\n```\ntest <- matrix(c(1, 1, 1, 2, 2, 2 , 529, 528, 528, 495, 525, 510,557, 535, 313,502,474, 487 ), nr=6, dimnames=list(c(1,2,3,4,5,6),c(\"subject\", \"rt1\", \"rt2\")))\n```\n\n\nAnd I need to turn it into this:\n\n```\ntest2<-matrix(c(1,1,1,2,2,2,529,528,528,495,525,510,\"slow\",\"slow\",\"fast\",\"fast\",\"slow\",\"slow\",557, 535, 313,502,474, 487,\"fast\",\"fast\",\"slow\",\"slow\",\"fast\",\"fast\"), nr=6, dimnames=list(c(1,2,3,4,5,6),c(\"subject\", \"rt1\",\"speed1\", \"rt2\",\"speed2\")))\n```\n\n\nThe speed1 column is calculated thus: calculate the median rt1 for the subject. If the individual value is less than the median it scores fast. If the individual cell value of rt1 is more than the median it scores slow. If the cell value is at the median, the cell is removed from the analysis (delete or NA) and the median for that subject is recalculated. This process is repeated for the speed2 column, but using rt2.\n\nPerhaps some kind of if statement?\n\nTo clarify: I want the median for each subject (there are 40 in total) and for any values that are at the median (for that subject) to be excluded and the median recalculated (for that subject).\n    ", "Answer": "\r\nEDITED TO ACTUALLY DO SUBJECT MEDIANS\n\nYou tend to be big on the matrix in examples when in actual fact what you are likely using are data frames.  So let's get that out of the way first.  The matrix requires you to be using a single type of data.  I don't get the impression you really want your numbers to be text.  Your other variables can't be numbers.  Therefore, test2 should probably start as...\n\n```\ntest2 <- data.frame(test)\n```\n\n\nand probably\n\n```\ntest2$subject <- factor(test2$subject)\n```\n\n\nYou might want to add a column that actually is the median/subject just to check what you're doing is correct.  From here on I'll just work with RT1 and you can replicate for RT2.\n\n```\ntest2$rt1med <- ave(test2$rt1, test2$subject, FUN = median)\n```\n\n\nThis generates a column that has the median for each subject stored in it.  You could have not made it a column but a standalone vector if you wished.  Now, you are correct, it is as simple as a an if statement, ifelse() statement to be exact.\n\n```\ntest2$speed1 <- ifelse(test2$rt1 > test2$rt1med, 'slow', 'fast')\n```\n\n\nI've left the medians in the frame.  You said you wanted them gone.  OK, just set the frame to itself without the medians...\n\n```\ntest2 <- test2[test2$rt1 != test2$rt1med,]\n```\n\n\nBut really, it's probably best to just keep track of the actual median values by indicating them, perhaps with NA...\n\n```\ntest2$rt1[test2$rt1 == test2$rt1med] <- NA\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of an array in Ruby not floating\r\n                \r\nOK folks...I could use some help on getting the median of an array in ruby\n\nHere is my code:\n\n```\ndef median(array)\n  array.sort! # sort the array\n  elements = array.count # count the elements in the array\n  center =  elements/2 # find the center of the array\n  elements.even? ? (array[center] + array[center+1])/2 : array[center]  # if elements are even take both the center numbers of array and divide in half, if odd...get the center number\nend\n```\n\n\nJust not certain where to apply the .to_f since it wont return anything needing a float.\n\nThanks\n    ", "Answer": "\r\nI realized you've solved your own problem already, but this version is a little cleaner and safer:\n\n```\ndef median(array)\n  raise ArgumentError, 'Cannot find the median on an empty array' if array.size == 0\n  sorted = array.sort\n  midpoint, remainder = sorted.length.divmod(2)\n  if remainder == 0 # even count, average middle two\n    sorted[midpoint-1,2].inject(:+) / 2.0\n  else\n    sorted[midpoint]\n  end\nend\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "What is the bug in my \"find median\" implementation?\r\n                \r\nI found someone who had a similar problem (How to calculate the median of an array?), but I couldn't figure out how to incororate it in to my own code since I am rather new to java. Right now, my findmedian method is returning 0 instead of the actual median and I can't seem to figure it out. Thanks!    \n\n```\nimport java.util.Scanner;\nimport java.util.Arrays;\n\npublic class Original\n{\n    public static void main(String[] args)\n    {\n        Scanner inputNumber = new Scanner(System.in);\n        Scanner dataItem = new Scanner(System.in);\n        Scanner input = new Scanner(System.in);\n\n        System.out.print(\"This stores a list of contirbutions to a charity drive.\\n \");\n        System.out.print(\"How many contributors will be entered? \");\n\n        double contributors = inputNumber.nextDouble();\n        double contributions[ ] = new double[50];  \n        double contributions_check[] = findData (contributors, contributions);\n\n        System.out.print(\"See if the contributions are correct. \");\n\n        // Displays the contributions, loop allows numbers to be displayed correctly\n        for (int count = 0; count < contributors; count++) {\n            System.out.print(contributions_check[count] + \"    \");\n        }\n\n        double median = findmedian(contributors,contributions_check);\n        System.out.print(\"\\n The median contribution is: \" + median);\n    }\n\n    public static double[] findData(double n, double[] contributions2)\n    {\n        Scanner dataItem = new Scanner(System.in);\n\n        // x must be 0 and x must be < than n\n        for (int x = 0; x < n; x++) {\n            System.out.print(\"Please enter the next contribution: \");\n            contributions2[x] = dataItem.nextDouble();\n        }\n\n        return contributions2;\n    }\n\n    public static double findmedian(double n, double data[])\n    {\n        Arrays.sort(data);\n        double median;\n\n        if (data.length % 2 == 0) {\n            median = ((double) data[data.length / 2] +\n                      (double) data[data.length / 2 - 1]) / 2;\n        } else {\n            median = (double) data[data.length/2];\n        }\n\n        return median;\n    }\n}\n```\n\n    ", "Answer": "\r\nI think the issue is you are using ```\ndata.length```\n in ```\nfindmedian```\n, where you should be using ```\nn```\n.  ```\ndata.length```\n is always going to be 50, even if you only entered 5 items....\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "MySql finding median of a column grouped by another, rather than the median for the whole column\r\n                \r\nContext: \n\nI'm attempting to take a series of market transactions, and determine the amount of money actually moving per item type. This is pretty much my first attempt at MySql, so the query is ugly, but the following nearly works: \n\n```\nSELECT types.typename,\n       averages.type,\n       averages.price,\n       movement.sold,\n       ( averages.price * movement.sold ) AS value\nFROM   (SELECT type,\n               Round(Avg(price)) AS price\n        FROM   orders\n        GROUP  BY type) AS averages\n       INNER JOIN (SELECT type,\n                          ( startingvolume - currentvolume ) AS sold\n                   FROM   (SELECT type,\n                                  Sum(volume)        AS currentVolume,\n                                  Sum(volumeentered) startingVolume\n                           FROM   orders\n                           GROUP  BY type) AS movement\n                   WHERE  ( startingvolume - currentvolume ) > 10000\n                   ORDER  BY sold) AS movement\n               ON averages.type = movement.type\n       INNER JOIN invtypes AS types\n               ON types.typeid = averages.type\nORDER  BY value DESC\nLIMIT  10 ;\n```\n\n\n-\n\n```\n+------------------------------------+-------+---------+------------+------------------+\n| typeName                           | type  | price   | sold       | value            |\n+------------------------------------+-------+---------+------------+------------------+\n| Dirt                               |    34 | 1904767 | 2670581874 | 5086836224393358 |\n| Light Wood                         |  2629 |   42999 |    2756595 |     118530828405 |\n| Dark Wood                          | 24509 |   47344 |    1107771 |      52446310224 |\n| Stone                              | 21922 |   18386 |    1505884 |      27687183224 |\n| Grass                              |   238 |    5643 |    4554470 |      25700874210 |\n| Paper                              |  3814 |   25635 |     861006 |      22071888810 |\n| Iron                               |  3699 |  320270 |      58833 |      18842444910 |\n| Ink                                | 16275 |    8552 |    2200545 |      18819060840 |\n| Loam                               |  2679 |    5759 |    2608771 |      15023912189 |\n| Copper                             |   672 |  904612 |      14989 |      13559229268 |\n+------------------------------------+-------+---------+------------+------------------+\n```\n\n\nThe problem with the data above is that the raw market data is unavoidably corrupted by outliers, as you can see below:  \n\n```\nselect type, price from orders where type = 34 order by price desc limit 10;\n```\n\n\n-\n\n```\n+------+-----------+\n| type | price     |\n+------+-----------+\n|   34 | 200000000 |\n|   34 |     15.99 |\n|   34 |     12.06 |\n|   34 |        10 |\n|   34 |      7.67 |\n|   34 |       7.5 |\n|   34 |       7.3 |\n|   34 |      7.17 |\n|   34 |       7.1 |\n|   34 |      7.06 |\n+------+-----------+\n```\n\n\nCore problem: \n\n99% of the market data is clean, but the outliers destroy the average, and MySql doesn't seem to have a median function. I've found several examples of how to find the median of an entire column, but I need the median per-item. \n\nHow would I determine a per-item median in stead of a per-item mean, or efficiently clean the data of these outliers prior to running the primary query?\n\nNote: \nI've tried omitting results via std, but prices of items range from $17 to $10B, while deviation remains relatively low, regardless of price range.  \n    ", "Answer": "\r\nI won't touch your original query because it very complex, but one option you could do would be to use a subquery to remove any statistical outliers.  For example, if you wanted to remove any outlier from the ```\norders```\n table whose value is more than say two standard deviations away from the mean you could use:\n\n```\nSELECT t1.type,\n       t1.price\nFROM orders t1\nINNER JOIN\n(\n    SELECT type,\n           AVG(price) AS AVG,\n           STD(price) AS STD\n    FROM orders\n    GROUP BY type\n) t2\n    ON t1.type = t2.type\nWHERE t1.price < ABS(2*t2.STD - t2.AVG)  -- any value more than 2 standard devations\n                                         -- away from the mean is discarded\n```\n\n\nDemo here:\n\nSQLFiddle\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "boundary cases in a median filter (2D int) c++\r\n                \r\nWhile developing a 2D integer median filter, I have run into a problem while finding the median for the boundary values of the 2D array. \n\nMy Code\n\n```\n    #include <iostream>\n    #include <fstream>\n    #include <string>\n    #include <vector>\n    #include <math.h>\n    #include <cilk/cilk.h>\n\n    int median(int x1, int y1, int k);\n    void recursion(int x1, int y1, int x2, int y2);\n\n    using namespace std;\n\n    std::vector < std::vector <int>> x;\n    std::vector < std::vector <int>> y;\n\n    int n, m, k;\n    //n=y\n    //m=x\n\n    int main()\n    {\n        std::fstream File;\n        File.open(\"test.txt\");\n\n        //error msg reading\n        if (File.fail()) {\n            cout << \"error opening file\";\n        }\n\n        //read file\n        while (!File.eof())\n        {\n            File >> n;\n            File >> m;\n            File >> k;\n\n            for (int i = 0; i < n; i++) {\n                vector <int> row;\n                for (int j = 0; j < m; j++) {\n                    int readFromFile = 0;\n                    File >> readFromFile;\n                    row.push_back(readFromFile);\n                }\n                x.push_back(row);\n            }\n\n        }\n\n        //print vector values to console to see if its correct\n        cout << n; \n        cout << \"\\n\";\n        cout << m;\n        cout << \"\\n\";\n        cout << k;\n        cout << \"\\n\";\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                cout << x[i][j];\n                cout << \" \";\n            }\n            cout << \"\\n\";\n        }\n\n        recursion (0,0,n,m);\n    }\n\n    void recursion(int x1, int y1, int x2, int y2)\n    {\n        int mDiv2=x2/2;\n        int nDiv2=y2/2;\n\n        if ((x2 == x1) && (y2 == y1))\n        {\n            y[x2][y2] = median(k);\n            return;\n        }\n        else\n        {\n            cilk_spawn recursion(x1, y1, x2/2, y2/2); //quadrant 1\n            cilk_spawn recursion(mDiv2, y1, x2/2, nDiv2/2); //quadrant 2\n            cilk_spawn recursion(x1, nDiv2, mDiv2/2, y2/2); //quadrant 3\n            cilk_spawn recursion(mDiv2, nDiv2, x2/2, y2/2); //quadrant 4\n        }\n    }\n\nint median(int x, int y, int k)\n{\n    vector <int> s;\n\n    for (int i = -k; i < k; i++) {\n        for (int j = -k ; j < k; j++) {\n            if (((x+i>=0) && (y+j>=0)) && ((x+i<=m) && (y+j>=n))){\n            s.push_back(x[x+i][y+i]);}\n            else\n            {\n                //boundary\n            }\n        }\n    }\n//sort\n}\n```\n\n\nWithin the median function i take in the point of the 2D array stored in the vector x along with the k median filter. If the value goes out of bounds i would like to store the value of the closest element instead. For example point (0,0) with the k median filter 3 would collect all the data from (-3,-3) to (3,3). Because (-3,-3) does not exist, the closest element would be (0,0) thus storing the value of x[0][0]. How would you allocate the value of the closest element to vector s if it goes out of bounds?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Combine QuickSort and Median selection algorithm\r\n                \r\nI want to modify QuickSort (in Java) so that every time Partition is called, the median of the proportioned array is used as the pivot.\n\nI have a median selection algorithm in Java that returns the kth smallest element, in this case the median. I have tons of quicksort algorithms in java that all work by themselves and sort an array. Unfortunately I can't combine those two in order to achieve the above... Everytime I try it i usually get stackoverflow erros.\n\nCan anybody show me code to see how it can be done?\n\nThanks\n\nEDIT: For example this is a median selection algorithm that I have tried to use.\n\n```\npublic int quickSelect(int[] A, int p, int r, int k) {\n    if (p==r) return A[p];\n    int q = Partition(A,p,r);\n    int len = q-p+1;\n\n    if (k == len) return A[q];\n    else if (k<len) return Select(A,p,q-1,k);\n    else return Select(A,q+1,r,k-len);\n}\n\npublic int partition(int[]A, int p, int r) {\n    int x = A[r];\n    int i = p-1;\n    for (int j = p; j<=r-1; j++) {\n        if (A[j] <= x) {\n            i++;\n            swap(A,i,j);\n        }\n    }\n    swap(A,i+1,r);\n    return i+1;\n}\n```\n\n\nIt works by itself but when I try to call quickSelect through quicksort's partition function to return the pivot to be used, it doesn't work. Obviously I'm doing something wrong but I don't know what. Unfortunately on the Internet I haven't found any algorithm, even in pseudocode, that would combine a median selection with quicksort.\n    ", "Answer": "\r\nThe standard way to get the median is to sort the data.  And you want to sort the data by partitioning on the median.  This seems very chicken and egg to me.\n\nCould you elaborate on why you want to partition/pivot on the median?\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Computing rolling median absolute deviation\r\n                \r\nI am trying to calculate the rolling median absolute deviation (MAD) of a variable ```\nx```\n for each group ```\nid```\n, using ```\n20```\n observations.\n\nExample data:\n\n```\nclear\nset obs 100\n\ngenerate id = _n\nexpand 100\n\ngenerate x = rnormal()\nbysort id: generate time = _n\n```\n\n\nI have already managed to compute the median for the rolling observations using the community-contributed command ```\nrangestat```\n:\n\n```\nrangestat (median)  x, by(id) interval(time -20 0)  // this works\n```\n\n\nI then tried to use the community-contributed command ```\ntsegen```\n with ```\negen```\n's function ```\nmad()```\n to compute the rolling median absolute deviation:\n\n```\nxtset id time\ntsegen mad_x = mad(L(0/20).x) // this does not work\n```\n\n\nHowever, this last command results in the following error:\n\n```\nx__000001__000002__000003__000004__000005__000006__000007__000008__000009__00000A__00000B__00000C__00000D__00000E__00000F__00000G__00\n> 000H__00000I__00000J__00000K invalid name\nr(198);\n```\n\n\nHow can I pass the \"use 20 observations\" requirement to ```\nmad()```\n?\n\nCross-posted on Statalist.\n    ", "Answer": "\r\nMy preferred solution has been posted on Statalist here.\n\nAnother solution is to add lagged variables and compute the MAD manually:\n\n```\nxtset id time\n\nrangestat (median) x (count) x, by(id) interval(time -20 -1)\n\n/* Add lagged values */\n\nforvalues i = 1 / 20 {\n    generate double L`i'x = abs(L`i'.x - x_median)\n}\n\n/* Compute median of those /*\n\negen mad = rowmedian(L*x)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median of two sorted array\r\n                \r\nHere I have written code for  finding median of two sorted arrays:\n\n```\n#include<iostream>\nusing namespace std;\n#define L  5\n#define  M 6\n const int N=L+M;\nint A[1000];//define 1 indexed aarray\nint B[1000];\nint max(int c,int d){\n    return (c>=d)?c:d;\n\n}\nint min(int c,int d)\n{\n    return (c<=d)?c:d;\n}\n\nvoid  read(){\n    cout<<\" enter A array \"<<endl;\n    for (int i=1;i<=L;i++)\n        cin>>A[i];\n    cout<<endl;\n    cout<<\"enter B array  \"<<endl;\n    for (int i=1;i<=M;i++)\n        cin>>B[i];\n    cout<<endl;\n\n\n}\nint median(int a[],int b[],int left,int right){\n    if (left>right) {\n        return median(b,a,max(1,(N/2)-L),min(M,N/2));\n    }\n    int i=int(left+right)/2;\n    int j=int(N/2)+i;\n    if((j==0 || a[i]>b[j]) && (j==M || a[i]<=b[j+1])){\n        return a[i];\n    }\n    else\n    {\n        if((j==0 || a[i]>b[j])  &&(j!=M && a[i]>b[j+1]))\n        return median(a,b,left,i-1);\n    }\n\n\n        return median(a,b,i+1,right);\n\n}\n\nint main(){\n\n\n\n\n    return 0;\n}\n```\n\n\nMy question is  what could be left and right values? It is from introduction to algorithms, I just don't understand what are values of left and right variables? \nI have defined left and right as 1 and N and tested with following arrays:\n\n```\n3 5 7 9 11 13\n1 2 4 8 10\n```\n\n\nAnswer is 13, which is not correct sure, what is wrong?\n    ", "Answer": "\r\nThe homework problem you cited in a comment has what looks to be a pretty good explanation of ```\nleft```\n and ```\nright```\n, including the starting values for them:\n\n\n  Let the default values for left and right be such that calling\n  MEDIAN-SEARCH(A,B)  is equivalent to \n\n```\nMEDIAN-SEARCH(A[1 ..l],B[1 ..m],max(1,ceil(n/2) - m),min(l,ceil(n/2))) \n```\n\n  \n  The invariant in ```\nMEDIAN-SEARCH(A,B)```\n is that the median is always in\n  either ```\nA[left ..right]```\n  or ```\nB```\n. This is true for the initial call because\n  ```\nA```\n and ```\nB```\n are sorted, so by the definition  of median it must be between\n  ```\nmax(1,ceil(n/2) - m)```\n and ```\nmin(l,ceil(n/2))```\n, inclusive. It is  also true\n  the recursive calls on lines 8 and 9, since the algorithm only\n  eliminates parts  of the array that cannot be the median by the\n  definition of median. The recursive call  on line 2 also preserves the\n  invariant since if ```\nleft > right```\n the median must be in ```\nB```\n be­tween the\n  new ```\nleft```\n and ```\nright```\n values.\n\n\nIf you work through the algorithm on paper with small arrays, it should become more clear what's going on. The algorithm converges in only a few steps if your arrays are smaller than a total of say 16 elements, so it should be quite workable on paper.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Python: replacing outliers values with median values\r\n                \r\nI have a python data-frame in which there are some outlier values. I would like to replace them with the median values of the data, had those values not been there.\n\n```\nid         Age\n10236    766105\n11993       288\n9337        205\n38189        88\n35555        82\n39443        75\n10762        74\n33847        72\n21194        70\n39450        70\n```\n\n\nSo, I want to replace all the values > 75 with the median value of the dataset of the remaining dataset, i.e., the median value of ```\n70,70,72,74,75```\n.\n\nI'm trying to do the following:\n\n\nReplace with 0, all the values that are greater than 75 \nReplace the 0s with median value.\n\n\nBut somehow, the below code not working\n\n```\ndf['age'].replace(df.age>75,0,inplace=True)\n```\n\n    ", "Answer": "\r\nI think this is what you are looking for, you can use loc to assign value . Then you can fill the nan \n\n```\nmedian = df.loc[df['Age']<75, 'Age'].median()\ndf.loc[df.Age > 75, 'Age'] = np.nan\ndf.fillna(median,inplace=True)\n```\n\n\nYou can also use np.where in one line \n\n```\ndf[\"Age\"] = np.where(df[\"Age\"] >75, median,df['Age'])\n```\n\n\nYou can also use .mask i.e \n\n```\ndf[\"Age\"] = df[\"Age\"].mask(df[\"Age\"] >75, median)\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Excel median across multiple columns\r\n                \r\n```\nName: Number: CategoryA_1: CategoryA_2: CategoryA_3:\nPat     4       Car          Van             Bus\nMary    5       Van          Car\nJames   -       Bus\n```\n\n\nI want to be able to get the median 'number' for each category. So for example because 'Car' is in CategoryA_1 and CategoryA_2, I am trying to get the median of 'Number' 4 and 5.\n\nI am calling this in another worksheet like so.\n\n```\n      Median\nCar     4.5\nVan     4.5\nBus     4\n```\n\n\nI have tried this (but am only getting 0, I can't figure out why it isn't working)\n\n```\n=MEDIAN(IF(OR('Sheet1'!c:c=a2, 'Sheet1'!d:d=a2, 'Sheet1'!e:e=a2),(IF('Sheet1'!b:b<>\"-\", 'Sheet1'!b:b))))\n```\n\n\nAny help is appreciated, thanks!\n    ", "Answer": "\r\nAssuming the \"Name:\" is located at A1 of sheet1, and the other worksheet is sheet2. In Sheet1 G1 put :\n\n```\n=Sheet2!A2\n```\n\n\nthen in G2 :\n\n```\n=IF(AND(ISNUMBER($B2),$G$1<>\"\",C2<>\"\",C2=$G$1),$B2,\"\")\n```\n\n\nand drag to I4. Then in Sheet2, the formula should be :\n\n```\n=MEDIAN(Sheet1!G2:I4)\n```\n\n\nIdea n correction :\n In the original formula.. the ```\n'Sheet1'!c:c=a2```\n part wont work, as you are comparing a range to a cell. \n\nIn the proposed solution, we added some error checking to ignore the dash using ```\nISNUMBER($B2)```\n , check/ignore blank entries using ```\n$G$1<>\"\",C2<>\"\"```\n and list the value only if the entered value in ```\nSheet!A2```\n is matched. then the median will work properly.\n\nI'm not sure if this was mentioned in the help file (kindly have a check), but AFIAK, the median() function need  a list as its argument.. and the original if function seems to return a TRUE/FALSE value (instead of a list). Maybe that's why you get a 0.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Will this give me a Median in SQL\r\n                \r\nWill this give me the median for each company?\n\n```\nSELECT a.id,a.company_name,a.salary\nFROM (SELECT id,company_name,Salary,PERCENT_RANK OVER() (PARTITION BY company ORDER BY Salary) AS 'percentile') a\nWHERE percentile = 0.5\nGROUP BY a.id,a.company_name\n```\n\n    ", "Answer": "\r\nNot necessarily.  The problem is that ```\npercent_rank()```\n returns a floating point number.  And floating point comparisons are quite dangerous -- because floating points are fuzzy.\n\nWhy not just use ```\npercentile_cont()```\n?\n\n```\nselect distinct a.company_name,\n       percentile_cont(0.5) within group (order by salary) over (partition by a.company_name) as median\nfrom a;\n```\n\n\nI'm pretty sure that any database that supports ```\npercent_rank()```\n also supports ```\npercentile_cont()```\n and ```\npercentile_disc()```\n, although the exact syntax could vary among databases.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Index error in function calculating median\r\n                \r\nI'm writing a function to calculate median and getting IndexError:\n```\ndef median(median):\n    median.sort()\n    if len(median) % 2 != 0:\n        b = math.floor(len(median))\n        return median[b]\n    else:\n        return (median[len(median)] + median[len(median)-1])/2\n\n\n\n    p = [5,2,6,1,2,6]\nprint('Student median: ' + str(median(p)))\n```\n\nHow should I make it properly?\n    ", "Answer": "\r\nYou forgot to divide the index by 2 to get the middle position\nThe corrected code:\n```\ndef median(median):\n    median.sort()\n    if len(median) % 2 != 0:\n        return median[int(len(median)/2)]\n    else:\n        return (median[int(len(median)/2)] + median[int((len(median)-1)/2)])/2\n\np = [5,2,6,1,2,6]\n\nprint('Student median: ' + str(median(p)))\n```\n\nOutputs:\n```\nStudent median: 3.5\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to display median with compareGroups package?\r\n                \r\nI have this code:\n\n```\ndata(\"ToothGrowth\")\nres<-compareGroups(supp~len, data = ToothGrowth)\nrestab<-createTable(res, show.p.overall = FALSE, extra.labels=c(\"\",\"\",\"\"))\nprint(restab, which.table = \"descr\")\n```\n\n\nIt gives me this output (with mean and standard deviation):\n\n```\n--------Summary descriptives table by 'supp'---------\n\n______________________________________ \n                   OJ          VC      \n                  N=30        N=30     \n¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ \nlen, Mean (SD) 20.7 (6.61) 17.0 (8.27) \n¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ \n```\n\n\nQuestion: How to make it also output median? I need by group summary in html format of mean median and standard deviation.\n    ", "Answer": "\r\nWould you consider a solution with dplyr rather than compareGroups? You can add any statistic you want.\n\n```\nlibrary(dplyr)\n\ndata(\"ToothGrowth\")\n\ndf<-ToothGrowth %>%\n  group_by(supp) %>%\n  summarize(mean = mean(len), \n            median = median(len),\n            sd = sd(len),\n            count = n())\n\ndf\n\n# # A tibble: 2 x 5\n# supp   mean median    sd count\n# <fct> <dbl>  <dbl> <dbl> <int>\n# 1 OJ     20.7   22.7  6.61    30\n# 2 VC     17.0   16.5  8.27    30\n```\n\n\nYou can format the result (or any dataframe) as an HTML table with the package knitr. You'll find formatting options in the ```\nkable```\n help file; the add-on package kableExtra lets you do a lot more.\n\n```\nknitr::kable(df, format = \"html\", digits = 2)\n\n# <table>\n#   <thead>\n#   <tr>\n#   <th style=\"text-align:left;\"> supp </th>\n#   <th style=\"text-align:right;\"> mean </th>\n#   <th style=\"text-align:right;\"> median </th>\n#   <th style=\"text-align:right;\"> sd </th>\n#   <th style=\"text-align:right;\"> count </th>\n#   </tr>\n#   </thead>\n#   <tbody>\n#   <tr>\n#   <td style=\"text-align:left;\"> OJ </td>\n#   <td style=\"text-align:right;\"> 20.66333 </td>\n#   <td style=\"text-align:right;\"> 22.7 </td>\n#   <td style=\"text-align:right;\"> 6.605561 </td>\n#   <td style=\"text-align:right;\"> 30 </td>\n#   </tr>\n#   <tr>\n#   <td style=\"text-align:left;\"> VC </td>\n#   <td style=\"text-align:right;\"> 16.96333 </td>\n#   <td style=\"text-align:right;\"> 16.5 </td>\n#   <td style=\"text-align:right;\"> 8.266029 </td>\n#   <td style=\"text-align:right;\"> 30 </td>\n#   </tr>\n#   </tbody>\n#   </table>\n#   > kable(df, format = \"html\", digits = 2)\n# <table>\n#   <thead>\n#   <tr>\n#   <th style=\"text-align:left;\"> supp </th>\n#   <th style=\"text-align:right;\"> mean </th>\n#   <th style=\"text-align:right;\"> median </th>\n#   <th style=\"text-align:right;\"> sd </th>\n#   <th style=\"text-align:right;\"> count </th>\n#   </tr>\n#   </thead>\n#   <tbody>\n#   <tr>\n#   <td style=\"text-align:left;\"> OJ </td>\n#   <td style=\"text-align:right;\"> 20.66 </td>\n#   <td style=\"text-align:right;\"> 22.7 </td>\n#   <td style=\"text-align:right;\"> 6.61 </td>\n#   <td style=\"text-align:right;\"> 30 </td>\n#   </tr>\n#   <tr>\n#   <td style=\"text-align:left;\"> VC </td>\n#   <td style=\"text-align:right;\"> 16.96 </td>\n#   <td style=\"text-align:right;\"> 16.5 </td>\n#   <td style=\"text-align:right;\"> 8.27 </td>\n#   <td style=\"text-align:right;\"> 30 </td>\n#   </tr>\n#   </tbody>\n#   </table>\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "boundary cases in a median filter (2D int) c++\r\n                \r\nWhile developing a 2D integer median filter, I have run into a problem while finding the median for the boundary values of the 2D array. \n\nMy Code\n\n```\n    #include <iostream>\n    #include <fstream>\n    #include <string>\n    #include <vector>\n    #include <math.h>\n    #include <cilk/cilk.h>\n\n    int median(int x1, int y1, int k);\n    void recursion(int x1, int y1, int x2, int y2);\n\n    using namespace std;\n\n    std::vector < std::vector <int>> x;\n    std::vector < std::vector <int>> y;\n\n    int n, m, k;\n    //n=y\n    //m=x\n\n    int main()\n    {\n        std::fstream File;\n        File.open(\"test.txt\");\n\n        //error msg reading\n        if (File.fail()) {\n            cout << \"error opening file\";\n        }\n\n        //read file\n        while (!File.eof())\n        {\n            File >> n;\n            File >> m;\n            File >> k;\n\n            for (int i = 0; i < n; i++) {\n                vector <int> row;\n                for (int j = 0; j < m; j++) {\n                    int readFromFile = 0;\n                    File >> readFromFile;\n                    row.push_back(readFromFile);\n                }\n                x.push_back(row);\n            }\n\n        }\n\n        //print vector values to console to see if its correct\n        cout << n; \n        cout << \"\\n\";\n        cout << m;\n        cout << \"\\n\";\n        cout << k;\n        cout << \"\\n\";\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                cout << x[i][j];\n                cout << \" \";\n            }\n            cout << \"\\n\";\n        }\n\n        recursion (0,0,n,m);\n    }\n\n    void recursion(int x1, int y1, int x2, int y2)\n    {\n        int mDiv2=x2/2;\n        int nDiv2=y2/2;\n\n        if ((x2 == x1) && (y2 == y1))\n        {\n            y[x2][y2] = median(k);\n            return;\n        }\n        else\n        {\n            cilk_spawn recursion(x1, y1, x2/2, y2/2); //quadrant 1\n            cilk_spawn recursion(mDiv2, y1, x2/2, nDiv2/2); //quadrant 2\n            cilk_spawn recursion(x1, nDiv2, mDiv2/2, y2/2); //quadrant 3\n            cilk_spawn recursion(mDiv2, nDiv2, x2/2, y2/2); //quadrant 4\n        }\n    }\n\nint median(int x, int y, int k)\n{\n    vector <int> s;\n\n    for (int i = -k; i < k; i++) {\n        for (int j = -k ; j < k; j++) {\n            if (((x+i>=0) && (y+j>=0)) && ((x+i<=m) && (y+j>=n))){\n            s.push_back(x[x+i][y+i]);}\n            else\n            {\n                //boundary\n            }\n        }\n    }\n//sort\n}\n```\n\n\nWithin the median function i take in the point of the 2D array stored in the vector x along with the k median filter. If the value goes out of bounds i would like to store the value of the closest element instead. For example point (0,0) with the k median filter 3 would collect all the data from (-3,-3) to (3,3). Because (-3,-3) does not exist, the closest element would be (0,0) thus storing the value of x[0][0]. How would you allocate the value of the closest element to vector s if it goes out of bounds?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to get rolling median on pandas dataframe?\r\n                \r\n```\nData:\n\n              vix      s_0000     s_0001     s_0002     s_0003  s_0004  \nDate                                                                     \n1990-01-02  17.24         NaN  13.389421        NaN        NaN     NaN   \n1990-01-03  18.19         NaN  13.588601        NaN        NaN     NaN   \n1990-01-04  19.22         NaN  13.610730        NaN        NaN     NaN   \n1990-01-05  20.11         NaN  13.477942        NaN        NaN     NaN   \n1990-01-08  20.26         NaN  13.477942        NaN        NaN     NaN   \n...           ...         ...        ...        ...        ...     ...   \n2020-12-23  23.31  116.631310  22.171579  15.890000  16.577030    9.00   \n2020-12-24  21.53  116.641243  21.912146  15.660000  16.606722    8.77   \n2020-12-28  21.70  117.158287  22.191536  16.059999  16.200956    8.93   \n2020-12-29  23.08  116.561714  21.991972  15.860000  16.745275    8.80   \n2020-12-30  22.77  116.720795  22.899990  16.150000  17.932884    8.60   \n```\n\nI would like to add a new column \"HVM\" showing a 12-month rolling median (n=12) of vix.\nFor instance, the HVM for January 1991 will be the median of Jan 1990 to Dec 1990. The HVM for February 1991 will be the median of Feb 1990 to Jan 1991. There will be no HVM for Year 1990. I've only managed the code below:\n```\nimport pandas as pd\nmd = pd.read_csv('ADJ_CLOSE.zip')\nmd.Date = pd.to_datetime(md.Date)\nmd.set_index('Date', inplace=True)\nmd['HVM'] = md.groupby(md.Date.dt.year)['vix'].transform('median')\n```\n\nHowever this code applies the 12m median starting from 1990, which gives the same HVM for the entire year, instead of calculating from the past 12 months. Any help would be appreciated!\n    ", "Answer": "\r\nThe problem is ```\n12M```\n is considered as a non-fixed frequency. The best you can do is to compute the median over 365 days:\n```\nmd = pd.read_csv('ADJ_CLOSE.zip', index_col='Date', parse_dates=['Date'])\nmd['HVM'] = md.rolling('365D')['vix'].median()\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "dplyr replace NA with median after grouping\r\n                \r\nI am preparing a dataset for a PCA, all my variables are numeric so I can calculate the median of all of them.\nI have two grouping variables. I need to calculate the median of the group (say first group is CATEGORIA=6 and Dpto='A' and so on) and use this value as a replacement for the cells with NA on them, my code is:\n```\nfor (j in 10:46){\n consolidado1<-consolidado%>% \n group_by(CATEGORIA,Dpto,.add=T)%>%\n mutate_at(vars(j),~ ifelse(is.na(.),median(consolidado[,j],na.rm=T), .))\n}\n```\n\nHowever it's not replacing anything and whenever I try to test some values of j, for example:\n```\n consolidado1<-consolidado%>% \n group_by(CATEGORIA,Dpto,.add=T)%>%\n mutate_at(vars(11),~ ifelse(is.na(.),median(consolidado[,11],na.rm=T), .))\n```\n\nThe NAs are replaced not with the group median but with the median of the whole column.\nWhat's the correct way of doing this? How do I properly extract the group median?\n    ", "Answer": "\r\nWhen you are subsetting the column from the dataframe (```\nconsolidado[,11]```\n) it returns the entire dataframe column and does not consider the groups hence you get ```\nmedian```\n of whole column. You can use ```\n.```\n to refer the column values and take grouped ```\nmedian```\n from it.\n```\nlibrary(dplyr)\nconsolidado1 <- consolidado %>% \n                 group_by(CATEGORIA,Dpto) %>%  \n                 mutate(across(10:46, ~ ifelse(is.na(.),median(.,na.rm=TRUE), .)))\n                 #With `mutate_at`\n                 #mutate_at(10:46,~ ifelse(is.na(.),median(.,na.rm=TRUE), .))\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "R - Reduce() not working with median\r\n                \r\nI've been doing:\n\n```\nmylist<- c(2,5,19,29)\nReduce(\"+\", mylist)\n```\n\n\nResult:\n\n```\n[1] 55 \n```\n\n\nwithout any problem. However, then I needed to do a median, so I did:\n\n```\nReduce(median, mylist)\n```\n\n\nwhich give me:\n\n```\n[1] 2\n```\n\n\nbut the answer is supposed to be:\n\n```\nmedian(unlist(hom))\n[1] 12\n```\n\n\nCan someone explain why ```\nReduce()```\n is doing this?\n    ", "Answer": "\r\n```\nReduce```\n needs a binary operation. ```\nmedian```\n is not. What you are computing with ```\nReduce```\n is basically something like ```\nmedian(2, median(5, median(19, 29)))```\n which is ```\n2```\n because the second argument to ```\nmedian```\n is interpreted as ```\nmedian```\n's second  argument 'na.rm'.\n\n```\nReduce(median, mylist) = median(2, median(5,median(19,29)))\n= median(2, median(5,19))\n= median(2, 5)\n= 2\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "mean and median of residuals from a linear model\r\n                \r\nI just started to learn R and need some help on finding the mean and median of residuals for my data. I calculated the lm and in the summary I get residuals like follows:\n\n```\nmin       1Q        median  3Q      Max\n-111.86   -34.90     -7.6   33.46   182.58\n```\n\n\nQuestion: so the median of residuals is -7.6 but which is my mean?\nOr is there a calculation for finding mean and median of residuals?\nI was going to do mean(resid(trees.lm) or should it be entered as mean(trees.lm$resid)\n\nPlease clarify because my classmates all get different responses for the same data set.\n    ", "Answer": "\r\nThe answer to the one specific question here is:\n\n```\nmean(resid(trees.lm))\n```\n\n\nYou shouldn't delve into fitted model objects like this and strip out arbitrary components. Doing so on something a bit more complicated like a GLM will bite your hand off when you realise you just extracted the working residuals via:\n\n```\nglm.mod.obj$residuals\n```\n\n\nwhich are unlikely to be useful to you.\n\nEven for simple things like ```\nlm()```\n objects, what using ```\nresid()```\n or accessing ```\n$residuals```\n can be different depending upon how the model was fitted (what was the setting for the ```\nna.action```\n argument for example?).\n\nAlso, the linear model assumes that the residuals are i.i.d. Gaussian (or normal) random variables with mean 0 and variance $\\hat{\\sigma}^2}$ so the mean should be very close to 0 (i.e. very, very, very close to 0 but not exactly because this is a computer and floating point arithmetic is in play).\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Function to Calculate Median in SQL Server\r\n                \r\nAccording to MSDN, Median is not available as an aggregate function in Transact-SQL. However, I would like to find out whether it is possible to create this functionality (using the Create Aggregate function, user defined function, or some other method). \n\nWhat would be the best way (if possible) to do this - allow for the calculation of a median value (assuming a numeric data type) in an aggregate query?\n    ", "Answer": "", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to calculate mean, median, mode and range from a set of numbers\r\n                \r\nAre there any functions (as part of a math library) which will calculate mean, median, mode and range from a set of numbers. \n    ", "Answer": "\r\nYes, there does seem to be 3rd libraries (none in Java Math). Two that have come up are:\n\nhttp://opsresearch.com/app/\n\nhttp://www.iro.umontreal.ca/~simardr/ssj/indexe.html\n\nbut, it is actually not that difficult to write your own methods to calculate mean, median, mode and range.\n\nMEAN\n\n```\npublic static double mean(double[] m) {\n    double sum = 0;\n    for (int i = 0; i < m.length; i++) {\n        sum += m[i];\n    }\n    return sum / m.length;\n}\n```\n\n\nMEDIAN\n\n```\n// the array double[] m MUST BE SORTED\npublic static double median(double[] m) {\n    int middle = m.length/2;\n    if (m.length%2 == 1) {\n        return m[middle];\n    } else {\n        return (m[middle-1] + m[middle]) / 2.0;\n    }\n}\n```\n\n\nMODE\n\n```\npublic static int mode(int a[]) {\n    int maxValue, maxCount;\n\n    for (int i = 0; i < a.length; ++i) {\n        int count = 0;\n        for (int j = 0; j < a.length; ++j) {\n            if (a[j] == a[i]) ++count;\n        }\n        if (count > maxCount) {\n            maxCount = count;\n            maxValue = a[i];\n        }\n    }\n\n    return maxValue;\n}\n```\n\n\n\n\nUPDATE\n\nAs has been pointed out by Neelesh Salpe, the above does not cater for multi-modal collections. We can fix this quite easily:\n\n```\npublic static List<Integer> mode(final int[] numbers) {\n    final List<Integer> modes = new ArrayList<Integer>();\n    final Map<Integer, Integer> countMap = new HashMap<Integer, Integer>();\n\n    int max = -1;\n\n    for (final int n : numbers) {\n        int count = 0;\n\n        if (countMap.containsKey(n)) {\n            count = countMap.get(n) + 1;\n        } else {\n            count = 1;\n        }\n\n        countMap.put(n, count);\n\n        if (count > max) {\n            max = count;\n        }\n    }\n\n    for (final Map.Entry<Integer, Integer> tuple : countMap.entrySet()) {\n        if (tuple.getValue() == max) {\n            modes.add(tuple.getKey());\n        }\n    }\n\n    return modes;\n}\n```\n\n\n\n\nADDITION\n\nIf you are using Java 8 or higher, you can also determine the modes like this:\n\n```\npublic static List<Integer> getModes(final List<Integer> numbers) {\n    final Map<Integer, Long> countFrequencies = numbers.stream()\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\n    final long maxFrequency = countFrequencies.values().stream()\n            .mapToLong(count -> count)\n            .max().orElse(-1);\n\n    return countFrequencies.entrySet().stream()\n            .filter(tuple -> tuple.getValue() == maxFrequency)\n            .map(Map.Entry::getKey)\n            .collect(Collectors.toList());\n}\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Median Algorithm in O(log n)\r\n                \r\nHow can we remove the median of a set with time complexity O(log n)? Some idea?  \n    ", "Answer": "\r\nIf the set is sorted, finding the median requires O(1) item retrievals.  If the items are in arbitrary sequence, it will not be possible to identify the median with certainty without examining the majority of the items.  If one has examined most, but not all, of the items, that will allow one to guarantee that the median will be within some range [if the list contains duplicates, the upper and lower bounds may match], but examining the majority of the items in a list implies O(n) item retrievals.\n\nIf one has the information in a collection which is not fully ordered, but where certain ordering relationships are known, then the time required may require anywhere between O(1) and O(n) item retrievals, depending upon the nature of the known ordering relation.\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "How to find median in sql\r\n                \r\nI have the following sql query which gives me the total h_time grouped by month, week and day. Instead I want the median h_time for month, week and day. How do I do that in Oracle SQL?\n\n```\n SELECT DAY,\n\nMEDIAN(H_TIME) AS HANDLE_TIME\n\nFROM(\n    select \nMONTH, WEEK, DAY,\n\n    CASE \n        WHEN C.JOINED IS NOT NULL\n            THEN (NVL(C.TOTAL_TALK,0) + NVL(C.TOTAL_HOLD,0) + (NVL((C.DATETIME - C.START_DATETIME)*86400,0)) )/86400 \n            ELSE 0 END AS H_TIME\n\nfrom TABLE1 C\n\n\nLEFT JOIN TABLE2 S\nON S.ID = C.ID\nwhere c.direct = 'Inbound'\n)\n\nwhere UPPER(ITEM1) like 'SOMETHING%' \n\nGROUP BY\n\n\nDAY\n```\n\n\nOUTPUT:\n\n```\nDAY              HANDLE_TIME\n14-APR-17   .00567129629629629629629629629629629629629\n15-APR-17   0\n17-APR-17   0\n17-APR-17   .00422453703703703703703703703703703703703\n19-APR-17   .00269675925925925925925925925925925925925\n19-APR-17   0\n19-APR-17   0\n19-APR-17   .00824074074074074074074074074074074074074\n```\n\n    ", "Answer": "\r\nTry replacing :\n\n```\nSUM(H_TIME) AS HANDLE_TIME\n```\n\n\nby :\n\n```\nMEDIAN(H_TIME) AS HANDLE_TIME\n```\n\n\n(line 3)\n\n\nEDIT:\nFor the months, replace:\n\n```\nselect \nMONTH, WEEK, DAY,\n```\n\n\nBy:\n\n```\nselect \nMONTH,\n```\n\n\nAnd:\n\n```\nGROUP BY\n\nMONTH\n,WEEK\n,DAY\n```\n\n\nBy:\n\n```\nGROUP BY \nMONTH\n```\n\n\n\n\nFor the weeks, replace:\n\n```\nselect \nMONTH, WEEK, DAY,\n```\n\n\nBy:\n\n```\nselect \nMONTH, WEEK,\n```\n\n\nAnd:\n\n```\nGROUP BY\n\nMONTH\n,WEEK\n,DAY\n```\n\n\nBy:\n\n```\nGROUP BY \nMONTH\n,WEEK\n```\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "SQL. Hive. Select median\r\n                \r\ncompletely new to Hive,  I have a database like this:\n\n```\nCust |   Visited   |  Purchased\n--------------------------------\nid01 | Novem | Computer\nid02 | March | Printer \nid03 | Decem | [empty]\nid01 | April | Phone\nid02 | Augus | Laptop \nid01 | Januar| Monitor\nid01 | Febr  |  [empty]\nid03 | Septem| Keyboard \n```\n\n\nCan you help me to find out the median number of purchased items per customer?\n\nAs for average, I suppose I can do the following:\n\n```\nselect count(*) / count(distinct(Cust)) from table where Purchased !=\"\";\n```\n\n\nBut not sure how to calculate median.\n    ", "Answer": "\r\n\ncount each customer number of purchased items\nmedian is a private case percentile = ```\npercentile(cnt,0.5)```\n\n\n\n\n\n```\nselect      percentile(cnt,0.5) \n\nfrom       (select      count(*)  as cnt\n            from        mytable \n            where       Purchased !=\"\"\n            group by    Cust\n            ) t\n;\n```\n\n\n\n  2.0\n\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
{"Question": "Get median color between two colors\r\n                \r\nI have 2 string representations of colors (ex: \"```\n#FFFFFF```\n\" and \"```\n#000000```\n\") and I am looking for a way to get the median color of these two colors programmatically. The color I call \"median\" would be the color that meets these two in the center. \n\nI need this in order to draw a gradient in 2 steps : \n\n\n1 gradient from the first color to the median\n1 gradient from the median to the second color\n\n\nSo that it looks like 1 gradient from the first to the second color, which I cannot do.\n\nHow can I achieve that?\n    ", "Answer": "\r\nyou can try this perhaps:\n\n```\nnew ArgbEvaluator().evaluate(0.5, 0xffffff, 0x000000);\n```\n\n\nmore info:\nhttp://developer.android.com/reference/android/animation/ArgbEvaluator.html :\n    ", "Knowledge_point": "Median", "Tag": "算法分析"}
