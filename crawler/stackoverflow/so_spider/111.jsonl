{"question": "Good books and resources on data parallel programming and algorithms [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question is seeking recommendations for books, tools, software libraries, and more. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     We donâ€™t allow questions seeking recommendations for books, tools, software libraries, and more. You can edit the question so it can be answered with facts and citations.\r\n                \r\n                    \r\n                        Closed 6 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI've read the following and most of the NVIDIA manuals and other content. I was also at GTC last year for the papers and talks.\n\nCUDA by Example: An Introduction to General-Purpose GPU Programming\n\nProgramming Massively Parallel Processors: A Hands-on Approach\n\nAnd I'm aware of the latest GPU Computing Gems Emerald Edition but haven't read it yet.\n\nWhat other books and resources would you recommend? For instance I'm sure there's some great content from the first wave of data parallel programming in the 80s (the Connection Machine etc). I know a lot of research was done on data parallel algorithms for that generation of hardware.\n\nFollowup... 30/Mar/2011\n\nI also discovered that the GPU Gems books 1-3 have some chapters on GPU computing, not just graphics. They're available free online, http://developer.nvidia.com/object/gpu_gems_home.html. I've not had a chance to read them yet.\n    ", "answer": "\r\nHillis & Steele [1986], \"Data Parallel Algorithms\".\n    ", "knowledge_point": "", "tag": ""}
{"question": "data structures and algorithms e-books [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                    \r\n                        \r\n                    \r\n                \r\n                    \r\n                            \r\n                                As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,  or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question  can be improved and possibly reopened, visit the help center for guidance.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                Closed 11 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nWhere can I find e-books on Data Structures and Algorithms? I am currently reading \"Computer Algorithms: Introduction to design and Analysis\" by Sara Baase and Allen Van Gelder. I would like to have additional information to supplement what's in this book. Also some references on worst-case analysis would be great. \n    ", "answer": "\r\nBy far my favourite algorithm textbook is The Algorithm Design Manual, by Steven Skiena. Very easy to read, very practical, and extremely useful. The first half of the book is a general treatment of algorithm theory, with lots of practical examples. The second half is a huge library of common problems, what algorithms can be used to tackle them, and comprehensive lists of references. You won't be disappointed.\n    ", "knowledge_point": "", "tag": ""}
{"question": "Image Processing: Algorithm Improvement for 'Coca-Cola Can' Recognition\r\n                \r\nOne of the most interesting projects I've worked on in the past couple of years was a project about image processing. The goal was to develop a system to be able to recognize Coca-Cola 'cans' (note that I'm stressing the word 'cans', you'll see why in a minute). You can see a sample below, with the can recognized in the green rectangle with scale and rotation.\n\n\n\nSome constraints on the project:\n\n\nThe background could be very noisy.\nThe can could have any scale or rotation or even orientation (within reasonable limits).\nThe image could have some degree of fuzziness (contours might not be entirely straight).\nThere could be Coca-Cola bottles in the image, and the algorithm should only detect the can!\nThe brightness of the image could vary a lot (so you can't rely \"too much\" on color detection).\nThe can could be partly hidden on the sides or the middle and possibly partly hidden behind a bottle.\nThere could be no can at all in the image, in which case you had to find nothing and write a message saying so.\n\n\nSo you could end up with tricky things like this (which in this case had my algorithm totally fail):\n\n\n\nI did this project a while ago, and had a lot of fun doing it, and I had a decent implementation. Here are some details about my implementation:\n\nLanguage: Done in C++ using OpenCV library.\n\nPre-processing: For the image pre-processing, i.e. transforming the image into a more raw form to give to the algorithm, I used 2 methods:\n\n\nChanging color domain from RGB to HSV and filtering based on \"red\" hue, saturation above a certain threshold to avoid orange-like colors, and filtering of low value to avoid dark tones. The end result was a binary black and white image, where all white pixels would represent the pixels that match this threshold. Obviously there is still a lot of crap in the image, but this reduces the number of dimensions you have to work with.\n  \nNoise filtering using median filtering (taking the median pixel value of all neighbors and replace the pixel by this value) to reduce noise.\nUsing Canny Edge Detection Filter to get the contours of all items after 2 precedent steps.\n\n\n\nAlgorithm: The algorithm itself I chose for this task was taken from this awesome book on feature extraction and called Generalized Hough Transform (pretty different from the regular Hough Transform). It basically says a few things:\n\n\nYou can describe an object in space without knowing its analytical equation (which is the case here).\nIt is resistant to image deformations such as scaling and rotation, as it will basically test your image for every combination of scale factor and rotation factor.\nIt uses a base model (a template) that the algorithm will \"learn\".\nEach pixel remaining in the contour image will vote for another pixel which will supposedly be the center (in terms of gravity) of your object, based on what it learned from the model.\n\n\nIn the end, you end up with a heat map of the votes, for example here all the pixels of the contour of the can will vote for its gravitational center, so you'll have a lot of votes in the same pixel corresponding to the center, and will see a peak in the heat map as below:\n\n\n\nOnce you have that, a simple threshold-based heuristic can give you the location of the center pixel, from which you can derive the scale and rotation and then plot your little rectangle around it (final scale and rotation factor will obviously be relative to your original template). In theory at least...\n\nResults: Now, while this approach worked in the basic cases, it was severely lacking in some areas:\n\n\nIt is extremely slow! I'm not stressing this enough. Almost a full day was needed to process the 30 test images, obviously because I had a very high scaling factor for rotation and translation, since some of the cans were very small.\nIt was completely lost when bottles were in the image, and for some reason almost always found the bottle instead of the can (perhaps because bottles were bigger, thus had more pixels, thus more votes)\nFuzzy images were also no good, since the votes ended up in pixel at random locations around the center, thus ending with a very noisy heat map.\nIn-variance in translation and rotation was achieved, but not in orientation, meaning that a can that was not directly facing the camera objective wasn't recognized.\n\n\nCan you help me improve my specific algorithm, using exclusively OpenCV features, to resolve the four specific issues mentioned?\n\nI hope some people will also learn something out of it as well, after all I think not only people who ask questions should learn. :)\n    ", "answer": "\r\nAn alternative approach would be to extract features (keypoints) using the scale-invariant feature transform (SIFT) or Speeded Up Robust Features (SURF).\nYou can find a nice OpenCV code example in Java, C++, and Python on this page: Features2D + Homography to find a known object\nBoth algorithms are invariant to scaling and rotation. Since they work with features, you can also handle occlusion (as long as enough keypoints are visible).\n\nImage source: tutorial example\nThe processing takes a few hundred ms for SIFT, SURF is bit faster, but it not suitable for real-time applications. ORB uses FAST which is weaker regarding rotation invariance.\nThe original papers\n\nSURF: Speeded Up Robust Features\nDistinctive Image Features\nfrom Scale-Invariant Keypoints\nORB: an efficient alternative to SIFT or SURF\n\n    ", "knowledge_point": "", "tag": ""}
{"question": "books / ways to learn data structures and algorithms? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     Questions asking us to recommend or find a tool, library or favorite off-site resource are off-topic for Stack Overflow as they tend to attract opinionated answers and spam. Instead, describe the problem and what has been done so far to solve it.\r\n                \r\n                    \r\n                        Closed 9 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI'm a self taught Ruby on Rails engineer, and I'm looking to improve my CS understanding. However, most books about data structures and algorithms are written in Java/C/C++/etc, which I don't know. Is there text on these topics using Ruby? Or do you feel Java is similar enough to Ruby that I could survive through a book?\n\nIs there any recommended text for someone coming from my background?\n\nP.S. Recently I've been looking at Objective C, so I'm not completely blind to statically typed languages.\n    ", "answer": "\r\nThere's a bunch of books on algorithms that are not tied to specific language. Check\n\nhttp://www.amazon.com/Algorithms-Sanjoy-Dasgupta/dp/0073523402\nhttp://www.amazon.com/Introduction-Algorithms-Thomas-H-Cormen/dp/0262033844\n\nI also recommend fundamental, still non-finished classics\n\nhttp://www.amazon.com/Computer-Programming-Volumes-1-4A-Boxed/dp/0321751043\n    ", "knowledge_point": "", "tag": ""}
{"question": "Data structures and algorithms book for the practitioner not for the academic [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     Questions asking us to recommend or find a tool, library or favorite off-site resource are off-topic for Stack Overflow as they tend to attract opinionated answers and spam. Instead, describe the problem and what has been done so far to solve it.\r\n                \r\n                    \r\n                        Closed 9 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nI'm planning to invest some time every week studying data structures and algorithms.\nDo you recommend: \"MIT Introduction to Algorithms, 3rd Edition\" by Cormen, Leiseson, Rivest and Stein?\nAFAIK this book is legendary but I don't know its target audience.  \n\nIs this book suitable for my purpose? or it is for academic studies? is it loaded with heavy math?\n    ", "answer": "\r\nFor Java I recommend Algorithms in Java, Parts 1-4 by Robert Sedgewick. And the companion book Algorithms in Java, Part 5: Graph Algorithms by Robert Sedgewick.\n\nFor general studies I also have the Introductions to Algorithms books, it is a good general reference. This Algorithms, Fourth Edition by Robert Sedgewick looks good as well, but probably covers a lot of stuff already in the previously mentioned books.\n\nFor Clojure, you will probably need to get a Functional based Algorithm book. Pearls of Functional Algorithm Design looks like it might be a good companion to a the more general procedural books.\n    ", "knowledge_point": "", "tag": ""}
{"question": "Choice of programming language for learning data structures and algorithms [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                \r\n                    \r\n                            \r\n                                Closed. This question is seeking recommendations for books, tools, software libraries, and more. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n        \r\n            \r\n                \r\n                        \r\n                            \r\n                        \r\n                     We donâ€™t allow questions seeking recommendations for books, tools, software libraries, and more. You can edit the question so it can be answered with facts and citations.\r\n                \r\n                    \r\n                        Closed 6 years ago.\r\n                    \r\n                \r\n\r\n                \r\n            \r\n        \r\n            \r\n                    \r\n                        Improve this question\r\n                    \r\n            \r\n\r\n\r\n    \r\n\r\nWhich programming language would you recommend to learn about data structures and algorithms in?\n\nConsidering the following:  \n\n\nPersonal experience\nLanguage features (pointers, OO, etc)\nSuitability for learning DS & A concepts\n\n\nI ask because there are some books out there that are programming language-agnostic (written from a Mathematical perspective, and use pseudocode). If I learn from one of these, I would like to choose a programming language to code and run the algorithms in.  \n\nThen, there are other books which introduce DS & A concepts with examples written in a particular programming laguage - and I would like to code these algorithms as well - thus, to a certain extent, the language picks the book too.\n\nEither way, I have to pick a language, and I would prefer to stick to one throughout. Setting aside personal language preferences, which one is best for this purpose?\n    ", "answer": "\r\nThe answer to this question depends on exactly what you want to learn.\n\nPython and Ruby\n\nHigh-level languages like Python and Ruby are often suggested because they are high level and the syntax is quite readable. However, these languages all have abstractions for the common data structures. There's nothing stopping you implementing your own versions as a learning exercise but you may find that you're building high-level data structures on top of other high-level data structures, which isn't necessarily useful.\n\nAlso, Ruby and Python are dynamically-typed languages. This can be good but it can also be confusing for the beginner and it can be harder (initially) to catch errors since they typically won't be apparent until runtime.\n\nC\n\nC is at the other extreme. It's good if you want to learn really low-level details like how the memory is managed but memory management is suddenly an important consideration, as in, correct usage of malloc()/free(). That can be distracting. Also, C isn't object-oriented. That's not a bad thing but simply worth noting.\n\nC++\n\nC++ has been mentioned. As I said in the comment, I think this is a terrible choice. C++ is hideously complicated even in simple usage and has a ridiculous amount of \"gotchas\". Also, C++ has no common base class. This is important because data structures like hash tables rely on there being a common base class. You could implement a version for a nominal base class but it's a little less useful.\n\nJava\n\nJava has also been mentioned. Many people like to hate Java and it's true that the language is extremely verbose and lacking in some of the more modern language features (eg closures) but none of that really matters. Java is statically typed and has garbage collection. This means the Java compiler will catch many errors that dynamically typed languages won't (until runtime) and there's no dealing with segmentation faults (which isn't to say you can't leak memory in Java; obviously you can). I think Java is a fine choice.\n\nC#\n\nC# the language is like a more modern version of Java. Like Java, it is a managed (garbage collected) intermediate compiled language that runs on a virtual machine. Every other language listed here apart from C/C++ also run on a virtual machine but Python, Ruby, etc are interpreted directly rather than compiled to bytecode.\n\nC# has the same pros and cons as Java, basically.\n\nHaskell (etc)\n\nLastly, you have functional languages: Haskell, OCaml, Scheme/Lisp, Clojure, F#, etc. These think about all problems in a very different way and are worth learning at some point but again it comes down to what you want to learn: functional programming or data structures? I'd stick to learning one thing at a time rather than confusing the issue. If you do learn a functional language at some point (which I would recommend), Haskell is a safe and fine choice.\n\nMy Advice\n\nPick Java or C#. Both have free, excellent IDEs (Eclipse, Netbeans and IntelliJ Community Edition for Java, Visual Studio Express for C#, Visual studio community edition) that make writing and running code a snap. If you use no native data structure more complex than an array and any object you yourself write you'll learn basically the same thing as you would in C/C++ but without having to actually manage memory.\n\nLet me explain: an extensible hash table needs to be resized if sufficient elements are added. In any implementation that will mean doing something like doubling the size of the backing data structure (typically an array) and copying in the existing elements. The implementation is basically the same in all imperative languages but in C/C++ you have to deal with segmentation faults when you don't allocate or deallocate something correctly.\n\nPython or Ruby (it doesn't really matter which) would be my next choice (and very close to the other two) just because the dynamic typing could be problematic at first.\n    ", "knowledge_point": "", "tag": ""}
{"question": "Best books/sites/blogs to learn DataStructures and Algorithms as a starting level? [closed]\r\n                    \r\n            \r\n        \r\n            \r\n                    \r\n                        \r\n                    \r\n                \r\n                    \r\n                            \r\n                                As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,  or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question  can be improved and possibly reopened, visit the help center for guidance.\r\n                                \r\n                            \r\n                    \r\n                \r\n            \r\n                Closed 11 years ago.\r\n        \r\n\r\n\r\n    \r\n\r\nCould you please, can any one tell me the best books/sites/blogs to learn DataStructures and Algorithms as a starting level?\nin c++ language.\n\nThanks in advance.\n    ", "answer": "\r\nFor learning data structures and algorithms in general I'd recommend The Algorithm Design Manual by Steven Skiena (Google books link).\n    ", "knowledge_point": "", "tag": ""}
