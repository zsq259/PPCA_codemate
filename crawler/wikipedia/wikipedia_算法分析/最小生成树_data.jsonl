{"Answer": "最小生成树（minimum spanning tree，MST）是最小權重生成樹（minimum weight spanning tree）的簡稱，是一副连通加权无向图中一棵权值最小的生成树。\n在一給定的無向圖 \n  \n    \n      \n        G\n        =\n        (\n        V\n        ,\n        E\n        )\n      \n    \n    {\\displaystyle G=(V,E)}\n  \n 中，\n  \n    \n      \n        (\n        u\n        ,\n        v\n        )\n      \n    \n    {\\displaystyle (u,v)}\n  \n 代表連接頂點 u 與頂點 v 的邊（即 \n  \n    \n      \n        (\n        u\n        ,\n        v\n        )\n        ∈\n        E\n      \n    \n    {\\displaystyle (u,v)\\in E}\n  \n），而 \n  \n    \n      \n        w\n        (\n        u\n        ,\n        v\n        )\n      \n    \n    {\\displaystyle w(u,v)}\n  \n 代表此邊的權重，若存在 T 為 E 的子集（即 \n  \n    \n      \n        T\n        ⊆\n        E\n      \n    \n    {\\displaystyle T\\subseteq E}\n  \n）且 (V, T) 為樹，使得：\n\n  \n    \n      \n        w\n        (\n        T\n        )\n        =\n        \n          ∑\n          \n            (\n            u\n            ,\n            v\n            )\n            ∈\n            T\n          \n        \n        w\n        (\n        u\n        ,\n        v\n        )\n      \n    \n    {\\displaystyle w(T)=\\sum _{(u,v)\\in T}w(u,v)}\n  \n的 w(T) 最小，則此 T 為 G 的最小生成樹。\n一个连通图可能有多个生成树。当图中的边具有权值时，总会有一个生成树的边的权值之和小于或者等于其它生成树的边的权值之和。广义上而言，对于非连通无向图来说，它的每一连通分量同样有最小生成树，它们的并被称为最小生成森林。\n以有線電視電纜的架設為例，若只能沿著街道佈線，則以街道為邊，而路口為頂點，其中必然有一最小生成樹能使佈線成本最低。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树", "Tag": "算法设计"}
{"Answer": "存在个数[编辑]  这张图表明一个图中可能有多个最小生成树最小生成树在一些情况下可能会有多个。例如，当图的每一条边的权值都相同时，该图的所有生成树都是最小生成树。\n唯一性[编辑]如果图的每一条边的权值都互不相同，那么最小生成树将只有一个[1]。这一定理同样适用于最小生成森林。\n证明：\n\n假设图\n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  \n为每条边权值互不相同的连通图，且有两个不同的最小生成树\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n和\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n。\n则\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中必然存在一些在\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n中并不存在的边，取其中一条这样的边\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n。\n因为\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n是最小生成树，所以若往\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n中添加边\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n，则将会出现环路。（因为有\n  \n    \n      \n        m\n      \n    \n    {\\displaystyle m}\n  \n个顶点的树有且仅有\n  \n    \n      \n        m\n        −\n        1\n      \n    \n    {\\displaystyle m-1}\n  \n条边）\n同时可知，如果从\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中删除边\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n，则\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n将分为互不连通的两个连通分量。因为\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n        ∉\n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle e_{0}\\notin T'}\n  \n，所以\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n中必然有其他的边连接这两个连通分量。且将\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n加入\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n后形成的环路中，除了\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n外至少有另一条连接\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中删除\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n后的这两个连通分量的边。取其中一条这样的边，记作\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n。此时若将\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n加入\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n，则可连接从\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中删除\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n后得到的两个连通分量，并形成一棵不同的生成树。\n因为\n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  \n中所有边的权值互不相同，所以关于\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n和\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n的权重大小关系，可能有以下两种情况之一：\n\n若\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n        <\n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle e_{0}<{e_{0}}'}\n  \n，则可从\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n中删除\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n并加入\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n，从而得到一棵总权值更小的生成树。这和\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n是最小生成树相矛盾。\n若\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n        >\n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle e_{0}>{e_{0}}'}\n  \n，则可从\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中删除\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n并加入\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n，从而得到一棵总权值更小的生成树。同样，这和\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n是最小生成树相矛盾。\n综上，若\n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  \n各边权重互不相等，则不可能存在两棵互不相同的最小生成树。即\n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  \n的最小生成树是唯一的。\n\n边的权值之和最低的子图[编辑]如果图的边的权值都为正数，那么最小生成树就是该图的所有包含所有顶点的子图中权值最低的连通子图。\n环定理[编辑]对于连通图中的任意一个环\n  \n    \n      \n        C\n      \n    \n    {\\displaystyle C}\n  \n：如果\n  \n    \n      \n        C\n      \n    \n    {\\displaystyle C}\n  \n中有边\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n的权值大于该环中任意一个其它的边的权值，那么这个边不会是最小生成树中的边\n证明：\n假设\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n属于最小生成树\n  \n    \n      \n        T\n        1\n      \n    \n    {\\displaystyle T1}\n  \n，那么将\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n删去将会使得\n  \n    \n      \n        T\n        1\n      \n    \n    {\\displaystyle T1}\n  \n变为两个树。因为环\n  \n    \n      \n        C\n      \n    \n    {\\displaystyle C}\n  \n必然还存在另一横切边ｆ可以连接两个子树形成生成树\n  \n    \n      \n        T\n        2\n      \n    \n    {\\displaystyle T2}\n  \n，且由于\n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n  \n＜\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n，生成树\n  \n    \n      \n        T\n        2\n      \n    \n    {\\displaystyle T2}\n  \n权值更小，与\n  \n    \n      \n        T\n        1\n      \n    \n    {\\displaystyle T1}\n  \n是最小生成树矛盾。\n割定理[编辑]  此图展示了最小生成树的割定理。\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n是该图唯一的最小生成树，令\n  \n    \n      \n        S\n        =\n        \n          {\n          \n            A\n            ,\n            B\n            ,\n            D\n            ,\n            E\n          \n          }\n        \n      \n    \n    {\\displaystyle S=\\left\\{A,B,D,E\\right\\}}\n  \n，则\n  \n    \n      \n        V\n        −\n        S\n        =\n        \n          {\n          \n            C\n            ,\n            F\n          \n          }\n        \n      \n    \n    {\\displaystyle V-S=\\left\\{C,F\\right\\}}\n  \n，这样就形成了一个割，其割集包含3条割边，即BC，EC，EF，如果去除它们就可以将这两个子图完全断开。在割集中，\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n是权值最小的边，所以\n  \n    \n      \n        S\n        ∪\n        \n          {\n          e\n          }\n        \n      \n    \n    {\\displaystyle S\\cup \\left\\{e\\right\\}}\n  \n是最小生成树\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n的一部分。在一幅连通加权无向图中，给定任意的割（英语：Cut (graph theory)），如有一条割边的权值严格小于所有其他割边，则这条边必然属于图的最小生成树。\n证明：\n令\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n为权重最小的割边，假设\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n为图的最小生成树，且\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n不包含\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n。那么如果将\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n加入\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n，得到的图必然含有一条经过\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n的环，且这个环也含有另一条割边--设为\n  \n    \n      \n        \n          e\n          ′\n        \n      \n    \n    {\\displaystyle e'}\n  \n，\n  \n    \n      \n        \n          e\n          ′\n        \n      \n    \n    {\\displaystyle e'}\n  \n的权重必然大于\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n，那么用\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n替换\n  \n    \n      \n        \n          e\n          ′\n        \n      \n    \n    {\\displaystyle e'}\n  \n可以形成一个权值小于\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n的生成树，与\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n为最小生成树矛盾。所以假设不成立，因此\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n必然包含\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n。[2]。\n最小权值边[编辑]如果图的具有最小权值的边只有一条，那么这条边包含在任意一个最小生成树中。\n证明：\n假设该边\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n没有在最小生成树\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中，那么将\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n加入\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中会形成环，用\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n替换环中的任意一条权值更大的边，将会形成权值更小的生成树，与题设矛盾。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关性质", "Tag": "算法设计"}
{"Answer": "  这张图表明一个图中可能有多个最小生成树最小生成树在一些情况下可能会有多个。例如，当图的每一条边的权值都相同时，该图的所有生成树都是最小生成树。\n唯一性[编辑]如果图的每一条边的权值都互不相同，那么最小生成树将只有一个[1]。这一定理同样适用于最小生成森林。\n证明：\n\n假设图\n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  \n为每条边权值互不相同的连通图，且有两个不同的最小生成树\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n和\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n。\n则\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中必然存在一些在\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n中并不存在的边，取其中一条这样的边\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n。\n因为\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n是最小生成树，所以若往\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n中添加边\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n，则将会出现环路。（因为有\n  \n    \n      \n        m\n      \n    \n    {\\displaystyle m}\n  \n个顶点的树有且仅有\n  \n    \n      \n        m\n        −\n        1\n      \n    \n    {\\displaystyle m-1}\n  \n条边）\n同时可知，如果从\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中删除边\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n，则\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n将分为互不连通的两个连通分量。因为\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n        ∉\n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle e_{0}\\notin T'}\n  \n，所以\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n中必然有其他的边连接这两个连通分量。且将\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n加入\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n后形成的环路中，除了\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n外至少有另一条连接\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中删除\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n后的这两个连通分量的边。取其中一条这样的边，记作\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n。此时若将\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n加入\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n，则可连接从\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中删除\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n后得到的两个连通分量，并形成一棵不同的生成树。\n因为\n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  \n中所有边的权值互不相同，所以关于\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n和\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n的权重大小关系，可能有以下两种情况之一：\n\n若\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n        <\n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle e_{0}<{e_{0}}'}\n  \n，则可从\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n中删除\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n并加入\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n，从而得到一棵总权值更小的生成树。这和\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n是最小生成树相矛盾。\n若\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n        >\n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle e_{0}>{e_{0}}'}\n  \n，则可从\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中删除\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n并加入\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n，从而得到一棵总权值更小的生成树。同样，这和\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n是最小生成树相矛盾。\n综上，若\n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  \n各边权重互不相等，则不可能存在两棵互不相同的最小生成树。即\n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  \n的最小生成树是唯一的。\n\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关性质的存在个数", "Tag": "算法设计"}
{"Answer": "如果图的每一条边的权值都互不相同，那么最小生成树将只有一个[1]。这一定理同样适用于最小生成森林。\n证明：\n\n假设图\n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  \n为每条边权值互不相同的连通图，且有两个不同的最小生成树\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n和\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n。\n则\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中必然存在一些在\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n中并不存在的边，取其中一条这样的边\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n。\n因为\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n是最小生成树，所以若往\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n中添加边\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n，则将会出现环路。（因为有\n  \n    \n      \n        m\n      \n    \n    {\\displaystyle m}\n  \n个顶点的树有且仅有\n  \n    \n      \n        m\n        −\n        1\n      \n    \n    {\\displaystyle m-1}\n  \n条边）\n同时可知，如果从\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中删除边\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n，则\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n将分为互不连通的两个连通分量。因为\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n        ∉\n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle e_{0}\\notin T'}\n  \n，所以\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n中必然有其他的边连接这两个连通分量。且将\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n加入\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n后形成的环路中，除了\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n外至少有另一条连接\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中删除\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n后的这两个连通分量的边。取其中一条这样的边，记作\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n。此时若将\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n加入\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n，则可连接从\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中删除\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n后得到的两个连通分量，并形成一棵不同的生成树。\n因为\n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  \n中所有边的权值互不相同，所以关于\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n和\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n的权重大小关系，可能有以下两种情况之一：\n\n若\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n        <\n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle e_{0}<{e_{0}}'}\n  \n，则可从\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n中删除\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n并加入\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n，从而得到一棵总权值更小的生成树。这和\n  \n    \n      \n        \n          T\n          ′\n        \n      \n    \n    {\\displaystyle T'}\n  \n是最小生成树相矛盾。\n若\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n        >\n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle e_{0}>{e_{0}}'}\n  \n，则可从\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中删除\n  \n    \n      \n        \n          e\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle e_{0}}\n  \n并加入\n  \n    \n      \n        \n          \n            \n              e\n              \n                0\n              \n            \n          \n          ′\n        \n      \n    \n    {\\displaystyle {e_{0}}'}\n  \n，从而得到一棵总权值更小的生成树。同样，这和\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n是最小生成树相矛盾。\n综上，若\n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  \n各边权重互不相等，则不可能存在两棵互不相同的最小生成树。即\n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  \n的最小生成树是唯一的。\n\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关性质的存在个数的唯一性", "Tag": "算法设计"}
{"Answer": "如果图的边的权值都为正数，那么最小生成树就是该图的所有包含所有顶点的子图中权值最低的连通子图。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关性质的边的权值之和最低的子图", "Tag": "算法设计"}
{"Answer": "对于连通图中的任意一个环\n  \n    \n      \n        C\n      \n    \n    {\\displaystyle C}\n  \n：如果\n  \n    \n      \n        C\n      \n    \n    {\\displaystyle C}\n  \n中有边\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n的权值大于该环中任意一个其它的边的权值，那么这个边不会是最小生成树中的边\n证明：\n假设\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n属于最小生成树\n  \n    \n      \n        T\n        1\n      \n    \n    {\\displaystyle T1}\n  \n，那么将\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n删去将会使得\n  \n    \n      \n        T\n        1\n      \n    \n    {\\displaystyle T1}\n  \n变为两个树。因为环\n  \n    \n      \n        C\n      \n    \n    {\\displaystyle C}\n  \n必然还存在另一横切边ｆ可以连接两个子树形成生成树\n  \n    \n      \n        T\n        2\n      \n    \n    {\\displaystyle T2}\n  \n，且由于\n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n  \n＜\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n，生成树\n  \n    \n      \n        T\n        2\n      \n    \n    {\\displaystyle T2}\n  \n权值更小，与\n  \n    \n      \n        T\n        1\n      \n    \n    {\\displaystyle T1}\n  \n是最小生成树矛盾。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关性质的环定理", "Tag": "算法设计"}
{"Answer": "  此图展示了最小生成树的割定理。\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n是该图唯一的最小生成树，令\n  \n    \n      \n        S\n        =\n        \n          {\n          \n            A\n            ,\n            B\n            ,\n            D\n            ,\n            E\n          \n          }\n        \n      \n    \n    {\\displaystyle S=\\left\\{A,B,D,E\\right\\}}\n  \n，则\n  \n    \n      \n        V\n        −\n        S\n        =\n        \n          {\n          \n            C\n            ,\n            F\n          \n          }\n        \n      \n    \n    {\\displaystyle V-S=\\left\\{C,F\\right\\}}\n  \n，这样就形成了一个割，其割集包含3条割边，即BC，EC，EF，如果去除它们就可以将这两个子图完全断开。在割集中，\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n是权值最小的边，所以\n  \n    \n      \n        S\n        ∪\n        \n          {\n          e\n          }\n        \n      \n    \n    {\\displaystyle S\\cup \\left\\{e\\right\\}}\n  \n是最小生成树\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n的一部分。在一幅连通加权无向图中，给定任意的割（英语：Cut (graph theory)），如有一条割边的权值严格小于所有其他割边，则这条边必然属于图的最小生成树。\n证明：\n令\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n为权重最小的割边，假设\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n为图的最小生成树，且\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n不包含\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n。那么如果将\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n加入\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n，得到的图必然含有一条经过\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n的环，且这个环也含有另一条割边--设为\n  \n    \n      \n        \n          e\n          ′\n        \n      \n    \n    {\\displaystyle e'}\n  \n，\n  \n    \n      \n        \n          e\n          ′\n        \n      \n    \n    {\\displaystyle e'}\n  \n的权重必然大于\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n，那么用\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n替换\n  \n    \n      \n        \n          e\n          ′\n        \n      \n    \n    {\\displaystyle e'}\n  \n可以形成一个权值小于\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n的生成树，与\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n为最小生成树矛盾。所以假设不成立，因此\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n必然包含\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n。[2]。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关性质的割定理", "Tag": "算法设计"}
{"Answer": "如果图的具有最小权值的边只有一条，那么这条边包含在任意一个最小生成树中。\n证明：\n假设该边\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n没有在最小生成树\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中，那么将\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n加入\n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n中会形成环，用\n  \n    \n      \n        e\n      \n    \n    {\\displaystyle e}\n  \n替换环中的任意一条权值更大的边，将会形成权值更小的生成树，与题设矛盾。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关性质的最小权值边", "Tag": "算法设计"}
{"Answer": "历史简介[编辑]计算稠密图的最小生成树最早是由罗伯特·普里姆（英语：Robert C. Prim）在1957年发明的[3]，即Prim算法。之后艾兹赫尔·戴克斯特拉也独自发明了它[4]。但该算法的基本思想是由沃伊捷赫·亚尔尼克（英语：Vojtěch Jarník）于1930年发明的[5]。所以该算法有时候也被称为Jarník算法或者Prim-Jarník算法。20世纪70年代，优先队列发明之后很快被用在了寻找稀疏图中的最小生成树上。1984年，迈克尔·弗里德曼和罗伯特·塔扬发明了斐波那契堆，Prim算法所需要的运行时间在理论上由\n  \n    \n      \n        E\n        log\n        ⁡\n        E\n      \n    \n    {\\displaystyle E\\log E}\n  \n提升到了\n  \n    \n      \n        E\n        +\n        V\n        log\n        ⁡\n        V\n      \n    \n    {\\displaystyle E+V\\log V}\n  \n。约瑟夫·克鲁斯卡尔（英语：Joseph Kruskal）在1956年发表了他的算法，在他的论文中提到了Prim算法的一个变种，而奥塔卡尔·布卢瓦卡（英语：Otakar Borůvka）在20世纪20年代的论文中就已经提到了该变种。M.Sollin在1961年重新发现了该算法，该算法后成为实现较好渐进性能的最小生成树算法和并行最小生成树算法的基础[6]。\n以下各算法介绍中，\n  \n    \n      \n        E\n      \n    \n    {\\displaystyle E}\n  \n表示图的边数，\n  \n    \n      \n        V\n      \n    \n    {\\displaystyle V}\n  \n表示图的顶点数。　\nBorůvka算法[编辑]第一个用于寻找最小生成树的算法由捷克科学家奥塔卡尔·布卢瓦卡（英语：Otakar Borůvka）提出，即Borůvka算法（英语：Borůvka's algorithm）。\nPrim算法[编辑]主条目：普里姆算法Prim算法的每一步都会为一棵生长中的树添加一条边，该树最开始只有一个顶点，然后会添加\n  \n    \n      \n        V\n        −\n        1\n      \n    \n    {\\displaystyle V-1}\n  \n个边。每次总是添加生长中的树和树中除该生长的树以外的部分形成的切分的具有最小权值的横切边。\nPrim算法的时间复杂度为\n  \n    \n      \n        O\n        (\n        E\n        +\n        V\n        log\n        ⁡\n        V\n        )\n      \n    \n    {\\displaystyle O(E+V\\log V)}\n  \n。\nKruskal算法[编辑]主条目：克鲁斯克尔演算法按照边的权重顺序（从小到大）将边加入生成树中，但是若加入该边会与生成树形成环则不加入该边。直到树中含有\n  \n    \n      \n        V\n        −\n        1\n      \n    \n    {\\displaystyle V-1}\n  \n条边为止。这些边组成的就是该图的最小生成树。\nKruskal算法的时间复杂度为\n  \n    \n      \n        E\n        log\n        ⁡\n        E\n      \n    \n    {\\displaystyle E\\log E}\n  \n。\n更快的算法[编辑]一些研究者希望可以找出更为高效的算法，在这方面也有了一定的成果。\nKarger，Klein & Tarjan (1995)针对边的权值可以成对比较的特殊模型提出了一个基于Borůvka算法和翻转删除算法的可以在线性时间内解决最小生成树的算法[7][8]。\n最快的非随机比较算法是由伯纳德·沙泽勒（英语：Bernard Chazelle）提出的。该算法依赖于soft heap（英语：soft heap）这样一个类似于优先级队列的数据结构[9][10] 。该算法的时间复杂度为\n  \n    \n      \n        O\n        (\n        E\n        α\n        (\n        E\n        ,\n        V\n        )\n        )\n      \n    \n    {\\displaystyle O(E\\alpha (E,V))}\n  \n。\n  \n    \n      \n        α\n      \n    \n    {\\displaystyle \\alpha }\n  \n就是阿克曼函数反函数，\n  \n    \n      \n        α\n      \n    \n    {\\displaystyle \\alpha }\n  \n的增长速度非常慢，对于一般的数值来说，其值很难超过5，所以该算法的复杂度可以近似看成是线性时间。\n线性时间的最小生成树算法[编辑]目前，既不能证明不存在能在线性时间内得到任意图的最小生成树的算法，也未能发明能够在线性时间内计算稀疏图的最小生成树的算法。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关算法", "Tag": "算法设计"}
{"Answer": "计算稠密图的最小生成树最早是由罗伯特·普里姆（英语：Robert C. Prim）在1957年发明的[3]，即Prim算法。之后艾兹赫尔·戴克斯特拉也独自发明了它[4]。但该算法的基本思想是由沃伊捷赫·亚尔尼克（英语：Vojtěch Jarník）于1930年发明的[5]。所以该算法有时候也被称为Jarník算法或者Prim-Jarník算法。20世纪70年代，优先队列发明之后很快被用在了寻找稀疏图中的最小生成树上。1984年，迈克尔·弗里德曼和罗伯特·塔扬发明了斐波那契堆，Prim算法所需要的运行时间在理论上由\n  \n    \n      \n        E\n        log\n        ⁡\n        E\n      \n    \n    {\\displaystyle E\\log E}\n  \n提升到了\n  \n    \n      \n        E\n        +\n        V\n        log\n        ⁡\n        V\n      \n    \n    {\\displaystyle E+V\\log V}\n  \n。约瑟夫·克鲁斯卡尔（英语：Joseph Kruskal）在1956年发表了他的算法，在他的论文中提到了Prim算法的一个变种，而奥塔卡尔·布卢瓦卡（英语：Otakar Borůvka）在20世纪20年代的论文中就已经提到了该变种。M.Sollin在1961年重新发现了该算法，该算法后成为实现较好渐进性能的最小生成树算法和并行最小生成树算法的基础[6]。\n以下各算法介绍中，\n  \n    \n      \n        E\n      \n    \n    {\\displaystyle E}\n  \n表示图的边数，\n  \n    \n      \n        V\n      \n    \n    {\\displaystyle V}\n  \n表示图的顶点数。　\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关算法的历史简介", "Tag": "算法设计"}
{"Answer": "第一个用于寻找最小生成树的算法由捷克科学家奥塔卡尔·布卢瓦卡（英语：Otakar Borůvka）提出，即Borůvka算法（英语：Borůvka's algorithm）。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关算法的Borůvka算法", "Tag": "算法设计"}
{"Answer": "主条目：普里姆算法Prim算法的每一步都会为一棵生长中的树添加一条边，该树最开始只有一个顶点，然后会添加\n  \n    \n      \n        V\n        −\n        1\n      \n    \n    {\\displaystyle V-1}\n  \n个边。每次总是添加生长中的树和树中除该生长的树以外的部分形成的切分的具有最小权值的横切边。\nPrim算法的时间复杂度为\n  \n    \n      \n        O\n        (\n        E\n        +\n        V\n        log\n        ⁡\n        V\n        )\n      \n    \n    {\\displaystyle O(E+V\\log V)}\n  \n。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关算法的Prim算法", "Tag": "算法设计"}
{"Answer": "主条目：克鲁斯克尔演算法按照边的权重顺序（从小到大）将边加入生成树中，但是若加入该边会与生成树形成环则不加入该边。直到树中含有\n  \n    \n      \n        V\n        −\n        1\n      \n    \n    {\\displaystyle V-1}\n  \n条边为止。这些边组成的就是该图的最小生成树。\nKruskal算法的时间复杂度为\n  \n    \n      \n        E\n        log\n        ⁡\n        E\n      \n    \n    {\\displaystyle E\\log E}\n  \n。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关算法的Kruskal算法", "Tag": "算法设计"}
{"Answer": "一些研究者希望可以找出更为高效的算法，在这方面也有了一定的成果。\nKarger，Klein & Tarjan (1995)针对边的权值可以成对比较的特殊模型提出了一个基于Borůvka算法和翻转删除算法的可以在线性时间内解决最小生成树的算法[7][8]。\n最快的非随机比较算法是由伯纳德·沙泽勒（英语：Bernard Chazelle）提出的。该算法依赖于soft heap（英语：soft heap）这样一个类似于优先级队列的数据结构[9][10] 。该算法的时间复杂度为\n  \n    \n      \n        O\n        (\n        E\n        α\n        (\n        E\n        ,\n        V\n        )\n        )\n      \n    \n    {\\displaystyle O(E\\alpha (E,V))}\n  \n。\n  \n    \n      \n        α\n      \n    \n    {\\displaystyle \\alpha }\n  \n就是阿克曼函数反函数，\n  \n    \n      \n        α\n      \n    \n    {\\displaystyle \\alpha }\n  \n的增长速度非常慢，对于一般的数值来说，其值很难超过5，所以该算法的复杂度可以近似看成是线性时间。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关算法的更快的算法", "Tag": "算法设计"}
{"Answer": "目前，既不能证明不存在能在线性时间内得到任意图的最小生成树的算法，也未能发明能够在线性时间内计算稀疏图的最小生成树的算法。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关算法的线性时间的最小生成树算法", "Tag": "算法设计"}
{"Answer": "k-最小生成树（英语：k-minimum spanning tree）：图中包含k个顶点的所有子图的所有最小生成树中权值最小的生成树。\n欧几里得最小生成树（英语：Euclidean minimum spanning tree）是一个用欧几里得距离来表示权值的连通加权图的最小生成树。\n方格线最小生成树（英语：rectilinear minimum spanning tree）是一个用曼哈顿距离来表示权值的连通加权图的最小生成树。\n容量最小生成树（英语：capacitated minimum spanning tree）是一棵树且其每个节点的子树的容量都不大于\n  \n    \n      \n        C\n      \n    \n    {\\displaystyle C}\n  \n。解决该问题是NP困难的[11]。但是伊萨·威廉姆斯和夏尔马以及提出了可以在接近多项式时间内解决该问题的启发式。\n度受限最小生成树（英语：degree-constrained spanning tree）是一棵树，其每一个顶点连接的顶点数都不超过d。对一些特定的d值，该问题类似于旅行推销员问题。该问题也是NP困难的。\n对有向图来说，其与最小生成树类似的图处理问题叫做最小树形图问题。\n最大生成树是一棵比其它所有生成树都要大或者相等的生成树。其解决方法类似于最小生成树算法。求解最大生成树的算法在自然语言处理以及条件随机场这些问题上起到很大的作用[12]。\n动态最小生成树是在已经计算完一个图的最小生成树后动态改变一些边的取值或删除/添加一些点或者边，求解新图的最小生成树[13][14][15]。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的相关问题", "Tag": "算法设计"}
{"Answer": "^1 ：用一条边链接树中的任意两个顶点都会产生一个新的环。\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的注释", "Tag": "算法设计"}
{"Answer": "\n\n^ Minimum Spanning Trees. princeton.edu. 2015-09-13  [2016-02-08]. （原始内容存档于2020-09-27） （英语）. \n\n^ Robert Sedgewick, Kevin Wayne. 算法. 北京: 人民邮电出版社. 2012年10月. ISBN 978-7-115-29380-0.  使用|accessdate=需要含有|url= (帮助)，p391--p392\n\n^ Prim, R. C., Shortest connection networks And some generalizations, Bell System Technical Journal, November 1957, 36 (6): 1389–1401, doi:10.1002/j.1538-7305.1957.tb01515.x .\n\n^ Dijkstra, E. W., A note on two problems in connexion with graphs (PDF), Numerische Mathematik, 1959, 1: 269–271  [2016-02-06], doi:10.1007/BF01386390, （原始内容存档 (PDF)于2020-01-23） .\n\n^ Jarník, V., O jistém problému minimálním [About a certain minimal problem], Práce Moravské Přírodovědecké Společnosti, 1930, 6: 57–63  [2016-02-06], （原始内容存档于2017-06-17） （捷克语） .\n\n^ Robert Sedgewick, Kevin Wayne. 算法. 北京: 人民邮电出版社. 2012年10月. ISBN 978-7-115-29380-0.  使用|accessdate=需要含有|url= (帮助)，p407--p408\n\n^ Karger, David R.; Klein, Philip N.; Tarjan, Robert E., A randomized linear-time algorithm to find minimum spanning trees, Journal of the Association for Computing Machinery, 1995, 42 (2): 321–328, MR 1409738, doi:10.1145/201019.201022 \n\n^ Pettie, Seth; Ramachandran, Vijaya, Minimizing randomness in minimum spanning tree, parallel connectivity, and set maxima algorithms, Proc. 13th ACM-SIAM Symposium on Discrete Algorithms (SODA '02), San Francisco, California: 713–722, 2002 .\n\n^ Chazelle, Bernard, A minimum spanning tree algorithm with inverse-Ackermann type complexity, Journal of the Association for Computing Machinery, 2000, 47 (6): 1028–1047, MR 1866456, doi:10.1145/355541.355562 .\n\n^ Chazelle, Bernard, The soft heap: an approximate priority queue with optimal error rate, Journal of the Association for Computing Machinery, 2000, 47 (6): 1012–1027, MR 1866455, doi:10.1145/355541.355554 .\n\n^ Jothi, Raja; Raghavachari, Balaji, Approximation Algorithms for the Capacitated Minimum Spanning Tree Problem and Its Variants in Network Design, ACM Trans. Algorithms, 2005, 1 (2): 265–282, doi:10.1145/1103963.1103967 \n\n^ McDonald, Ryan; Pereira, Fernando; Ribarov, Kiril; Hajič, Jan. Non-projective dependency parsing using spanning tree algorithms (PDF). Proc. HLT/EMNLP. 2005  [2016-02-06]. （原始内容存档 (PDF)于2020-10-01）. \n\n^ Spira, P. M.; Pan, A., On finding and updating spanning trees and shortest paths, SIAM Journal on Computing, 1975, 4 (3): 375–380, MR 0378466, doi:10.1137/0204032 .\n\n^ Holm, Jacob; de Lichtenberg, Kristian; Thorup, Mikkel, Poly-logarithmic deterministic fully dynamic algorithms for connectivity, minimum spanning tree, 2-edge, and biconnectivity, Journal of the Association for Computing Machinery, 2001, 48 (4): 723–760, MR 2144928, doi:10.1145/502090.502095 .\n\n^ Chin, F.; Houck, D., Algorithms for updating minimal spanning trees, Journal of Computer and System Sciences, 1978, 16 (3): 333–344, doi:10.1016/0022-0000(78)90022-3 .\n\n", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的参考", "Tag": "算法设计"}
{"Answer": "Otakar Boruvka on Minimum Spanning Tree Problem (translation of the both 1926 papers, comments, history) (2000) （页面存档备份，存于互联网档案馆） Jaroslav Nešetřil, Eva Milková, Helena Nesetrilová. (Section 7 gives his algorithm, which looks like a cross between Prim's and Kruskal's.)\nThomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Chapter 23: Minimum Spanning Trees, pp. 561–579.\nEisner, Jason (1997). State-of-the-art algorithms for minimum spanning trees: A tutorial discussion （页面存档备份，存于互联网档案馆）. Manuscript, University of Pennsylvania, April. 78 pp.\nKromkowski, John David. \"Still Unmelted after All These Years\", in Annual Editions, Race and Ethnic Relations, 17/e (2009 McGraw Hill) (Using minimum spanning tree as method of demographic analysis of ethnic diversity across the United States).", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的参考文献", "Tag": "算法设计"}
{"Answer": "Implemented in BGL, the Boost Graph Library （页面存档备份，存于互联网档案馆）\nThe Stony Brook Algorithm Repository - Minimum Spanning Tree codes （页面存档备份，存于互联网档案馆）\nImplemented in QuickGraph for .Net", "Konwledge_Point": "最小生成树", "Question": "什么是最小生成树的外部链接", "Tag": "算法设计"}
