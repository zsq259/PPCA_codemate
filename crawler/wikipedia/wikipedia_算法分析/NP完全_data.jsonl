{"Answer": "NP完全或NP完备 （NP-Complete，縮寫為NP-C或NPC），是計算複雜度理論中，決定性問題的等級之一。NP完备是NP与NP困难問題的交集，是NP中最難的決定性問題，所有NP問題都可以在多項式時間內被歸約（reduce to）為NP完備問題。倘若任何NP完備問題得到多項式時間內的解法，則該解法就可應用在所有NP問題上，亦可證明NP問題等於P問題，然而目前為止並未發現任何能在多項式時間內解決NP完備問題的方法。\n", "Konwledge_Point": "NP完全", "Question": "什么是NP完全", "Tag": "算法设计"}
{"Answer": "  假設P ≠ NP的複雜度類的圖解。若P = NP則三類別相同。一個決定性問題C若是為NPC（NP完備），則代表它對NP是完備的，這表示：\n它是一個NP問題\n它是一個NP困難問題\n其他屬於NP的問題都可在多項式時間內归约（reduce to）成它。可歸約（reducible）在此意指對每個問題L，總有一個多項式時間多對一變換，即一個決定性的演算法可以將實例l ∈ L轉化成實例c ∈ C，並讓c回答Yes当且仅当此答案對l也是Yes。為了證明某個NP問題A實際上是NP完備問題，證明者必須找出一個已知的NP完備問題可以歸約成A。\n本定義得到一個結論，就是若上述的C有一個多項式時間可解的演算法，則我們可以將所有的NP問題降到P之中。若欲證明一個問題是NPC，最簡單的方法是先證明它屬於NP，然後將「某個已知是NPC的問題」歸約成它。\n", "Konwledge_Point": "NP完全", "Question": "什么是NP完全的正式定義", "Tag": "算法设计"}
{"Answer": "前述定義是史提芬·古克[1]所提出。雖然NPC這個詞並沒有出現在這篇論文上任何地方。在這個資訊科學會議上，資訊科學家激動地討論NPC問題是否可以在一個確定型圖靈機上以多項式時間求解。John Hopcroft總結與會眾人的共識，認為由於沒有人能對某一命題提出駁倒對方的證明，此問題不會於現在解決。此命題就是知名的\nP和NP相等嗎？。尚未有人能提出證明，說明NPC問題是否能在多項式時間中解決，使得此問題成為著名的数学中未解决的问题。位于美国麻省剑桥市的「克雷數學研究所」（Clay Mathematics Institute，簡稱CMI）提供了一百萬美元獎金給任何可以證明P=NP或P≠NP的人。一開始很難相信NPC問題是實際存在的，但著名的古克-李芬定理說明了一切（由Leonid Levin（英语：Leonid Levin）與Cook獨立證出SAT問題是NPC問題（即Cook-Levin理論）。\n在1972年，理查德·卡普證明有好幾個問題也是NPC（請見卡普的二十一個NP-完全問題），因此除了SAT問題外，的確存在著一整類NPC問題。從古克開始，數千個問題藉由從其他NPC問題變換而證實也是NPC問題，其中很多問題被蒐集在Garey與Johnson於1979年出版的書之中[2]。\n滿足條件2（无论是否满足条件1）的問題集合被稱為NP困难。一個NP困难問題至少跟NPC問題一樣難。有一类问题已经被证明属于NP困难但不属于NP，即，这类问题至少与NP-complete一样难，但这类问题又不属于NP（自然也不属于NP-complete）。例如圍棋的必勝下法，就是这样一个問題。[1]\n", "Konwledge_Point": "NP完全", "Question": "什么是NP完全的歷史", "Tag": "算法设计"}
{"Answer": "子集合加總問題[编辑]一個NPC問題的例子是子集合加總問題，題目為\n給予一個有限數量的整數集合，找出任何一個此集合的非空子集且此子集內整數和為零。\n意即：\n  \n    \n      \n        S\n      \n    \n    {\\displaystyle S}\n  \n是一個包括若干整數的集合，找出任一一个\n  \n    \n      \n        \n          S\n          ′\n        \n        ⊂\n        S\n      \n    \n    {\\displaystyle S'\\subset S}\n  \n且\n  \n    \n      \n        \n          ∑\n          \n            x\n            ∈\n            \n              S\n              ′\n            \n          \n        \n        x\n        =\n        0\n      \n    \n    {\\displaystyle \\sum _{x\\in S'}x=0}\n  \n這個問題的答案非常容易驗證，但目前沒有任何一個夠快的方法可以在合理的時間內（意即多項式時間）找到答案。只能一個個將它的子集取出來一一測試，它的時間複雜度是\n  \n    \n      \n        O\n        (\n        \n          2\n          \n            n\n          \n        \n        )\n      \n    \n    {\\displaystyle O(2^{n})}\n  \n，\n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n  \n是此集合的元素數量。\n圖同構問題[编辑]另一個有趣的例是圖同構（isomorphism）問題，即以圖論方法決定兩個圖是否為同構。兩圖同構的直覺條件是若其中一圖可以經由移動頂點使它與另一個圖重合，則為同構。思考下列兩問題：\n圖同構：圖G1是否與圖G2同構？\n子圖同構：圖G1是否與圖G2的某一子圖同構？子圖同構問題是NPC，而圖同構問題一般認為不是P也不是NPC問題，雖然它明顯是一個NP問題。這是一個典型被認為很難卻還不是NPC問題的例子。\n其他[编辑]下表列出了一些以決定性命題表示的著名NPC問題：\n  變換流程圖。布尔可满足性问题\nN-puzzle問題（華容道問題）\n背包問題\n漢彌爾頓迴圈問題\n旅行推销员问题\n子圖同構問題：（Subgraph isomorphism problem（英语：Subgraph isomorphism problem））\n子集合加總問題\n分團問題\n頂點覆盖問題：（Vertex cover（英语：Vertex cover））\n獨立頂點集問題：（Independent set problem（英语：Independent set problem））\n圖著色問題\n踩地雷[2]更多NPC問題的例子，請見NP-complete問題列表（英语：List of NP-complete problems）。\n右邊是一些NPC問題及證明其為NPC問題的變換流程圖。在流程圖中，箭頭代表的是從何問題變換成另一問題的過程，要注意的是這張圖並不代表這些問題的數學關係，事實上任兩個本質為NPC的問題都可以以多項式時間變換，這圖僅指示可以讓研究者較為簡單地變換問題的順序。\n通常一個P與NPC問題的敘述看起來只有一些不同的地方，例如3SAT問題（SAT問題的限制版本）仍然是NPC問題，但更限制的2SAT問題則是個P問題（準確的說，是NL-complete問題），而條件較為寬鬆的MAX 2SAT問題卻又成了NPC問題。決定一個圖是否能被兩色塗滿是P問題，但三色圖是NPC問題，即使我們將它限制在平面圖上。決定一個圖有無迴圈或它是兩分圖很容易（在log空間等級），但是發現一個最大二分圖或最大迴圈子圖則是NPC。以一固定百分比來求郊遊打包問題的最佳解可以在多項式時間解決，但是求最佳解是NPC。\n", "Konwledge_Point": "NP完全", "Question": "什么是NP完全的例子", "Tag": "算法设计"}
{"Answer": "一個NPC問題的例子是子集合加總問題，題目為\n給予一個有限數量的整數集合，找出任何一個此集合的非空子集且此子集內整數和為零。\n意即：\n  \n    \n      \n        S\n      \n    \n    {\\displaystyle S}\n  \n是一個包括若干整數的集合，找出任一一个\n  \n    \n      \n        \n          S\n          ′\n        \n        ⊂\n        S\n      \n    \n    {\\displaystyle S'\\subset S}\n  \n且\n  \n    \n      \n        \n          ∑\n          \n            x\n            ∈\n            \n              S\n              ′\n            \n          \n        \n        x\n        =\n        0\n      \n    \n    {\\displaystyle \\sum _{x\\in S'}x=0}\n  \n這個問題的答案非常容易驗證，但目前沒有任何一個夠快的方法可以在合理的時間內（意即多項式時間）找到答案。只能一個個將它的子集取出來一一測試，它的時間複雜度是\n  \n    \n      \n        O\n        (\n        \n          2\n          \n            n\n          \n        \n        )\n      \n    \n    {\\displaystyle O(2^{n})}\n  \n，\n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n  \n是此集合的元素數量。\n", "Konwledge_Point": "NP完全", "Question": "什么是NP完全的例子的子集合加總問題", "Tag": "算法设计"}
{"Answer": "另一個有趣的例是圖同構（isomorphism）問題，即以圖論方法決定兩個圖是否為同構。兩圖同構的直覺條件是若其中一圖可以經由移動頂點使它與另一個圖重合，則為同構。思考下列兩問題：\n圖同構：圖G1是否與圖G2同構？\n子圖同構：圖G1是否與圖G2的某一子圖同構？子圖同構問題是NPC，而圖同構問題一般認為不是P也不是NPC問題，雖然它明顯是一個NP問題。這是一個典型被認為很難卻還不是NPC問題的例子。\n", "Konwledge_Point": "NP完全", "Question": "什么是NP完全的例子的圖同構問題", "Tag": "算法设计"}
{"Answer": "下表列出了一些以決定性命題表示的著名NPC問題：\n  變換流程圖。布尔可满足性问题\nN-puzzle問題（華容道問題）\n背包問題\n漢彌爾頓迴圈問題\n旅行推销员问题\n子圖同構問題：（Subgraph isomorphism problem（英语：Subgraph isomorphism problem））\n子集合加總問題\n分團問題\n頂點覆盖問題：（Vertex cover（英语：Vertex cover））\n獨立頂點集問題：（Independent set problem（英语：Independent set problem））\n圖著色問題\n踩地雷[2]更多NPC問題的例子，請見NP-complete問題列表（英语：List of NP-complete problems）。\n右邊是一些NPC問題及證明其為NPC問題的變換流程圖。在流程圖中，箭頭代表的是從何問題變換成另一問題的過程，要注意的是這張圖並不代表這些問題的數學關係，事實上任兩個本質為NPC的問題都可以以多項式時間變換，這圖僅指示可以讓研究者較為簡單地變換問題的順序。\n通常一個P與NPC問題的敘述看起來只有一些不同的地方，例如3SAT問題（SAT問題的限制版本）仍然是NPC問題，但更限制的2SAT問題則是個P問題（準確的說，是NL-complete問題），而條件較為寬鬆的MAX 2SAT問題卻又成了NPC問題。決定一個圖是否能被兩色塗滿是P問題，但三色圖是NPC問題，即使我們將它限制在平面圖上。決定一個圖有無迴圈或它是兩分圖很容易（在log空間等級），但是發現一個最大二分圖或最大迴圈子圖則是NPC。以一固定百分比來求郊遊打包問題的最佳解可以在多項式時間解決，但是求最佳解是NPC。\n", "Konwledge_Point": "NP完全", "Question": "什么是NP完全的例子的其他", "Tag": "算法设计"}
{"Answer": "目前為止，所有已知解NPC問題的演算法需要依照資料數量而定的超多項式（superpolynomial）時間，目前也不知道是否有任何更快的演算法存在。因此要在輸入資料量大的時候解決一個NPC問題，通常我們使用下列的手段來解：\n近似演算法：這類演算法可以快速發現離最佳解在一定差距內的次佳解。\n亂數演算法：此類演算法可提供一亂數產生的輸入資料，讓本質上解答分佈均勻的受測程式可以有良好的求解效率。對於解答分佈不均勻的程式，則可以降低亂數程度以改變輸入資料。\n特例：此演算法可以在題目呈獻某些特殊情況時快速得解。參數化複雜度（英语：Parameterized complexity）（Parameterized complexity）可視為廣義的此類演算法。\n啟發式演算法：這種演算法在許多時候可以產生理性解答（即運用評比或線索找出解），但無法保證它效率的良莠與解答的好壞程度。一個啟發式演算法的例子是用在圖著色問題以O（n log n）的貪婪演算法找次佳解，用在某些編譯器的暫存器配置階段上，此技術又叫圖著色全域暫存器配置（graph-coloring global register allocation）。每頂點視為一變數，每邊代表兩變數同時使用的情況，顏色則代表配置給每一變數的暫存器編號。由於大多數的RISC機器擁有大量通用暫存器，因此啟發式演算法很適合用來解這類題目。", "Konwledge_Point": "NP完全", "Question": "什么是NP完全的折衷的解法", "Tag": "算法设计"}
{"Answer": "依照上述NPC的定義，所謂的歸約（reduce to）其實是多項式時間多對一變換的簡稱。\n另一種歸約法稱為多项式时间图灵归约（polynomial-time Turing reduction）。若我們提供一個副函式（subroutine）可以在多項式時間解出\"Y\"，又可寫出呼叫此副函式的程式並在多項式時間解出問題\"X\"，代表我們可以將\"X\"多項式時間圖靈變換成\"Y\"。相較起來，不同處在於多對一變換只能呼叫上述副函式一次，且副函式的回傳值必須就是整個變換程式回傳的值。\n如果有人使用圖靈變換而非多對一變換來解析NPC，此問題的解答集合不一定會小於NPC。孰大孰小其實是個開放問題。如果兩個概念相同，則可導出NP=反NP（co-NP）。此結論成立的道理在於NPC與反NPC的定義以图灵归约來看是相等的，且圖靈變換定義的NPC包含多對一變換定義的NPC，反NPC也是相同情況。所以若是兩種變換定義的NPC一樣大的話，反NPC也會比照辦理（在兩者的定義之下）。例如SAT的反問題也會是NPC（在兩者的定義之下）。因此推得NP = 反NP（證明在反NP條目中）。雖然NP是否等於反NP是個開放問題，但一般認為這似乎不大可能，也因此那兩類的NPC定義也不大可能相等。\n另一種很常用於NPC證明的歸約手法是對數空間多對一變換（logarithmic-space many-one reduction），它是一種可以在對數量級空間運用的多對一變換法。由於每道可以在對數空間完成的運算也可以在多項式時間做完，因此能使用對數空間多對一變換的場合也可以使用多項式時間多對一變換。本方法較多項式時間多對一變換優雅，它也可以讓我們對演算法複雜度細分出更多分類，例如P完備複雜度。而NPC的定義是否會因為使用不同變換手法而產生差異，仍是一個未知的問題。\n", "Konwledge_Point": "NP完全", "Question": "什么是NP完全的其他歸約法", "Tag": "算法设计"}
{"Answer": "NP-complete問題列表（英语：List of NP-complete problems）\n幾乎完備（英语：Almost complete）問題與弱完備（英语：weakly complete）問題\nASR-complete\nLadner理論\nNP困难\nP/NP问题\n三维匹配问题", "Konwledge_Point": "NP完全", "Question": "什么是NP完全的参见", "Tag": "算法设计"}
{"Answer": "引用[编辑]\n\n^ 依据为《Introduction to Algorithms》3rd By Thomas H. Cormen英文版1078页，引理1\n\n^ How Complicated is Minesweeper? - Richard Kaye (PDF).   [2013-05-11]. （原始内容存档 (PDF)于2012-09-07）. \n\n书籍[编辑]^ S. A. Cook. The complexity of theorem proving procedures, Proceedings, Third Annual ACM Symposium on the Theory of Computing. New York: ACM. 1971: 151–158. \n^ Garey, M.; D. Johnson. Computers and Intractability; A Guide to the Theory of NP-Completeness. 1979. ISBN 978-0-7167-1045-5.  引文使用过时参数coauthors (帮助)（此書是發展此理論及集多種問題的經典）\nPaul E. Dunne. An Annotated List of Selected NP-complete Problems. The University of Liverpool, Dept of Computer Science, COMP202.   [2006-11-23]. （原始内容存档于2006-11-25）. \nPierluigi Crescenzi; Viggo Kann, Magnús Halldórsson, Marek Karpinski, and Gerhard Woeginger. A compendium of NP optimization problems. Stockholm: KTH NADA.   [2006-11-23]. （原始内容存档于2006-12-05）.  引文使用过时参数coauthors (帮助)\nThomas H. Cormen; Charles E. Leiserson, Ronald L. Rivest and Clifford Stein. NP-Completeness. Introduction to Algorithms Second Edition. MIT Press and McGraw-Hill. 2001: 966-1021. ISBN 978-0-262-03293-3.  引文使用过时参数coauthors (帮助) 引文格式1维护：冗余文本 (link)\nMichael Sipser. NP-completeness, Additional NP-complete Problems. Introduction to the Theory of Computation. PWS Publishing. 1997: 248-271. ISBN 978-0-534-94728-6. \nChristos Papadimitriou. NP-complete problems. Computational Complexity 1st edition. Addison Wesley. 1993: 181–218. ISBN 978-0-201-53082-7.  引文格式1维护：冗余文本 (link)网页[编辑]Computational Complexity of Games and Puzzles（页面存档备份，存于互联网档案馆）\nTetris is Hard, Even to Approximate\nMinesweeper is NP-complete!", "Konwledge_Point": "NP完全", "Question": "什么是NP完全的参考文献", "Tag": "算法设计"}
{"Answer": "\n\n^ 依据为《Introduction to Algorithms》3rd By Thomas H. Cormen英文版1078页，引理1\n\n^ How Complicated is Minesweeper? - Richard Kaye (PDF).   [2013-05-11]. （原始内容存档 (PDF)于2012-09-07）. \n\n", "Konwledge_Point": "NP完全", "Question": "什么是NP完全的参考文献的引用", "Tag": "算法设计"}
{"Answer": "^ S. A. Cook. The complexity of theorem proving procedures, Proceedings, Third Annual ACM Symposium on the Theory of Computing. New York: ACM. 1971: 151–158. \n^ Garey, M.; D. Johnson. Computers and Intractability; A Guide to the Theory of NP-Completeness. 1979. ISBN 978-0-7167-1045-5.  引文使用过时参数coauthors (帮助)（此書是發展此理論及集多種問題的經典）\nPaul E. Dunne. An Annotated List of Selected NP-complete Problems. The University of Liverpool, Dept of Computer Science, COMP202.   [2006-11-23]. （原始内容存档于2006-11-25）. \nPierluigi Crescenzi; Viggo Kann, Magnús Halldórsson, Marek Karpinski, and Gerhard Woeginger. A compendium of NP optimization problems. Stockholm: KTH NADA.   [2006-11-23]. （原始内容存档于2006-12-05）.  引文使用过时参数coauthors (帮助)\nThomas H. Cormen; Charles E. Leiserson, Ronald L. Rivest and Clifford Stein. NP-Completeness. Introduction to Algorithms Second Edition. MIT Press and McGraw-Hill. 2001: 966-1021. ISBN 978-0-262-03293-3.  引文使用过时参数coauthors (帮助) 引文格式1维护：冗余文本 (link)\nMichael Sipser. NP-completeness, Additional NP-complete Problems. Introduction to the Theory of Computation. PWS Publishing. 1997: 248-271. ISBN 978-0-534-94728-6. \nChristos Papadimitriou. NP-complete problems. Computational Complexity 1st edition. Addison Wesley. 1993: 181–218. ISBN 978-0-201-53082-7.  引文格式1维护：冗余文本 (link)", "Konwledge_Point": "NP完全", "Question": "什么是NP完全的参考文献的书籍", "Tag": "算法设计"}
{"Answer": "Computational Complexity of Games and Puzzles（页面存档备份，存于互联网档案馆）\nTetris is Hard, Even to Approximate\nMinesweeper is NP-complete!", "Konwledge_Point": "NP完全", "Question": "什么是NP完全的参考文献的网页", "Tag": "算法设计"}
